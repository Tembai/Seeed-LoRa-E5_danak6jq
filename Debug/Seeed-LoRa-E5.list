
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ab98  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea0  0801acd0  0801acd0  0002acd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bb70  0801bb70  0003012c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bb70  0801bb70  0002bb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bb78  0801bb78  0003012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bb78  0801bb78  0002bb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bb7c  0801bb7c  0002bb7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  0801bb80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000171c  2000012c  0801bcac  0003012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001848  0801bcac  00031848  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00061e84  00000000  00000000  00030156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b42e  00000000  00000000  00091fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003600  00000000  00000000  0009d408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000031f8  00000000  00000000  000a0a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002836a  00000000  00000000  000a3c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e841  00000000  00000000  000cbf6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cce74  00000000  00000000  0010a7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d761f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000df40  00000000  00000000  001d7674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000012c 	.word	0x2000012c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801acb8 	.word	0x0801acb8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000130 	.word	0x20000130
 8000174:	0801acb8 	.word	0x0801acb8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Sensor_Init>:
	return pressure;
}



void Sensor_Init(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0


	  APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Init------------------------\r\n")
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <Sensor_Init+0x14>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f019 fc06 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
//==========================================================================================
//		lps33hw_ctx_t dev_ctx; /** xxxxxxx is the used part number **/
//		dev_ctx.write_reg = platform_write;
//		dev_ctx.read_reg = platform_read;

	return;
 8000e60:	bf00      	nop
}
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	0801acd0 	.word	0x0801acd0

08000e68 <Sensor_Data>:


int32_t Sensor_Data(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8


	APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data--------------------------\r\n");
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <Sensor_Data+0x124>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2002      	movs	r0, #2
 8000e76:	f019 fbf9 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
//    platform_init();

    /* Wait sensor boot time */

//    platform_delay(BOOT_TIME);
	HAL_Delay(2000);
 8000e7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e7e:	f001 f894 	bl	8001faa <HAL_Delay>
	//	APP_LOG(TS_OFF, VLEVEL_M, "\r\n");

	stmdev_ctx_t dev_ctx;

    /* Initialize mems driver interface */
    dev_ctx.write_reg = platform_write;
 8000e82:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <Sensor_Data+0x128>)
 8000e84:	607b      	str	r3, [r7, #4]
    dev_ctx.read_reg = platform_read;
 8000e86:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <Sensor_Data+0x12c>)
 8000e88:	60bb      	str	r3, [r7, #8]
    dev_ctx.handle = &hi2c2;
 8000e8a:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <Sensor_Data+0x130>)
 8000e8c:	60fb      	str	r3, [r7, #12]
//
//    /* Initialize platform specific hardware */
//    platform_init();
//    HAL_Delay(5);
//    /* Check device ID */
    whoamI = 0;
 8000e8e:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <Sensor_Data+0x134>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
    lps33hw_device_id_get(&dev_ctx, &whoamI);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4941      	ldr	r1, [pc, #260]	; (8000f9c <Sensor_Data+0x134>)
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fa2b 	bl	80012f4 <lps33hw_device_id_get>
	APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> WhoAmI: %x\r\n",whoamI);
 8000e9e:	4b3f      	ldr	r3, [pc, #252]	; (8000f9c <Sensor_Data+0x134>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <Sensor_Data+0x138>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f019 fbde 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
//    else{
//    	while (1){APP_LOG(TS_OFF, VLEVEL_M, "ID klopt!!!!!!!\r\n");};
//    }


	lps33hw_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fa2e 	bl	8001316 <lps33hw_reset_set>

	do {
	lps33hw_reset_get(&dev_ctx, &rst);
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	4939      	ldr	r1, [pc, #228]	; (8000fa4 <Sensor_Data+0x13c>)
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fa4f 	bl	8001362 <lps33hw_reset_get>
	} while (rst);
 8000ec4:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <Sensor_Data+0x13c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1f6      	bne.n	8000eba <Sensor_Data+0x52>

	/* Enable Block Data Update */
	  lps33hw_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f977 	bl	80011c4 <lps33hw_block_data_update_set>
	  /* Set Output Data Rate */
	  lps33hw_data_rate_set(&dev_ctx, LPS33HW_ODR_10_Hz);
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2102      	movs	r1, #2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f998 	bl	8001210 <lps33hw_data_rate_set>

	  /* Read samples in polling mode (no int) */
	  while (1) {
		HAL_Delay(1000);
 8000ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee4:	f001 f861 	bl	8001faa <HAL_Delay>

	    /* Read output only if new value is available */
	    lps33hw_reg_t reg;
	    lps33hw_read_reg(&dev_ctx, LPS33HW_STATUS, (uint8_t *)&reg, 1);
 8000ee8:	463a      	mov	r2, r7
 8000eea:	1d38      	adds	r0, r7, #4
 8000eec:	2301      	movs	r3, #1
 8000eee:	2127      	movs	r1, #39	; 0x27
 8000ef0:	f000 f910 	bl	8001114 <lps33hw_read_reg>

	    if (reg.status.p_da) {
 8000ef4:	783b      	ldrb	r3, [r7, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d01e      	beq.n	8000f3e <Sensor_Data+0xd6>
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <Sensor_Data+0x140>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
	      memset(&data_raw_pressure, 0x00, sizeof(int32_t));
	      lps33hw_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4927      	ldr	r1, [pc, #156]	; (8000fa8 <Sensor_Data+0x140>)
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f9a6 	bl	800125c <lps33hw_pressure_raw_get>
	      pressure_hPa = lps33hw_from_lsb_to_hpa(data_raw_pressure);
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <Sensor_Data+0x140>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f92d 	bl	8001174 <lps33hw_from_lsb_to_hpa>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a23      	ldr	r2, [pc, #140]	; (8000fac <Sensor_Data+0x144>)
 8000f1e:	6013      	str	r3, [r2, #0]
//	      APP_LOG(TS_OFF, VLEVEL_M, "pressure [hPa]:%6.2f\r\n", pressure_hPa);
	      APP_LOG(TS_OFF, VLEVEL_M, "pressure [hPa]:%x\r\n", pressure_hPa);
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <Sensor_Data+0x144>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fa93 	bl	8000450 <__aeabi_f2d>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	e9cd 2300 	strd	r2, r3, [sp]
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <Sensor_Data+0x148>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f019 fb97 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
//	      tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
	    }

	    if (reg.status.t_da) {
 8000f3e:	783b      	ldrb	r3, [r7, #0]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0ca      	beq.n	8000ee0 <Sensor_Data+0x78>
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <Sensor_Data+0x14c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	801a      	strh	r2, [r3, #0]
	      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	      lps33hw_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4918      	ldr	r1, [pc, #96]	; (8000fb4 <Sensor_Data+0x14c>)
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 f9aa 	bl	80012ae <lps33hw_temperature_raw_get>
	      temperature_degC = lps33hw_from_lsb_to_degc(data_raw_temperature);
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <Sensor_Data+0x14c>)
 8000f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f919 	bl	8001198 <lps33hw_from_lsb_to_degc>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <Sensor_Data+0x150>)
 8000f6a:	6013      	str	r3, [r2, #0]
//	      APP_LOG(TS_OFF, VLEVEL_M, "temperature [degC]:%6.2f\r\n", temperature_degC );
	      APP_LOG(TS_OFF, VLEVEL_M, "temperature [degC]:%x\r\n", temperature_degC );
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <Sensor_Data+0x150>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fa6d 	bl	8000450 <__aeabi_f2d>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	e9cd 2300 	strd	r2, r3, [sp]
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <Sensor_Data+0x154>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2002      	movs	r0, #2
 8000f86:	f019 fb71 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
	  while (1) {
 8000f8a:	e7a9      	b.n	8000ee0 <Sensor_Data+0x78>
 8000f8c:	0801acf8 	.word	0x0801acf8
 8000f90:	08000fc1 	.word	0x08000fc1
 8000f94:	08001099 	.word	0x08001099
 8000f98:	20001610 	.word	0x20001610
 8000f9c:	20000158 	.word	0x20000158
 8000fa0:	0801ad20 	.word	0x0801ad20
 8000fa4:	20000159 	.word	0x20000159
 8000fa8:	20000148 	.word	0x20000148
 8000fac:	20000150 	.word	0x20000150
 8000fb0:	0801ad3c 	.word	0x0801ad3c
 8000fb4:	2000014c 	.word	0x2000014c
 8000fb8:	20000154 	.word	0x20000154
 8000fbc:	0801ad50 	.word	0x0801ad50

08000fc0 <platform_write>:

	 return;
}


int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len){
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	460b      	mov	r3, r1
 8000fce:	72fb      	strb	r3, [r7, #11]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	813b      	strh	r3, [r7, #8]
 8000fd4:	466b      	mov	r3, sp
 8000fd6:	461d      	mov	r5, r3
//			message[i]=Bufp[i];
//		}
//    }


    uint8_t buffer[len+1];
 8000fd8:	893b      	ldrh	r3, [r7, #8]
 8000fda:	1c5c      	adds	r4, r3, #1
 8000fdc:	1e63      	subs	r3, r4, #1
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f04f 0100 	mov.w	r1, #0
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	00cb      	lsls	r3, r1, #3
 8000ff2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ff6:	00c2      	lsls	r2, r0, #3
 8000ff8:	4623      	mov	r3, r4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f04f 0100 	mov.w	r1, #0
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	00cb      	lsls	r3, r1, #3
 800100a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800100e:	00c2      	lsls	r2, r0, #3
 8001010:	4623      	mov	r3, r4
 8001012:	3307      	adds	r3, #7
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	ebad 0d03 	sub.w	sp, sp, r3
 800101c:	ab02      	add	r3, sp, #8
 800101e:	3300      	adds	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
    if (len>0){
 8001022:	893b      	ldrh	r3, [r7, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d016      	beq.n	8001056 <platform_write+0x96>
		for (int i=1;i<(len+1);i++){
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	e00c      	b.n	8001048 <platform_write+0x88>
			buffer[i]=Bufp[i-1];
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b01      	subs	r3, #1
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	7819      	ldrb	r1, [r3, #0]
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	4413      	add	r3, r2
 800103e:	460a      	mov	r2, r1
 8001040:	701a      	strb	r2, [r3, #0]
		for (int i=1;i<(len+1);i++){
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	893b      	ldrh	r3, [r7, #8]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	429a      	cmp	r2, r3
 800104e:	ddee      	ble.n	800102e <platform_write+0x6e>
			}
		buffer[0]=Reg;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	7afa      	ldrb	r2, [r7, #11]
 8001054:	701a      	strb	r2, [r3, #0]
//    	if(arg[x]){
//    		z++;
//    }
//    }

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, buffer, (len+1), 1000);
 8001056:	23ba      	movs	r3, #186	; 0xba
 8001058:	b299      	uxth	r1, r3
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	893b      	ldrh	r3, [r7, #8]
 800105e:	3301      	adds	r3, #1
 8001060:	b29b      	uxth	r3, r3
 8001062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001066:	9000      	str	r0, [sp, #0]
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <platform_write+0xd0>)
 800106a:	f003 ffcd 	bl	8005008 <HAL_I2C_Master_Transmit>
 800106e:	4603      	mov	r3, r0
 8001070:	74fb      	strb	r3, [r7, #19]

	if (ret){
 8001072:	7cfb      	ldrb	r3, [r7, #19]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <platform_write+0xc4>
		  APP_LOG(TS_OFF, VLEVEL_M, "Er ging iets mis!");
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <platform_write+0xd4>)
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2002      	movs	r0, #2
 8001080:	f019 faf4 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 8001084:	7cfb      	ldrb	r3, [r7, #19]
 8001086:	46ad      	mov	sp, r5
}
 8001088:	4618      	mov	r0, r3
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bdb0      	pop	{r4, r5, r7, pc}
 8001090:	20001610 	.word	0x20001610
 8001094:	0801ada8 	.word	0x0801ada8

08001098 <platform_read>:



int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af02      	add	r7, sp, #8
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	461a      	mov	r2, r3
 80010a4:	460b      	mov	r3, r1
 80010a6:	72fb      	strb	r3, [r7, #11]
 80010a8:	4613      	mov	r3, r2
 80010aa:	813b      	strh	r3, [r7, #8]
    HAL_StatusTypeDef ret;
    uint8_t reg[1];

    reg[0]=Reg;
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	753b      	strb	r3, [r7, #20]



	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, reg, 0, 1000);
 80010b0:	23ba      	movs	r3, #186	; 0xba
 80010b2:	b299      	uxth	r1, r3
 80010b4:	f107 0214 	add.w	r2, r7, #20
 80010b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2300      	movs	r3, #0
 80010c0:	4812      	ldr	r0, [pc, #72]	; (800110c <platform_read+0x74>)
 80010c2:	f003 ffa1 	bl	8005008 <HAL_I2C_Master_Transmit>
 80010c6:	4603      	mov	r3, r0
 80010c8:	75fb      	strb	r3, [r7, #23]
	if(len>0 && !ret){
 80010ca:	893b      	ldrh	r3, [r7, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00f      	beq.n	80010f0 <platform_read+0x58>
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <platform_read+0x58>
		ret=HAL_I2C_Master_Receive(&hi2c2, addr_read, Bufp, len, 1000);
 80010d6:	23bb      	movs	r3, #187	; 0xbb
 80010d8:	b299      	uxth	r1, r3
 80010da:	893b      	ldrh	r3, [r7, #8]
 80010dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010e0:	9200      	str	r2, [sp, #0]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <platform_read+0x74>)
 80010e6:	f004 f883 	bl	80051f0 <HAL_I2C_Master_Receive>
 80010ea:	4603      	mov	r3, r0
 80010ec:	75fb      	strb	r3, [r7, #23]
 80010ee:	e008      	b.n	8001102 <platform_read+0x6a>
	}
	else if(ret){
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <platform_read+0x6a>
	  APP_LOG(TS_OFF, VLEVEL_M, "Kan geen verbinding maken met de sensor!\n");
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <platform_read+0x78>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2002      	movs	r0, #2
 80010fe:	f019 fab5 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
	}


	return ret;
 8001102:	7dfb      	ldrb	r3, [r7, #23]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20001610 	.word	0x20001610
 8001110:	0801adbc 	.word	0x0801adbc

08001114 <lps33hw_read_reg>:
  *
  */
int32_t lps33hw_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	461a      	mov	r2, r3
 8001120:	460b      	mov	r3, r1
 8001122:	72fb      	strb	r3, [r7, #11]
 8001124:	4613      	mov	r3, r2
 8001126:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	685c      	ldr	r4, [r3, #4]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6898      	ldr	r0, [r3, #8]
 8001130:	893b      	ldrh	r3, [r7, #8]
 8001132:	7af9      	ldrb	r1, [r7, #11]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	47a0      	blx	r4
 8001138:	6178      	str	r0, [r7, #20]

  return ret;
 800113a:	697b      	ldr	r3, [r7, #20]
}
 800113c:	4618      	mov	r0, r3
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd90      	pop	{r4, r7, pc}

08001144 <lps33hw_write_reg>:
  *
  */
int32_t lps33hw_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	461a      	mov	r2, r3
 8001150:	460b      	mov	r3, r1
 8001152:	72fb      	strb	r3, [r7, #11]
 8001154:	4613      	mov	r3, r2
 8001156:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681c      	ldr	r4, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6898      	ldr	r0, [r3, #8]
 8001160:	893b      	ldrh	r3, [r7, #8]
 8001162:	7af9      	ldrb	r1, [r7, #11]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	47a0      	blx	r4
 8001168:	6178      	str	r0, [r7, #20]

  return ret;
 800116a:	697b      	ldr	r3, [r7, #20]
}
 800116c:	4618      	mov	r0, r3
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <lps33hw_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps33hw_from_lsb_to_hpa(int32_t lsb)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 4096.0f);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fb29 	bl	80007d4 <__aeabi_i2f>
 8001182:	4603      	mov	r3, r0
 8001184:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fc2b 	bl	80009e4 <__aeabi_fdiv>
 800118e:	4603      	mov	r3, r0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <lps33hw_from_lsb_to_degc>:

float_t lps33hw_from_lsb_to_degc(int16_t lsb)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fb14 	bl	80007d4 <__aeabi_i2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4904      	ldr	r1, [pc, #16]	; (80011c0 <lps33hw_from_lsb_to_degc+0x28>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fc17 	bl	80009e4 <__aeabi_fdiv>
 80011b6:	4603      	mov	r3, r0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	42c80000 	.word	0x42c80000

080011c4 <lps33hw_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70fb      	strb	r3, [r7, #3]
  lps33hw_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80011d0:	f107 0208 	add.w	r2, r7, #8
 80011d4:	2301      	movs	r3, #1
 80011d6:	2110      	movs	r1, #16
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff9b 	bl	8001114 <lps33hw_read_reg>
 80011de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10f      	bne.n	8001206 <lps33hw_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	7a3b      	ldrb	r3, [r7, #8]
 80011f0:	f362 0341 	bfi	r3, r2, #1, #1
 80011f4:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80011f6:	f107 0208 	add.w	r2, r7, #8
 80011fa:	2301      	movs	r3, #1
 80011fc:	2110      	movs	r1, #16
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffa0 	bl	8001144 <lps33hw_write_reg>
 8001204:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <lps33hw_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_data_rate_set(stmdev_ctx_t *ctx, lps33hw_odr_t val)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
  lps33hw_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800121c:	f107 0208 	add.w	r2, r7, #8
 8001220:	2301      	movs	r3, #1
 8001222:	2110      	movs	r1, #16
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff75 	bl	8001114 <lps33hw_read_reg>
 800122a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10f      	bne.n	8001252 <lps33hw_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	b2da      	uxtb	r2, r3
 800123a:	7a3b      	ldrb	r3, [r7, #8]
 800123c:	f362 1306 	bfi	r3, r2, #4, #3
 8001240:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001242:	f107 0208 	add.w	r2, r7, #8
 8001246:	2301      	movs	r3, #1
 8001248:	2110      	movs	r1, #16
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff7a 	bl	8001144 <lps33hw_write_reg>
 8001250:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <lps33hw_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps33hw_read_reg(ctx, LPS33HW_PRESS_OUT_XL, reg, 3);
 8001266:	f107 0208 	add.w	r2, r7, #8
 800126a:	2303      	movs	r3, #3
 800126c:	2128      	movs	r1, #40	; 0x28
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff50 	bl	8001114 <lps33hw_read_reg>
 8001274:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8001276:	7abb      	ldrb	r3, [r7, #10]
 8001278:	461a      	mov	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	7a7a      	ldrb	r2, [r7, #9]
 8001286:	441a      	add	r2, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	7a3a      	ldrb	r2, [r7, #8]
 8001294:	441a      	add	r2, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	021a      	lsls	r2, r3, #8
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	601a      	str	r2, [r3, #0]

  return ret;
 80012a4:	68fb      	ldr	r3, [r7, #12]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <lps33hw_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;

  ret =  lps33hw_read_reg(ctx, LPS33HW_TEMP_OUT_L, (uint8_t *) reg, 2);
 80012b8:	f107 0208 	add.w	r2, r7, #8
 80012bc:	2302      	movs	r3, #2
 80012be:	212b      	movs	r1, #43	; 0x2b
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff27 	bl	8001114 <lps33hw_read_reg>
 80012c6:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80012c8:	7a7b      	ldrb	r3, [r7, #9]
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b29a      	uxth	r2, r3
 80012dc:	7a3b      	ldrb	r3, [r7, #8]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	801a      	strh	r2, [r3, #0]

  return ret;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <lps33hw_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps33hw_read_reg(ctx, LPS33HW_WHO_AM_I, (uint8_t *) buff, 1);
 80012fe:	2301      	movs	r3, #1
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	210f      	movs	r1, #15
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff05 	bl	8001114 <lps33hw_read_reg>
 800130a:	60f8      	str	r0, [r7, #12]

  return ret;
 800130c:	68fb      	ldr	r3, [r7, #12]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <lps33hw_reset_set>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	70fb      	strb	r3, [r7, #3]
  lps33hw_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001322:	f107 0208 	add.w	r2, r7, #8
 8001326:	2301      	movs	r3, #1
 8001328:	2111      	movs	r1, #17
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fef2 	bl	8001114 <lps33hw_read_reg>
 8001330:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10f      	bne.n	8001358 <lps33hw_reset_set+0x42>
  {
    ctrl_reg2.swreset = val;
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	b2da      	uxtb	r2, r3
 8001340:	7a3b      	ldrb	r3, [r7, #8]
 8001342:	f362 0382 	bfi	r3, r2, #2, #1
 8001346:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001348:	f107 0208 	add.w	r2, r7, #8
 800134c:	2301      	movs	r3, #1
 800134e:	2111      	movs	r1, #17
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fef7 	bl	8001144 <lps33hw_write_reg>
 8001356:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001358:	68fb      	ldr	r3, [r7, #12]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <lps33hw_reset_get>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  lps33hw_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800136c:	f107 0208 	add.w	r2, r7, #8
 8001370:	2301      	movs	r3, #1
 8001372:	2111      	movs	r1, #17
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fecd 	bl	8001114 <lps33hw_read_reg>
 800137a:	60f8      	str	r0, [r7, #12]
  *val = ctrl_reg2.swreset;
 800137c:	7a3b      	ldrb	r3, [r7, #8]
 800137e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	701a      	strb	r2, [r3, #0]

  return ret;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800139c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b8:	68fb      	ldr	r3, [r7, #12]
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80013cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013da:	4013      	ands	r3, r2
 80013dc:	660b      	str	r3, [r1, #96]	; 0x60
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <MX_ADC_Init+0x94>)
 80013ee:	4a24      	ldr	r2, [pc, #144]	; (8001480 <MX_ADC_Init+0x98>)
 80013f0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_ADC_Init+0x94>)
 80013f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013f8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <MX_ADC_Init+0x94>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_ADC_Init+0x94>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_ADC_Init+0x94>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_ADC_Init+0x94>)
 800140e:	2204      	movs	r2, #4
 8001410:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_ADC_Init+0x94>)
 8001414:	2200      	movs	r2, #0
 8001416:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_ADC_Init+0x94>)
 800141a:	2200      	movs	r2, #0
 800141c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_ADC_Init+0x94>)
 8001420:	2200      	movs	r2, #0
 8001422:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <MX_ADC_Init+0x94>)
 8001426:	2201      	movs	r2, #1
 8001428:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_ADC_Init+0x94>)
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_ADC_Init+0x94>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_ADC_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_ADC_Init+0x94>)
 8001440:	2200      	movs	r2, #0
 8001442:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <MX_ADC_Init+0x94>)
 8001448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_ADC_Init+0x94>)
 8001450:	2207      	movs	r2, #7
 8001452:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_ADC_Init+0x94>)
 8001456:	2207      	movs	r2, #7
 8001458:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_ADC_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_ADC_Init+0x94>)
 8001464:	2200      	movs	r2, #0
 8001466:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_ADC_Init+0x94>)
 800146a:	f001 ff41 	bl	80032f0 <HAL_ADC_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001474:	f000 faa2 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200015ac 	.word	0x200015ac
 8001480:	40012400 	.word	0x40012400

08001484 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <HAL_ADC_MspInit+0x24>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d103      	bne.n	800149e <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001496:	f44f 7000 	mov.w	r0, #512	; 0x200
 800149a:	f7ff ff7b 	bl	8001394 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40012400 	.word	0x40012400

080014ac <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <HAL_ADC_MspDeInit+0x24>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d103      	bne.n	80014c6 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80014be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014c2:	f7ff ff7f 	bl	80013c4 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40012400 	.word	0x40012400

080014d4 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <SYS_InitMeasurement+0x14>)
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <SYS_InitMeasurement+0x18>)
 80014dc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	200015ac 	.word	0x200015ac
 80014ec:	40012400 	.word	0x40012400

080014f0 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80014fe:	f000 f871 	bl	80015e4 <SYS_GetBatteryLevel>
 8001502:	4603      	mov	r3, r0
 8001504:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001506:	4830      	ldr	r0, [pc, #192]	; (80015c8 <SYS_GetTemperatureLevel+0xd8>)
 8001508:	f000 f8a0 	bl	800164c <ADC_ReadChannels>
 800150c:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800150e:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <SYS_GetTemperatureLevel+0xdc>)
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <SYS_GetTemperatureLevel+0xe0>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d026      	beq.n	8001568 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800151a:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <SYS_GetTemperatureLevel+0xdc>)
 800151c:	881a      	ldrh	r2, [r3, #0]
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <SYS_GetTemperatureLevel+0xe0>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d01c      	beq.n	8001560 <SYS_GetTemperatureLevel+0x70>
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	4a28      	ldr	r2, [pc, #160]	; (80015d4 <SYS_GetTemperatureLevel+0xe4>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	461a      	mov	r2, r3
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <SYS_GetTemperatureLevel+0xe0>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2264      	movs	r2, #100	; 0x64
 8001542:	fb02 f203 	mul.w	r2, r2, r3
 8001546:	4b21      	ldr	r3, [pc, #132]	; (80015cc <SYS_GetTemperatureLevel+0xdc>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	4619      	mov	r1, r3
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <SYS_GetTemperatureLevel+0xe0>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	1acb      	subs	r3, r1, r3
 8001552:	fb92 f3f3 	sdiv	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	331e      	adds	r3, #30
 800155a:	b29b      	uxth	r3, r3
 800155c:	b21b      	sxth	r3, r3
 800155e:	e001      	b.n	8001564 <SYS_GetTemperatureLevel+0x74>
 8001560:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001564:	81fb      	strh	r3, [r7, #14]
 8001566:	e01c      	b.n	80015a2 <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	fb02 f203 	mul.w	r2, r2, r3
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <SYS_GetTemperatureLevel+0xe8>)
 8001572:	fba3 1302 	umull	r1, r3, r3, r2
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	0852      	lsrs	r2, r2, #1
 800157a:	4413      	add	r3, r2
 800157c:	0adb      	lsrs	r3, r3, #11
 800157e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001582:	fb02 f303 	mul.w	r3, r2, r3
 8001586:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800158a:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800158e:	4a13      	ldr	r2, [pc, #76]	; (80015dc <SYS_GetTemperatureLevel+0xec>)
 8001590:	fb82 1203 	smull	r1, r2, r2, r3
 8001594:	1292      	asrs	r2, r2, #10
 8001596:	17db      	asrs	r3, r3, #31
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b29b      	uxth	r3, r3
 800159c:	331e      	adds	r3, #30
 800159e:	b29b      	uxth	r3, r3
 80015a0:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 80015a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <SYS_GetTemperatureLevel+0xf0>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	2100      	movs	r1, #0
 80015ae:	2001      	movs	r0, #1
 80015b0:	f019 f85c 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 80015b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 80015bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	b0001000 	.word	0xb0001000
 80015cc:	1fff75c8 	.word	0x1fff75c8
 80015d0:	1fff75a8 	.word	0x1fff75a8
 80015d4:	09ee009f 	.word	0x09ee009f
 80015d8:	00100101 	.word	0x00100101
 80015dc:	68db8bad 	.word	0x68db8bad
 80015e0:	0801ade8 	.word	0x0801ade8

080015e4 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015f2:	4813      	ldr	r0, [pc, #76]	; (8001640 <SYS_GetBatteryLevel+0x5c>)
 80015f4:	f000 f82a 	bl	800164c <ADC_ReadChannels>
 80015f8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	80fb      	strh	r3, [r7, #6]
 8001604:	e016      	b.n	8001634 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <SYS_GetBatteryLevel+0x60>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800160e:	4293      	cmp	r3, r2
 8001610:	d00b      	beq.n	800162a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <SYS_GetBatteryLevel+0x60>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	f640 43e4 	movw	r3, #3300	; 0xce4
 800161c:	fb03 f202 	mul.w	r2, r3, r2
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	e004      	b.n	8001634 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800162a:	4a07      	ldr	r2, [pc, #28]	; (8001648 <SYS_GetBatteryLevel+0x64>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001634:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	b4002000 	.word	0xb4002000
 8001644:	1fff75aa 	.word	0x1fff75aa
 8001648:	004c08d8 	.word	0x004c08d8

0800164c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001664:	f7ff fec0 	bl	80013e8 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001668:	481a      	ldr	r0, [pc, #104]	; (80016d4 <ADC_ReadChannels+0x88>)
 800166a:	f002 fc27 	bl	8003ebc <HAL_ADCEx_Calibration_Start>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001674:	f000 f9a2 	bl	80019bc <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4619      	mov	r1, r3
 800168a:	4812      	ldr	r0, [pc, #72]	; (80016d4 <ADC_ReadChannels+0x88>)
 800168c:	f002 f98e 	bl	80039ac <HAL_ADC_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001696:	f000 f991 	bl	80019bc <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <ADC_ReadChannels+0x88>)
 800169c:	f002 f86a 	bl	8003774 <HAL_ADC_Start>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80016a6:	f000 f989 	bl	80019bc <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80016aa:	f04f 31ff 	mov.w	r1, #4294967295
 80016ae:	4809      	ldr	r0, [pc, #36]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016b0:	f002 f8d8 	bl	8003864 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 80016b4:	4807      	ldr	r0, [pc, #28]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016b6:	f002 f8a3 	bl	8003800 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016bc:	f002 f969 	bl	8003992 <HAL_ADC_GetValue>
 80016c0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80016c2:	4804      	ldr	r0, [pc, #16]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016c4:	f001 ffda 	bl	800367c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80016c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200015ac 	.word	0x200015ac

080016d8 <LL_AHB1_GRP1_EnableClock>:
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016fc:	68fb      	ldr	r3, [r7, #12]
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800170c:	2004      	movs	r0, #4
 800170e:	f7ff ffe3 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff ffe0 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2102      	movs	r1, #2
 800171c:	200b      	movs	r0, #11
 800171e:	f002 fd20 	bl	8004162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001722:	200b      	movs	r0, #11
 8001724:	f002 fd37 	bl	8004196 <HAL_NVIC_EnableIRQ>

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <LL_AHB2_GRP1_EnableClock>:
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800173a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4313      	orrs	r3, r2
 8001742:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001750:	68fb      	ldr	r3, [r7, #12]
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <LL_APB1_GRP1_EnableClock>:
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001768:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800176a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001778:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001780:	68fb      	ldr	r3, [r7, #12]
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <MX_I2C2_Init+0x74>)
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <MX_I2C2_Init+0x78>)
 8001794:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_I2C2_Init+0x74>)
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <MX_I2C2_Init+0x7c>)
 800179a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <MX_I2C2_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_I2C2_Init+0x74>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_I2C2_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_I2C2_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_I2C2_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_I2C2_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_I2C2_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017c6:	480e      	ldr	r0, [pc, #56]	; (8001800 <MX_I2C2_Init+0x74>)
 80017c8:	f003 fb8e 	bl	8004ee8 <HAL_I2C_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017d2:	f000 f8f3 	bl	80019bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d6:	2100      	movs	r1, #0
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <MX_I2C2_Init+0x74>)
 80017da:	f003 ffed 	bl	80057b8 <HAL_I2CEx_ConfigAnalogFilter>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017e4:	f000 f8ea 	bl	80019bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017e8:	2100      	movs	r1, #0
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_I2C2_Init+0x74>)
 80017ec:	f004 f82e 	bl	800584c <HAL_I2CEx_ConfigDigitalFilter>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017f6:	f000 f8e1 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20001610 	.word	0x20001610
 8001804:	40005800 	.word	0x40005800
 8001808:	20303e5d 	.word	0x20303e5d

0800180c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b096      	sub	sp, #88	; 0x58
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2238      	movs	r2, #56	; 0x38
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f019 f9bb 	bl	801aba8 <memset>
  if(i2cHandle->Instance==I2C2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_I2C_MspInit+0xb0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d13b      	bne.n	80018b4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001840:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4618      	mov	r0, r3
 800184c:	f005 fa34 	bl	8006cb8 <HAL_RCCEx_PeriphCLKConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001856:	f000 f8b1 	bl	80019bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2001      	movs	r0, #1
 800185c:	f7ff ff66 	bl	800172c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	2002      	movs	r0, #2
 8001862:	f7ff ff63 	bl	800172c <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800186a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186c:	2312      	movs	r3, #18
 800186e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001878:	2304      	movs	r3, #4
 800187a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001880:	4619      	mov	r1, r3
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f003 f8b9 	bl	80049fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800188a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001890:	2312      	movs	r3, #18
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800189c:	2304      	movs	r3, #4
 800189e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <HAL_I2C_MspInit+0xb4>)
 80018a8:	f003 f8a8 	bl	80049fc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018ac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018b0:	f7ff ff54 	bl	800175c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018b4:	bf00      	nop
 80018b6:	3758      	adds	r7, #88	; 0x58
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40005800 	.word	0x40005800
 80018c0:	48000400 	.word	0x48000400

080018c4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d4:	f023 0218 	bic.w	r2, r3, #24
 80018d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4313      	orrs	r3, r2
 80018e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f2:	f001 fb31 	bl	8002f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f6:	f000 f807 	bl	8001908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 80018fa:	f008 fc71 	bl	800a1e0 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 80018fe:	f7ff ff45 	bl	800178c <MX_I2C2_Init>
    /* USER CODE END WHILE */
//    MX_LoRaWAN_Process();

    /* USER CODE BEGIN 3 */

	  Sensor_Data();
 8001902:	f7ff fab1 	bl	8000e68 <Sensor_Data>
  {
 8001906:	e7fc      	b.n	8001902 <main+0x14>

08001908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b09a      	sub	sp, #104	; 0x68
 800190c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190e:	f107 0320 	add.w	r3, r7, #32
 8001912:	2248      	movs	r2, #72	; 0x48
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f019 f946 	bl	801aba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800192e:	f003 ffd9 	bl	80058e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001932:	2000      	movs	r0, #0
 8001934:	f7ff ffc6 	bl	80018c4 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <SystemClock_Config+0xb0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001940:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <SystemClock_Config+0xb0>)
 8001942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <SystemClock_Config+0xb0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001954:	2324      	movs	r3, #36	; 0x24
 8001956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001958:	2381      	movs	r3, #129	; 0x81
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800195c:	2301      	movs	r3, #1
 800195e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001960:	2300      	movs	r3, #0
 8001962:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001964:	23b0      	movs	r3, #176	; 0xb0
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001968:	2300      	movs	r3, #0
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4618      	mov	r0, r3
 8001972:	f004 fa61 	bl	8005e38 <HAL_RCC_OscConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800197c:	f000 f81e 	bl	80019bc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001980:	234f      	movs	r3, #79	; 0x4f
 8001982:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	2102      	movs	r1, #2
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 fde4 	bl	800656c <HAL_RCC_ClockConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019aa:	f000 f807 	bl	80019bc <Error_Handler>
  }
}
 80019ae:	bf00      	nop
 80019b0:	3768      	adds	r7, #104	; 0x68
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	58000400 	.word	0x58000400

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
}
 80019c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <Error_Handler+0x8>

080019c6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <LL_APB1_GRP1_EnableClock>:
{
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4013      	ands	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
	...

08001a18 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	222c      	movs	r2, #44	; 0x2c
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f019 f8bf 	bl	801aba8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <MX_RTC_Init+0x9c>)
 8001a2c:	4a22      	ldr	r2, [pc, #136]	; (8001ab8 <MX_RTC_Init+0xa0>)
 8001a2e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001a30:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <MX_RTC_Init+0x9c>)
 8001a32:	221f      	movs	r2, #31
 8001a34:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <MX_RTC_Init+0x9c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <MX_RTC_Init+0x9c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <MX_RTC_Init+0x9c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <MX_RTC_Init+0x9c>)
 8001a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a4e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <MX_RTC_Init+0x9c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_RTC_Init+0x9c>)
 8001a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a5e:	4815      	ldr	r0, [pc, #84]	; (8001ab4 <MX_RTC_Init+0x9c>)
 8001a60:	f005 fa44 	bl	8006eec <HAL_RTC_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001a6a:	f7ff ffa7 	bl	80019bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001a6e:	4811      	ldr	r0, [pc, #68]	; (8001ab4 <MX_RTC_Init+0x9c>)
 8001a70:	f005 fd32 	bl	80074d8 <HAL_RTCEx_SetSSRU_IT>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001a7a:	f7ff ff9f 	bl	80019bc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001a8a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a8e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_RTC_Init+0x9c>)
 8001a9e:	f005 fa9f 	bl	8006fe0 <HAL_RTC_SetAlarm_IT>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001aa8:	f7ff ff88 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	3730      	adds	r7, #48	; 0x30
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	2000165c 	.word	0x2000165c
 8001ab8:	40002800 	.word	0x40002800

08001abc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b090      	sub	sp, #64	; 0x40
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	2238      	movs	r2, #56	; 0x38
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f019 f86b 	bl	801aba8 <memset>
  if(rtcHandle->Instance==RTC)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <HAL_RTC_MspInit+0x74>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d125      	bne.n	8001b28 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ae0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae8:	f107 0308 	add.w	r3, r7, #8
 8001aec:	4618      	mov	r0, r3
 8001aee:	f005 f8e3 	bl	8006cb8 <HAL_RCCEx_PeriphCLKConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001af8:	f7ff ff60 	bl	80019bc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001afc:	f7ff ff63 	bl	80019c6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b00:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b04:	f7ff ff6f 	bl	80019e6 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f002 fb28 	bl	8004162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001b12:	2002      	movs	r0, #2
 8001b14:	f002 fb3f 	bl	8004196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	202a      	movs	r0, #42	; 0x2a
 8001b1e:	f002 fb20 	bl	8004162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b22:	202a      	movs	r0, #42	; 0x2a
 8001b24:	f002 fb37 	bl	8004196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3740      	adds	r7, #64	; 0x40
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40002800 	.word	0x40002800

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <NMI_Handler+0x4>

08001b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <HardFault_Handler+0x4>

08001b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <MemManage_Handler+0x4>

08001b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
	...

08001b90 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001b96:	f005 fcdb 	bl	8007550 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000165c 	.word	0x2000165c

08001ba4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <DMA1_Channel1_IRQHandler+0x10>)
 8001baa:	f002 fd8b 	bl	80046c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200016a0 	.word	0x200016a0

08001bb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <USART1_IRQHandler+0x10>)
 8001bbe:	f006 fb27 	bl	8008210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20001700 	.word	0x20001700

08001bcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001bd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bd4:	f003 f970 	bl	8004eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <RTC_Alarm_IRQHandler+0x10>)
 8001be2:	f005 fb65 	bl	80072b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000165c 	.word	0x2000165c

08001bf0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001bf6:	f006 f813 	bl	8007c20 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20001694 	.word	0x20001694

08001c04 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_SUBGHZ_Init+0x20>)
 8001c3a:	2208      	movs	r2, #8
 8001c3c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_SUBGHZ_Init+0x20>)
 8001c40:	f005 fd72 	bl	8007728 <HAL_SUBGHZ_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001c4a:	f7ff feb7 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20001694 	.word	0x20001694

08001c58 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001c60:	2001      	movs	r0, #1
 8001c62:	f7ff ffcf 	bl	8001c04 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2032      	movs	r0, #50	; 0x32
 8001c6c:	f002 fa79 	bl	8004162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001c70:	2032      	movs	r0, #50	; 0x32
 8001c72:	f002 fa90 	bl	8004196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001ca8:	4b02      	ldr	r3, [pc, #8]	; (8001cb4 <LL_FLASH_GetUDN+0x10>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	1fff7580 	.word	0x1fff7580

08001cb8 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <LL_FLASH_GetDeviceID+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b2db      	uxtb	r3, r3
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	1fff7584 	.word	0x1fff7584

08001cd0 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <LL_FLASH_GetSTCompanyID+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	1fff7584 	.word	0x1fff7584

08001ce8 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff ffc6 	bl	8001c7e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001cf2:	f018 f9fd 	bl	801a0f0 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 8001cf6:	f000 f991 	bl	800201c <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001cfa:	f000 f9b1 	bl	8002060 <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001cfe:	f018 fc87 	bl	801a610 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001d02:	480b      	ldr	r0, [pc, #44]	; (8001d30 <SystemApp_Init+0x48>)
 8001d04:	f018 fd34 	bl	801a770 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001d08:	2002      	movs	r0, #2
 8001d0a:	f018 fd3f 	bl	801a78c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001d0e:	f7ff fbe1 	bl	80014d4 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001d12:	f000 fa6f 	bl	80021f4 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001d16:	f017 fcf1 	bl	80196fc <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f017 fd2d 	bl	801977c <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001d22:	2101      	movs	r1, #1
 8001d24:	2001      	movs	r0, #1
 8001d26:	f017 fcf9 	bl	801971c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08001efd 	.word	0x08001efd

08001d34 <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001d3e:	f7ff fc51 	bl	80015e4 <SYS_GetBatteryLevel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001d46:	88bb      	ldrh	r3, [r7, #4]
 8001d48:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d902      	bls.n	8001d56 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001d50:	23fe      	movs	r3, #254	; 0xfe
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	e014      	b.n	8001d80 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001d5c:	d202      	bcs.n	8001d64 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	71fb      	strb	r3, [r7, #7]
 8001d62:	e00d      	b.n	8001d80 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001d64:	88bb      	ldrh	r3, [r7, #4]
 8001d66:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	01db      	lsls	r3, r3, #7
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <GetBatteryLevel+0x68>)
 8001d78:	fba3 2302 	umull	r2, r3, r3, r2
 8001d7c:	09db      	lsrs	r3, r3, #7
 8001d7e:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <GetBatteryLevel+0x6c>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f018 fc6e 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001d90:	79fb      	ldrb	r3, [r7, #7]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	1b4e81b5 	.word	0x1b4e81b5
 8001da0:	0801adf4 	.word	0x0801adf4

08001da4 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001dae:	f7ff fb9f 	bl	80014f0 <SYS_GetTemperatureLevel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	da00      	bge.n	8001dba <GetTemperatureLevel+0x16>
 8001db8:	33ff      	adds	r3, #255	; 0xff
 8001dba:	121b      	asrs	r3, r3, #8
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001dca:	b590      	push	{r4, r7, lr}
 8001dcc:	b087      	sub	sp, #28
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001dd6:	f7ff ff65 	bl	8001ca4 <LL_FLASH_GetUDN>
 8001dda:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de2:	d138      	bne.n	8001e56 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001de4:	f001 f8d8 	bl	8002f98 <HAL_GetUIDw0>
 8001de8:	4604      	mov	r4, r0
 8001dea:	f001 f8e9 	bl	8002fc0 <HAL_GetUIDw2>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4423      	add	r3, r4
 8001df2:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001df4:	f001 f8da 	bl	8002fac <HAL_GetUIDw1>
 8001df8:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	0e1a      	lsrs	r2, r3, #24
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3307      	adds	r3, #7
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	0c1a      	lsrs	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3306      	adds	r3, #6
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	0a1a      	lsrs	r2, r3, #8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3305      	adds	r3, #5
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3304      	adds	r3, #4
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	0e1a      	lsrs	r2, r3, #24
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3303      	adds	r3, #3
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	0c1a      	lsrs	r2, r3, #16
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	0a1a      	lsrs	r2, r3, #8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3301      	adds	r3, #1
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001e54:	e031      	b.n	8001eba <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3307      	adds	r3, #7
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	0a1a      	lsrs	r2, r3, #8
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3306      	adds	r3, #6
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	0c1a      	lsrs	r2, r3, #16
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3305      	adds	r3, #5
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	0e1a      	lsrs	r2, r3, #24
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001e84:	f7ff ff18 	bl	8001cb8 <LL_FLASH_GetDeviceID>
 8001e88:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001e94:	f7ff ff1c 	bl	8001cd0 <LL_FLASH_GetSTCompanyID>
 8001e98:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	0a1a      	lsrs	r2, r3, #8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	701a      	strb	r2, [r3, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd90      	pop	{r4, r7, pc}

08001ec2 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001ec2:	b590      	push	{r4, r7, lr}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001ecc:	f7ff feea 	bl	8001ca4 <LL_FLASH_GetUDN>
 8001ed0:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d10b      	bne.n	8001ef2 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001eda:	f001 f85d 	bl	8002f98 <HAL_GetUIDw0>
 8001ede:	4604      	mov	r4, r0
 8001ee0:	f001 f864 	bl	8002fac <HAL_GetUIDw1>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	405c      	eors	r4, r3
 8001ee8:	f001 f86a 	bl	8002fc0 <HAL_GetUIDw2>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4063      	eors	r3, r4
 8001ef0:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001ef2:	687b      	ldr	r3, [r7, #4]

}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd90      	pop	{r4, r7, pc}

08001efc <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f017 fd40 	bl	8019990 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f16:	9200      	str	r2, [sp, #0]
 8001f18:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <TimestampNow+0x3c>)
 8001f1a:	2110      	movs	r1, #16
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f81d 	bl	8001f5c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe f928 	bl	8000178 <strlen>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	0801ae00 	.word	0x0801ae00

08001f3c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001f40:	2101      	movs	r1, #1
 8001f42:	2002      	movs	r0, #2
 8001f44:	f017 fbea 	bl	801971c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001f50:	2100      	movs	r1, #0
 8001f52:	2002      	movs	r0, #2
 8001f54:	f017 fbe2 	bl	801971c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001f5c:	b40c      	push	{r2, r3}
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001f6e:	6839      	ldr	r1, [r7, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f017 fedf 	bl	8019d38 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f84:	b002      	add	sp, #8
 8001f86:	4770      	bx	lr

08001f88 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001fa0:	f000 f9f0 	bl	8002384 <TIMER_IF_GetTimerValue>
 8001fa4:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fa65 	bl	8002484 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <LL_AHB2_GRP1_EnableClock>:
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
	...

08001ff4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <LL_EXTI_EnableIT_32_63+0x24>)
 8001ffe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002002:	4905      	ldr	r1, [pc, #20]	; (8002018 <LL_EXTI_EnableIT_32_63+0x24>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	58000800 	.word	0x58000800

0800201c <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 8002020:	2000      	movs	r0, #0
 8002022:	f000 f802 	bl	800202a <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}

0800202a <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d106      	bne.n	800204c <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 800203e:	f000 ffc9 	bl	8002fd4 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8002042:	f000 ffd3 	bl	8002fec <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8002046:	f000 ffdd 	bl	8003004 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 800204a:	e005      	b.n	8002058 <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 800204c:	f000 ffc8 	bl	8002fe0 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8002050:	f000 ffd2 	bl	8002ff8 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8002054:	f000 ffdc 	bl	8003010 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_1 */

  /* SW probes */

#if defined (PROBE_PINS_ENABLED) && ( PROBE_PINS_ENABLED == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002074:	2301      	movs	r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8002078:	2301      	movs	r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002080:	2001      	movs	r0, #1
 8002082:	f7ff ff9e 	bl	8001fc2 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8002086:	2002      	movs	r0, #2
 8002088:	f7ff ff9b 	bl	8001fc2 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 800208c:	2002      	movs	r0, #2
 800208e:	f7ff ff98 	bl	8001fc2 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002092:	2002      	movs	r0, #2
 8002094:	f7ff ff95 	bl	8001fc2 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002098:	2301      	movs	r3, #1
 800209a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	4619      	mov	r1, r3
 80020a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a4:	f002 fcaa 	bl	80049fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80020a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ac:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	483a      	ldr	r0, [pc, #232]	; (800219c <DBG_ProbesInit+0x13c>)
 80020b4:	f002 fca2 	bl	80049fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80020b8:	2308      	movs	r3, #8
 80020ba:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	4836      	ldr	r0, [pc, #216]	; (800219c <DBG_ProbesInit+0x13c>)
 80020c2:	f002 fc9b 	bl	80049fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 80020c6:	2310      	movs	r3, #16
 80020c8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4833      	ldr	r0, [pc, #204]	; (800219c <DBG_ProbesInit+0x13c>)
 80020d0:	f002 fc94 	bl	80049fc <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2101      	movs	r1, #1
 80020d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020dc:	f002 febc 	bl	8004e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e6:	482d      	ldr	r0, [pc, #180]	; (800219c <DBG_ProbesInit+0x13c>)
 80020e8:	f002 feb6 	bl	8004e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2108      	movs	r1, #8
 80020f0:	482a      	ldr	r0, [pc, #168]	; (800219c <DBG_ProbesInit+0x13c>)
 80020f2:	f002 feb1 	bl	8004e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2110      	movs	r1, #16
 80020fa:	4828      	ldr	r0, [pc, #160]	; (800219c <DBG_ProbesInit+0x13c>)
 80020fc:	f002 feac 	bl	8004e58 <HAL_GPIO_WritePin>

  /* USER CODE END DBG_ProbesInit_2 */
  /* HW alternate functions for monitoring RF */

  /* Configure the GPIO pin */
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	613b      	str	r3, [r7, #16]

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 800210c:	23f0      	movs	r3, #240	; 0xf0
 800210e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8002110:	230d      	movs	r3, #13
 8002112:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002114:	2001      	movs	r0, #1
 8002116:	f7ff ff54 	bl	8001fc2 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	4619      	mov	r1, r3
 800211e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002122:	f002 fc6b 	bl	80049fc <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 800212e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002132:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 8002134:	2306      	movs	r3, #6
 8002136:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002138:	2001      	movs	r0, #1
 800213a:	f7ff ff42 	bl	8001fc2 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002146:	f002 fc59 	bl	80049fc <HAL_GPIO_Init>

  /* LDO_rdy & BUCK_rdy (SMPS) */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 8002152:	2304      	movs	r3, #4
 8002154:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8002156:	230d      	movs	r3, #13
 8002158:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	2002      	movs	r0, #2
 800215c:	f7ff ff31 	bl	8001fc2 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	4619      	mov	r1, r3
 8002164:	480d      	ldr	r0, [pc, #52]	; (800219c <DBG_ProbesInit+0x13c>)
 8002166:	f002 fc49 	bl	80049fc <HAL_GPIO_Init>

  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 8002172:	2310      	movs	r3, #16
 8002174:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8002176:	230d      	movs	r3, #13
 8002178:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	2002      	movs	r0, #2
 800217c:	f7ff ff21 	bl	8001fc2 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <DBG_ProbesInit+0x13c>)
 8002186:	f002 fc39 	bl	80049fc <HAL_GPIO_Init>
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 800218a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800218e:	f7ff ff31 	bl	8001ff4 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	48000400 	.word	0x48000400

080021a0 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <EnvSensors_Read+0x40>)
 80021aa:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <EnvSensors_Read+0x44>)
 80021ae:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <EnvSensors_Read+0x48>)
 80021b2:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a08      	ldr	r2, [pc, #32]	; (80021ec <EnvSensors_Read+0x4c>)
 80021ca:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <EnvSensors_Read+0x50>)
 80021d0:	611a      	str	r2, [r3, #16]

  return 0;
 80021d2:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	42480000 	.word	0x42480000
 80021e4:	41900000 	.word	0x41900000
 80021e8:	447a0000 	.word	0x447a0000
 80021ec:	003e090d 	.word	0x003e090d
 80021f0:	000503ab 	.word	0x000503ab

080021f4 <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80021f8:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <TIMER_IF_Init+0x5c>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	f083 0301 	eor.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01b      	beq.n	8002274 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <TIMER_IF_Init+0x60>)
 800223e:	f04f 32ff 	mov.w	r2, #4294967295
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002244:	f7ff fbe8 	bl	8001a18 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002248:	f000 f856 	bl	80022f8 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800224c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <TIMER_IF_Init+0x60>)
 8002252:	f004 ffd1 	bl	80071f8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <TIMER_IF_Init+0x60>)
 8002258:	f04f 32ff 	mov.w	r2, #4294967295
 800225c:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800225e:	4809      	ldr	r0, [pc, #36]	; (8002284 <TIMER_IF_Init+0x60>)
 8002260:	f005 f908 	bl	8007474 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002264:	2000      	movs	r0, #0
 8002266:	f000 f9cf 	bl	8002608 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800226a:	f000 f85f 	bl	800232c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <TIMER_IF_Init+0x5c>)
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002274:	79fb      	ldrb	r3, [r7, #7]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000015a 	.word	0x2000015a
 8002284:	2000165c 	.word	0x2000165c

08002288 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08e      	sub	sp, #56	; 0x38
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	222c      	movs	r2, #44	; 0x2c
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f018 fc82 	bl	801aba8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80022a4:	f000 f828 	bl	80022f8 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <TIMER_IF_StartTimer+0x68>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80022c0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022c4:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80022c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	2201      	movs	r2, #1
 80022d2:	4619      	mov	r1, r3
 80022d4:	4807      	ldr	r0, [pc, #28]	; (80022f4 <TIMER_IF_StartTimer+0x6c>)
 80022d6:	f004 fe83 	bl	8006fe0 <HAL_RTC_SetAlarm_IT>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80022e0:	f7ff fb6c 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80022e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3738      	adds	r7, #56	; 0x38
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000015c 	.word	0x2000015c
 80022f4:	2000165c 	.word	0x2000165c

080022f8 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <TIMER_IF_StopTimer+0x2c>)
 8002304:	2201      	movs	r2, #1
 8002306:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230c:	4806      	ldr	r0, [pc, #24]	; (8002328 <TIMER_IF_StopTimer+0x30>)
 800230e:	f004 ff73 	bl	80071f8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <TIMER_IF_StopTimer+0x30>)
 8002314:	f04f 32ff 	mov.w	r2, #4294967295
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800231a:	79fb      	ldrb	r3, [r7, #7]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40002800 	.word	0x40002800
 8002328:	2000165c 	.word	0x2000165c

0800232c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002330:	f000 f98a 	bl	8002648 <GetTimerTicks>
 8002334:	4603      	mov	r3, r0
 8002336:	4a03      	ldr	r2, [pc, #12]	; (8002344 <TIMER_IF_SetTimerContext+0x18>)
 8002338:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800233a:	4b02      	ldr	r3, [pc, #8]	; (8002344 <TIMER_IF_SetTimerContext+0x18>)
 800233c:	681b      	ldr	r3, [r3, #0]
}
 800233e:	4618      	mov	r0, r3
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000015c 	.word	0x2000015c

08002348 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800234c:	4b02      	ldr	r3, [pc, #8]	; (8002358 <TIMER_IF_GetTimerContext+0x10>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	2000015c 	.word	0x2000015c

0800235c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002366:	f000 f96f 	bl	8002648 <GetTimerTicks>
 800236a:	4602      	mov	r2, r0
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <TIMER_IF_GetTimerElapsedTime+0x24>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002374:	687b      	ldr	r3, [r7, #4]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000015c 	.word	0x2000015c

08002384 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <TIMER_IF_GetTimerValue+0x24>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002396:	f000 f957 	bl	8002648 <GetTimerTicks>
 800239a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 800239c:	687b      	ldr	r3, [r7, #4]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	2000015a 	.word	0x2000015a

080023ac <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80023b6:	2303      	movs	r3, #3
 80023b8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80023ba:	687b      	ldr	r3, [r7, #4]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80023c6:	b5b0      	push	{r4, r5, r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	461a      	mov	r2, r3
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	0d95      	lsrs	r5, r2, #22
 80023dc:	0294      	lsls	r4, r2, #10
 80023de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	4620      	mov	r0, r4
 80023e8:	4629      	mov	r1, r5
 80023ea:	f7fe fbb7 	bl	8000b5c <__aeabi_uldivmod>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4613      	mov	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bdb0      	pop	{r4, r5, r7, pc}

08002400 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002400:	b4b0      	push	{r4, r5, r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4618      	mov	r0, r3
 8002410:	f04f 0100 	mov.w	r1, #0
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	f04f 0400 	mov.w	r4, #0
 800241c:	f04f 0500 	mov.w	r5, #0
 8002420:	015d      	lsls	r5, r3, #5
 8002422:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002426:	0154      	lsls	r4, r2, #5
 8002428:	4622      	mov	r2, r4
 800242a:	462b      	mov	r3, r5
 800242c:	1a12      	subs	r2, r2, r0
 800242e:	eb63 0301 	sbc.w	r3, r3, r1
 8002432:	f04f 0400 	mov.w	r4, #0
 8002436:	f04f 0500 	mov.w	r5, #0
 800243a:	009d      	lsls	r5, r3, #2
 800243c:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8002440:	0094      	lsls	r4, r2, #2
 8002442:	4622      	mov	r2, r4
 8002444:	462b      	mov	r3, r5
 8002446:	1812      	adds	r2, r2, r0
 8002448:	eb41 0303 	adc.w	r3, r1, r3
 800244c:	f04f 0000 	mov.w	r0, #0
 8002450:	f04f 0100 	mov.w	r1, #0
 8002454:	00d9      	lsls	r1, r3, #3
 8002456:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800245a:	00d0      	lsls	r0, r2, #3
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	0a82      	lsrs	r2, r0, #10
 800246e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002472:	0a8b      	lsrs	r3, r1, #10
 8002474:	4613      	mov	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002478:	68fb      	ldr	r3, [r7, #12]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bcb0      	pop	{r4, r5, r7}
 8002482:	4770      	bx	lr

08002484 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff9a 	bl	80023c6 <TIMER_IF_Convert_ms2Tick>
 8002492:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002494:	f000 f8d8 	bl	8002648 <GetTimerTicks>
 8002498:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800249a:	e000      	b.n	800249e <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800249c:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800249e:	f000 f8d3 	bl	8002648 <GetTimerTicks>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d8f6      	bhi.n	800249c <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80024c0:	f017 ff64 	bl	801a38c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80024d4:	f000 f8a8 	bl	8002628 <TIMER_IF_BkUp_Read_MSBticks>
 80024d8:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	3301      	adds	r3, #1
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f892 	bl	8002608 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80024ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024f0:	b088      	sub	sp, #32
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80024fa:	f000 f8a5 	bl	8002648 <GetTimerTicks>
 80024fe:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002500:	f000 f892 	bl	8002628 <TIMER_IF_BkUp_Read_MSBticks>
 8002504:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	4618      	mov	r0, r3
 800250a:	f04f 0100 	mov.w	r1, #0
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	0003      	movs	r3, r0
 8002518:	2200      	movs	r2, #0
 800251a:	69b9      	ldr	r1, [r7, #24]
 800251c:	4608      	mov	r0, r1
 800251e:	f04f 0100 	mov.w	r1, #0
 8002522:	eb12 0800 	adds.w	r8, r2, r0
 8002526:	eb43 0901 	adc.w	r9, r3, r1
 800252a:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800252e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	0a82      	lsrs	r2, r0, #10
 800253c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002540:	0a8b      	lsrs	r3, r1, #10
 8002542:	4613      	mov	r3, r2
 8002544:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	461a      	mov	r2, r3
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	ea02 0400 	and.w	r4, r2, r0
 800255a:	ea03 0501 	and.w	r5, r3, r1
 800255e:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff4b 	bl	8002400 <TIMER_IF_Convert_Tick2ms>
 800256a:	4603      	mov	r3, r0
 800256c:	b29a      	uxth	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002572:	69fb      	ldr	r3, [r7, #28]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002580 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	2100      	movs	r1, #0
 800258c:	4803      	ldr	r0, [pc, #12]	; (800259c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800258e:	f005 f803 	bl	8007598 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	2000165c 	.word	0x2000165c

080025a0 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	2101      	movs	r1, #1
 80025ac:	4803      	ldr	r0, [pc, #12]	; (80025bc <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80025ae:	f004 fff3 	bl	8007598 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	2000165c 	.word	0x2000165c

080025c0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80025ca:	2100      	movs	r1, #0
 80025cc:	4804      	ldr	r0, [pc, #16]	; (80025e0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80025ce:	f004 fffb 	bl	80075c8 <HAL_RTCEx_BKUPRead>
 80025d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80025d4:	687b      	ldr	r3, [r7, #4]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000165c 	.word	0x2000165c

080025e4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80025ee:	2101      	movs	r1, #1
 80025f0:	4804      	ldr	r0, [pc, #16]	; (8002604 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80025f2:	f004 ffe9 	bl	80075c8 <HAL_RTCEx_BKUPRead>
 80025f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80025f8:	687b      	ldr	r3, [r7, #4]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000165c 	.word	0x2000165c

08002608 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	2102      	movs	r1, #2
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002616:	f004 ffbf 	bl	8007598 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000165c 	.word	0x2000165c

08002628 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800262e:	2102      	movs	r1, #2
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002632:	f004 ffc9 	bl	80075c8 <HAL_RTCEx_BKUPRead>
 8002636:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002638:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000165c 	.word	0x2000165c

08002648 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 800264c:	4803      	ldr	r0, [pc, #12]	; (800265c <GetTimerTicks+0x14>)
 800264e:	f7ff fdde 	bl	800220e <LL_RTC_TIME_GetSubSecond>
 8002652:	4603      	mov	r3, r0
 8002654:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002656:	4618      	mov	r0, r3
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40002800 	.word	0x40002800

08002660 <LL_AHB2_GRP1_EnableClock>:
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800266e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4313      	orrs	r3, r2
 8002676:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002684:	68fb      	ldr	r3, [r7, #12]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <LL_APB2_GRP1_EnableClock>:
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800269e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4013      	ands	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026b4:	68fb      	ldr	r3, [r7, #12]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <LL_APB2_GRP1_DisableClock>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026d6:	4013      	ands	r3, r2
 80026d8:	660b      	str	r3, [r1, #96]	; 0x60
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <MX_USART1_UART_Init+0x90>)
 80026ea:	4a23      	ldr	r2, [pc, #140]	; (8002778 <MX_USART1_UART_Init+0x94>)
 80026ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026ee:	4b21      	ldr	r3, [pc, #132]	; (8002774 <MX_USART1_UART_Init+0x90>)
 80026f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026f6:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <MX_USART1_UART_Init+0x90>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <MX_USART1_UART_Init+0x90>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <MX_USART1_UART_Init+0x90>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <MX_USART1_UART_Init+0x90>)
 800270a:	220c      	movs	r2, #12
 800270c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <MX_USART1_UART_Init+0x90>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <MX_USART1_UART_Init+0x90>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <MX_USART1_UART_Init+0x90>)
 800271c:	2200      	movs	r2, #0
 800271e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <MX_USART1_UART_Init+0x90>)
 8002722:	2200      	movs	r2, #0
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <MX_USART1_UART_Init+0x90>)
 8002728:	2200      	movs	r2, #0
 800272a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800272c:	4811      	ldr	r0, [pc, #68]	; (8002774 <MX_USART1_UART_Init+0x90>)
 800272e:	f005 fc36 	bl	8007f9e <HAL_UART_Init>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002738:	f7ff f940 	bl	80019bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800273c:	2100      	movs	r1, #0
 800273e:	480d      	ldr	r0, [pc, #52]	; (8002774 <MX_USART1_UART_Init+0x90>)
 8002740:	f007 fc63 	bl	800a00a <HAL_UARTEx_SetTxFifoThreshold>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800274a:	f7ff f937 	bl	80019bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800274e:	2100      	movs	r1, #0
 8002750:	4808      	ldr	r0, [pc, #32]	; (8002774 <MX_USART1_UART_Init+0x90>)
 8002752:	f007 fc98 	bl	800a086 <HAL_UARTEx_SetRxFifoThreshold>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800275c:	f7ff f92e 	bl	80019bc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002760:	4804      	ldr	r0, [pc, #16]	; (8002774 <MX_USART1_UART_Init+0x90>)
 8002762:	f007 fc17 	bl	8009f94 <HAL_UARTEx_EnableFifoMode>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800276c:	f7ff f926 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20001700 	.word	0x20001700
 8002778:	40013800 	.word	0x40013800

0800277c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b096      	sub	sp, #88	; 0x58
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	2238      	movs	r2, #56	; 0x38
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f018 fa03 	bl	801aba8 <memset>
  if(uartHandle->Instance==USART1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a2f      	ldr	r2, [pc, #188]	; (8002864 <HAL_UART_MspInit+0xe8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d156      	bne.n	800285a <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027ac:	2301      	movs	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027b0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80027b4:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 fa7c 	bl	8006cb8 <HAL_RCCEx_PeriphCLKConfig>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027c6:	f7ff f8f9 	bl	80019bc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027ce:	f7ff ff5f 	bl	8002690 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d2:	2002      	movs	r0, #2
 80027d4:	f7ff ff44 	bl	8002660 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80027d8:	23c0      	movs	r3, #192	; 0xc0
 80027da:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e4:	2303      	movs	r3, #3
 80027e6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027e8:	2307      	movs	r3, #7
 80027ea:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027f0:	4619      	mov	r1, r3
 80027f2:	481d      	ldr	r0, [pc, #116]	; (8002868 <HAL_UART_MspInit+0xec>)
 80027f4:	f002 f902 	bl	80049fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <HAL_UART_MspInit+0xf0>)
 80027fa:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_UART_MspInit+0xf4>)
 80027fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80027fe:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_UART_MspInit+0xf0>)
 8002800:	2212      	movs	r2, #18
 8002802:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_UART_MspInit+0xf0>)
 8002806:	2210      	movs	r2, #16
 8002808:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_UART_MspInit+0xf0>)
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <HAL_UART_MspInit+0xf0>)
 8002812:	2280      	movs	r2, #128	; 0x80
 8002814:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_UART_MspInit+0xf0>)
 8002818:	2200      	movs	r2, #0
 800281a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_UART_MspInit+0xf0>)
 800281e:	2200      	movs	r2, #0
 8002820:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_UART_MspInit+0xf0>)
 8002824:	2200      	movs	r2, #0
 8002826:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002828:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_UART_MspInit+0xf0>)
 800282a:	2200      	movs	r2, #0
 800282c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800282e:	480f      	ldr	r0, [pc, #60]	; (800286c <HAL_UART_MspInit+0xf0>)
 8002830:	f001 fcce 	bl	80041d0 <HAL_DMA_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800283a:	f7ff f8bf 	bl	80019bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <HAL_UART_MspInit+0xf0>)
 8002842:	679a      	str	r2, [r3, #120]	; 0x78
 8002844:	4a09      	ldr	r2, [pc, #36]	; (800286c <HAL_UART_MspInit+0xf0>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2102      	movs	r1, #2
 800284e:	2024      	movs	r0, #36	; 0x24
 8002850:	f001 fc87 	bl	8004162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002854:	2024      	movs	r0, #36	; 0x24
 8002856:	f001 fc9e 	bl	8004196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800285a:	bf00      	nop
 800285c:	3758      	adds	r7, #88	; 0x58
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40013800 	.word	0x40013800
 8002868:	48000400 	.word	0x48000400
 800286c:	200016a0 	.word	0x200016a0
 8002870:	40020008 	.word	0x40020008

08002874 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <HAL_UART_MspDeInit+0x3c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10f      	bne.n	80028a6 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002886:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800288a:	f7ff ff19 	bl	80026c0 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800288e:	21c0      	movs	r1, #192	; 0xc0
 8002890:	4808      	ldr	r0, [pc, #32]	; (80028b4 <HAL_UART_MspDeInit+0x40>)
 8002892:	f002 fa13 	bl	8004cbc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800289a:	4618      	mov	r0, r3
 800289c:	f001 fd40 	bl	8004320 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80028a0:	2024      	movs	r0, #36	; 0x24
 80028a2:	f001 fc86 	bl	80041b2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40013800 	.word	0x40013800
 80028b4:	48000400 	.word	0x48000400

080028b8 <LL_APB2_GRP1_ForceReset>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	640b      	str	r3, [r1, #64]	; 0x40
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <LL_APB2_GRP1_ReleaseReset>:
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028f0:	4013      	ands	r3, r2
 80028f2:	640b      	str	r3, [r1, #64]	; 0x40
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
	...

08002900 <LL_EXTI_EnableIT_0_31>:
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <LL_EXTI_EnableIT_0_31+0x24>)
 800290a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800290e:	4905      	ldr	r1, [pc, #20]	; (8002924 <LL_EXTI_EnableIT_0_31+0x24>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	58000800 	.word	0x58000800

08002928 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002930:	4a07      	ldr	r2, [pc, #28]	; (8002950 <vcom_Init+0x28>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002936:	f7fe fee7 	bl	8001708 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800293a:	f7ff fed3 	bl	80026e4 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800293e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002942:	f7ff ffdd 	bl	8002900 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002946:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000160 	.word	0x20000160

08002954 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002958:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800295c:	f7ff ffac 	bl	80028b8 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002960:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002964:	f7ff ffb9 	bl	80028da <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002968:	4804      	ldr	r0, [pc, #16]	; (800297c <vcom_DeInit+0x28>)
 800296a:	f7ff ff83 	bl	8002874 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800296e:	200f      	movs	r0, #15
 8002970:	f001 fc1f 	bl	80041b2 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002974:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002976:	4618      	mov	r0, r3
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20001700 	.word	0x20001700

08002980 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800298c:	887b      	ldrh	r3, [r7, #2]
 800298e:	461a      	mov	r2, r3
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4804      	ldr	r0, [pc, #16]	; (80029a4 <vcom_Trace_DMA+0x24>)
 8002994:	f005 fbaa 	bl	80080ec <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002998:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20001700 	.word	0x20001700

080029a8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80029b0:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <vcom_ReceiveInit+0x70>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80029b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029ba:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80029bc:	f107 0308 	add.w	r3, r7, #8
 80029c0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80029c4:	4815      	ldr	r0, [pc, #84]	; (8002a1c <vcom_ReceiveInit+0x74>)
 80029c6:	f007 fa58 	bl	8009e7a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80029ca:	bf00      	nop
 80029cc:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <vcom_ReceiveInit+0x74>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029da:	d0f7      	beq.n	80029cc <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80029dc:	bf00      	nop
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <vcom_ReceiveInit+0x74>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ec:	d1f7      	bne.n	80029de <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <vcom_ReceiveInit+0x74>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <vcom_ReceiveInit+0x74>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80029fc:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80029fe:	4807      	ldr	r0, [pc, #28]	; (8002a1c <vcom_ReceiveInit+0x74>)
 8002a00:	f007 fa96 	bl	8009f30 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002a04:	2201      	movs	r2, #1
 8002a06:	4906      	ldr	r1, [pc, #24]	; (8002a20 <vcom_ReceiveInit+0x78>)
 8002a08:	4804      	ldr	r0, [pc, #16]	; (8002a1c <vcom_ReceiveInit+0x74>)
 8002a0a:	f005 fb19 	bl	8008040 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002a0e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000164 	.word	0x20000164
 8002a1c:	20001700 	.word	0x20001700
 8002a20:	20001790 	.word	0x20001790

08002a24 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <HAL_UART_TxCpltCallback+0x18>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2000      	movs	r0, #0
 8002a32:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000160 	.word	0x20000160

08002a40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_UART_RxCpltCallback+0x38>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_UART_RxCpltCallback+0x26>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d105      	bne.n	8002a66 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_UART_RxCpltCallback+0x38>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2101      	movs	r1, #1
 8002a62:	4806      	ldr	r0, [pc, #24]	; (8002a7c <HAL_UART_RxCpltCallback+0x3c>)
 8002a64:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8002a66:	2201      	movs	r2, #1
 8002a68:	4904      	ldr	r1, [pc, #16]	; (8002a7c <HAL_UART_RxCpltCallback+0x3c>)
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f005 fae8 	bl	8008040 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000164 	.word	0x20000164
 8002a7c:	20001790 	.word	0x20001790

08002a80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a80:	480d      	ldr	r0, [pc, #52]	; (8002ab8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a84:	f7ff fbbd 	bl	8002202 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a88:	480c      	ldr	r0, [pc, #48]	; (8002abc <LoopForever+0x6>)
  ldr r1, =_edata
 8002a8a:	490d      	ldr	r1, [pc, #52]	; (8002ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <LoopForever+0xe>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a90:	e002      	b.n	8002a98 <LoopCopyDataInit>

08002a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a96:	3304      	adds	r3, #4

08002a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a9c:	d3f9      	bcc.n	8002a92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002aa0:	4c0a      	ldr	r4, [pc, #40]	; (8002acc <LoopForever+0x16>)
  movs r3, #0
 8002aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa4:	e001      	b.n	8002aaa <LoopFillZerobss>

08002aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa8:	3204      	adds	r2, #4

08002aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aac:	d3fb      	bcc.n	8002aa6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002aae:	f018 f857 	bl	801ab60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ab2:	f7fe ff1c 	bl	80018ee <main>

08002ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ab6:	e7fe      	b.n	8002ab6 <LoopForever>
  ldr   r0, =_estack
 8002ab8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac0:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8002ac4:	0801bb80 	.word	0x0801bb80
  ldr r2, =_sbss
 8002ac8:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8002acc:	20001848 	.word	0x20001848

08002ad0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ad0:	e7fe      	b.n	8002ad0 <ADC_IRQHandler>

08002ad2 <LL_AHB2_GRP1_EnableClock>:
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4013      	ands	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
	...

08002b04 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	4a18      	ldr	r2, [pc, #96]	; (8002b84 <BSP_LED_Init+0x80>)
 8002b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e024      	b.n	8002b7c <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002b32:	2002      	movs	r0, #2
 8002b34:	f7ff ffcd 	bl	8002ad2 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <BSP_LED_Init+0x80>)
 8002b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b40:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002b42:	2301      	movs	r3, #1
 8002b44:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	4a0d      	ldr	r2, [pc, #52]	; (8002b88 <BSP_LED_Init+0x84>)
 8002b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b56:	f107 020c 	add.w	r2, r7, #12
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 ff4d 	bl	80049fc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	4a08      	ldr	r2, [pc, #32]	; (8002b88 <BSP_LED_Init+0x84>)
 8002b66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <BSP_LED_Init+0x80>)
 8002b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b72:	2200      	movs	r2, #0
 8002b74:	4619      	mov	r1, r3
 8002b76:	f002 f96f 	bl	8004e58 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	0801b698 	.word	0x0801b698
 8002b88:	20000004 	.word	0x20000004

08002b8c <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	4a0c      	ldr	r2, [pc, #48]	; (8002bcc <BSP_LED_On+0x40>)
 8002b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e00c      	b.n	8002bc4 <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <BSP_LED_On+0x44>)
 8002bae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <BSP_LED_On+0x40>)
 8002bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f002 f94b 	bl	8004e58 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	0801b698 	.word	0x0801b698
 8002bd0:	20000004 	.word	0x20000004

08002bd4 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <BSP_LED_Off+0x40>)
 8002be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e00c      	b.n	8002c0c <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <BSP_LED_Off+0x44>)
 8002bf6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <BSP_LED_Off+0x40>)
 8002bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c02:	2201      	movs	r2, #1
 8002c04:	4619      	mov	r1, r3
 8002c06:	f002 f927 	bl	8004e58 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	0801b698 	.word	0x0801b698
 8002c18:	20000004 	.word	0x20000004

08002c1c <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <BSP_LED_Toggle+0x40>)
 8002c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e00c      	b.n	8002c54 <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <BSP_LED_Toggle+0x44>)
 8002c3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	4905      	ldr	r1, [pc, #20]	; (8002c5c <BSP_LED_Toggle+0x40>)
 8002c46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f002 f91a 	bl	8004e86 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	0801b698 	.word	0x0801b698
 8002c60:	20000004 	.word	0x20000004

08002c64 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	460a      	mov	r2, r1
 8002c6e:	71fb      	strb	r3, [r7, #7]
 8002c70:	4613      	mov	r3, r2
 8002c72:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002c74:	f107 030c 	add.w	r3, r7, #12
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	4a30      	ldr	r2, [pc, #192]	; (8002d48 <BSP_PB_Init+0xe4>)
 8002c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e055      	b.n	8002d40 <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <BSP_PB_Init+0x3c>
 8002c9a:	2002      	movs	r0, #2
 8002c9c:	f7ff ff19 	bl	8002ad2 <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	4a2a      	ldr	r2, [pc, #168]	; (8002d4c <BSP_PB_Init+0xe8>)
 8002ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ca8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002caa:	2301      	movs	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002cb2:	79bb      	ldrb	r3, [r7, #6]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10c      	bne.n	8002cd2 <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <BSP_PB_Init+0xec>)
 8002cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc4:	f107 020c 	add.w	r2, r7, #12
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 fe96 	bl	80049fc <HAL_GPIO_Init>
 8002cd0:	e035      	b.n	8002d3e <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002cd2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002cd6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <BSP_PB_Init+0xec>)
 8002cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce0:	f107 020c 	add.w	r2, r7, #12
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 fe88 	bl	80049fc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4a18      	ldr	r2, [pc, #96]	; (8002d54 <BSP_PB_Init+0xf0>)
 8002cf2:	441a      	add	r2, r3
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	4918      	ldr	r1, [pc, #96]	; (8002d58 <BSP_PB_Init+0xf4>)
 8002cf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f001 fe69 	bl	80049d6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <BSP_PB_Init+0xf0>)
 8002d0a:	1898      	adds	r0, r3, r2
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <BSP_PB_Init+0xe4>)
 8002d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d14:	461a      	mov	r2, r3
 8002d16:	2100      	movs	r1, #0
 8002d18:	f001 fe44 	bl	80049a4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	4a0f      	ldr	r2, [pc, #60]	; (8002d5c <BSP_PB_Init+0xf8>)
 8002d20:	56d0      	ldrsb	r0, [r2, r3]
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <BSP_PB_Init+0xfc>)
 8002d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f001 fa18 	bl	8004162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <BSP_PB_Init+0xf8>)
 8002d36:	56d3      	ldrsb	r3, [r2, r3]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 fa2c 	bl	8004196 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	2000001c 	.word	0x2000001c
 8002d4c:	0801b6a0 	.word	0x0801b6a0
 8002d50:	20000010 	.word	0x20000010
 8002d54:	20001794 	.word	0x20001794
 8002d58:	0801b6ac 	.word	0x0801b6ac
 8002d5c:	0801b6a8 	.word	0x0801b6a8
 8002d60:	20000028 	.word	0x20000028

08002d64 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7ff fff1 	bl	8002d64 <BSP_PB_Callback>
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	60da      	str	r2, [r3, #12]
 8002d98:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002d9a:	2310      	movs	r3, #16
 8002d9c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da6:	2303      	movs	r3, #3
 8002da8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db2:	f001 fe23 	bl	80049fc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002db6:	2320      	movs	r3, #32
 8002db8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc2:	f001 fe1b 	bl	80049fc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2120      	movs	r1, #32
 8002dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dce:	f002 f843 	bl	8004e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2110      	movs	r1, #16
 8002dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dda:	f002 f83d 	bl	8004e58 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d83f      	bhi.n	8002e78 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002df8:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002e11 	.word	0x08002e11
 8002e04:	08002e2b 	.word	0x08002e2b
 8002e08:	08002e45 	.word	0x08002e45
 8002e0c:	08002e5f 	.word	0x08002e5f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002e10:	2200      	movs	r2, #0
 8002e12:	2110      	movs	r1, #16
 8002e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e18:	f002 f81e 	bl	8004e58 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2120      	movs	r1, #32
 8002e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e24:	f002 f818 	bl	8004e58 <HAL_GPIO_WritePin>
      break;      
 8002e28:	e027      	b.n	8002e7a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e32:	f002 f811 	bl	8004e58 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e36:	2200      	movs	r2, #0
 8002e38:	2120      	movs	r1, #32
 8002e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3e:	f002 f80b 	bl	8004e58 <HAL_GPIO_WritePin>
      break;
 8002e42:	e01a      	b.n	8002e7a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e44:	2201      	movs	r2, #1
 8002e46:	2110      	movs	r1, #16
 8002e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e4c:	f002 f804 	bl	8004e58 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e50:	2201      	movs	r2, #1
 8002e52:	2120      	movs	r1, #32
 8002e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e58:	f001 fffe 	bl	8004e58 <HAL_GPIO_WritePin>
      break;
 8002e5c:	e00d      	b.n	8002e7a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2110      	movs	r1, #16
 8002e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e66:	f001 fff7 	bl	8004e58 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	2120      	movs	r1, #32
 8002e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e72:	f001 fff1 	bl	8004e58 <HAL_GPIO_WritePin>
      break;
 8002e76:	e000      	b.n	8002e7a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002e78:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002e88:	2302      	movs	r3, #2
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002e96:	2301      	movs	r3, #1
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002ea4:	2301      	movs	r3, #1
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
	...

08002eb0 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a03      	ldr	r2, [pc, #12]	; (8002ec8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6053      	str	r3, [r2, #4]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	e0042000 	.word	0xe0042000

08002ecc <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4a03      	ldr	r2, [pc, #12]	; (8002ee4 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	6053      	str	r3, [r2, #4]
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	e0042000 	.word	0xe0042000

08002ee8 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4a03      	ldr	r2, [pc, #12]	; (8002f00 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002ef2:	f043 0302 	orr.w	r3, r3, #2
 8002ef6:	6053      	str	r3, [r2, #4]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	e0042000 	.word	0xe0042000

08002f04 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002f0e:	f023 0302 	bic.w	r3, r3, #2
 8002f12:	6053      	str	r3, [r2, #4]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	e0042000 	.word	0xe0042000

08002f20 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a03      	ldr	r2, [pc, #12]	; (8002f38 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	6053      	str	r3, [r2, #4]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	e0042000 	.word	0xe0042000

08002f3c <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a03      	ldr	r2, [pc, #12]	; (8002f54 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f46:	f023 0304 	bic.w	r3, r3, #4
 8002f4a:	6053      	str	r3, [r2, #4]
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	e0042000 	.word	0xe0042000

08002f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f62:	2003      	movs	r0, #3
 8002f64:	f001 f8f2 	bl	800414c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f68:	f003 fcc4 	bl	80068f4 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_Init+0x3c>)
 8002f70:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f72:	200f      	movs	r0, #15
 8002f74:	f7ff f808 	bl	8001f88 <HAL_InitTick>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	71fb      	strb	r3, [r7, #7]
 8002f82:	e001      	b.n	8002f88 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f84:	f7fe fdd6 	bl	8001b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f88:	79fb      	ldrb	r3, [r7, #7]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000000 	.word	0x20000000

08002f98 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002f9c:	4b02      	ldr	r3, [pc, #8]	; (8002fa8 <HAL_GetUIDw0+0x10>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	1fff7590 	.word	0x1fff7590

08002fac <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002fb0:	4b02      	ldr	r3, [pc, #8]	; (8002fbc <HAL_GetUIDw1+0x10>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	1fff7594 	.word	0x1fff7594

08002fc0 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002fc4:	4b02      	ldr	r3, [pc, #8]	; (8002fd0 <HAL_GetUIDw2+0x10>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	1fff7598 	.word	0x1fff7598

08002fd4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002fd8:	f7ff ff6a 	bl	8002eb0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002fe4:	f7ff ff72 	bl	8002ecc <LL_DBGMCU_DisableDBGSleepMode>
}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002ff0:	f7ff ff7a 	bl	8002ee8 <LL_DBGMCU_EnableDBGStopMode>
}
 8002ff4:	bf00      	nop
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002ffc:	f7ff ff82 	bl	8002f04 <LL_DBGMCU_DisableDBGStopMode>
}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003008:	f7ff ff8a 	bl	8002f20 <LL_DBGMCU_EnableDBGStandbyMode>
}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003014:	f7ff ff92 	bl	8002f3c <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003018:	bf00      	nop
 800301a:	bd80      	pop	{r7, pc}

0800301c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2107      	movs	r1, #7
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	401a      	ands	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	431a      	orrs	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b085      	sub	sp, #20
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	210f      	movs	r1, #15
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	401a      	ands	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	f003 010f 	and.w	r1, r3, #15
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	431a      	orrs	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003134:	43db      	mvns	r3, r3
 8003136:	401a      	ands	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003146:	b480      	push	{r7}
 8003148:	b085      	sub	sp, #20
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	43db      	mvns	r3, r3
 800315c:	401a      	ands	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	0219      	lsls	r1, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	400b      	ands	r3, r1
 8003166:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800316a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800316e:	431a      	orrs	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800318e:	f023 0317 	bic.w	r3, r3, #23
 8003192:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031b4:	f023 0317 	bic.w	r3, r3, #23
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6093      	str	r3, [r2, #8]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031da:	d101      	bne.n	80031e0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031fc:	f023 0317 	bic.w	r3, r3, #23
 8003200:	f043 0201 	orr.w	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003222:	f023 0317 	bic.w	r3, r3, #23
 8003226:	f043 0202 	orr.w	r2, r3, #2
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <LL_ADC_IsEnabled+0x18>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <LL_ADC_IsEnabled+0x1a>
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d101      	bne.n	8003274 <LL_ADC_IsDisableOngoing+0x18>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <LL_ADC_IsDisableOngoing+0x1a>
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003290:	f023 0317 	bic.w	r3, r3, #23
 8003294:	f043 0204 	orr.w	r2, r3, #4
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032b6:	f023 0317 	bic.w	r3, r3, #23
 80032ba:	f043 0210 	orr.w	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d101      	bne.n	80032e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003304:	2300      	movs	r3, #0
 8003306:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e1ae      	b.n	8003670 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7fe f8af 	bl	8001484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff44 	bl	80031c6 <LL_ADC_IsInternalRegulatorEnabled>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d115      	bne.n	8003370 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff18 	bl	800317e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800334e:	4b9b      	ldr	r3, [pc, #620]	; (80035bc <HAL_ADC_Init+0x2cc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	4a9a      	ldr	r2, [pc, #616]	; (80035c0 <HAL_ADC_Init+0x2d0>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	099b      	lsrs	r3, r3, #6
 800335c:	3301      	adds	r3, #1
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003362:	e002      	b.n	800336a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	3b01      	subs	r3, #1
 8003368:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f9      	bne.n	8003364 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff26 	bl	80031c6 <LL_ADC_IsInternalRegulatorEnabled>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10d      	bne.n	800339c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	f043 0210 	orr.w	r2, r3, #16
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff93 	bl	80032cc <LL_ADC_REG_IsConversionOngoing>
 80033a6:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f040 8154 	bne.w	800365e <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f040 8150 	bne.w	800365e <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033c6:	f043 0202 	orr.w	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ff30 	bl	8003238 <LL_ADC_IsEnabled>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d14f      	bne.n	800347e <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f023 0118 	bic.w	r1, r3, #24
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003400:	4313      	orrs	r3, r2
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800340e:	2b01      	cmp	r3, #1
 8003410:	d111      	bne.n	8003436 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800341e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003424:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800342a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <HAL_ADC_Init+0x2d4>)
 800343e:	4013      	ands	r3, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	6979      	ldr	r1, [r7, #20]
 8003446:	430b      	orrs	r3, r1
 8003448:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003452:	d014      	beq.n	800347e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345c:	d00f      	beq.n	800347e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003466:	d00a      	beq.n	800347e <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003468:	4b57      	ldr	r3, [pc, #348]	; (80035c8 <HAL_ADC_Init+0x2d8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003478:	4953      	ldr	r1, [pc, #332]	; (80035c8 <HAL_ADC_Init+0x2d8>)
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7e1b      	ldrb	r3, [r3, #24]
 8003482:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	7e5b      	ldrb	r3, [r3, #25]
 8003488:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800348a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7e9b      	ldrb	r3, [r3, #26]
 8003490:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003492:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003498:	2a00      	cmp	r2, #0
 800349a:	d002      	beq.n	80034a2 <HAL_ADC_Init+0x1b2>
 800349c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034a0:	e000      	b.n	80034a4 <HAL_ADC_Init+0x1b4>
 80034a2:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034a4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034aa:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da04      	bge.n	80034be <HAL_ADC_Init+0x1ce>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034bc:	e001      	b.n	80034c2 <HAL_ADC_Init+0x1d2>
 80034be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 80034c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80034ca:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034cc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d114      	bne.n	8003508 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	7e9b      	ldrb	r3, [r3, #26]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	e00b      	b.n	8003508 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	f043 0201 	orr.w	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800351c:	4313      	orrs	r3, r2
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800352e:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	69b9      	ldr	r1, [r7, #24]
 8003538:	430b      	orrs	r3, r1
 800353a:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_ADC_Init+0x2dc>)
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	6979      	ldr	r1, [r7, #20]
 800354c:	430b      	orrs	r3, r1
 800354e:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	461a      	mov	r2, r3
 800355a:	2100      	movs	r1, #0
 800355c:	f7ff fd7d 	bl	800305a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	461a      	mov	r2, r3
 800356a:	4919      	ldr	r1, [pc, #100]	; (80035d0 <HAL_ADC_Init+0x2e0>)
 800356c:	f7ff fd75 	bl	800305a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d108      	bne.n	800358a <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f062 020f 	orn	r2, r2, #15
 8003586:	629a      	str	r2, [r3, #40]	; 0x28
 8003588:	e044      	b.n	8003614 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003592:	d13f      	bne.n	8003614 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	e00c      	b.n	80035b4 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	2b0f      	cmp	r3, #15
 80035ac:	d012      	beq.n	80035d4 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	3301      	adds	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b07      	cmp	r3, #7
 80035b8:	d9ef      	bls.n	800359a <HAL_ADC_Init+0x2aa>
 80035ba:	e00c      	b.n	80035d6 <HAL_ADC_Init+0x2e6>
 80035bc:	20000000 	.word	0x20000000
 80035c0:	053e2d63 	.word	0x053e2d63
 80035c4:	1ffffc02 	.word	0x1ffffc02
 80035c8:	40012708 	.word	0x40012708
 80035cc:	dffffc02 	.word	0xdffffc02
 80035d0:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 80035d4:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d108      	bne.n	80035ee <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f062 020f 	orn	r2, r2, #15
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
 80035ec:	e012      	b.n	8003614 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	f003 031c 	and.w	r3, r3, #28
 8003600:	f06f 020f 	mvn.w	r2, #15
 8003604:	fa02 f103 	lsl.w	r1, r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	4b17      	ldr	r3, [pc, #92]	; (8003678 <HAL_ADC_Init+0x388>)
 800361c:	4013      	ands	r3, r2
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	429a      	cmp	r2, r3
 8003622:	d10b      	bne.n	800363c <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	f043 0201 	orr.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800363a:	e018      	b.n	800366e <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	f023 0312 	bic.w	r3, r3, #18
 8003644:	f043 0210 	orr.w	r2, r3, #16
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003650:	f043 0201 	orr.w	r2, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800365c:	e007      	b.n	800366e <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003662:	f043 0210 	orr.w	r2, r3, #16
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800366e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3720      	adds	r7, #32
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	833fffe7 	.word	0x833fffe7

0800367c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06a      	b.n	8003764 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	f043 0202 	orr.w	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fabe 	bl	8003c1c <ADC_ConversionStop>
 80036a0:	4603      	mov	r3, r0
 80036a2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10f      	bne.n	80036ca <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fb82 	bl	8003db4 <ADC_Disable>
 80036b0:	4603      	mov	r3, r0
 80036b2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fd6d 	bl	80031a4 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80036d8:	f023 0303 	bic.w	r3, r3, #3
 80036dc:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f240 329f 	movw	r2, #927	; 0x39f
 80036e6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68d9      	ldr	r1, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b1e      	ldr	r3, [pc, #120]	; (800376c <HAL_ADC_DeInit+0xf0>)
 80036f4:	400b      	ands	r3, r1
 80036f6:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003706:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0207 	bic.w	r2, r2, #7
 8003716:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003726:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_ADC_DeInit+0xf4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <HAL_ADC_DeInit+0xf4>)
 800373c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003740:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd feb2 	bl	80014ac <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	833e0200 	.word	0x833e0200
 8003770:	40012708 	.word	0x40012708

08003774 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fda3 	bl	80032cc <LL_ADC_REG_IsConversionOngoing>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d132      	bne.n	80037f2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_ADC_Start+0x26>
 8003796:	2302      	movs	r3, #2
 8003798:	e02e      	b.n	80037f8 <HAL_ADC_Start+0x84>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fa80 	bl	8003ca8 <ADC_Enable>
 80037a8:	4603      	mov	r3, r0
 80037aa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d11a      	bne.n	80037e8 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	221c      	movs	r2, #28
 80037d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fd4d 	bl	8003280 <LL_ADC_REG_StartConversion>
 80037e6:	e006      	b.n	80037f6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80037f0:	e001      	b.n	80037f6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037f2:	2302      	movs	r3, #2
 80037f4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_ADC_Stop+0x16>
 8003812:	2302      	movs	r3, #2
 8003814:	e022      	b.n	800385c <HAL_ADC_Stop+0x5c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f9fc 	bl	8003c1c <ADC_ConversionStop>
 8003824:	4603      	mov	r3, r0
 8003826:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d111      	bne.n	8003852 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fac0 	bl	8003db4 <ADC_Disable>
 8003834:	4603      	mov	r3, r0
 8003836:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	f043 0201 	orr.w	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800385a:	7bfb      	ldrb	r3, [r7, #15]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	2b08      	cmp	r3, #8
 8003874:	d102      	bne.n	800387c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003876:	2308      	movs	r3, #8
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	e010      	b.n	800389e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e077      	b.n	800398a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800389a:	2304      	movs	r3, #4
 800389c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800389e:	f7fe fb7d 	bl	8001f9c <HAL_GetTick>
 80038a2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038a4:	e021      	b.n	80038ea <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d01d      	beq.n	80038ea <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80038ae:	f7fe fb75 	bl	8001f9c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d302      	bcc.n	80038c4 <HAL_ADC_PollForConversion+0x60>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d112      	bne.n	80038ea <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10b      	bne.n	80038ea <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	f043 0204 	orr.w	r2, r3, #4
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e04f      	b.n	800398a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0d6      	beq.n	80038a6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fbc4 	bl	8003096 <LL_ADC_REG_IsTriggerSourceSWStart>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d031      	beq.n	8003978 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	7e9b      	ldrb	r3, [r3, #26]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d12d      	bne.n	8003978 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b08      	cmp	r3, #8
 8003928:	d126      	bne.n	8003978 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fccc 	bl	80032cc <LL_ADC_REG_IsConversionOngoing>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d112      	bne.n	8003960 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 020c 	bic.w	r2, r2, #12
 8003948:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	f043 0201 	orr.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	659a      	str	r2, [r3, #88]	; 0x58
 800395e:	e00b      	b.n	8003978 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	f043 0201 	orr.w	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7e1b      	ldrb	r3, [r3, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	220c      	movs	r2, #12
 8003986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x28>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e110      	b.n	8003bf6 <HAL_ADC_ConfigChannel+0x24a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fc73 	bl	80032cc <LL_ADC_REG_IsConversionOngoing>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f040 80f7 	bne.w	8003bdc <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	f000 80b1 	beq.w	8003b5a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a00:	d004      	beq.n	8003a0c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a06:	4a7e      	ldr	r2, [pc, #504]	; (8003c00 <HAL_ADC_ConfigChannel+0x254>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d108      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f7ff fb70 	bl	80030fc <LL_ADC_REG_SetSequencerChAdd>
 8003a1c:	e041      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	210f      	movs	r1, #15
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	401a      	ands	r2, r3
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0xa0>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0e9b      	lsrs	r3, r3, #26
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	e011      	b.n	8003a70 <HAL_ADC_ConfigChannel+0xc4>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003a64:	2320      	movs	r3, #32
 8003a66:	e003      	b.n	8003a70 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	6839      	ldr	r1, [r7, #0]
 8003a72:	6849      	ldr	r1, [r1, #4]
 8003a74:	f001 011f 	and.w	r1, r1, #31
 8003a78:	408b      	lsls	r3, r1
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d808      	bhi.n	8003aa2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f7ff fb0c 	bl	80030ba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6819      	ldr	r1, [r3, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f7ff fb49 	bl	8003146 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f280 8097 	bge.w	8003bec <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003abe:	4851      	ldr	r0, [pc, #324]	; (8003c04 <HAL_ADC_ConfigChannel+0x258>)
 8003ac0:	f7ff fabe 	bl	8003040 <LL_ADC_GetCommonPathInternalCh>
 8003ac4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a4f      	ldr	r2, [pc, #316]	; (8003c08 <HAL_ADC_ConfigChannel+0x25c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d120      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11b      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4848      	ldr	r0, [pc, #288]	; (8003c04 <HAL_ADC_ConfigChannel+0x258>)
 8003ae4:	f7ff fa9a 	bl	800301c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ae8:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <HAL_ADC_ConfigChannel+0x260>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	099b      	lsrs	r3, r3, #6
 8003aee:	4a48      	ldr	r2, [pc, #288]	; (8003c10 <HAL_ADC_ConfigChannel+0x264>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	4613      	mov	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b02:	e002      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f9      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b10:	e06c      	b.n	8003bec <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a3f      	ldr	r2, [pc, #252]	; (8003c14 <HAL_ADC_ConfigChannel+0x268>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d10c      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x18a>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d107      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4835      	ldr	r0, [pc, #212]	; (8003c04 <HAL_ADC_ConfigChannel+0x258>)
 8003b30:	f7ff fa74 	bl	800301c <LL_ADC_SetCommonPathInternalCh>
 8003b34:	e05a      	b.n	8003bec <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a37      	ldr	r2, [pc, #220]	; (8003c18 <HAL_ADC_ConfigChannel+0x26c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d155      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d150      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b50:	4619      	mov	r1, r3
 8003b52:	482c      	ldr	r0, [pc, #176]	; (8003c04 <HAL_ADC_ConfigChannel+0x258>)
 8003b54:	f7ff fa62 	bl	800301c <LL_ADC_SetCommonPathInternalCh>
 8003b58:	e048      	b.n	8003bec <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b62:	d004      	beq.n	8003b6e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b68:	4a25      	ldr	r2, [pc, #148]	; (8003c00 <HAL_ADC_ConfigChannel+0x254>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d107      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4619      	mov	r1, r3
 8003b78:	4610      	mov	r0, r2
 8003b7a:	f7ff fad1 	bl	8003120 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	da32      	bge.n	8003bec <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b86:	481f      	ldr	r0, [pc, #124]	; (8003c04 <HAL_ADC_ConfigChannel+0x258>)
 8003b88:	f7ff fa5a 	bl	8003040 <LL_ADC_GetCommonPathInternalCh>
 8003b8c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <HAL_ADC_ConfigChannel+0x25c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d107      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4818      	ldr	r0, [pc, #96]	; (8003c04 <HAL_ADC_ConfigChannel+0x258>)
 8003ba2:	f7ff fa3b 	bl	800301c <LL_ADC_SetCommonPathInternalCh>
 8003ba6:	e021      	b.n	8003bec <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a19      	ldr	r2, [pc, #100]	; (8003c14 <HAL_ADC_ConfigChannel+0x268>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d107      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4812      	ldr	r0, [pc, #72]	; (8003c04 <HAL_ADC_ConfigChannel+0x258>)
 8003bbc:	f7ff fa2e 	bl	800301c <LL_ADC_SetCommonPathInternalCh>
 8003bc0:	e014      	b.n	8003bec <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <HAL_ADC_ConfigChannel+0x26c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10f      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	480b      	ldr	r0, [pc, #44]	; (8003c04 <HAL_ADC_ConfigChannel+0x258>)
 8003bd6:	f7ff fa21 	bl	800301c <LL_ADC_SetCommonPathInternalCh>
 8003bda:	e007      	b.n	8003bec <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	f043 0220 	orr.w	r2, r3, #32
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003bf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	80000004 	.word	0x80000004
 8003c04:	40012708 	.word	0x40012708
 8003c08:	b0001000 	.word	0xb0001000
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	053e2d63 	.word	0x053e2d63
 8003c14:	b8004000 	.word	0xb8004000
 8003c18:	b4002000 	.word	0xb4002000

08003c1c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fb4f 	bl	80032cc <LL_ADC_REG_IsConversionOngoing>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d033      	beq.n	8003c9c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fb0f 	bl	800325c <LL_ADC_IsDisableOngoing>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d104      	bne.n	8003c4e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fb2c 	bl	80032a6 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c4e:	f7fe f9a5 	bl	8001f9c <HAL_GetTick>
 8003c52:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c54:	e01b      	b.n	8003c8e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c56:	f7fe f9a1 	bl	8001f9c <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d914      	bls.n	8003c8e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	f043 0210 	orr.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c82:	f043 0201 	orr.w	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e007      	b.n	8003c9e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1dc      	bne.n	8003c56 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fabd 	bl	8003238 <LL_ADC_IsEnabled>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d169      	bne.n	8003d98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	4b36      	ldr	r3, [pc, #216]	; (8003da4 <ADC_Enable+0xfc>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	f043 0210 	orr.w	r2, r3, #16
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce2:	f043 0201 	orr.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e055      	b.n	8003d9a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fa7a 	bl	80031ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003cf8:	482b      	ldr	r0, [pc, #172]	; (8003da8 <ADC_Enable+0x100>)
 8003cfa:	f7ff f9a1 	bl	8003040 <LL_ADC_GetCommonPathInternalCh>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00f      	beq.n	8003d28 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d08:	4b28      	ldr	r3, [pc, #160]	; (8003dac <ADC_Enable+0x104>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	099b      	lsrs	r3, r3, #6
 8003d0e:	4a28      	ldr	r2, [pc, #160]	; (8003db0 <ADC_Enable+0x108>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	099b      	lsrs	r3, r3, #6
 8003d16:	3301      	adds	r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d1a:	e002      	b.n	8003d22 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f9      	bne.n	8003d1c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	7e5b      	ldrb	r3, [r3, #25]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d033      	beq.n	8003d98 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003d30:	f7fe f934 	bl	8001f9c <HAL_GetTick>
 8003d34:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d36:	e028      	b.n	8003d8a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fa7b 	bl	8003238 <LL_ADC_IsEnabled>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d104      	bne.n	8003d52 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fa4d 	bl	80031ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d52:	f7fe f923 	bl	8001f9c <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d914      	bls.n	8003d8a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d00d      	beq.n	8003d8a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	f043 0210 	orr.w	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7e:	f043 0201 	orr.w	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e007      	b.n	8003d9a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d1cf      	bne.n	8003d38 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	80000017 	.word	0x80000017
 8003da8:	40012708 	.word	0x40012708
 8003dac:	20000000 	.word	0x20000000
 8003db0:	053e2d63 	.word	0x053e2d63

08003db4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fa4b 	bl	800325c <LL_ADC_IsDisableOngoing>
 8003dc6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fa33 	bl	8003238 <LL_ADC_IsEnabled>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d047      	beq.n	8003e68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d144      	bne.n	8003e68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 0305 	and.w	r3, r3, #5
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d10c      	bne.n	8003e06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fa0e 	bl	8003212 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dfe:	f7fe f8cd 	bl	8001f9c <HAL_GetTick>
 8003e02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e04:	e029      	b.n	8003e5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	f043 0210 	orr.w	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e023      	b.n	8003e6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e22:	f7fe f8bb 	bl	8001f9c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d914      	bls.n	8003e5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e42:	f043 0210 	orr.w	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e007      	b.n	8003e6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1dc      	bne.n	8003e22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <LL_ADC_IsEnabled>:
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <LL_ADC_IsEnabled+0x18>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <LL_ADC_IsEnabled+0x1a>
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <LL_ADC_IsCalibrationOnGoing>:
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eaa:	d101      	bne.n	8003eb0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_ADCEx_Calibration_Start+0x1a>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e068      	b.n	8003fa8 <HAL_ADCEx_Calibration_Start+0xec>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ff68 	bl	8003db4 <ADC_Disable>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ffc0 	bl	8003e72 <LL_ADC_IsEnabled>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d14c      	bne.n	8003f92 <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f00:	f043 0202 	orr.w	r2, r3, #2
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0203 	bic.w	r2, r2, #3
 8003f22:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f32:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f34:	e014      	b.n	8003f60 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003f42:	d30d      	bcc.n	8003f60 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	f023 0312 	bic.w	r3, r3, #18
 8003f4c:	f043 0210 	orr.w	r2, r3, #16
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e023      	b.n	8003fa8 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ff96 	bl	8003e96 <LL_ADC_IsCalibrationOnGoing>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e2      	bne.n	8003f36 <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68d9      	ldr	r1, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	f023 0303 	bic.w	r3, r3, #3
 8003f88:	f043 0201 	orr.w	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f90:	e005      	b.n	8003f9e <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	f043 0210 	orr.w	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fe2:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	60d3      	str	r3, [r2, #12]
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <__NVIC_GetPriorityGrouping+0x18>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	0a1b      	lsrs	r3, r3, #8
 8004002:	f003 0307 	and.w	r3, r3, #7
}
 8004006:	4618      	mov	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800401e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004022:	2b00      	cmp	r3, #0
 8004024:	db0b      	blt.n	800403e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	f003 021f 	and.w	r2, r3, #31
 800402c:	4906      	ldr	r1, [pc, #24]	; (8004048 <__NVIC_EnableIRQ+0x34>)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	2001      	movs	r0, #1
 8004036:	fa00 f202 	lsl.w	r2, r0, r2
 800403a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	e000e100 	.word	0xe000e100

0800404c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	2b00      	cmp	r3, #0
 800405c:	db12      	blt.n	8004084 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	f003 021f 	and.w	r2, r3, #31
 8004064:	490a      	ldr	r1, [pc, #40]	; (8004090 <__NVIC_DisableIRQ+0x44>)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2001      	movs	r0, #1
 800406e:	fa00 f202 	lsl.w	r2, r0, r2
 8004072:	3320      	adds	r3, #32
 8004074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004078:	f3bf 8f4f 	dsb	sy
}
 800407c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800407e:	f3bf 8f6f 	isb	sy
}
 8004082:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	e000e100 	.word	0xe000e100

08004094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	6039      	str	r1, [r7, #0]
 800409e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	db0a      	blt.n	80040be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	490c      	ldr	r1, [pc, #48]	; (80040e0 <__NVIC_SetPriority+0x4c>)
 80040ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b2:	0112      	lsls	r2, r2, #4
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	440b      	add	r3, r1
 80040b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040bc:	e00a      	b.n	80040d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	4908      	ldr	r1, [pc, #32]	; (80040e4 <__NVIC_SetPriority+0x50>)
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	3b04      	subs	r3, #4
 80040cc:	0112      	lsls	r2, r2, #4
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	440b      	add	r3, r1
 80040d2:	761a      	strb	r2, [r3, #24]
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	e000e100 	.word	0xe000e100
 80040e4:	e000ed00 	.word	0xe000ed00

080040e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b089      	sub	sp, #36	; 0x24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f1c3 0307 	rsb	r3, r3, #7
 8004102:	2b04      	cmp	r3, #4
 8004104:	bf28      	it	cs
 8004106:	2304      	movcs	r3, #4
 8004108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	3304      	adds	r3, #4
 800410e:	2b06      	cmp	r3, #6
 8004110:	d902      	bls.n	8004118 <NVIC_EncodePriority+0x30>
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	3b03      	subs	r3, #3
 8004116:	e000      	b.n	800411a <NVIC_EncodePriority+0x32>
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800411c:	f04f 32ff 	mov.w	r2, #4294967295
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43da      	mvns	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	401a      	ands	r2, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004130:	f04f 31ff 	mov.w	r1, #4294967295
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fa01 f303 	lsl.w	r3, r1, r3
 800413a:	43d9      	mvns	r1, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004140:	4313      	orrs	r3, r2
         );
}
 8004142:	4618      	mov	r0, r3
 8004144:	3724      	adds	r7, #36	; 0x24
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff ff2b 	bl	8003fb0 <__NVIC_SetPriorityGrouping>
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	4603      	mov	r3, r0
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004170:	f7ff ff42 	bl	8003ff8 <__NVIC_GetPriorityGrouping>
 8004174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	6978      	ldr	r0, [r7, #20]
 800417c:	f7ff ffb4 	bl	80040e8 <NVIC_EncodePriority>
 8004180:	4602      	mov	r2, r0
 8004182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004186:	4611      	mov	r1, r2
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff ff83 	bl	8004094 <__NVIC_SetPriority>
}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	4603      	mov	r3, r0
 800419e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff ff35 	bl	8004014 <__NVIC_EnableIRQ>
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	4603      	mov	r3, r0
 80041ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80041bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff ff43 	bl	800404c <__NVIC_DisableIRQ>
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e08e      	b.n	8004300 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_DMA_Init+0x138>)
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d80f      	bhi.n	800420e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	4b45      	ldr	r3, [pc, #276]	; (800430c <HAL_DMA_Init+0x13c>)
 80041f6:	4413      	add	r3, r2
 80041f8:	4a45      	ldr	r2, [pc, #276]	; (8004310 <HAL_DMA_Init+0x140>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	009a      	lsls	r2, r3, #2
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a42      	ldr	r2, [pc, #264]	; (8004314 <HAL_DMA_Init+0x144>)
 800420a:	641a      	str	r2, [r3, #64]	; 0x40
 800420c:	e00e      	b.n	800422c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	4b40      	ldr	r3, [pc, #256]	; (8004318 <HAL_DMA_Init+0x148>)
 8004216:	4413      	add	r3, r2
 8004218:	4a3d      	ldr	r2, [pc, #244]	; (8004310 <HAL_DMA_Init+0x140>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	009a      	lsls	r2, r3, #2
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a3c      	ldr	r2, [pc, #240]	; (800431c <HAL_DMA_Init+0x14c>)
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004246:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6819      	ldr	r1, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fb24 	bl	80048cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800428c:	d102      	bne.n	8004294 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042a0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042aa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d010      	beq.n	80042d6 <HAL_DMA_Init+0x106>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d80c      	bhi.n	80042d6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fb4d 	bl	800495c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	e008      	b.n	80042e8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40020407 	.word	0x40020407
 800430c:	bffdfff8 	.word	0xbffdfff8
 8004310:	cccccccd 	.word	0xcccccccd
 8004314:	40020000 	.word	0x40020000
 8004318:	bffdfbf8 	.word	0xbffdfbf8
 800431c:	40020400 	.word	0x40020400

08004320 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e07b      	b.n	800442a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	4b3a      	ldr	r3, [pc, #232]	; (8004434 <HAL_DMA_DeInit+0x114>)
 800434a:	429a      	cmp	r2, r3
 800434c:	d80f      	bhi.n	800436e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	4b38      	ldr	r3, [pc, #224]	; (8004438 <HAL_DMA_DeInit+0x118>)
 8004356:	4413      	add	r3, r2
 8004358:	4a38      	ldr	r2, [pc, #224]	; (800443c <HAL_DMA_DeInit+0x11c>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	009a      	lsls	r2, r3, #2
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a35      	ldr	r2, [pc, #212]	; (8004440 <HAL_DMA_DeInit+0x120>)
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
 800436c:	e00e      	b.n	800438c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	4b33      	ldr	r3, [pc, #204]	; (8004444 <HAL_DMA_DeInit+0x124>)
 8004376:	4413      	add	r3, r2
 8004378:	4a30      	ldr	r2, [pc, #192]	; (800443c <HAL_DMA_DeInit+0x11c>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	009a      	lsls	r2, r3, #2
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a2f      	ldr	r2, [pc, #188]	; (8004448 <HAL_DMA_DeInit+0x128>)
 800438a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	f003 021c 	and.w	r2, r3, #28
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	2101      	movs	r1, #1
 80043a2:	fa01 f202 	lsl.w	r2, r1, r2
 80043a6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fa8f 	bl	80048cc <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043be:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00f      	beq.n	80043e8 <HAL_DMA_DeInit+0xc8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d80b      	bhi.n	80043e8 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fac3 	bl	800495c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043e6:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40020407 	.word	0x40020407
 8004438:	bffdfff8 	.word	0xbffdfff8
 800443c:	cccccccd 	.word	0xcccccccd
 8004440:	40020000 	.word	0x40020000
 8004444:	bffdfbf8 	.word	0xbffdfbf8
 8004448:	40020400 	.word	0x40020400

0800444c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_DMA_Start_IT+0x20>
 8004468:	2302      	movs	r3, #2
 800446a:	e069      	b.n	8004540 <HAL_DMA_Start_IT+0xf4>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d155      	bne.n	800452c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f9d3 	bl	8004850 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 020e 	orr.w	r2, r2, #14
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e00f      	b.n	80044e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0204 	bic.w	r2, r2, #4
 80044d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 020a 	orr.w	r2, r2, #10
 80044e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004500:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	2b00      	cmp	r3, #0
 8004508:	d007      	beq.n	800451a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004518:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e008      	b.n	800453e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2280      	movs	r2, #128	; 0x80
 8004530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800453e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e04f      	b.n	80045fa <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d008      	beq.n	8004578 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2204      	movs	r2, #4
 800456a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e040      	b.n	80045fa <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 020e 	bic.w	r2, r2, #14
 8004586:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004596:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ac:	f003 021c 	and.w	r2, r3, #28
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	2101      	movs	r1, #1
 80045b6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00c      	beq.n	80045e8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d005      	beq.n	8004628 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2204      	movs	r2, #4
 8004620:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
 8004626:	e047      	b.n	80046b8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 020e 	bic.w	r2, r2, #14
 8004636:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004652:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004656:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465c:	f003 021c 	and.w	r2, r3, #28
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	2101      	movs	r1, #1
 8004666:	fa01 f202 	lsl.w	r2, r1, r2
 800466a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004674:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00c      	beq.n	8004698 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800468c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004696:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
    }
  }
  return status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e0:	f003 031c 	and.w	r3, r3, #28
 80046e4:	2204      	movs	r2, #4
 80046e6:	409a      	lsls	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d027      	beq.n	8004740 <HAL_DMA_IRQHandler+0x7c>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d022      	beq.n	8004740 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d107      	bne.n	8004718 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0204 	bic.w	r2, r2, #4
 8004716:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	f003 021c 	and.w	r2, r3, #28
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	2104      	movs	r1, #4
 8004726:	fa01 f202 	lsl.w	r2, r1, r2
 800472a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8081 	beq.w	8004838 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800473e:	e07b      	b.n	8004838 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004744:	f003 031c 	and.w	r3, r3, #28
 8004748:	2202      	movs	r2, #2
 800474a:	409a      	lsls	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4013      	ands	r3, r2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d03d      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x10c>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d038      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 020a 	bic.w	r2, r2, #10
 800477a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	4b2e      	ldr	r3, [pc, #184]	; (8004844 <HAL_DMA_IRQHandler+0x180>)
 800478c:	429a      	cmp	r2, r3
 800478e:	d909      	bls.n	80047a4 <HAL_DMA_IRQHandler+0xe0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004794:	f003 031c 	and.w	r3, r3, #28
 8004798:	4a2b      	ldr	r2, [pc, #172]	; (8004848 <HAL_DMA_IRQHandler+0x184>)
 800479a:	2102      	movs	r1, #2
 800479c:	fa01 f303 	lsl.w	r3, r1, r3
 80047a0:	6053      	str	r3, [r2, #4]
 80047a2:	e008      	b.n	80047b6 <HAL_DMA_IRQHandler+0xf2>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a8:	f003 031c 	and.w	r3, r3, #28
 80047ac:	4a27      	ldr	r2, [pc, #156]	; (800484c <HAL_DMA_IRQHandler+0x188>)
 80047ae:	2102      	movs	r1, #2
 80047b0:	fa01 f303 	lsl.w	r3, r1, r3
 80047b4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d038      	beq.n	8004838 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80047ce:	e033      	b.n	8004838 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	f003 031c 	and.w	r3, r3, #28
 80047d8:	2208      	movs	r2, #8
 80047da:	409a      	lsls	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d02a      	beq.n	800483a <HAL_DMA_IRQHandler+0x176>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d025      	beq.n	800483a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 020e 	bic.w	r2, r2, #14
 80047fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f003 021c 	and.w	r2, r3, #28
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2101      	movs	r1, #1
 800480c:	fa01 f202 	lsl.w	r2, r1, r2
 8004810:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004838:	bf00      	nop
 800483a:	bf00      	nop
}
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40020080 	.word	0x40020080
 8004848:	40020400 	.word	0x40020400
 800484c:	40020000 	.word	0x40020000

08004850 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004866:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	2b00      	cmp	r3, #0
 800486e:	d004      	beq.n	800487a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004878:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	f003 021c 	and.w	r2, r3, #28
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	2101      	movs	r1, #1
 8004888:	fa01 f202 	lsl.w	r2, r1, r2
 800488c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b10      	cmp	r3, #16
 800489c:	d108      	bne.n	80048b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048ae:	e007      	b.n	80048c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
	...

080048cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	4b1c      	ldr	r3, [pc, #112]	; (800494c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80048dc:	429a      	cmp	r2, r3
 80048de:	d813      	bhi.n	8004908 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048ec:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	3b08      	subs	r3, #8
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	e011      	b.n	800492c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	009a      	lsls	r2, r3, #2
 8004910:	4b10      	ldr	r3, [pc, #64]	; (8004954 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004912:	4413      	add	r3, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	3b08      	subs	r3, #8
 8004920:	4a0b      	ldr	r2, [pc, #44]	; (8004950 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	3307      	adds	r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0a      	ldr	r2, [pc, #40]	; (8004958 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004930:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	2201      	movs	r2, #1
 800493a:	409a      	lsls	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40020407 	.word	0x40020407
 8004950:	cccccccd 	.word	0xcccccccd
 8004954:	4002081c 	.word	0x4002081c
 8004958:	40020880 	.word	0x40020880

0800495c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800496c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004972:	4413      	add	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	461a      	mov	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a08      	ldr	r2, [pc, #32]	; (80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004980:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3b01      	subs	r3, #1
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2201      	movs	r2, #1
 800498c:	409a      	lsls	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	1000823f 	.word	0x1000823f
 80049a0:	40020940 	.word	0x40020940

080049a4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	460b      	mov	r3, r1
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80049b6:	7afb      	ldrb	r3, [r7, #11]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d103      	bne.n	80049c4 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	605a      	str	r2, [r3, #4]
      break;
 80049c2:	e002      	b.n	80049ca <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	75fb      	strb	r3, [r7, #23]
      break;
 80049c8:	bf00      	nop
  }

  return status;
 80049ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e003      	b.n	80049f2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
  }
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a0a:	e140      	b.n	8004c8e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	2101      	movs	r1, #1
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	fa01 f303 	lsl.w	r3, r1, r3
 8004a18:	4013      	ands	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 8132 	beq.w	8004c88 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d005      	beq.n	8004a3c <HAL_GPIO_Init+0x40>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d130      	bne.n	8004a9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	2203      	movs	r2, #3
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4013      	ands	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a72:	2201      	movs	r2, #1
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	091b      	lsrs	r3, r3, #4
 8004a88:	f003 0201 	and.w	r2, r3, #1
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d017      	beq.n	8004ada <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43db      	mvns	r3, r3
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d123      	bne.n	8004b2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	08da      	lsrs	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3208      	adds	r2, #8
 8004aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	220f      	movs	r2, #15
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4013      	ands	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	08da      	lsrs	r2, r3, #3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3208      	adds	r2, #8
 8004b28:	6939      	ldr	r1, [r7, #16]
 8004b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	2203      	movs	r2, #3
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4013      	ands	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 0203 	and.w	r2, r3, #3
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 808c 	beq.w	8004c88 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b70:	4a4e      	ldr	r2, [pc, #312]	; (8004cac <HAL_GPIO_Init+0x2b0>)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	089b      	lsrs	r3, r3, #2
 8004b76:	3302      	adds	r3, #2
 8004b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	2207      	movs	r2, #7
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4013      	ands	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b9a:	d00d      	beq.n	8004bb8 <HAL_GPIO_Init+0x1bc>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a44      	ldr	r2, [pc, #272]	; (8004cb0 <HAL_GPIO_Init+0x2b4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d007      	beq.n	8004bb4 <HAL_GPIO_Init+0x1b8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a43      	ldr	r2, [pc, #268]	; (8004cb4 <HAL_GPIO_Init+0x2b8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d101      	bne.n	8004bb0 <HAL_GPIO_Init+0x1b4>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e004      	b.n	8004bba <HAL_GPIO_Init+0x1be>
 8004bb0:	2307      	movs	r3, #7
 8004bb2:	e002      	b.n	8004bba <HAL_GPIO_Init+0x1be>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_GPIO_Init+0x1be>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	f002 0203 	and.w	r2, r2, #3
 8004bc0:	0092      	lsls	r2, r2, #2
 8004bc2:	4093      	lsls	r3, r2
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004bca:	4938      	ldr	r1, [pc, #224]	; (8004cac <HAL_GPIO_Init+0x2b0>)
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004bd8:	4b37      	ldr	r3, [pc, #220]	; (8004cb8 <HAL_GPIO_Init+0x2bc>)
 8004bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bde:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	43db      	mvns	r3, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004bfe:	4a2e      	ldr	r2, [pc, #184]	; (8004cb8 <HAL_GPIO_Init+0x2bc>)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004c06:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <HAL_GPIO_Init+0x2bc>)
 8004c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004c2c:	4a22      	ldr	r2, [pc, #136]	; (8004cb8 <HAL_GPIO_Init+0x2bc>)
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c34:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <HAL_GPIO_Init+0x2bc>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c58:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <HAL_GPIO_Init+0x2bc>)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c5e:	4b16      	ldr	r3, [pc, #88]	; (8004cb8 <HAL_GPIO_Init+0x2bc>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	43db      	mvns	r3, r3
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c82:	4a0d      	ldr	r2, [pc, #52]	; (8004cb8 <HAL_GPIO_Init+0x2bc>)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f47f aeb7 	bne.w	8004a0c <HAL_GPIO_Init+0x10>
  }
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	48000400 	.word	0x48000400
 8004cb4:	48000800 	.word	0x48000800
 8004cb8:	58000800 	.word	0x58000800

08004cbc <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004cca:	e0af      	b.n	8004e2c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004ccc:	2201      	movs	r2, #1
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80a2 	beq.w	8004e26 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004ce2:	4a59      	ldr	r2, [pc, #356]	; (8004e48 <HAL_GPIO_DeInit+0x18c>)
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	089b      	lsrs	r3, r3, #2
 8004ce8:	3302      	adds	r3, #2
 8004cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	2207      	movs	r2, #7
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4013      	ands	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d0a:	d00d      	beq.n	8004d28 <HAL_GPIO_DeInit+0x6c>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a4f      	ldr	r2, [pc, #316]	; (8004e4c <HAL_GPIO_DeInit+0x190>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <HAL_GPIO_DeInit+0x68>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a4e      	ldr	r2, [pc, #312]	; (8004e50 <HAL_GPIO_DeInit+0x194>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d101      	bne.n	8004d20 <HAL_GPIO_DeInit+0x64>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e004      	b.n	8004d2a <HAL_GPIO_DeInit+0x6e>
 8004d20:	2307      	movs	r3, #7
 8004d22:	e002      	b.n	8004d2a <HAL_GPIO_DeInit+0x6e>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <HAL_GPIO_DeInit+0x6e>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	f002 0203 	and.w	r2, r2, #3
 8004d30:	0092      	lsls	r2, r2, #2
 8004d32:	4093      	lsls	r3, r2
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d136      	bne.n	8004da8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004d3a:	4b46      	ldr	r3, [pc, #280]	; (8004e54 <HAL_GPIO_DeInit+0x198>)
 8004d3c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	43db      	mvns	r3, r3
 8004d44:	4943      	ldr	r1, [pc, #268]	; (8004e54 <HAL_GPIO_DeInit+0x198>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004d4c:	4b41      	ldr	r3, [pc, #260]	; (8004e54 <HAL_GPIO_DeInit+0x198>)
 8004d4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	43db      	mvns	r3, r3
 8004d56:	493f      	ldr	r1, [pc, #252]	; (8004e54 <HAL_GPIO_DeInit+0x198>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	; (8004e54 <HAL_GPIO_DeInit+0x198>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	493b      	ldr	r1, [pc, #236]	; (8004e54 <HAL_GPIO_DeInit+0x198>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004d6c:	4b39      	ldr	r3, [pc, #228]	; (8004e54 <HAL_GPIO_DeInit+0x198>)
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	4937      	ldr	r1, [pc, #220]	; (8004e54 <HAL_GPIO_DeInit+0x198>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	2207      	movs	r2, #7
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004d8a:	4a2f      	ldr	r2, [pc, #188]	; (8004e48 <HAL_GPIO_DeInit+0x18c>)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	089b      	lsrs	r3, r3, #2
 8004d90:	3302      	adds	r3, #2
 8004d92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43da      	mvns	r2, r3
 8004d9a:	482b      	ldr	r0, [pc, #172]	; (8004e48 <HAL_GPIO_DeInit+0x18c>)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	089b      	lsrs	r3, r3, #2
 8004da0:	400a      	ands	r2, r1
 8004da2:	3302      	adds	r3, #2
 8004da4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	2103      	movs	r1, #3
 8004db2:	fa01 f303 	lsl.w	r3, r1, r3
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	08da      	lsrs	r2, r3, #3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3208      	adds	r2, #8
 8004dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	220f      	movs	r2, #15
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	08d2      	lsrs	r2, r2, #3
 8004ddc:	4019      	ands	r1, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3208      	adds	r2, #8
 8004de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	2103      	movs	r1, #3
 8004df0:	fa01 f303 	lsl.w	r3, r1, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	401a      	ands	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	2101      	movs	r1, #1
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	fa01 f303 	lsl.w	r3, r1, r3
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	401a      	ands	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	2103      	movs	r1, #3
 8004e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	401a      	ands	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f47f af49 	bne.w	8004ccc <HAL_GPIO_DeInit+0x10>
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000
 8004e4c:	48000400 	.word	0x48000400
 8004e50:	48000800 	.word	0x48000800
 8004e54:	58000800 	.word	0x58000800

08004e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	807b      	strh	r3, [r7, #2]
 8004e64:	4613      	mov	r3, r2
 8004e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e68:	787b      	ldrb	r3, [r7, #1]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e6e:	887a      	ldrh	r2, [r7, #2]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e74:	e002      	b.n	8004e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e76:	887a      	ldrh	r2, [r7, #2]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr

08004e86 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b085      	sub	sp, #20
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e98:	887a      	ldrh	r2, [r7, #2]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	041a      	lsls	r2, r3, #16
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	43d9      	mvns	r1, r3
 8004ea4:	887b      	ldrh	r3, [r7, #2]
 8004ea6:	400b      	ands	r3, r1
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	619a      	str	r2, [r3, #24]
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ec2:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d006      	beq.n	8004edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ece:	4a05      	ldr	r2, [pc, #20]	; (8004ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ed4:	88fb      	ldrh	r3, [r7, #6]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f005 fa54 	bl	800a384 <HAL_GPIO_EXTI_Callback>
  }
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	58000800 	.word	0x58000800

08004ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e081      	b.n	8004ffe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fc fc7c 	bl	800180c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2224      	movs	r2, #36	; 0x24
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d107      	bne.n	8004f62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f5e:	609a      	str	r2, [r3, #8]
 8004f60:	e006      	b.n	8004f70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d104      	bne.n	8004f82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69d9      	ldr	r1, [r3, #28]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1a      	ldr	r2, [r3, #32]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	461a      	mov	r2, r3
 8005014:	460b      	mov	r3, r1
 8005016:	817b      	strh	r3, [r7, #10]
 8005018:	4613      	mov	r3, r2
 800501a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b20      	cmp	r3, #32
 8005026:	f040 80da 	bne.w	80051de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_I2C_Master_Transmit+0x30>
 8005034:	2302      	movs	r3, #2
 8005036:	e0d3      	b.n	80051e0 <HAL_I2C_Master_Transmit+0x1d8>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005040:	f7fc ffac 	bl	8001f9c <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	2319      	movs	r3, #25
 800504c:	2201      	movs	r2, #1
 800504e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f9e5 	bl	8005422 <I2C_WaitOnFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e0be      	b.n	80051e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2221      	movs	r2, #33	; 0x21
 8005066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2210      	movs	r2, #16
 800506e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	893a      	ldrh	r2, [r7, #8]
 8005082:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	2bff      	cmp	r3, #255	; 0xff
 8005092:	d90e      	bls.n	80050b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	22ff      	movs	r2, #255	; 0xff
 8005098:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	8979      	ldrh	r1, [r7, #10]
 80050a2:	4b51      	ldr	r3, [pc, #324]	; (80051e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fb58 	bl	8005760 <I2C_TransferConfig>
 80050b0:	e06c      	b.n	800518c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	8979      	ldrh	r1, [r7, #10]
 80050c4:	4b48      	ldr	r3, [pc, #288]	; (80051e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fb47 	bl	8005760 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80050d2:	e05b      	b.n	800518c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	6a39      	ldr	r1, [r7, #32]
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f9e2 	bl	80054a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e07b      	b.n	80051e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	781a      	ldrb	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d034      	beq.n	800518c <HAL_I2C_Master_Transmit+0x184>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005126:	2b00      	cmp	r3, #0
 8005128:	d130      	bne.n	800518c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	2200      	movs	r2, #0
 8005132:	2180      	movs	r1, #128	; 0x80
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f974 	bl	8005422 <I2C_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e04d      	b.n	80051e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005148:	b29b      	uxth	r3, r3
 800514a:	2bff      	cmp	r3, #255	; 0xff
 800514c:	d90e      	bls.n	800516c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	22ff      	movs	r2, #255	; 0xff
 8005152:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005158:	b2da      	uxtb	r2, r3
 800515a:	8979      	ldrh	r1, [r7, #10]
 800515c:	2300      	movs	r3, #0
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 fafb 	bl	8005760 <I2C_TransferConfig>
 800516a:	e00f      	b.n	800518c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517a:	b2da      	uxtb	r2, r3
 800517c:	8979      	ldrh	r1, [r7, #10]
 800517e:	2300      	movs	r3, #0
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 faea 	bl	8005760 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d19e      	bne.n	80050d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	6a39      	ldr	r1, [r7, #32]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f9c1 	bl	8005522 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e01a      	b.n	80051e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2220      	movs	r2, #32
 80051b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6859      	ldr	r1, [r3, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <HAL_I2C_Master_Transmit+0x1e4>)
 80051be:	400b      	ands	r3, r1
 80051c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	e000      	b.n	80051e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80051de:	2302      	movs	r3, #2
  }
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	80002000 	.word	0x80002000
 80051ec:	fe00e800 	.word	0xfe00e800

080051f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	461a      	mov	r2, r3
 80051fc:	460b      	mov	r3, r1
 80051fe:	817b      	strh	r3, [r7, #10]
 8005200:	4613      	mov	r3, r2
 8005202:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b20      	cmp	r3, #32
 800520e:	f040 80db 	bne.w	80053c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_I2C_Master_Receive+0x30>
 800521c:	2302      	movs	r3, #2
 800521e:	e0d4      	b.n	80053ca <HAL_I2C_Master_Receive+0x1da>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005228:	f7fc feb8 	bl	8001f9c <HAL_GetTick>
 800522c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	2319      	movs	r3, #25
 8005234:	2201      	movs	r2, #1
 8005236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f8f1 	bl	8005422 <I2C_WaitOnFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e0bf      	b.n	80053ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2222      	movs	r2, #34	; 0x22
 800524e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2210      	movs	r2, #16
 8005256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	893a      	ldrh	r2, [r7, #8]
 800526a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	2bff      	cmp	r3, #255	; 0xff
 800527a:	d90e      	bls.n	800529a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	22ff      	movs	r2, #255	; 0xff
 8005280:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	b2da      	uxtb	r2, r3
 8005288:	8979      	ldrh	r1, [r7, #10]
 800528a:	4b52      	ldr	r3, [pc, #328]	; (80053d4 <HAL_I2C_Master_Receive+0x1e4>)
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 fa64 	bl	8005760 <I2C_TransferConfig>
 8005298:	e06d      	b.n	8005376 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	8979      	ldrh	r1, [r7, #10]
 80052ac:	4b49      	ldr	r3, [pc, #292]	; (80053d4 <HAL_I2C_Master_Receive+0x1e4>)
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fa53 	bl	8005760 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80052ba:	e05c      	b.n	8005376 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	6a39      	ldr	r1, [r7, #32]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f96b 	bl	800559c <I2C_WaitOnRXNEFlagUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e07c      	b.n	80053ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d034      	beq.n	8005376 <HAL_I2C_Master_Receive+0x186>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005310:	2b00      	cmp	r3, #0
 8005312:	d130      	bne.n	8005376 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	2200      	movs	r2, #0
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f87f 	bl	8005422 <I2C_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e04d      	b.n	80053ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	2bff      	cmp	r3, #255	; 0xff
 8005336:	d90e      	bls.n	8005356 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	22ff      	movs	r2, #255	; 0xff
 800533c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005342:	b2da      	uxtb	r2, r3
 8005344:	8979      	ldrh	r1, [r7, #10]
 8005346:	2300      	movs	r3, #0
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fa06 	bl	8005760 <I2C_TransferConfig>
 8005354:	e00f      	b.n	8005376 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005364:	b2da      	uxtb	r2, r3
 8005366:	8979      	ldrh	r1, [r7, #10]
 8005368:	2300      	movs	r3, #0
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f9f5 	bl	8005760 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d19d      	bne.n	80052bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	6a39      	ldr	r1, [r7, #32]
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f8cc 	bl	8005522 <I2C_WaitOnSTOPFlagUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e01a      	b.n	80053ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2220      	movs	r2, #32
 800539a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6859      	ldr	r1, [r3, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <HAL_I2C_Master_Receive+0x1e8>)
 80053a8:	400b      	ands	r3, r1
 80053aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e000      	b.n	80053ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80053c8:	2302      	movs	r3, #2
  }
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	80002400 	.word	0x80002400
 80053d8:	fe00e800 	.word	0xfe00e800

080053dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d103      	bne.n	80053fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2200      	movs	r2, #0
 80053f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b01      	cmp	r3, #1
 8005406:	d007      	beq.n	8005418 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	619a      	str	r2, [r3, #24]
  }
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	4613      	mov	r3, r2
 8005430:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005432:	e022      	b.n	800547a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543a:	d01e      	beq.n	800547a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543c:	f7fc fdae 	bl	8001f9c <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d302      	bcc.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x30>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d113      	bne.n	800547a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f043 0220 	orr.w	r2, r3, #32
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e00f      	b.n	800549a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699a      	ldr	r2, [r3, #24]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4013      	ands	r3, r2
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	429a      	cmp	r2, r3
 8005488:	bf0c      	ite	eq
 800548a:	2301      	moveq	r3, #1
 800548c:	2300      	movne	r3, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	429a      	cmp	r2, r3
 8005496:	d0cd      	beq.n	8005434 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054ae:	e02c      	b.n	800550a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f8dd 	bl	8005674 <I2C_IsAcknowledgeFailed>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e02a      	b.n	800551a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ca:	d01e      	beq.n	800550a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054cc:	f7fc fd66 	bl	8001f9c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d302      	bcc.n	80054e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d113      	bne.n	800550a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e007      	b.n	800551a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b02      	cmp	r3, #2
 8005516:	d1cb      	bne.n	80054b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800552e:	e028      	b.n	8005582 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f89d 	bl	8005674 <I2C_IsAcknowledgeFailed>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e026      	b.n	8005592 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005544:	f7fc fd2a 	bl	8001f9c <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	429a      	cmp	r2, r3
 8005552:	d302      	bcc.n	800555a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d113      	bne.n	8005582 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	f043 0220 	orr.w	r2, r3, #32
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e007      	b.n	8005592 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b20      	cmp	r3, #32
 800558e:	d1cf      	bne.n	8005530 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a8:	e055      	b.n	8005656 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f860 	bl	8005674 <I2C_IsAcknowledgeFailed>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e053      	b.n	8005666 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d129      	bne.n	8005620 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d105      	bne.n	80055e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e03f      	b.n	8005666 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2220      	movs	r2, #32
 80055ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6859      	ldr	r1, [r3, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b1d      	ldr	r3, [pc, #116]	; (8005670 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80055fa:	400b      	ands	r3, r1
 80055fc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e022      	b.n	8005666 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005620:	f7fc fcbc 	bl	8001f9c <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	429a      	cmp	r2, r3
 800562e:	d302      	bcc.n	8005636 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10f      	bne.n	8005656 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e007      	b.n	8005666 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b04      	cmp	r3, #4
 8005662:	d1a2      	bne.n	80055aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	fe00e800 	.word	0xfe00e800

08005674 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b10      	cmp	r3, #16
 800568c:	d161      	bne.n	8005752 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800569c:	d02b      	beq.n	80056f6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ac:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056ae:	e022      	b.n	80056f6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d01e      	beq.n	80056f6 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b8:	f7fc fc70 	bl	8001f9c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d302      	bcc.n	80056ce <I2C_IsAcknowledgeFailed+0x5a>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d113      	bne.n	80056f6 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	f043 0220 	orr.w	r2, r3, #32
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e02e      	b.n	8005754 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b20      	cmp	r3, #32
 8005702:	d1d5      	bne.n	80056b0 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2210      	movs	r2, #16
 800570a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2220      	movs	r2, #32
 8005712:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff fe61 	bl	80053dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6859      	ldr	r1, [r3, #4]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	4b0d      	ldr	r3, [pc, #52]	; (800575c <I2C_IsAcknowledgeFailed+0xe8>)
 8005726:	400b      	ands	r3, r1
 8005728:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	f043 0204 	orr.w	r2, r3, #4
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	fe00e800 	.word	0xfe00e800

08005760 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	607b      	str	r3, [r7, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	817b      	strh	r3, [r7, #10]
 800576e:	4613      	mov	r3, r2
 8005770:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	0d5b      	lsrs	r3, r3, #21
 800577c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <I2C_TransferConfig+0x54>)
 8005782:	430b      	orrs	r3, r1
 8005784:	43db      	mvns	r3, r3
 8005786:	ea02 0103 	and.w	r1, r2, r3
 800578a:	897b      	ldrh	r3, [r7, #10]
 800578c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005790:	7a7b      	ldrb	r3, [r7, #9]
 8005792:	041b      	lsls	r3, r3, #16
 8005794:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	431a      	orrs	r2, r3
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr
 80057b4:	03ff63ff 	.word	0x03ff63ff

080057b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d138      	bne.n	8005840 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057d8:	2302      	movs	r3, #2
 80057da:	e032      	b.n	8005842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2224      	movs	r2, #36	; 0x24
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0201 	bic.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800580a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6819      	ldr	r1, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	e000      	b.n	8005842 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005840:	2302      	movs	r3, #2
  }
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b20      	cmp	r3, #32
 8005860:	d139      	bne.n	80058d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800586c:	2302      	movs	r3, #2
 800586e:	e033      	b.n	80058d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2224      	movs	r2, #36	; 0x24
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0201 	bic.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800589e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e000      	b.n	80058d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
  }
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr
	...

080058e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058e8:	4b04      	ldr	r3, [pc, #16]	; (80058fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a03      	ldr	r2, [pc, #12]	; (80058fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80058ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f2:	6013      	str	r3, [r2, #0]
}
 80058f4:	bf00      	nop
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr
 80058fc:	58000400 	.word	0x58000400

08005900 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005904:	4b03      	ldr	r3, [pc, #12]	; (8005914 <HAL_PWREx_GetVoltageRange+0x14>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800590c:	4618      	mov	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr
 8005914:	58000400 	.word	0x58000400

08005918 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800591c:	4b06      	ldr	r3, [pc, #24]	; (8005938 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005928:	d101      	bne.n	800592e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	58000400 	.word	0x58000400

0800593c <LL_RCC_HSE_EnableTcxo>:
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800594a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800594e:	6013      	str	r3, [r2, #0]
}
 8005950:	bf00      	nop
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr

08005958 <LL_RCC_HSE_DisableTcxo>:
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800595c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800596a:	6013      	str	r3, [r2, #0]
}
 800596c:	bf00      	nop
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005986:	d101      	bne.n	800598c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <LL_RCC_HSE_Enable>:
{
 8005996:	b480      	push	{r7}
 8005998:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800599a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a8:	6013      	str	r3, [r2, #0]
}
 80059aa:	bf00      	nop
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr

080059b2 <LL_RCC_HSE_Disable>:
{
 80059b2:	b480      	push	{r7}
 80059b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80059b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c4:	6013      	str	r3, [r2, #0]
}
 80059c6:	bf00      	nop
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <LL_RCC_HSE_IsReady>:
{
 80059ce:	b480      	push	{r7}
 80059d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80059d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059e0:	d101      	bne.n	80059e6 <LL_RCC_HSE_IsReady+0x18>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <LL_RCC_HSE_IsReady+0x1a>
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <LL_RCC_HSI_Enable>:
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a02:	6013      	str	r3, [r2, #0]
}
 8005a04:	bf00      	nop
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <LL_RCC_HSI_Disable>:
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a1e:	6013      	str	r3, [r2, #0]
}
 8005a20:	bf00      	nop
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <LL_RCC_HSI_IsReady>:
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3a:	d101      	bne.n	8005a40 <LL_RCC_HSI_IsReady+0x18>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e000      	b.n	8005a42 <LL_RCC_HSI_IsReady+0x1a>
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr

08005a4a <LL_RCC_HSI_SetCalibTrimming>:
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	061b      	lsls	r3, r3, #24
 8005a60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a64:	4313      	orrs	r3, r2
 8005a66:	604b      	str	r3, [r1, #4]
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr

08005a72 <LL_RCC_LSE_IsReady>:
{
 8005a72:	b480      	push	{r7}
 8005a74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d101      	bne.n	8005a8a <LL_RCC_LSE_IsReady+0x18>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <LL_RCC_LSE_IsReady+0x1a>
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <LL_RCC_LSI_Enable>:
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005aac:	bf00      	nop
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr

08005ab4 <LL_RCC_LSI_Disable>:
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ac4:	f023 0301 	bic.w	r3, r3, #1
 8005ac8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005acc:	bf00      	nop
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <LL_RCC_LSI_IsReady>:
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d101      	bne.n	8005aec <LL_RCC_LSI_IsReady+0x18>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <LL_RCC_LSI_IsReady+0x1a>
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr

08005af6 <LL_RCC_MSI_Enable>:
{
 8005af6:	b480      	push	{r7}
 8005af8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	6013      	str	r3, [r2, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <LL_RCC_MSI_Disable>:
{
 8005b12:	b480      	push	{r7}
 8005b14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	6013      	str	r3, [r2, #0]
}
 8005b26:	bf00      	nop
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr

08005b2e <LL_RCC_MSI_IsReady>:
{
 8005b2e:	b480      	push	{r7}
 8005b30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d101      	bne.n	8005b44 <LL_RCC_MSI_IsReady+0x16>
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <LL_RCC_MSI_IsReady+0x18>
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr

08005b4e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005b4e:	b480      	push	{r7}
 8005b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d101      	bne.n	8005b64 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr

08005b6e <LL_RCC_MSI_GetRange>:
{
 8005b6e:	b480      	push	{r7}
 8005b70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bc80      	pop	{r7}
 8005b82:	4770      	bx	lr

08005b84 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <LL_RCC_MSI_SetCalibTrimming>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	604b      	str	r3, [r1, #4]
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <LL_RCC_SetSysClkSource>:
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f023 0203 	bic.w	r2, r3, #3
 8005bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	608b      	str	r3, [r1, #8]
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr

08005bea <LL_RCC_GetSysClkSource>:
{
 8005bea:	b480      	push	{r7}
 8005bec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 030c 	and.w	r3, r3, #12
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <LL_RCC_SetAHBPrescaler>:
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	608b      	str	r3, [r1, #8]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr

08005c26 <LL_RCC_SetAHB3Prescaler>:
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c36:	f023 020f 	bic.w	r2, r3, #15
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	091b      	lsrs	r3, r3, #4
 8005c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr

08005c52 <LL_RCC_SetAPB1Prescaler>:
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	608b      	str	r3, [r1, #8]
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr

08005c78 <LL_RCC_SetAPB2Prescaler>:
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	608b      	str	r3, [r1, #8]
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <LL_RCC_GetAHBPrescaler>:
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr

08005cb4 <LL_RCC_GetAHB3Prescaler>:
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr

08005cce <LL_RCC_GetAPB1Prescaler>:
{
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr

08005ce4 <LL_RCC_GetAPB2Prescaler>:
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr

08005cfa <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d0c:	6013      	str	r3, [r2, #0]
}
 8005d0e:	bf00      	nop
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr

08005d16 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005d16:	b480      	push	{r7}
 8005d18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d28:	6013      	str	r3, [r2, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bc80      	pop	{r7}
 8005d30:	4770      	bx	lr

08005d32 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005d32:	b480      	push	{r7}
 8005d34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d44:	d101      	bne.n	8005d4a <LL_RCC_PLL_IsReady+0x18>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <LL_RCC_PLL_IsReady+0x1a>
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr

08005d54 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	0a1b      	lsrs	r3, r3, #8
 8005d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr

08005d82 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005d82:	b480      	push	{r7}
 8005d84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0303 	and.w	r3, r3, #3
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr

08005dae <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005dae:	b480      	push	{r7}
 8005db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc0:	d101      	bne.n	8005dc6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bc80      	pop	{r7}
 8005dce:	4770      	bx	lr

08005dd0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de4:	d101      	bne.n	8005dea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr

08005df4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e06:	d101      	bne.n	8005e0c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e000      	b.n	8005e0e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc80      	pop	{r7}
 8005e14:	4770      	bx	lr

08005e16 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005e16:	b480      	push	{r7}
 8005e18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e28:	d101      	bne.n	8005e2e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr

08005e38 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e38a      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e4a:	f7ff fece 	bl	8005bea <LL_RCC_GetSysClkSource>
 8005e4e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e50:	f7ff ffa2 	bl	8005d98 <LL_RCC_PLL_GetMainSource>
 8005e54:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 80c9 	beq.w	8005ff6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_RCC_OscConfig+0x3e>
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	2b0c      	cmp	r3, #12
 8005e6e:	d17b      	bne.n	8005f68 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d178      	bne.n	8005f68 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e76:	f7ff fe5a 	bl	8005b2e <LL_RCC_MSI_IsReady>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <HAL_RCC_OscConfig+0x54>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e369      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <HAL_RCC_OscConfig+0x72>
 8005e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea8:	e006      	b.n	8005eb8 <HAL_RCC_OscConfig+0x80>
 8005eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb2:	091b      	lsrs	r3, r3, #4
 8005eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d222      	bcs.n	8005f02 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fd4f 	bl	8006964 <RCC_SetFlashLatencyFromMSIRange>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e347      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eda:	f043 0308 	orr.w	r3, r3, #8
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fe4e 	bl	8005b9c <LL_RCC_MSI_SetCalibTrimming>
 8005f00:	e021      	b.n	8005f46 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f0c:	f043 0308 	orr.w	r3, r3, #8
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f24:	4313      	orrs	r3, r2
 8005f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff fe35 	bl	8005b9c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fd14 	bl	8006964 <RCC_SetFlashLatencyFromMSIRange>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e30c      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f46:	f000 fcd5 	bl	80068f4 <HAL_RCC_GetHCLKFreq>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	4ab4      	ldr	r2, [pc, #720]	; (8006220 <HAL_RCC_OscConfig+0x3e8>)
 8005f4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f50:	4bb4      	ldr	r3, [pc, #720]	; (8006224 <HAL_RCC_OscConfig+0x3ec>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fc f817 	bl	8001f88 <HAL_InitTick>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005f5e:	7cfb      	ldrb	r3, [r7, #19]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d047      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005f64:	7cfb      	ldrb	r3, [r7, #19]
 8005f66:	e2fb      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d02c      	beq.n	8005fca <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f70:	f7ff fdc1 	bl	8005af6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f74:	f7fc f812 	bl	8001f9c <HAL_GetTick>
 8005f78:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f7c:	f7fc f80e 	bl	8001f9c <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e2e8      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f8e:	f7ff fdce 	bl	8005b2e <LL_RCC_MSI_IsReady>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0f1      	beq.n	8005f7c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fa2:	f043 0308 	orr.w	r3, r3, #8
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff fdea 	bl	8005b9c <LL_RCC_MSI_SetCalibTrimming>
 8005fc8:	e015      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005fca:	f7ff fda2 	bl	8005b12 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fce:	f7fb ffe5 	bl	8001f9c <HAL_GetTick>
 8005fd2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fd6:	f7fb ffe1 	bl	8001f9c <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e2bb      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005fe8:	f7ff fda1 	bl	8005b2e <LL_RCC_MSI_IsReady>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f1      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x19e>
 8005ff2:	e000      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ff4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d05f      	beq.n	80060c2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	2b08      	cmp	r3, #8
 8006006:	d005      	beq.n	8006014 <HAL_RCC_OscConfig+0x1dc>
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	2b0c      	cmp	r3, #12
 800600c:	d10d      	bne.n	800602a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b03      	cmp	r3, #3
 8006012:	d10a      	bne.n	800602a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006014:	f7ff fcdb 	bl	80059ce <LL_RCC_HSE_IsReady>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d050      	beq.n	80060c0 <HAL_RCC_OscConfig+0x288>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d14c      	bne.n	80060c0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e29a      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800602a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800603c:	4313      	orrs	r3, r2
 800603e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006048:	d102      	bne.n	8006050 <HAL_RCC_OscConfig+0x218>
 800604a:	f7ff fca4 	bl	8005996 <LL_RCC_HSE_Enable>
 800604e:	e00d      	b.n	800606c <HAL_RCC_OscConfig+0x234>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006058:	d104      	bne.n	8006064 <HAL_RCC_OscConfig+0x22c>
 800605a:	f7ff fc6f 	bl	800593c <LL_RCC_HSE_EnableTcxo>
 800605e:	f7ff fc9a 	bl	8005996 <LL_RCC_HSE_Enable>
 8006062:	e003      	b.n	800606c <HAL_RCC_OscConfig+0x234>
 8006064:	f7ff fca5 	bl	80059b2 <LL_RCC_HSE_Disable>
 8006068:	f7ff fc76 	bl	8005958 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d012      	beq.n	800609a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006074:	f7fb ff92 	bl	8001f9c <HAL_GetTick>
 8006078:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800607c:	f7fb ff8e 	bl	8001f9c <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b64      	cmp	r3, #100	; 0x64
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e268      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800608e:	f7ff fc9e 	bl	80059ce <LL_RCC_HSE_IsReady>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0f1      	beq.n	800607c <HAL_RCC_OscConfig+0x244>
 8006098:	e013      	b.n	80060c2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609a:	f7fb ff7f 	bl	8001f9c <HAL_GetTick>
 800609e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060a2:	f7fb ff7b 	bl	8001f9c <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b64      	cmp	r3, #100	; 0x64
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e255      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80060b4:	f7ff fc8b 	bl	80059ce <LL_RCC_HSE_IsReady>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f1      	bne.n	80060a2 <HAL_RCC_OscConfig+0x26a>
 80060be:	e000      	b.n	80060c2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d04b      	beq.n	8006166 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d005      	beq.n	80060e0 <HAL_RCC_OscConfig+0x2a8>
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2b0c      	cmp	r3, #12
 80060d8:	d113      	bne.n	8006102 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d110      	bne.n	8006102 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060e0:	f7ff fca2 	bl	8005a28 <LL_RCC_HSI_IsReady>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_RCC_OscConfig+0x2be>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e234      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fca5 	bl	8005a4a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006100:	e031      	b.n	8006166 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d019      	beq.n	800613e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800610a:	f7ff fc71 	bl	80059f0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610e:	f7fb ff45 	bl	8001f9c <HAL_GetTick>
 8006112:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006116:	f7fb ff41 	bl	8001f9c <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e21b      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006128:	f7ff fc7e 	bl	8005a28 <LL_RCC_HSI_IsReady>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0f1      	beq.n	8006116 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff fc87 	bl	8005a4a <LL_RCC_HSI_SetCalibTrimming>
 800613c:	e013      	b.n	8006166 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800613e:	f7ff fc65 	bl	8005a0c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006142:	f7fb ff2b 	bl	8001f9c <HAL_GetTick>
 8006146:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800614a:	f7fb ff27 	bl	8001f9c <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e201      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 800615c:	f7ff fc64 	bl	8005a28 <LL_RCC_HSI_IsReady>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f1      	bne.n	800614a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d06e      	beq.n	8006250 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d056      	beq.n	8006228 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800617a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800617e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006182:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	429a      	cmp	r2, r3
 8006190:	d031      	beq.n	80061f6 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d006      	beq.n	80061aa <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e1da      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d013      	beq.n	80061dc <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80061b4:	f7ff fc7e 	bl	8005ab4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061b8:	f7fb fef0 	bl	8001f9c <HAL_GetTick>
 80061bc:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061c0:	f7fb feec 	bl	8001f9c <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b11      	cmp	r3, #17
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e1c6      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80061d2:	f7ff fc7f 	bl	8005ad4 <LL_RCC_LSI_IsReady>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f1      	bne.n	80061c0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80061dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061e4:	f023 0210 	bic.w	r2, r3, #16
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061f6:	f7ff fc4d 	bl	8005a94 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061fa:	f7fb fecf 	bl	8001f9c <HAL_GetTick>
 80061fe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006202:	f7fb fecb 	bl	8001f9c <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b11      	cmp	r3, #17
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e1a5      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006214:	f7ff fc5e 	bl	8005ad4 <LL_RCC_LSI_IsReady>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0f1      	beq.n	8006202 <HAL_RCC_OscConfig+0x3ca>
 800621e:	e017      	b.n	8006250 <HAL_RCC_OscConfig+0x418>
 8006220:	20000000 	.word	0x20000000
 8006224:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006228:	f7ff fc44 	bl	8005ab4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622c:	f7fb feb6 	bl	8001f9c <HAL_GetTick>
 8006230:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006234:	f7fb feb2 	bl	8001f9c <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b11      	cmp	r3, #17
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e18c      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006246:	f7ff fc45 	bl	8005ad4 <LL_RCC_LSI_IsReady>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f1      	bne.n	8006234 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80d8 	beq.w	800640e <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800625e:	f7ff fb5b 	bl	8005918 <LL_PWR_IsEnabledBkUpAccess>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d113      	bne.n	8006290 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006268:	f7ff fb3c 	bl	80058e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800626c:	f7fb fe96 	bl	8001f9c <HAL_GetTick>
 8006270:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006274:	f7fb fe92 	bl	8001f9c <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e16c      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006286:	f7ff fb47 	bl	8005918 <LL_PWR_IsEnabledBkUpAccess>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0f1      	beq.n	8006274 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d07b      	beq.n	8006390 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	2b85      	cmp	r3, #133	; 0x85
 800629e:	d003      	beq.n	80062a8 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	2b05      	cmp	r3, #5
 80062a6:	d109      	bne.n	80062bc <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80062a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062b4:	f043 0304 	orr.w	r3, r3, #4
 80062b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062bc:	f7fb fe6e 	bl	8001f9c <HAL_GetTick>
 80062c0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80062d6:	e00a      	b.n	80062ee <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d8:	f7fb fe60 	bl	8001f9c <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e138      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80062ee:	f7ff fbc0 	bl	8005a72 <LL_RCC_LSE_IsReady>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0ef      	beq.n	80062d8 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b81      	cmp	r3, #129	; 0x81
 80062fe:	d003      	beq.n	8006308 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b85      	cmp	r3, #133	; 0x85
 8006306:	d121      	bne.n	800634c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006308:	f7fb fe48 	bl	8001f9c <HAL_GetTick>
 800630c:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800630e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800631a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006322:	e00a      	b.n	800633a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006324:	f7fb fe3a 	bl	8001f9c <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006332:	4293      	cmp	r3, r2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e112      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800633a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0ec      	beq.n	8006324 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800634a:	e060      	b.n	800640e <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7fb fe26 	bl	8001f9c <HAL_GetTick>
 8006350:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800635e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006366:	e00a      	b.n	800637e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006368:	f7fb fe18 	bl	8001f9c <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	f241 3288 	movw	r2, #5000	; 0x1388
 8006376:	4293      	cmp	r3, r2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e0f0      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800637e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1ec      	bne.n	8006368 <HAL_RCC_OscConfig+0x530>
 800638e:	e03e      	b.n	800640e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006390:	f7fb fe04 	bl	8001f9c <HAL_GetTick>
 8006394:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80063aa:	e00a      	b.n	80063c2 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ac:	f7fb fdf6 	bl	8001f9c <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e0ce      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80063c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1ec      	bne.n	80063ac <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d2:	f7fb fde3 	bl	8001f9c <HAL_GetTick>
 80063d6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80063d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063e4:	f023 0301 	bic.w	r3, r3, #1
 80063e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80063ec:	e00a      	b.n	8006404 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ee:	f7fb fdd5 	bl	8001f9c <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e0ad      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006404:	f7ff fb35 	bl	8005a72 <LL_RCC_LSE_IsReady>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1ef      	bne.n	80063ee <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 80a3 	beq.w	800655e <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b0c      	cmp	r3, #12
 800641c:	d076      	beq.n	800650c <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	2b02      	cmp	r3, #2
 8006424:	d14b      	bne.n	80064be <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006426:	f7ff fc76 	bl	8005d16 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642a:	f7fb fdb7 	bl	8001f9c <HAL_GetTick>
 800642e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006432:	f7fb fdb3 	bl	8001f9c <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b0a      	cmp	r3, #10
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e08d      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006444:	f7ff fc75 	bl	8005d32 <LL_RCC_PLL_IsReady>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f1      	bne.n	8006432 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800644e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	4b44      	ldr	r3, [pc, #272]	; (8006568 <HAL_RCC_OscConfig+0x730>)
 8006456:	4013      	ands	r3, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006460:	4311      	orrs	r1, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006466:	0212      	lsls	r2, r2, #8
 8006468:	4311      	orrs	r1, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800646e:	4311      	orrs	r1, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006474:	4311      	orrs	r1, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800647a:	430a      	orrs	r2, r1
 800647c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006480:	4313      	orrs	r3, r2
 8006482:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006484:	f7ff fc39 	bl	8005cfa <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006496:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006498:	f7fb fd80 	bl	8001f9c <HAL_GetTick>
 800649c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a0:	f7fb fd7c 	bl	8001f9c <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b0a      	cmp	r3, #10
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e056      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 80064b2:	f7ff fc3e 	bl	8005d32 <LL_RCC_PLL_IsReady>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0f1      	beq.n	80064a0 <HAL_RCC_OscConfig+0x668>
 80064bc:	e04f      	b.n	800655e <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064be:	f7ff fc2a 	bl	8005d16 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80064c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064cc:	f023 0303 	bic.w	r3, r3, #3
 80064d0:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80064d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064dc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80064e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064e4:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e6:	f7fb fd59 	bl	8001f9c <HAL_GetTick>
 80064ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80064ec:	e008      	b.n	8006500 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ee:	f7fb fd55 	bl	8001f9c <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b0a      	cmp	r3, #10
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e02f      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006500:	f7ff fc17 	bl	8005d32 <LL_RCC_PLL_IsReady>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1f1      	bne.n	80064ee <HAL_RCC_OscConfig+0x6b6>
 800650a:	e028      	b.n	800655e <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e023      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f003 0203 	and.w	r2, r3, #3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	429a      	cmp	r2, r3
 800652c:	d115      	bne.n	800655a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006538:	429a      	cmp	r2, r3
 800653a:	d10e      	bne.n	800655a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	429a      	cmp	r2, r3
 800654a:	d106      	bne.n	800655a <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006556:	429a      	cmp	r2, r3
 8006558:	d001      	beq.n	800655e <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3720      	adds	r7, #32
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	11c1808c 	.word	0x11c1808c

0800656c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e10f      	b.n	80067a0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006580:	4b89      	ldr	r3, [pc, #548]	; (80067a8 <HAL_RCC_ClockConfig+0x23c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d91b      	bls.n	80065c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658e:	4b86      	ldr	r3, [pc, #536]	; (80067a8 <HAL_RCC_ClockConfig+0x23c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f023 0207 	bic.w	r2, r3, #7
 8006596:	4984      	ldr	r1, [pc, #528]	; (80067a8 <HAL_RCC_ClockConfig+0x23c>)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	4313      	orrs	r3, r2
 800659c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659e:	f7fb fcfd 	bl	8001f9c <HAL_GetTick>
 80065a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a4:	e008      	b.n	80065b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80065a6:	f7fb fcf9 	bl	8001f9c <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e0f3      	b.n	80067a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b8:	4b7b      	ldr	r3, [pc, #492]	; (80067a8 <HAL_RCC_ClockConfig+0x23c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d1ef      	bne.n	80065a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d016      	beq.n	8006600 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fb12 	bl	8005c00 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065dc:	f7fb fcde 	bl	8001f9c <HAL_GetTick>
 80065e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065e4:	f7fb fcda 	bl	8001f9c <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e0d4      	b.n	80067a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80065f6:	f7ff fbda 	bl	8005dae <LL_RCC_IsActiveFlag_HPRE>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0f1      	beq.n	80065e4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	d016      	beq.n	800663a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fb08 	bl	8005c26 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006616:	f7fb fcc1 	bl	8001f9c <HAL_GetTick>
 800661a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800661c:	e008      	b.n	8006630 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800661e:	f7fb fcbd 	bl	8001f9c <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e0b7      	b.n	80067a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006630:	f7ff fbce 	bl	8005dd0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0f1      	beq.n	800661e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff fb01 	bl	8005c52 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006650:	f7fb fca4 	bl	8001f9c <HAL_GetTick>
 8006654:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006656:	e008      	b.n	800666a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006658:	f7fb fca0 	bl	8001f9c <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e09a      	b.n	80067a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800666a:	f7ff fbc3 	bl	8005df4 <LL_RCC_IsActiveFlag_PPRE1>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0f1      	beq.n	8006658 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d017      	beq.n	80066b0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff faf6 	bl	8005c78 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800668c:	f7fb fc86 	bl	8001f9c <HAL_GetTick>
 8006690:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006694:	f7fb fc82 	bl	8001f9c <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e07c      	b.n	80067a0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80066a6:	f7ff fbb6 	bl	8005e16 <LL_RCC_IsActiveFlag_PPRE2>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f1      	beq.n	8006694 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d043      	beq.n	8006744 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d106      	bne.n	80066d2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80066c4:	f7ff f983 	bl	80059ce <LL_RCC_HSE_IsReady>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d11e      	bne.n	800670c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e066      	b.n	80067a0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d106      	bne.n	80066e8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80066da:	f7ff fb2a 	bl	8005d32 <LL_RCC_PLL_IsReady>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d113      	bne.n	800670c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e05b      	b.n	80067a0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d106      	bne.n	80066fe <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80066f0:	f7ff fa1d 	bl	8005b2e <LL_RCC_MSI_IsReady>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d108      	bne.n	800670c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e050      	b.n	80067a0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80066fe:	f7ff f993 	bl	8005a28 <LL_RCC_HSI_IsReady>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e049      	b.n	80067a0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fa57 	bl	8005bc4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006716:	f7fb fc41 	bl	8001f9c <HAL_GetTick>
 800671a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800671c:	e00a      	b.n	8006734 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800671e:	f7fb fc3d 	bl	8001f9c <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	f241 3288 	movw	r2, #5000	; 0x1388
 800672c:	4293      	cmp	r3, r2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e035      	b.n	80067a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006734:	f7ff fa59 	bl	8005bea <LL_RCC_GetSysClkSource>
 8006738:	4602      	mov	r2, r0
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	429a      	cmp	r2, r3
 8006742:	d1ec      	bne.n	800671e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006744:	4b18      	ldr	r3, [pc, #96]	; (80067a8 <HAL_RCC_ClockConfig+0x23c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d21b      	bcs.n	800678a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006752:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <HAL_RCC_ClockConfig+0x23c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f023 0207 	bic.w	r2, r3, #7
 800675a:	4913      	ldr	r1, [pc, #76]	; (80067a8 <HAL_RCC_ClockConfig+0x23c>)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	4313      	orrs	r3, r2
 8006760:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006762:	f7fb fc1b 	bl	8001f9c <HAL_GetTick>
 8006766:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006768:	e008      	b.n	800677c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800676a:	f7fb fc17 	bl	8001f9c <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e011      	b.n	80067a0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800677c:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <HAL_RCC_ClockConfig+0x23c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d1ef      	bne.n	800676a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800678a:	f000 f8b3 	bl	80068f4 <HAL_RCC_GetHCLKFreq>
 800678e:	4603      	mov	r3, r0
 8006790:	4a06      	ldr	r2, [pc, #24]	; (80067ac <HAL_RCC_ClockConfig+0x240>)
 8006792:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006794:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <HAL_RCC_ClockConfig+0x244>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4618      	mov	r0, r3
 800679a:	f7fb fbf5 	bl	8001f88 <HAL_InitTick>
 800679e:	4603      	mov	r3, r0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	58004000 	.word	0x58004000
 80067ac:	20000000 	.word	0x20000000
 80067b0:	20000034 	.word	0x20000034

080067b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067b4:	b590      	push	{r4, r7, lr}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067c2:	f7ff fa12 	bl	8005bea <LL_RCC_GetSysClkSource>
 80067c6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067c8:	f7ff fae6 	bl	8005d98 <LL_RCC_PLL_GetMainSource>
 80067cc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <HAL_RCC_GetSysClockFreq+0x2c>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b0c      	cmp	r3, #12
 80067d8:	d139      	bne.n	800684e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d136      	bne.n	800684e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80067e0:	f7ff f9b5 	bl	8005b4e <LL_RCC_MSI_IsEnabledRangeSelect>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d115      	bne.n	8006816 <HAL_RCC_GetSysClockFreq+0x62>
 80067ea:	f7ff f9b0 	bl	8005b4e <LL_RCC_MSI_IsEnabledRangeSelect>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d106      	bne.n	8006802 <HAL_RCC_GetSysClockFreq+0x4e>
 80067f4:	f7ff f9bb 	bl	8005b6e <LL_RCC_MSI_GetRange>
 80067f8:	4603      	mov	r3, r0
 80067fa:	0a1b      	lsrs	r3, r3, #8
 80067fc:	f003 030f 	and.w	r3, r3, #15
 8006800:	e005      	b.n	800680e <HAL_RCC_GetSysClockFreq+0x5a>
 8006802:	f7ff f9bf 	bl	8005b84 <LL_RCC_MSI_GetRangeAfterStandby>
 8006806:	4603      	mov	r3, r0
 8006808:	0a1b      	lsrs	r3, r3, #8
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	4a36      	ldr	r2, [pc, #216]	; (80068e8 <HAL_RCC_GetSysClockFreq+0x134>)
 8006810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006814:	e014      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x8c>
 8006816:	f7ff f99a 	bl	8005b4e <LL_RCC_MSI_IsEnabledRangeSelect>
 800681a:	4603      	mov	r3, r0
 800681c:	2b01      	cmp	r3, #1
 800681e:	d106      	bne.n	800682e <HAL_RCC_GetSysClockFreq+0x7a>
 8006820:	f7ff f9a5 	bl	8005b6e <LL_RCC_MSI_GetRange>
 8006824:	4603      	mov	r3, r0
 8006826:	091b      	lsrs	r3, r3, #4
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	e005      	b.n	800683a <HAL_RCC_GetSysClockFreq+0x86>
 800682e:	f7ff f9a9 	bl	8005b84 <LL_RCC_MSI_GetRangeAfterStandby>
 8006832:	4603      	mov	r3, r0
 8006834:	091b      	lsrs	r3, r3, #4
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	4a2b      	ldr	r2, [pc, #172]	; (80068e8 <HAL_RCC_GetSysClockFreq+0x134>)
 800683c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006840:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d115      	bne.n	8006874 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800684c:	e012      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b04      	cmp	r3, #4
 8006852:	d102      	bne.n	800685a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006854:	4b25      	ldr	r3, [pc, #148]	; (80068ec <HAL_RCC_GetSysClockFreq+0x138>)
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	e00c      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b08      	cmp	r3, #8
 800685e:	d109      	bne.n	8006874 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006860:	f7ff f888 	bl	8005974 <LL_RCC_HSE_IsEnabledDiv2>
 8006864:	4603      	mov	r3, r0
 8006866:	2b01      	cmp	r3, #1
 8006868:	d102      	bne.n	8006870 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800686a:	4b20      	ldr	r3, [pc, #128]	; (80068ec <HAL_RCC_GetSysClockFreq+0x138>)
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	e001      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006870:	4b1f      	ldr	r3, [pc, #124]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006872:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006874:	f7ff f9b9 	bl	8005bea <LL_RCC_GetSysClkSource>
 8006878:	4603      	mov	r3, r0
 800687a:	2b0c      	cmp	r3, #12
 800687c:	d12f      	bne.n	80068de <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800687e:	f7ff fa8b 	bl	8005d98 <LL_RCC_PLL_GetMainSource>
 8006882:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b02      	cmp	r3, #2
 8006888:	d003      	beq.n	8006892 <HAL_RCC_GetSysClockFreq+0xde>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b03      	cmp	r3, #3
 800688e:	d003      	beq.n	8006898 <HAL_RCC_GetSysClockFreq+0xe4>
 8006890:	e00d      	b.n	80068ae <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006892:	4b16      	ldr	r3, [pc, #88]	; (80068ec <HAL_RCC_GetSysClockFreq+0x138>)
 8006894:	60fb      	str	r3, [r7, #12]
        break;
 8006896:	e00d      	b.n	80068b4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006898:	f7ff f86c 	bl	8005974 <LL_RCC_HSE_IsEnabledDiv2>
 800689c:	4603      	mov	r3, r0
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d102      	bne.n	80068a8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80068a2:	4b12      	ldr	r3, [pc, #72]	; (80068ec <HAL_RCC_GetSysClockFreq+0x138>)
 80068a4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80068a6:	e005      	b.n	80068b4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80068a8:	4b11      	ldr	r3, [pc, #68]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80068aa:	60fb      	str	r3, [r7, #12]
        break;
 80068ac:	e002      	b.n	80068b4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	60fb      	str	r3, [r7, #12]
        break;
 80068b2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80068b4:	f7ff fa4e 	bl	8005d54 <LL_RCC_PLL_GetN>
 80068b8:	4602      	mov	r2, r0
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	fb03 f402 	mul.w	r4, r3, r2
 80068c0:	f7ff fa5f 	bl	8005d82 <LL_RCC_PLL_GetDivider>
 80068c4:	4603      	mov	r3, r0
 80068c6:	091b      	lsrs	r3, r3, #4
 80068c8:	3301      	adds	r3, #1
 80068ca:	fbb4 f4f3 	udiv	r4, r4, r3
 80068ce:	f7ff fa4d 	bl	8005d6c <LL_RCC_PLL_GetR>
 80068d2:	4603      	mov	r3, r0
 80068d4:	0f5b      	lsrs	r3, r3, #29
 80068d6:	3301      	adds	r3, #1
 80068d8:	fbb4 f3f3 	udiv	r3, r4, r3
 80068dc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80068de:	697b      	ldr	r3, [r7, #20]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd90      	pop	{r4, r7, pc}
 80068e8:	0801b608 	.word	0x0801b608
 80068ec:	00f42400 	.word	0x00f42400
 80068f0:	01e84800 	.word	0x01e84800

080068f4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f4:	b598      	push	{r3, r4, r7, lr}
 80068f6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80068f8:	f7ff ff5c 	bl	80067b4 <HAL_RCC_GetSysClockFreq>
 80068fc:	4604      	mov	r4, r0
 80068fe:	f7ff f9ce 	bl	8005c9e <LL_RCC_GetAHBPrescaler>
 8006902:	4603      	mov	r3, r0
 8006904:	091b      	lsrs	r3, r3, #4
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	4a03      	ldr	r2, [pc, #12]	; (8006918 <HAL_RCC_GetHCLKFreq+0x24>)
 800690c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006910:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006914:	4618      	mov	r0, r3
 8006916:	bd98      	pop	{r3, r4, r7, pc}
 8006918:	0801b5a8 	.word	0x0801b5a8

0800691c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800691c:	b598      	push	{r3, r4, r7, lr}
 800691e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006920:	f7ff ffe8 	bl	80068f4 <HAL_RCC_GetHCLKFreq>
 8006924:	4604      	mov	r4, r0
 8006926:	f7ff f9d2 	bl	8005cce <LL_RCC_GetAPB1Prescaler>
 800692a:	4603      	mov	r3, r0
 800692c:	0a1b      	lsrs	r3, r3, #8
 800692e:	4a03      	ldr	r2, [pc, #12]	; (800693c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006934:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006938:	4618      	mov	r0, r3
 800693a:	bd98      	pop	{r3, r4, r7, pc}
 800693c:	0801b5e8 	.word	0x0801b5e8

08006940 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006940:	b598      	push	{r3, r4, r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006944:	f7ff ffd6 	bl	80068f4 <HAL_RCC_GetHCLKFreq>
 8006948:	4604      	mov	r4, r0
 800694a:	f7ff f9cb 	bl	8005ce4 <LL_RCC_GetAPB2Prescaler>
 800694e:	4603      	mov	r3, r0
 8006950:	0adb      	lsrs	r3, r3, #11
 8006952:	4a03      	ldr	r2, [pc, #12]	; (8006960 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006958:	fa24 f303 	lsr.w	r3, r4, r3
}
 800695c:	4618      	mov	r0, r3
 800695e:	bd98      	pop	{r3, r4, r7, pc}
 8006960:	0801b5e8 	.word	0x0801b5e8

08006964 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006964:	b590      	push	{r4, r7, lr}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	091b      	lsrs	r3, r3, #4
 8006970:	f003 030f 	and.w	r3, r3, #15
 8006974:	4a10      	ldr	r2, [pc, #64]	; (80069b8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800697c:	f7ff f99a 	bl	8005cb4 <LL_RCC_GetAHB3Prescaler>
 8006980:	4603      	mov	r3, r0
 8006982:	091b      	lsrs	r3, r3, #4
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	4a0c      	ldr	r2, [pc, #48]	; (80069bc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800698a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	fbb2 f3f3 	udiv	r3, r2, r3
 8006994:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800699a:	fba2 2303 	umull	r2, r3, r2, r3
 800699e:	0c9c      	lsrs	r4, r3, #18
 80069a0:	f7fe ffae 	bl	8005900 <HAL_PWREx_GetVoltageRange>
 80069a4:	4603      	mov	r3, r0
 80069a6:	4619      	mov	r1, r3
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 f80b 	bl	80069c4 <RCC_SetFlashLatency>
 80069ae:	4603      	mov	r3, r0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd90      	pop	{r4, r7, pc}
 80069b8:	0801b608 	.word	0x0801b608
 80069bc:	0801b5a8 	.word	0x0801b5a8
 80069c0:	431bde83 	.word	0x431bde83

080069c4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08e      	sub	sp, #56	; 0x38
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80069ce:	4a3c      	ldr	r2, [pc, #240]	; (8006ac0 <RCC_SetFlashLatency+0xfc>)
 80069d0:	f107 0320 	add.w	r3, r7, #32
 80069d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069d8:	6018      	str	r0, [r3, #0]
 80069da:	3304      	adds	r3, #4
 80069dc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80069de:	4a39      	ldr	r2, [pc, #228]	; (8006ac4 <RCC_SetFlashLatency+0x100>)
 80069e0:	f107 0318 	add.w	r3, r7, #24
 80069e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069e8:	6018      	str	r0, [r3, #0]
 80069ea:	3304      	adds	r3, #4
 80069ec:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80069ee:	4a36      	ldr	r2, [pc, #216]	; (8006ac8 <RCC_SetFlashLatency+0x104>)
 80069f0:	f107 030c 	add.w	r3, r7, #12
 80069f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80069f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80069fa:	2300      	movs	r3, #0
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a04:	d11d      	bne.n	8006a42 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a06:	2300      	movs	r3, #0
 8006a08:	633b      	str	r3, [r7, #48]	; 0x30
 8006a0a:	e016      	b.n	8006a3a <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a14:	4413      	add	r3, r2
 8006a16:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d808      	bhi.n	8006a34 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a32:	e023      	b.n	8006a7c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	3301      	adds	r3, #1
 8006a38:	633b      	str	r3, [r7, #48]	; 0x30
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d9e5      	bls.n	8006a0c <RCC_SetFlashLatency+0x48>
 8006a40:	e01c      	b.n	8006a7c <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a42:	2300      	movs	r3, #0
 8006a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a46:	e016      	b.n	8006a76 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a50:	4413      	add	r3, r2
 8006a52:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006a56:	461a      	mov	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d808      	bhi.n	8006a70 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a66:	4413      	add	r3, r2
 8006a68:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006a6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a6e:	e005      	b.n	8006a7c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a72:	3301      	adds	r3, #1
 8006a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d9e5      	bls.n	8006a48 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a7c:	4b13      	ldr	r3, [pc, #76]	; (8006acc <RCC_SetFlashLatency+0x108>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f023 0207 	bic.w	r2, r3, #7
 8006a84:	4911      	ldr	r1, [pc, #68]	; (8006acc <RCC_SetFlashLatency+0x108>)
 8006a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a8c:	f7fb fa86 	bl	8001f9c <HAL_GetTick>
 8006a90:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006a92:	e008      	b.n	8006aa6 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006a94:	f7fb fa82 	bl	8001f9c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e007      	b.n	8006ab6 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006aa6:	4b09      	ldr	r3, [pc, #36]	; (8006acc <RCC_SetFlashLatency+0x108>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d1ef      	bne.n	8006a94 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3738      	adds	r7, #56	; 0x38
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	0801ae0c 	.word	0x0801ae0c
 8006ac4:	0801ae14 	.word	0x0801ae14
 8006ac8:	0801ae1c 	.word	0x0801ae1c
 8006acc:	58004000 	.word	0x58004000

08006ad0 <LL_RCC_LSE_IsReady>:
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d101      	bne.n	8006ae8 <LL_RCC_LSE_IsReady+0x18>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <LL_RCC_LSE_IsReady+0x1a>
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr

08006af2 <LL_RCC_SetUSARTClockSource>:
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006afe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0c1b      	lsrs	r3, r3, #16
 8006b06:	43db      	mvns	r3, r3
 8006b08:	401a      	ands	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr

08006b22 <LL_RCC_SetI2SClockSource>:
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <LL_RCC_SetLPUARTClockSource>:
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr

08006b76 <LL_RCC_SetI2CClockSource>:
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	091b      	lsrs	r3, r3, #4
 8006b8a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	401a      	ands	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bc80      	pop	{r7}
 8006bac:	4770      	bx	lr

08006bae <LL_RCC_SetLPTIMClockSource>:
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	0c1b      	lsrs	r3, r3, #16
 8006bc2:	041b      	lsls	r3, r3, #16
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	401a      	ands	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	041b      	lsls	r3, r3, #16
 8006bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr

08006be0 <LL_RCC_SetRNGClockSource>:
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006bf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr

08006c0a <LL_RCC_SetADCClockSource>:
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr

08006c34 <LL_RCC_SetRTCClockSource>:
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr

08006c5e <LL_RCC_GetRTCClockSource>:
{
 8006c5e:	b480      	push	{r7}
 8006c60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bc80      	pop	{r7}
 8006c74:	4770      	bx	lr

08006c76 <LL_RCC_ForceBackupDomainReset>:
{
 8006c76:	b480      	push	{r7}
 8006c78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c8e:	bf00      	nop
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr

08006c96 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006c96:	b480      	push	{r7}
 8006c98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cae:	bf00      	nop
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr
	...

08006cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006cc8:	2300      	movs	r3, #0
 8006cca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d058      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006cd8:	f7fe fe04 	bl	80058e4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cdc:	f7fb f95e 	bl	8001f9c <HAL_GetTick>
 8006ce0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006ce2:	e009      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ce4:	f7fb f95a 	bl	8001f9c <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d902      	bls.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	74fb      	strb	r3, [r7, #19]
        break;
 8006cf6:	e006      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006cf8:	4b7b      	ldr	r3, [pc, #492]	; (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d04:	d1ee      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006d06:	7cfb      	ldrb	r3, [r7, #19]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d13c      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006d0c:	f7ff ffa7 	bl	8006c5e <LL_RCC_GetRTCClockSource>
 8006d10:	4602      	mov	r2, r0
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d00f      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d26:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d28:	f7ff ffa5 	bl	8006c76 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d2c:	f7ff ffb3 	bl	8006c96 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d014      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d44:	f7fb f92a 	bl	8001f9c <HAL_GetTick>
 8006d48:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006d4a:	e00b      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4c:	f7fb f926 	bl	8001f9c <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d902      	bls.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	74fb      	strb	r3, [r7, #19]
            break;
 8006d62:	e004      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006d64:	f7ff feb4 	bl	8006ad0 <LL_RCC_LSE_IsReady>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d1ee      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006d6e:	7cfb      	ldrb	r3, [r7, #19]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d105      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff ff5b 	bl	8006c34 <LL_RCC_SetRTCClockSource>
 8006d7e:	e004      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d80:	7cfb      	ldrb	r3, [r7, #19]
 8006d82:	74bb      	strb	r3, [r7, #18]
 8006d84:	e001      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d86:	7cfb      	ldrb	r3, [r7, #19]
 8006d88:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fea9 	bl	8006af2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d004      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff fe9e 	bl	8006af2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff fec0 	bl	8006b4c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fee6 	bl	8006bae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff fedb 	bl	8006bae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff fed0 	bl	8006bae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff fea9 	bl	8006b76 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d004      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff fe9e 	bl	8006b76 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d004      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fe93 	bl	8006b76 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0310 	and.w	r3, r3, #16
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d011      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fe5e 	bl	8006b22 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d010      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff fea5 	bl	8006be0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d107      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d011      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff fea3 	bl	8006c0a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ecc:	d107      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006edc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006ede:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	58000400 	.word	0x58000400

08006eec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d068      	beq.n	8006fd0 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7fa fdd2 	bl	8001abc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f20:	4b2e      	ldr	r3, [pc, #184]	; (8006fdc <HAL_RTC_Init+0xf0>)
 8006f22:	22ca      	movs	r2, #202	; 0xca
 8006f24:	625a      	str	r2, [r3, #36]	; 0x24
 8006f26:	4b2d      	ldr	r3, [pc, #180]	; (8006fdc <HAL_RTC_Init+0xf0>)
 8006f28:	2253      	movs	r2, #83	; 0x53
 8006f2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fa0f 	bl	8007350 <RTC_EnterInitMode>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d13f      	bne.n	8006fbc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006f3c:	4b27      	ldr	r3, [pc, #156]	; (8006fdc <HAL_RTC_Init+0xf0>)
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	4a26      	ldr	r2, [pc, #152]	; (8006fdc <HAL_RTC_Init+0xf0>)
 8006f42:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f4a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006f4c:	4b23      	ldr	r3, [pc, #140]	; (8006fdc <HAL_RTC_Init+0xf0>)
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6859      	ldr	r1, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	4319      	orrs	r1, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	491e      	ldr	r1, [pc, #120]	; (8006fdc <HAL_RTC_Init+0xf0>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	041b      	lsls	r3, r3, #16
 8006f70:	491a      	ldr	r1, [pc, #104]	; (8006fdc <HAL_RTC_Init+0xf0>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006f76:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <HAL_RTC_Init+0xf0>)
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f86:	430b      	orrs	r3, r1
 8006f88:	4914      	ldr	r1, [pc, #80]	; (8006fdc <HAL_RTC_Init+0xf0>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa12 	bl	80073b8 <RTC_ExitInitMode>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10e      	bne.n	8006fbc <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <HAL_RTC_Init+0xf0>)
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a19      	ldr	r1, [r3, #32]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	4319      	orrs	r1, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	430b      	orrs	r3, r1
 8006fb6:	4909      	ldr	r1, [pc, #36]	; (8006fdc <HAL_RTC_Init+0xf0>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fbc:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <HAL_RTC_Init+0xf0>)
 8006fbe:	22ff      	movs	r2, #255	; 0xff
 8006fc0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d103      	bne.n	8006fd0 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	40002800 	.word	0x40002800

08006fe0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006fe0:	b590      	push	{r4, r7, lr}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d101      	bne.n	8006ffe <HAL_RTC_SetAlarm_IT+0x1e>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e0f3      	b.n	80071e6 <HAL_RTC_SetAlarm_IT+0x206>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800700e:	4b78      	ldr	r3, [pc, #480]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007016:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701e:	d06a      	beq.n	80070f6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d13a      	bne.n	800709c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007026:	4b72      	ldr	r3, [pc, #456]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	d102      	bne.n	8007038 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2200      	movs	r2, #0
 8007036:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f9f5 	bl	8007434 <RTC_ByteToBcd2>
 800704a:	4603      	mov	r3, r0
 800704c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	785b      	ldrb	r3, [r3, #1]
 8007052:	4618      	mov	r0, r3
 8007054:	f000 f9ee 	bl	8007434 <RTC_ByteToBcd2>
 8007058:	4603      	mov	r3, r0
 800705a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800705c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	789b      	ldrb	r3, [r3, #2]
 8007062:	4618      	mov	r0, r3
 8007064:	f000 f9e6 	bl	8007434 <RTC_ByteToBcd2>
 8007068:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800706a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	78db      	ldrb	r3, [r3, #3]
 8007072:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007074:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800707e:	4618      	mov	r0, r3
 8007080:	f000 f9d8 	bl	8007434 <RTC_ByteToBcd2>
 8007084:	4603      	mov	r3, r0
 8007086:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007088:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007090:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]
 800709a:	e02c      	b.n	80070f6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80070a4:	d00d      	beq.n	80070c2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070ae:	d008      	beq.n	80070c2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80070b0:	4b4f      	ldr	r3, [pc, #316]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2200      	movs	r2, #0
 80070c0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070ce:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070d4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	78db      	ldrb	r3, [r3, #3]
 80070da:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070dc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070e4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070e6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070ec:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070f6:	4b3e      	ldr	r3, [pc, #248]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80070f8:	22ca      	movs	r2, #202	; 0xca
 80070fa:	625a      	str	r2, [r3, #36]	; 0x24
 80070fc:	4b3c      	ldr	r3, [pc, #240]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80070fe:	2253      	movs	r2, #83	; 0x53
 8007100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800710a:	d12c      	bne.n	8007166 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800710c:	4b38      	ldr	r3, [pc, #224]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	4a37      	ldr	r2, [pc, #220]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007112:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007116:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007118:	4b35      	ldr	r3, [pc, #212]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800711a:	2201      	movs	r2, #1
 800711c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007124:	d107      	bne.n	8007136 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	4930      	ldr	r1, [pc, #192]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007130:	4313      	orrs	r3, r2
 8007132:	644b      	str	r3, [r1, #68]	; 0x44
 8007134:	e006      	b.n	8007144 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007136:	4a2e      	ldr	r2, [pc, #184]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800713c:	4a2c      	ldr	r2, [pc, #176]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007144:	4a2a      	ldr	r2, [pc, #168]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007150:	f043 0201 	orr.w	r2, r3, #1
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007158:	4b25      	ldr	r3, [pc, #148]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	4a24      	ldr	r2, [pc, #144]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800715e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007162:	6193      	str	r3, [r2, #24]
 8007164:	e02b      	b.n	80071be <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007166:	4b22      	ldr	r3, [pc, #136]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	4a21      	ldr	r2, [pc, #132]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800716c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8007170:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007172:	4b1f      	ldr	r3, [pc, #124]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007174:	2202      	movs	r2, #2
 8007176:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800717e:	d107      	bne.n	8007190 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	699a      	ldr	r2, [r3, #24]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	4919      	ldr	r1, [pc, #100]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800718a:	4313      	orrs	r3, r2
 800718c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800718e:	e006      	b.n	800719e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007190:	4a17      	ldr	r2, [pc, #92]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007196:	4a16      	ldr	r2, [pc, #88]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800719e:	4a14      	ldr	r2, [pc, #80]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071aa:	f043 0202 	orr.w	r2, r3, #2
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80071b2:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	4a0e      	ldr	r2, [pc, #56]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80071b8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80071bc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80071be:	4b0d      	ldr	r3, [pc, #52]	; (80071f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80071c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c4:	4a0b      	ldr	r2, [pc, #44]	; (80071f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80071c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ce:	4b08      	ldr	r3, [pc, #32]	; (80071f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80071d0:	22ff      	movs	r2, #255	; 0xff
 80071d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd90      	pop	{r4, r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40002800 	.word	0x40002800
 80071f4:	58000800 	.word	0x58000800

080071f8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_RTC_DeactivateAlarm+0x18>
 800720c:	2302      	movs	r3, #2
 800720e:	e048      	b.n	80072a2 <HAL_RTC_DeactivateAlarm+0xaa>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007220:	4b22      	ldr	r3, [pc, #136]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007222:	22ca      	movs	r2, #202	; 0xca
 8007224:	625a      	str	r2, [r3, #36]	; 0x24
 8007226:	4b21      	ldr	r3, [pc, #132]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007228:	2253      	movs	r2, #83	; 0x53
 800722a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007232:	d115      	bne.n	8007260 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007234:	4b1d      	ldr	r3, [pc, #116]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	4a1c      	ldr	r2, [pc, #112]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800723a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800723e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007240:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007244:	4a19      	ldr	r2, [pc, #100]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800724a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007250:	f023 0201 	bic.w	r2, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007258:	4b14      	ldr	r3, [pc, #80]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800725a:	2201      	movs	r2, #1
 800725c:	65da      	str	r2, [r3, #92]	; 0x5c
 800725e:	e014      	b.n	800728a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007260:	4b12      	ldr	r3, [pc, #72]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	4a11      	ldr	r2, [pc, #68]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007266:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800726a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800726c:	4b0f      	ldr	r3, [pc, #60]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800726e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007270:	4a0e      	ldr	r2, [pc, #56]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007272:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007276:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727c:	f023 0202 	bic.w	r2, r3, #2
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007284:	4b09      	ldr	r3, [pc, #36]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8007286:	2202      	movs	r2, #2
 8007288:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800728a:	4b08      	ldr	r3, [pc, #32]	; (80072ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800728c:	22ff      	movs	r2, #255	; 0xff
 800728e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr
 80072ac:	40002800 	.word	0x40002800

080072b0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80072b8:	4b11      	ldr	r3, [pc, #68]	; (8007300 <HAL_RTC_AlarmIRQHandler+0x50>)
 80072ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	4013      	ands	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80072ce:	4b0c      	ldr	r3, [pc, #48]	; (8007300 <HAL_RTC_AlarmIRQHandler+0x50>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7fb f8ef 	bl	80024b8 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d005      	beq.n	80072f0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80072e4:	4b06      	ldr	r3, [pc, #24]	; (8007300 <HAL_RTC_AlarmIRQHandler+0x50>)
 80072e6:	2202      	movs	r2, #2
 80072e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f94a 	bl	8007584 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80072f8:	bf00      	nop
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	40002800 	.word	0x40002800

08007304 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800730c:	4b0f      	ldr	r3, [pc, #60]	; (800734c <HAL_RTC_WaitForSynchro+0x48>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	4a0e      	ldr	r2, [pc, #56]	; (800734c <HAL_RTC_WaitForSynchro+0x48>)
 8007312:	f023 0320 	bic.w	r3, r3, #32
 8007316:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007318:	f7fa fe40 	bl	8001f9c <HAL_GetTick>
 800731c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800731e:	e009      	b.n	8007334 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007320:	f7fa fe3c 	bl	8001f9c <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800732e:	d901      	bls.n	8007334 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e006      	b.n	8007342 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <HAL_RTC_WaitForSynchro+0x48>)
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0ef      	beq.n	8007320 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	40002800 	.word	0x40002800

08007350 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800735c:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <RTC_EnterInitMode+0x64>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d120      	bne.n	80073aa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007368:	4b12      	ldr	r3, [pc, #72]	; (80073b4 <RTC_EnterInitMode+0x64>)
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	4a11      	ldr	r2, [pc, #68]	; (80073b4 <RTC_EnterInitMode+0x64>)
 800736e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007372:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007374:	f7fa fe12 	bl	8001f9c <HAL_GetTick>
 8007378:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800737a:	e00d      	b.n	8007398 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800737c:	f7fa fe0e 	bl	8001f9c <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800738a:	d905      	bls.n	8007398 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2203      	movs	r2, #3
 8007394:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007398:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <RTC_EnterInitMode+0x64>)
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d102      	bne.n	80073aa <RTC_EnterInitMode+0x5a>
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d1e8      	bne.n	800737c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	40002800 	.word	0x40002800

080073b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80073c4:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <RTC_ExitInitMode+0x78>)
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	4a19      	ldr	r2, [pc, #100]	; (8007430 <RTC_ExitInitMode+0x78>)
 80073ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ce:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80073d0:	4b17      	ldr	r3, [pc, #92]	; (8007430 <RTC_ExitInitMode+0x78>)
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f003 0320 	and.w	r3, r3, #32
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10c      	bne.n	80073f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff ff91 	bl	8007304 <HAL_RTC_WaitForSynchro>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01e      	beq.n	8007426 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2203      	movs	r2, #3
 80073ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	73fb      	strb	r3, [r7, #15]
 80073f4:	e017      	b.n	8007426 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073f6:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <RTC_ExitInitMode+0x78>)
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	4a0d      	ldr	r2, [pc, #52]	; (8007430 <RTC_ExitInitMode+0x78>)
 80073fc:	f023 0320 	bic.w	r3, r3, #32
 8007400:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff ff7e 	bl	8007304 <HAL_RTC_WaitForSynchro>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2203      	movs	r2, #3
 8007412:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800741a:	4b05      	ldr	r3, [pc, #20]	; (8007430 <RTC_ExitInitMode+0x78>)
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	4a04      	ldr	r2, [pc, #16]	; (8007430 <RTC_ExitInitMode+0x78>)
 8007420:	f043 0320 	orr.w	r3, r3, #32
 8007424:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	40002800 	.word	0x40002800

08007434 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007442:	79fb      	ldrb	r3, [r7, #7]
 8007444:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007446:	e005      	b.n	8007454 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800744e:	7afb      	ldrb	r3, [r7, #11]
 8007450:	3b0a      	subs	r3, #10
 8007452:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007454:	7afb      	ldrb	r3, [r7, #11]
 8007456:	2b09      	cmp	r3, #9
 8007458:	d8f6      	bhi.n	8007448 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	011b      	lsls	r3, r3, #4
 8007460:	b2da      	uxtb	r2, r3
 8007462:	7afb      	ldrb	r3, [r7, #11]
 8007464:	4313      	orrs	r3, r2
 8007466:	b2db      	uxtb	r3, r3
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr
	...

08007474 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <HAL_RTCEx_EnableBypassShadow+0x16>
 8007486:	2302      	movs	r3, #2
 8007488:	e01f      	b.n	80074ca <HAL_RTCEx_EnableBypassShadow+0x56>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2202      	movs	r2, #2
 8007496:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800749a:	4b0e      	ldr	r3, [pc, #56]	; (80074d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800749c:	22ca      	movs	r2, #202	; 0xca
 800749e:	625a      	str	r2, [r3, #36]	; 0x24
 80074a0:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074a2:	2253      	movs	r2, #83	; 0x53
 80074a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80074a6:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	4a0a      	ldr	r2, [pc, #40]	; (80074d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074ac:	f043 0320 	orr.w	r3, r3, #32
 80074b0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074b2:	4b08      	ldr	r3, [pc, #32]	; (80074d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074b4:	22ff      	movs	r2, #255	; 0xff
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr
 80074d4:	40002800 	.word	0x40002800

080074d8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_RTCEx_SetSSRU_IT+0x16>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e027      	b.n	800753e <HAL_RTCEx_SetSSRU_IT+0x66>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074fe:	4b12      	ldr	r3, [pc, #72]	; (8007548 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007500:	22ca      	movs	r2, #202	; 0xca
 8007502:	625a      	str	r2, [r3, #36]	; 0x24
 8007504:	4b10      	ldr	r3, [pc, #64]	; (8007548 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007506:	2253      	movs	r2, #83	; 0x53
 8007508:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800750a:	4b0f      	ldr	r3, [pc, #60]	; (8007548 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	4a0e      	ldr	r2, [pc, #56]	; (8007548 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007514:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007516:	4b0d      	ldr	r3, [pc, #52]	; (800754c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800751c:	4a0b      	ldr	r2, [pc, #44]	; (800754c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800751e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007522:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007526:	4b08      	ldr	r3, [pc, #32]	; (8007548 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007528:	22ff      	movs	r2, #255	; 0xff
 800752a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr
 8007548:	40002800 	.word	0x40002800
 800754c:	58000800 	.word	0x58000800

08007550 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007558:	4b09      	ldr	r3, [pc, #36]	; (8007580 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800755a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d005      	beq.n	8007570 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007564:	4b06      	ldr	r3, [pc, #24]	; (8007580 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007566:	2240      	movs	r2, #64	; 0x40
 8007568:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7fa ffae 	bl	80024cc <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007578:	bf00      	nop
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	40002800 	.word	0x40002800

08007584 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr
	...

08007598 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80075a4:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80075a6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4413      	add	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	601a      	str	r2, [r3, #0]
}
 80075b8:	bf00      	nop
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	4000b100 	.word	0x4000b100

080075c8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80075d2:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <HAL_RTCEx_BKUPRead+0x28>)
 80075d4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	4000b100 	.word	0x4000b100

080075f4 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80075fc:	4b06      	ldr	r3, [pc, #24]	; (8007618 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007604:	4904      	ldr	r1, [pc, #16]	; (8007618 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4313      	orrs	r3, r2
 800760a:	608b      	str	r3, [r1, #8]
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	bc80      	pop	{r7}
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	58000400 	.word	0x58000400

0800761c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007620:	4b05      	ldr	r3, [pc, #20]	; (8007638 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007626:	4a04      	ldr	r2, [pc, #16]	; (8007638 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800762c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007630:	bf00      	nop
 8007632:	46bd      	mov	sp, r7
 8007634:	bc80      	pop	{r7}
 8007636:	4770      	bx	lr
 8007638:	58000400 	.word	0x58000400

0800763c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007640:	4b05      	ldr	r3, [pc, #20]	; (8007658 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007646:	4a04      	ldr	r2, [pc, #16]	; (8007658 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007648:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800764c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007650:	bf00      	nop
 8007652:	46bd      	mov	sp, r7
 8007654:	bc80      	pop	{r7}
 8007656:	4770      	bx	lr
 8007658:	58000400 	.word	0x58000400

0800765c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007660:	4b03      	ldr	r3, [pc, #12]	; (8007670 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007662:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007666:	619a      	str	r2, [r3, #24]
}
 8007668:	bf00      	nop
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr
 8007670:	58000400 	.word	0x58000400

08007674 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007678:	4b06      	ldr	r3, [pc, #24]	; (8007694 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b02      	cmp	r3, #2
 8007682:	d101      	bne.n	8007688 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	58000400 	.word	0x58000400

08007698 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800769c:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d101      	bne.n	80076ac <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80076a8:	2301      	movs	r3, #1
 80076aa:	e000      	b.n	80076ae <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	58000400 	.word	0x58000400

080076bc <LL_RCC_RF_DisableReset>:
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80076c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bc80      	pop	{r7}
 80076da:	4770      	bx	lr

080076dc <LL_RCC_IsRFUnderReset>:
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80076e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076f0:	d101      	bne.n	80076f6 <LL_RCC_IsRFUnderReset+0x1a>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <LL_RCC_IsRFUnderReset+0x1c>
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bc80      	pop	{r7}
 80076fe:	4770      	bx	lr

08007700 <LL_EXTI_EnableIT_32_63>:
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007708:	4b06      	ldr	r3, [pc, #24]	; (8007724 <LL_EXTI_EnableIT_32_63+0x24>)
 800770a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800770e:	4905      	ldr	r1, [pc, #20]	; (8007724 <LL_EXTI_EnableIT_32_63+0x24>)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4313      	orrs	r3, r2
 8007714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	bc80      	pop	{r7}
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	58000800 	.word	0x58000800

08007728 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d103      	bne.n	800773e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	73fb      	strb	r3, [r7, #15]
    return status;
 800773a:	7bfb      	ldrb	r3, [r7, #15]
 800773c:	e04b      	b.n	80077d6 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	799b      	ldrb	r3, [r3, #6]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d105      	bne.n	8007758 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7fa fa80 	bl	8001c58 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800775e:	f7ff ffad 	bl	80076bc <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007762:	4b1f      	ldr	r3, [pc, #124]	; (80077e0 <HAL_SUBGHZ_Init+0xb8>)
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	4613      	mov	r3, r2
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	1a9b      	subs	r3, r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	0cdb      	lsrs	r3, r3, #19
 8007770:	2264      	movs	r2, #100	; 0x64
 8007772:	fb02 f303 	mul.w	r3, r2, r3
 8007776:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d105      	bne.n	800778a <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	609a      	str	r2, [r3, #8]
      break;
 8007788:	e007      	b.n	800779a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	3b01      	subs	r3, #1
 800778e:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007790:	f7ff ffa4 	bl	80076dc <LL_RCC_IsRFUnderReset>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1ee      	bne.n	8007778 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800779a:	f7ff ff3f 	bl	800761c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800779e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80077a2:	f7ff ffad 	bl	8007700 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80077a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80077aa:	f7ff ff23 	bl	80075f4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80077ae:	f7ff ff55 	bl	800765c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 faad 	bl	8007d1c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	719a      	strb	r2, [r3, #6]

  return status;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000000 	.word	0x20000000

080077e4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	607a      	str	r2, [r7, #4]
 80077ee:	461a      	mov	r2, r3
 80077f0:	460b      	mov	r3, r1
 80077f2:	817b      	strh	r3, [r7, #10]
 80077f4:	4613      	mov	r3, r2
 80077f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	799b      	ldrb	r3, [r3, #6]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d14a      	bne.n	8007898 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	795b      	ldrb	r3, [r3, #5]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800780a:	2302      	movs	r3, #2
 800780c:	e045      	b.n	800789a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2202      	movs	r2, #2
 8007818:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 fb4c 	bl	8007eb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007820:	f7ff ff0c 	bl	800763c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007824:	210d      	movs	r1, #13
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fa98 	bl	8007d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800782c:	897b      	ldrh	r3, [r7, #10]
 800782e:	0a1b      	lsrs	r3, r3, #8
 8007830:	b29b      	uxth	r3, r3
 8007832:	b2db      	uxtb	r3, r3
 8007834:	4619      	mov	r1, r3
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 fa90 	bl	8007d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800783c:	897b      	ldrh	r3, [r7, #10]
 800783e:	b2db      	uxtb	r3, r3
 8007840:	4619      	mov	r1, r3
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 fa8a 	bl	8007d5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007848:	2300      	movs	r3, #0
 800784a:	82bb      	strh	r3, [r7, #20]
 800784c:	e00a      	b.n	8007864 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800784e:	8abb      	ldrh	r3, [r7, #20]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	4413      	add	r3, r2
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	4619      	mov	r1, r3
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 fa7f 	bl	8007d5c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800785e:	8abb      	ldrh	r3, [r7, #20]
 8007860:	3301      	adds	r3, #1
 8007862:	82bb      	strh	r3, [r7, #20]
 8007864:	8aba      	ldrh	r2, [r7, #20]
 8007866:	893b      	ldrh	r3, [r7, #8]
 8007868:	429a      	cmp	r2, r3
 800786a:	d3f0      	bcc.n	800784e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800786c:	f7ff fed6 	bl	800761c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 fb45 	bl	8007f00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	75fb      	strb	r3, [r7, #23]
 8007882:	e001      	b.n	8007888 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	715a      	strb	r2, [r3, #5]

    return status;
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	e000      	b.n	800789a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007898:	2302      	movs	r3, #2
  }
}
 800789a:	4618      	mov	r0, r3
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b088      	sub	sp, #32
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	461a      	mov	r2, r3
 80078ae:	460b      	mov	r3, r1
 80078b0:	817b      	strh	r3, [r7, #10]
 80078b2:	4613      	mov	r3, r2
 80078b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	799b      	ldrb	r3, [r3, #6]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d14a      	bne.n	800795a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	795b      	ldrb	r3, [r3, #5]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e045      	b.n	800795c <HAL_SUBGHZ_ReadRegisters+0xba>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 faee 	bl	8007eb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078dc:	f7ff feae 	bl	800763c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80078e0:	211d      	movs	r1, #29
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 fa3a 	bl	8007d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80078e8:	897b      	ldrh	r3, [r7, #10]
 80078ea:	0a1b      	lsrs	r3, r3, #8
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	4619      	mov	r1, r3
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 fa32 	bl	8007d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80078f8:	897b      	ldrh	r3, [r7, #10]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	4619      	mov	r1, r3
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fa2c 	bl	8007d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007904:	2100      	movs	r1, #0
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 fa28 	bl	8007d5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800790c:	2300      	movs	r3, #0
 800790e:	82fb      	strh	r3, [r7, #22]
 8007910:	e009      	b.n	8007926 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007912:	69b9      	ldr	r1, [r7, #24]
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 fa77 	bl	8007e08 <SUBGHZSPI_Receive>
      pData++;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	3301      	adds	r3, #1
 800791e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007920:	8afb      	ldrh	r3, [r7, #22]
 8007922:	3301      	adds	r3, #1
 8007924:	82fb      	strh	r3, [r7, #22]
 8007926:	8afa      	ldrh	r2, [r7, #22]
 8007928:	893b      	ldrh	r3, [r7, #8]
 800792a:	429a      	cmp	r2, r3
 800792c:	d3f1      	bcc.n	8007912 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800792e:	f7ff fe75 	bl	800761c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 fae4 	bl	8007f00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	e001      	b.n	800794a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	715a      	strb	r2, [r3, #5]

    return status;
 8007956:	7ffb      	ldrb	r3, [r7, #31]
 8007958:	e000      	b.n	800795c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800795a:	2302      	movs	r3, #2
  }
}
 800795c:	4618      	mov	r0, r3
 800795e:	3720      	adds	r7, #32
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	607a      	str	r2, [r7, #4]
 800796e:	461a      	mov	r2, r3
 8007970:	460b      	mov	r3, r1
 8007972:	72fb      	strb	r3, [r7, #11]
 8007974:	4613      	mov	r3, r2
 8007976:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	799b      	ldrb	r3, [r3, #6]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b01      	cmp	r3, #1
 8007980:	d14a      	bne.n	8007a18 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	795b      	ldrb	r3, [r3, #5]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d101      	bne.n	800798e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800798a:	2302      	movs	r3, #2
 800798c:	e045      	b.n	8007a1a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2201      	movs	r2, #1
 8007992:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 fa8f 	bl	8007eb8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800799a:	7afb      	ldrb	r3, [r7, #11]
 800799c:	2b84      	cmp	r3, #132	; 0x84
 800799e:	d002      	beq.n	80079a6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80079a0:	7afb      	ldrb	r3, [r7, #11]
 80079a2:	2b94      	cmp	r3, #148	; 0x94
 80079a4:	d103      	bne.n	80079ae <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2201      	movs	r2, #1
 80079aa:	711a      	strb	r2, [r3, #4]
 80079ac:	e002      	b.n	80079b4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80079b4:	f7ff fe42 	bl	800763c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80079b8:	7afb      	ldrb	r3, [r7, #11]
 80079ba:	4619      	mov	r1, r3
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f9cd 	bl	8007d5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80079c2:	2300      	movs	r3, #0
 80079c4:	82bb      	strh	r3, [r7, #20]
 80079c6:	e00a      	b.n	80079de <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80079c8:	8abb      	ldrh	r3, [r7, #20]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	4413      	add	r3, r2
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	4619      	mov	r1, r3
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f9c2 	bl	8007d5c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80079d8:	8abb      	ldrh	r3, [r7, #20]
 80079da:	3301      	adds	r3, #1
 80079dc:	82bb      	strh	r3, [r7, #20]
 80079de:	8aba      	ldrh	r2, [r7, #20]
 80079e0:	893b      	ldrh	r3, [r7, #8]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d3f0      	bcc.n	80079c8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80079e6:	f7ff fe19 	bl	800761c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80079ea:	7afb      	ldrb	r3, [r7, #11]
 80079ec:	2b84      	cmp	r3, #132	; 0x84
 80079ee:	d002      	beq.n	80079f6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 fa85 	bl	8007f00 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	75fb      	strb	r3, [r7, #23]
 8007a02:	e001      	b.n	8007a08 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	715a      	strb	r2, [r3, #5]

    return status;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	e000      	b.n	8007a1a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007a18:	2302      	movs	r3, #2
  }
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b088      	sub	sp, #32
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	460b      	mov	r3, r1
 8007a30:	72fb      	strb	r3, [r7, #11]
 8007a32:	4613      	mov	r3, r2
 8007a34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	799b      	ldrb	r3, [r3, #6]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d13d      	bne.n	8007ac0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	795b      	ldrb	r3, [r3, #5]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e038      	b.n	8007ac2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 fa2e 	bl	8007eb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a5c:	f7ff fdee 	bl	800763c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007a60:	7afb      	ldrb	r3, [r7, #11]
 8007a62:	4619      	mov	r1, r3
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 f979 	bl	8007d5c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f975 	bl	8007d5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a72:	2300      	movs	r3, #0
 8007a74:	82fb      	strh	r3, [r7, #22]
 8007a76:	e009      	b.n	8007a8c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007a78:	69b9      	ldr	r1, [r7, #24]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f9c4 	bl	8007e08 <SUBGHZSPI_Receive>
      pData++;
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	3301      	adds	r3, #1
 8007a84:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007a86:	8afb      	ldrh	r3, [r7, #22]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	82fb      	strh	r3, [r7, #22]
 8007a8c:	8afa      	ldrh	r2, [r7, #22]
 8007a8e:	893b      	ldrh	r3, [r7, #8]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d3f1      	bcc.n	8007a78 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a94:	f7ff fdc2 	bl	800761c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 fa31 	bl	8007f00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	77fb      	strb	r3, [r7, #31]
 8007aaa:	e001      	b.n	8007ab0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	715a      	strb	r2, [r3, #5]

    return status;
 8007abc:	7ffb      	ldrb	r3, [r7, #31]
 8007abe:	e000      	b.n	8007ac2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007ac0:	2302      	movs	r3, #2
  }
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b086      	sub	sp, #24
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	72fb      	strb	r3, [r7, #11]
 8007ada:	4613      	mov	r3, r2
 8007adc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	799b      	ldrb	r3, [r3, #6]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d13e      	bne.n	8007b66 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	795b      	ldrb	r3, [r3, #5]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d101      	bne.n	8007af4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e039      	b.n	8007b68 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2201      	movs	r2, #1
 8007af8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f000 f9dc 	bl	8007eb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007b00:	f7ff fd9c 	bl	800763c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007b04:	210e      	movs	r1, #14
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 f928 	bl	8007d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007b0c:	7afb      	ldrb	r3, [r7, #11]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 f923 	bl	8007d5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b16:	2300      	movs	r3, #0
 8007b18:	82bb      	strh	r3, [r7, #20]
 8007b1a:	e00a      	b.n	8007b32 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007b1c:	8abb      	ldrh	r3, [r7, #20]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	4413      	add	r3, r2
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	4619      	mov	r1, r3
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 f918 	bl	8007d5c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007b2c:	8abb      	ldrh	r3, [r7, #20]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	82bb      	strh	r3, [r7, #20]
 8007b32:	8aba      	ldrh	r2, [r7, #20]
 8007b34:	893b      	ldrh	r3, [r7, #8]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d3f0      	bcc.n	8007b1c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b3a:	f7ff fd6f 	bl	800761c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 f9de 	bl	8007f00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	75fb      	strb	r3, [r7, #23]
 8007b50:	e001      	b.n	8007b56 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	715a      	strb	r2, [r3, #5]

    return status;
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
 8007b64:	e000      	b.n	8007b68 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007b66:	2302      	movs	r3, #2
  }
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	72fb      	strb	r3, [r7, #11]
 8007b80:	4613      	mov	r3, r2
 8007b82:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	799b      	ldrb	r3, [r3, #6]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d141      	bne.n	8007c16 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	795b      	ldrb	r3, [r3, #5]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d101      	bne.n	8007b9e <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e03c      	b.n	8007c18 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 f987 	bl	8007eb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007baa:	f7ff fd47 	bl	800763c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007bae:	211e      	movs	r1, #30
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 f8d3 	bl	8007d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007bb6:	7afb      	ldrb	r3, [r7, #11]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 f8ce 	bl	8007d5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 f8ca 	bl	8007d5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	82fb      	strh	r3, [r7, #22]
 8007bcc:	e009      	b.n	8007be2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007bce:	69b9      	ldr	r1, [r7, #24]
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 f919 	bl	8007e08 <SUBGHZSPI_Receive>
      pData++;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007bdc:	8afb      	ldrh	r3, [r7, #22]
 8007bde:	3301      	adds	r3, #1
 8007be0:	82fb      	strh	r3, [r7, #22]
 8007be2:	8afa      	ldrh	r2, [r7, #22]
 8007be4:	893b      	ldrh	r3, [r7, #8]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d3f1      	bcc.n	8007bce <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007bea:	f7ff fd17 	bl	800761c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 f986 	bl	8007f00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	77fb      	strb	r3, [r7, #31]
 8007c00:	e001      	b.n	8007c06 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	715a      	strb	r2, [r3, #5]

    return status;
 8007c12:	7ffb      	ldrb	r3, [r7, #31]
 8007c14:	e000      	b.n	8007c18 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007c16:	2302      	movs	r3, #2
  }
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3720      	adds	r7, #32
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8007c28:	2300      	movs	r3, #0
 8007c2a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8007c2c:	f107 020c 	add.w	r2, r7, #12
 8007c30:	2302      	movs	r3, #2
 8007c32:	2112      	movs	r1, #18
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff fef4 	bl	8007a22 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8007c3a:	7b3b      	ldrb	r3, [r7, #12]
 8007c3c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8007c3e:	89fb      	ldrh	r3, [r7, #14]
 8007c40:	021b      	lsls	r3, r3, #8
 8007c42:	b21a      	sxth	r2, r3
 8007c44:	7b7b      	ldrb	r3, [r7, #13]
 8007c46:	b21b      	sxth	r3, r3
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	b21b      	sxth	r3, r3
 8007c4c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007c4e:	89fb      	ldrh	r3, [r7, #14]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f011 fb81 	bl	8019360 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007c5e:	89fb      	ldrh	r3, [r7, #14]
 8007c60:	085b      	lsrs	r3, r3, #1
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f011 fb86 	bl	801937c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007c70:	89fb      	ldrh	r3, [r7, #14]
 8007c72:	089b      	lsrs	r3, r3, #2
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f011 fbd5 	bl	801942c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007c82:	89fb      	ldrh	r3, [r7, #14]
 8007c84:	08db      	lsrs	r3, r3, #3
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f011 fbda 	bl	8019448 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007c94:	89fb      	ldrh	r3, [r7, #14]
 8007c96:	091b      	lsrs	r3, r3, #4
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f011 fbdf 	bl	8019464 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007ca6:	89fb      	ldrh	r3, [r7, #14]
 8007ca8:	095b      	lsrs	r3, r3, #5
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f011 fbac 	bl	8019410 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007cb8:	89fb      	ldrh	r3, [r7, #14]
 8007cba:	099b      	lsrs	r3, r3, #6
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f011 fb67 	bl	8019398 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007cca:	89fb      	ldrh	r3, [r7, #14]
 8007ccc:	09db      	lsrs	r3, r3, #7
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00e      	beq.n	8007cf4 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007cd6:	89fb      	ldrh	r3, [r7, #14]
 8007cd8:	0a1b      	lsrs	r3, r3, #8
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f011 fb65 	bl	80193b4 <HAL_SUBGHZ_CADStatusCallback>
 8007cea:	e003      	b.n	8007cf4 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007cec:	2100      	movs	r1, #0
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f011 fb60 	bl	80193b4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007cf4:	89fb      	ldrh	r3, [r7, #14]
 8007cf6:	0a5b      	lsrs	r3, r3, #9
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f011 fb75 	bl	80193f0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007d06:	f107 020c 	add.w	r2, r7, #12
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	2102      	movs	r1, #2
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff fe28 	bl	8007964 <HAL_SUBGHZ_ExecSetCmd>
}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007d24:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <SUBGHZSPI_Init+0x3c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a0b      	ldr	r2, [pc, #44]	; (8007d58 <SUBGHZSPI_Init+0x3c>)
 8007d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d2e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007d30:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <SUBGHZSPI_Init+0x3c>)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007d38:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007d3a:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <SUBGHZSPI_Init+0x3c>)
 8007d3c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007d40:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007d42:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <SUBGHZSPI_Init+0x3c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a04      	ldr	r2, [pc, #16]	; (8007d58 <SUBGHZSPI_Init+0x3c>)
 8007d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d4c:	6013      	str	r3, [r2, #0]
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bc80      	pop	{r7}
 8007d56:	4770      	bx	lr
 8007d58:	58010000 	.word	0x58010000

08007d5c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d6c:	4b23      	ldr	r3, [pc, #140]	; (8007dfc <SUBGHZSPI_Transmit+0xa0>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	4613      	mov	r3, r2
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	1a9b      	subs	r3, r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	0cdb      	lsrs	r3, r3, #19
 8007d7a:	2264      	movs	r2, #100	; 0x64
 8007d7c:	fb02 f303 	mul.w	r3, r2, r3
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d105      	bne.n	8007d94 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	609a      	str	r2, [r3, #8]
      break;
 8007d92:	e008      	b.n	8007da6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007d9a:	4b19      	ldr	r3, [pc, #100]	; (8007e00 <SUBGHZSPI_Transmit+0xa4>)
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d1ed      	bne.n	8007d82 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007da6:	4b17      	ldr	r3, [pc, #92]	; (8007e04 <SUBGHZSPI_Transmit+0xa8>)
 8007da8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007db0:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <SUBGHZSPI_Transmit+0xa0>)
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	4613      	mov	r3, r2
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	0cdb      	lsrs	r3, r3, #19
 8007dbe:	2264      	movs	r2, #100	; 0x64
 8007dc0:	fb02 f303 	mul.w	r3, r2, r3
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d105      	bne.n	8007dd8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	609a      	str	r2, [r3, #8]
      break;
 8007dd6:	e008      	b.n	8007dea <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007dde:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <SUBGHZSPI_Transmit+0xa4>)
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d1ed      	bne.n	8007dc6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007dea:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <SUBGHZSPI_Transmit+0xa4>)
 8007dec:	68db      	ldr	r3, [r3, #12]

  return status;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bc80      	pop	{r7}
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	20000000 	.word	0x20000000
 8007e00:	58010000 	.word	0x58010000
 8007e04:	5801000c 	.word	0x5801000c

08007e08 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007e16:	4b25      	ldr	r3, [pc, #148]	; (8007eac <SUBGHZSPI_Receive+0xa4>)
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	1a9b      	subs	r3, r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	0cdb      	lsrs	r3, r3, #19
 8007e24:	2264      	movs	r2, #100	; 0x64
 8007e26:	fb02 f303 	mul.w	r3, r2, r3
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d105      	bne.n	8007e3e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	609a      	str	r2, [r3, #8]
      break;
 8007e3c:	e008      	b.n	8007e50 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007e44:	4b1a      	ldr	r3, [pc, #104]	; (8007eb0 <SUBGHZSPI_Receive+0xa8>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d1ed      	bne.n	8007e2c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007e50:	4b18      	ldr	r3, [pc, #96]	; (8007eb4 <SUBGHZSPI_Receive+0xac>)
 8007e52:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	22ff      	movs	r2, #255	; 0xff
 8007e58:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007e5a:	4b14      	ldr	r3, [pc, #80]	; (8007eac <SUBGHZSPI_Receive+0xa4>)
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	00db      	lsls	r3, r3, #3
 8007e62:	1a9b      	subs	r3, r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	0cdb      	lsrs	r3, r3, #19
 8007e68:	2264      	movs	r2, #100	; 0x64
 8007e6a:	fb02 f303 	mul.w	r3, r2, r3
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d105      	bne.n	8007e82 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	609a      	str	r2, [r3, #8]
      break;
 8007e80:	e008      	b.n	8007e94 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007e88:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <SUBGHZSPI_Receive+0xa8>)
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d1ed      	bne.n	8007e70 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007e94:	4b06      	ldr	r3, [pc, #24]	; (8007eb0 <SUBGHZSPI_Receive+0xa8>)
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	701a      	strb	r2, [r3, #0]

  return status;
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	371c      	adds	r7, #28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bc80      	pop	{r7}
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	20000000 	.word	0x20000000
 8007eb0:	58010000 	.word	0x58010000
 8007eb4:	5801000c 	.word	0x5801000c

08007eb8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	791b      	ldrb	r3, [r3, #4]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d111      	bne.n	8007eec <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007ec8:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <SUBGHZ_CheckDeviceReady+0x44>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	4413      	add	r3, r2
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	0c1b      	lsrs	r3, r3, #16
 8007ed6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ed8:	f7ff fbb0 	bl	800763c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1f9      	bne.n	8007edc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007ee8:	f7ff fb98 	bl	800761c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f807 	bl	8007f00 <SUBGHZ_WaitOnBusy>
 8007ef2:	4603      	mov	r3, r0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20000000 	.word	0x20000000

08007f00 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007f0c:	4b12      	ldr	r3, [pc, #72]	; (8007f58 <SUBGHZ_WaitOnBusy+0x58>)
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	4613      	mov	r3, r2
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	4413      	add	r3, r2
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	0d1b      	lsrs	r3, r3, #20
 8007f1a:	2264      	movs	r2, #100	; 0x64
 8007f1c:	fb02 f303 	mul.w	r3, r2, r3
 8007f20:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007f22:	f7ff fbb9 	bl	8007698 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007f26:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d105      	bne.n	8007f3a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2202      	movs	r2, #2
 8007f36:	609a      	str	r2, [r3, #8]
      break;
 8007f38:	e009      	b.n	8007f4e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007f40:	f7ff fb98 	bl	8007674 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007f44:	4602      	mov	r2, r0
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	4013      	ands	r3, r2
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d0e9      	beq.n	8007f22 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20000000 	.word	0x20000000

08007f5c <LL_RCC_GetUSARTClockSource>:
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	401a      	ands	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	041b      	lsls	r3, r3, #16
 8007f74:	4313      	orrs	r3, r2
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bc80      	pop	{r7}
 8007f7e:	4770      	bx	lr

08007f80 <LL_RCC_GetLPUARTClockSource>:
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4013      	ands	r3, r2
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr

08007f9e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e042      	b.n	8008036 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d106      	bne.n	8007fc8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7fa fbda 	bl	800277c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2224      	movs	r2, #36	; 0x24
 8007fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f022 0201 	bic.w	r2, r2, #1
 8007fde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fc4b 	bl	800887c <UART_SetConfig>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d101      	bne.n	8007ff0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e022      	b.n	8008036 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fe8f 	bl	8008d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800800c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800801c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f042 0201 	orr.w	r2, r2, #1
 800802c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 ff15 	bl	8008e5e <UART_CheckIdleState>
 8008034:	4603      	mov	r3, r0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08a      	sub	sp, #40	; 0x28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	4613      	mov	r3, r2
 800804c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008054:	2b20      	cmp	r3, #32
 8008056:	d142      	bne.n	80080de <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <HAL_UART_Receive_IT+0x24>
 800805e:	88fb      	ldrh	r3, [r7, #6]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e03b      	b.n	80080e0 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800806e:	2b01      	cmp	r3, #1
 8008070:	d101      	bne.n	8008076 <HAL_UART_Receive_IT+0x36>
 8008072:	2302      	movs	r3, #2
 8008074:	e034      	b.n	80080e0 <HAL_UART_Receive_IT+0xa0>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a17      	ldr	r2, [pc, #92]	; (80080e8 <HAL_UART_Receive_IT+0xa8>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d01f      	beq.n	80080ce <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d018      	beq.n	80080ce <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	613b      	str	r3, [r7, #16]
   return(result);
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	623b      	str	r3, [r7, #32]
 80080bc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	69f9      	ldr	r1, [r7, #28]
 80080c0:	6a3a      	ldr	r2, [r7, #32]
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1e6      	bne.n	800809c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	461a      	mov	r2, r3
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 ffd5 	bl	8009084 <UART_Start_Receive_IT>
 80080da:	4603      	mov	r3, r0
 80080dc:	e000      	b.n	80080e0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80080de:	2302      	movs	r3, #2
  }
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3728      	adds	r7, #40	; 0x28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	40008000 	.word	0x40008000

080080ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	4613      	mov	r3, r2
 80080f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008100:	2b20      	cmp	r3, #32
 8008102:	d17a      	bne.n	80081fa <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <HAL_UART_Transmit_DMA+0x24>
 800810a:	88fb      	ldrh	r3, [r7, #6]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e073      	b.n	80081fc <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <HAL_UART_Transmit_DMA+0x36>
 800811e:	2302      	movs	r3, #2
 8008120:	e06c      	b.n	80081fc <HAL_UART_Transmit_DMA+0x110>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	88fa      	ldrh	r2, [r7, #6]
 8008134:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	88fa      	ldrh	r2, [r7, #6]
 800813c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2221      	movs	r2, #33	; 0x21
 800814c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008154:	2b00      	cmp	r3, #0
 8008156:	d02c      	beq.n	80081b2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800815c:	4a29      	ldr	r2, [pc, #164]	; (8008204 <HAL_UART_Transmit_DMA+0x118>)
 800815e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008164:	4a28      	ldr	r2, [pc, #160]	; (8008208 <HAL_UART_Transmit_DMA+0x11c>)
 8008166:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800816c:	4a27      	ldr	r2, [pc, #156]	; (800820c <HAL_UART_Transmit_DMA+0x120>)
 800816e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008174:	2200      	movs	r2, #0
 8008176:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008180:	4619      	mov	r1, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3328      	adds	r3, #40	; 0x28
 8008188:	461a      	mov	r2, r3
 800818a:	88fb      	ldrh	r3, [r7, #6]
 800818c:	f7fc f95e 	bl	800444c <HAL_DMA_Start_IT>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00d      	beq.n	80081b2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2210      	movs	r2, #16
 800819a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e024      	b.n	80081fc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2240      	movs	r2, #64	; 0x40
 80081b8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3308      	adds	r3, #8
 80081c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	e853 3f00 	ldrex	r3, [r3]
 80081d0:	613b      	str	r3, [r7, #16]
   return(result);
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3308      	adds	r3, #8
 80081e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e2:	623a      	str	r2, [r7, #32]
 80081e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e6:	69f9      	ldr	r1, [r7, #28]
 80081e8:	6a3a      	ldr	r2, [r7, #32]
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1e5      	bne.n	80081c2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	e000      	b.n	80081fc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80081fa:	2302      	movs	r3, #2
  }
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3728      	adds	r7, #40	; 0x28
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	080093d3 	.word	0x080093d3
 8008208:	0800946d 	.word	0x0800946d
 800820c:	08009489 	.word	0x08009489

08008210 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b0ba      	sub	sp, #232	; 0xe8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008236:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800823a:	f640 030f 	movw	r3, #2063	; 0x80f
 800823e:	4013      	ands	r3, r2
 8008240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008248:	2b00      	cmp	r3, #0
 800824a:	d11b      	bne.n	8008284 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800824c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008250:	f003 0320 	and.w	r3, r3, #32
 8008254:	2b00      	cmp	r3, #0
 8008256:	d015      	beq.n	8008284 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800825c:	f003 0320 	and.w	r3, r3, #32
 8008260:	2b00      	cmp	r3, #0
 8008262:	d105      	bne.n	8008270 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d009      	beq.n	8008284 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 82d6 	beq.w	8008826 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	4798      	blx	r3
      }
      return;
 8008282:	e2d0      	b.n	8008826 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 811f 	beq.w	80084cc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800828e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008292:	4b8b      	ldr	r3, [pc, #556]	; (80084c0 <HAL_UART_IRQHandler+0x2b0>)
 8008294:	4013      	ands	r3, r2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d106      	bne.n	80082a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800829a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800829e:	4b89      	ldr	r3, [pc, #548]	; (80084c4 <HAL_UART_IRQHandler+0x2b4>)
 80082a0:	4013      	ands	r3, r2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 8112 	beq.w	80084cc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d011      	beq.n	80082d8 <HAL_UART_IRQHandler+0xc8>
 80082b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00b      	beq.n	80082d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2201      	movs	r2, #1
 80082c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ce:	f043 0201 	orr.w	r2, r3, #1
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d011      	beq.n	8008308 <HAL_UART_IRQHandler+0xf8>
 80082e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00b      	beq.n	8008308 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2202      	movs	r2, #2
 80082f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fe:	f043 0204 	orr.w	r2, r3, #4
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	d011      	beq.n	8008338 <HAL_UART_IRQHandler+0x128>
 8008314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2204      	movs	r2, #4
 8008326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800832e:	f043 0202 	orr.w	r2, r3, #2
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800833c:	f003 0308 	and.w	r3, r3, #8
 8008340:	2b00      	cmp	r3, #0
 8008342:	d017      	beq.n	8008374 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008348:	f003 0320 	and.w	r3, r3, #32
 800834c:	2b00      	cmp	r3, #0
 800834e:	d105      	bne.n	800835c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008350:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008354:	4b5a      	ldr	r3, [pc, #360]	; (80084c0 <HAL_UART_IRQHandler+0x2b0>)
 8008356:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00b      	beq.n	8008374 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2208      	movs	r2, #8
 8008362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800836a:	f043 0208 	orr.w	r2, r3, #8
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800837c:	2b00      	cmp	r3, #0
 800837e:	d012      	beq.n	80083a6 <HAL_UART_IRQHandler+0x196>
 8008380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00c      	beq.n	80083a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800839c:	f043 0220 	orr.w	r2, r3, #32
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 823c 	beq.w	800882a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d013      	beq.n	80083e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d105      	bne.n	80083d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fa:	2b40      	cmp	r3, #64	; 0x40
 80083fc:	d005      	beq.n	800840a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80083fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008402:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008406:	2b00      	cmp	r3, #0
 8008408:	d04f      	beq.n	80084aa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 ff7c 	bl	8009308 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841a:	2b40      	cmp	r3, #64	; 0x40
 800841c:	d141      	bne.n	80084a2 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3308      	adds	r3, #8
 8008424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800843c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3308      	adds	r3, #8
 8008446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800844a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800844e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800845a:	e841 2300 	strex	r3, r2, [r1]
 800845e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1d9      	bne.n	800841e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d013      	beq.n	800849a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008476:	4a14      	ldr	r2, [pc, #80]	; (80084c8 <HAL_UART_IRQHandler+0x2b8>)
 8008478:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847e:	4618      	mov	r0, r3
 8008480:	f7fc f8c0 	bl	8004604 <HAL_DMA_Abort_IT>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d017      	beq.n	80084ba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008494:	4610      	mov	r0, r2
 8008496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008498:	e00f      	b.n	80084ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f9d9 	bl	8008852 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a0:	e00b      	b.n	80084ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f9d5 	bl	8008852 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a8:	e007      	b.n	80084ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f9d1 	bl	8008852 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80084b8:	e1b7      	b.n	800882a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ba:	bf00      	nop
    return;
 80084bc:	e1b5      	b.n	800882a <HAL_UART_IRQHandler+0x61a>
 80084be:	bf00      	nop
 80084c0:	10000001 	.word	0x10000001
 80084c4:	04000120 	.word	0x04000120
 80084c8:	08009509 	.word	0x08009509

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	f040 814a 	bne.w	800876a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80084d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084da:	f003 0310 	and.w	r3, r3, #16
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 8143 	beq.w	800876a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80084e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e8:	f003 0310 	and.w	r3, r3, #16
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 813c 	beq.w	800876a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2210      	movs	r2, #16
 80084f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008504:	2b40      	cmp	r3, #64	; 0x40
 8008506:	f040 80b5 	bne.w	8008674 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8008516:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 8187 	beq.w	800882e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800852a:	429a      	cmp	r2, r3
 800852c:	f080 817f 	bcs.w	800882e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008536:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b00      	cmp	r3, #0
 8008548:	f040 8086 	bne.w	8008658 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008558:	e853 3f00 	ldrex	r3, [r3]
 800855c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008576:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800857a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008582:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800858e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1da      	bne.n	800854c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3308      	adds	r3, #8
 800859c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085a8:	f023 0301 	bic.w	r3, r3, #1
 80085ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3308      	adds	r3, #8
 80085b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80085be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e1      	bne.n	8008596 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3308      	adds	r3, #8
 80085d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80085e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3308      	adds	r3, #8
 80085f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80085f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80085f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e3      	bne.n	80085d2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2220      	movs	r2, #32
 800860e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008628:	f023 0310 	bic.w	r3, r3, #16
 800862c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	461a      	mov	r2, r3
 8008636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800863a:	65bb      	str	r3, [r7, #88]	; 0x58
 800863c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008640:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e4      	bne.n	8008618 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008652:	4618      	mov	r0, r3
 8008654:	f7fb ff78 	bl	8004548 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008664:	b29b      	uxth	r3, r3
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	b29b      	uxth	r3, r3
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f8f9 	bl	8008864 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008672:	e0dc      	b.n	800882e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008680:	b29b      	uxth	r3, r3
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800868e:	b29b      	uxth	r3, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 80ce 	beq.w	8008832 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8008696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 80c9 	beq.w	8008832 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	461a      	mov	r2, r3
 80086be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086c2:	647b      	str	r3, [r7, #68]	; 0x44
 80086c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e4      	bne.n	80086a0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3308      	adds	r3, #8
 80086dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	623b      	str	r3, [r7, #32]
   return(result);
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086ec:	f023 0301 	bic.w	r3, r3, #1
 80086f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3308      	adds	r3, #8
 80086fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80086fe:	633a      	str	r2, [r7, #48]	; 0x30
 8008700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e1      	bne.n	80086d6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2220      	movs	r2, #32
 8008716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	60fb      	str	r3, [r7, #12]
   return(result);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0310 	bic.w	r3, r3, #16
 800873a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008748:	61fb      	str	r3, [r7, #28]
 800874a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	69b9      	ldr	r1, [r7, #24]
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	617b      	str	r3, [r7, #20]
   return(result);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e4      	bne.n	8008726 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800875c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f87e 	bl	8008864 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008768:	e063      	b.n	8008832 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800876a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800876e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00e      	beq.n	8008794 <HAL_UART_IRQHandler+0x584>
 8008776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800877a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d008      	beq.n	8008794 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800878a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 fb59 	bl	8009e44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008792:	e051      	b.n	8008838 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879c:	2b00      	cmp	r3, #0
 800879e:	d014      	beq.n	80087ca <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80087a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d105      	bne.n	80087b8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80087ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d008      	beq.n	80087ca <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d03a      	beq.n	8008836 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	4798      	blx	r3
    }
    return;
 80087c8:	e035      	b.n	8008836 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80087ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d009      	beq.n	80087ea <HAL_UART_IRQHandler+0x5da>
 80087d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fea6 	bl	8009534 <UART_EndTransmit_IT>
    return;
 80087e8:	e026      	b.n	8008838 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80087ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d009      	beq.n	800880a <HAL_UART_IRQHandler+0x5fa>
 80087f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f001 fb30 	bl	8009e68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008808:	e016      	b.n	8008838 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800880a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800880e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d010      	beq.n	8008838 <HAL_UART_IRQHandler+0x628>
 8008816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800881a:	2b00      	cmp	r3, #0
 800881c:	da0c      	bge.n	8008838 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f001 fb19 	bl	8009e56 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008824:	e008      	b.n	8008838 <HAL_UART_IRQHandler+0x628>
      return;
 8008826:	bf00      	nop
 8008828:	e006      	b.n	8008838 <HAL_UART_IRQHandler+0x628>
    return;
 800882a:	bf00      	nop
 800882c:	e004      	b.n	8008838 <HAL_UART_IRQHandler+0x628>
      return;
 800882e:	bf00      	nop
 8008830:	e002      	b.n	8008838 <HAL_UART_IRQHandler+0x628>
      return;
 8008832:	bf00      	nop
 8008834:	e000      	b.n	8008838 <HAL_UART_IRQHandler+0x628>
    return;
 8008836:	bf00      	nop
  }
}
 8008838:	37e8      	adds	r7, #232	; 0xe8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop

08008840 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	bc80      	pop	{r7}
 8008850:	4770      	bx	lr

08008852 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008852:	b480      	push	{r7}
 8008854:	b083      	sub	sp, #12
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800885a:	bf00      	nop
 800885c:	370c      	adds	r7, #12
 800885e:	46bd      	mov	sp, r7
 8008860:	bc80      	pop	{r7}
 8008862:	4770      	bx	lr

08008864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	bc80      	pop	{r7}
 8008878:	4770      	bx	lr
	...

0800887c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800887c:	b5b0      	push	{r4, r5, r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	4313      	orrs	r3, r2
 800889e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	4bab      	ldr	r3, [pc, #684]	; (8008b54 <UART_SetConfig+0x2d8>)
 80088a8:	4013      	ands	r3, r2
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	6812      	ldr	r2, [r2, #0]
 80088ae:	69f9      	ldr	r1, [r7, #28]
 80088b0:	430b      	orrs	r3, r1
 80088b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4aa0      	ldr	r2, [pc, #640]	; (8008b58 <UART_SetConfig+0x2dc>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d004      	beq.n	80088e4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	69fa      	ldr	r2, [r7, #28]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80088ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6812      	ldr	r2, [r2, #0]
 80088f6:	69f9      	ldr	r1, [r7, #28]
 80088f8:	430b      	orrs	r3, r1
 80088fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	f023 010f 	bic.w	r1, r3, #15
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a91      	ldr	r2, [pc, #580]	; (8008b5c <UART_SetConfig+0x2e0>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d122      	bne.n	8008962 <UART_SetConfig+0xe6>
 800891c:	2003      	movs	r0, #3
 800891e:	f7ff fb1d 	bl	8007f5c <LL_RCC_GetUSARTClockSource>
 8008922:	4603      	mov	r3, r0
 8008924:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008928:	2b03      	cmp	r3, #3
 800892a:	d817      	bhi.n	800895c <UART_SetConfig+0xe0>
 800892c:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <UART_SetConfig+0xb8>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	08008945 	.word	0x08008945
 8008938:	08008951 	.word	0x08008951
 800893c:	0800894b 	.word	0x0800894b
 8008940:	08008957 	.word	0x08008957
 8008944:	2301      	movs	r3, #1
 8008946:	76fb      	strb	r3, [r7, #27]
 8008948:	e072      	b.n	8008a30 <UART_SetConfig+0x1b4>
 800894a:	2302      	movs	r3, #2
 800894c:	76fb      	strb	r3, [r7, #27]
 800894e:	e06f      	b.n	8008a30 <UART_SetConfig+0x1b4>
 8008950:	2304      	movs	r3, #4
 8008952:	76fb      	strb	r3, [r7, #27]
 8008954:	e06c      	b.n	8008a30 <UART_SetConfig+0x1b4>
 8008956:	2308      	movs	r3, #8
 8008958:	76fb      	strb	r3, [r7, #27]
 800895a:	e069      	b.n	8008a30 <UART_SetConfig+0x1b4>
 800895c:	2310      	movs	r3, #16
 800895e:	76fb      	strb	r3, [r7, #27]
 8008960:	e066      	b.n	8008a30 <UART_SetConfig+0x1b4>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a7e      	ldr	r2, [pc, #504]	; (8008b60 <UART_SetConfig+0x2e4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d134      	bne.n	80089d6 <UART_SetConfig+0x15a>
 800896c:	200c      	movs	r0, #12
 800896e:	f7ff faf5 	bl	8007f5c <LL_RCC_GetUSARTClockSource>
 8008972:	4603      	mov	r3, r0
 8008974:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008978:	2b0c      	cmp	r3, #12
 800897a:	d829      	bhi.n	80089d0 <UART_SetConfig+0x154>
 800897c:	a201      	add	r2, pc, #4	; (adr r2, 8008984 <UART_SetConfig+0x108>)
 800897e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008982:	bf00      	nop
 8008984:	080089b9 	.word	0x080089b9
 8008988:	080089d1 	.word	0x080089d1
 800898c:	080089d1 	.word	0x080089d1
 8008990:	080089d1 	.word	0x080089d1
 8008994:	080089c5 	.word	0x080089c5
 8008998:	080089d1 	.word	0x080089d1
 800899c:	080089d1 	.word	0x080089d1
 80089a0:	080089d1 	.word	0x080089d1
 80089a4:	080089bf 	.word	0x080089bf
 80089a8:	080089d1 	.word	0x080089d1
 80089ac:	080089d1 	.word	0x080089d1
 80089b0:	080089d1 	.word	0x080089d1
 80089b4:	080089cb 	.word	0x080089cb
 80089b8:	2300      	movs	r3, #0
 80089ba:	76fb      	strb	r3, [r7, #27]
 80089bc:	e038      	b.n	8008a30 <UART_SetConfig+0x1b4>
 80089be:	2302      	movs	r3, #2
 80089c0:	76fb      	strb	r3, [r7, #27]
 80089c2:	e035      	b.n	8008a30 <UART_SetConfig+0x1b4>
 80089c4:	2304      	movs	r3, #4
 80089c6:	76fb      	strb	r3, [r7, #27]
 80089c8:	e032      	b.n	8008a30 <UART_SetConfig+0x1b4>
 80089ca:	2308      	movs	r3, #8
 80089cc:	76fb      	strb	r3, [r7, #27]
 80089ce:	e02f      	b.n	8008a30 <UART_SetConfig+0x1b4>
 80089d0:	2310      	movs	r3, #16
 80089d2:	76fb      	strb	r3, [r7, #27]
 80089d4:	e02c      	b.n	8008a30 <UART_SetConfig+0x1b4>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a5f      	ldr	r2, [pc, #380]	; (8008b58 <UART_SetConfig+0x2dc>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d125      	bne.n	8008a2c <UART_SetConfig+0x1b0>
 80089e0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80089e4:	f7ff facc 	bl	8007f80 <LL_RCC_GetLPUARTClockSource>
 80089e8:	4603      	mov	r3, r0
 80089ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089ee:	d017      	beq.n	8008a20 <UART_SetConfig+0x1a4>
 80089f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089f4:	d817      	bhi.n	8008a26 <UART_SetConfig+0x1aa>
 80089f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089fa:	d00b      	beq.n	8008a14 <UART_SetConfig+0x198>
 80089fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a00:	d811      	bhi.n	8008a26 <UART_SetConfig+0x1aa>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <UART_SetConfig+0x192>
 8008a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a0a:	d006      	beq.n	8008a1a <UART_SetConfig+0x19e>
 8008a0c:	e00b      	b.n	8008a26 <UART_SetConfig+0x1aa>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	76fb      	strb	r3, [r7, #27]
 8008a12:	e00d      	b.n	8008a30 <UART_SetConfig+0x1b4>
 8008a14:	2302      	movs	r3, #2
 8008a16:	76fb      	strb	r3, [r7, #27]
 8008a18:	e00a      	b.n	8008a30 <UART_SetConfig+0x1b4>
 8008a1a:	2304      	movs	r3, #4
 8008a1c:	76fb      	strb	r3, [r7, #27]
 8008a1e:	e007      	b.n	8008a30 <UART_SetConfig+0x1b4>
 8008a20:	2308      	movs	r3, #8
 8008a22:	76fb      	strb	r3, [r7, #27]
 8008a24:	e004      	b.n	8008a30 <UART_SetConfig+0x1b4>
 8008a26:	2310      	movs	r3, #16
 8008a28:	76fb      	strb	r3, [r7, #27]
 8008a2a:	e001      	b.n	8008a30 <UART_SetConfig+0x1b4>
 8008a2c:	2310      	movs	r3, #16
 8008a2e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a48      	ldr	r2, [pc, #288]	; (8008b58 <UART_SetConfig+0x2dc>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	f040 8098 	bne.w	8008b6c <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a3c:	7efb      	ldrb	r3, [r7, #27]
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	d823      	bhi.n	8008a8a <UART_SetConfig+0x20e>
 8008a42:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <UART_SetConfig+0x1cc>)
 8008a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a48:	08008a6d 	.word	0x08008a6d
 8008a4c:	08008a8b 	.word	0x08008a8b
 8008a50:	08008a75 	.word	0x08008a75
 8008a54:	08008a8b 	.word	0x08008a8b
 8008a58:	08008a7b 	.word	0x08008a7b
 8008a5c:	08008a8b 	.word	0x08008a8b
 8008a60:	08008a8b 	.word	0x08008a8b
 8008a64:	08008a8b 	.word	0x08008a8b
 8008a68:	08008a83 	.word	0x08008a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a6c:	f7fd ff56 	bl	800691c <HAL_RCC_GetPCLK1Freq>
 8008a70:	6178      	str	r0, [r7, #20]
        break;
 8008a72:	e00f      	b.n	8008a94 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a74:	4b3b      	ldr	r3, [pc, #236]	; (8008b64 <UART_SetConfig+0x2e8>)
 8008a76:	617b      	str	r3, [r7, #20]
        break;
 8008a78:	e00c      	b.n	8008a94 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a7a:	f7fd fe9b 	bl	80067b4 <HAL_RCC_GetSysClockFreq>
 8008a7e:	6178      	str	r0, [r7, #20]
        break;
 8008a80:	e008      	b.n	8008a94 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a86:	617b      	str	r3, [r7, #20]
        break;
 8008a88:	e004      	b.n	8008a94 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	76bb      	strb	r3, [r7, #26]
        break;
 8008a92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 8128 	beq.w	8008cec <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa0:	4a31      	ldr	r2, [pc, #196]	; (8008b68 <UART_SetConfig+0x2ec>)
 8008aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aae:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	4413      	add	r3, r2
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d305      	bcc.n	8008acc <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d902      	bls.n	8008ad2 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	76bb      	strb	r3, [r7, #26]
 8008ad0:	e10c      	b.n	8008cec <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f04f 0100 	mov.w	r1, #0
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	4a22      	ldr	r2, [pc, #136]	; (8008b68 <UART_SetConfig+0x2ec>)
 8008ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	f04f 0300 	mov.w	r3, #0
 8008aea:	f7f8 f837 	bl	8000b5c <__aeabi_uldivmod>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4610      	mov	r0, r2
 8008af4:	4619      	mov	r1, r3
 8008af6:	f04f 0200 	mov.w	r2, #0
 8008afa:	f04f 0300 	mov.w	r3, #0
 8008afe:	020b      	lsls	r3, r1, #8
 8008b00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b04:	0202      	lsls	r2, r0, #8
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	6849      	ldr	r1, [r1, #4]
 8008b0a:	0849      	lsrs	r1, r1, #1
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	f04f 0100 	mov.w	r1, #0
 8008b12:	1814      	adds	r4, r2, r0
 8008b14:	eb43 0501 	adc.w	r5, r3, r1
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	f04f 0300 	mov.w	r3, #0
 8008b22:	4620      	mov	r0, r4
 8008b24:	4629      	mov	r1, r5
 8008b26:	f7f8 f819 	bl	8000b5c <__aeabi_uldivmod>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4613      	mov	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b38:	d308      	bcc.n	8008b4c <UART_SetConfig+0x2d0>
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b40:	d204      	bcs.n	8008b4c <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	60da      	str	r2, [r3, #12]
 8008b4a:	e0cf      	b.n	8008cec <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	76bb      	strb	r3, [r7, #26]
 8008b50:	e0cc      	b.n	8008cec <UART_SetConfig+0x470>
 8008b52:	bf00      	nop
 8008b54:	cfff69f3 	.word	0xcfff69f3
 8008b58:	40008000 	.word	0x40008000
 8008b5c:	40013800 	.word	0x40013800
 8008b60:	40004400 	.word	0x40004400
 8008b64:	00f42400 	.word	0x00f42400
 8008b68:	0801b6b8 	.word	0x0801b6b8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b74:	d165      	bne.n	8008c42 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8008b76:	7efb      	ldrb	r3, [r7, #27]
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d828      	bhi.n	8008bce <UART_SetConfig+0x352>
 8008b7c:	a201      	add	r2, pc, #4	; (adr r2, 8008b84 <UART_SetConfig+0x308>)
 8008b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b82:	bf00      	nop
 8008b84:	08008ba9 	.word	0x08008ba9
 8008b88:	08008bb1 	.word	0x08008bb1
 8008b8c:	08008bb9 	.word	0x08008bb9
 8008b90:	08008bcf 	.word	0x08008bcf
 8008b94:	08008bbf 	.word	0x08008bbf
 8008b98:	08008bcf 	.word	0x08008bcf
 8008b9c:	08008bcf 	.word	0x08008bcf
 8008ba0:	08008bcf 	.word	0x08008bcf
 8008ba4:	08008bc7 	.word	0x08008bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ba8:	f7fd feb8 	bl	800691c <HAL_RCC_GetPCLK1Freq>
 8008bac:	6178      	str	r0, [r7, #20]
        break;
 8008bae:	e013      	b.n	8008bd8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bb0:	f7fd fec6 	bl	8006940 <HAL_RCC_GetPCLK2Freq>
 8008bb4:	6178      	str	r0, [r7, #20]
        break;
 8008bb6:	e00f      	b.n	8008bd8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bb8:	4b56      	ldr	r3, [pc, #344]	; (8008d14 <UART_SetConfig+0x498>)
 8008bba:	617b      	str	r3, [r7, #20]
        break;
 8008bbc:	e00c      	b.n	8008bd8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bbe:	f7fd fdf9 	bl	80067b4 <HAL_RCC_GetSysClockFreq>
 8008bc2:	6178      	str	r0, [r7, #20]
        break;
 8008bc4:	e008      	b.n	8008bd8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bca:	617b      	str	r3, [r7, #20]
        break;
 8008bcc:	e004      	b.n	8008bd8 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	76bb      	strb	r3, [r7, #26]
        break;
 8008bd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 8086 	beq.w	8008cec <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	4a4c      	ldr	r2, [pc, #304]	; (8008d18 <UART_SetConfig+0x49c>)
 8008be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bea:	461a      	mov	r2, r3
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bf2:	005a      	lsls	r2, r3, #1
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	085b      	lsrs	r3, r3, #1
 8008bfa:	441a      	add	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2b0f      	cmp	r3, #15
 8008c0c:	d916      	bls.n	8008c3c <UART_SetConfig+0x3c0>
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c14:	d212      	bcs.n	8008c3c <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	f023 030f 	bic.w	r3, r3, #15
 8008c1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	085b      	lsrs	r3, r3, #1
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	f003 0307 	and.w	r3, r3, #7
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	89fb      	ldrh	r3, [r7, #14]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	89fa      	ldrh	r2, [r7, #14]
 8008c38:	60da      	str	r2, [r3, #12]
 8008c3a:	e057      	b.n	8008cec <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	76bb      	strb	r3, [r7, #26]
 8008c40:	e054      	b.n	8008cec <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c42:	7efb      	ldrb	r3, [r7, #27]
 8008c44:	2b08      	cmp	r3, #8
 8008c46:	d828      	bhi.n	8008c9a <UART_SetConfig+0x41e>
 8008c48:	a201      	add	r2, pc, #4	; (adr r2, 8008c50 <UART_SetConfig+0x3d4>)
 8008c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4e:	bf00      	nop
 8008c50:	08008c75 	.word	0x08008c75
 8008c54:	08008c7d 	.word	0x08008c7d
 8008c58:	08008c85 	.word	0x08008c85
 8008c5c:	08008c9b 	.word	0x08008c9b
 8008c60:	08008c8b 	.word	0x08008c8b
 8008c64:	08008c9b 	.word	0x08008c9b
 8008c68:	08008c9b 	.word	0x08008c9b
 8008c6c:	08008c9b 	.word	0x08008c9b
 8008c70:	08008c93 	.word	0x08008c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c74:	f7fd fe52 	bl	800691c <HAL_RCC_GetPCLK1Freq>
 8008c78:	6178      	str	r0, [r7, #20]
        break;
 8008c7a:	e013      	b.n	8008ca4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c7c:	f7fd fe60 	bl	8006940 <HAL_RCC_GetPCLK2Freq>
 8008c80:	6178      	str	r0, [r7, #20]
        break;
 8008c82:	e00f      	b.n	8008ca4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c84:	4b23      	ldr	r3, [pc, #140]	; (8008d14 <UART_SetConfig+0x498>)
 8008c86:	617b      	str	r3, [r7, #20]
        break;
 8008c88:	e00c      	b.n	8008ca4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c8a:	f7fd fd93 	bl	80067b4 <HAL_RCC_GetSysClockFreq>
 8008c8e:	6178      	str	r0, [r7, #20]
        break;
 8008c90:	e008      	b.n	8008ca4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c96:	617b      	str	r3, [r7, #20]
        break;
 8008c98:	e004      	b.n	8008ca4 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	76bb      	strb	r3, [r7, #26]
        break;
 8008ca2:	bf00      	nop
    }

    if (pclk != 0U)
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d020      	beq.n	8008cec <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	4a1a      	ldr	r2, [pc, #104]	; (8008d18 <UART_SetConfig+0x49c>)
 8008cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	441a      	add	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	2b0f      	cmp	r3, #15
 8008cd4:	d908      	bls.n	8008ce8 <UART_SetConfig+0x46c>
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cdc:	d204      	bcs.n	8008ce8 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	60da      	str	r2, [r3, #12]
 8008ce6:	e001      	b.n	8008cec <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d08:	7ebb      	ldrb	r3, [r7, #26]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bdb0      	pop	{r4, r5, r7, pc}
 8008d12:	bf00      	nop
 8008d14:	00f42400 	.word	0x00f42400
 8008d18:	0801b6b8 	.word	0x0801b6b8

08008d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00a      	beq.n	8008d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	430a      	orrs	r2, r1
 8008d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00a      	beq.n	8008d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	430a      	orrs	r2, r1
 8008d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00a      	beq.n	8008d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8e:	f003 0308 	and.w	r3, r3, #8
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	430a      	orrs	r2, r1
 8008daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db0:	f003 0310 	and.w	r3, r3, #16
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00a      	beq.n	8008dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd2:	f003 0320 	and.w	r3, r3, #32
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d01a      	beq.n	8008e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1a:	d10a      	bne.n	8008e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00a      	beq.n	8008e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	605a      	str	r2, [r3, #4]
  }
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bc80      	pop	{r7}
 8008e5c:	4770      	bx	lr

08008e5e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b086      	sub	sp, #24
 8008e62:	af02      	add	r7, sp, #8
 8008e64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e6e:	f7f9 f895 	bl	8001f9c <HAL_GetTick>
 8008e72:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0308 	and.w	r3, r3, #8
 8008e7e:	2b08      	cmp	r3, #8
 8008e80:	d10e      	bne.n	8008ea0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f82f 	bl	8008ef4 <UART_WaitOnFlagUntilTimeout>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e025      	b.n	8008eec <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0304 	and.w	r3, r3, #4
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d10e      	bne.n	8008ecc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f819 	bl	8008ef4 <UART_WaitOnFlagUntilTimeout>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e00f      	b.n	8008eec <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b09c      	sub	sp, #112	; 0x70
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	603b      	str	r3, [r7, #0]
 8008f00:	4613      	mov	r3, r2
 8008f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f04:	e0a9      	b.n	800905a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0c:	f000 80a5 	beq.w	800905a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f10:	f7f9 f844 	bl	8001f9c <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d302      	bcc.n	8008f26 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d140      	bne.n	8008fa8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f3a:	667b      	str	r3, [r7, #100]	; 0x64
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	461a      	mov	r2, r3
 8008f42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f46:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e6      	bne.n	8008f26 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3308      	adds	r3, #8
 8008f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f62:	e853 3f00 	ldrex	r3, [r3]
 8008f66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6a:	f023 0301 	bic.w	r3, r3, #1
 8008f6e:	663b      	str	r3, [r7, #96]	; 0x60
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3308      	adds	r3, #8
 8008f76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f78:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f7a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f80:	e841 2300 	strex	r3, r2, [r1]
 8008f84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e5      	bne.n	8008f58 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2220      	movs	r2, #32
 8008f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e069      	b.n	800907c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0304 	and.w	r3, r3, #4
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d051      	beq.n	800905a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fc4:	d149      	bne.n	800905a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fee:	637b      	str	r3, [r7, #52]	; 0x34
 8008ff0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ff6:	e841 2300 	strex	r3, r2, [r1]
 8008ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1e6      	bne.n	8008fd0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3308      	adds	r3, #8
 8009008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	613b      	str	r3, [r7, #16]
   return(result);
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f023 0301 	bic.w	r3, r3, #1
 8009018:	66bb      	str	r3, [r7, #104]	; 0x68
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3308      	adds	r3, #8
 8009020:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009022:	623a      	str	r2, [r7, #32]
 8009024:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009026:	69f9      	ldr	r1, [r7, #28]
 8009028:	6a3a      	ldr	r2, [r7, #32]
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e5      	bne.n	8009002 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2220      	movs	r2, #32
 800903a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2220      	movs	r2, #32
 8009042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2220      	movs	r2, #32
 800904a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e010      	b.n	800907c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69da      	ldr	r2, [r3, #28]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	4013      	ands	r3, r2
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	429a      	cmp	r2, r3
 8009068:	bf0c      	ite	eq
 800906a:	2301      	moveq	r3, #1
 800906c:	2300      	movne	r3, #0
 800906e:	b2db      	uxtb	r3, r3
 8009070:	461a      	mov	r2, r3
 8009072:	79fb      	ldrb	r3, [r7, #7]
 8009074:	429a      	cmp	r2, r3
 8009076:	f43f af46 	beq.w	8008f06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3770      	adds	r7, #112	; 0x70
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009084:	b480      	push	{r7}
 8009086:	b09d      	sub	sp, #116	; 0x74
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	88fa      	ldrh	r2, [r7, #6]
 800909c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	88fa      	ldrh	r2, [r7, #6]
 80090a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b6:	d10e      	bne.n	80090d6 <UART_Start_Receive_IT+0x52>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d105      	bne.n	80090cc <UART_Start_Receive_IT+0x48>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80090c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090ca:	e02d      	b.n	8009128 <UART_Start_Receive_IT+0xa4>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	22ff      	movs	r2, #255	; 0xff
 80090d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090d4:	e028      	b.n	8009128 <UART_Start_Receive_IT+0xa4>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10d      	bne.n	80090fa <UART_Start_Receive_IT+0x76>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d104      	bne.n	80090f0 <UART_Start_Receive_IT+0x6c>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	22ff      	movs	r2, #255	; 0xff
 80090ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090ee:	e01b      	b.n	8009128 <UART_Start_Receive_IT+0xa4>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	227f      	movs	r2, #127	; 0x7f
 80090f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090f8:	e016      	b.n	8009128 <UART_Start_Receive_IT+0xa4>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009102:	d10d      	bne.n	8009120 <UART_Start_Receive_IT+0x9c>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d104      	bne.n	8009116 <UART_Start_Receive_IT+0x92>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	227f      	movs	r2, #127	; 0x7f
 8009110:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009114:	e008      	b.n	8009128 <UART_Start_Receive_IT+0xa4>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	223f      	movs	r2, #63	; 0x3f
 800911a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800911e:	e003      	b.n	8009128 <UART_Start_Receive_IT+0xa4>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2222      	movs	r2, #34	; 0x22
 8009134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3308      	adds	r3, #8
 800913e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009142:	e853 3f00 	ldrex	r3, [r3]
 8009146:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914a:	f043 0301 	orr.w	r3, r3, #1
 800914e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3308      	adds	r3, #8
 8009156:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009158:	65fa      	str	r2, [r7, #92]	; 0x5c
 800915a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800915e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009160:	e841 2300 	strex	r3, r2, [r1]
 8009164:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1e5      	bne.n	8009138 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009174:	d14d      	bne.n	8009212 <UART_Start_Receive_IT+0x18e>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800917c:	88fa      	ldrh	r2, [r7, #6]
 800917e:	429a      	cmp	r2, r3
 8009180:	d347      	bcc.n	8009212 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800918a:	d107      	bne.n	800919c <UART_Start_Receive_IT+0x118>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4a38      	ldr	r2, [pc, #224]	; (8009278 <UART_Start_Receive_IT+0x1f4>)
 8009198:	671a      	str	r2, [r3, #112]	; 0x70
 800919a:	e002      	b.n	80091a2 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4a37      	ldr	r2, [pc, #220]	; (800927c <UART_Start_Receive_IT+0x1f8>)
 80091a0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091be:	66bb      	str	r3, [r7, #104]	; 0x68
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80091ca:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e6      	bne.n	80091aa <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3308      	adds	r3, #8
 80091e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	e853 3f00 	ldrex	r3, [r3]
 80091ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091f2:	667b      	str	r3, [r7, #100]	; 0x64
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3308      	adds	r3, #8
 80091fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80091fc:	637a      	str	r2, [r7, #52]	; 0x34
 80091fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009204:	e841 2300 	strex	r3, r2, [r1]
 8009208:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1e5      	bne.n	80091dc <UART_Start_Receive_IT+0x158>
 8009210:	e02c      	b.n	800926c <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800921a:	d107      	bne.n	800922c <UART_Start_Receive_IT+0x1a8>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d103      	bne.n	800922c <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4a16      	ldr	r2, [pc, #88]	; (8009280 <UART_Start_Receive_IT+0x1fc>)
 8009228:	671a      	str	r2, [r3, #112]	; 0x70
 800922a:	e002      	b.n	8009232 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4a15      	ldr	r2, [pc, #84]	; (8009284 <UART_Start_Receive_IT+0x200>)
 8009230:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	613b      	str	r3, [r7, #16]
   return(result);
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800924e:	663b      	str	r3, [r7, #96]	; 0x60
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009258:	623b      	str	r3, [r7, #32]
 800925a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	69f9      	ldr	r1, [r7, #28]
 800925e:	6a3a      	ldr	r2, [r7, #32]
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	61bb      	str	r3, [r7, #24]
   return(result);
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e6      	bne.n	800923a <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3774      	adds	r7, #116	; 0x74
 8009272:	46bd      	mov	sp, r7
 8009274:	bc80      	pop	{r7}
 8009276:	4770      	bx	lr
 8009278:	08009b45 	.word	0x08009b45
 800927c:	0800984d 	.word	0x0800984d
 8009280:	080096eb 	.word	0x080096eb
 8009284:	0800958b 	.word	0x0800958b

08009288 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b08f      	sub	sp, #60	; 0x3c
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	61fb      	str	r3, [r7, #28]
   return(result);
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092a4:	637b      	str	r3, [r7, #52]	; 0x34
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092b0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e6      	bne.n	8009290 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3308      	adds	r3, #8
 80092c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80092d8:	633b      	str	r3, [r7, #48]	; 0x30
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3308      	adds	r3, #8
 80092e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092e2:	61ba      	str	r2, [r7, #24]
 80092e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e6:	6979      	ldr	r1, [r7, #20]
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	613b      	str	r3, [r7, #16]
   return(result);
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e5      	bne.n	80092c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2220      	movs	r2, #32
 80092fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80092fe:	bf00      	nop
 8009300:	373c      	adds	r7, #60	; 0x3c
 8009302:	46bd      	mov	sp, r7
 8009304:	bc80      	pop	{r7}
 8009306:	4770      	bx	lr

08009308 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009308:	b480      	push	{r7}
 800930a:	b095      	sub	sp, #84	; 0x54
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800932e:	643b      	str	r3, [r7, #64]	; 0x40
 8009330:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e6      	bne.n	8009310 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3308      	adds	r3, #8
 8009348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	61fb      	str	r3, [r7, #28]
   return(result);
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009358:	f023 0301 	bic.w	r3, r3, #1
 800935c:	64bb      	str	r3, [r7, #72]	; 0x48
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3308      	adds	r3, #8
 8009364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800936c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800936e:	e841 2300 	strex	r3, r2, [r1]
 8009372:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e3      	bne.n	8009342 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800937e:	2b01      	cmp	r3, #1
 8009380:	d118      	bne.n	80093b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	f023 0310 	bic.w	r3, r3, #16
 8009396:	647b      	str	r3, [r7, #68]	; 0x44
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	461a      	mov	r2, r3
 800939e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093a0:	61bb      	str	r3, [r7, #24]
 80093a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	6979      	ldr	r1, [r7, #20]
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	613b      	str	r3, [r7, #16]
   return(result);
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e6      	bne.n	8009382 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2220      	movs	r2, #32
 80093b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80093c8:	bf00      	nop
 80093ca:	3754      	adds	r7, #84	; 0x54
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bc80      	pop	{r7}
 80093d0:	4770      	bx	lr

080093d2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b090      	sub	sp, #64	; 0x40
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0320 	and.w	r3, r3, #32
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d137      	bne.n	800945e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80093ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f0:	2200      	movs	r2, #0
 80093f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3308      	adds	r3, #8
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	623b      	str	r3, [r7, #32]
   return(result);
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800940c:	63bb      	str	r3, [r7, #56]	; 0x38
 800940e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3308      	adds	r3, #8
 8009414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009416:	633a      	str	r2, [r7, #48]	; 0x30
 8009418:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800941c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e5      	bne.n	80093f6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800942a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	60fb      	str	r3, [r7, #12]
   return(result);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800943e:	637b      	str	r3, [r7, #52]	; 0x34
 8009440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	461a      	mov	r2, r3
 8009446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009448:	61fb      	str	r3, [r7, #28]
 800944a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	69b9      	ldr	r1, [r7, #24]
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	617b      	str	r3, [r7, #20]
   return(result);
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e6      	bne.n	800942a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800945c:	e002      	b.n	8009464 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800945e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009460:	f7f9 fae0 	bl	8002a24 <HAL_UART_TxCpltCallback>
}
 8009464:	bf00      	nop
 8009466:	3740      	adds	r7, #64	; 0x40
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009478:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7ff f9e0 	bl	8008840 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009480:	bf00      	nop
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009494:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800949c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094a4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b0:	2b80      	cmp	r3, #128	; 0x80
 80094b2:	d109      	bne.n	80094c8 <UART_DMAError+0x40>
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	2b21      	cmp	r3, #33	; 0x21
 80094b8:	d106      	bne.n	80094c8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2200      	movs	r2, #0
 80094be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80094c2:	6978      	ldr	r0, [r7, #20]
 80094c4:	f7ff fee0 	bl	8009288 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d2:	2b40      	cmp	r3, #64	; 0x40
 80094d4:	d109      	bne.n	80094ea <UART_DMAError+0x62>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b22      	cmp	r3, #34	; 0x22
 80094da:	d106      	bne.n	80094ea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	2200      	movs	r2, #0
 80094e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80094e4:	6978      	ldr	r0, [r7, #20]
 80094e6:	f7ff ff0f 	bl	8009308 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094f0:	f043 0210 	orr.w	r2, r3, #16
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094fa:	6978      	ldr	r0, [r7, #20]
 80094fc:	f7ff f9a9 	bl	8008852 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009500:	bf00      	nop
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009514:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff f993 	bl	8008852 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	e853 3f00 	ldrex	r3, [r3]
 8009548:	60bb      	str	r3, [r7, #8]
   return(result);
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009550:	61fb      	str	r3, [r7, #28]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	61bb      	str	r3, [r7, #24]
 800955c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955e:	6979      	ldr	r1, [r7, #20]
 8009560:	69ba      	ldr	r2, [r7, #24]
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	613b      	str	r3, [r7, #16]
   return(result);
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1e6      	bne.n	800953c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2220      	movs	r2, #32
 8009572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7f9 fa51 	bl	8002a24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009582:	bf00      	nop
 8009584:	3720      	adds	r7, #32
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b096      	sub	sp, #88	; 0x58
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009598:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a2:	2b22      	cmp	r3, #34	; 0x22
 80095a4:	f040 8095 	bne.w	80096d2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095b2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80095b6:	b2d9      	uxtb	r1, r3
 80095b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c2:	400a      	ands	r2, r1
 80095c4:	b2d2      	uxtb	r2, r2
 80095c6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095d8:	b29b      	uxth	r3, r3
 80095da:	3b01      	subs	r3, #1
 80095dc:	b29a      	uxth	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d178      	bne.n	80096e2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009604:	653b      	str	r3, [r7, #80]	; 0x50
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800960e:	647b      	str	r3, [r7, #68]	; 0x44
 8009610:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800961c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e6      	bne.n	80095f0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3308      	adds	r3, #8
 8009628:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	e853 3f00 	ldrex	r3, [r3]
 8009630:	623b      	str	r3, [r7, #32]
   return(result);
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	f023 0301 	bic.w	r3, r3, #1
 8009638:	64fb      	str	r3, [r7, #76]	; 0x4c
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3308      	adds	r3, #8
 8009640:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009642:	633a      	str	r2, [r7, #48]	; 0x30
 8009644:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1e5      	bne.n	8009622 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2220      	movs	r2, #32
 800965a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009668:	2b01      	cmp	r3, #1
 800966a:	d12e      	bne.n	80096ca <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	e853 3f00 	ldrex	r3, [r3]
 800967e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f023 0310 	bic.w	r3, r3, #16
 8009686:	64bb      	str	r3, [r7, #72]	; 0x48
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	461a      	mov	r2, r3
 800968e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009690:	61fb      	str	r3, [r7, #28]
 8009692:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009694:	69b9      	ldr	r1, [r7, #24]
 8009696:	69fa      	ldr	r2, [r7, #28]
 8009698:	e841 2300 	strex	r3, r2, [r1]
 800969c:	617b      	str	r3, [r7, #20]
   return(result);
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1e6      	bne.n	8009672 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	f003 0310 	and.w	r3, r3, #16
 80096ae:	2b10      	cmp	r3, #16
 80096b0:	d103      	bne.n	80096ba <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2210      	movs	r2, #16
 80096b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff f8ce 	bl	8008864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096c8:	e00b      	b.n	80096e2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7f9 f9b8 	bl	8002a40 <HAL_UART_RxCpltCallback>
}
 80096d0:	e007      	b.n	80096e2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	699a      	ldr	r2, [r3, #24]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f042 0208 	orr.w	r2, r2, #8
 80096e0:	619a      	str	r2, [r3, #24]
}
 80096e2:	bf00      	nop
 80096e4:	3758      	adds	r7, #88	; 0x58
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b096      	sub	sp, #88	; 0x58
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009702:	2b22      	cmp	r3, #34	; 0x22
 8009704:	f040 8095 	bne.w	8009832 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009716:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009718:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800971c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009720:	4013      	ands	r3, r2
 8009722:	b29a      	uxth	r2, r3
 8009724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009726:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800972c:	1c9a      	adds	r2, r3, #2
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009738:	b29b      	uxth	r3, r3
 800973a:	3b01      	subs	r3, #1
 800973c:	b29a      	uxth	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800974a:	b29b      	uxth	r3, r3
 800974c:	2b00      	cmp	r3, #0
 800974e:	d178      	bne.n	8009842 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009758:	e853 3f00 	ldrex	r3, [r3]
 800975c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009764:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800976e:	643b      	str	r3, [r7, #64]	; 0x40
 8009770:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009772:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009774:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009776:	e841 2300 	strex	r3, r2, [r1]
 800977a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1e6      	bne.n	8009750 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	61fb      	str	r3, [r7, #28]
   return(result);
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	f023 0301 	bic.w	r3, r3, #1
 8009798:	64bb      	str	r3, [r7, #72]	; 0x48
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3308      	adds	r3, #8
 80097a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1e5      	bne.n	8009782 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d12e      	bne.n	800982a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	e853 3f00 	ldrex	r3, [r3]
 80097de:	60bb      	str	r3, [r7, #8]
   return(result);
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f023 0310 	bic.w	r3, r3, #16
 80097e6:	647b      	str	r3, [r7, #68]	; 0x44
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097f0:	61bb      	str	r3, [r7, #24]
 80097f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f4:	6979      	ldr	r1, [r7, #20]
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	e841 2300 	strex	r3, r2, [r1]
 80097fc:	613b      	str	r3, [r7, #16]
   return(result);
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1e6      	bne.n	80097d2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	f003 0310 	and.w	r3, r3, #16
 800980e:	2b10      	cmp	r3, #16
 8009810:	d103      	bne.n	800981a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2210      	movs	r2, #16
 8009818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7ff f81e 	bl	8008864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009828:	e00b      	b.n	8009842 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7f9 f908 	bl	8002a40 <HAL_UART_RxCpltCallback>
}
 8009830:	e007      	b.n	8009842 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	699a      	ldr	r2, [r3, #24]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f042 0208 	orr.w	r2, r2, #8
 8009840:	619a      	str	r2, [r3, #24]
}
 8009842:	bf00      	nop
 8009844:	3758      	adds	r7, #88	; 0x58
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b0a6      	sub	sp, #152	; 0x98
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800985a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009882:	2b22      	cmp	r3, #34	; 0x22
 8009884:	f040 814f 	bne.w	8009b26 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800988e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009892:	e0f6      	b.n	8009a82 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800989e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80098a2:	b2d9      	uxtb	r1, r3
 80098a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ae:	400a      	ands	r2, r1
 80098b0:	b2d2      	uxtb	r2, r2
 80098b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	3b01      	subs	r3, #1
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	69db      	ldr	r3, [r3, #28]
 80098d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80098da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d053      	beq.n	800998e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d011      	beq.n	8009916 <UART_RxISR_8BIT_FIFOEN+0xca>
 80098f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00b      	beq.n	8009916 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2201      	movs	r2, #1
 8009904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800990c:	f043 0201 	orr.w	r2, r3, #1
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009916:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800991a:	f003 0302 	and.w	r3, r3, #2
 800991e:	2b00      	cmp	r3, #0
 8009920:	d011      	beq.n	8009946 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00b      	beq.n	8009946 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2202      	movs	r2, #2
 8009934:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800993c:	f043 0204 	orr.w	r2, r3, #4
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009946:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800994a:	f003 0304 	and.w	r3, r3, #4
 800994e:	2b00      	cmp	r3, #0
 8009950:	d011      	beq.n	8009976 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00b      	beq.n	8009976 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2204      	movs	r2, #4
 8009964:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800996c:	f043 0202 	orr.w	r2, r3, #2
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800997c:	2b00      	cmp	r3, #0
 800997e:	d006      	beq.n	800998e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7fe ff66 	bl	8008852 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009994:	b29b      	uxth	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d173      	bne.n	8009a82 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099a2:	e853 3f00 	ldrex	r3, [r3]
 80099a6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80099a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80099be:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80099c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099c4:	e841 2300 	strex	r3, r2, [r1]
 80099c8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80099ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1e4      	bne.n	800999a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3308      	adds	r3, #8
 80099d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099da:	e853 3f00 	ldrex	r3, [r3]
 80099de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80099e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099e6:	f023 0301 	bic.w	r3, r3, #1
 80099ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3308      	adds	r3, #8
 80099f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80099f4:	657a      	str	r2, [r7, #84]	; 0x54
 80099f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099fc:	e841 2300 	strex	r3, r2, [r1]
 8009a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1e3      	bne.n	80099d0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d12e      	bne.n	8009a7c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a34:	f023 0310 	bic.w	r3, r3, #16
 8009a38:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a42:	643b      	str	r3, [r7, #64]	; 0x40
 8009a44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a4a:	e841 2300 	strex	r3, r2, [r1]
 8009a4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1e6      	bne.n	8009a24 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	f003 0310 	and.w	r3, r3, #16
 8009a60:	2b10      	cmp	r3, #16
 8009a62:	d103      	bne.n	8009a6c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2210      	movs	r2, #16
 8009a6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7fe fef5 	bl	8008864 <HAL_UARTEx_RxEventCallback>
 8009a7a:	e002      	b.n	8009a82 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7f8 ffdf 	bl	8002a40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d006      	beq.n	8009a98 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009a8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a8e:	f003 0320 	and.w	r3, r3, #32
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f47f aefe 	bne.w	8009894 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009aa2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d045      	beq.n	8009b36 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ab0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d23e      	bcs.n	8009b36 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3308      	adds	r3, #8
 8009abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	e853 3f00 	ldrex	r3, [r3]
 8009ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ace:	673b      	str	r3, [r7, #112]	; 0x70
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009ad8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ae0:	e841 2300 	strex	r3, r2, [r1]
 8009ae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e5      	bne.n	8009ab8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a14      	ldr	r2, [pc, #80]	; (8009b40 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009af0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	f043 0320 	orr.w	r3, r3, #32
 8009b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b10:	61bb      	str	r3, [r7, #24]
 8009b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6979      	ldr	r1, [r7, #20]
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e6      	bne.n	8009af2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b24:	e007      	b.n	8009b36 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	699a      	ldr	r2, [r3, #24]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f042 0208 	orr.w	r2, r2, #8
 8009b34:	619a      	str	r2, [r3, #24]
}
 8009b36:	bf00      	nop
 8009b38:	3798      	adds	r7, #152	; 0x98
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	0800958b 	.word	0x0800958b

08009b44 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b0a8      	sub	sp, #160	; 0xa0
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b52:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b7a:	2b22      	cmp	r3, #34	; 0x22
 8009b7c:	f040 8153 	bne.w	8009e26 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b86:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b8a:	e0fa      	b.n	8009d82 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b92:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b9e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009ba2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb4:	1c9a      	adds	r2, r3, #2
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009bd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bda:	f003 0307 	and.w	r3, r3, #7
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d053      	beq.n	8009c8a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d011      	beq.n	8009c12 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009bee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00b      	beq.n	8009c12 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c08:	f043 0201 	orr.w	r2, r3, #1
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c16:	f003 0302 	and.w	r3, r3, #2
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d011      	beq.n	8009c42 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00b      	beq.n	8009c42 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c38:	f043 0204 	orr.w	r2, r3, #4
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c46:	f003 0304 	and.w	r3, r3, #4
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d011      	beq.n	8009c72 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00b      	beq.n	8009c72 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2204      	movs	r2, #4
 8009c60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c68:	f043 0202 	orr.w	r2, r3, #2
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d006      	beq.n	8009c8a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7fe fde8 	bl	8008852 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d175      	bne.n	8009d82 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c9e:	e853 3f00 	ldrex	r3, [r3]
 8009ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cba:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cc0:	e841 2300 	strex	r3, r2, [r1]
 8009cc4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e4      	bne.n	8009c96 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd6:	e853 3f00 	ldrex	r3, [r3]
 8009cda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ce2:	f023 0301 	bic.w	r3, r3, #1
 8009ce6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3308      	adds	r3, #8
 8009cf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cf4:	65ba      	str	r2, [r7, #88]	; 0x58
 8009cf6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009cfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cfc:	e841 2300 	strex	r3, r2, [r1]
 8009d00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1e1      	bne.n	8009ccc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d12e      	bne.n	8009d7c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2c:	e853 3f00 	ldrex	r3, [r3]
 8009d30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d34:	f023 0310 	bic.w	r3, r3, #16
 8009d38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d42:	647b      	str	r3, [r7, #68]	; 0x44
 8009d44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d4a:	e841 2300 	strex	r3, r2, [r1]
 8009d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1e6      	bne.n	8009d24 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	f003 0310 	and.w	r3, r3, #16
 8009d60:	2b10      	cmp	r3, #16
 8009d62:	d103      	bne.n	8009d6c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2210      	movs	r2, #16
 8009d6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7fe fd75 	bl	8008864 <HAL_UARTEx_RxEventCallback>
 8009d7a:	e002      	b.n	8009d82 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7f8 fe5f 	bl	8002a40 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d82:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d006      	beq.n	8009d98 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009d8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f47f aefa 	bne.w	8009b8c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d9e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009da2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d045      	beq.n	8009e36 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009db0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d23e      	bcs.n	8009e36 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3308      	adds	r3, #8
 8009dbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	e853 3f00 	ldrex	r3, [r3]
 8009dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dce:	677b      	str	r3, [r7, #116]	; 0x74
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009dd8:	633a      	str	r2, [r7, #48]	; 0x30
 8009dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009de0:	e841 2300 	strex	r3, r2, [r1]
 8009de4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1e5      	bne.n	8009db8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a14      	ldr	r2, [pc, #80]	; (8009e40 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009df0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	e853 3f00 	ldrex	r3, [r3]
 8009dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f043 0320 	orr.w	r3, r3, #32
 8009e06:	673b      	str	r3, [r7, #112]	; 0x70
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e10:	61fb      	str	r3, [r7, #28]
 8009e12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e14:	69b9      	ldr	r1, [r7, #24]
 8009e16:	69fa      	ldr	r2, [r7, #28]
 8009e18:	e841 2300 	strex	r3, r2, [r1]
 8009e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1e6      	bne.n	8009df2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e24:	e007      	b.n	8009e36 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	699a      	ldr	r2, [r3, #24]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f042 0208 	orr.w	r2, r2, #8
 8009e34:	619a      	str	r2, [r3, #24]
}
 8009e36:	bf00      	nop
 8009e38:	37a0      	adds	r7, #160	; 0xa0
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	080096eb 	.word	0x080096eb

08009e44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bc80      	pop	{r7}
 8009e54:	4770      	bx	lr

08009e56 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b083      	sub	sp, #12
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e5e:	bf00      	nop
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bc80      	pop	{r7}
 8009e66:	4770      	bx	lr

08009e68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bc80      	pop	{r7}
 8009e78:	4770      	bx	lr

08009e7a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b088      	sub	sp, #32
 8009e7e:	af02      	add	r7, sp, #8
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	1d3b      	adds	r3, r7, #4
 8009e84:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d101      	bne.n	8009e9a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009e96:	2302      	movs	r3, #2
 8009e98:	e046      	b.n	8009f28 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2224      	movs	r2, #36	; 0x24
 8009ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f022 0201 	bic.w	r2, r2, #1
 8009eb8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d105      	bne.n	8009ee0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009ed4:	1d3b      	adds	r3, r7, #4
 8009ed6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 f911 	bl	800a102 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f042 0201 	orr.w	r2, r2, #1
 8009eee:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ef0:	f7f8 f854 	bl	8001f9c <HAL_GetTick>
 8009ef4:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ef6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f7fe fff5 	bl	8008ef4 <UART_WaitOnFlagUntilTimeout>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	75fb      	strb	r3, [r7, #23]
 8009f14:	e003      	b.n	8009f1e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2220      	movs	r2, #32
 8009f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3718      	adds	r7, #24
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b089      	sub	sp, #36	; 0x24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d101      	bne.n	8009f46 <HAL_UARTEx_EnableStopMode+0x16>
 8009f42:	2302      	movs	r3, #2
 8009f44:	e021      	b.n	8009f8a <HAL_UARTEx_EnableStopMode+0x5a>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	e853 3f00 	ldrex	r3, [r3]
 8009f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f043 0302 	orr.w	r3, r3, #2
 8009f62:	61fb      	str	r3, [r7, #28]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	461a      	mov	r2, r3
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	61bb      	str	r3, [r7, #24]
 8009f6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f70:	6979      	ldr	r1, [r7, #20]
 8009f72:	69ba      	ldr	r2, [r7, #24]
 8009f74:	e841 2300 	strex	r3, r2, [r1]
 8009f78:	613b      	str	r3, [r7, #16]
   return(result);
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1e6      	bne.n	8009f4e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3724      	adds	r7, #36	; 0x24
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bc80      	pop	{r7}
 8009f92:	4770      	bx	lr

08009f94 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d101      	bne.n	8009faa <HAL_UARTEx_EnableFifoMode+0x16>
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	e02b      	b.n	800a002 <HAL_UARTEx_EnableFifoMode+0x6e>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2224      	movs	r2, #36	; 0x24
 8009fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f022 0201 	bic.w	r2, r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009fe0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f8ac 	bl	800a148 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a01e:	2302      	movs	r3, #2
 800a020:	e02d      	b.n	800a07e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2224      	movs	r2, #36	; 0x24
 800a02e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 0201 	bic.w	r2, r2, #1
 800a048:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f872 	bl	800a148 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2220      	movs	r2, #32
 800a070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a096:	2b01      	cmp	r3, #1
 800a098:	d101      	bne.n	800a09e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a09a:	2302      	movs	r3, #2
 800a09c:	e02d      	b.n	800a0fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2224      	movs	r2, #36	; 0x24
 800a0aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f022 0201 	bic.w	r2, r2, #1
 800a0c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f834 	bl	800a148 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2220      	movs	r2, #32
 800a0ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a102:	b480      	push	{r7}
 800a104:	b085      	sub	sp, #20
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	1d3b      	adds	r3, r7, #4
 800a10c:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f023 0210 	bic.w	r2, r3, #16
 800a11a:	893b      	ldrh	r3, [r7, #8]
 800a11c:	4619      	mov	r1, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	430a      	orrs	r2, r1
 800a124:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a130:	7abb      	ldrb	r3, [r7, #10]
 800a132:	061a      	lsls	r2, r3, #24
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	605a      	str	r2, [r3, #4]
}
 800a13c:	bf00      	nop
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	bc80      	pop	{r7}
 800a144:	4770      	bx	lr
	...

0800a148 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a154:	2b00      	cmp	r3, #0
 800a156:	d108      	bne.n	800a16a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a168:	e031      	b.n	800a1ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a16a:	2308      	movs	r3, #8
 800a16c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a16e:	2308      	movs	r3, #8
 800a170:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	0e5b      	lsrs	r3, r3, #25
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	f003 0307 	and.w	r3, r3, #7
 800a180:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	0f5b      	lsrs	r3, r3, #29
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	f003 0307 	and.w	r3, r3, #7
 800a190:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a192:	7bbb      	ldrb	r3, [r7, #14]
 800a194:	7b3a      	ldrb	r2, [r7, #12]
 800a196:	4910      	ldr	r1, [pc, #64]	; (800a1d8 <UARTEx_SetNbDataToProcess+0x90>)
 800a198:	5c8a      	ldrb	r2, [r1, r2]
 800a19a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a19e:	7b3a      	ldrb	r2, [r7, #12]
 800a1a0:	490e      	ldr	r1, [pc, #56]	; (800a1dc <UARTEx_SetNbDataToProcess+0x94>)
 800a1a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	7b7a      	ldrb	r2, [r7, #13]
 800a1b4:	4908      	ldr	r1, [pc, #32]	; (800a1d8 <UARTEx_SetNbDataToProcess+0x90>)
 800a1b6:	5c8a      	ldrb	r2, [r1, r2]
 800a1b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1bc:	7b7a      	ldrb	r2, [r7, #13]
 800a1be:	4907      	ldr	r1, [pc, #28]	; (800a1dc <UARTEx_SetNbDataToProcess+0x94>)
 800a1c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a1ce:	bf00      	nop
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bc80      	pop	{r7}
 800a1d6:	4770      	bx	lr
 800a1d8:	0801b6d0 	.word	0x0801b6d0
 800a1dc:	0801b6d8 	.word	0x0801b6d8

0800a1e0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a1e4:	f7f7 fd80 	bl	8001ce8 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a1e8:	f000 f802 	bl	800a1f0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a1ec:	bf00      	nop
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	f7f8 fc84 	bl	8002b04 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800a1fc:	2001      	movs	r0, #1
 800a1fe:	f7f8 fc81 	bl	8002b04 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800a202:	2002      	movs	r0, #2
 800a204:	f7f8 fc7e 	bl	8002b04 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800a208:	2101      	movs	r1, #1
 800a20a:	2001      	movs	r0, #1
 800a20c:	f7f8 fd2a 	bl	8002c64 <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800a210:	2300      	movs	r3, #0
 800a212:	9302      	str	r3, [sp, #8]
 800a214:	2301      	movs	r3, #1
 800a216:	9301      	str	r3, [sp, #4]
 800a218:	2301      	movs	r3, #1
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	4b46      	ldr	r3, [pc, #280]	; (800a338 <LoRaWAN_Init+0x148>)
 800a21e:	2200      	movs	r2, #0
 800a220:	2100      	movs	r1, #0
 800a222:	2002      	movs	r0, #2
 800a224:	f010 fa22 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a228:	2300      	movs	r3, #0
 800a22a:	9302      	str	r3, [sp, #8]
 800a22c:	2303      	movs	r3, #3
 800a22e:	9301      	str	r3, [sp, #4]
 800a230:	2302      	movs	r3, #2
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	4b41      	ldr	r3, [pc, #260]	; (800a33c <LoRaWAN_Init+0x14c>)
 800a236:	2200      	movs	r2, #0
 800a238:	2100      	movs	r1, #0
 800a23a:	2002      	movs	r0, #2
 800a23c:	f010 fa16 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a240:	2300      	movs	r3, #0
 800a242:	9302      	str	r3, [sp, #8]
 800a244:	2301      	movs	r3, #1
 800a246:	9301      	str	r3, [sp, #4]
 800a248:	2301      	movs	r3, #1
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	4b3c      	ldr	r3, [pc, #240]	; (800a340 <LoRaWAN_Init+0x150>)
 800a24e:	2200      	movs	r2, #0
 800a250:	2100      	movs	r1, #0
 800a252:	2002      	movs	r0, #2
 800a254:	f010 fa0a 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a258:	2300      	movs	r3, #0
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	4b39      	ldr	r3, [pc, #228]	; (800a344 <LoRaWAN_Init+0x154>)
 800a25e:	2200      	movs	r2, #0
 800a260:	f04f 31ff 	mov.w	r1, #4294967295
 800a264:	4838      	ldr	r0, [pc, #224]	; (800a348 <LoRaWAN_Init+0x158>)
 800a266:	f00f ff53 	bl	801a110 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a26a:	2300      	movs	r3, #0
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	4b37      	ldr	r3, [pc, #220]	; (800a34c <LoRaWAN_Init+0x15c>)
 800a270:	2200      	movs	r2, #0
 800a272:	f04f 31ff 	mov.w	r1, #4294967295
 800a276:	4836      	ldr	r0, [pc, #216]	; (800a350 <LoRaWAN_Init+0x160>)
 800a278:	f00f ff4a 	bl	801a110 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a27c:	2300      	movs	r3, #0
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	4b34      	ldr	r3, [pc, #208]	; (800a354 <LoRaWAN_Init+0x164>)
 800a282:	2201      	movs	r2, #1
 800a284:	f04f 31ff 	mov.w	r1, #4294967295
 800a288:	4833      	ldr	r0, [pc, #204]	; (800a358 <LoRaWAN_Init+0x168>)
 800a28a:	f00f ff41 	bl	801a110 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800a28e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a292:	482d      	ldr	r0, [pc, #180]	; (800a348 <LoRaWAN_Init+0x158>)
 800a294:	f010 f850 	bl	801a338 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800a298:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a29c:	482c      	ldr	r0, [pc, #176]	; (800a350 <LoRaWAN_Init+0x160>)
 800a29e:	f010 f84b 	bl	801a338 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 800a2a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a2a6:	482c      	ldr	r0, [pc, #176]	; (800a358 <LoRaWAN_Init+0x168>)
 800a2a8:	f010 f846 	bl	801a338 <UTIL_TIMER_SetPeriod>

//================================================================================================================================


  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieInit), UTIL_SEQ_RFU, Sensor_Init);
 800a2ac:	4a2b      	ldr	r2, [pc, #172]	; (800a35c <LoRaWAN_Init+0x16c>)
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	2004      	movs	r0, #4
 800a2b2:	f00f fe97 	bl	8019fe4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieData), UTIL_SEQ_RFU, Sensor_Data);
 800a2b6:	4a2a      	ldr	r2, [pc, #168]	; (800a360 <LoRaWAN_Init+0x170>)
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	2008      	movs	r0, #8
 800a2bc:	f00f fe92 	bl	8019fe4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	2004      	movs	r0, #4
 800a2c4:	f00f feb0 	bl	801a028 <UTIL_SEQ_SetTask>



  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a2c8:	4a26      	ldr	r2, [pc, #152]	; (800a364 <LoRaWAN_Init+0x174>)
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	2001      	movs	r0, #1
 800a2ce:	f00f fe89 	bl	8019fe4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a2d2:	4a25      	ldr	r2, [pc, #148]	; (800a368 <LoRaWAN_Init+0x178>)
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	2002      	movs	r0, #2
 800a2d8:	f00f fe84 	bl	8019fe4 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a2dc:	f000 fb1e 	bl	800a91c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800a2e0:	4822      	ldr	r0, [pc, #136]	; (800a36c <LoRaWAN_Init+0x17c>)
 800a2e2:	f001 ff95 	bl	800c210 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a2e6:	4822      	ldr	r0, [pc, #136]	; (800a370 <LoRaWAN_Init+0x180>)
 800a2e8:	f001 ffde 	bl	800c2a8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a2ec:	481a      	ldr	r0, [pc, #104]	; (800a358 <LoRaWAN_Init+0x168>)
 800a2ee:	f00f ff45 	bl	801a17c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 800a2f2:	4b20      	ldr	r3, [pc, #128]	; (800a374 <LoRaWAN_Init+0x184>)
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f002 f90c 	bl	800c514 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a2fc:	4b1e      	ldr	r3, [pc, #120]	; (800a378 <LoRaWAN_Init+0x188>)
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d111      	bne.n	800a328 <LoRaWAN_Init+0x138>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a304:	2300      	movs	r3, #0
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4b1c      	ldr	r3, [pc, #112]	; (800a37c <LoRaWAN_Init+0x18c>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	f04f 31ff 	mov.w	r1, #4294967295
 800a310:	481b      	ldr	r0, [pc, #108]	; (800a380 <LoRaWAN_Init+0x190>)
 800a312:	f00f fefd 	bl	801a110 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800a316:	f247 5130 	movw	r1, #30000	; 0x7530
 800a31a:	4819      	ldr	r0, [pc, #100]	; (800a380 <LoRaWAN_Init+0x190>)
 800a31c:	f010 f80c 	bl	801a338 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a320:	4817      	ldr	r0, [pc, #92]	; (800a380 <LoRaWAN_Init+0x190>)
 800a322:	f00f ff2b 	bl	801a17c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a326:	e003      	b.n	800a330 <LoRaWAN_Init+0x140>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800a328:	2101      	movs	r1, #1
 800a32a:	2000      	movs	r0, #0
 800a32c:	f7f8 fc9a 	bl	8002c64 <BSP_PB_Init>
}
 800a330:	bf00      	nop
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	0801ae28 	.word	0x0801ae28
 800a33c:	0801ae48 	.word	0x0801ae48
 800a340:	0801ae68 	.word	0x0801ae68
 800a344:	0800a78d 	.word	0x0800a78d
 800a348:	20000278 	.word	0x20000278
 800a34c:	0800a7a3 	.word	0x0800a7a3
 800a350:	20000290 	.word	0x20000290
 800a354:	0800a7b9 	.word	0x0800a7b9
 800a358:	200002a8 	.word	0x200002a8
 800a35c:	08000e51 	.word	0x08000e51
 800a360:	08000e69 	.word	0x08000e69
 800a364:	0800c501 	.word	0x0800c501
 800a368:	0800a4fd 	.word	0x0800a4fd
 800a36c:	2000003c 	.word	0x2000003c
 800a370:	20000070 	.word	0x20000070
 800a374:	20000038 	.word	0x20000038
 800a378:	20000168 	.word	0x20000168
 800a37c:	0800a769 	.word	0x0800a769
 800a380:	2000016c 	.word	0x2000016c

0800a384 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	4603      	mov	r3, r0
 800a38c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a38e:	88fb      	ldrh	r3, [r7, #6]
 800a390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a394:	d007      	beq.n	800a3a6 <HAL_GPIO_EXTI_Callback+0x22>
 800a396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a39a:	dc09      	bgt.n	800a3b0 <HAL_GPIO_EXTI_Callback+0x2c>
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d009      	beq.n	800a3b4 <HAL_GPIO_EXTI_Callback+0x30>
 800a3a0:	2b40      	cmp	r3, #64	; 0x40
 800a3a2:	d009      	beq.n	800a3b8 <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 800a3a4:	e004      	b.n	800a3b0 <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	2002      	movs	r0, #2
 800a3aa:	f00f fe3d 	bl	801a028 <UTIL_SEQ_SetTask>
      break;
 800a3ae:	e004      	b.n	800a3ba <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a3b0:	bf00      	nop
 800a3b2:	e002      	b.n	800a3ba <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a3b4:	bf00      	nop
 800a3b6:	e000      	b.n	800a3ba <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a3b8:	bf00      	nop
  }
}
 800a3ba:	bf00      	nop
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a3c4:	b5b0      	push	{r4, r5, r7, lr}
 800a3c6:	b088      	sub	sp, #32
 800a3c8:	af06      	add	r7, sp, #24
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d102      	bne.n	800a3da <OnRxData+0x16>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d078      	beq.n	800a4cc <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 800a3da:	2000      	movs	r0, #0
 800a3dc:	f7f8 fbd6 	bl	8002b8c <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 800a3e0:	483f      	ldr	r0, [pc, #252]	; (800a4e0 <OnRxData+0x11c>)
 800a3e2:	f00f fecb 	bl	801a17c <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800a3e6:	4b3f      	ldr	r3, [pc, #252]	; (800a4e4 <OnRxData+0x120>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	2002      	movs	r0, #2
 800a3ee:	f010 f93d 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4a3a      	ldr	r2, [pc, #232]	; (800a4e8 <OnRxData+0x124>)
 800a400:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a404:	6879      	ldr	r1, [r7, #4]
 800a406:	7809      	ldrb	r1, [r1, #0]
 800a408:	4608      	mov	r0, r1
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800a410:	460c      	mov	r4, r1
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800a418:	460d      	mov	r5, r1
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800a420:	9105      	str	r1, [sp, #20]
 800a422:	9504      	str	r5, [sp, #16]
 800a424:	9403      	str	r4, [sp, #12]
 800a426:	9002      	str	r0, [sp, #8]
 800a428:	9201      	str	r2, [sp, #4]
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	4b2f      	ldr	r3, [pc, #188]	; (800a4ec <OnRxData+0x128>)
 800a42e:	2200      	movs	r2, #0
 800a430:	2100      	movs	r1, #0
 800a432:	2003      	movs	r0, #3
 800a434:	f010 f91a 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d021      	beq.n	800a484 <OnRxData+0xc0>
 800a440:	2b03      	cmp	r3, #3
 800a442:	d145      	bne.n	800a4d0 <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	785b      	ldrb	r3, [r3, #1]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d117      	bne.n	800a47c <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b02      	cmp	r3, #2
 800a454:	d00e      	beq.n	800a474 <OnRxData+0xb0>
 800a456:	2b02      	cmp	r3, #2
 800a458:	dc12      	bgt.n	800a480 <OnRxData+0xbc>
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d002      	beq.n	800a464 <OnRxData+0xa0>
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d004      	beq.n	800a46c <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800a462:	e00d      	b.n	800a480 <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 800a464:	2000      	movs	r0, #0
 800a466:	f002 f9b7 	bl	800c7d8 <LmHandlerRequestClass>
              break;
 800a46a:	e00a      	b.n	800a482 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 800a46c:	2001      	movs	r0, #1
 800a46e:	f002 f9b3 	bl	800c7d8 <LmHandlerRequestClass>
              break;
 800a472:	e006      	b.n	800a482 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 800a474:	2002      	movs	r0, #2
 800a476:	f002 f9af 	bl	800c7d8 <LmHandlerRequestClass>
              break;
 800a47a:	e002      	b.n	800a482 <OnRxData+0xbe>
          }
        }
 800a47c:	bf00      	nop
 800a47e:	e02a      	b.n	800a4d6 <OnRxData+0x112>
              break;
 800a480:	bf00      	nop
        break;
 800a482:	e028      	b.n	800a4d6 <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	785b      	ldrb	r3, [r3, #1]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d123      	bne.n	800a4d4 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	b2da      	uxtb	r2, r3
 800a498:	4b15      	ldr	r3, [pc, #84]	; (800a4f0 <OnRxData+0x12c>)
 800a49a:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a49c:	4b14      	ldr	r3, [pc, #80]	; (800a4f0 <OnRxData+0x12c>)
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d109      	bne.n	800a4b8 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800a4a4:	4b13      	ldr	r3, [pc, #76]	; (800a4f4 <OnRxData+0x130>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	2003      	movs	r0, #3
 800a4ac:	f010 f8de 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 800a4b0:	2002      	movs	r0, #2
 800a4b2:	f7f8 fb8f 	bl	8002bd4 <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 800a4b6:	e00d      	b.n	800a4d4 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a4b8:	4b0f      	ldr	r3, [pc, #60]	; (800a4f8 <OnRxData+0x134>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2100      	movs	r1, #0
 800a4be:	2003      	movs	r0, #3
 800a4c0:	f010 f8d4 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 800a4c4:	2002      	movs	r0, #2
 800a4c6:	f7f8 fb61 	bl	8002b8c <BSP_LED_On>
        break;
 800a4ca:	e003      	b.n	800a4d4 <OnRxData+0x110>

      default:

        break;
    }
  }
 800a4cc:	bf00      	nop
 800a4ce:	e002      	b.n	800a4d6 <OnRxData+0x112>
        break;
 800a4d0:	bf00      	nop
 800a4d2:	e000      	b.n	800a4d6 <OnRxData+0x112>
        break;
 800a4d4:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a4d6:	bf00      	nop
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20000290 	.word	0x20000290
 800a4e4:	0801ae88 	.word	0x0801ae88
 800a4e8:	20000088 	.word	0x20000088
 800a4ec:	0801aebc 	.word	0x0801aebc
 800a4f0:	20000276 	.word	0x20000276
 800a4f4:	0801af04 	.word	0x0801af04
 800a4f8:	0801af10 	.word	0x0801af10

0800a4fc <SendTxData>:

static void SendTxData(void)
{
 800a4fc:	b590      	push	{r4, r7, lr}
 800a4fe:	b091      	sub	sp, #68	; 0x44
 800a500:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	867b      	strh	r3, [r7, #50]	; 0x32
  int16_t temperature = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	863b      	strh	r3, [r7, #48]	; 0x30
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a50a:	2300      	movs	r3, #0
 800a50c:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t humidity = 0;
 800a50e:	2300      	movs	r3, #0
 800a510:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t i = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t latitude = 0;
 800a516:	2300      	movs	r3, #0
 800a518:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t longitude = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	847b      	strh	r3, [r7, #34]	; 0x22
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a522:	f107 0308 	add.w	r3, r7, #8
 800a526:	4618      	mov	r0, r3
 800a528:	f7f7 fe3a 	bl	80021a0 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 800a52c:	f7f6 ffe0 	bl	80014f0 <SYS_GetTemperatureLevel>
 800a530:	4603      	mov	r3, r0
 800a532:	121b      	asrs	r3, r3, #8
 800a534:	863b      	strh	r3, [r7, #48]	; 0x30
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	4983      	ldr	r1, [pc, #524]	; (800a748 <SendTxData+0x24c>)
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7f6 f99e 	bl	800087c <__aeabi_fmul>
 800a540:	4603      	mov	r3, r0
 800a542:	4982      	ldr	r1, [pc, #520]	; (800a74c <SendTxData+0x250>)
 800a544:	4618      	mov	r0, r3
 800a546:	f7f6 fa4d 	bl	80009e4 <__aeabi_fdiv>
 800a54a:	4603      	mov	r3, r0
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7f6 fae5 	bl	8000b1c <__aeabi_f2uiz>
 800a552:	4603      	mov	r3, r0
 800a554:	867b      	strh	r3, [r7, #50]	; 0x32

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a556:	4b7e      	ldr	r3, [pc, #504]	; (800a750 <SendTxData+0x254>)
 800a558:	2202      	movs	r2, #2
 800a55a:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	497b      	ldr	r1, [pc, #492]	; (800a74c <SendTxData+0x250>)
 800a560:	4618      	mov	r0, r3
 800a562:	f7f6 f98b 	bl	800087c <__aeabi_fmul>
 800a566:	4603      	mov	r3, r0
 800a568:	4618      	mov	r0, r3
 800a56a:	f7f6 fad7 	bl	8000b1c <__aeabi_f2uiz>
 800a56e:	4603      	mov	r3, r0
 800a570:	85fb      	strh	r3, [r7, #46]	; 0x2e

  AppData.Buffer[i++] = AppLedStateOn;
 800a572:	4b77      	ldr	r3, [pc, #476]	; (800a750 <SendTxData+0x254>)
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a578:	1c59      	adds	r1, r3, #1
 800a57a:	6379      	str	r1, [r7, #52]	; 0x34
 800a57c:	4413      	add	r3, r2
 800a57e:	4a75      	ldr	r2, [pc, #468]	; (800a754 <SendTxData+0x258>)
 800a580:	7812      	ldrb	r2, [r2, #0]
 800a582:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a584:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a586:	0a1b      	lsrs	r3, r3, #8
 800a588:	b298      	uxth	r0, r3
 800a58a:	4b71      	ldr	r3, [pc, #452]	; (800a750 <SendTxData+0x254>)
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a590:	1c59      	adds	r1, r3, #1
 800a592:	6379      	str	r1, [r7, #52]	; 0x34
 800a594:	4413      	add	r3, r2
 800a596:	b2c2      	uxtb	r2, r0
 800a598:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a59a:	4b6d      	ldr	r3, [pc, #436]	; (800a750 <SendTxData+0x254>)
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a0:	1c59      	adds	r1, r3, #1
 800a5a2:	6379      	str	r1, [r7, #52]	; 0x34
 800a5a4:	4413      	add	r3, r2
 800a5a6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a5a8:	b2d2      	uxtb	r2, r2
 800a5aa:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a5ac:	4b68      	ldr	r3, [pc, #416]	; (800a750 <SendTxData+0x254>)
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b2:	1c59      	adds	r1, r3, #1
 800a5b4:	6379      	str	r1, [r7, #52]	; 0x34
 800a5b6:	4413      	add	r3, r2
 800a5b8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a5ba:	b2d2      	uxtb	r2, r2
 800a5bc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a5be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a5c0:	0a1b      	lsrs	r3, r3, #8
 800a5c2:	b298      	uxth	r0, r3
 800a5c4:	4b62      	ldr	r3, [pc, #392]	; (800a750 <SendTxData+0x254>)
 800a5c6:	685a      	ldr	r2, [r3, #4]
 800a5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ca:	1c59      	adds	r1, r3, #1
 800a5cc:	6379      	str	r1, [r7, #52]	; 0x34
 800a5ce:	4413      	add	r3, r2
 800a5d0:	b2c2      	uxtb	r2, r0
 800a5d2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a5d4:	4b5e      	ldr	r3, [pc, #376]	; (800a750 <SendTxData+0x254>)
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5da:	1c59      	adds	r1, r3, #1
 800a5dc:	6379      	str	r1, [r7, #52]	; 0x34
 800a5de:	4413      	add	r3, r2
 800a5e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a5e2:	b2d2      	uxtb	r2, r2
 800a5e4:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a5e6:	4b5c      	ldr	r3, [pc, #368]	; (800a758 <SendTxData+0x25c>)
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b08      	cmp	r3, #8
 800a5ec:	d007      	beq.n	800a5fe <SendTxData+0x102>
 800a5ee:	4b5a      	ldr	r3, [pc, #360]	; (800a758 <SendTxData+0x25c>)
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d003      	beq.n	800a5fe <SendTxData+0x102>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a5f6:	4b58      	ldr	r3, [pc, #352]	; (800a758 <SendTxData+0x25c>)
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d120      	bne.n	800a640 <SendTxData+0x144>
  {
    AppData.Buffer[i++] = 0;
 800a5fe:	4b54      	ldr	r3, [pc, #336]	; (800a750 <SendTxData+0x254>)
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a604:	1c59      	adds	r1, r3, #1
 800a606:	6379      	str	r1, [r7, #52]	; 0x34
 800a608:	4413      	add	r3, r2
 800a60a:	2200      	movs	r2, #0
 800a60c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a60e:	4b50      	ldr	r3, [pc, #320]	; (800a750 <SendTxData+0x254>)
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a614:	1c59      	adds	r1, r3, #1
 800a616:	6379      	str	r1, [r7, #52]	; 0x34
 800a618:	4413      	add	r3, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a61e:	4b4c      	ldr	r3, [pc, #304]	; (800a750 <SendTxData+0x254>)
 800a620:	685a      	ldr	r2, [r3, #4]
 800a622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a624:	1c59      	adds	r1, r3, #1
 800a626:	6379      	str	r1, [r7, #52]	; 0x34
 800a628:	4413      	add	r3, r2
 800a62a:	2200      	movs	r2, #0
 800a62c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a62e:	4b48      	ldr	r3, [pc, #288]	; (800a750 <SendTxData+0x254>)
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a634:	1c59      	adds	r1, r3, #1
 800a636:	6379      	str	r1, [r7, #52]	; 0x34
 800a638:	4413      	add	r3, r2
 800a63a:	2200      	movs	r2, #0
 800a63c:	701a      	strb	r2, [r3, #0]
 800a63e:	e05b      	b.n	800a6f8 <SendTxData+0x1fc>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	62bb      	str	r3, [r7, #40]	; 0x28
    longitude = sensor_data.longitude;
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	627b      	str	r3, [r7, #36]	; 0x24

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a648:	4b41      	ldr	r3, [pc, #260]	; (800a750 <SendTxData+0x254>)
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64e:	1c59      	adds	r1, r3, #1
 800a650:	6379      	str	r1, [r7, #52]	; 0x34
 800a652:	18d4      	adds	r4, r2, r3
 800a654:	f7f7 fb6e 	bl	8001d34 <GetBatteryLevel>
 800a658:	4603      	mov	r3, r0
 800a65a:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	1418      	asrs	r0, r3, #16
 800a660:	4b3b      	ldr	r3, [pc, #236]	; (800a750 <SendTxData+0x254>)
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a666:	1c59      	adds	r1, r3, #1
 800a668:	6379      	str	r1, [r7, #52]	; 0x34
 800a66a:	4413      	add	r3, r2
 800a66c:	b2c2      	uxtb	r2, r0
 800a66e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	1218      	asrs	r0, r3, #8
 800a674:	4b36      	ldr	r3, [pc, #216]	; (800a750 <SendTxData+0x254>)
 800a676:	685a      	ldr	r2, [r3, #4]
 800a678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a67a:	1c59      	adds	r1, r3, #1
 800a67c:	6379      	str	r1, [r7, #52]	; 0x34
 800a67e:	4413      	add	r3, r2
 800a680:	b2c2      	uxtb	r2, r0
 800a682:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a684:	4b32      	ldr	r3, [pc, #200]	; (800a750 <SendTxData+0x254>)
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68a:	1c59      	adds	r1, r3, #1
 800a68c:	6379      	str	r1, [r7, #52]	; 0x34
 800a68e:	4413      	add	r3, r2
 800a690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a692:	b2d2      	uxtb	r2, r2
 800a694:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	1418      	asrs	r0, r3, #16
 800a69a:	4b2d      	ldr	r3, [pc, #180]	; (800a750 <SendTxData+0x254>)
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a0:	1c59      	adds	r1, r3, #1
 800a6a2:	6379      	str	r1, [r7, #52]	; 0x34
 800a6a4:	4413      	add	r3, r2
 800a6a6:	b2c2      	uxtb	r2, r0
 800a6a8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	1218      	asrs	r0, r3, #8
 800a6ae:	4b28      	ldr	r3, [pc, #160]	; (800a750 <SendTxData+0x254>)
 800a6b0:	685a      	ldr	r2, [r3, #4]
 800a6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b4:	1c59      	adds	r1, r3, #1
 800a6b6:	6379      	str	r1, [r7, #52]	; 0x34
 800a6b8:	4413      	add	r3, r2
 800a6ba:	b2c2      	uxtb	r2, r0
 800a6bc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a6be:	4b24      	ldr	r3, [pc, #144]	; (800a750 <SendTxData+0x254>)
 800a6c0:	685a      	ldr	r2, [r3, #4]
 800a6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c4:	1c59      	adds	r1, r3, #1
 800a6c6:	6379      	str	r1, [r7, #52]	; 0x34
 800a6c8:	4413      	add	r3, r2
 800a6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6cc:	b2d2      	uxtb	r2, r2
 800a6ce:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a6d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6d2:	0a1b      	lsrs	r3, r3, #8
 800a6d4:	b298      	uxth	r0, r3
 800a6d6:	4b1e      	ldr	r3, [pc, #120]	; (800a750 <SendTxData+0x254>)
 800a6d8:	685a      	ldr	r2, [r3, #4]
 800a6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6dc:	1c59      	adds	r1, r3, #1
 800a6de:	6379      	str	r1, [r7, #52]	; 0x34
 800a6e0:	4413      	add	r3, r2
 800a6e2:	b2c2      	uxtb	r2, r0
 800a6e4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a6e6:	4b1a      	ldr	r3, [pc, #104]	; (800a750 <SendTxData+0x254>)
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ec:	1c59      	adds	r1, r3, #1
 800a6ee:	6379      	str	r1, [r7, #52]	; 0x34
 800a6f0:	4413      	add	r3, r2
 800a6f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a6f4:	b2d2      	uxtb	r2, r2
 800a6f6:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	4b14      	ldr	r3, [pc, #80]	; (800a750 <SendTxData+0x254>)
 800a6fe:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a700:	1d3a      	adds	r2, r7, #4
 800a702:	2300      	movs	r3, #0
 800a704:	2100      	movs	r1, #0
 800a706:	4812      	ldr	r0, [pc, #72]	; (800a750 <SendTxData+0x254>)
 800a708:	f001 ff7a 	bl	800c600 <LmHandlerSend>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d106      	bne.n	800a720 <SendTxData+0x224>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a712:	4b12      	ldr	r3, [pc, #72]	; (800a75c <SendTxData+0x260>)
 800a714:	2201      	movs	r2, #1
 800a716:	2100      	movs	r1, #0
 800a718:	2001      	movs	r0, #1
 800a71a:	f00f ffa7 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800a71e:	e00e      	b.n	800a73e <SendTxData+0x242>
  else if (nextTxIn > 0)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00b      	beq.n	800a73e <SendTxData+0x242>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a0d      	ldr	r2, [pc, #52]	; (800a760 <SendTxData+0x264>)
 800a72a:	fba2 2303 	umull	r2, r3, r2, r3
 800a72e:	099b      	lsrs	r3, r3, #6
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	4b0c      	ldr	r3, [pc, #48]	; (800a764 <SendTxData+0x268>)
 800a734:	2201      	movs	r2, #1
 800a736:	2100      	movs	r1, #0
 800a738:	2001      	movs	r0, #1
 800a73a:	f00f ff97 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
}
 800a73e:	bf00      	nop
 800a740:	373c      	adds	r7, #60	; 0x3c
 800a742:	46bd      	mov	sp, r7
 800a744:	bd90      	pop	{r4, r7, pc}
 800a746:	bf00      	nop
 800a748:	42c80000 	.word	0x42c80000
 800a74c:	41200000 	.word	0x41200000
 800a750:	20000080 	.word	0x20000080
 800a754:	20000276 	.word	0x20000276
 800a758:	20000070 	.word	0x20000070
 800a75c:	0801af1c 	.word	0x0801af1c
 800a760:	10624dd3 	.word	0x10624dd3
 800a764:	0801af2c 	.word	0x0801af2c

0800a768 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a770:	2100      	movs	r1, #0
 800a772:	2002      	movs	r0, #2
 800a774:	f00f fc58 	bl	801a028 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a778:	4803      	ldr	r0, [pc, #12]	; (800a788 <OnTxTimerEvent+0x20>)
 800a77a:	f00f fcff 	bl	801a17c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a77e:	bf00      	nop
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	2000016c 	.word	0x2000016c

0800a78c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 800a794:	2001      	movs	r0, #1
 800a796:	f7f8 fa1d 	bl	8002bd4 <BSP_LED_Off>
}
 800a79a:	bf00      	nop
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b082      	sub	sp, #8
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	f7f8 fa12 	bl	8002bd4 <BSP_LED_Off>
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 800a7c0:	2002      	movs	r0, #2
 800a7c2:	f7f8 fa2b 	bl	8002c1c <BSP_LED_Toggle>
}
 800a7c6:	bf00      	nop
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
	...

0800a7d0 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af04      	add	r7, sp, #16
 800a7d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d044      	beq.n	800a868 <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d040      	beq.n	800a868 <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 800a7e6:	2001      	movs	r0, #1
 800a7e8:	f7f8 f9d0 	bl	8002b8c <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 800a7ec:	4820      	ldr	r0, [pc, #128]	; (800a870 <OnTxData+0xa0>)
 800a7ee:	f00f fcc5 	bl	801a17c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a7f2:	4b20      	ldr	r3, [pc, #128]	; (800a874 <OnTxData+0xa4>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	2002      	movs	r0, #2
 800a7fa:	f00f ff37 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	7b12      	ldrb	r2, [r2, #12]
 800a806:	4611      	mov	r1, r2
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a80e:	4610      	mov	r0, r2
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800a816:	9203      	str	r2, [sp, #12]
 800a818:	9002      	str	r0, [sp, #8]
 800a81a:	9101      	str	r1, [sp, #4]
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	4b16      	ldr	r3, [pc, #88]	; (800a878 <OnTxData+0xa8>)
 800a820:	2200      	movs	r2, #0
 800a822:	2100      	movs	r1, #0
 800a824:	2003      	movs	r0, #3
 800a826:	f00f ff21 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a82a:	4b14      	ldr	r3, [pc, #80]	; (800a87c <OnTxData+0xac>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	2100      	movs	r1, #0
 800a830:	2003      	movs	r0, #3
 800a832:	f00f ff1b 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	789b      	ldrb	r3, [r3, #2]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d10e      	bne.n	800a85c <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	78db      	ldrb	r3, [r3, #3]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <OnTxData+0x7a>
 800a846:	4b0e      	ldr	r3, [pc, #56]	; (800a880 <OnTxData+0xb0>)
 800a848:	e000      	b.n	800a84c <OnTxData+0x7c>
 800a84a:	4b0e      	ldr	r3, [pc, #56]	; (800a884 <OnTxData+0xb4>)
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	4b0e      	ldr	r3, [pc, #56]	; (800a888 <OnTxData+0xb8>)
 800a850:	2200      	movs	r2, #0
 800a852:	2100      	movs	r1, #0
 800a854:	2003      	movs	r0, #3
 800a856:	f00f ff09 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a85a:	e005      	b.n	800a868 <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a85c:	4b0b      	ldr	r3, [pc, #44]	; (800a88c <OnTxData+0xbc>)
 800a85e:	2200      	movs	r2, #0
 800a860:	2100      	movs	r1, #0
 800a862:	2003      	movs	r0, #3
 800a864:	f00f ff02 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
}
 800a868:	bf00      	nop
 800a86a:	3708      	adds	r7, #8
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	20000278 	.word	0x20000278
 800a874:	0801af4c 	.word	0x0801af4c
 800a878:	0801af80 	.word	0x0801af80
 800a87c:	0801afb4 	.word	0x0801afb4
 800a880:	0801afc4 	.word	0x0801afc4
 800a884:	0801afc8 	.word	0x0801afc8
 800a888:	0801afd0 	.word	0x0801afd0
 800a88c:	0801afe4 	.word	0x0801afe4

0800a890 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d028      	beq.n	800a8f0 <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d11d      	bne.n	800a8e4 <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800a8a8:	4813      	ldr	r0, [pc, #76]	; (800a8f8 <OnJoinRequest+0x68>)
 800a8aa:	f00f fcd5 	bl	801a258 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 800a8ae:	2002      	movs	r0, #2
 800a8b0:	f7f8 f990 	bl	8002bd4 <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a8b4:	4b11      	ldr	r3, [pc, #68]	; (800a8fc <OnJoinRequest+0x6c>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	2002      	movs	r0, #2
 800a8bc:	f00f fed6 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	789b      	ldrb	r3, [r3, #2]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d106      	bne.n	800a8d6 <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a8c8:	4b0d      	ldr	r3, [pc, #52]	; (800a900 <OnJoinRequest+0x70>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	2002      	movs	r0, #2
 800a8d0:	f00f fecc 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a8d4:	e00c      	b.n	800a8f0 <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a8d6:	4b0b      	ldr	r3, [pc, #44]	; (800a904 <OnJoinRequest+0x74>)
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2100      	movs	r1, #0
 800a8dc:	2002      	movs	r0, #2
 800a8de:	f00f fec5 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
}
 800a8e2:	e005      	b.n	800a8f0 <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a8e4:	4b08      	ldr	r3, [pc, #32]	; (800a908 <OnJoinRequest+0x78>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	2002      	movs	r0, #2
 800a8ec:	f00f febe 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	200002a8 	.word	0x200002a8
 800a8fc:	0801aff4 	.word	0x0801aff4
 800a900:	0801b00c 	.word	0x0801b00c
 800a904:	0801b02c 	.word	0x0801b02c
 800a908:	0801b04c 	.word	0x0801b04c

0800a90c <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a910:	2100      	movs	r1, #0
 800a912:	2001      	movs	r0, #1
 800a914:	f00f fb88 	bl	801a028 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a918:	bf00      	nop
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a920:	4b15      	ldr	r3, [pc, #84]	; (800a978 <LoraInfo_Init+0x5c>)
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a926:	4b14      	ldr	r3, [pc, #80]	; (800a978 <LoraInfo_Init+0x5c>)
 800a928:	2200      	movs	r2, #0
 800a92a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a92c:	4b12      	ldr	r3, [pc, #72]	; (800a978 <LoraInfo_Init+0x5c>)
 800a92e:	2200      	movs	r2, #0
 800a930:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a932:	4b11      	ldr	r3, [pc, #68]	; (800a978 <LoraInfo_Init+0x5c>)
 800a934:	2200      	movs	r2, #0
 800a936:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800a938:	4b0f      	ldr	r3, [pc, #60]	; (800a978 <LoraInfo_Init+0x5c>)
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	f043 0320 	orr.w	r3, r3, #32
 800a940:	4a0d      	ldr	r2, [pc, #52]	; (800a978 <LoraInfo_Init+0x5c>)
 800a942:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a944:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <LoraInfo_Init+0x5c>)
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10c      	bne.n	800a966 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a94c:	4b0b      	ldr	r3, [pc, #44]	; (800a97c <LoraInfo_Init+0x60>)
 800a94e:	2200      	movs	r2, #0
 800a950:	2100      	movs	r1, #0
 800a952:	2000      	movs	r0, #0
 800a954:	f00f fe8a 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a958:	bf00      	nop
 800a95a:	f00f fe75 	bl	801a648 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b01      	cmp	r3, #1
 800a962:	d1fa      	bne.n	800a95a <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a964:	e7fe      	b.n	800a964 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a966:	4b04      	ldr	r3, [pc, #16]	; (800a978 <LoraInfo_Init+0x5c>)
 800a968:	2200      	movs	r2, #0
 800a96a:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a96c:	4b02      	ldr	r3, [pc, #8]	; (800a978 <LoraInfo_Init+0x5c>)
 800a96e:	2203      	movs	r2, #3
 800a970:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a972:	bf00      	nop
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	200002c0 	.word	0x200002c0
 800a97c:	0801b0a4 	.word	0x0801b0a4

0800a980 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a980:	b480      	push	{r7}
 800a982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a984:	4b02      	ldr	r3, [pc, #8]	; (800a990 <LoraInfo_GetPtr+0x10>)
}
 800a986:	4618      	mov	r0, r3
 800a988:	46bd      	mov	sp, r7
 800a98a:	bc80      	pop	{r7}
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	200002c0 	.word	0x200002c0

0800a994 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800a998:	f7f8 f9f5 	bl	8002d86 <BSP_RADIO_Init>
 800a99c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b082      	sub	sp, #8
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a9ac:	79fb      	ldrb	r3, [r7, #7]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f8 fa1a 	bl	8002de8 <BSP_RADIO_ConfigRFSwitch>
 800a9b4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800a9c2:	f7f8 fa5f 	bl	8002e84 <BSP_RADIO_GetTxConfig>
 800a9c6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800a9d0:	f7f8 fa5f 	bl	8002e92 <BSP_RADIO_IsTCXO>
 800a9d4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800a9de:	f7f8 fa5f 	bl	8002ea0 <BSP_RADIO_IsDCDC>
 800a9e2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	33f1      	adds	r3, #241	; 0xf1
 800a9f4:	2210      	movs	r2, #16
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f00b fd57 	bl	80164ac <memset1>
    ctx->M_n = 0;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	22f0      	movs	r2, #240	; 0xf0
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f00b fd4d 	bl	80164ac <memset1>
}
 800aa12:	bf00      	nop
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	461a      	mov	r2, r3
 800aa28:	2110      	movs	r1, #16
 800aa2a:	6838      	ldr	r0, [r7, #0]
 800aa2c:	f000 fe60 	bl	800b6f0 <lorawan_aes_set_key>
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b08c      	sub	sp, #48	; 0x30
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f000 80a1 	beq.w	800ab92 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa56:	f1c3 0310 	rsb	r3, r3, #16
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	bf28      	it	cs
 800aa60:	4613      	movcs	r3, r2
 800aa62:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f203 1201 	addw	r2, r3, #257	; 0x101
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa70:	4413      	add	r3, r2
 800aa72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa74:	b292      	uxth	r2, r2
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f00b fcdc 	bl	8016436 <memcpy1>
        ctx->M_n += mlen;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	441a      	add	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa94:	2b0f      	cmp	r3, #15
 800aa96:	f240 808d 	bls.w	800abb4 <AES_CMAC_Update+0x17c>
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	f000 8088 	beq.w	800abb4 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaa8:	e015      	b.n	800aad6 <AES_CMAC_Update+0x9e>
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaae:	4413      	add	r3, r2
 800aab0:	33f1      	adds	r3, #241	; 0xf1
 800aab2:	781a      	ldrb	r2, [r3, #0]
 800aab4:	68f9      	ldr	r1, [r7, #12]
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	440b      	add	r3, r1
 800aaba:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	4053      	eors	r3, r2
 800aac2:	b2d9      	uxtb	r1, r3
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac8:	4413      	add	r3, r2
 800aaca:	33f1      	adds	r3, #241	; 0xf1
 800aacc:	460a      	mov	r2, r1
 800aace:	701a      	strb	r2, [r3, #0]
 800aad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad2:	3301      	adds	r3, #1
 800aad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad8:	2b0f      	cmp	r3, #15
 800aada:	dde6      	ble.n	800aaaa <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800aae2:	f107 0314 	add.w	r3, r7, #20
 800aae6:	2210      	movs	r2, #16
 800aae8:	4618      	mov	r0, r3
 800aaea:	f00b fca4 	bl	8016436 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	f107 0114 	add.w	r1, r7, #20
 800aaf4:	f107 0314 	add.w	r3, r7, #20
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 fed7 	bl	800b8ac <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	33f1      	adds	r3, #241	; 0xf1
 800ab02:	f107 0114 	add.w	r1, r7, #20
 800ab06:	2210      	movs	r2, #16
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f00b fc94 	bl	8016436 <memcpy1>

        data += mlen;
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab12:	4413      	add	r3, r2
 800ab14:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800ab1e:	e038      	b.n	800ab92 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ab20:	2300      	movs	r3, #0
 800ab22:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab24:	e013      	b.n	800ab4e <AES_CMAC_Update+0x116>
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	4413      	add	r3, r2
 800ab2c:	33f1      	adds	r3, #241	; 0xf1
 800ab2e:	781a      	ldrb	r2, [r3, #0]
 800ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab32:	68b9      	ldr	r1, [r7, #8]
 800ab34:	440b      	add	r3, r1
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	4053      	eors	r3, r2
 800ab3a:	b2d9      	uxtb	r1, r3
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab40:	4413      	add	r3, r2
 800ab42:	33f1      	adds	r3, #241	; 0xf1
 800ab44:	460a      	mov	r2, r1
 800ab46:	701a      	strb	r2, [r3, #0]
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	2b0f      	cmp	r3, #15
 800ab52:	dde8      	ble.n	800ab26 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ab5a:	f107 0314 	add.w	r3, r7, #20
 800ab5e:	2210      	movs	r2, #16
 800ab60:	4618      	mov	r0, r3
 800ab62:	f00b fc68 	bl	8016436 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	f107 0114 	add.w	r1, r7, #20
 800ab6c:	f107 0314 	add.w	r3, r7, #20
 800ab70:	4618      	mov	r0, r3
 800ab72:	f000 fe9b 	bl	800b8ac <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	33f1      	adds	r3, #241	; 0xf1
 800ab7a:	f107 0114 	add.w	r1, r7, #20
 800ab7e:	2210      	movs	r2, #16
 800ab80:	4618      	mov	r0, r3
 800ab82:	f00b fc58 	bl	8016436 <memcpy1>

        data += 16;
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	3310      	adds	r3, #16
 800ab8a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	3b10      	subs	r3, #16
 800ab90:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b10      	cmp	r3, #16
 800ab96:	d8c3      	bhi.n	800ab20 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	b292      	uxth	r2, r2
 800aba2:	68b9      	ldr	r1, [r7, #8]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f00b fc46 	bl	8016436 <memcpy1>
    ctx->M_n = len;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800abb2:	e000      	b.n	800abb6 <AES_CMAC_Update+0x17e>
            return;
 800abb4:	bf00      	nop
}
 800abb6:	3730      	adds	r7, #48	; 0x30
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b092      	sub	sp, #72	; 0x48
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800abc6:	f107 031c 	add.w	r3, r7, #28
 800abca:	2210      	movs	r2, #16
 800abcc:	2100      	movs	r1, #0
 800abce:	4618      	mov	r0, r3
 800abd0:	f00b fc6c 	bl	80164ac <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800abd4:	683a      	ldr	r2, [r7, #0]
 800abd6:	f107 011c 	add.w	r1, r7, #28
 800abda:	f107 031c 	add.w	r3, r7, #28
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 fe64 	bl	800b8ac <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800abe4:	7f3b      	ldrb	r3, [r7, #28]
 800abe6:	b25b      	sxtb	r3, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	da31      	bge.n	800ac50 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800abec:	2300      	movs	r3, #0
 800abee:	647b      	str	r3, [r7, #68]	; 0x44
 800abf0:	e01c      	b.n	800ac2c <AES_CMAC_Final+0x70>
 800abf2:	f107 021c 	add.w	r2, r7, #28
 800abf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abf8:	4413      	add	r3, r2
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	b25a      	sxtb	r2, r3
 800ac00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac02:	3301      	adds	r3, #1
 800ac04:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ac08:	440b      	add	r3, r1
 800ac0a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ac0e:	09db      	lsrs	r3, r3, #7
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	b25b      	sxtb	r3, r3
 800ac14:	4313      	orrs	r3, r2
 800ac16:	b25b      	sxtb	r3, r3
 800ac18:	b2d9      	uxtb	r1, r3
 800ac1a:	f107 021c 	add.w	r2, r7, #28
 800ac1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac20:	4413      	add	r3, r2
 800ac22:	460a      	mov	r2, r1
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac28:	3301      	adds	r3, #1
 800ac2a:	647b      	str	r3, [r7, #68]	; 0x44
 800ac2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac2e:	2b0e      	cmp	r3, #14
 800ac30:	dddf      	ble.n	800abf2 <AES_CMAC_Final+0x36>
 800ac32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac36:	005b      	lsls	r3, r3, #1
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800ac3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac42:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ac46:	43db      	mvns	r3, r3
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac4e:	e028      	b.n	800aca2 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800ac50:	2300      	movs	r3, #0
 800ac52:	643b      	str	r3, [r7, #64]	; 0x40
 800ac54:	e01c      	b.n	800ac90 <AES_CMAC_Final+0xd4>
 800ac56:	f107 021c 	add.w	r2, r7, #28
 800ac5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac5c:	4413      	add	r3, r2
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	b25a      	sxtb	r2, r3
 800ac64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac66:	3301      	adds	r3, #1
 800ac68:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ac6c:	440b      	add	r3, r1
 800ac6e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ac72:	09db      	lsrs	r3, r3, #7
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	b25b      	sxtb	r3, r3
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	b25b      	sxtb	r3, r3
 800ac7c:	b2d9      	uxtb	r1, r3
 800ac7e:	f107 021c 	add.w	r2, r7, #28
 800ac82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac84:	4413      	add	r3, r2
 800ac86:	460a      	mov	r2, r1
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	643b      	str	r3, [r7, #64]	; 0x40
 800ac90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac92:	2b0e      	cmp	r3, #14
 800ac94:	dddf      	ble.n	800ac56 <AES_CMAC_Final+0x9a>
 800ac96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac9a:	005b      	lsls	r3, r3, #1
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aca8:	2b10      	cmp	r3, #16
 800acaa:	d11d      	bne.n	800ace8 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800acac:	2300      	movs	r3, #0
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acb0:	e016      	b.n	800ace0 <AES_CMAC_Final+0x124>
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb6:	4413      	add	r3, r2
 800acb8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800acbc:	781a      	ldrb	r2, [r3, #0]
 800acbe:	f107 011c 	add.w	r1, r7, #28
 800acc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc4:	440b      	add	r3, r1
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	4053      	eors	r3, r2
 800acca:	b2d9      	uxtb	r1, r3
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd0:	4413      	add	r3, r2
 800acd2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800acd6:	460a      	mov	r2, r1
 800acd8:	701a      	strb	r2, [r3, #0]
 800acda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acdc:	3301      	adds	r3, #1
 800acde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace2:	2b0f      	cmp	r3, #15
 800ace4:	dde5      	ble.n	800acb2 <AES_CMAC_Final+0xf6>
 800ace6:	e098      	b.n	800ae1a <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800ace8:	7f3b      	ldrb	r3, [r7, #28]
 800acea:	b25b      	sxtb	r3, r3
 800acec:	2b00      	cmp	r3, #0
 800acee:	da31      	bge.n	800ad54 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800acf0:	2300      	movs	r3, #0
 800acf2:	63bb      	str	r3, [r7, #56]	; 0x38
 800acf4:	e01c      	b.n	800ad30 <AES_CMAC_Final+0x174>
 800acf6:	f107 021c 	add.w	r2, r7, #28
 800acfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfc:	4413      	add	r3, r2
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	b25a      	sxtb	r2, r3
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	3301      	adds	r3, #1
 800ad08:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ad0c:	440b      	add	r3, r1
 800ad0e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ad12:	09db      	lsrs	r3, r3, #7
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	b25b      	sxtb	r3, r3
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	b25b      	sxtb	r3, r3
 800ad1c:	b2d9      	uxtb	r1, r3
 800ad1e:	f107 021c 	add.w	r2, r7, #28
 800ad22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad24:	4413      	add	r3, r2
 800ad26:	460a      	mov	r2, r1
 800ad28:	701a      	strb	r2, [r3, #0]
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad32:	2b0e      	cmp	r3, #14
 800ad34:	dddf      	ble.n	800acf6 <AES_CMAC_Final+0x13a>
 800ad36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad3a:	005b      	lsls	r3, r3, #1
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800ad42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad46:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ad4a:	43db      	mvns	r3, r3
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad52:	e028      	b.n	800ada6 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800ad54:	2300      	movs	r3, #0
 800ad56:	637b      	str	r3, [r7, #52]	; 0x34
 800ad58:	e01c      	b.n	800ad94 <AES_CMAC_Final+0x1d8>
 800ad5a:	f107 021c 	add.w	r2, r7, #28
 800ad5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad60:	4413      	add	r3, r2
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	b25a      	sxtb	r2, r3
 800ad68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ad70:	440b      	add	r3, r1
 800ad72:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ad76:	09db      	lsrs	r3, r3, #7
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	b25b      	sxtb	r3, r3
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	b25b      	sxtb	r3, r3
 800ad80:	b2d9      	uxtb	r1, r3
 800ad82:	f107 021c 	add.w	r2, r7, #28
 800ad86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad88:	4413      	add	r3, r2
 800ad8a:	460a      	mov	r2, r1
 800ad8c:	701a      	strb	r2, [r3, #0]
 800ad8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad90:	3301      	adds	r3, #1
 800ad92:	637b      	str	r3, [r7, #52]	; 0x34
 800ad94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad96:	2b0e      	cmp	r3, #14
 800ad98:	dddf      	ble.n	800ad5a <AES_CMAC_Final+0x19e>
 800ad9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad9e:	005b      	lsls	r3, r3, #1
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800adac:	683a      	ldr	r2, [r7, #0]
 800adae:	4413      	add	r3, r2
 800adb0:	2280      	movs	r2, #128	; 0x80
 800adb2:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800adb6:	e007      	b.n	800adc8 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	4413      	add	r3, r2
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800addc:	2b0f      	cmp	r3, #15
 800adde:	d9eb      	bls.n	800adb8 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800ade0:	2300      	movs	r3, #0
 800ade2:	633b      	str	r3, [r7, #48]	; 0x30
 800ade4:	e016      	b.n	800ae14 <AES_CMAC_Final+0x258>
 800ade6:	683a      	ldr	r2, [r7, #0]
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	4413      	add	r3, r2
 800adec:	f203 1301 	addw	r3, r3, #257	; 0x101
 800adf0:	781a      	ldrb	r2, [r3, #0]
 800adf2:	f107 011c 	add.w	r1, r7, #28
 800adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf8:	440b      	add	r3, r1
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	4053      	eors	r3, r2
 800adfe:	b2d9      	uxtb	r1, r3
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	4413      	add	r3, r2
 800ae06:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae0a:	460a      	mov	r2, r1
 800ae0c:	701a      	strb	r2, [r3, #0]
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	3301      	adds	r3, #1
 800ae12:	633b      	str	r3, [r7, #48]	; 0x30
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	2b0f      	cmp	r3, #15
 800ae18:	dde5      	ble.n	800ade6 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae1e:	e015      	b.n	800ae4c <AES_CMAC_Final+0x290>
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae24:	4413      	add	r3, r2
 800ae26:	33f1      	adds	r3, #241	; 0xf1
 800ae28:	781a      	ldrb	r2, [r3, #0]
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2e:	440b      	add	r3, r1
 800ae30:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	4053      	eors	r3, r2
 800ae38:	b2d9      	uxtb	r1, r3
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3e:	4413      	add	r3, r2
 800ae40:	33f1      	adds	r3, #241	; 0xf1
 800ae42:	460a      	mov	r2, r1
 800ae44:	701a      	strb	r2, [r3, #0]
 800ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae48:	3301      	adds	r3, #1
 800ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4e:	2b0f      	cmp	r3, #15
 800ae50:	dde6      	ble.n	800ae20 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ae58:	f107 030c 	add.w	r3, r7, #12
 800ae5c:	2210      	movs	r2, #16
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f00b fae9 	bl	8016436 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	f107 030c 	add.w	r3, r7, #12
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 fd1d 	bl	800b8ac <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800ae72:	f107 031c 	add.w	r3, r7, #28
 800ae76:	2210      	movs	r2, #16
 800ae78:	2100      	movs	r1, #0
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f00b fb16 	bl	80164ac <memset1>
}
 800ae80:	bf00      	nop
 800ae82:	3748      	adds	r7, #72	; 0x48
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	781a      	ldrb	r2, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	7852      	ldrb	r2, [r2, #1]
 800aea2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	3302      	adds	r3, #2
 800aea8:	683a      	ldr	r2, [r7, #0]
 800aeaa:	7892      	ldrb	r2, [r2, #2]
 800aeac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	3303      	adds	r3, #3
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	78d2      	ldrb	r2, [r2, #3]
 800aeb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	3304      	adds	r3, #4
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	7912      	ldrb	r2, [r2, #4]
 800aec0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	3305      	adds	r3, #5
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	7952      	ldrb	r2, [r2, #5]
 800aeca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	3306      	adds	r3, #6
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	7992      	ldrb	r2, [r2, #6]
 800aed4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	3307      	adds	r3, #7
 800aeda:	683a      	ldr	r2, [r7, #0]
 800aedc:	79d2      	ldrb	r2, [r2, #7]
 800aede:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	3308      	adds	r3, #8
 800aee4:	683a      	ldr	r2, [r7, #0]
 800aee6:	7a12      	ldrb	r2, [r2, #8]
 800aee8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	3309      	adds	r3, #9
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	7a52      	ldrb	r2, [r2, #9]
 800aef2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	330a      	adds	r3, #10
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	7a92      	ldrb	r2, [r2, #10]
 800aefc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	330b      	adds	r3, #11
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	7ad2      	ldrb	r2, [r2, #11]
 800af06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	330c      	adds	r3, #12
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	7b12      	ldrb	r2, [r2, #12]
 800af10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	330d      	adds	r3, #13
 800af16:	683a      	ldr	r2, [r7, #0]
 800af18:	7b52      	ldrb	r2, [r2, #13]
 800af1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	330e      	adds	r3, #14
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	7b92      	ldrb	r2, [r2, #14]
 800af24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	330f      	adds	r3, #15
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	7bd2      	ldrb	r2, [r2, #15]
 800af2e:	701a      	strb	r2, [r3, #0]
#endif
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	bc80      	pop	{r7}
 800af38:	4770      	bx	lr

0800af3a <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800af3a:	b480      	push	{r7}
 800af3c:	b085      	sub	sp, #20
 800af3e:	af00      	add	r7, sp, #0
 800af40:	60f8      	str	r0, [r7, #12]
 800af42:	60b9      	str	r1, [r7, #8]
 800af44:	4613      	mov	r3, r2
 800af46:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800af48:	e007      	b.n	800af5a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	1c53      	adds	r3, r2, #1
 800af4e:	60bb      	str	r3, [r7, #8]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	1c59      	adds	r1, r3, #1
 800af54:	60f9      	str	r1, [r7, #12]
 800af56:	7812      	ldrb	r2, [r2, #0]
 800af58:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800af5a:	79fb      	ldrb	r3, [r7, #7]
 800af5c:	1e5a      	subs	r2, r3, #1
 800af5e:	71fa      	strb	r2, [r7, #7]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1f2      	bne.n	800af4a <copy_block_nn+0x10>
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bc80      	pop	{r7}
 800af6e:	4770      	bx	lr

0800af70 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	781a      	ldrb	r2, [r3, #0]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	4053      	eors	r3, r2
 800af84:	b2da      	uxtb	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3301      	adds	r3, #1
 800af8e:	7819      	ldrb	r1, [r3, #0]
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	3301      	adds	r3, #1
 800af94:	781a      	ldrb	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3301      	adds	r3, #1
 800af9a:	404a      	eors	r2, r1
 800af9c:	b2d2      	uxtb	r2, r2
 800af9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	3302      	adds	r3, #2
 800afa4:	7819      	ldrb	r1, [r3, #0]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	3302      	adds	r3, #2
 800afaa:	781a      	ldrb	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3302      	adds	r3, #2
 800afb0:	404a      	eors	r2, r1
 800afb2:	b2d2      	uxtb	r2, r2
 800afb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	3303      	adds	r3, #3
 800afba:	7819      	ldrb	r1, [r3, #0]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	3303      	adds	r3, #3
 800afc0:	781a      	ldrb	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3303      	adds	r3, #3
 800afc6:	404a      	eors	r2, r1
 800afc8:	b2d2      	uxtb	r2, r2
 800afca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3304      	adds	r3, #4
 800afd0:	7819      	ldrb	r1, [r3, #0]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	3304      	adds	r3, #4
 800afd6:	781a      	ldrb	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3304      	adds	r3, #4
 800afdc:	404a      	eors	r2, r1
 800afde:	b2d2      	uxtb	r2, r2
 800afe0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3305      	adds	r3, #5
 800afe6:	7819      	ldrb	r1, [r3, #0]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	3305      	adds	r3, #5
 800afec:	781a      	ldrb	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3305      	adds	r3, #5
 800aff2:	404a      	eors	r2, r1
 800aff4:	b2d2      	uxtb	r2, r2
 800aff6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	3306      	adds	r3, #6
 800affc:	7819      	ldrb	r1, [r3, #0]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	3306      	adds	r3, #6
 800b002:	781a      	ldrb	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3306      	adds	r3, #6
 800b008:	404a      	eors	r2, r1
 800b00a:	b2d2      	uxtb	r2, r2
 800b00c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	3307      	adds	r3, #7
 800b012:	7819      	ldrb	r1, [r3, #0]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	3307      	adds	r3, #7
 800b018:	781a      	ldrb	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	3307      	adds	r3, #7
 800b01e:	404a      	eors	r2, r1
 800b020:	b2d2      	uxtb	r2, r2
 800b022:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3308      	adds	r3, #8
 800b028:	7819      	ldrb	r1, [r3, #0]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	3308      	adds	r3, #8
 800b02e:	781a      	ldrb	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	3308      	adds	r3, #8
 800b034:	404a      	eors	r2, r1
 800b036:	b2d2      	uxtb	r2, r2
 800b038:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	3309      	adds	r3, #9
 800b03e:	7819      	ldrb	r1, [r3, #0]
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	3309      	adds	r3, #9
 800b044:	781a      	ldrb	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	3309      	adds	r3, #9
 800b04a:	404a      	eors	r2, r1
 800b04c:	b2d2      	uxtb	r2, r2
 800b04e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	330a      	adds	r3, #10
 800b054:	7819      	ldrb	r1, [r3, #0]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	330a      	adds	r3, #10
 800b05a:	781a      	ldrb	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	330a      	adds	r3, #10
 800b060:	404a      	eors	r2, r1
 800b062:	b2d2      	uxtb	r2, r2
 800b064:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	330b      	adds	r3, #11
 800b06a:	7819      	ldrb	r1, [r3, #0]
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	330b      	adds	r3, #11
 800b070:	781a      	ldrb	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	330b      	adds	r3, #11
 800b076:	404a      	eors	r2, r1
 800b078:	b2d2      	uxtb	r2, r2
 800b07a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	330c      	adds	r3, #12
 800b080:	7819      	ldrb	r1, [r3, #0]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	330c      	adds	r3, #12
 800b086:	781a      	ldrb	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	330c      	adds	r3, #12
 800b08c:	404a      	eors	r2, r1
 800b08e:	b2d2      	uxtb	r2, r2
 800b090:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	330d      	adds	r3, #13
 800b096:	7819      	ldrb	r1, [r3, #0]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	330d      	adds	r3, #13
 800b09c:	781a      	ldrb	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	330d      	adds	r3, #13
 800b0a2:	404a      	eors	r2, r1
 800b0a4:	b2d2      	uxtb	r2, r2
 800b0a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	330e      	adds	r3, #14
 800b0ac:	7819      	ldrb	r1, [r3, #0]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	330e      	adds	r3, #14
 800b0b2:	781a      	ldrb	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	330e      	adds	r3, #14
 800b0b8:	404a      	eors	r2, r1
 800b0ba:	b2d2      	uxtb	r2, r2
 800b0bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	330f      	adds	r3, #15
 800b0c2:	7819      	ldrb	r1, [r3, #0]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	330f      	adds	r3, #15
 800b0c8:	781a      	ldrb	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	330f      	adds	r3, #15
 800b0ce:	404a      	eors	r2, r1
 800b0d0:	b2d2      	uxtb	r2, r2
 800b0d2:	701a      	strb	r2, [r3, #0]
#endif
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bc80      	pop	{r7}
 800b0dc:	4770      	bx	lr

0800b0de <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	60f8      	str	r0, [r7, #12]
 800b0e6:	60b9      	str	r1, [r7, #8]
 800b0e8:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	781a      	ldrb	r2, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	4053      	eors	r3, r2
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	7819      	ldrb	r1, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3301      	adds	r3, #1
 800b104:	781a      	ldrb	r2, [r3, #0]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	3301      	adds	r3, #1
 800b10a:	404a      	eors	r2, r1
 800b10c:	b2d2      	uxtb	r2, r2
 800b10e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	3302      	adds	r3, #2
 800b114:	7819      	ldrb	r1, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	3302      	adds	r3, #2
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3302      	adds	r3, #2
 800b120:	404a      	eors	r2, r1
 800b122:	b2d2      	uxtb	r2, r2
 800b124:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	3303      	adds	r3, #3
 800b12a:	7819      	ldrb	r1, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3303      	adds	r3, #3
 800b130:	781a      	ldrb	r2, [r3, #0]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3303      	adds	r3, #3
 800b136:	404a      	eors	r2, r1
 800b138:	b2d2      	uxtb	r2, r2
 800b13a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	3304      	adds	r3, #4
 800b140:	7819      	ldrb	r1, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3304      	adds	r3, #4
 800b146:	781a      	ldrb	r2, [r3, #0]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	3304      	adds	r3, #4
 800b14c:	404a      	eors	r2, r1
 800b14e:	b2d2      	uxtb	r2, r2
 800b150:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	3305      	adds	r3, #5
 800b156:	7819      	ldrb	r1, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	3305      	adds	r3, #5
 800b15c:	781a      	ldrb	r2, [r3, #0]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3305      	adds	r3, #5
 800b162:	404a      	eors	r2, r1
 800b164:	b2d2      	uxtb	r2, r2
 800b166:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	3306      	adds	r3, #6
 800b16c:	7819      	ldrb	r1, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	3306      	adds	r3, #6
 800b172:	781a      	ldrb	r2, [r3, #0]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	3306      	adds	r3, #6
 800b178:	404a      	eors	r2, r1
 800b17a:	b2d2      	uxtb	r2, r2
 800b17c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	3307      	adds	r3, #7
 800b182:	7819      	ldrb	r1, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	3307      	adds	r3, #7
 800b188:	781a      	ldrb	r2, [r3, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	3307      	adds	r3, #7
 800b18e:	404a      	eors	r2, r1
 800b190:	b2d2      	uxtb	r2, r2
 800b192:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	3308      	adds	r3, #8
 800b198:	7819      	ldrb	r1, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	3308      	adds	r3, #8
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3308      	adds	r3, #8
 800b1a4:	404a      	eors	r2, r1
 800b1a6:	b2d2      	uxtb	r2, r2
 800b1a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	3309      	adds	r3, #9
 800b1ae:	7819      	ldrb	r1, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	3309      	adds	r3, #9
 800b1b4:	781a      	ldrb	r2, [r3, #0]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3309      	adds	r3, #9
 800b1ba:	404a      	eors	r2, r1
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	330a      	adds	r3, #10
 800b1c4:	7819      	ldrb	r1, [r3, #0]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	330a      	adds	r3, #10
 800b1ca:	781a      	ldrb	r2, [r3, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	330a      	adds	r3, #10
 800b1d0:	404a      	eors	r2, r1
 800b1d2:	b2d2      	uxtb	r2, r2
 800b1d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	330b      	adds	r3, #11
 800b1da:	7819      	ldrb	r1, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	330b      	adds	r3, #11
 800b1e0:	781a      	ldrb	r2, [r3, #0]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	330b      	adds	r3, #11
 800b1e6:	404a      	eors	r2, r1
 800b1e8:	b2d2      	uxtb	r2, r2
 800b1ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	330c      	adds	r3, #12
 800b1f0:	7819      	ldrb	r1, [r3, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	330c      	adds	r3, #12
 800b1f6:	781a      	ldrb	r2, [r3, #0]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	330c      	adds	r3, #12
 800b1fc:	404a      	eors	r2, r1
 800b1fe:	b2d2      	uxtb	r2, r2
 800b200:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	330d      	adds	r3, #13
 800b206:	7819      	ldrb	r1, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	330d      	adds	r3, #13
 800b20c:	781a      	ldrb	r2, [r3, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	330d      	adds	r3, #13
 800b212:	404a      	eors	r2, r1
 800b214:	b2d2      	uxtb	r2, r2
 800b216:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	330e      	adds	r3, #14
 800b21c:	7819      	ldrb	r1, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	330e      	adds	r3, #14
 800b222:	781a      	ldrb	r2, [r3, #0]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	330e      	adds	r3, #14
 800b228:	404a      	eors	r2, r1
 800b22a:	b2d2      	uxtb	r2, r2
 800b22c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	330f      	adds	r3, #15
 800b232:	7819      	ldrb	r1, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	330f      	adds	r3, #15
 800b238:	781a      	ldrb	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	330f      	adds	r3, #15
 800b23e:	404a      	eors	r2, r1
 800b240:	b2d2      	uxtb	r2, r2
 800b242:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b244:	bf00      	nop
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	bc80      	pop	{r7}
 800b24c:	4770      	bx	lr

0800b24e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b082      	sub	sp, #8
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff fe88 	bl	800af70 <xor_block>
}
 800b260:	bf00      	nop
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	4b48      	ldr	r3, [pc, #288]	; (800b398 <shift_sub_rows+0x130>)
 800b278:	5c9a      	ldrb	r2, [r3, r2]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	701a      	strb	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3304      	adds	r3, #4
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	4619      	mov	r1, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	3304      	adds	r3, #4
 800b28a:	4a43      	ldr	r2, [pc, #268]	; (800b398 <shift_sub_rows+0x130>)
 800b28c:	5c52      	ldrb	r2, [r2, r1]
 800b28e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3308      	adds	r3, #8
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	4619      	mov	r1, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	3308      	adds	r3, #8
 800b29c:	4a3e      	ldr	r2, [pc, #248]	; (800b398 <shift_sub_rows+0x130>)
 800b29e:	5c52      	ldrb	r2, [r2, r1]
 800b2a0:	701a      	strb	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	330c      	adds	r3, #12
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	330c      	adds	r3, #12
 800b2ae:	4a3a      	ldr	r2, [pc, #232]	; (800b398 <shift_sub_rows+0x130>)
 800b2b0:	5c52      	ldrb	r2, [r2, r1]
 800b2b2:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	785b      	ldrb	r3, [r3, #1]
 800b2b8:	73fb      	strb	r3, [r7, #15]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	3305      	adds	r3, #5
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	4a34      	ldr	r2, [pc, #208]	; (800b398 <shift_sub_rows+0x130>)
 800b2c8:	5c52      	ldrb	r2, [r2, r1]
 800b2ca:	701a      	strb	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3309      	adds	r3, #9
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	3305      	adds	r3, #5
 800b2d8:	4a2f      	ldr	r2, [pc, #188]	; (800b398 <shift_sub_rows+0x130>)
 800b2da:	5c52      	ldrb	r2, [r2, r1]
 800b2dc:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	330d      	adds	r3, #13
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3309      	adds	r3, #9
 800b2ea:	4a2b      	ldr	r2, [pc, #172]	; (800b398 <shift_sub_rows+0x130>)
 800b2ec:	5c52      	ldrb	r2, [r2, r1]
 800b2ee:	701a      	strb	r2, [r3, #0]
 800b2f0:	7bfa      	ldrb	r2, [r7, #15]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	330d      	adds	r3, #13
 800b2f6:	4928      	ldr	r1, [pc, #160]	; (800b398 <shift_sub_rows+0x130>)
 800b2f8:	5c8a      	ldrb	r2, [r1, r2]
 800b2fa:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	789b      	ldrb	r3, [r3, #2]
 800b300:	73fb      	strb	r3, [r7, #15]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	330a      	adds	r3, #10
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	4619      	mov	r1, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	3302      	adds	r3, #2
 800b30e:	4a22      	ldr	r2, [pc, #136]	; (800b398 <shift_sub_rows+0x130>)
 800b310:	5c52      	ldrb	r2, [r2, r1]
 800b312:	701a      	strb	r2, [r3, #0]
 800b314:	7bfa      	ldrb	r2, [r7, #15]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	330a      	adds	r3, #10
 800b31a:	491f      	ldr	r1, [pc, #124]	; (800b398 <shift_sub_rows+0x130>)
 800b31c:	5c8a      	ldrb	r2, [r1, r2]
 800b31e:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	799b      	ldrb	r3, [r3, #6]
 800b324:	73fb      	strb	r3, [r7, #15]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	330e      	adds	r3, #14
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	4619      	mov	r1, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	3306      	adds	r3, #6
 800b332:	4a19      	ldr	r2, [pc, #100]	; (800b398 <shift_sub_rows+0x130>)
 800b334:	5c52      	ldrb	r2, [r2, r1]
 800b336:	701a      	strb	r2, [r3, #0]
 800b338:	7bfa      	ldrb	r2, [r7, #15]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	330e      	adds	r3, #14
 800b33e:	4916      	ldr	r1, [pc, #88]	; (800b398 <shift_sub_rows+0x130>)
 800b340:	5c8a      	ldrb	r2, [r1, r2]
 800b342:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	7bdb      	ldrb	r3, [r3, #15]
 800b348:	73fb      	strb	r3, [r7, #15]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	330b      	adds	r3, #11
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	4619      	mov	r1, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	330f      	adds	r3, #15
 800b356:	4a10      	ldr	r2, [pc, #64]	; (800b398 <shift_sub_rows+0x130>)
 800b358:	5c52      	ldrb	r2, [r2, r1]
 800b35a:	701a      	strb	r2, [r3, #0]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3307      	adds	r3, #7
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	4619      	mov	r1, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	330b      	adds	r3, #11
 800b368:	4a0b      	ldr	r2, [pc, #44]	; (800b398 <shift_sub_rows+0x130>)
 800b36a:	5c52      	ldrb	r2, [r2, r1]
 800b36c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	3303      	adds	r3, #3
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	4619      	mov	r1, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	3307      	adds	r3, #7
 800b37a:	4a07      	ldr	r2, [pc, #28]	; (800b398 <shift_sub_rows+0x130>)
 800b37c:	5c52      	ldrb	r2, [r2, r1]
 800b37e:	701a      	strb	r2, [r3, #0]
 800b380:	7bfa      	ldrb	r2, [r7, #15]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	3303      	adds	r3, #3
 800b386:	4904      	ldr	r1, [pc, #16]	; (800b398 <shift_sub_rows+0x130>)
 800b388:	5c8a      	ldrb	r2, [r1, r2]
 800b38a:	701a      	strb	r2, [r3, #0]
}
 800b38c:	bf00      	nop
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	bc80      	pop	{r7}
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	0801b6e0 	.word	0x0801b6e0

0800b39c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b3a4:	f107 0308 	add.w	r3, r7, #8
 800b3a8:	6879      	ldr	r1, [r7, #4]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff fd6c 	bl	800ae88 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b3b0:	7a3b      	ldrb	r3, [r7, #8]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	4b9a      	ldr	r3, [pc, #616]	; (800b620 <mix_sub_columns+0x284>)
 800b3b6:	5c9a      	ldrb	r2, [r3, r2]
 800b3b8:	7b7b      	ldrb	r3, [r7, #13]
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	4b99      	ldr	r3, [pc, #612]	; (800b624 <mix_sub_columns+0x288>)
 800b3be:	5c5b      	ldrb	r3, [r3, r1]
 800b3c0:	4053      	eors	r3, r2
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	7cbb      	ldrb	r3, [r7, #18]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4b97      	ldr	r3, [pc, #604]	; (800b628 <mix_sub_columns+0x28c>)
 800b3ca:	5c5b      	ldrb	r3, [r3, r1]
 800b3cc:	4053      	eors	r3, r2
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	4b94      	ldr	r3, [pc, #592]	; (800b628 <mix_sub_columns+0x28c>)
 800b3d6:	5c5b      	ldrb	r3, [r3, r1]
 800b3d8:	4053      	eors	r3, r2
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b3e0:	7a3b      	ldrb	r3, [r7, #8]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	4b90      	ldr	r3, [pc, #576]	; (800b628 <mix_sub_columns+0x28c>)
 800b3e6:	5c9a      	ldrb	r2, [r3, r2]
 800b3e8:	7b7b      	ldrb	r3, [r7, #13]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	4b8c      	ldr	r3, [pc, #560]	; (800b620 <mix_sub_columns+0x284>)
 800b3ee:	5c5b      	ldrb	r3, [r3, r1]
 800b3f0:	4053      	eors	r3, r2
 800b3f2:	b2da      	uxtb	r2, r3
 800b3f4:	7cbb      	ldrb	r3, [r7, #18]
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	4b8a      	ldr	r3, [pc, #552]	; (800b624 <mix_sub_columns+0x288>)
 800b3fa:	5c5b      	ldrb	r3, [r3, r1]
 800b3fc:	4053      	eors	r3, r2
 800b3fe:	b2d9      	uxtb	r1, r3
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	461a      	mov	r2, r3
 800b404:	4b88      	ldr	r3, [pc, #544]	; (800b628 <mix_sub_columns+0x28c>)
 800b406:	5c9a      	ldrb	r2, [r3, r2]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	3301      	adds	r3, #1
 800b40c:	404a      	eors	r2, r1
 800b40e:	b2d2      	uxtb	r2, r2
 800b410:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b412:	7a3b      	ldrb	r3, [r7, #8]
 800b414:	461a      	mov	r2, r3
 800b416:	4b84      	ldr	r3, [pc, #528]	; (800b628 <mix_sub_columns+0x28c>)
 800b418:	5c9a      	ldrb	r2, [r3, r2]
 800b41a:	7b7b      	ldrb	r3, [r7, #13]
 800b41c:	4619      	mov	r1, r3
 800b41e:	4b82      	ldr	r3, [pc, #520]	; (800b628 <mix_sub_columns+0x28c>)
 800b420:	5c5b      	ldrb	r3, [r3, r1]
 800b422:	4053      	eors	r3, r2
 800b424:	b2da      	uxtb	r2, r3
 800b426:	7cbb      	ldrb	r3, [r7, #18]
 800b428:	4619      	mov	r1, r3
 800b42a:	4b7d      	ldr	r3, [pc, #500]	; (800b620 <mix_sub_columns+0x284>)
 800b42c:	5c5b      	ldrb	r3, [r3, r1]
 800b42e:	4053      	eors	r3, r2
 800b430:	b2d9      	uxtb	r1, r3
 800b432:	7dfb      	ldrb	r3, [r7, #23]
 800b434:	461a      	mov	r2, r3
 800b436:	4b7b      	ldr	r3, [pc, #492]	; (800b624 <mix_sub_columns+0x288>)
 800b438:	5c9a      	ldrb	r2, [r3, r2]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3302      	adds	r3, #2
 800b43e:	404a      	eors	r2, r1
 800b440:	b2d2      	uxtb	r2, r2
 800b442:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b444:	7a3b      	ldrb	r3, [r7, #8]
 800b446:	461a      	mov	r2, r3
 800b448:	4b76      	ldr	r3, [pc, #472]	; (800b624 <mix_sub_columns+0x288>)
 800b44a:	5c9a      	ldrb	r2, [r3, r2]
 800b44c:	7b7b      	ldrb	r3, [r7, #13]
 800b44e:	4619      	mov	r1, r3
 800b450:	4b75      	ldr	r3, [pc, #468]	; (800b628 <mix_sub_columns+0x28c>)
 800b452:	5c5b      	ldrb	r3, [r3, r1]
 800b454:	4053      	eors	r3, r2
 800b456:	b2da      	uxtb	r2, r3
 800b458:	7cbb      	ldrb	r3, [r7, #18]
 800b45a:	4619      	mov	r1, r3
 800b45c:	4b72      	ldr	r3, [pc, #456]	; (800b628 <mix_sub_columns+0x28c>)
 800b45e:	5c5b      	ldrb	r3, [r3, r1]
 800b460:	4053      	eors	r3, r2
 800b462:	b2d9      	uxtb	r1, r3
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	461a      	mov	r2, r3
 800b468:	4b6d      	ldr	r3, [pc, #436]	; (800b620 <mix_sub_columns+0x284>)
 800b46a:	5c9a      	ldrb	r2, [r3, r2]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	3303      	adds	r3, #3
 800b470:	404a      	eors	r2, r1
 800b472:	b2d2      	uxtb	r2, r2
 800b474:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b476:	7b3b      	ldrb	r3, [r7, #12]
 800b478:	461a      	mov	r2, r3
 800b47a:	4b69      	ldr	r3, [pc, #420]	; (800b620 <mix_sub_columns+0x284>)
 800b47c:	5c9a      	ldrb	r2, [r3, r2]
 800b47e:	7c7b      	ldrb	r3, [r7, #17]
 800b480:	4619      	mov	r1, r3
 800b482:	4b68      	ldr	r3, [pc, #416]	; (800b624 <mix_sub_columns+0x288>)
 800b484:	5c5b      	ldrb	r3, [r3, r1]
 800b486:	4053      	eors	r3, r2
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	7dbb      	ldrb	r3, [r7, #22]
 800b48c:	4619      	mov	r1, r3
 800b48e:	4b66      	ldr	r3, [pc, #408]	; (800b628 <mix_sub_columns+0x28c>)
 800b490:	5c5b      	ldrb	r3, [r3, r1]
 800b492:	4053      	eors	r3, r2
 800b494:	b2d9      	uxtb	r1, r3
 800b496:	7afb      	ldrb	r3, [r7, #11]
 800b498:	461a      	mov	r2, r3
 800b49a:	4b63      	ldr	r3, [pc, #396]	; (800b628 <mix_sub_columns+0x28c>)
 800b49c:	5c9a      	ldrb	r2, [r3, r2]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	404a      	eors	r2, r1
 800b4a4:	b2d2      	uxtb	r2, r2
 800b4a6:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b4a8:	7b3b      	ldrb	r3, [r7, #12]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	4b5e      	ldr	r3, [pc, #376]	; (800b628 <mix_sub_columns+0x28c>)
 800b4ae:	5c9a      	ldrb	r2, [r3, r2]
 800b4b0:	7c7b      	ldrb	r3, [r7, #17]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	4b5a      	ldr	r3, [pc, #360]	; (800b620 <mix_sub_columns+0x284>)
 800b4b6:	5c5b      	ldrb	r3, [r3, r1]
 800b4b8:	4053      	eors	r3, r2
 800b4ba:	b2da      	uxtb	r2, r3
 800b4bc:	7dbb      	ldrb	r3, [r7, #22]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	4b58      	ldr	r3, [pc, #352]	; (800b624 <mix_sub_columns+0x288>)
 800b4c2:	5c5b      	ldrb	r3, [r3, r1]
 800b4c4:	4053      	eors	r3, r2
 800b4c6:	b2d9      	uxtb	r1, r3
 800b4c8:	7afb      	ldrb	r3, [r7, #11]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	4b56      	ldr	r3, [pc, #344]	; (800b628 <mix_sub_columns+0x28c>)
 800b4ce:	5c9a      	ldrb	r2, [r3, r2]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3305      	adds	r3, #5
 800b4d4:	404a      	eors	r2, r1
 800b4d6:	b2d2      	uxtb	r2, r2
 800b4d8:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b4da:	7b3b      	ldrb	r3, [r7, #12]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4b52      	ldr	r3, [pc, #328]	; (800b628 <mix_sub_columns+0x28c>)
 800b4e0:	5c9a      	ldrb	r2, [r3, r2]
 800b4e2:	7c7b      	ldrb	r3, [r7, #17]
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4b50      	ldr	r3, [pc, #320]	; (800b628 <mix_sub_columns+0x28c>)
 800b4e8:	5c5b      	ldrb	r3, [r3, r1]
 800b4ea:	4053      	eors	r3, r2
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	7dbb      	ldrb	r3, [r7, #22]
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	4b4b      	ldr	r3, [pc, #300]	; (800b620 <mix_sub_columns+0x284>)
 800b4f4:	5c5b      	ldrb	r3, [r3, r1]
 800b4f6:	4053      	eors	r3, r2
 800b4f8:	b2d9      	uxtb	r1, r3
 800b4fa:	7afb      	ldrb	r3, [r7, #11]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	4b49      	ldr	r3, [pc, #292]	; (800b624 <mix_sub_columns+0x288>)
 800b500:	5c9a      	ldrb	r2, [r3, r2]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	3306      	adds	r3, #6
 800b506:	404a      	eors	r2, r1
 800b508:	b2d2      	uxtb	r2, r2
 800b50a:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b50c:	7b3b      	ldrb	r3, [r7, #12]
 800b50e:	461a      	mov	r2, r3
 800b510:	4b44      	ldr	r3, [pc, #272]	; (800b624 <mix_sub_columns+0x288>)
 800b512:	5c9a      	ldrb	r2, [r3, r2]
 800b514:	7c7b      	ldrb	r3, [r7, #17]
 800b516:	4619      	mov	r1, r3
 800b518:	4b43      	ldr	r3, [pc, #268]	; (800b628 <mix_sub_columns+0x28c>)
 800b51a:	5c5b      	ldrb	r3, [r3, r1]
 800b51c:	4053      	eors	r3, r2
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	7dbb      	ldrb	r3, [r7, #22]
 800b522:	4619      	mov	r1, r3
 800b524:	4b40      	ldr	r3, [pc, #256]	; (800b628 <mix_sub_columns+0x28c>)
 800b526:	5c5b      	ldrb	r3, [r3, r1]
 800b528:	4053      	eors	r3, r2
 800b52a:	b2d9      	uxtb	r1, r3
 800b52c:	7afb      	ldrb	r3, [r7, #11]
 800b52e:	461a      	mov	r2, r3
 800b530:	4b3b      	ldr	r3, [pc, #236]	; (800b620 <mix_sub_columns+0x284>)
 800b532:	5c9a      	ldrb	r2, [r3, r2]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3307      	adds	r3, #7
 800b538:	404a      	eors	r2, r1
 800b53a:	b2d2      	uxtb	r2, r2
 800b53c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b53e:	7c3b      	ldrb	r3, [r7, #16]
 800b540:	461a      	mov	r2, r3
 800b542:	4b37      	ldr	r3, [pc, #220]	; (800b620 <mix_sub_columns+0x284>)
 800b544:	5c9a      	ldrb	r2, [r3, r2]
 800b546:	7d7b      	ldrb	r3, [r7, #21]
 800b548:	4619      	mov	r1, r3
 800b54a:	4b36      	ldr	r3, [pc, #216]	; (800b624 <mix_sub_columns+0x288>)
 800b54c:	5c5b      	ldrb	r3, [r3, r1]
 800b54e:	4053      	eors	r3, r2
 800b550:	b2da      	uxtb	r2, r3
 800b552:	7abb      	ldrb	r3, [r7, #10]
 800b554:	4619      	mov	r1, r3
 800b556:	4b34      	ldr	r3, [pc, #208]	; (800b628 <mix_sub_columns+0x28c>)
 800b558:	5c5b      	ldrb	r3, [r3, r1]
 800b55a:	4053      	eors	r3, r2
 800b55c:	b2d9      	uxtb	r1, r3
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	461a      	mov	r2, r3
 800b562:	4b31      	ldr	r3, [pc, #196]	; (800b628 <mix_sub_columns+0x28c>)
 800b564:	5c9a      	ldrb	r2, [r3, r2]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	3308      	adds	r3, #8
 800b56a:	404a      	eors	r2, r1
 800b56c:	b2d2      	uxtb	r2, r2
 800b56e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b570:	7c3b      	ldrb	r3, [r7, #16]
 800b572:	461a      	mov	r2, r3
 800b574:	4b2c      	ldr	r3, [pc, #176]	; (800b628 <mix_sub_columns+0x28c>)
 800b576:	5c9a      	ldrb	r2, [r3, r2]
 800b578:	7d7b      	ldrb	r3, [r7, #21]
 800b57a:	4619      	mov	r1, r3
 800b57c:	4b28      	ldr	r3, [pc, #160]	; (800b620 <mix_sub_columns+0x284>)
 800b57e:	5c5b      	ldrb	r3, [r3, r1]
 800b580:	4053      	eors	r3, r2
 800b582:	b2da      	uxtb	r2, r3
 800b584:	7abb      	ldrb	r3, [r7, #10]
 800b586:	4619      	mov	r1, r3
 800b588:	4b26      	ldr	r3, [pc, #152]	; (800b624 <mix_sub_columns+0x288>)
 800b58a:	5c5b      	ldrb	r3, [r3, r1]
 800b58c:	4053      	eors	r3, r2
 800b58e:	b2d9      	uxtb	r1, r3
 800b590:	7bfb      	ldrb	r3, [r7, #15]
 800b592:	461a      	mov	r2, r3
 800b594:	4b24      	ldr	r3, [pc, #144]	; (800b628 <mix_sub_columns+0x28c>)
 800b596:	5c9a      	ldrb	r2, [r3, r2]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3309      	adds	r3, #9
 800b59c:	404a      	eors	r2, r1
 800b59e:	b2d2      	uxtb	r2, r2
 800b5a0:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b5a2:	7c3b      	ldrb	r3, [r7, #16]
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	4b20      	ldr	r3, [pc, #128]	; (800b628 <mix_sub_columns+0x28c>)
 800b5a8:	5c9a      	ldrb	r2, [r3, r2]
 800b5aa:	7d7b      	ldrb	r3, [r7, #21]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	4b1e      	ldr	r3, [pc, #120]	; (800b628 <mix_sub_columns+0x28c>)
 800b5b0:	5c5b      	ldrb	r3, [r3, r1]
 800b5b2:	4053      	eors	r3, r2
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	7abb      	ldrb	r3, [r7, #10]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	4b19      	ldr	r3, [pc, #100]	; (800b620 <mix_sub_columns+0x284>)
 800b5bc:	5c5b      	ldrb	r3, [r3, r1]
 800b5be:	4053      	eors	r3, r2
 800b5c0:	b2d9      	uxtb	r1, r3
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	4b17      	ldr	r3, [pc, #92]	; (800b624 <mix_sub_columns+0x288>)
 800b5c8:	5c9a      	ldrb	r2, [r3, r2]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	330a      	adds	r3, #10
 800b5ce:	404a      	eors	r2, r1
 800b5d0:	b2d2      	uxtb	r2, r2
 800b5d2:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b5d4:	7c3b      	ldrb	r3, [r7, #16]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	4b12      	ldr	r3, [pc, #72]	; (800b624 <mix_sub_columns+0x288>)
 800b5da:	5c9a      	ldrb	r2, [r3, r2]
 800b5dc:	7d7b      	ldrb	r3, [r7, #21]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	4b11      	ldr	r3, [pc, #68]	; (800b628 <mix_sub_columns+0x28c>)
 800b5e2:	5c5b      	ldrb	r3, [r3, r1]
 800b5e4:	4053      	eors	r3, r2
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	7abb      	ldrb	r3, [r7, #10]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4b0e      	ldr	r3, [pc, #56]	; (800b628 <mix_sub_columns+0x28c>)
 800b5ee:	5c5b      	ldrb	r3, [r3, r1]
 800b5f0:	4053      	eors	r3, r2
 800b5f2:	b2d9      	uxtb	r1, r3
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	4b09      	ldr	r3, [pc, #36]	; (800b620 <mix_sub_columns+0x284>)
 800b5fa:	5c9a      	ldrb	r2, [r3, r2]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	330b      	adds	r3, #11
 800b600:	404a      	eors	r2, r1
 800b602:	b2d2      	uxtb	r2, r2
 800b604:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b606:	7d3b      	ldrb	r3, [r7, #20]
 800b608:	461a      	mov	r2, r3
 800b60a:	4b05      	ldr	r3, [pc, #20]	; (800b620 <mix_sub_columns+0x284>)
 800b60c:	5c9a      	ldrb	r2, [r3, r2]
 800b60e:	7a7b      	ldrb	r3, [r7, #9]
 800b610:	4619      	mov	r1, r3
 800b612:	4b04      	ldr	r3, [pc, #16]	; (800b624 <mix_sub_columns+0x288>)
 800b614:	5c5b      	ldrb	r3, [r3, r1]
 800b616:	4053      	eors	r3, r2
 800b618:	b2da      	uxtb	r2, r3
 800b61a:	7bbb      	ldrb	r3, [r7, #14]
 800b61c:	4619      	mov	r1, r3
 800b61e:	e005      	b.n	800b62c <mix_sub_columns+0x290>
 800b620:	0801b7e0 	.word	0x0801b7e0
 800b624:	0801b8e0 	.word	0x0801b8e0
 800b628:	0801b6e0 	.word	0x0801b6e0
 800b62c:	4b2d      	ldr	r3, [pc, #180]	; (800b6e4 <mix_sub_columns+0x348>)
 800b62e:	5c5b      	ldrb	r3, [r3, r1]
 800b630:	4053      	eors	r3, r2
 800b632:	b2d9      	uxtb	r1, r3
 800b634:	7cfb      	ldrb	r3, [r7, #19]
 800b636:	461a      	mov	r2, r3
 800b638:	4b2a      	ldr	r3, [pc, #168]	; (800b6e4 <mix_sub_columns+0x348>)
 800b63a:	5c9a      	ldrb	r2, [r3, r2]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	330c      	adds	r3, #12
 800b640:	404a      	eors	r2, r1
 800b642:	b2d2      	uxtb	r2, r2
 800b644:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b646:	7d3b      	ldrb	r3, [r7, #20]
 800b648:	461a      	mov	r2, r3
 800b64a:	4b26      	ldr	r3, [pc, #152]	; (800b6e4 <mix_sub_columns+0x348>)
 800b64c:	5c9a      	ldrb	r2, [r3, r2]
 800b64e:	7a7b      	ldrb	r3, [r7, #9]
 800b650:	4619      	mov	r1, r3
 800b652:	4b25      	ldr	r3, [pc, #148]	; (800b6e8 <mix_sub_columns+0x34c>)
 800b654:	5c5b      	ldrb	r3, [r3, r1]
 800b656:	4053      	eors	r3, r2
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
 800b65c:	4619      	mov	r1, r3
 800b65e:	4b23      	ldr	r3, [pc, #140]	; (800b6ec <mix_sub_columns+0x350>)
 800b660:	5c5b      	ldrb	r3, [r3, r1]
 800b662:	4053      	eors	r3, r2
 800b664:	b2d9      	uxtb	r1, r3
 800b666:	7cfb      	ldrb	r3, [r7, #19]
 800b668:	461a      	mov	r2, r3
 800b66a:	4b1e      	ldr	r3, [pc, #120]	; (800b6e4 <mix_sub_columns+0x348>)
 800b66c:	5c9a      	ldrb	r2, [r3, r2]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	330d      	adds	r3, #13
 800b672:	404a      	eors	r2, r1
 800b674:	b2d2      	uxtb	r2, r2
 800b676:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b678:	7d3b      	ldrb	r3, [r7, #20]
 800b67a:	461a      	mov	r2, r3
 800b67c:	4b19      	ldr	r3, [pc, #100]	; (800b6e4 <mix_sub_columns+0x348>)
 800b67e:	5c9a      	ldrb	r2, [r3, r2]
 800b680:	7a7b      	ldrb	r3, [r7, #9]
 800b682:	4619      	mov	r1, r3
 800b684:	4b17      	ldr	r3, [pc, #92]	; (800b6e4 <mix_sub_columns+0x348>)
 800b686:	5c5b      	ldrb	r3, [r3, r1]
 800b688:	4053      	eors	r3, r2
 800b68a:	b2da      	uxtb	r2, r3
 800b68c:	7bbb      	ldrb	r3, [r7, #14]
 800b68e:	4619      	mov	r1, r3
 800b690:	4b15      	ldr	r3, [pc, #84]	; (800b6e8 <mix_sub_columns+0x34c>)
 800b692:	5c5b      	ldrb	r3, [r3, r1]
 800b694:	4053      	eors	r3, r2
 800b696:	b2d9      	uxtb	r1, r3
 800b698:	7cfb      	ldrb	r3, [r7, #19]
 800b69a:	461a      	mov	r2, r3
 800b69c:	4b13      	ldr	r3, [pc, #76]	; (800b6ec <mix_sub_columns+0x350>)
 800b69e:	5c9a      	ldrb	r2, [r3, r2]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	330e      	adds	r3, #14
 800b6a4:	404a      	eors	r2, r1
 800b6a6:	b2d2      	uxtb	r2, r2
 800b6a8:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b6aa:	7d3b      	ldrb	r3, [r7, #20]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	4b0f      	ldr	r3, [pc, #60]	; (800b6ec <mix_sub_columns+0x350>)
 800b6b0:	5c9a      	ldrb	r2, [r3, r2]
 800b6b2:	7a7b      	ldrb	r3, [r7, #9]
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	4b0b      	ldr	r3, [pc, #44]	; (800b6e4 <mix_sub_columns+0x348>)
 800b6b8:	5c5b      	ldrb	r3, [r3, r1]
 800b6ba:	4053      	eors	r3, r2
 800b6bc:	b2da      	uxtb	r2, r3
 800b6be:	7bbb      	ldrb	r3, [r7, #14]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	4b08      	ldr	r3, [pc, #32]	; (800b6e4 <mix_sub_columns+0x348>)
 800b6c4:	5c5b      	ldrb	r3, [r3, r1]
 800b6c6:	4053      	eors	r3, r2
 800b6c8:	b2d9      	uxtb	r1, r3
 800b6ca:	7cfb      	ldrb	r3, [r7, #19]
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	4b06      	ldr	r3, [pc, #24]	; (800b6e8 <mix_sub_columns+0x34c>)
 800b6d0:	5c9a      	ldrb	r2, [r3, r2]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	330f      	adds	r3, #15
 800b6d6:	404a      	eors	r2, r1
 800b6d8:	b2d2      	uxtb	r2, r2
 800b6da:	701a      	strb	r2, [r3, #0]
  }
 800b6dc:	bf00      	nop
 800b6de:	3718      	adds	r7, #24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	0801b6e0 	.word	0x0801b6e0
 800b6e8:	0801b7e0 	.word	0x0801b7e0
 800b6ec:	0801b8e0 	.word	0x0801b8e0

0800b6f0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	607a      	str	r2, [r7, #4]
 800b6fc:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b6fe:	7afb      	ldrb	r3, [r7, #11]
 800b700:	3b10      	subs	r3, #16
 800b702:	2b10      	cmp	r3, #16
 800b704:	bf8c      	ite	hi
 800b706:	2201      	movhi	r2, #1
 800b708:	2200      	movls	r2, #0
 800b70a:	b2d2      	uxtb	r2, r2
 800b70c:	2a00      	cmp	r2, #0
 800b70e:	d10d      	bne.n	800b72c <lorawan_aes_set_key+0x3c>
 800b710:	2201      	movs	r2, #1
 800b712:	fa02 f303 	lsl.w	r3, r2, r3
 800b716:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b71a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	bf14      	ite	ne
 800b722:	2301      	movne	r3, #1
 800b724:	2300      	moveq	r3, #0
 800b726:	b2db      	uxtb	r3, r3
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d105      	bne.n	800b738 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b734:	23ff      	movs	r3, #255	; 0xff
 800b736:	e0b2      	b.n	800b89e <lorawan_aes_set_key+0x1ae>
        break;
 800b738:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	7afa      	ldrb	r2, [r7, #11]
 800b73e:	68f9      	ldr	r1, [r7, #12]
 800b740:	4618      	mov	r0, r3
 800b742:	f7ff fbfa 	bl	800af3a <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b746:	7afb      	ldrb	r3, [r7, #11]
 800b748:	331c      	adds	r3, #28
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b750:	7c7b      	ldrb	r3, [r7, #17]
 800b752:	091b      	lsrs	r3, r3, #4
 800b754:	b2db      	uxtb	r3, r3
 800b756:	3b01      	subs	r3, #1
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b760:	7afb      	ldrb	r3, [r7, #11]
 800b762:	75fb      	strb	r3, [r7, #23]
 800b764:	2301      	movs	r3, #1
 800b766:	75bb      	strb	r3, [r7, #22]
 800b768:	e093      	b.n	800b892 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b76a:	7dfb      	ldrb	r3, [r7, #23]
 800b76c:	3b04      	subs	r3, #4
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	5cd3      	ldrb	r3, [r2, r3]
 800b772:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b774:	7dfb      	ldrb	r3, [r7, #23]
 800b776:	3b03      	subs	r3, #3
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	5cd3      	ldrb	r3, [r2, r3]
 800b77c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	3b02      	subs	r3, #2
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	5cd3      	ldrb	r3, [r2, r3]
 800b786:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b788:	7dfb      	ldrb	r3, [r7, #23]
 800b78a:	3b01      	subs	r3, #1
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	5cd3      	ldrb	r3, [r2, r3]
 800b790:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b792:	7dfb      	ldrb	r3, [r7, #23]
 800b794:	7afa      	ldrb	r2, [r7, #11]
 800b796:	fbb3 f1f2 	udiv	r1, r3, r2
 800b79a:	fb02 f201 	mul.w	r2, r2, r1
 800b79e:	1a9b      	subs	r3, r3, r2
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d127      	bne.n	800b7f6 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800b7a6:	7d7b      	ldrb	r3, [r7, #21]
 800b7a8:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b7aa:	7d3b      	ldrb	r3, [r7, #20]
 800b7ac:	4a3e      	ldr	r2, [pc, #248]	; (800b8a8 <lorawan_aes_set_key+0x1b8>)
 800b7ae:	5cd2      	ldrb	r2, [r2, r3]
 800b7b0:	7dbb      	ldrb	r3, [r7, #22]
 800b7b2:	4053      	eors	r3, r2
 800b7b4:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b7b6:	7cfb      	ldrb	r3, [r7, #19]
 800b7b8:	4a3b      	ldr	r2, [pc, #236]	; (800b8a8 <lorawan_aes_set_key+0x1b8>)
 800b7ba:	5cd3      	ldrb	r3, [r2, r3]
 800b7bc:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b7be:	7cbb      	ldrb	r3, [r7, #18]
 800b7c0:	4a39      	ldr	r2, [pc, #228]	; (800b8a8 <lorawan_aes_set_key+0x1b8>)
 800b7c2:	5cd3      	ldrb	r3, [r2, r3]
 800b7c4:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b7c6:	7c3b      	ldrb	r3, [r7, #16]
 800b7c8:	4a37      	ldr	r2, [pc, #220]	; (800b8a8 <lorawan_aes_set_key+0x1b8>)
 800b7ca:	5cd3      	ldrb	r3, [r2, r3]
 800b7cc:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b7ce:	7dbb      	ldrb	r3, [r7, #22]
 800b7d0:	005b      	lsls	r3, r3, #1
 800b7d2:	b25a      	sxtb	r2, r3
 800b7d4:	7dbb      	ldrb	r3, [r7, #22]
 800b7d6:	09db      	lsrs	r3, r3, #7
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	4619      	mov	r1, r3
 800b7dc:	0049      	lsls	r1, r1, #1
 800b7de:	440b      	add	r3, r1
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	00c8      	lsls	r0, r1, #3
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	440b      	add	r3, r1
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	b25b      	sxtb	r3, r3
 800b7ee:	4053      	eors	r3, r2
 800b7f0:	b25b      	sxtb	r3, r3
 800b7f2:	75bb      	strb	r3, [r7, #22]
 800b7f4:	e01c      	b.n	800b830 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b7f6:	7afb      	ldrb	r3, [r7, #11]
 800b7f8:	2b18      	cmp	r3, #24
 800b7fa:	d919      	bls.n	800b830 <lorawan_aes_set_key+0x140>
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	7afa      	ldrb	r2, [r7, #11]
 800b800:	fbb3 f1f2 	udiv	r1, r3, r2
 800b804:	fb02 f201 	mul.w	r2, r2, r1
 800b808:	1a9b      	subs	r3, r3, r2
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b10      	cmp	r3, #16
 800b80e:	d10f      	bne.n	800b830 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b810:	7d7b      	ldrb	r3, [r7, #21]
 800b812:	4a25      	ldr	r2, [pc, #148]	; (800b8a8 <lorawan_aes_set_key+0x1b8>)
 800b814:	5cd3      	ldrb	r3, [r2, r3]
 800b816:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b818:	7d3b      	ldrb	r3, [r7, #20]
 800b81a:	4a23      	ldr	r2, [pc, #140]	; (800b8a8 <lorawan_aes_set_key+0x1b8>)
 800b81c:	5cd3      	ldrb	r3, [r2, r3]
 800b81e:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b820:	7cfb      	ldrb	r3, [r7, #19]
 800b822:	4a21      	ldr	r2, [pc, #132]	; (800b8a8 <lorawan_aes_set_key+0x1b8>)
 800b824:	5cd3      	ldrb	r3, [r2, r3]
 800b826:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b828:	7cbb      	ldrb	r3, [r7, #18]
 800b82a:	4a1f      	ldr	r2, [pc, #124]	; (800b8a8 <lorawan_aes_set_key+0x1b8>)
 800b82c:	5cd3      	ldrb	r3, [r2, r3]
 800b82e:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b830:	7dfa      	ldrb	r2, [r7, #23]
 800b832:	7afb      	ldrb	r3, [r7, #11]
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b838:	7c3b      	ldrb	r3, [r7, #16]
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	5cd1      	ldrb	r1, [r2, r3]
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
 800b840:	7d7a      	ldrb	r2, [r7, #21]
 800b842:	404a      	eors	r2, r1
 800b844:	b2d1      	uxtb	r1, r2
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b84a:	7c3b      	ldrb	r3, [r7, #16]
 800b84c:	3301      	adds	r3, #1
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	5cd1      	ldrb	r1, [r2, r3]
 800b852:	7dfb      	ldrb	r3, [r7, #23]
 800b854:	3301      	adds	r3, #1
 800b856:	7d3a      	ldrb	r2, [r7, #20]
 800b858:	404a      	eors	r2, r1
 800b85a:	b2d1      	uxtb	r1, r2
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b860:	7c3b      	ldrb	r3, [r7, #16]
 800b862:	3302      	adds	r3, #2
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	5cd1      	ldrb	r1, [r2, r3]
 800b868:	7dfb      	ldrb	r3, [r7, #23]
 800b86a:	3302      	adds	r3, #2
 800b86c:	7cfa      	ldrb	r2, [r7, #19]
 800b86e:	404a      	eors	r2, r1
 800b870:	b2d1      	uxtb	r1, r2
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b876:	7c3b      	ldrb	r3, [r7, #16]
 800b878:	3303      	adds	r3, #3
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	5cd1      	ldrb	r1, [r2, r3]
 800b87e:	7dfb      	ldrb	r3, [r7, #23]
 800b880:	3303      	adds	r3, #3
 800b882:	7cba      	ldrb	r2, [r7, #18]
 800b884:	404a      	eors	r2, r1
 800b886:	b2d1      	uxtb	r1, r2
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b88c:	7dfb      	ldrb	r3, [r7, #23]
 800b88e:	3304      	adds	r3, #4
 800b890:	75fb      	strb	r3, [r7, #23]
 800b892:	7dfa      	ldrb	r2, [r7, #23]
 800b894:	7c7b      	ldrb	r3, [r7, #17]
 800b896:	429a      	cmp	r2, r3
 800b898:	f4ff af67 	bcc.w	800b76a <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	0801b6e0 	.word	0x0801b6e0

0800b8ac <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08a      	sub	sp, #40	; 0x28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d038      	beq.n	800b934 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	f107 0314 	add.w	r3, r7, #20
 800b8c8:	68f9      	ldr	r1, [r7, #12]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7ff fc07 	bl	800b0de <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8d6:	e014      	b.n	800b902 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b8d8:	f107 0314 	add.w	r3, r7, #20
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7ff fd5d 	bl	800b39c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b8e8:	0112      	lsls	r2, r2, #4
 800b8ea:	441a      	add	r2, r3
 800b8ec:	f107 0314 	add.w	r3, r7, #20
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff fcab 	bl	800b24e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b908:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d3e3      	bcc.n	800b8d8 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b910:	f107 0314 	add.w	r3, r7, #20
 800b914:	4618      	mov	r0, r3
 800b916:	f7ff fca7 	bl	800b268 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b920:	0112      	lsls	r2, r2, #4
 800b922:	441a      	add	r2, r3
 800b924:	f107 0314 	add.w	r3, r7, #20
 800b928:	4619      	mov	r1, r3
 800b92a:	68b8      	ldr	r0, [r7, #8]
 800b92c:	f7ff fbd7 	bl	800b0de <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b930:	2300      	movs	r3, #0
 800b932:	e000      	b.n	800b936 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b934:	23ff      	movs	r3, #255	; 0xff
}
 800b936:	4618      	mov	r0, r3
 800b938:	3728      	adds	r7, #40	; 0x28
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
	...

0800b940 <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800b940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b942:	b09d      	sub	sp, #116	; 0x74
 800b944:	af10      	add	r7, sp, #64	; 0x40
 800b946:	4603      	mov	r3, r0
 800b948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b94c:	2306      	movs	r3, #6
 800b94e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b952:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b95a:	4611      	mov	r1, r2
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 fa05 	bl	800bd6c <SecureElementGetKeyByID>
 800b962:	4603      	mov	r3, r0
 800b964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f040 80b0 	bne.w	800bad2 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b976:	2b00      	cmp	r3, #0
 800b978:	d106      	bne.n	800b988 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b97a:	4b58      	ldr	r3, [pc, #352]	; (800badc <PrintKey+0x19c>)
 800b97c:	2200      	movs	r2, #0
 800b97e:	2100      	movs	r1, #0
 800b980:	2002      	movs	r0, #2
 800b982:	f00e fe73 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
 800b986:	e056      	b.n	800ba36 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d106      	bne.n	800b99e <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b990:	4b53      	ldr	r3, [pc, #332]	; (800bae0 <PrintKey+0x1a0>)
 800b992:	2200      	movs	r2, #0
 800b994:	2100      	movs	r1, #0
 800b996:	2002      	movs	r0, #2
 800b998:	f00e fe68 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
 800b99c:	e04b      	b.n	800ba36 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b99e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d106      	bne.n	800b9b4 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b9a6:	4b4f      	ldr	r3, [pc, #316]	; (800bae4 <PrintKey+0x1a4>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	2002      	movs	r0, #2
 800b9ae:	f00e fe5d 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
 800b9b2:	e040      	b.n	800ba36 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d106      	bne.n	800b9ca <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b9bc:	4b4a      	ldr	r3, [pc, #296]	; (800bae8 <PrintKey+0x1a8>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	2002      	movs	r0, #2
 800b9c4:	f00e fe52 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
 800b9c8:	e035      	b.n	800ba36 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b9ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9ce:	2b04      	cmp	r3, #4
 800b9d0:	d106      	bne.n	800b9e0 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b9d2:	4b46      	ldr	r3, [pc, #280]	; (800baec <PrintKey+0x1ac>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	2002      	movs	r0, #2
 800b9da:	f00e fe47 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
 800b9de:	e02a      	b.n	800ba36 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800b9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9e4:	2b7f      	cmp	r3, #127	; 0x7f
 800b9e6:	d106      	bne.n	800b9f6 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800b9e8:	4b41      	ldr	r3, [pc, #260]	; (800baf0 <PrintKey+0x1b0>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	2002      	movs	r0, #2
 800b9f0:	f00e fe3c 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
 800b9f4:	e01f      	b.n	800ba36 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800b9f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9fa:	2b80      	cmp	r3, #128	; 0x80
 800b9fc:	d106      	bne.n	800ba0c <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800b9fe:	4b3d      	ldr	r3, [pc, #244]	; (800baf4 <PrintKey+0x1b4>)
 800ba00:	2200      	movs	r2, #0
 800ba02:	2100      	movs	r1, #0
 800ba04:	2002      	movs	r0, #2
 800ba06:	f00e fe31 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
 800ba0a:	e014      	b.n	800ba36 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800ba0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba10:	2b81      	cmp	r3, #129	; 0x81
 800ba12:	d106      	bne.n	800ba22 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800ba14:	4b38      	ldr	r3, [pc, #224]	; (800baf8 <PrintKey+0x1b8>)
 800ba16:	2200      	movs	r2, #0
 800ba18:	2100      	movs	r1, #0
 800ba1a:	2002      	movs	r0, #2
 800ba1c:	f00e fe26 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
 800ba20:	e009      	b.n	800ba36 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800ba22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba26:	2b82      	cmp	r3, #130	; 0x82
 800ba28:	d105      	bne.n	800ba36 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800ba2a:	4b34      	ldr	r3, [pc, #208]	; (800bafc <PrintKey+0x1bc>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2100      	movs	r1, #0
 800ba30:	2002      	movs	r0, #2
 800ba32:	f00e fe1b 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	785b      	ldrb	r3, [r3, #1]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3e:	789b      	ldrb	r3, [r3, #2]
 800ba40:	461c      	mov	r4, r3
 800ba42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba44:	78db      	ldrb	r3, [r3, #3]
 800ba46:	461d      	mov	r5, r3
 800ba48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4a:	791b      	ldrb	r3, [r3, #4]
 800ba4c:	461e      	mov	r6, r3
 800ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba50:	795b      	ldrb	r3, [r3, #5]
 800ba52:	623b      	str	r3, [r7, #32]
 800ba54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba56:	799b      	ldrb	r3, [r3, #6]
 800ba58:	61fb      	str	r3, [r7, #28]
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	79db      	ldrb	r3, [r3, #7]
 800ba5e:	61bb      	str	r3, [r7, #24]
 800ba60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba62:	7a1b      	ldrb	r3, [r3, #8]
 800ba64:	617b      	str	r3, [r7, #20]
 800ba66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba68:	7a5b      	ldrb	r3, [r3, #9]
 800ba6a:	613b      	str	r3, [r7, #16]
 800ba6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6e:	7a9b      	ldrb	r3, [r3, #10]
 800ba70:	60fb      	str	r3, [r7, #12]
 800ba72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba74:	7adb      	ldrb	r3, [r3, #11]
 800ba76:	60bb      	str	r3, [r7, #8]
 800ba78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7a:	7b1b      	ldrb	r3, [r3, #12]
 800ba7c:	607b      	str	r3, [r7, #4]
 800ba7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba80:	7b5b      	ldrb	r3, [r3, #13]
 800ba82:	603b      	str	r3, [r7, #0]
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	7b9b      	ldrb	r3, [r3, #14]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8c:	7bdb      	ldrb	r3, [r3, #15]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba92:	7c1b      	ldrb	r3, [r3, #16]
 800ba94:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba96:	920e      	str	r2, [sp, #56]	; 0x38
 800ba98:	910d      	str	r1, [sp, #52]	; 0x34
 800ba9a:	683a      	ldr	r2, [r7, #0]
 800ba9c:	920c      	str	r2, [sp, #48]	; 0x30
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	920b      	str	r2, [sp, #44]	; 0x2c
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	920a      	str	r2, [sp, #40]	; 0x28
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	9209      	str	r2, [sp, #36]	; 0x24
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	9208      	str	r2, [sp, #32]
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	9207      	str	r2, [sp, #28]
 800bab2:	69ba      	ldr	r2, [r7, #24]
 800bab4:	9206      	str	r2, [sp, #24]
 800bab6:	69fa      	ldr	r2, [r7, #28]
 800bab8:	9205      	str	r2, [sp, #20]
 800baba:	6a3b      	ldr	r3, [r7, #32]
 800babc:	9304      	str	r3, [sp, #16]
 800babe:	9603      	str	r6, [sp, #12]
 800bac0:	9502      	str	r5, [sp, #8]
 800bac2:	9401      	str	r4, [sp, #4]
 800bac4:	9000      	str	r0, [sp, #0]
 800bac6:	4b0e      	ldr	r3, [pc, #56]	; (800bb00 <PrintKey+0x1c0>)
 800bac8:	2200      	movs	r2, #0
 800baca:	2100      	movs	r1, #0
 800bacc:	2002      	movs	r0, #2
 800bace:	f00e fdcd 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800bad2:	bf00      	nop
 800bad4:	3734      	adds	r7, #52	; 0x34
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bada:	bf00      	nop
 800badc:	0801b0f4 	.word	0x0801b0f4
 800bae0:	0801b10c 	.word	0x0801b10c
 800bae4:	0801b124 	.word	0x0801b124
 800bae8:	0801b13c 	.word	0x0801b13c
 800baec:	0801b154 	.word	0x0801b154
 800baf0:	0801b16c 	.word	0x0801b16c
 800baf4:	0801b184 	.word	0x0801b184
 800baf8:	0801b19c 	.word	0x0801b19c
 800bafc:	0801b1b4 	.word	0x0801b1b4
 800bb00:	0801b1cc 	.word	0x0801b1cc

0800bb04 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	6039      	str	r1, [r7, #0]
 800bb0e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bb10:	2300      	movs	r3, #0
 800bb12:	73fb      	strb	r3, [r7, #15]
 800bb14:	e01a      	b.n	800bb4c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bb16:	4b12      	ldr	r3, [pc, #72]	; (800bb60 <GetKeyByID+0x5c>)
 800bb18:	6819      	ldr	r1, [r3, #0]
 800bb1a:	7bfa      	ldrb	r2, [r7, #15]
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	011b      	lsls	r3, r3, #4
 800bb20:	4413      	add	r3, r2
 800bb22:	440b      	add	r3, r1
 800bb24:	3310      	adds	r3, #16
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	79fa      	ldrb	r2, [r7, #7]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d10b      	bne.n	800bb46 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bb2e:	4b0c      	ldr	r3, [pc, #48]	; (800bb60 <GetKeyByID+0x5c>)
 800bb30:	6819      	ldr	r1, [r3, #0]
 800bb32:	7bfa      	ldrb	r2, [r7, #15]
 800bb34:	4613      	mov	r3, r2
 800bb36:	011b      	lsls	r3, r3, #4
 800bb38:	4413      	add	r3, r2
 800bb3a:	3310      	adds	r3, #16
 800bb3c:	18ca      	adds	r2, r1, r3
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bb42:	2300      	movs	r3, #0
 800bb44:	e006      	b.n	800bb54 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	73fb      	strb	r3, [r7, #15]
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	2b09      	cmp	r3, #9
 800bb50:	d9e1      	bls.n	800bb16 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb52:	2303      	movs	r3, #3
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3714      	adds	r7, #20
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bc80      	pop	{r7}
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	200002d0 	.word	0x200002d0

0800bb64 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800bb64:	b590      	push	{r4, r7, lr}
 800bb66:	b0d1      	sub	sp, #324	; 0x144
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	f107 040c 	add.w	r4, r7, #12
 800bb6e:	6020      	str	r0, [r4, #0]
 800bb70:	f107 0008 	add.w	r0, r7, #8
 800bb74:	6001      	str	r1, [r0, #0]
 800bb76:	4619      	mov	r1, r3
 800bb78:	1dbb      	adds	r3, r7, #6
 800bb7a:	801a      	strh	r2, [r3, #0]
 800bb7c:	1d7b      	adds	r3, r7, #5
 800bb7e:	460a      	mov	r2, r1
 800bb80:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bb82:	f107 0308 	add.w	r3, r7, #8
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d003      	beq.n	800bb94 <ComputeCmac+0x30>
 800bb8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d101      	bne.n	800bb98 <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bb94:	2302      	movs	r3, #2
 800bb96:	e04e      	b.n	800bc36 <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800bb98:	f107 0314 	add.w	r3, r7, #20
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fe ff23 	bl	800a9e8 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800bba2:	f107 0210 	add.w	r2, r7, #16
 800bba6:	1d7b      	adds	r3, r7, #5
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	4611      	mov	r1, r2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7ff ffa9 	bl	800bb04 <GetKeyByID>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bbb8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d138      	bne.n	800bc32 <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bbc0:	f107 0310 	add.w	r3, r7, #16
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	1c5a      	adds	r2, r3, #1
 800bbc8:	f107 0314 	add.w	r3, r7, #20
 800bbcc:	4611      	mov	r1, r2
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fe ff23 	bl	800aa1a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bbd4:	f107 030c 	add.w	r3, r7, #12
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d007      	beq.n	800bbee <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bbde:	f107 030c 	add.w	r3, r7, #12
 800bbe2:	f107 0014 	add.w	r0, r7, #20
 800bbe6:	2210      	movs	r2, #16
 800bbe8:	6819      	ldr	r1, [r3, #0]
 800bbea:	f7fe ff25 	bl	800aa38 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bbee:	1dbb      	adds	r3, r7, #6
 800bbf0:	881a      	ldrh	r2, [r3, #0]
 800bbf2:	f107 0308 	add.w	r3, r7, #8
 800bbf6:	f107 0014 	add.w	r0, r7, #20
 800bbfa:	6819      	ldr	r1, [r3, #0]
 800bbfc:	f7fe ff1c 	bl	800aa38 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bc00:	f107 0214 	add.w	r2, r7, #20
 800bc04:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bc08:	4611      	mov	r1, r2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fe ffd6 	bl	800abbc <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bc10:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800bc14:	061a      	lsls	r2, r3, #24
 800bc16:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800bc1a:	041b      	lsls	r3, r3, #16
 800bc1c:	431a      	orrs	r2, r3
 800bc1e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800bc22:	021b      	lsls	r3, r3, #8
 800bc24:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bc26:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bc30:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bc32:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd90      	pop	{r4, r7, pc}

0800bc40 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bc40:	b5b0      	push	{r4, r5, r7, lr}
 800bc42:	b0b2      	sub	sp, #200	; 0xc8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800bc4a:	f107 0308 	add.w	r3, r7, #8
 800bc4e:	22c0      	movs	r2, #192	; 0xc0
 800bc50:	2100      	movs	r1, #0
 800bc52:	4618      	mov	r0, r3
 800bc54:	f00e ffa8 	bl	801aba8 <memset>
 800bc58:	4a3b      	ldr	r2, [pc, #236]	; (800bd48 <SecureElementInit+0x108>)
 800bc5a:	f107 0308 	add.w	r3, r7, #8
 800bc5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc62:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc66:	4a39      	ldr	r2, [pc, #228]	; (800bd4c <SecureElementInit+0x10c>)
 800bc68:	f107 0310 	add.w	r3, r7, #16
 800bc6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc70:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc74:	4b36      	ldr	r3, [pc, #216]	; (800bd50 <SecureElementInit+0x110>)
 800bc76:	f107 0419 	add.w	r4, r7, #25
 800bc7a:	461d      	mov	r5, r3
 800bc7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc7e:	6020      	str	r0, [r4, #0]
 800bc80:	6061      	str	r1, [r4, #4]
 800bc82:	60a2      	str	r2, [r4, #8]
 800bc84:	60e3      	str	r3, [r4, #12]
 800bc86:	2301      	movs	r3, #1
 800bc88:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800bc8c:	4b31      	ldr	r3, [pc, #196]	; (800bd54 <SecureElementInit+0x114>)
 800bc8e:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800bc92:	461d      	mov	r5, r3
 800bc94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc96:	6020      	str	r0, [r4, #0]
 800bc98:	6061      	str	r1, [r4, #4]
 800bc9a:	60a2      	str	r2, [r4, #8]
 800bc9c:	60e3      	str	r3, [r4, #12]
 800bc9e:	2302      	movs	r3, #2
 800bca0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800bca4:	4b2c      	ldr	r3, [pc, #176]	; (800bd58 <SecureElementInit+0x118>)
 800bca6:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800bcaa:	461d      	mov	r5, r3
 800bcac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcae:	6020      	str	r0, [r4, #0]
 800bcb0:	6061      	str	r1, [r4, #4]
 800bcb2:	60a2      	str	r2, [r4, #8]
 800bcb4:	60e3      	str	r3, [r4, #12]
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800bcbc:	4b27      	ldr	r3, [pc, #156]	; (800bd5c <SecureElementInit+0x11c>)
 800bcbe:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800bcc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bcc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bcc8:	2304      	movs	r3, #4
 800bcca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800bcce:	237f      	movs	r3, #127	; 0x7f
 800bcd0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800bcd4:	2380      	movs	r3, #128	; 0x80
 800bcd6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bcda:	2381      	movs	r3, #129	; 0x81
 800bcdc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800bce0:	2382      	movs	r3, #130	; 0x82
 800bce2:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800bce6:	2383      	movs	r3, #131	; 0x83
 800bce8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	e023      	b.n	800bd3e <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bcf6:	4a1a      	ldr	r2, [pc, #104]	; (800bd60 <SecureElementInit+0x120>)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bcfc:	4b18      	ldr	r3, [pc, #96]	; (800bd60 <SecureElementInit+0x120>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f107 0108 	add.w	r1, r7, #8
 800bd04:	22c0      	movs	r2, #192	; 0xc0
 800bd06:	4618      	mov	r0, r3
 800bd08:	f00a fb95 	bl	8016436 <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bd0c:	4b15      	ldr	r3, [pc, #84]	; (800bd64 <SecureElementInit+0x124>)
 800bd0e:	2200      	movs	r2, #0
 800bd10:	2100      	movs	r1, #0
 800bd12:	2002      	movs	r0, #2
 800bd14:	f00e fcaa 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bd18:	2000      	movs	r0, #0
 800bd1a:	f7ff fe11 	bl	800b940 <PrintKey>
    PrintKey(NWK_KEY);
 800bd1e:	2001      	movs	r0, #1
 800bd20:	f7ff fe0e 	bl	800b940 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bd24:	4b10      	ldr	r3, [pc, #64]	; (800bd68 <SecureElementInit+0x128>)
 800bd26:	2200      	movs	r2, #0
 800bd28:	2100      	movs	r1, #0
 800bd2a:	2002      	movs	r0, #2
 800bd2c:	f00e fc9e 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bd30:	2003      	movs	r0, #3
 800bd32:	f7ff fe05 	bl	800b940 <PrintKey>
    PrintKey(NWK_S_KEY);
 800bd36:	2002      	movs	r0, #2
 800bd38:	f7ff fe02 	bl	800b940 <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	37c8      	adds	r7, #200	; 0xc8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bdb0      	pop	{r4, r5, r7, pc}
 800bd46:	bf00      	nop
 800bd48:	0801b250 	.word	0x0801b250
 800bd4c:	0801b258 	.word	0x0801b258
 800bd50:	0801b260 	.word	0x0801b260
 800bd54:	0801b270 	.word	0x0801b270
 800bd58:	0801b280 	.word	0x0801b280
 800bd5c:	0801b290 	.word	0x0801b290
 800bd60:	200002d0 	.word	0x200002d0
 800bd64:	0801b220 	.word	0x0801b220
 800bd68:	0801b238 	.word	0x0801b238

0800bd6c <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	6039      	str	r1, [r7, #0]
 800bd76:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bd78:	2300      	movs	r3, #0
 800bd7a:	73fb      	strb	r3, [r7, #15]
 800bd7c:	e01a      	b.n	800bdb4 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bd7e:	4b12      	ldr	r3, [pc, #72]	; (800bdc8 <SecureElementGetKeyByID+0x5c>)
 800bd80:	6819      	ldr	r1, [r3, #0]
 800bd82:	7bfa      	ldrb	r2, [r7, #15]
 800bd84:	4613      	mov	r3, r2
 800bd86:	011b      	lsls	r3, r3, #4
 800bd88:	4413      	add	r3, r2
 800bd8a:	440b      	add	r3, r1
 800bd8c:	3310      	adds	r3, #16
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	79fa      	ldrb	r2, [r7, #7]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d10b      	bne.n	800bdae <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800bd96:	4b0c      	ldr	r3, [pc, #48]	; (800bdc8 <SecureElementGetKeyByID+0x5c>)
 800bd98:	6819      	ldr	r1, [r3, #0]
 800bd9a:	7bfa      	ldrb	r2, [r7, #15]
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	011b      	lsls	r3, r3, #4
 800bda0:	4413      	add	r3, r2
 800bda2:	3310      	adds	r3, #16
 800bda4:	18ca      	adds	r2, r1, r3
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	e006      	b.n	800bdbc <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bdae:	7bfb      	ldrb	r3, [r7, #15]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	73fb      	strb	r3, [r7, #15]
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
 800bdb6:	2b09      	cmp	r3, #9
 800bdb8:	d9e1      	bls.n	800bd7e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bdba:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bc80      	pop	{r7}
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	200002d0 	.word	0x200002d0

0800bdcc <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b088      	sub	sp, #32
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	6039      	str	r1, [r7, #0]
 800bdd6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d101      	bne.n	800bde2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bdde:	2302      	movs	r3, #2
 800bde0:	e04c      	b.n	800be7c <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bde2:	2300      	movs	r3, #0
 800bde4:	77fb      	strb	r3, [r7, #31]
 800bde6:	e045      	b.n	800be74 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bde8:	4b26      	ldr	r3, [pc, #152]	; (800be84 <SecureElementSetKey+0xb8>)
 800bdea:	6819      	ldr	r1, [r3, #0]
 800bdec:	7ffa      	ldrb	r2, [r7, #31]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	011b      	lsls	r3, r3, #4
 800bdf2:	4413      	add	r3, r2
 800bdf4:	440b      	add	r3, r1
 800bdf6:	3310      	adds	r3, #16
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	79fa      	ldrb	r2, [r7, #7]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d136      	bne.n	800be6e <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	2b80      	cmp	r3, #128	; 0x80
 800be04:	d123      	bne.n	800be4e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800be06:	2306      	movs	r3, #6
 800be08:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800be0a:	2300      	movs	r3, #0
 800be0c:	60fb      	str	r3, [r7, #12]
 800be0e:	f107 0310 	add.w	r3, r7, #16
 800be12:	2200      	movs	r2, #0
 800be14:	601a      	str	r2, [r3, #0]
 800be16:	605a      	str	r2, [r3, #4]
 800be18:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800be1a:	f107 030c 	add.w	r3, r7, #12
 800be1e:	227f      	movs	r2, #127	; 0x7f
 800be20:	2110      	movs	r1, #16
 800be22:	6838      	ldr	r0, [r7, #0]
 800be24:	f000 f87d 	bl	800bf22 <SecureElementAesEncrypt>
 800be28:	4603      	mov	r3, r0
 800be2a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800be2c:	4b15      	ldr	r3, [pc, #84]	; (800be84 <SecureElementSetKey+0xb8>)
 800be2e:	6819      	ldr	r1, [r3, #0]
 800be30:	7ffa      	ldrb	r2, [r7, #31]
 800be32:	4613      	mov	r3, r2
 800be34:	011b      	lsls	r3, r3, #4
 800be36:	4413      	add	r3, r2
 800be38:	3310      	adds	r3, #16
 800be3a:	440b      	add	r3, r1
 800be3c:	3301      	adds	r3, #1
 800be3e:	f107 010c 	add.w	r1, r7, #12
 800be42:	2210      	movs	r2, #16
 800be44:	4618      	mov	r0, r3
 800be46:	f00a faf6 	bl	8016436 <memcpy1>
                return retval;
 800be4a:	7fbb      	ldrb	r3, [r7, #30]
 800be4c:	e016      	b.n	800be7c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800be4e:	4b0d      	ldr	r3, [pc, #52]	; (800be84 <SecureElementSetKey+0xb8>)
 800be50:	6819      	ldr	r1, [r3, #0]
 800be52:	7ffa      	ldrb	r2, [r7, #31]
 800be54:	4613      	mov	r3, r2
 800be56:	011b      	lsls	r3, r3, #4
 800be58:	4413      	add	r3, r2
 800be5a:	3310      	adds	r3, #16
 800be5c:	440b      	add	r3, r1
 800be5e:	3301      	adds	r3, #1
 800be60:	2210      	movs	r2, #16
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	4618      	mov	r0, r3
 800be66:	f00a fae6 	bl	8016436 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800be6a:	2300      	movs	r3, #0
 800be6c:	e006      	b.n	800be7c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be6e:	7ffb      	ldrb	r3, [r7, #31]
 800be70:	3301      	adds	r3, #1
 800be72:	77fb      	strb	r3, [r7, #31]
 800be74:	7ffb      	ldrb	r3, [r7, #31]
 800be76:	2b09      	cmp	r3, #9
 800be78:	d9b6      	bls.n	800bde8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be7a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3720      	adds	r7, #32
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	200002d0 	.word	0x200002d0

0800be88 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af02      	add	r7, sp, #8
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	4611      	mov	r1, r2
 800be94:	461a      	mov	r2, r3
 800be96:	460b      	mov	r3, r1
 800be98:	80fb      	strh	r3, [r7, #6]
 800be9a:	4613      	mov	r3, r2
 800be9c:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800be9e:	797b      	ldrb	r3, [r7, #5]
 800bea0:	2b7e      	cmp	r3, #126	; 0x7e
 800bea2:	d901      	bls.n	800bea8 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bea4:	2303      	movs	r3, #3
 800bea6:	e009      	b.n	800bebc <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800bea8:	7979      	ldrb	r1, [r7, #5]
 800beaa:	88fa      	ldrh	r2, [r7, #6]
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	460b      	mov	r3, r1
 800beb2:	68b9      	ldr	r1, [r7, #8]
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f7ff fe55 	bl	800bb64 <ComputeCmac>
 800beba:	4603      	mov	r3, r0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b088      	sub	sp, #32
 800bec8:	af02      	add	r7, sp, #8
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	607a      	str	r2, [r7, #4]
 800bece:	461a      	mov	r2, r3
 800bed0:	460b      	mov	r3, r1
 800bed2:	817b      	strh	r3, [r7, #10]
 800bed4:	4613      	mov	r3, r2
 800bed6:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bede:	2302      	movs	r3, #2
 800bee0:	e01b      	b.n	800bf1a <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800bee2:	2306      	movs	r3, #6
 800bee4:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800beea:	7a79      	ldrb	r1, [r7, #9]
 800beec:	897a      	ldrh	r2, [r7, #10]
 800beee:	f107 0310 	add.w	r3, r7, #16
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	460b      	mov	r3, r1
 800bef6:	68f9      	ldr	r1, [r7, #12]
 800bef8:	2000      	movs	r0, #0
 800befa:	f7ff fe33 	bl	800bb64 <ComputeCmac>
 800befe:	4603      	mov	r3, r0
 800bf00:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bf02:	7dfb      	ldrb	r3, [r7, #23]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d001      	beq.n	800bf0c <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800bf08:	7dfb      	ldrb	r3, [r7, #23]
 800bf0a:	e006      	b.n	800bf1a <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d001      	beq.n	800bf18 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bf14:	2301      	movs	r3, #1
 800bf16:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bf18:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b0c2      	sub	sp, #264	; 0x108
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	60f8      	str	r0, [r7, #12]
 800bf2a:	4608      	mov	r0, r1
 800bf2c:	4611      	mov	r1, r2
 800bf2e:	1d3a      	adds	r2, r7, #4
 800bf30:	6013      	str	r3, [r2, #0]
 800bf32:	4603      	mov	r3, r0
 800bf34:	817b      	strh	r3, [r7, #10]
 800bf36:	460b      	mov	r3, r1
 800bf38:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d003      	beq.n	800bf48 <SecureElementAesEncrypt+0x26>
 800bf40:	1d3b      	adds	r3, r7, #4
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf48:	2302      	movs	r3, #2
 800bf4a:	e043      	b.n	800bfd4 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800bf4c:	897b      	ldrh	r3, [r7, #10]
 800bf4e:	f003 030f 	and.w	r3, r3, #15
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d001      	beq.n	800bf5c <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bf58:	2305      	movs	r3, #5
 800bf5a:	e03b      	b.n	800bfd4 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bf5c:	f107 0314 	add.w	r3, r7, #20
 800bf60:	22f0      	movs	r2, #240	; 0xf0
 800bf62:	2100      	movs	r1, #0
 800bf64:	4618      	mov	r0, r3
 800bf66:	f00a faa1 	bl	80164ac <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bf6a:	f107 0210 	add.w	r2, r7, #16
 800bf6e:	7a7b      	ldrb	r3, [r7, #9]
 800bf70:	4611      	mov	r1, r2
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7ff fdc6 	bl	800bb04 <GetKeyByID>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bf7e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d124      	bne.n	800bfd0 <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	f107 0214 	add.w	r2, r7, #20
 800bf8e:	2110      	movs	r1, #16
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7ff fbad 	bl	800b6f0 <lorawan_aes_set_key>

        uint8_t block = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800bf9c:	e015      	b.n	800bfca <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800bf9e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	18d0      	adds	r0, r2, r3
 800bfa6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bfaa:	1d3a      	adds	r2, r7, #4
 800bfac:	6812      	ldr	r2, [r2, #0]
 800bfae:	4413      	add	r3, r2
 800bfb0:	f107 0214 	add.w	r2, r7, #20
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	f7ff fc79 	bl	800b8ac <lorawan_aes_encrypt>
            block = block + 16;
 800bfba:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bfbe:	3310      	adds	r3, #16
 800bfc0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800bfc4:	897b      	ldrh	r3, [r7, #10]
 800bfc6:	3b10      	subs	r3, #16
 800bfc8:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800bfca:	897b      	ldrh	r3, [r7, #10]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1e6      	bne.n	800bf9e <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bfd0:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b088      	sub	sp, #32
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	70fb      	strb	r3, [r7, #3]
 800bfea:	4613      	mov	r3, r2
 800bfec:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d101      	bne.n	800bff8 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bff4:	2302      	movs	r3, #2
 800bff6:	e02e      	b.n	800c056 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800bff8:	2306      	movs	r3, #6
 800bffa:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800bffc:	78bb      	ldrb	r3, [r7, #2]
 800bffe:	2b7f      	cmp	r3, #127	; 0x7f
 800c000:	d104      	bne.n	800c00c <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c002:	78fb      	ldrb	r3, [r7, #3]
 800c004:	2b04      	cmp	r3, #4
 800c006:	d001      	beq.n	800c00c <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c008:	2303      	movs	r3, #3
 800c00a:	e024      	b.n	800c056 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c00c:	2300      	movs	r3, #0
 800c00e:	60fb      	str	r3, [r7, #12]
 800c010:	f107 0310 	add.w	r3, r7, #16
 800c014:	2200      	movs	r2, #0
 800c016:	601a      	str	r2, [r3, #0]
 800c018:	605a      	str	r2, [r3, #4]
 800c01a:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c01c:	f107 030c 	add.w	r3, r7, #12
 800c020:	78fa      	ldrb	r2, [r7, #3]
 800c022:	2110      	movs	r1, #16
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f7ff ff7c 	bl	800bf22 <SecureElementAesEncrypt>
 800c02a:	4603      	mov	r3, r0
 800c02c:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c02e:	7ffb      	ldrb	r3, [r7, #31]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c034:	7ffb      	ldrb	r3, [r7, #31]
 800c036:	e00e      	b.n	800c056 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c038:	f107 020c 	add.w	r2, r7, #12
 800c03c:	78bb      	ldrb	r3, [r7, #2]
 800c03e:	4611      	mov	r1, r2
 800c040:	4618      	mov	r0, r3
 800c042:	f7ff fec3 	bl	800bdcc <SecureElementSetKey>
 800c046:	4603      	mov	r3, r0
 800c048:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c04a:	7ffb      	ldrb	r3, [r7, #31]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d001      	beq.n	800c054 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c050:	7ffb      	ldrb	r3, [r7, #31]
 800c052:	e000      	b.n	800c056 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c054:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c056:	4618      	mov	r0, r3
 800c058:	3720      	adds	r7, #32
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b086      	sub	sp, #24
 800c062:	af00      	add	r7, sp, #0
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607b      	str	r3, [r7, #4]
 800c068:	4603      	mov	r3, r0
 800c06a:	73fb      	strb	r3, [r7, #15]
 800c06c:	4613      	mov	r3, r2
 800c06e:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d005      	beq.n	800c082 <SecureElementProcessJoinAccept+0x24>
 800c076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d002      	beq.n	800c082 <SecureElementProcessJoinAccept+0x24>
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d101      	bne.n	800c086 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c082:	2302      	movs	r3, #2
 800c084:	e064      	b.n	800c150 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c086:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c08a:	2b21      	cmp	r3, #33	; 0x21
 800c08c:	d901      	bls.n	800c092 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c08e:	2305      	movs	r3, #5
 800c090:	e05e      	b.n	800c150 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c092:	2301      	movs	r3, #1
 800c094:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c096:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	461a      	mov	r2, r3
 800c09e:	6879      	ldr	r1, [r7, #4]
 800c0a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0a2:	f00a f9c8 	bl	8016436 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	1c58      	adds	r0, r3, #1
 800c0aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	b299      	uxth	r1, r3
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	7dfa      	ldrb	r2, [r7, #23]
 800c0ba:	f7ff ff32 	bl	800bf22 <SecureElementAesEncrypt>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d001      	beq.n	800c0c8 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c0c4:	2307      	movs	r3, #7
 800c0c6:	e043      	b.n	800c150 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ca:	330b      	adds	r3, #11
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	09db      	lsrs	r3, r3, #7
 800c0d0:	b2da      	uxtb	r2, r3
 800c0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d4:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c0da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0de:	3b04      	subs	r3, #4
 800c0e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0e2:	4413      	add	r3, r2
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c0e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0ec:	3b03      	subs	r3, #3
 800c0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0f0:	4413      	add	r3, r2
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	021b      	lsls	r3, r3, #8
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c0fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c100:	3b02      	subs	r3, #2
 800c102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c104:	4413      	add	r3, r2
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	041b      	lsls	r3, r3, #16
 800c10a:	693a      	ldr	r2, [r7, #16]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c110:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c114:	3b01      	subs	r3, #1
 800c116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c118:	4413      	add	r3, r2
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	061b      	lsls	r3, r3, #24
 800c11e:	693a      	ldr	r2, [r7, #16]
 800c120:	4313      	orrs	r3, r2
 800c122:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10e      	bne.n	800c14a <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c12c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c130:	b29b      	uxth	r3, r3
 800c132:	3b04      	subs	r3, #4
 800c134:	b299      	uxth	r1, r3
 800c136:	2301      	movs	r3, #1
 800c138:	693a      	ldr	r2, [r7, #16]
 800c13a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c13c:	f7ff fec2 	bl	800bec4 <SecureElementVerifyAesCmac>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d003      	beq.n	800c14e <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c146:	2301      	movs	r3, #1
 800c148:	e002      	b.n	800c150 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c14a:	2304      	movs	r3, #4
 800c14c:	e000      	b.n	800c150 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	3718      	adds	r7, #24
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d101      	bne.n	800c16a <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c166:	2302      	movs	r3, #2
 800c168:	e006      	b.n	800c178 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c16a:	4b05      	ldr	r3, [pc, #20]	; (800c180 <SecureElementRandomNumber+0x28>)
 800c16c:	695b      	ldr	r3, [r3, #20]
 800c16e:	4798      	blx	r3
 800c170:	4602      	mov	r2, r0
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	0801ba28 	.word	0x0801ba28

0800c184 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d101      	bne.n	800c196 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c192:	2302      	movs	r3, #2
 800c194:	e007      	b.n	800c1a6 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c196:	4b06      	ldr	r3, [pc, #24]	; (800c1b0 <SecureElementSetDevEui+0x2c>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2208      	movs	r2, #8
 800c19c:	6879      	ldr	r1, [r7, #4]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f00a f949 	bl	8016436 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	200002d0 	.word	0x200002d0

0800c1b4 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c1b8:	4b02      	ldr	r3, [pc, #8]	; (800c1c4 <SecureElementGetDevEui+0x10>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bc80      	pop	{r7}
 800c1c2:	4770      	bx	lr
 800c1c4:	200002d0 	.word	0x200002d0

0800c1c8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d101      	bne.n	800c1da <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1d6:	2302      	movs	r3, #2
 800c1d8:	e008      	b.n	800c1ec <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c1da:	4b06      	ldr	r3, [pc, #24]	; (800c1f4 <SecureElementSetJoinEui+0x2c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	3308      	adds	r3, #8
 800c1e0:	2208      	movs	r2, #8
 800c1e2:	6879      	ldr	r1, [r7, #4]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f00a f926 	bl	8016436 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	200002d0 	.word	0x200002d0

0800c1f8 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c1fc:	4b03      	ldr	r3, [pc, #12]	; (800c20c <SecureElementGetJoinEui+0x14>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	3308      	adds	r3, #8
}
 800c202:	4618      	mov	r0, r3
 800c204:	46bd      	mov	sp, r7
 800c206:	bc80      	pop	{r7}
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	200002d0 	.word	0x200002d0

0800c210 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800c218:	4a1a      	ldr	r2, [pc, #104]	; (800c284 <LmHandlerInit+0x74>)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c21e:	4b1a      	ldr	r3, [pc, #104]	; (800c288 <LmHandlerInit+0x78>)
 800c220:	4a1a      	ldr	r2, [pc, #104]	; (800c28c <LmHandlerInit+0x7c>)
 800c222:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c224:	4b18      	ldr	r3, [pc, #96]	; (800c288 <LmHandlerInit+0x78>)
 800c226:	4a1a      	ldr	r2, [pc, #104]	; (800c290 <LmHandlerInit+0x80>)
 800c228:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c22a:	4b17      	ldr	r3, [pc, #92]	; (800c288 <LmHandlerInit+0x78>)
 800c22c:	4a19      	ldr	r2, [pc, #100]	; (800c294 <LmHandlerInit+0x84>)
 800c22e:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c230:	4b15      	ldr	r3, [pc, #84]	; (800c288 <LmHandlerInit+0x78>)
 800c232:	4a19      	ldr	r2, [pc, #100]	; (800c298 <LmHandlerInit+0x88>)
 800c234:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c236:	4b13      	ldr	r3, [pc, #76]	; (800c284 <LmHandlerInit+0x74>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a17      	ldr	r2, [pc, #92]	; (800c29c <LmHandlerInit+0x8c>)
 800c23e:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c240:	4b10      	ldr	r3, [pc, #64]	; (800c284 <LmHandlerInit+0x74>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	4a15      	ldr	r2, [pc, #84]	; (800c29c <LmHandlerInit+0x8c>)
 800c248:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c24a:	4b0e      	ldr	r3, [pc, #56]	; (800c284 <LmHandlerInit+0x74>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	4a12      	ldr	r2, [pc, #72]	; (800c29c <LmHandlerInit+0x8c>)
 800c252:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c254:	4b11      	ldr	r3, [pc, #68]	; (800c29c <LmHandlerInit+0x8c>)
 800c256:	4a12      	ldr	r2, [pc, #72]	; (800c2a0 <LmHandlerInit+0x90>)
 800c258:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c25a:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <LmHandlerInit+0x74>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	4a0e      	ldr	r2, [pc, #56]	; (800c29c <LmHandlerInit+0x8c>)
 800c262:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c264:	490f      	ldr	r1, [pc, #60]	; (800c2a4 <LmHandlerInit+0x94>)
 800c266:	2000      	movs	r0, #0
 800c268:	f000 fcfe 	bl	800cc68 <LmHandlerPackageRegister>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d002      	beq.n	800c278 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800c272:	f04f 33ff 	mov.w	r3, #4294967295
 800c276:	e000      	b.n	800c27a <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	200002f8 	.word	0x200002f8
 800c288:	200002fc 	.word	0x200002fc
 800c28c:	0800c9bd 	.word	0x0800c9bd
 800c290:	0800ca25 	.word	0x0800ca25
 800c294:	0800cb05 	.word	0x0800cb05
 800c298:	0800cbc9 	.word	0x0800cbc9
 800c29c:	2000030c 	.word	0x2000030c
 800c2a0:	0800ced9 	.word	0x0800ced9
 800c2a4:	200000b8 	.word	0x200000b8

0800c2a8 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2aa:	b099      	sub	sp, #100	; 0x64
 800c2ac:	af08      	add	r7, sp, #32
 800c2ae:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c2b4:	2210      	movs	r2, #16
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	4882      	ldr	r0, [pc, #520]	; (800c4c4 <LmHandlerConfigure+0x21c>)
 800c2ba:	f00d fa8f 	bl	80197dc <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800c2be:	f7fe fb5f 	bl	800a980 <LoraInfo_GetPtr>
 800c2c2:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c2c4:	4b7f      	ldr	r3, [pc, #508]	; (800c4c4 <LmHandlerConfigure+0x21c>)
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	4093      	lsls	r3, r2
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00c      	beq.n	800c2f4 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c2da:	4b7a      	ldr	r3, [pc, #488]	; (800c4c4 <LmHandlerConfigure+0x21c>)
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	461a      	mov	r2, r3
 800c2e0:	4979      	ldr	r1, [pc, #484]	; (800c4c8 <LmHandlerConfigure+0x220>)
 800c2e2:	487a      	ldr	r0, [pc, #488]	; (800c4cc <LmHandlerConfigure+0x224>)
 800c2e4:	f004 fb1a 	bl	801091c <LoRaMacInitialization>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d009      	beq.n	800c302 <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800c2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f2:	e0e2      	b.n	800c4ba <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c2f4:	4b76      	ldr	r3, [pc, #472]	; (800c4d0 <LmHandlerConfigure+0x228>)
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	f00e f9b6 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c300:	e7fe      	b.n	800c300 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800c302:	f000 fdfa 	bl	800cefa <NvmDataMgmtRestore>
 800c306:	4603      	mov	r3, r0
 800c308:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800c30a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d003      	beq.n	800c318 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800c310:	4b70      	ldr	r3, [pc, #448]	; (800c4d4 <LmHandlerConfigure+0x22c>)
 800c312:	2201      	movs	r2, #1
 800c314:	701a      	strb	r2, [r3, #0]
 800c316:	e002      	b.n	800c31e <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800c318:	4b6e      	ldr	r3, [pc, #440]	; (800c4d4 <LmHandlerConfigure+0x22c>)
 800c31a:	2200      	movs	r2, #0
 800c31c:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c31e:	2302      	movs	r3, #2
 800c320:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c322:	f107 0314 	add.w	r3, r7, #20
 800c326:	4618      	mov	r0, r3
 800c328:	f004 fe42 	bl	8010fb0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	2208      	movs	r2, #8
 800c330:	4619      	mov	r1, r3
 800c332:	4869      	ldr	r0, [pc, #420]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c334:	f00a f87f 	bl	8016436 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c338:	2303      	movs	r3, #3
 800c33a:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c33c:	f107 0314 	add.w	r3, r7, #20
 800c340:	4618      	mov	r0, r3
 800c342:	f004 fe35 	bl	8010fb0 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	2208      	movs	r2, #8
 800c34a:	4619      	mov	r1, r3
 800c34c:	4863      	ldr	r0, [pc, #396]	; (800c4dc <LmHandlerConfigure+0x234>)
 800c34e:	f00a f872 	bl	8016436 <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c352:	4b63      	ldr	r3, [pc, #396]	; (800c4e0 <LmHandlerConfigure+0x238>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68db      	ldr	r3, [r3, #12]
 800c358:	4798      	blx	r3
 800c35a:	4603      	mov	r3, r0
 800c35c:	4a5e      	ldr	r2, [pc, #376]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c35e:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800c360:	2306      	movs	r3, #6
 800c362:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c364:	4b5c      	ldr	r3, [pc, #368]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c366:	695b      	ldr	r3, [r3, #20]
 800c368:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c36a:	f107 0314 	add.w	r3, r7, #20
 800c36e:	4618      	mov	r0, r3
 800c370:	f004 ff7c 	bl	801126c <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c374:	4b58      	ldr	r3, [pc, #352]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	461a      	mov	r2, r3
 800c37a:	4b57      	ldr	r3, [pc, #348]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c37c:	785b      	ldrb	r3, [r3, #1]
 800c37e:	4619      	mov	r1, r3
 800c380:	4b55      	ldr	r3, [pc, #340]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c382:	789b      	ldrb	r3, [r3, #2]
 800c384:	4618      	mov	r0, r3
 800c386:	4b54      	ldr	r3, [pc, #336]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c388:	78db      	ldrb	r3, [r3, #3]
 800c38a:	461c      	mov	r4, r3
 800c38c:	4b52      	ldr	r3, [pc, #328]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c38e:	791b      	ldrb	r3, [r3, #4]
 800c390:	461d      	mov	r5, r3
 800c392:	4b51      	ldr	r3, [pc, #324]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c394:	795b      	ldrb	r3, [r3, #5]
 800c396:	461e      	mov	r6, r3
 800c398:	4b4f      	ldr	r3, [pc, #316]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c39a:	799b      	ldrb	r3, [r3, #6]
 800c39c:	603b      	str	r3, [r7, #0]
 800c39e:	4b4e      	ldr	r3, [pc, #312]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c3a0:	79db      	ldrb	r3, [r3, #7]
 800c3a2:	9307      	str	r3, [sp, #28]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	9306      	str	r3, [sp, #24]
 800c3a8:	9605      	str	r6, [sp, #20]
 800c3aa:	9504      	str	r5, [sp, #16]
 800c3ac:	9403      	str	r4, [sp, #12]
 800c3ae:	9002      	str	r0, [sp, #8]
 800c3b0:	9101      	str	r1, [sp, #4]
 800c3b2:	9200      	str	r2, [sp, #0]
 800c3b4:	4b4b      	ldr	r3, [pc, #300]	; (800c4e4 <LmHandlerConfigure+0x23c>)
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	2002      	movs	r0, #2
 800c3bc:	f00e f956 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c3c0:	4b45      	ldr	r3, [pc, #276]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c3c2:	7a1b      	ldrb	r3, [r3, #8]
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	4b44      	ldr	r3, [pc, #272]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c3c8:	7a5b      	ldrb	r3, [r3, #9]
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	4b42      	ldr	r3, [pc, #264]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c3ce:	7a9b      	ldrb	r3, [r3, #10]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	4b41      	ldr	r3, [pc, #260]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c3d4:	7adb      	ldrb	r3, [r3, #11]
 800c3d6:	461c      	mov	r4, r3
 800c3d8:	4b3f      	ldr	r3, [pc, #252]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c3da:	7b1b      	ldrb	r3, [r3, #12]
 800c3dc:	461d      	mov	r5, r3
 800c3de:	4b3e      	ldr	r3, [pc, #248]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c3e0:	7b5b      	ldrb	r3, [r3, #13]
 800c3e2:	461e      	mov	r6, r3
 800c3e4:	4b3c      	ldr	r3, [pc, #240]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c3e6:	7b9b      	ldrb	r3, [r3, #14]
 800c3e8:	603b      	str	r3, [r7, #0]
 800c3ea:	4b3b      	ldr	r3, [pc, #236]	; (800c4d8 <LmHandlerConfigure+0x230>)
 800c3ec:	7bdb      	ldrb	r3, [r3, #15]
 800c3ee:	9307      	str	r3, [sp, #28]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	9306      	str	r3, [sp, #24]
 800c3f4:	9605      	str	r6, [sp, #20]
 800c3f6:	9504      	str	r5, [sp, #16]
 800c3f8:	9403      	str	r4, [sp, #12]
 800c3fa:	9002      	str	r0, [sp, #8]
 800c3fc:	9101      	str	r1, [sp, #4]
 800c3fe:	9200      	str	r2, [sp, #0]
 800c400:	4b39      	ldr	r3, [pc, #228]	; (800c4e8 <LmHandlerConfigure+0x240>)
 800c402:	2200      	movs	r2, #0
 800c404:	2100      	movs	r1, #0
 800c406:	2002      	movs	r0, #2
 800c408:	f00e f930 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800c40c:	4b37      	ldr	r3, [pc, #220]	; (800c4ec <LmHandlerConfigure+0x244>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	461a      	mov	r2, r3
 800c412:	4b37      	ldr	r3, [pc, #220]	; (800c4f0 <LmHandlerConfigure+0x248>)
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	4619      	mov	r1, r3
 800c418:	4b36      	ldr	r3, [pc, #216]	; (800c4f4 <LmHandlerConfigure+0x24c>)
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	4618      	mov	r0, r3
 800c41e:	4b36      	ldr	r3, [pc, #216]	; (800c4f8 <LmHandlerConfigure+0x250>)
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	9303      	str	r3, [sp, #12]
 800c424:	9002      	str	r0, [sp, #8]
 800c426:	9101      	str	r1, [sp, #4]
 800c428:	9200      	str	r2, [sp, #0]
 800c42a:	4b34      	ldr	r3, [pc, #208]	; (800c4fc <LmHandlerConfigure+0x254>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	2100      	movs	r1, #0
 800c430:	2002      	movs	r0, #2
 800c432:	f00e f91b 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c436:	230f      	movs	r3, #15
 800c438:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c43a:	2301      	movs	r3, #1
 800c43c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c43e:	f107 0314 	add.w	r3, r7, #20
 800c442:	4618      	mov	r0, r3
 800c444:	f004 ff12 	bl	801126c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800c448:	2305      	movs	r3, #5
 800c44a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c44c:	2300      	movs	r3, #0
 800c44e:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c450:	f107 0314 	add.w	r3, r7, #20
 800c454:	4618      	mov	r0, r3
 800c456:	f004 ff09 	bl	801126c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c45a:	2310      	movs	r3, #16
 800c45c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c45e:	2300      	movs	r3, #0
 800c460:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c462:	f107 0314 	add.w	r3, r7, #20
 800c466:	4618      	mov	r0, r3
 800c468:	f004 ff00 	bl	801126c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c46c:	2304      	movs	r3, #4
 800c46e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c470:	4b14      	ldr	r3, [pc, #80]	; (800c4c4 <LmHandlerConfigure+0x21c>)
 800c472:	789b      	ldrb	r3, [r3, #2]
 800c474:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c476:	f107 0314 	add.w	r3, r7, #20
 800c47a:	4618      	mov	r0, r3
 800c47c:	f004 fef6 	bl	801126c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c480:	230f      	movs	r3, #15
 800c482:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c484:	4b0f      	ldr	r3, [pc, #60]	; (800c4c4 <LmHandlerConfigure+0x21c>)
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	f107 020c 	add.w	r2, r7, #12
 800c48c:	4611      	mov	r1, r2
 800c48e:	4618      	mov	r0, r3
 800c490:	f007 fcc6 	bl	8013e20 <RegionGetPhyParam>
 800c494:	4603      	mov	r3, r0
 800c496:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	bf14      	ite	ne
 800c49e:	2301      	movne	r3, #1
 800c4a0:	2300      	moveq	r3, #0
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	4b07      	ldr	r3, [pc, #28]	; (800c4c4 <LmHandlerConfigure+0x21c>)
 800c4a6:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800c4a8:	2014      	movs	r0, #20
 800c4aa:	f000 fa6f 	bl	800c98c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c4ae:	4b05      	ldr	r3, [pc, #20]	; (800c4c4 <LmHandlerConfigure+0x21c>)
 800c4b0:	795b      	ldrb	r3, [r3, #5]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f005 fc4e 	bl	8011d54 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3744      	adds	r7, #68	; 0x44
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	200002e8 	.word	0x200002e8
 800c4c8:	2000030c 	.word	0x2000030c
 800c4cc:	200002fc 	.word	0x200002fc
 800c4d0:	0801b2a0 	.word	0x0801b2a0
 800c4d4:	2000042a 	.word	0x2000042a
 800c4d8:	200000a0 	.word	0x200000a0
 800c4dc:	200000a8 	.word	0x200000a8
 800c4e0:	200002f8 	.word	0x200002f8
 800c4e4:	0801b2ec 	.word	0x0801b2ec
 800c4e8:	0801b328 	.word	0x0801b328
 800c4ec:	200000b7 	.word	0x200000b7
 800c4f0:	200000b6 	.word	0x200000b6
 800c4f4:	200000b5 	.word	0x200000b5
 800c4f8:	200000b4 	.word	0x200000b4
 800c4fc:	0801b364 	.word	0x0801b364

0800c500 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c504:	f002 f9b8 	bl	800e878 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c508:	f000 fc9a 	bl	800ce40 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800c50c:	f000 fcee 	bl	800ceec <NvmDataMgmtStore>
}
 800c510:	bf00      	nop
 800c512:	bd80      	pop	{r7, pc}

0800c514 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b090      	sub	sp, #64	; 0x40
 800c518:	af00      	add	r7, sp, #0
 800c51a:	4603      	mov	r3, r0
 800c51c:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c51e:	79fb      	ldrb	r3, [r7, #7]
 800c520:	2b02      	cmp	r3, #2
 800c522:	d111      	bne.n	800c548 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c524:	4b23      	ldr	r3, [pc, #140]	; (800c5b4 <LmHandlerJoin+0xa0>)
 800c526:	2202      	movs	r2, #2
 800c528:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800c52a:	f004 fcab 	bl	8010e84 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800c52e:	2301      	movs	r3, #1
 800c530:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c532:	4b21      	ldr	r3, [pc, #132]	; (800c5b8 <LmHandlerJoin+0xa4>)
 800c534:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c53c:	f107 0308 	add.w	r3, r7, #8
 800c540:	4618      	mov	r0, r3
 800c542:	f005 f9d1 	bl	80118e8 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800c546:	e030      	b.n	800c5aa <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c548:	4b1a      	ldr	r3, [pc, #104]	; (800c5b4 <LmHandlerJoin+0xa0>)
 800c54a:	2201      	movs	r2, #1
 800c54c:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c54e:	4b1a      	ldr	r3, [pc, #104]	; (800c5b8 <LmHandlerJoin+0xa4>)
 800c550:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c554:	4b17      	ldr	r3, [pc, #92]	; (800c5b4 <LmHandlerJoin+0xa0>)
 800c556:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c558:	4b16      	ldr	r3, [pc, #88]	; (800c5b4 <LmHandlerJoin+0xa0>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800c55e:	4b17      	ldr	r3, [pc, #92]	; (800c5bc <LmHandlerJoin+0xa8>)
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	f083 0301 	eor.w	r3, r3, #1
 800c566:	b2db      	uxtb	r3, r3
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d008      	beq.n	800c57e <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c56c:	2327      	movs	r3, #39	; 0x27
 800c56e:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c570:	4b13      	ldr	r3, [pc, #76]	; (800c5c0 <LmHandlerJoin+0xac>)
 800c572:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c574:	f107 031c 	add.w	r3, r7, #28
 800c578:	4618      	mov	r0, r3
 800c57a:	f004 fe77 	bl	801126c <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c57e:	f004 fc81 	bl	8010e84 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c582:	2301      	movs	r3, #1
 800c584:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c586:	2301      	movs	r3, #1
 800c588:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c58c:	f107 031c 	add.w	r3, r7, #28
 800c590:	4618      	mov	r0, r3
 800c592:	f004 fe6b 	bl	801126c <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c596:	4b0b      	ldr	r3, [pc, #44]	; (800c5c4 <LmHandlerJoin+0xb0>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	69db      	ldr	r3, [r3, #28]
 800c59c:	4805      	ldr	r0, [pc, #20]	; (800c5b4 <LmHandlerJoin+0xa0>)
 800c59e:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c5a0:	4b05      	ldr	r3, [pc, #20]	; (800c5b8 <LmHandlerJoin+0xa4>)
 800c5a2:	785b      	ldrb	r3, [r3, #1]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f000 f917 	bl	800c7d8 <LmHandlerRequestClass>
}
 800c5aa:	bf00      	nop
 800c5ac:	3740      	adds	r7, #64	; 0x40
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	200000c4 	.word	0x200000c4
 800c5b8:	200002e8 	.word	0x200002e8
 800c5bc:	2000042a 	.word	0x2000042a
 800c5c0:	01000300 	.word	0x01000300
 800c5c4:	200002f8 	.word	0x200002f8

0800c5c8 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08a      	sub	sp, #40	; 0x28
 800c5cc:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c5d2:	463b      	mov	r3, r7
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f004 fceb 	bl	8010fb0 <LoRaMacMibGetRequestConfirm>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d106      	bne.n	800c5f6 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c5e8:	793b      	ldrb	r3, [r7, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d101      	bne.n	800c5f2 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	e002      	b.n	800c5f8 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e000      	b.n	800c5f8 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c5f6:	2300      	movs	r3, #0
    }
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3728      	adds	r7, #40	; 0x28
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b08c      	sub	sp, #48	; 0x30
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	607a      	str	r2, [r7, #4]
 800c60a:	461a      	mov	r2, r3
 800c60c:	460b      	mov	r3, r1
 800c60e:	72fb      	strb	r3, [r7, #11]
 800c610:	4613      	mov	r3, r2
 800c612:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c614:	23ff      	movs	r3, #255	; 0xff
 800c616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c61a:	f001 fe97 	bl	800e34c <LoRaMacIsBusy>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d002      	beq.n	800c62a <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c624:	f06f 0301 	mvn.w	r3, #1
 800c628:	e0b4      	b.n	800c794 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c62a:	f7ff ffcd 	bl	800c5c8 <LmHandlerJoinStatus>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b01      	cmp	r3, #1
 800c632:	d007      	beq.n	800c644 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800c634:	4b59      	ldr	r3, [pc, #356]	; (800c79c <LmHandlerSend+0x19c>)
 800c636:	789b      	ldrb	r3, [r3, #2]
 800c638:	4618      	mov	r0, r3
 800c63a:	f7ff ff6b 	bl	800c514 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c63e:	f06f 0302 	mvn.w	r3, #2
 800c642:	e0a7      	b.n	800c794 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c644:	4b56      	ldr	r3, [pc, #344]	; (800c7a0 <LmHandlerSend+0x1a0>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	4798      	blx	r3
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00d      	beq.n	800c66e <LmHandlerSend+0x6e>
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	781a      	ldrb	r2, [r3, #0]
 800c656:	4b52      	ldr	r3, [pc, #328]	; (800c7a0 <LmHandlerSend+0x1a0>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d006      	beq.n	800c66e <LmHandlerSend+0x6e>
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d002      	beq.n	800c66e <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c668:	f06f 0303 	mvn.w	r3, #3
 800c66c:	e092      	b.n	800c794 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c66e:	4b4d      	ldr	r3, [pc, #308]	; (800c7a4 <LmHandlerSend+0x1a4>)
 800c670:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c674:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	785b      	ldrb	r3, [r3, #1]
 800c67c:	f107 0214 	add.w	r2, r7, #20
 800c680:	4611      	mov	r1, r2
 800c682:	4618      	mov	r0, r3
 800c684:	f004 fc0c 	bl	8010ea0 <LoRaMacQueryTxPossible>
 800c688:	4603      	mov	r3, r0
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d009      	beq.n	800c6a2 <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800c68e:	4b46      	ldr	r3, [pc, #280]	; (800c7a8 <LmHandlerSend+0x1a8>)
 800c690:	2200      	movs	r2, #0
 800c692:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c694:	2300      	movs	r3, #0
 800c696:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c698:	2300      	movs	r3, #0
 800c69a:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c69c:	2300      	movs	r3, #0
 800c69e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c6a0:	e017      	b.n	800c6d2 <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800c6a2:	4a41      	ldr	r2, [pc, #260]	; (800c7a8 <LmHandlerSend+0x1a8>)
 800c6a4:	7afb      	ldrb	r3, [r7, #11]
 800c6a6:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	785b      	ldrb	r3, [r3, #1]
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800c6bc:	7afb      	ldrb	r3, [r7, #11]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d102      	bne.n	800c6c8 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	763b      	strb	r3, [r7, #24]
 800c6c6:	e004      	b.n	800c6d2 <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c6cc:	2308      	movs	r3, #8
 800c6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800c6d2:	4b35      	ldr	r3, [pc, #212]	; (800c7a8 <LmHandlerSend+0x1a8>)
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	330c      	adds	r3, #12
 800c6d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6dc:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c6e0:	4b30      	ldr	r3, [pc, #192]	; (800c7a4 <LmHandlerSend+0x1a4>)
 800c6e2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c6e6:	4b30      	ldr	r3, [pc, #192]	; (800c7a8 <LmHandlerSend+0x1a8>)
 800c6e8:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c6ea:	7aba      	ldrb	r2, [r7, #10]
 800c6ec:	f107 0318 	add.w	r3, r7, #24
 800c6f0:	4611      	mov	r1, r2
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f005 fa38 	bl	8011b68 <LoRaMacMcpsRequest>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800c70a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c70e:	2b11      	cmp	r3, #17
 800c710:	d83a      	bhi.n	800c788 <LmHandlerSend+0x188>
 800c712:	a201      	add	r2, pc, #4	; (adr r2, 800c718 <LmHandlerSend+0x118>)
 800c714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c718:	0800c761 	.word	0x0800c761
 800c71c:	0800c769 	.word	0x0800c769
 800c720:	0800c789 	.word	0x0800c789
 800c724:	0800c789 	.word	0x0800c789
 800c728:	0800c789 	.word	0x0800c789
 800c72c:	0800c789 	.word	0x0800c789
 800c730:	0800c789 	.word	0x0800c789
 800c734:	0800c771 	.word	0x0800c771
 800c738:	0800c789 	.word	0x0800c789
 800c73c:	0800c789 	.word	0x0800c789
 800c740:	0800c789 	.word	0x0800c789
 800c744:	0800c781 	.word	0x0800c781
 800c748:	0800c789 	.word	0x0800c789
 800c74c:	0800c789 	.word	0x0800c789
 800c750:	0800c769 	.word	0x0800c769
 800c754:	0800c769 	.word	0x0800c769
 800c758:	0800c769 	.word	0x0800c769
 800c75c:	0800c779 	.word	0x0800c779
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c760:	2300      	movs	r3, #0
 800c762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c766:	e013      	b.n	800c790 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c768:	23fe      	movs	r3, #254	; 0xfe
 800c76a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c76e:	e00f      	b.n	800c790 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c770:	23fd      	movs	r3, #253	; 0xfd
 800c772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c776:	e00b      	b.n	800c790 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c778:	23fb      	movs	r3, #251	; 0xfb
 800c77a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c77e:	e007      	b.n	800c790 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c780:	23fa      	movs	r3, #250	; 0xfa
 800c782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c786:	e003      	b.n	800c790 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c788:	23ff      	movs	r3, #255	; 0xff
 800c78a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c78e:	bf00      	nop
    }

    return lmhStatus;
 800c790:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c794:	4618      	mov	r0, r3
 800c796:	3730      	adds	r7, #48	; 0x30
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	200000c4 	.word	0x200000c4
 800c7a0:	200002d4 	.word	0x200002d4
 800c7a4:	200002e8 	.word	0x200002e8
 800c7a8:	20000320 	.word	0x20000320

0800c7ac <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b086      	sub	sp, #24
 800c7b0:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c7b2:	230a      	movs	r3, #10
 800c7b4:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c7b6:	463b      	mov	r3, r7
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f005 f895 	bl	80118e8 <LoRaMacMlmeRequest>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d101      	bne.n	800c7cc <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	e001      	b.n	800c7d0 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c7cc:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3718      	adds	r7, #24
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b08c      	sub	sp, #48	; 0x30
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	4603      	mov	r3, r0
 800c7e0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800c7e8:	f001 fdb0 	bl	800e34c <LoRaMacIsBusy>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d002      	beq.n	800c7f8 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c7f2:	f06f 0301 	mvn.w	r3, #1
 800c7f6:	e07b      	b.n	800c8f0 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c7f8:	f7ff fee6 	bl	800c5c8 <LmHandlerJoinStatus>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d002      	beq.n	800c808 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c802:	f06f 0302 	mvn.w	r3, #2
 800c806:	e073      	b.n	800c8f0 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c808:	2300      	movs	r3, #0
 800c80a:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c80c:	f107 0308 	add.w	r3, r7, #8
 800c810:	4618      	mov	r0, r3
 800c812:	f004 fbcd 	bl	8010fb0 <LoRaMacMibGetRequestConfirm>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c81c:	f04f 33ff 	mov.w	r3, #4294967295
 800c820:	e066      	b.n	800c8f0 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800c822:	7b3b      	ldrb	r3, [r7, #12]
 800c824:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c828:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c82c:	79fb      	ldrb	r3, [r7, #7]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d055      	beq.n	800c8de <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800c832:	79fb      	ldrb	r3, [r7, #7]
 800c834:	2b02      	cmp	r3, #2
 800c836:	d02c      	beq.n	800c892 <LmHandlerRequestClass+0xba>
 800c838:	2b02      	cmp	r3, #2
 800c83a:	dc52      	bgt.n	800c8e2 <LmHandlerRequestClass+0x10a>
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d002      	beq.n	800c846 <LmHandlerRequestClass+0x6e>
 800c840:	2b01      	cmp	r3, #1
 800c842:	d022      	beq.n	800c88a <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800c844:	e04d      	b.n	800c8e2 <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800c846:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d04b      	beq.n	800c8e6 <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800c84e:	79fb      	ldrb	r3, [r7, #7]
 800c850:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c852:	f107 0308 	add.w	r3, r7, #8
 800c856:	4618      	mov	r0, r3
 800c858:	f004 fd08 	bl	801126c <LoRaMacMibSetRequestConfirm>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10f      	bne.n	800c882 <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800c862:	79fb      	ldrb	r3, [r7, #7]
 800c864:	4618      	mov	r0, r3
 800c866:	f000 fb1f 	bl	800cea8 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c86a:	4b23      	ldr	r3, [pc, #140]	; (800c8f8 <LmHandlerRequestClass+0x120>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c870:	2b00      	cmp	r3, #0
 800c872:	d038      	beq.n	800c8e6 <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c874:	4b20      	ldr	r3, [pc, #128]	; (800c8f8 <LmHandlerRequestClass+0x120>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c87a:	79fa      	ldrb	r2, [r7, #7]
 800c87c:	4610      	mov	r0, r2
 800c87e:	4798      	blx	r3
            break;
 800c880:	e031      	b.n	800c8e6 <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c882:	23ff      	movs	r3, #255	; 0xff
 800c884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c888:	e02d      	b.n	800c8e6 <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c88a:	23ff      	movs	r3, #255	; 0xff
 800c88c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c890:	e02c      	b.n	800c8ec <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800c892:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c896:	2b00      	cmp	r3, #0
 800c898:	d003      	beq.n	800c8a2 <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c89a:	23ff      	movs	r3, #255	; 0xff
 800c89c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c8a0:	e023      	b.n	800c8ea <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800c8a2:	79fb      	ldrb	r3, [r7, #7]
 800c8a4:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c8a6:	f107 0308 	add.w	r3, r7, #8
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f004 fcde 	bl	801126c <LoRaMacMibSetRequestConfirm>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d10f      	bne.n	800c8d6 <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800c8b6:	79fb      	ldrb	r3, [r7, #7]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f000 faf5 	bl	800cea8 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c8be:	4b0e      	ldr	r3, [pc, #56]	; (800c8f8 <LmHandlerRequestClass+0x120>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d010      	beq.n	800c8ea <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c8c8:	4b0b      	ldr	r3, [pc, #44]	; (800c8f8 <LmHandlerRequestClass+0x120>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ce:	79fa      	ldrb	r2, [r7, #7]
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	4798      	blx	r3
            break;
 800c8d4:	e009      	b.n	800c8ea <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c8d6:	23ff      	movs	r3, #255	; 0xff
 800c8d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c8dc:	e005      	b.n	800c8ea <LmHandlerRequestClass+0x112>
        }
    }
 800c8de:	bf00      	nop
 800c8e0:	e004      	b.n	800c8ec <LmHandlerRequestClass+0x114>
            break;
 800c8e2:	bf00      	nop
 800c8e4:	e002      	b.n	800c8ec <LmHandlerRequestClass+0x114>
            break;
 800c8e6:	bf00      	nop
 800c8e8:	e000      	b.n	800c8ec <LmHandlerRequestClass+0x114>
            break;
 800c8ea:	bf00      	nop
    return errorStatus;
 800c8ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3730      	adds	r7, #48	; 0x30
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	200002f8 	.word	0x200002f8

0800c8fc <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b08c      	sub	sp, #48	; 0x30
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d102      	bne.n	800c910 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c90a:	f04f 33ff 	mov.w	r3, #4294967295
 800c90e:	e010      	b.n	800c932 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c910:	2300      	movs	r3, #0
 800c912:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c914:	f107 030c 	add.w	r3, r7, #12
 800c918:	4618      	mov	r0, r3
 800c91a:	f004 fb49 	bl	8010fb0 <LoRaMacMibGetRequestConfirm>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d002      	beq.n	800c92a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c924:	f04f 33ff 	mov.w	r3, #4294967295
 800c928:	e003      	b.n	800c932 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c92a:	7c3a      	ldrb	r2, [r7, #16]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3730      	adds	r7, #48	; 0x30
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
	...

0800c93c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b08c      	sub	sp, #48	; 0x30
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d102      	bne.n	800c950 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c94a:	f04f 33ff 	mov.w	r3, #4294967295
 800c94e:	e016      	b.n	800c97e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c950:	231f      	movs	r3, #31
 800c952:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c954:	f107 030c 	add.w	r3, r7, #12
 800c958:	4618      	mov	r0, r3
 800c95a:	f004 fb29 	bl	8010fb0 <LoRaMacMibGetRequestConfirm>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d002      	beq.n	800c96a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c964:	f04f 33ff 	mov.w	r3, #4294967295
 800c968:	e009      	b.n	800c97e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c96a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f993 2000 	ldrsb.w	r2, [r3]
 800c978:	4b03      	ldr	r3, [pc, #12]	; (800c988 <LmHandlerGetTxDatarate+0x4c>)
 800c97a:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3730      	adds	r7, #48	; 0x30
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	200002e8 	.word	0x200002e8

0800c98c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b08c      	sub	sp, #48	; 0x30
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c994:	2322      	movs	r3, #34	; 0x22
 800c996:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c99c:	f107 030c 	add.w	r3, r7, #12
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f004 fc63 	bl	801126c <LoRaMacMibSetRequestConfirm>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b0:	e000      	b.n	800c9b4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c9b2:	2300      	movs	r3, #0
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3730      	adds	r7, #48	; 0x30
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c9c4:	4b15      	ldr	r3, [pc, #84]	; (800ca1c <McpsConfirm+0x60>)
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	785a      	ldrb	r2, [r3, #1]
 800c9ce:	4b13      	ldr	r3, [pc, #76]	; (800ca1c <McpsConfirm+0x60>)
 800c9d0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	789b      	ldrb	r3, [r3, #2]
 800c9d6:	b25a      	sxtb	r2, r3
 800c9d8:	4b10      	ldr	r3, [pc, #64]	; (800ca1c <McpsConfirm+0x60>)
 800c9da:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	4a0e      	ldr	r2, [pc, #56]	; (800ca1c <McpsConfirm+0x60>)
 800c9e2:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c9ea:	4b0c      	ldr	r3, [pc, #48]	; (800ca1c <McpsConfirm+0x60>)
 800c9ec:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	4b09      	ldr	r3, [pc, #36]	; (800ca1c <McpsConfirm+0x60>)
 800c9f6:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	791b      	ldrb	r3, [r3, #4]
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	4b07      	ldr	r3, [pc, #28]	; (800ca1c <McpsConfirm+0x60>)
 800ca00:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800ca02:	4b07      	ldr	r3, [pc, #28]	; (800ca20 <McpsConfirm+0x64>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	6a1b      	ldr	r3, [r3, #32]
 800ca08:	4804      	ldr	r0, [pc, #16]	; (800ca1c <McpsConfirm+0x60>)
 800ca0a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ca0c:	6879      	ldr	r1, [r7, #4]
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f000 f99a 	bl	800cd48 <LmHandlerPackagesNotify>
}
 800ca14:	bf00      	nop
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	20000320 	.word	0x20000320
 800ca20:	200002f8 	.word	0x200002f8

0800ca24 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b088      	sub	sp, #32
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ca32:	4b32      	ldr	r3, [pc, #200]	; (800cafc <McpsIndication+0xd8>)
 800ca34:	2201      	movs	r2, #1
 800ca36:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	785a      	ldrb	r2, [r3, #1]
 800ca3c:	4b2f      	ldr	r3, [pc, #188]	; (800cafc <McpsIndication+0xd8>)
 800ca3e:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ca40:	4b2e      	ldr	r3, [pc, #184]	; (800cafc <McpsIndication+0xd8>)
 800ca42:	785b      	ldrb	r3, [r3, #1]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d154      	bne.n	800caf2 <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	791b      	ldrb	r3, [r3, #4]
 800ca4c:	b25a      	sxtb	r2, r3
 800ca4e:	4b2b      	ldr	r3, [pc, #172]	; (800cafc <McpsIndication+0xd8>)
 800ca50:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca58:	b25a      	sxtb	r2, r3
 800ca5a:	4b28      	ldr	r3, [pc, #160]	; (800cafc <McpsIndication+0xd8>)
 800ca5c:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ca64:	4b25      	ldr	r3, [pc, #148]	; (800cafc <McpsIndication+0xd8>)
 800ca66:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	78db      	ldrb	r3, [r3, #3]
 800ca6c:	b25a      	sxtb	r2, r3
 800ca6e:	4b23      	ldr	r3, [pc, #140]	; (800cafc <McpsIndication+0xd8>)
 800ca70:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	4a21      	ldr	r2, [pc, #132]	; (800cafc <McpsIndication+0xd8>)
 800ca78:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	78db      	ldrb	r3, [r3, #3]
 800ca7e:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	7b1b      	ldrb	r3, [r3, #12]
 800ca84:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800ca8c:	4b1c      	ldr	r3, [pc, #112]	; (800cb00 <McpsIndication+0xdc>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca92:	f107 0218 	add.w	r2, r7, #24
 800ca96:	4919      	ldr	r1, [pc, #100]	; (800cafc <McpsIndication+0xd8>)
 800ca98:	4610      	mov	r0, r2
 800ca9a:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800ca9c:	4b18      	ldr	r3, [pc, #96]	; (800cb00 <McpsIndication+0xdc>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d007      	beq.n	800cab6 <McpsIndication+0x92>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	7e1b      	ldrb	r3, [r3, #24]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d003      	beq.n	800cab6 <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800caae:	4b14      	ldr	r3, [pc, #80]	; (800cb00 <McpsIndication+0xdc>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab4:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cab6:	6879      	ldr	r1, [r7, #4]
 800cab8:	2001      	movs	r0, #1
 800caba:	f000 f945 	bl	800cd48 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800cabe:	f107 0317 	add.w	r3, r7, #23
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7ff ff1a 	bl	800c8fc <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	795b      	ldrb	r3, [r3, #5]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d111      	bne.n	800caf4 <McpsIndication+0xd0>
 800cad0:	7dfb      	ldrb	r3, [r7, #23]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d10e      	bne.n	800caf4 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800cad6:	2300      	movs	r3, #0
 800cad8:	733b      	strb	r3, [r7, #12]
 800cada:	2300      	movs	r3, #0
 800cadc:	737b      	strb	r3, [r7, #13]
 800cade:	2300      	movs	r3, #0
 800cae0:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800cae2:	f107 000c 	add.w	r0, r7, #12
 800cae6:	2301      	movs	r3, #1
 800cae8:	2200      	movs	r2, #0
 800caea:	2100      	movs	r1, #0
 800caec:	f7ff fd88 	bl	800c600 <LmHandlerSend>
 800caf0:	e000      	b.n	800caf4 <McpsIndication+0xd0>
        return;
 800caf2:	bf00      	nop
    }
}
 800caf4:	3720      	adds	r7, #32
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	200000c8 	.word	0x200000c8
 800cb00:	200002f8 	.word	0x200002f8

0800cb04 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b08c      	sub	sp, #48	; 0x30
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cb0c:	4b28      	ldr	r3, [pc, #160]	; (800cbb0 <MlmeConfirm+0xac>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	785a      	ldrb	r2, [r3, #1]
 800cb16:	4b26      	ldr	r3, [pc, #152]	; (800cbb0 <MlmeConfirm+0xac>)
 800cb18:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cb1a:	4b26      	ldr	r3, [pc, #152]	; (800cbb4 <MlmeConfirm+0xb0>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	6a1b      	ldr	r3, [r3, #32]
 800cb20:	4823      	ldr	r0, [pc, #140]	; (800cbb0 <MlmeConfirm+0xac>)
 800cb22:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cb24:	6879      	ldr	r1, [r7, #4]
 800cb26:	2002      	movs	r0, #2
 800cb28:	f000 f90e 	bl	800cd48 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	2b0a      	cmp	r3, #10
 800cb32:	d035      	beq.n	800cba0 <MlmeConfirm+0x9c>
 800cb34:	2b0a      	cmp	r3, #10
 800cb36:	dc35      	bgt.n	800cba4 <MlmeConfirm+0xa0>
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d002      	beq.n	800cb42 <MlmeConfirm+0x3e>
 800cb3c:	2b04      	cmp	r3, #4
 800cb3e:	d023      	beq.n	800cb88 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cb40:	e030      	b.n	800cba4 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800cb42:	2306      	movs	r3, #6
 800cb44:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cb46:	f107 030c 	add.w	r3, r7, #12
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f004 fa30 	bl	8010fb0 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	4a19      	ldr	r2, [pc, #100]	; (800cbb8 <MlmeConfirm+0xb4>)
 800cb54:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cb56:	4819      	ldr	r0, [pc, #100]	; (800cbbc <MlmeConfirm+0xb8>)
 800cb58:	f7ff fef0 	bl	800c93c <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	785b      	ldrb	r3, [r3, #1]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d108      	bne.n	800cb76 <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cb64:	4b15      	ldr	r3, [pc, #84]	; (800cbbc <MlmeConfirm+0xb8>)
 800cb66:	2200      	movs	r2, #0
 800cb68:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800cb6a:	4b15      	ldr	r3, [pc, #84]	; (800cbc0 <MlmeConfirm+0xbc>)
 800cb6c:	785b      	ldrb	r3, [r3, #1]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7ff fe32 	bl	800c7d8 <LmHandlerRequestClass>
 800cb74:	e002      	b.n	800cb7c <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800cb76:	4b11      	ldr	r3, [pc, #68]	; (800cbbc <MlmeConfirm+0xb8>)
 800cb78:	22ff      	movs	r2, #255	; 0xff
 800cb7a:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cb7c:	4b0d      	ldr	r3, [pc, #52]	; (800cbb4 <MlmeConfirm+0xb0>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	69db      	ldr	r3, [r3, #28]
 800cb82:	480e      	ldr	r0, [pc, #56]	; (800cbbc <MlmeConfirm+0xb8>)
 800cb84:	4798      	blx	r3
        break;
 800cb86:	e00e      	b.n	800cba6 <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800cb88:	4b0e      	ldr	r3, [pc, #56]	; (800cbc4 <MlmeConfirm+0xc0>)
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	7a1a      	ldrb	r2, [r3, #8]
 800cb92:	4b0c      	ldr	r3, [pc, #48]	; (800cbc4 <MlmeConfirm+0xc0>)
 800cb94:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	7a5a      	ldrb	r2, [r3, #9]
 800cb9a:	4b0a      	ldr	r3, [pc, #40]	; (800cbc4 <MlmeConfirm+0xc0>)
 800cb9c:	73da      	strb	r2, [r3, #15]
        break;
 800cb9e:	e002      	b.n	800cba6 <MlmeConfirm+0xa2>
        break;
 800cba0:	bf00      	nop
 800cba2:	e000      	b.n	800cba6 <MlmeConfirm+0xa2>
        break;
 800cba4:	bf00      	nop
    }
}
 800cba6:	bf00      	nop
 800cba8:	3730      	adds	r7, #48	; 0x30
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	20000320 	.word	0x20000320
 800cbb4:	200002f8 	.word	0x200002f8
 800cbb8:	200000a0 	.word	0x200000a0
 800cbbc:	200000c4 	.word	0x200000c4
 800cbc0:	200002e8 	.word	0x200002e8
 800cbc4:	200000c8 	.word	0x200000c8

0800cbc8 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800cbd2:	4b22      	ldr	r3, [pc, #136]	; (800cc5c <MlmeIndication+0x94>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	785a      	ldrb	r2, [r3, #1]
 800cbdc:	4b1f      	ldr	r3, [pc, #124]	; (800cc5c <MlmeIndication+0x94>)
 800cbde:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbe6:	b25a      	sxtb	r2, r3
 800cbe8:	4b1c      	ldr	r3, [pc, #112]	; (800cc5c <MlmeIndication+0x94>)
 800cbea:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cbf2:	4b1a      	ldr	r3, [pc, #104]	; (800cc5c <MlmeIndication+0x94>)
 800cbf4:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	78db      	ldrb	r3, [r3, #3]
 800cbfa:	b25a      	sxtb	r2, r3
 800cbfc:	4b17      	ldr	r3, [pc, #92]	; (800cc5c <MlmeIndication+0x94>)
 800cbfe:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800cc00:	4b16      	ldr	r3, [pc, #88]	; (800cc5c <MlmeIndication+0x94>)
 800cc02:	785b      	ldrb	r3, [r3, #1]
 800cc04:	2b0e      	cmp	r3, #14
 800cc06:	d005      	beq.n	800cc14 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cc08:	4b15      	ldr	r3, [pc, #84]	; (800cc60 <MlmeIndication+0x98>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0e:	4913      	ldr	r1, [pc, #76]	; (800cc5c <MlmeIndication+0x94>)
 800cc10:	2000      	movs	r0, #0
 800cc12:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	2b07      	cmp	r3, #7
 800cc1a:	d117      	bne.n	800cc4c <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	723b      	strb	r3, [r7, #8]
 800cc20:	2300      	movs	r3, #0
 800cc22:	727b      	strb	r3, [r7, #9]
 800cc24:	2300      	movs	r3, #0
 800cc26:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800cc28:	4b0e      	ldr	r3, [pc, #56]	; (800cc64 <MlmeIndication+0x9c>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	4798      	blx	r3
 800cc30:	4603      	mov	r3, r0
 800cc32:	f083 0301 	eor.w	r3, r3, #1
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d009      	beq.n	800cc50 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800cc3c:	f107 0008 	add.w	r0, r7, #8
 800cc40:	2301      	movs	r3, #1
 800cc42:	2200      	movs	r2, #0
 800cc44:	2100      	movs	r1, #0
 800cc46:	f7ff fcdb 	bl	800c600 <LmHandlerSend>
            }
        }
        break;
 800cc4a:	e001      	b.n	800cc50 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cc4c:	bf00      	nop
 800cc4e:	e000      	b.n	800cc52 <MlmeIndication+0x8a>
        break;
 800cc50:	bf00      	nop
    }
}
 800cc52:	bf00      	nop
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	200000c8 	.word	0x200000c8
 800cc60:	200002f8 	.word	0x200002f8
 800cc64:	200002d4 	.word	0x200002d4

0800cc68 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	4603      	mov	r3, r0
 800cc70:	6039      	str	r1, [r7, #0]
 800cc72:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cc74:	2300      	movs	r3, #0
 800cc76:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cc78:	79fb      	ldrb	r3, [r7, #7]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d103      	bne.n	800cc86 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cc7e:	f000 f943 	bl	800cf08 <LmhpCompliancePackageFactory>
 800cc82:	60f8      	str	r0, [r7, #12]
            break;
 800cc84:	e000      	b.n	800cc88 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cc86:	bf00      	nop
        }
    }
    if( package != NULL )
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d02b      	beq.n	800cce6 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800cc8e:	79fb      	ldrb	r3, [r7, #7]
 800cc90:	4918      	ldr	r1, [pc, #96]	; (800ccf4 <LmHandlerPackageRegister+0x8c>)
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cc98:	79fb      	ldrb	r3, [r7, #7]
 800cc9a:	4a16      	ldr	r2, [pc, #88]	; (800ccf4 <LmHandlerPackageRegister+0x8c>)
 800cc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca0:	4a15      	ldr	r2, [pc, #84]	; (800ccf8 <LmHandlerPackageRegister+0x90>)
 800cca2:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800cca4:	79fb      	ldrb	r3, [r7, #7]
 800cca6:	4a13      	ldr	r2, [pc, #76]	; (800ccf4 <LmHandlerPackageRegister+0x8c>)
 800cca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccac:	4a13      	ldr	r2, [pc, #76]	; (800ccfc <LmHandlerPackageRegister+0x94>)
 800ccae:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800ccb0:	79fb      	ldrb	r3, [r7, #7]
 800ccb2:	4a10      	ldr	r2, [pc, #64]	; (800ccf4 <LmHandlerPackageRegister+0x8c>)
 800ccb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccb8:	4a11      	ldr	r2, [pc, #68]	; (800cd00 <LmHandlerPackageRegister+0x98>)
 800ccba:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800ccbc:	4b11      	ldr	r3, [pc, #68]	; (800cd04 <LmHandlerPackageRegister+0x9c>)
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	490c      	ldr	r1, [pc, #48]	; (800ccf4 <LmHandlerPackageRegister+0x8c>)
 800ccc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ccc8:	6912      	ldr	r2, [r2, #16]
 800ccca:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cccc:	79fb      	ldrb	r3, [r7, #7]
 800ccce:	4a09      	ldr	r2, [pc, #36]	; (800ccf4 <LmHandlerPackageRegister+0x8c>)
 800ccd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	4a0c      	ldr	r2, [pc, #48]	; (800cd08 <LmHandlerPackageRegister+0xa0>)
 800ccd8:	6851      	ldr	r1, [r2, #4]
 800ccda:	4a0b      	ldr	r2, [pc, #44]	; (800cd08 <LmHandlerPackageRegister+0xa0>)
 800ccdc:	7852      	ldrb	r2, [r2, #1]
 800ccde:	6838      	ldr	r0, [r7, #0]
 800cce0:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cce2:	2300      	movs	r3, #0
 800cce4:	e001      	b.n	800ccea <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cce6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	200002d4 	.word	0x200002d4
 800ccf8:	0800c515 	.word	0x0800c515
 800ccfc:	0800c601 	.word	0x0800c601
 800cd00:	0800c7ad 	.word	0x0800c7ad
 800cd04:	200002f8 	.word	0x200002f8
 800cd08:	200000d8 	.word	0x200000d8

0800cd0c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	4603      	mov	r3, r0
 800cd14:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800cd16:	79fb      	ldrb	r3, [r7, #7]
 800cd18:	2b04      	cmp	r3, #4
 800cd1a:	d80e      	bhi.n	800cd3a <LmHandlerPackageIsInitialized+0x2e>
 800cd1c:	79fb      	ldrb	r3, [r7, #7]
 800cd1e:	4a09      	ldr	r2, [pc, #36]	; (800cd44 <LmHandlerPackageIsInitialized+0x38>)
 800cd20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d007      	beq.n	800cd3a <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cd2a:	79fb      	ldrb	r3, [r7, #7]
 800cd2c:	4a05      	ldr	r2, [pc, #20]	; (800cd44 <LmHandlerPackageIsInitialized+0x38>)
 800cd2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	4798      	blx	r3
 800cd36:	4603      	mov	r3, r0
 800cd38:	e000      	b.n	800cd3c <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cd3a:	2300      	movs	r3, #0
    }
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3708      	adds	r7, #8
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	200002d4 	.word	0x200002d4

0800cd48 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	4603      	mov	r3, r0
 800cd50:	6039      	str	r1, [r7, #0]
 800cd52:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cd54:	2300      	movs	r3, #0
 800cd56:	73fb      	strb	r3, [r7, #15]
 800cd58:	e067      	b.n	800ce2a <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800cd5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd5e:	4a37      	ldr	r2, [pc, #220]	; (800ce3c <LmHandlerPackagesNotify+0xf4>)
 800cd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d051      	beq.n	800ce0c <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800cd68:	79fb      	ldrb	r3, [r7, #7]
 800cd6a:	2b02      	cmp	r3, #2
 800cd6c:	d03d      	beq.n	800cdea <LmHandlerPackagesNotify+0xa2>
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	dc4e      	bgt.n	800ce10 <LmHandlerPackagesNotify+0xc8>
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d002      	beq.n	800cd7c <LmHandlerPackagesNotify+0x34>
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d011      	beq.n	800cd9e <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800cd7a:	e049      	b.n	800ce10 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800cd7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd80:	4a2e      	ldr	r2, [pc, #184]	; (800ce3c <LmHandlerPackagesNotify+0xf4>)
 800cd82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d043      	beq.n	800ce14 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800cd8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd90:	4a2a      	ldr	r2, [pc, #168]	; (800ce3c <LmHandlerPackagesNotify+0xf4>)
 800cd92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd96:	699b      	ldr	r3, [r3, #24]
 800cd98:	6838      	ldr	r0, [r7, #0]
 800cd9a:	4798      	blx	r3
                    break;
 800cd9c:	e03a      	b.n	800ce14 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cd9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cda2:	4a26      	ldr	r2, [pc, #152]	; (800ce3c <LmHandlerPackagesNotify+0xf4>)
 800cda4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cda8:	69db      	ldr	r3, [r3, #28]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d034      	beq.n	800ce18 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cdae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdb2:	4a22      	ldr	r2, [pc, #136]	; (800ce3c <LmHandlerPackagesNotify+0xf4>)
 800cdb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdb8:	781a      	ldrb	r2, [r3, #0]
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d00a      	beq.n	800cdd8 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cdc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d126      	bne.n	800ce18 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800cdca:	4b1c      	ldr	r3, [pc, #112]	; (800ce3c <LmHandlerPackagesNotify+0xf4>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	4798      	blx	r3
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d01f      	beq.n	800ce18 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800cdd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cddc:	4a17      	ldr	r2, [pc, #92]	; (800ce3c <LmHandlerPackagesNotify+0xf4>)
 800cdde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cde2:	69db      	ldr	r3, [r3, #28]
 800cde4:	6838      	ldr	r0, [r7, #0]
 800cde6:	4798      	blx	r3
                    break;
 800cde8:	e016      	b.n	800ce18 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cdea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdee:	4a13      	ldr	r2, [pc, #76]	; (800ce3c <LmHandlerPackagesNotify+0xf4>)
 800cdf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d010      	beq.n	800ce1c <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800cdfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdfe:	4a0f      	ldr	r2, [pc, #60]	; (800ce3c <LmHandlerPackagesNotify+0xf4>)
 800ce00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce04:	6a1b      	ldr	r3, [r3, #32]
 800ce06:	6838      	ldr	r0, [r7, #0]
 800ce08:	4798      	blx	r3
                    break;
 800ce0a:	e007      	b.n	800ce1c <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800ce0c:	bf00      	nop
 800ce0e:	e006      	b.n	800ce1e <LmHandlerPackagesNotify+0xd6>
                    break;
 800ce10:	bf00      	nop
 800ce12:	e004      	b.n	800ce1e <LmHandlerPackagesNotify+0xd6>
                    break;
 800ce14:	bf00      	nop
 800ce16:	e002      	b.n	800ce1e <LmHandlerPackagesNotify+0xd6>
                    break;
 800ce18:	bf00      	nop
 800ce1a:	e000      	b.n	800ce1e <LmHandlerPackagesNotify+0xd6>
                    break;
 800ce1c:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	3301      	adds	r3, #1
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	73fb      	strb	r3, [r7, #15]
 800ce2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce2e:	2b04      	cmp	r3, #4
 800ce30:	dd93      	ble.n	800cd5a <LmHandlerPackagesNotify+0x12>
    }
}
 800ce32:	bf00      	nop
 800ce34:	bf00      	nop
 800ce36:	3710      	adds	r7, #16
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	200002d4 	.word	0x200002d4

0800ce40 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce46:	2300      	movs	r3, #0
 800ce48:	71fb      	strb	r3, [r7, #7]
 800ce4a:	e022      	b.n	800ce92 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ce4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce50:	4a14      	ldr	r2, [pc, #80]	; (800cea4 <LmHandlerPackagesProcess+0x64>)
 800ce52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d015      	beq.n	800ce86 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ce5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce5e:	4a11      	ldr	r2, [pc, #68]	; (800cea4 <LmHandlerPackagesProcess+0x64>)
 800ce60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce64:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00d      	beq.n	800ce86 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ce6a:	79fb      	ldrb	r3, [r7, #7]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff ff4d 	bl	800cd0c <LmHandlerPackageIsInitialized>
 800ce72:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d006      	beq.n	800ce86 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ce78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce7c:	4a09      	ldr	r2, [pc, #36]	; (800cea4 <LmHandlerPackagesProcess+0x64>)
 800ce7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	71fb      	strb	r3, [r7, #7]
 800ce92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce96:	2b04      	cmp	r3, #4
 800ce98:	ddd8      	ble.n	800ce4c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ce9a:	bf00      	nop
 800ce9c:	bf00      	nop
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	200002d4 	.word	0x200002d4

0800cea8 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af02      	add	r7, sp, #8
 800ceae:	4603      	mov	r3, r0
 800ceb0:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800ceb2:	79fb      	ldrb	r3, [r7, #7]
 800ceb4:	4a06      	ldr	r2, [pc, #24]	; (800ced0 <DisplayClassUpdate+0x28>)
 800ceb6:	5cd3      	ldrb	r3, [r2, r3]
 800ceb8:	9300      	str	r3, [sp, #0]
 800ceba:	4b06      	ldr	r3, [pc, #24]	; (800ced4 <DisplayClassUpdate+0x2c>)
 800cebc:	2200      	movs	r2, #0
 800cebe:	2100      	movs	r1, #0
 800cec0:	2002      	movs	r0, #2
 800cec2:	f00d fbd3 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
}
 800cec6:	bf00      	nop
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	0801b3a8 	.word	0x0801b3a8
 800ced4:	0801b38c 	.word	0x0801b38c

0800ced8 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	4603      	mov	r3, r0
 800cee0:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800cee2:	bf00      	nop
 800cee4:	370c      	adds	r7, #12
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bc80      	pop	{r7}
 800ceea:	4770      	bx	lr

0800ceec <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800ceec:	b480      	push	{r7}
 800ceee:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800cef0:	2300      	movs	r3, #0
#endif
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bc80      	pop	{r7}
 800cef8:	4770      	bx	lr

0800cefa <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800cefa:	b480      	push	{r7}
 800cefc:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800cefe:	2300      	movs	r3, #0
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bc80      	pop	{r7}
 800cf06:	4770      	bx	lr

0800cf08 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800cf08:	b480      	push	{r7}
 800cf0a:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800cf0c:	4b02      	ldr	r3, [pc, #8]	; (800cf18 <LmhpCompliancePackageFactory+0x10>)
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bc80      	pop	{r7}
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	200000e0 	.word	0x200000e0

0800cf1c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	4613      	mov	r3, r2
 800cf28:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00f      	beq.n	800cf50 <LmhpComplianceInit+0x34>
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00c      	beq.n	800cf50 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800cf36:	4a0c      	ldr	r2, [pc, #48]	; (800cf68 <LmhpComplianceInit+0x4c>)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800cf3c:	4a0b      	ldr	r2, [pc, #44]	; (800cf6c <LmhpComplianceInit+0x50>)
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800cf42:	4a0a      	ldr	r2, [pc, #40]	; (800cf6c <LmhpComplianceInit+0x50>)
 800cf44:	79fb      	ldrb	r3, [r7, #7]
 800cf46:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800cf48:	4b08      	ldr	r3, [pc, #32]	; (800cf6c <LmhpComplianceInit+0x50>)
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	701a      	strb	r2, [r3, #0]
 800cf4e:	e006      	b.n	800cf5e <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800cf50:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <LmhpComplianceInit+0x4c>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cf56:	4b05      	ldr	r3, [pc, #20]	; (800cf6c <LmhpComplianceInit+0x50>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	701a      	strb	r2, [r3, #0]
    }
}
 800cf5c:	bf00      	nop
 800cf5e:	bf00      	nop
 800cf60:	3714      	adds	r7, #20
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bc80      	pop	{r7}
 800cf66:	4770      	bx	lr
 800cf68:	20000458 	.word	0x20000458
 800cf6c:	20000444 	.word	0x20000444

0800cf70 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cf70:	b480      	push	{r7}
 800cf72:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cf74:	4b02      	ldr	r3, [pc, #8]	; (800cf80 <LmhpComplianceIsInitialized+0x10>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bc80      	pop	{r7}
 800cf7e:	4770      	bx	lr
 800cf80:	20000444 	.word	0x20000444

0800cf84 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800cf84:	b480      	push	{r7}
 800cf86:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800cf88:	4b07      	ldr	r3, [pc, #28]	; (800cfa8 <LmhpComplianceIsRunning+0x24>)
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	f083 0301 	eor.w	r3, r3, #1
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d001      	beq.n	800cf9a <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800cf96:	2300      	movs	r3, #0
 800cf98:	e001      	b.n	800cf9e <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800cf9a:	4b03      	ldr	r3, [pc, #12]	; (800cfa8 <LmhpComplianceIsRunning+0x24>)
 800cf9c:	785b      	ldrb	r3, [r3, #1]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bc80      	pop	{r7}
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop
 800cfa8:	20000444 	.word	0x20000444

0800cfac <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800cfb4:	4b0f      	ldr	r3, [pc, #60]	; (800cff4 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	f083 0301 	eor.w	r3, r3, #1
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d112      	bne.n	800cfe8 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800cfc2:	4b0c      	ldr	r3, [pc, #48]	; (800cff4 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cfc4:	785b      	ldrb	r3, [r3, #1]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00f      	beq.n	800cfea <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d10b      	bne.n	800cfea <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d007      	beq.n	800cfea <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800cfda:	4b06      	ldr	r3, [pc, #24]	; (800cff4 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cfdc:	899b      	ldrh	r3, [r3, #12]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	4b04      	ldr	r3, [pc, #16]	; (800cff4 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cfe4:	819a      	strh	r2, [r3, #12]
 800cfe6:	e000      	b.n	800cfea <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800cfe8:	bf00      	nop
    }
}
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bc80      	pop	{r7}
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	20000444 	.word	0x20000444

0800cff8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d000:	4b12      	ldr	r3, [pc, #72]	; (800d04c <LmhpComplianceOnMlmeConfirm+0x54>)
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	f083 0301 	eor.w	r3, r3, #1
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d116      	bne.n	800d03c <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d00e:	4b0f      	ldr	r3, [pc, #60]	; (800d04c <LmhpComplianceOnMlmeConfirm+0x54>)
 800d010:	785b      	ldrb	r3, [r3, #1]
 800d012:	f083 0301 	eor.w	r3, r3, #1
 800d016:	b2db      	uxtb	r3, r3
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d111      	bne.n	800d040 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	2b04      	cmp	r3, #4
 800d022:	d10e      	bne.n	800d042 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800d024:	4b09      	ldr	r3, [pc, #36]	; (800d04c <LmhpComplianceOnMlmeConfirm+0x54>)
 800d026:	2201      	movs	r2, #1
 800d028:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	7a1a      	ldrb	r2, [r3, #8]
 800d02e:	4b07      	ldr	r3, [pc, #28]	; (800d04c <LmhpComplianceOnMlmeConfirm+0x54>)
 800d030:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	7a5a      	ldrb	r2, [r3, #9]
 800d036:	4b05      	ldr	r3, [pc, #20]	; (800d04c <LmhpComplianceOnMlmeConfirm+0x54>)
 800d038:	741a      	strb	r2, [r3, #16]
 800d03a:	e002      	b.n	800d042 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d03c:	bf00      	nop
 800d03e:	e000      	b.n	800d042 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d040:	bf00      	nop
    }
}
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	bc80      	pop	{r7}
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	20000444 	.word	0x20000444

0800d050 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800d050:	b590      	push	{r4, r7, lr}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d056:	4b33      	ldr	r3, [pc, #204]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	f083 0301 	eor.w	r3, r3, #1
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d064:	f04f 33ff 	mov.w	r3, #4294967295
 800d068:	e058      	b.n	800d11c <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800d06a:	4b2e      	ldr	r3, [pc, #184]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d06c:	785b      	ldrb	r3, [r3, #1]
 800d06e:	f083 0301 	eor.w	r3, r3, #1
 800d072:	b2db      	uxtb	r3, r3
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d078:	2300      	movs	r3, #0
 800d07a:	e04f      	b.n	800d11c <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800d07c:	4b29      	ldr	r3, [pc, #164]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d07e:	7b9b      	ldrb	r3, [r3, #14]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d019      	beq.n	800d0b8 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800d084:	4b27      	ldr	r3, [pc, #156]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d086:	2200      	movs	r2, #0
 800d088:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800d08a:	4b26      	ldr	r3, [pc, #152]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d08c:	2203      	movs	r2, #3
 800d08e:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d090:	4b24      	ldr	r3, [pc, #144]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	2205      	movs	r2, #5
 800d096:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d098:	4b22      	ldr	r3, [pc, #136]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	3301      	adds	r3, #1
 800d09e:	4a21      	ldr	r2, [pc, #132]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0a0:	7bd2      	ldrb	r2, [r2, #15]
 800d0a2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d0a4:	4b1f      	ldr	r3, [pc, #124]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	3302      	adds	r3, #2
 800d0aa:	4a1e      	ldr	r2, [pc, #120]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0ac:	7c12      	ldrb	r2, [r2, #16]
 800d0ae:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d0b0:	4b1c      	ldr	r3, [pc, #112]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	709a      	strb	r2, [r3, #2]
 800d0b6:	e01c      	b.n	800d0f2 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d0b8:	4b1a      	ldr	r3, [pc, #104]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0ba:	789b      	ldrb	r3, [r3, #2]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d005      	beq.n	800d0cc <LmhpComplianceTxProcess+0x7c>
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	d116      	bne.n	800d0f2 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800d0c4:	4b17      	ldr	r3, [pc, #92]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	709a      	strb	r2, [r3, #2]
            break;
 800d0ca:	e012      	b.n	800d0f2 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800d0cc:	4b15      	ldr	r3, [pc, #84]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d0d2:	4b14      	ldr	r3, [pc, #80]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0d4:	899b      	ldrh	r3, [r3, #12]
 800d0d6:	0a1b      	lsrs	r3, r3, #8
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	4b12      	ldr	r3, [pc, #72]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	b2d2      	uxtb	r2, r2
 800d0e0:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d0e2:	4b10      	ldr	r3, [pc, #64]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0e4:	899a      	ldrh	r2, [r3, #12]
 800d0e6:	4b0f      	ldr	r3, [pc, #60]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	b2d2      	uxtb	r2, r2
 800d0ee:	701a      	strb	r2, [r3, #0]
            break;
 800d0f0:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d0f2:	23e0      	movs	r3, #224	; 0xe0
 800d0f4:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d0f6:	4b0b      	ldr	r3, [pc, #44]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0f8:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d0fa:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d0fc:	4b09      	ldr	r3, [pc, #36]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d0fe:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d100:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800d102:	4809      	ldr	r0, [pc, #36]	; (800d128 <LmhpComplianceTxProcess+0xd8>)
 800d104:	f00d f83a 	bl	801a17c <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800d108:	4b08      	ldr	r3, [pc, #32]	; (800d12c <LmhpComplianceTxProcess+0xdc>)
 800d10a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d10c:	4b05      	ldr	r3, [pc, #20]	; (800d124 <LmhpComplianceTxProcess+0xd4>)
 800d10e:	78db      	ldrb	r3, [r3, #3]
 800d110:	4619      	mov	r1, r3
 800d112:	4638      	mov	r0, r7
 800d114:	2301      	movs	r3, #1
 800d116:	2200      	movs	r2, #0
 800d118:	47a0      	blx	r4
 800d11a:	4603      	mov	r3, r0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	bd90      	pop	{r4, r7, pc}
 800d124:	20000444 	.word	0x20000444
 800d128:	2000042c 	.word	0x2000042c
 800d12c:	200000e0 	.word	0x200000e0

0800d130 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b0a2      	sub	sp, #136	; 0x88
 800d134:	af02      	add	r7, sp, #8
 800d136:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d138:	4bae      	ldr	r3, [pc, #696]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	f083 0301 	eor.w	r3, r3, #1
 800d140:	b2db      	uxtb	r3, r3
 800d142:	2b00      	cmp	r3, #0
 800d144:	f040 81c0 	bne.w	800d4c8 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7b5b      	ldrb	r3, [r3, #13]
 800d14c:	f083 0301 	eor.w	r3, r3, #1
 800d150:	b2db      	uxtb	r3, r3
 800d152:	2b00      	cmp	r3, #0
 800d154:	f040 81ba 	bne.w	800d4cc <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d158:	4ba6      	ldr	r3, [pc, #664]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d15a:	785b      	ldrb	r3, [r3, #1]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00c      	beq.n	800d17a <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	7b9b      	ldrb	r3, [r3, #14]
 800d164:	f083 0301 	eor.w	r3, r3, #1
 800d168:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d005      	beq.n	800d17a <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d16e:	4ba1      	ldr	r3, [pc, #644]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d170:	899b      	ldrh	r3, [r3, #12]
 800d172:	3301      	adds	r3, #1
 800d174:	b29a      	uxth	r2, r3
 800d176:	4b9f      	ldr	r3, [pc, #636]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d178:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	78db      	ldrb	r3, [r3, #3]
 800d17e:	2be0      	cmp	r3, #224	; 0xe0
 800d180:	f040 81a6 	bne.w	800d4d0 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d184:	4b9b      	ldr	r3, [pc, #620]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d186:	785b      	ldrb	r3, [r3, #1]
 800d188:	f083 0301 	eor.w	r3, r3, #1
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d060      	beq.n	800d254 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	7b1b      	ldrb	r3, [r3, #12]
 800d196:	2b04      	cmp	r3, #4
 800d198:	f040 819f 	bne.w	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	f040 8199 	bne.w	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	689b      	ldr	r3, [r3, #8]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	f040 8192 	bne.w	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	3302      	adds	r3, #2
 800d1bc:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	f040 818b 	bne.w	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	3303      	adds	r3, #3
 800d1ca:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	f040 8184 	bne.w	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d1d2:	4b88      	ldr	r3, [pc, #544]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d1d8:	4b86      	ldr	r3, [pc, #536]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1da:	22e0      	movs	r2, #224	; 0xe0
 800d1dc:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d1de:	4b85      	ldr	r3, [pc, #532]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1e0:	2202      	movs	r2, #2
 800d1e2:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d1e4:	4b83      	ldr	r3, [pc, #524]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d1ea:	4b82      	ldr	r3, [pc, #520]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d1f0:	4b80      	ldr	r3, [pc, #512]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d1f6:	4b7f      	ldr	r3, [pc, #508]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d1fc:	4b7d      	ldr	r3, [pc, #500]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1fe:	2201      	movs	r2, #1
 800d200:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d202:	4b7c      	ldr	r3, [pc, #496]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d204:	2201      	movs	r2, #1
 800d206:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d208:	2304      	movs	r3, #4
 800d20a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d20c:	2301      	movs	r3, #1
 800d20e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d210:	f107 0308 	add.w	r3, r7, #8
 800d214:	4618      	mov	r0, r3
 800d216:	f004 f829 	bl	801126c <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d21a:	2000      	movs	r0, #0
 800d21c:	f004 fd9a 	bl	8011d54 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d220:	4b75      	ldr	r3, [pc, #468]	; (800d3f8 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d003      	beq.n	800d232 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d22a:	4b73      	ldr	r3, [pc, #460]	; (800d3f8 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d232:	2300      	movs	r3, #0
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	4b71      	ldr	r3, [pc, #452]	; (800d3fc <LmhpComplianceOnMcpsIndication+0x2cc>)
 800d238:	2200      	movs	r2, #0
 800d23a:	f04f 31ff 	mov.w	r1, #4294967295
 800d23e:	4870      	ldr	r0, [pc, #448]	; (800d400 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d240:	f00c ff66 	bl	801a110 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d244:	f241 3188 	movw	r1, #5000	; 0x1388
 800d248:	486d      	ldr	r0, [pc, #436]	; (800d400 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d24a:	f00d f875 	bl	801a338 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d24e:	f7ff feff 	bl	800d050 <LmhpComplianceTxProcess>
 800d252:	e142      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	781a      	ldrb	r2, [r3, #0]
 800d25a:	4b66      	ldr	r3, [pc, #408]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d25c:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d25e:	4b65      	ldr	r3, [pc, #404]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d260:	789b      	ldrb	r3, [r3, #2]
 800d262:	2b0a      	cmp	r3, #10
 800d264:	f200 8136 	bhi.w	800d4d4 <LmhpComplianceOnMcpsIndication+0x3a4>
 800d268:	a201      	add	r2, pc, #4	; (adr r2, 800d270 <LmhpComplianceOnMcpsIndication+0x140>)
 800d26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26e:	bf00      	nop
 800d270:	0800d29d 	.word	0x0800d29d
 800d274:	0800d2e7 	.word	0x0800d2e7
 800d278:	0800d2ef 	.word	0x0800d2ef
 800d27c:	0800d2fd 	.word	0x0800d2fd
 800d280:	0800d30b 	.word	0x0800d30b
 800d284:	0800d363 	.word	0x0800d363
 800d288:	0800d375 	.word	0x0800d375
 800d28c:	0800d3c5 	.word	0x0800d3c5
 800d290:	0800d481 	.word	0x0800d481
 800d294:	0800d493 	.word	0x0800d493
 800d298:	0800d4ad 	.word	0x0800d4ad
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d29c:	4858      	ldr	r0, [pc, #352]	; (800d400 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d29e:	f00c ffdb 	bl	801a258 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d2a2:	4b54      	ldr	r3, [pc, #336]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d2a8:	4b52      	ldr	r3, [pc, #328]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d2ae:	2304      	movs	r3, #4
 800d2b0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d2b2:	4b51      	ldr	r3, [pc, #324]	; (800d3f8 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d2ba:	f107 0308 	add.w	r3, r7, #8
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f003 ffd4 	bl	801126c <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d2c4:	4b4c      	ldr	r3, [pc, #304]	; (800d3f8 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	785b      	ldrb	r3, [r3, #1]
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f004 fd42 	bl	8011d54 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d2d0:	4b49      	ldr	r3, [pc, #292]	; (800d3f8 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	f000 80fe 	beq.w	800d4d8 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d2dc:	4b46      	ldr	r3, [pc, #280]	; (800d3f8 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	4798      	blx	r3
                }
            }
            break;
 800d2e4:	e0f8      	b.n	800d4d8 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d2e6:	4b43      	ldr	r3, [pc, #268]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	719a      	strb	r2, [r3, #6]
            break;
 800d2ec:	e0f5      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d2ee:	4b41      	ldr	r3, [pc, #260]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d2f4:	4b3f      	ldr	r3, [pc, #252]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	709a      	strb	r2, [r3, #2]
            break;
 800d2fa:	e0ee      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d2fc:	4b3d      	ldr	r3, [pc, #244]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2fe:	2200      	movs	r2, #0
 800d300:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d302:	4b3c      	ldr	r3, [pc, #240]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d304:	2201      	movs	r2, #1
 800d306:	709a      	strb	r2, [r3, #2]
            break;
 800d308:	e0e7      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	7b1a      	ldrb	r2, [r3, #12]
 800d30e:	4b39      	ldr	r3, [pc, #228]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d310:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d312:	4b38      	ldr	r3, [pc, #224]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d314:	689b      	ldr	r3, [r3, #8]
 800d316:	2204      	movs	r2, #4
 800d318:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d31a:	2301      	movs	r3, #1
 800d31c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d320:	e012      	b.n	800d348 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	689a      	ldr	r2, [r3, #8]
 800d326:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d32a:	4413      	add	r3, r2
 800d32c:	781a      	ldrb	r2, [r3, #0]
 800d32e:	4b31      	ldr	r3, [pc, #196]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d330:	6899      	ldr	r1, [r3, #8]
 800d332:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d336:	440b      	add	r3, r1
 800d338:	3201      	adds	r2, #1
 800d33a:	b2d2      	uxtb	r2, r2
 800d33c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d33e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d342:	3301      	adds	r3, #1
 800d344:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d348:	4b2a      	ldr	r3, [pc, #168]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d34a:	795a      	ldrb	r2, [r3, #5]
 800d34c:	4b29      	ldr	r3, [pc, #164]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d34e:	799b      	ldrb	r3, [r3, #6]
 800d350:	4293      	cmp	r3, r2
 800d352:	bf28      	it	cs
 800d354:	4613      	movcs	r3, r2
 800d356:	b2db      	uxtb	r3, r3
 800d358:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d3e0      	bcc.n	800d322 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d360:	e0bb      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d362:	2304      	movs	r3, #4
 800d364:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d368:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d36c:	4618      	mov	r0, r3
 800d36e:	f004 fabb 	bl	80118e8 <LoRaMacMlmeRequest>
            }
            break;
 800d372:	e0b2      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d374:	4822      	ldr	r0, [pc, #136]	; (800d400 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d376:	f00c ff6f 	bl	801a258 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d37a:	4b1e      	ldr	r3, [pc, #120]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d37c:	2200      	movs	r2, #0
 800d37e:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d380:	4b1c      	ldr	r3, [pc, #112]	; (800d3f4 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d382:	2200      	movs	r2, #0
 800d384:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d386:	2304      	movs	r3, #4
 800d388:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d38a:	4b1b      	ldr	r3, [pc, #108]	; (800d3f8 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d392:	f107 0308 	add.w	r3, r7, #8
 800d396:	4618      	mov	r0, r3
 800d398:	f003 ff68 	bl	801126c <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d39c:	4b16      	ldr	r3, [pc, #88]	; (800d3f8 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	785b      	ldrb	r3, [r3, #1]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f004 fcd6 	bl	8011d54 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d3a8:	4b13      	ldr	r3, [pc, #76]	; (800d3f8 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d003      	beq.n	800d3ba <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d3b2:	4b11      	ldr	r3, [pc, #68]	; (800d3f8 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800d3ba:	4b12      	ldr	r3, [pc, #72]	; (800d404 <LmhpComplianceOnMcpsIndication+0x2d4>)
 800d3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3be:	2002      	movs	r0, #2
 800d3c0:	4798      	blx	r3
            }
            break;
 800d3c2:	e08a      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	7b1b      	ldrb	r3, [r3, #12]
 800d3c8:	2b03      	cmp	r3, #3
 800d3ca:	d11d      	bne.n	800d408 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d3cc:	2305      	movs	r3, #5
 800d3ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	021b      	lsls	r3, r3, #8
 800d3dc:	b21a      	sxth	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	3302      	adds	r3, #2
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	b21b      	sxth	r3, r3
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	b21b      	sxth	r3, r3
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d3f2:	e03c      	b.n	800d46e <LmhpComplianceOnMcpsIndication+0x33e>
 800d3f4:	20000444 	.word	0x20000444
 800d3f8:	20000458 	.word	0x20000458
 800d3fc:	0800d4f1 	.word	0x0800d4f1
 800d400:	2000042c 	.word	0x2000042c
 800d404:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	7b1b      	ldrb	r3, [r3, #12]
 800d40c:	2b07      	cmp	r3, #7
 800d40e:	d12e      	bne.n	800d46e <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d410:	2306      	movs	r3, #6
 800d412:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	3301      	adds	r3, #1
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	021b      	lsls	r3, r3, #8
 800d420:	b21a      	sxth	r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	689b      	ldr	r3, [r3, #8]
 800d426:	3302      	adds	r3, #2
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	b21b      	sxth	r3, r3
 800d42c:	4313      	orrs	r3, r2
 800d42e:	b21b      	sxth	r3, r3
 800d430:	b29b      	uxth	r3, r3
 800d432:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	3303      	adds	r3, #3
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	041a      	lsls	r2, r3, #16
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	3304      	adds	r3, #4
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	021b      	lsls	r3, r3, #8
 800d44a:	4313      	orrs	r3, r2
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	6892      	ldr	r2, [r2, #8]
 800d450:	3205      	adds	r2, #5
 800d452:	7812      	ldrb	r2, [r2, #0]
 800d454:	4313      	orrs	r3, r2
 800d456:	461a      	mov	r2, r3
 800d458:	2364      	movs	r3, #100	; 0x64
 800d45a:	fb03 f302 	mul.w	r3, r3, r2
 800d45e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	3306      	adds	r3, #6
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	b25b      	sxtb	r3, r3
 800d46a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d46e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d472:	4618      	mov	r0, r3
 800d474:	f004 fa38 	bl	80118e8 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d478:	4b19      	ldr	r3, [pc, #100]	; (800d4e0 <LmhpComplianceOnMcpsIndication+0x3b0>)
 800d47a:	2201      	movs	r2, #1
 800d47c:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d47e:	e02c      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d480:	230a      	movs	r3, #10
 800d482:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d486:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d48a:	4618      	mov	r0, r3
 800d48c:	f004 fa2c 	bl	80118e8 <LoRaMacMlmeRequest>
            }
            break;
 800d490:	e023      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d492:	2300      	movs	r3, #0
 800d494:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	689b      	ldr	r3, [r3, #8]
 800d49a:	3301      	adds	r3, #1
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d4a0:	f107 0308 	add.w	r3, r7, #8
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f003 fee1 	bl	801126c <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d4aa:	e016      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d4ac:	230d      	movs	r3, #13
 800d4ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	785b      	ldrb	r3, [r3, #1]
 800d4b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d4bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f004 fa11 	bl	80118e8 <LoRaMacMlmeRequest>
            }
            break;
 800d4c6:	e008      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d4c8:	bf00      	nop
 800d4ca:	e006      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d4cc:	bf00      	nop
 800d4ce:	e004      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d4d0:	bf00      	nop
 800d4d2:	e002      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800d4d4:	bf00      	nop
 800d4d6:	e000      	b.n	800d4da <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800d4d8:	bf00      	nop
        }
    }
}
 800d4da:	3780      	adds	r7, #128	; 0x80
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	20000444 	.word	0x20000444

0800d4e4 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d4e8:	bf00      	nop
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bc80      	pop	{r7}
 800d4ee:	4770      	bx	lr

0800d4f0 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d4f8:	f7ff fdaa 	bl	800d050 <LmhpComplianceTxProcess>
}
 800d4fc:	bf00      	nop
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d504:	b590      	push	{r4, r7, lr}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d50a:	f00c ffbf 	bl	801a48c <UTIL_TIMER_GetCurrentTime>
 800d50e:	4603      	mov	r3, r0
 800d510:	4a16      	ldr	r2, [pc, #88]	; (800d56c <OnRadioTxDone+0x68>)
 800d512:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d514:	4c16      	ldr	r4, [pc, #88]	; (800d570 <OnRadioTxDone+0x6c>)
 800d516:	463b      	mov	r3, r7
 800d518:	4618      	mov	r0, r3
 800d51a:	f00c fa39 	bl	8019990 <SysTimeGet>
 800d51e:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d522:	463a      	mov	r2, r7
 800d524:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d528:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d52c:	4a11      	ldr	r2, [pc, #68]	; (800d574 <OnRadioTxDone+0x70>)
 800d52e:	7813      	ldrb	r3, [r2, #0]
 800d530:	f043 0310 	orr.w	r3, r3, #16
 800d534:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d536:	4b0e      	ldr	r3, [pc, #56]	; (800d570 <OnRadioTxDone+0x6c>)
 800d538:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00a      	beq.n	800d556 <OnRadioTxDone+0x52>
 800d540:	4b0b      	ldr	r3, [pc, #44]	; (800d570 <OnRadioTxDone+0x6c>)
 800d542:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d004      	beq.n	800d556 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d54c:	4b08      	ldr	r3, [pc, #32]	; (800d570 <OnRadioTxDone+0x6c>)
 800d54e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d552:	691b      	ldr	r3, [r3, #16]
 800d554:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d556:	4b08      	ldr	r3, [pc, #32]	; (800d578 <OnRadioTxDone+0x74>)
 800d558:	2201      	movs	r2, #1
 800d55a:	2100      	movs	r1, #0
 800d55c:	2002      	movs	r0, #2
 800d55e:	f00d f885 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
}
 800d562:	bf00      	nop
 800d564:	370c      	adds	r7, #12
 800d566:	46bd      	mov	sp, r7
 800d568:	bd90      	pop	{r4, r7, pc}
 800d56a:	bf00      	nop
 800d56c:	200017ac 	.word	0x200017ac
 800d570:	2000045c 	.word	0x2000045c
 800d574:	20000cb0 	.word	0x20000cb0
 800d578:	0801b3ac 	.word	0x0801b3ac

0800d57c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	4608      	mov	r0, r1
 800d586:	4611      	mov	r1, r2
 800d588:	461a      	mov	r2, r3
 800d58a:	4603      	mov	r3, r0
 800d58c:	817b      	strh	r3, [r7, #10]
 800d58e:	460b      	mov	r3, r1
 800d590:	813b      	strh	r3, [r7, #8]
 800d592:	4613      	mov	r3, r2
 800d594:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d596:	f00c ff79 	bl	801a48c <UTIL_TIMER_GetCurrentTime>
 800d59a:	4603      	mov	r3, r0
 800d59c:	4a16      	ldr	r2, [pc, #88]	; (800d5f8 <OnRadioRxDone+0x7c>)
 800d59e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d5a0:	4a15      	ldr	r2, [pc, #84]	; (800d5f8 <OnRadioRxDone+0x7c>)
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d5a6:	4a14      	ldr	r2, [pc, #80]	; (800d5f8 <OnRadioRxDone+0x7c>)
 800d5a8:	897b      	ldrh	r3, [r7, #10]
 800d5aa:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d5ac:	4a12      	ldr	r2, [pc, #72]	; (800d5f8 <OnRadioRxDone+0x7c>)
 800d5ae:	893b      	ldrh	r3, [r7, #8]
 800d5b0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d5b2:	4a11      	ldr	r2, [pc, #68]	; (800d5f8 <OnRadioRxDone+0x7c>)
 800d5b4:	79fb      	ldrb	r3, [r7, #7]
 800d5b6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d5b8:	4a10      	ldr	r2, [pc, #64]	; (800d5fc <OnRadioRxDone+0x80>)
 800d5ba:	7813      	ldrb	r3, [r2, #0]
 800d5bc:	f043 0308 	orr.w	r3, r3, #8
 800d5c0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d5c2:	4b0f      	ldr	r3, [pc, #60]	; (800d600 <OnRadioRxDone+0x84>)
 800d5c4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00a      	beq.n	800d5e2 <OnRadioRxDone+0x66>
 800d5cc:	4b0c      	ldr	r3, [pc, #48]	; (800d600 <OnRadioRxDone+0x84>)
 800d5ce:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5d2:	691b      	ldr	r3, [r3, #16]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d004      	beq.n	800d5e2 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d5d8:	4b09      	ldr	r3, [pc, #36]	; (800d600 <OnRadioRxDone+0x84>)
 800d5da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5de:	691b      	ldr	r3, [r3, #16]
 800d5e0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d5e2:	4b08      	ldr	r3, [pc, #32]	; (800d604 <OnRadioRxDone+0x88>)
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	2002      	movs	r0, #2
 800d5ea:	f00d f83f 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
}
 800d5ee:	bf00      	nop
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	200017b0 	.word	0x200017b0
 800d5fc:	20000cb0 	.word	0x20000cb0
 800d600:	2000045c 	.word	0x2000045c
 800d604:	0801b3bc 	.word	0x0801b3bc

0800d608 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d60c:	4a0e      	ldr	r2, [pc, #56]	; (800d648 <OnRadioTxTimeout+0x40>)
 800d60e:	7813      	ldrb	r3, [r2, #0]
 800d610:	f043 0304 	orr.w	r3, r3, #4
 800d614:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d616:	4b0d      	ldr	r3, [pc, #52]	; (800d64c <OnRadioTxTimeout+0x44>)
 800d618:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00a      	beq.n	800d636 <OnRadioTxTimeout+0x2e>
 800d620:	4b0a      	ldr	r3, [pc, #40]	; (800d64c <OnRadioTxTimeout+0x44>)
 800d622:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d004      	beq.n	800d636 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d62c:	4b07      	ldr	r3, [pc, #28]	; (800d64c <OnRadioTxTimeout+0x44>)
 800d62e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d632:	691b      	ldr	r3, [r3, #16]
 800d634:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d636:	4b06      	ldr	r3, [pc, #24]	; (800d650 <OnRadioTxTimeout+0x48>)
 800d638:	2201      	movs	r2, #1
 800d63a:	2100      	movs	r1, #0
 800d63c:	2002      	movs	r0, #2
 800d63e:	f00d f815 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
}
 800d642:	bf00      	nop
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	20000cb0 	.word	0x20000cb0
 800d64c:	2000045c 	.word	0x2000045c
 800d650:	0801b3cc 	.word	0x0801b3cc

0800d654 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d658:	4a0b      	ldr	r2, [pc, #44]	; (800d688 <OnRadioRxError+0x34>)
 800d65a:	7813      	ldrb	r3, [r2, #0]
 800d65c:	f043 0302 	orr.w	r3, r3, #2
 800d660:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d662:	4b0a      	ldr	r3, [pc, #40]	; (800d68c <OnRadioRxError+0x38>)
 800d664:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00a      	beq.n	800d682 <OnRadioRxError+0x2e>
 800d66c:	4b07      	ldr	r3, [pc, #28]	; (800d68c <OnRadioRxError+0x38>)
 800d66e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d004      	beq.n	800d682 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d678:	4b04      	ldr	r3, [pc, #16]	; (800d68c <OnRadioRxError+0x38>)
 800d67a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d67e:	691b      	ldr	r3, [r3, #16]
 800d680:	4798      	blx	r3
    }
}
 800d682:	bf00      	nop
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	20000cb0 	.word	0x20000cb0
 800d68c:	2000045c 	.word	0x2000045c

0800d690 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d694:	4a0e      	ldr	r2, [pc, #56]	; (800d6d0 <OnRadioRxTimeout+0x40>)
 800d696:	7813      	ldrb	r3, [r2, #0]
 800d698:	f043 0301 	orr.w	r3, r3, #1
 800d69c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d69e:	4b0d      	ldr	r3, [pc, #52]	; (800d6d4 <OnRadioRxTimeout+0x44>)
 800d6a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d00a      	beq.n	800d6be <OnRadioRxTimeout+0x2e>
 800d6a8:	4b0a      	ldr	r3, [pc, #40]	; (800d6d4 <OnRadioRxTimeout+0x44>)
 800d6aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d6ae:	691b      	ldr	r3, [r3, #16]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d004      	beq.n	800d6be <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d6b4:	4b07      	ldr	r3, [pc, #28]	; (800d6d4 <OnRadioRxTimeout+0x44>)
 800d6b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d6ba:	691b      	ldr	r3, [r3, #16]
 800d6bc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d6be:	4b06      	ldr	r3, [pc, #24]	; (800d6d8 <OnRadioRxTimeout+0x48>)
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	2002      	movs	r0, #2
 800d6c6:	f00c ffd1 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
}
 800d6ca:	bf00      	nop
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	20000cb0 	.word	0x20000cb0
 800d6d4:	2000045c 	.word	0x2000045c
 800d6d8:	0801b3dc 	.word	0x0801b3dc

0800d6dc <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d6dc:	b480      	push	{r7}
 800d6de:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d6e0:	4b08      	ldr	r3, [pc, #32]	; (800d704 <UpdateRxSlotIdleState+0x28>)
 800d6e2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d004      	beq.n	800d6f4 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d6ea:	4b07      	ldr	r3, [pc, #28]	; (800d708 <UpdateRxSlotIdleState+0x2c>)
 800d6ec:	2206      	movs	r2, #6
 800d6ee:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d6f2:	e003      	b.n	800d6fc <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d6f4:	4b04      	ldr	r3, [pc, #16]	; (800d708 <UpdateRxSlotIdleState+0x2c>)
 800d6f6:	2202      	movs	r2, #2
 800d6f8:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800d6fc:	bf00      	nop
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bc80      	pop	{r7}
 800d702:	4770      	bx	lr
 800d704:	20000964 	.word	0x20000964
 800d708:	2000045c 	.word	0x2000045c

0800d70c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b08e      	sub	sp, #56	; 0x38
 800d710:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d712:	4b44      	ldr	r3, [pc, #272]	; (800d824 <ProcessRadioTxDone+0x118>)
 800d714:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d002      	beq.n	800d722 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d71c:	4b42      	ldr	r3, [pc, #264]	; (800d828 <ProcessRadioTxDone+0x11c>)
 800d71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d720:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d722:	4b42      	ldr	r3, [pc, #264]	; (800d82c <ProcessRadioTxDone+0x120>)
 800d724:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d728:	4619      	mov	r1, r3
 800d72a:	4841      	ldr	r0, [pc, #260]	; (800d830 <ProcessRadioTxDone+0x124>)
 800d72c:	f00c fe04 	bl	801a338 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d730:	483f      	ldr	r0, [pc, #252]	; (800d830 <ProcessRadioTxDone+0x124>)
 800d732:	f00c fd23 	bl	801a17c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d736:	4b3d      	ldr	r3, [pc, #244]	; (800d82c <ProcessRadioTxDone+0x120>)
 800d738:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d73c:	4619      	mov	r1, r3
 800d73e:	483d      	ldr	r0, [pc, #244]	; (800d834 <ProcessRadioTxDone+0x128>)
 800d740:	f00c fdfa 	bl	801a338 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d744:	483b      	ldr	r0, [pc, #236]	; (800d834 <ProcessRadioTxDone+0x128>)
 800d746:	f00c fd19 	bl	801a17c <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d74a:	4b36      	ldr	r3, [pc, #216]	; (800d824 <ProcessRadioTxDone+0x118>)
 800d74c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d750:	2b02      	cmp	r3, #2
 800d752:	d004      	beq.n	800d75e <ProcessRadioTxDone+0x52>
 800d754:	4b35      	ldr	r3, [pc, #212]	; (800d82c <ProcessRadioTxDone+0x120>)
 800d756:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d019      	beq.n	800d792 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d75e:	2316      	movs	r3, #22
 800d760:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d764:	4b2f      	ldr	r3, [pc, #188]	; (800d824 <ProcessRadioTxDone+0x118>)
 800d766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d76a:	f107 0220 	add.w	r2, r7, #32
 800d76e:	4611      	mov	r1, r2
 800d770:	4618      	mov	r0, r3
 800d772:	f006 fb55 	bl	8013e20 <RegionGetPhyParam>
 800d776:	4603      	mov	r3, r0
 800d778:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d77a:	4b2c      	ldr	r3, [pc, #176]	; (800d82c <ProcessRadioTxDone+0x120>)
 800d77c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	4413      	add	r3, r2
 800d784:	4619      	mov	r1, r3
 800d786:	482c      	ldr	r0, [pc, #176]	; (800d838 <ProcessRadioTxDone+0x12c>)
 800d788:	f00c fdd6 	bl	801a338 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800d78c:	482a      	ldr	r0, [pc, #168]	; (800d838 <ProcessRadioTxDone+0x12c>)
 800d78e:	f00c fcf5 	bl	801a17c <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d792:	4b2a      	ldr	r3, [pc, #168]	; (800d83c <ProcessRadioTxDone+0x130>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a23      	ldr	r2, [pc, #140]	; (800d824 <ProcessRadioTxDone+0x118>)
 800d798:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d79a:	4b24      	ldr	r3, [pc, #144]	; (800d82c <ProcessRadioTxDone+0x120>)
 800d79c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800d7a0:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d7a2:	4b26      	ldr	r3, [pc, #152]	; (800d83c <ProcessRadioTxDone+0x130>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d7a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f00c f927 	bl	8019a00 <SysTimeGetMcuTime>
 800d7b2:	4638      	mov	r0, r7
 800d7b4:	4b1b      	ldr	r3, [pc, #108]	; (800d824 <ProcessRadioTxDone+0x118>)
 800d7b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800d7ba:	9200      	str	r2, [sp, #0]
 800d7bc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d7c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d7c4:	ca06      	ldmia	r2, {r1, r2}
 800d7c6:	f00c f87c 	bl	80198c2 <SysTimeSub>
 800d7ca:	f107 0314 	add.w	r3, r7, #20
 800d7ce:	463a      	mov	r2, r7
 800d7d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7d4:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d7d8:	4b14      	ldr	r3, [pc, #80]	; (800d82c <ProcessRadioTxDone+0x120>)
 800d7da:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800d7de:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d7e4:	4b0f      	ldr	r3, [pc, #60]	; (800d824 <ProcessRadioTxDone+0x118>)
 800d7e6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d101      	bne.n	800d7f2 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d7f2:	4b0c      	ldr	r3, [pc, #48]	; (800d824 <ProcessRadioTxDone+0x118>)
 800d7f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d7f8:	f107 0208 	add.w	r2, r7, #8
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	4618      	mov	r0, r3
 800d800:	f006 fb27 	bl	8013e52 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800d804:	4b09      	ldr	r3, [pc, #36]	; (800d82c <ProcessRadioTxDone+0x120>)
 800d806:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d80a:	f083 0301 	eor.w	r3, r3, #1
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	2b00      	cmp	r3, #0
 800d812:	d003      	beq.n	800d81c <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d814:	4b05      	ldr	r3, [pc, #20]	; (800d82c <ProcessRadioTxDone+0x120>)
 800d816:	2200      	movs	r2, #0
 800d818:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800d81c:	bf00      	nop
 800d81e:	3730      	adds	r7, #48	; 0x30
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	20000964 	.word	0x20000964
 800d828:	0801ba28 	.word	0x0801ba28
 800d82c:	2000045c 	.word	0x2000045c
 800d830:	200007dc 	.word	0x200007dc
 800d834:	200007f4 	.word	0x200007f4
 800d838:	20000854 	.word	0x20000854
 800d83c:	200017ac 	.word	0x200017ac

0800d840 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d844:	4b10      	ldr	r3, [pc, #64]	; (800d888 <PrepareRxDoneAbort+0x48>)
 800d846:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d84a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d84e:	4a0e      	ldr	r2, [pc, #56]	; (800d888 <PrepareRxDoneAbort+0x48>)
 800d850:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800d854:	4b0c      	ldr	r3, [pc, #48]	; (800d888 <PrepareRxDoneAbort+0x48>)
 800d856:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d002      	beq.n	800d864 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800d85e:	2000      	movs	r0, #0
 800d860:	f001 f8f8 	bl	800ea54 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d864:	4a08      	ldr	r2, [pc, #32]	; (800d888 <PrepareRxDoneAbort+0x48>)
 800d866:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d86a:	f043 0302 	orr.w	r3, r3, #2
 800d86e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d872:	4a05      	ldr	r2, [pc, #20]	; (800d888 <PrepareRxDoneAbort+0x48>)
 800d874:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d878:	f043 0320 	orr.w	r3, r3, #32
 800d87c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800d880:	f7ff ff2c 	bl	800d6dc <UpdateRxSlotIdleState>
}
 800d884:	bf00      	nop
 800d886:	bd80      	pop	{r7, pc}
 800d888:	2000045c 	.word	0x2000045c

0800d88c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d88c:	b5b0      	push	{r4, r5, r7, lr}
 800d88e:	b0a6      	sub	sp, #152	; 0x98
 800d890:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d892:	2313      	movs	r3, #19
 800d894:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d898:	4bb9      	ldr	r3, [pc, #740]	; (800db80 <ProcessRadioRxDone+0x2f4>)
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800d89e:	4bb8      	ldr	r3, [pc, #736]	; (800db80 <ProcessRadioRxDone+0x2f4>)
 800d8a0:	891b      	ldrh	r3, [r3, #8]
 800d8a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800d8a6:	4bb6      	ldr	r3, [pc, #728]	; (800db80 <ProcessRadioRxDone+0x2f4>)
 800d8a8:	895b      	ldrh	r3, [r3, #10]
 800d8aa:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800d8ae:	4bb4      	ldr	r3, [pc, #720]	; (800db80 <ProcessRadioRxDone+0x2f4>)
 800d8b0:	7b1b      	ldrb	r3, [r3, #12]
 800d8b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d8c0:	4bb0      	ldr	r3, [pc, #704]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800d8c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d8c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800d8d6:	4bac      	ldr	r3, [pc, #688]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800d8de:	4aaa      	ldr	r2, [pc, #680]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d8e0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d8e4:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800d8e8:	4aa7      	ldr	r2, [pc, #668]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d8ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d8ee:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d8f2:	4ba5      	ldr	r3, [pc, #660]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d8f4:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800d8f8:	4ba3      	ldr	r3, [pc, #652]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d8fa:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800d8fe:	4ba2      	ldr	r3, [pc, #648]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d900:	2200      	movs	r2, #0
 800d902:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800d906:	4ba0      	ldr	r3, [pc, #640]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d908:	2200      	movs	r2, #0
 800d90a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800d90e:	4b9e      	ldr	r3, [pc, #632]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d910:	2200      	movs	r2, #0
 800d912:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800d916:	4b9c      	ldr	r3, [pc, #624]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d918:	2200      	movs	r2, #0
 800d91a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800d91e:	4b9a      	ldr	r3, [pc, #616]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d920:	2200      	movs	r2, #0
 800d922:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800d926:	4b98      	ldr	r3, [pc, #608]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d928:	2200      	movs	r2, #0
 800d92a:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800d92e:	4b96      	ldr	r3, [pc, #600]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d930:	2200      	movs	r2, #0
 800d932:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d936:	4b94      	ldr	r3, [pc, #592]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d938:	2200      	movs	r2, #0
 800d93a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d93e:	4b92      	ldr	r3, [pc, #584]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d940:	2200      	movs	r2, #0
 800d942:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800d946:	4b90      	ldr	r3, [pc, #576]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d948:	2200      	movs	r2, #0
 800d94a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d94e:	4b8e      	ldr	r3, [pc, #568]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d950:	2200      	movs	r2, #0
 800d952:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800d956:	4b8d      	ldr	r3, [pc, #564]	; (800db8c <ProcessRadioRxDone+0x300>)
 800d958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95a:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d95c:	488c      	ldr	r0, [pc, #560]	; (800db90 <ProcessRadioRxDone+0x304>)
 800d95e:	f00c fc7b 	bl	801a258 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d962:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d966:	4619      	mov	r1, r3
 800d968:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d96a:	f004 fb28 	bl	8011fbe <LoRaMacClassBRxBeacon>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00a      	beq.n	800d98a <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d974:	4a84      	ldr	r2, [pc, #528]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d976:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d97a:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d97e:	4a82      	ldr	r2, [pc, #520]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d980:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d984:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800d988:	e3bf      	b.n	800e10a <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d98a:	4b7e      	ldr	r3, [pc, #504]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800d98c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d990:	2b01      	cmp	r3, #1
 800d992:	d11e      	bne.n	800d9d2 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d994:	f004 fb26 	bl	8011fe4 <LoRaMacClassBIsPingExpected>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d00a      	beq.n	800d9b4 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d99e:	2000      	movs	r0, #0
 800d9a0:	f004 fad7 	bl	8011f52 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	f004 faf8 	bl	8011f9a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d9aa:	4b77      	ldr	r3, [pc, #476]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d9ac:	2204      	movs	r2, #4
 800d9ae:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800d9b2:	e00e      	b.n	800d9d2 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d9b4:	f004 fb1d 	bl	8011ff2 <LoRaMacClassBIsMulticastExpected>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d009      	beq.n	800d9d2 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d9be:	2000      	movs	r0, #0
 800d9c0:	f004 fad1 	bl	8011f66 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d9c4:	2000      	movs	r0, #0
 800d9c6:	f004 faf1 	bl	8011fac <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d9ca:	4b6f      	ldr	r3, [pc, #444]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800d9cc:	2205      	movs	r2, #5
 800d9ce:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800d9d2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d9d6:	1c5a      	adds	r2, r3, #1
 800d9d8:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800d9dc:	461a      	mov	r2, r3
 800d9de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9e0:	4413      	add	r3, r2
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800d9e8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d9ec:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	2b06      	cmp	r3, #6
 800d9f6:	f200 8362 	bhi.w	800e0be <ProcessRadioRxDone+0x832>
 800d9fa:	a201      	add	r2, pc, #4	; (adr r2, 800da00 <ProcessRadioRxDone+0x174>)
 800d9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da00:	0800da1d 	.word	0x0800da1d
 800da04:	0800e0bf 	.word	0x0800e0bf
 800da08:	0800db9d 	.word	0x0800db9d
 800da0c:	0800e0bf 	.word	0x0800e0bf
 800da10:	0800db95 	.word	0x0800db95
 800da14:	0800e0bf 	.word	0x0800e0bf
 800da18:	0800e065 	.word	0x0800e065
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800da1c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800da20:	2b10      	cmp	r3, #16
 800da22:	d806      	bhi.n	800da32 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800da24:	4b58      	ldr	r3, [pc, #352]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800da26:	2201      	movs	r2, #1
 800da28:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800da2c:	f7ff ff08 	bl	800d840 <PrepareRxDoneAbort>
                return;
 800da30:	e36b      	b.n	800e10a <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800da32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da34:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800da36:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800da3e:	4b51      	ldr	r3, [pc, #324]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800da40:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800da44:	2b00      	cmp	r3, #0
 800da46:	d006      	beq.n	800da56 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800da48:	4b4f      	ldr	r3, [pc, #316]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800da4a:	2201      	movs	r2, #1
 800da4c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800da50:	f7ff fef6 	bl	800d840 <PrepareRxDoneAbort>
                return;
 800da54:	e359      	b.n	800e10a <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800da56:	f7fe fbcf 	bl	800c1f8 <SecureElementGetJoinEui>
 800da5a:	4601      	mov	r1, r0
 800da5c:	f107 0308 	add.w	r3, r7, #8
 800da60:	461a      	mov	r2, r3
 800da62:	20ff      	movs	r0, #255	; 0xff
 800da64:	f005 fc60 	bl	8013328 <LoRaMacCryptoHandleJoinAccept>
 800da68:	4603      	mov	r3, r0
 800da6a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800da6e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800da72:	2b00      	cmp	r3, #0
 800da74:	d172      	bne.n	800db5c <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800da76:	7c7b      	ldrb	r3, [r7, #17]
 800da78:	461a      	mov	r2, r3
 800da7a:	4b42      	ldr	r3, [pc, #264]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800da7c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800da80:	4b40      	ldr	r3, [pc, #256]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800da82:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800da86:	7cbb      	ldrb	r3, [r7, #18]
 800da88:	021b      	lsls	r3, r3, #8
 800da8a:	4313      	orrs	r3, r2
 800da8c:	4a3d      	ldr	r2, [pc, #244]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800da8e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800da92:	4b3c      	ldr	r3, [pc, #240]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800da94:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800da98:	7cfb      	ldrb	r3, [r7, #19]
 800da9a:	041b      	lsls	r3, r3, #16
 800da9c:	4313      	orrs	r3, r2
 800da9e:	4a39      	ldr	r2, [pc, #228]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800daa0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	4a37      	ldr	r2, [pc, #220]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800daa8:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800daac:	7e3b      	ldrb	r3, [r7, #24]
 800daae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	461a      	mov	r2, r3
 800dab6:	4b33      	ldr	r3, [pc, #204]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800dab8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dabc:	7e3b      	ldrb	r3, [r7, #24]
 800dabe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	461a      	mov	r2, r3
 800dac6:	4b2f      	ldr	r3, [pc, #188]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800dac8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dacc:	7e3b      	ldrb	r3, [r7, #24]
 800dace:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	461a      	mov	r2, r3
 800dad6:	4b2b      	ldr	r3, [pc, #172]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800dad8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800dadc:	7e7b      	ldrb	r3, [r7, #25]
 800dade:	461a      	mov	r2, r3
 800dae0:	4b28      	ldr	r3, [pc, #160]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800dae2:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800dae4:	4b27      	ldr	r3, [pc, #156]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800dae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d102      	bne.n	800daf2 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800daec:	4b25      	ldr	r3, [pc, #148]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800daee:	2201      	movs	r2, #1
 800daf0:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800daf2:	4b24      	ldr	r3, [pc, #144]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800daf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dafa:	fb02 f303 	mul.w	r3, r2, r3
 800dafe:	4a21      	ldr	r2, [pc, #132]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800db00:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800db02:	4b20      	ldr	r3, [pc, #128]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800db04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db06:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800db0a:	4a1e      	ldr	r2, [pc, #120]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800db0c:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800db0e:	4b1d      	ldr	r3, [pc, #116]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800db10:	2200      	movs	r2, #0
 800db12:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800db16:	f107 0308 	add.w	r3, r7, #8
 800db1a:	3312      	adds	r3, #18
 800db1c:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800db1e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800db22:	b2db      	uxtb	r3, r3
 800db24:	3b11      	subs	r3, #17
 800db26:	b2db      	uxtb	r3, r3
 800db28:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800db2c:	4b15      	ldr	r3, [pc, #84]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800db2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db32:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800db36:	4611      	mov	r1, r2
 800db38:	4618      	mov	r0, r3
 800db3a:	f006 f9c4 	bl	8013ec6 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800db3e:	4b11      	ldr	r3, [pc, #68]	; (800db84 <ProcessRadioRxDone+0x2f8>)
 800db40:	2202      	movs	r2, #2
 800db42:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800db46:	2001      	movs	r0, #1
 800db48:	f004 ff18 	bl	801297c <LoRaMacConfirmQueueIsCmdActive>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00e      	beq.n	800db70 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800db52:	2101      	movs	r1, #1
 800db54:	2000      	movs	r0, #0
 800db56:	f004 fe85 	bl	8012864 <LoRaMacConfirmQueueSetStatus>
 800db5a:	e009      	b.n	800db70 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800db5c:	2001      	movs	r0, #1
 800db5e:	f004 ff0d 	bl	801297c <LoRaMacConfirmQueueIsCmdActive>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d003      	beq.n	800db70 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800db68:	2101      	movs	r1, #1
 800db6a:	2007      	movs	r0, #7
 800db6c:	f004 fe7a 	bl	8012864 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800db70:	4a05      	ldr	r2, [pc, #20]	; (800db88 <ProcessRadioRxDone+0x2fc>)
 800db72:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800db76:	f043 0308 	orr.w	r3, r3, #8
 800db7a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800db7e:	e2a5      	b.n	800e0cc <ProcessRadioRxDone+0x840>
 800db80:	200017b0 	.word	0x200017b0
 800db84:	20000964 	.word	0x20000964
 800db88:	2000045c 	.word	0x2000045c
 800db8c:	0801ba28 	.word	0x0801ba28
 800db90:	200007f4 	.word	0x200007f4
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800db94:	4bae      	ldr	r3, [pc, #696]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800db96:	2201      	movs	r2, #1
 800db98:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800db9c:	4bad      	ldr	r3, [pc, #692]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800db9e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800dba2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800dba6:	4baa      	ldr	r3, [pc, #680]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800dba8:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800dbac:	b25b      	sxtb	r3, r3
 800dbae:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800dbb2:	230d      	movs	r3, #13
 800dbb4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800dbb8:	4ba6      	ldr	r3, [pc, #664]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800dbba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d002      	beq.n	800dbc8 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800dbc2:	230e      	movs	r3, #14
 800dbc4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dbc8:	4ba2      	ldr	r3, [pc, #648]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800dbca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dbce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dbd2:	4611      	mov	r1, r2
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f006 f923 	bl	8013e20 <RegionGetPhyParam>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800dbde:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dbe2:	3b0d      	subs	r3, #13
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	b21b      	sxth	r3, r3
 800dbe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dbec:	b21a      	sxth	r2, r3
 800dbee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbf0:	b21b      	sxth	r3, r3
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	dc03      	bgt.n	800dbfe <ProcessRadioRxDone+0x372>
 800dbf6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dbfa:	2b0b      	cmp	r3, #11
 800dbfc:	d806      	bhi.n	800dc0c <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dbfe:	4b94      	ldr	r3, [pc, #592]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dc06:	f7ff fe1b 	bl	800d840 <PrepareRxDoneAbort>
                return;
 800dc0a:	e27e      	b.n	800e10a <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800dc0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc0e:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800dc10:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800dc1a:	4b8f      	ldr	r3, [pc, #572]	; (800de58 <ProcessRadioRxDone+0x5cc>)
 800dc1c:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800dc1e:	23ff      	movs	r3, #255	; 0xff
 800dc20:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800dc24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f005 fe7c 	bl	8013926 <LoRaMacParserData>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d006      	beq.n	800dc42 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc34:	4b86      	ldr	r3, [pc, #536]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800dc36:	2201      	movs	r2, #1
 800dc38:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dc3c:	f7ff fe00 	bl	800d840 <PrepareRxDoneAbort>
                return;
 800dc40:	e263      	b.n	800e10a <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800dc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc44:	4a82      	ldr	r2, [pc, #520]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800dc46:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800dc4a:	1cba      	adds	r2, r7, #2
 800dc4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc50:	4611      	mov	r1, r2
 800dc52:	4618      	mov	r0, r3
 800dc54:	f002 fcde 	bl	8010614 <DetermineFrameType>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d006      	beq.n	800dc6c <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc5e:	4b7c      	ldr	r3, [pc, #496]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800dc60:	2201      	movs	r2, #1
 800dc62:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dc66:	f7ff fdeb 	bl	800d840 <PrepareRxDoneAbort>
                return;
 800dc6a:	e24e      	b.n	800e10a <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800dc72:	2300      	movs	r3, #0
 800dc74:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dc76:	2300      	movs	r3, #0
 800dc78:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dc7c:	e049      	b.n	800dd12 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800dc7e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc82:	4a74      	ldr	r2, [pc, #464]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800dc84:	212c      	movs	r1, #44	; 0x2c
 800dc86:	fb01 f303 	mul.w	r3, r1, r3
 800dc8a:	4413      	add	r3, r2
 800dc8c:	33d4      	adds	r3, #212	; 0xd4
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d138      	bne.n	800dd08 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800dc96:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc9a:	4a6e      	ldr	r2, [pc, #440]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800dc9c:	212c      	movs	r1, #44	; 0x2c
 800dc9e:	fb01 f303 	mul.w	r3, r1, r3
 800dca2:	4413      	add	r3, r2
 800dca4:	33d2      	adds	r3, #210	; 0xd2
 800dca6:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d02d      	beq.n	800dd08 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800dcac:	2301      	movs	r3, #1
 800dcae:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800dcb2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dcb6:	4a67      	ldr	r2, [pc, #412]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800dcb8:	212c      	movs	r1, #44	; 0x2c
 800dcba:	fb01 f303 	mul.w	r3, r1, r3
 800dcbe:	4413      	add	r3, r2
 800dcc0:	33d3      	adds	r3, #211	; 0xd3
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800dcc8:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dccc:	4a61      	ldr	r2, [pc, #388]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800dcce:	212c      	movs	r1, #44	; 0x2c
 800dcd0:	fb01 f303 	mul.w	r3, r1, r3
 800dcd4:	4413      	add	r3, r2
 800dcd6:	33f0      	adds	r3, #240	; 0xf0
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800dcde:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dce2:	4a5c      	ldr	r2, [pc, #368]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800dce4:	212c      	movs	r1, #44	; 0x2c
 800dce6:	fb01 f303 	mul.w	r3, r1, r3
 800dcea:	4413      	add	r3, r2
 800dcec:	33d4      	adds	r3, #212	; 0xd4
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dcf4:	4b57      	ldr	r3, [pc, #348]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800dcf6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dcfa:	2b02      	cmp	r3, #2
 800dcfc:	d10e      	bne.n	800dd1c <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dcfe:	4b54      	ldr	r3, [pc, #336]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800dd00:	2203      	movs	r2, #3
 800dd02:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800dd06:	e009      	b.n	800dd1c <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dd08:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dd12:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d0b1      	beq.n	800dc7e <ProcessRadioRxDone+0x3f2>
 800dd1a:	e000      	b.n	800dd1e <ProcessRadioRxDone+0x492>
                    break;
 800dd1c:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dd1e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d117      	bne.n	800dd56 <ProcessRadioRxDone+0x4ca>
 800dd26:	78bb      	ldrb	r3, [r7, #2]
 800dd28:	2b03      	cmp	r3, #3
 800dd2a:	d10d      	bne.n	800dd48 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dd2c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd30:	f003 0320 	and.w	r3, r3, #32
 800dd34:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d106      	bne.n	800dd48 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dd3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd42:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d006      	beq.n	800dd56 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd48:	4b41      	ldr	r3, [pc, #260]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dd50:	f7ff fd76 	bl	800d840 <PrepareRxDoneAbort>
                return;
 800dd54:	e1d9      	b.n	800e10a <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800dd56:	2315      	movs	r3, #21
 800dd58:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd5c:	4b3d      	ldr	r3, [pc, #244]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800dd5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd62:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dd66:	4611      	mov	r1, r2
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f006 f859 	bl	8013e20 <RegionGetPhyParam>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800dd72:	78b9      	ldrb	r1, [r7, #2]
 800dd74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	4d36      	ldr	r5, [pc, #216]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800dd7a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800dd7e:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800dd82:	1d3a      	adds	r2, r7, #4
 800dd84:	9202      	str	r2, [sp, #8]
 800dd86:	1cfa      	adds	r2, r7, #3
 800dd88:	9201      	str	r2, [sp, #4]
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800dd90:	4622      	mov	r2, r4
 800dd92:	f000 fe95 	bl	800eac0 <GetFCntDown>
 800dd96:	4603      	mov	r3, r0
 800dd98:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dd9c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d031      	beq.n	800de08 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800dda4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dda8:	2b07      	cmp	r3, #7
 800ddaa:	d119      	bne.n	800dde0 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ddac:	4b28      	ldr	r3, [pc, #160]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800ddae:	2208      	movs	r2, #8
 800ddb0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800ddb4:	4b27      	ldr	r3, [pc, #156]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800ddb6:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d11d      	bne.n	800ddfa <ProcessRadioRxDone+0x56e>
 800ddbe:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800ddc2:	f023 031f 	bic.w	r3, r3, #31
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	2ba0      	cmp	r3, #160	; 0xa0
 800ddca:	d116      	bne.n	800ddfa <ProcessRadioRxDone+0x56e>
 800ddcc:	4b21      	ldr	r3, [pc, #132]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800ddce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d111      	bne.n	800ddfa <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800ddd6:	4b1f      	ldr	r3, [pc, #124]	; (800de54 <ProcessRadioRxDone+0x5c8>)
 800ddd8:	2201      	movs	r2, #1
 800ddda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800ddde:	e00c      	b.n	800ddfa <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800dde0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dde4:	2b08      	cmp	r3, #8
 800dde6:	d104      	bne.n	800ddf2 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800dde8:	4b19      	ldr	r3, [pc, #100]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800ddea:	220a      	movs	r2, #10
 800ddec:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800ddf0:	e003      	b.n	800ddfa <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ddf2:	4b17      	ldr	r3, [pc, #92]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4a14      	ldr	r2, [pc, #80]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800ddfe:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800de02:	f7ff fd1d 	bl	800d840 <PrepareRxDoneAbort>
                return;
 800de06:	e180      	b.n	800e10a <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800de08:	78fa      	ldrb	r2, [r7, #3]
 800de0a:	6879      	ldr	r1, [r7, #4]
 800de0c:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800de10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	460b      	mov	r3, r1
 800de18:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800de1c:	f005 fbd0 	bl	80135c0 <LoRaMacCryptoUnsecureMessage>
 800de20:	4603      	mov	r3, r0
 800de22:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800de26:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d016      	beq.n	800de5c <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800de2e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800de32:	2b02      	cmp	r3, #2
 800de34:	d104      	bne.n	800de40 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800de36:	4b06      	ldr	r3, [pc, #24]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800de38:	220b      	movs	r2, #11
 800de3a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800de3e:	e003      	b.n	800de48 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800de40:	4b03      	ldr	r3, [pc, #12]	; (800de50 <ProcessRadioRxDone+0x5c4>)
 800de42:	220c      	movs	r2, #12
 800de44:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800de48:	f7ff fcfa 	bl	800d840 <PrepareRxDoneAbort>
                return;
 800de4c:	e15d      	b.n	800e10a <ProcessRadioRxDone+0x87e>
 800de4e:	bf00      	nop
 800de50:	2000045c 	.word	0x2000045c
 800de54:	20000964 	.word	0x20000964
 800de58:	20000694 	.word	0x20000694
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800de5c:	4bac      	ldr	r3, [pc, #688]	; (800e110 <ProcessRadioRxDone+0x884>)
 800de5e:	2200      	movs	r2, #0
 800de60:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800de64:	4aaa      	ldr	r2, [pc, #680]	; (800e110 <ProcessRadioRxDone+0x884>)
 800de66:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800de6a:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800de6e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800de76:	b2db      	uxtb	r3, r3
 800de78:	461a      	mov	r2, r3
 800de7a:	4ba5      	ldr	r3, [pc, #660]	; (800e110 <ProcessRadioRxDone+0x884>)
 800de7c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800de80:	4ba3      	ldr	r3, [pc, #652]	; (800e110 <ProcessRadioRxDone+0x884>)
 800de82:	2200      	movs	r2, #0
 800de84:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800de88:	4ba1      	ldr	r3, [pc, #644]	; (800e110 <ProcessRadioRxDone+0x884>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	4a9f      	ldr	r2, [pc, #636]	; (800e110 <ProcessRadioRxDone+0x884>)
 800de94:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800de98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	bf14      	ite	ne
 800dea6:	2301      	movne	r3, #1
 800dea8:	2300      	moveq	r3, #0
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	4b98      	ldr	r3, [pc, #608]	; (800e110 <ProcessRadioRxDone+0x884>)
 800deae:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800deb2:	4b97      	ldr	r3, [pc, #604]	; (800e110 <ProcessRadioRxDone+0x884>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800deba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800debe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	bf14      	ite	ne
 800dec8:	2301      	movne	r3, #1
 800deca:	2300      	moveq	r3, #0
 800decc:	b2da      	uxtb	r2, r3
 800dece:	4b90      	ldr	r3, [pc, #576]	; (800e110 <ProcessRadioRxDone+0x884>)
 800ded0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ded4:	4b8e      	ldr	r3, [pc, #568]	; (800e110 <ProcessRadioRxDone+0x884>)
 800ded6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d004      	beq.n	800dee8 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800dede:	4b8c      	ldr	r3, [pc, #560]	; (800e110 <ProcessRadioRxDone+0x884>)
 800dee0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d102      	bne.n	800deee <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800dee8:	4b8a      	ldr	r3, [pc, #552]	; (800e114 <ProcessRadioRxDone+0x888>)
 800deea:	2200      	movs	r2, #0
 800deec:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800deee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800def2:	2b01      	cmp	r3, #1
 800def4:	d104      	bne.n	800df00 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800def6:	4b86      	ldr	r3, [pc, #536]	; (800e110 <ProcessRadioRxDone+0x884>)
 800def8:	2202      	movs	r2, #2
 800defa:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800defe:	e01f      	b.n	800df40 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800df00:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800df04:	f023 031f 	bic.w	r3, r3, #31
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	2ba0      	cmp	r3, #160	; 0xa0
 800df0c:	d110      	bne.n	800df30 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800df0e:	4b81      	ldr	r3, [pc, #516]	; (800e114 <ProcessRadioRxDone+0x888>)
 800df10:	2201      	movs	r2, #1
 800df12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800df16:	4b7f      	ldr	r3, [pc, #508]	; (800e114 <ProcessRadioRxDone+0x888>)
 800df18:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d102      	bne.n	800df26 <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800df20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df22:	4a7c      	ldr	r2, [pc, #496]	; (800e114 <ProcessRadioRxDone+0x888>)
 800df24:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800df26:	4b7a      	ldr	r3, [pc, #488]	; (800e110 <ProcessRadioRxDone+0x884>)
 800df28:	2201      	movs	r2, #1
 800df2a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800df2e:	e007      	b.n	800df40 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800df30:	4b78      	ldr	r3, [pc, #480]	; (800e114 <ProcessRadioRxDone+0x888>)
 800df32:	2200      	movs	r2, #0
 800df34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800df38:	4b75      	ldr	r3, [pc, #468]	; (800e110 <ProcessRadioRxDone+0x884>)
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800df40:	4b73      	ldr	r3, [pc, #460]	; (800e110 <ProcessRadioRxDone+0x884>)
 800df42:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800df46:	4a72      	ldr	r2, [pc, #456]	; (800e110 <ProcessRadioRxDone+0x884>)
 800df48:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800df4c:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800df50:	4618      	mov	r0, r3
 800df52:	f001 ff0d 	bl	800fd70 <RemoveMacCommands>

            switch( fType )
 800df56:	78bb      	ldrb	r3, [r7, #2]
 800df58:	2b03      	cmp	r3, #3
 800df5a:	d874      	bhi.n	800e046 <ProcessRadioRxDone+0x7ba>
 800df5c:	a201      	add	r2, pc, #4	; (adr r2, 800df64 <ProcessRadioRxDone+0x6d8>)
 800df5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df62:	bf00      	nop
 800df64:	0800df75 	.word	0x0800df75
 800df68:	0800dfc5 	.word	0x0800dfc5
 800df6c:	0800dffb 	.word	0x0800dffb
 800df70:	0800e021 	.word	0x0800e021
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800df74:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800df78:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	461c      	mov	r4, r3
 800df80:	4b63      	ldr	r3, [pc, #396]	; (800e110 <ProcessRadioRxDone+0x884>)
 800df82:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800df86:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800df8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800df8e:	f102 0010 	add.w	r0, r2, #16
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	460b      	mov	r3, r1
 800df96:	4622      	mov	r2, r4
 800df98:	2100      	movs	r1, #0
 800df9a:	f000 ff03 	bl	800eda4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800df9e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dfa2:	4b5b      	ldr	r3, [pc, #364]	; (800e110 <ProcessRadioRxDone+0x884>)
 800dfa4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800dfa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfaa:	4a59      	ldr	r2, [pc, #356]	; (800e110 <ProcessRadioRxDone+0x884>)
 800dfac:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800dfb0:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800dfb4:	4b56      	ldr	r3, [pc, #344]	; (800e110 <ProcessRadioRxDone+0x884>)
 800dfb6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800dfba:	4b55      	ldr	r3, [pc, #340]	; (800e110 <ProcessRadioRxDone+0x884>)
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800dfc2:	e047      	b.n	800e054 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800dfc4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfc8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	461c      	mov	r4, r3
 800dfd0:	4b4f      	ldr	r3, [pc, #316]	; (800e110 <ProcessRadioRxDone+0x884>)
 800dfd2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800dfd6:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800dfda:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dfde:	f102 0010 	add.w	r0, r2, #16
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	4622      	mov	r2, r4
 800dfe8:	2100      	movs	r1, #0
 800dfea:	f000 fedb 	bl	800eda4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800dfee:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dff2:	4b47      	ldr	r3, [pc, #284]	; (800e110 <ProcessRadioRxDone+0x884>)
 800dff4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800dff8:	e02c      	b.n	800e054 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800dffa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dffc:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e000:	4b43      	ldr	r3, [pc, #268]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e002:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e006:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e00a:	9300      	str	r3, [sp, #0]
 800e00c:	460b      	mov	r3, r1
 800e00e:	2100      	movs	r1, #0
 800e010:	f000 fec8 	bl	800eda4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e014:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e018:	4b3d      	ldr	r3, [pc, #244]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e01a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e01e:	e019      	b.n	800e054 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e020:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e024:	4b3a      	ldr	r3, [pc, #232]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e026:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e02a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e02c:	4a38      	ldr	r2, [pc, #224]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e02e:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e032:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e036:	4b36      	ldr	r3, [pc, #216]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e038:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e03c:	4b34      	ldr	r3, [pc, #208]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e044:	e006      	b.n	800e054 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e046:	4b32      	ldr	r3, [pc, #200]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e048:	2201      	movs	r2, #1
 800e04a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800e04e:	f7ff fbf7 	bl	800d840 <PrepareRxDoneAbort>
                    break;
 800e052:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e054:	4a2e      	ldr	r2, [pc, #184]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e056:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e05a:	f043 0302 	orr.w	r3, r3, #2
 800e05e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800e062:	e033      	b.n	800e0cc <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e064:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e068:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e06a:	18d1      	adds	r1, r2, r3
 800e06c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e070:	b29b      	uxth	r3, r3
 800e072:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e076:	1ad3      	subs	r3, r2, r3
 800e078:	b29b      	uxth	r3, r3
 800e07a:	461a      	mov	r2, r3
 800e07c:	4826      	ldr	r0, [pc, #152]	; (800e118 <ProcessRadioRxDone+0x88c>)
 800e07e:	f008 f9da 	bl	8016436 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e082:	4b23      	ldr	r3, [pc, #140]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e084:	2203      	movs	r2, #3
 800e086:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e08a:	4b21      	ldr	r3, [pc, #132]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e092:	4b1f      	ldr	r3, [pc, #124]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e094:	4a20      	ldr	r2, [pc, #128]	; (800e118 <ProcessRadioRxDone+0x88c>)
 800e096:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e09a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	b2da      	uxtb	r2, r3
 800e0a8:	4b19      	ldr	r3, [pc, #100]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e0aa:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e0ae:	4a18      	ldr	r2, [pc, #96]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e0b0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e0b4:	f043 0302 	orr.w	r3, r3, #2
 800e0b8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800e0bc:	e006      	b.n	800e0cc <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e0be:	4b14      	ldr	r3, [pc, #80]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800e0c6:	f7ff fbbb 	bl	800d840 <PrepareRxDoneAbort>
            break;
 800e0ca:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e0cc:	4b10      	ldr	r3, [pc, #64]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e0ce:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d008      	beq.n	800e0e8 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e0d6:	4b0e      	ldr	r3, [pc, #56]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e0d8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00b      	beq.n	800e0f8 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	f000 fcb7 	bl	800ea54 <OnAckTimeoutTimerEvent>
 800e0e6:	e007      	b.n	800e0f8 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e0e8:	4b0a      	ldr	r3, [pc, #40]	; (800e114 <ProcessRadioRxDone+0x888>)
 800e0ea:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e0ee:	2b02      	cmp	r3, #2
 800e0f0:	d102      	bne.n	800e0f8 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	f000 fcae 	bl	800ea54 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e0f8:	4a05      	ldr	r2, [pc, #20]	; (800e110 <ProcessRadioRxDone+0x884>)
 800e0fa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e0fe:	f043 0320 	orr.w	r3, r3, #32
 800e102:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800e106:	f7ff fae9 	bl	800d6dc <UpdateRxSlotIdleState>
}
 800e10a:	3788      	adds	r7, #136	; 0x88
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bdb0      	pop	{r4, r5, r7, pc}
 800e110:	2000045c 	.word	0x2000045c
 800e114:	20000964 	.word	0x20000964
 800e118:	20000694 	.word	0x20000694

0800e11c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e120:	4b11      	ldr	r3, [pc, #68]	; (800e168 <ProcessRadioTxTimeout+0x4c>)
 800e122:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e126:	2b02      	cmp	r3, #2
 800e128:	d002      	beq.n	800e130 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e12a:	4b10      	ldr	r3, [pc, #64]	; (800e16c <ProcessRadioTxTimeout+0x50>)
 800e12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e130:	f7ff fad4 	bl	800d6dc <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e134:	4b0e      	ldr	r3, [pc, #56]	; (800e170 <ProcessRadioTxTimeout+0x54>)
 800e136:	2202      	movs	r2, #2
 800e138:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e13c:	2002      	movs	r0, #2
 800e13e:	f004 fbe9 	bl	8012914 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e142:	4b0b      	ldr	r3, [pc, #44]	; (800e170 <ProcessRadioTxTimeout+0x54>)
 800e144:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d003      	beq.n	800e154 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800e14c:	4b08      	ldr	r3, [pc, #32]	; (800e170 <ProcessRadioTxTimeout+0x54>)
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e154:	4a06      	ldr	r2, [pc, #24]	; (800e170 <ProcessRadioTxTimeout+0x54>)
 800e156:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e15a:	f043 0320 	orr.w	r3, r3, #32
 800e15e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800e162:	bf00      	nop
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	20000964 	.word	0x20000964
 800e16c:	0801ba28 	.word	0x0801ba28
 800e170:	2000045c 	.word	0x2000045c

0800e174 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	4603      	mov	r3, r0
 800e17c:	460a      	mov	r2, r1
 800e17e:	71fb      	strb	r3, [r7, #7]
 800e180:	4613      	mov	r3, r2
 800e182:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e184:	2300      	movs	r3, #0
 800e186:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e188:	4b40      	ldr	r3, [pc, #256]	; (800e28c <HandleRadioRxErrorTimeout+0x118>)
 800e18a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e18e:	2b02      	cmp	r3, #2
 800e190:	d002      	beq.n	800e198 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e192:	4b3f      	ldr	r3, [pc, #252]	; (800e290 <HandleRadioRxErrorTimeout+0x11c>)
 800e194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e196:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e198:	f003 ff1d 	bl	8011fd6 <LoRaMacClassBIsBeaconExpected>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d007      	beq.n	800e1b2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e1a2:	2002      	movs	r0, #2
 800e1a4:	f003 fecb 	bl	8011f3e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	f003 feed 	bl	8011f88 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e1b2:	4b36      	ldr	r3, [pc, #216]	; (800e28c <HandleRadioRxErrorTimeout+0x118>)
 800e1b4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d119      	bne.n	800e1f0 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e1bc:	f003 ff12 	bl	8011fe4 <LoRaMacClassBIsPingExpected>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d007      	beq.n	800e1d6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	f003 fec3 	bl	8011f52 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	f003 fee4 	bl	8011f9a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e1d6:	f003 ff0c 	bl	8011ff2 <LoRaMacClassBIsMulticastExpected>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d007      	beq.n	800e1f0 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	f003 fec0 	bl	8011f66 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	f003 fee0 	bl	8011fac <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e1f0:	7bfb      	ldrb	r3, [r7, #15]
 800e1f2:	f083 0301 	eor.w	r3, r3, #1
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d040      	beq.n	800e27e <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e1fc:	4b25      	ldr	r3, [pc, #148]	; (800e294 <HandleRadioRxErrorTimeout+0x120>)
 800e1fe:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e202:	2b00      	cmp	r3, #0
 800e204:	d122      	bne.n	800e24c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e206:	4b23      	ldr	r3, [pc, #140]	; (800e294 <HandleRadioRxErrorTimeout+0x120>)
 800e208:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d003      	beq.n	800e218 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e210:	4a20      	ldr	r2, [pc, #128]	; (800e294 <HandleRadioRxErrorTimeout+0x120>)
 800e212:	79fb      	ldrb	r3, [r7, #7]
 800e214:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e218:	79fb      	ldrb	r3, [r7, #7]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f004 fb7a 	bl	8012914 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e220:	4b1a      	ldr	r3, [pc, #104]	; (800e28c <HandleRadioRxErrorTimeout+0x118>)
 800e222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e224:	4618      	mov	r0, r3
 800e226:	f00c f943 	bl	801a4b0 <UTIL_TIMER_GetElapsedTime>
 800e22a:	4602      	mov	r2, r0
 800e22c:	4b19      	ldr	r3, [pc, #100]	; (800e294 <HandleRadioRxErrorTimeout+0x120>)
 800e22e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e232:	429a      	cmp	r2, r3
 800e234:	d323      	bcc.n	800e27e <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e236:	4818      	ldr	r0, [pc, #96]	; (800e298 <HandleRadioRxErrorTimeout+0x124>)
 800e238:	f00c f80e 	bl	801a258 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e23c:	4a15      	ldr	r2, [pc, #84]	; (800e294 <HandleRadioRxErrorTimeout+0x120>)
 800e23e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e242:	f043 0320 	orr.w	r3, r3, #32
 800e246:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800e24a:	e018      	b.n	800e27e <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e24c:	4b11      	ldr	r3, [pc, #68]	; (800e294 <HandleRadioRxErrorTimeout+0x120>)
 800e24e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e252:	2b00      	cmp	r3, #0
 800e254:	d003      	beq.n	800e25e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e256:	4a0f      	ldr	r2, [pc, #60]	; (800e294 <HandleRadioRxErrorTimeout+0x120>)
 800e258:	79bb      	ldrb	r3, [r7, #6]
 800e25a:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e25e:	79bb      	ldrb	r3, [r7, #6]
 800e260:	4618      	mov	r0, r3
 800e262:	f004 fb57 	bl	8012914 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e266:	4b09      	ldr	r3, [pc, #36]	; (800e28c <HandleRadioRxErrorTimeout+0x118>)
 800e268:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e26c:	2b02      	cmp	r3, #2
 800e26e:	d006      	beq.n	800e27e <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e270:	4a08      	ldr	r2, [pc, #32]	; (800e294 <HandleRadioRxErrorTimeout+0x120>)
 800e272:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e276:	f043 0320 	orr.w	r3, r3, #32
 800e27a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800e27e:	f7ff fa2d 	bl	800d6dc <UpdateRxSlotIdleState>
}
 800e282:	bf00      	nop
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	20000964 	.word	0x20000964
 800e290:	0801ba28 	.word	0x0801ba28
 800e294:	2000045c 	.word	0x2000045c
 800e298:	200007f4 	.word	0x200007f4

0800e29c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e2a0:	2106      	movs	r1, #6
 800e2a2:	2005      	movs	r0, #5
 800e2a4:	f7ff ff66 	bl	800e174 <HandleRadioRxErrorTimeout>
}
 800e2a8:	bf00      	nop
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e2b0:	2104      	movs	r1, #4
 800e2b2:	2003      	movs	r0, #3
 800e2b4:	f7ff ff5e 	bl	800e174 <HandleRadioRxErrorTimeout>
}
 800e2b8:	bf00      	nop
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e2c6:	607b      	str	r3, [r7, #4]
  return(result);
 800e2c8:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e2ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e2cc:	b672      	cpsid	i
}
 800e2ce:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e2d0:	4b1d      	ldr	r3, [pc, #116]	; (800e348 <LoRaMacHandleIrqEvents+0x8c>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e2d6:	4b1c      	ldr	r3, [pc, #112]	; (800e348 <LoRaMacHandleIrqEvents+0x8c>)
 800e2d8:	2200      	movs	r2, #0
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	f383 8810 	msr	PRIMASK, r3
}
 800e2e6:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d027      	beq.n	800e33e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e2ee:	783b      	ldrb	r3, [r7, #0]
 800e2f0:	f003 0310 	and.w	r3, r3, #16
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d001      	beq.n	800e2fe <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e2fa:	f7ff fa07 	bl	800d70c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e2fe:	783b      	ldrb	r3, [r7, #0]
 800e300:	f003 0308 	and.w	r3, r3, #8
 800e304:	b2db      	uxtb	r3, r3
 800e306:	2b00      	cmp	r3, #0
 800e308:	d001      	beq.n	800e30e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e30a:	f7ff fabf 	bl	800d88c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e30e:	783b      	ldrb	r3, [r7, #0]
 800e310:	f003 0304 	and.w	r3, r3, #4
 800e314:	b2db      	uxtb	r3, r3
 800e316:	2b00      	cmp	r3, #0
 800e318:	d001      	beq.n	800e31e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e31a:	f7ff feff 	bl	800e11c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e31e:	783b      	ldrb	r3, [r7, #0]
 800e320:	f003 0302 	and.w	r3, r3, #2
 800e324:	b2db      	uxtb	r3, r3
 800e326:	2b00      	cmp	r3, #0
 800e328:	d001      	beq.n	800e32e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e32a:	f7ff ffb7 	bl	800e29c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e32e:	783b      	ldrb	r3, [r7, #0]
 800e330:	f003 0301 	and.w	r3, r3, #1
 800e334:	b2db      	uxtb	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e33a:	f7ff ffb7 	bl	800e2ac <ProcessRadioRxTimeout>
        }
    }
}
 800e33e:	bf00      	nop
 800e340:	3710      	adds	r7, #16
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	20000cb0 	.word	0x20000cb0

0800e34c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e34c:	b480      	push	{r7}
 800e34e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e350:	4b08      	ldr	r3, [pc, #32]	; (800e374 <LoRaMacIsBusy+0x28>)
 800e352:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e356:	2b00      	cmp	r3, #0
 800e358:	d106      	bne.n	800e368 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e35a:	4b06      	ldr	r3, [pc, #24]	; (800e374 <LoRaMacIsBusy+0x28>)
 800e35c:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e360:	2b01      	cmp	r3, #1
 800e362:	d101      	bne.n	800e368 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e364:	2300      	movs	r3, #0
 800e366:	e000      	b.n	800e36a <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e368:	2301      	movs	r3, #1
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bc80      	pop	{r7}
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	2000045c 	.word	0x2000045c

0800e378 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	4603      	mov	r3, r0
 800e380:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e382:	4a04      	ldr	r2, [pc, #16]	; (800e394 <LoRaMacEnableRequests+0x1c>)
 800e384:	79fb      	ldrb	r3, [r7, #7]
 800e386:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800e38a:	bf00      	nop
 800e38c:	370c      	adds	r7, #12
 800e38e:	46bd      	mov	sp, r7
 800e390:	bc80      	pop	{r7}
 800e392:	4770      	bx	lr
 800e394:	2000045c 	.word	0x2000045c

0800e398 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e39e:	4b2c      	ldr	r3, [pc, #176]	; (800e450 <LoRaMacHandleRequestEvents+0xb8>)
 800e3a0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e3a4:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e3a6:	4b2a      	ldr	r3, [pc, #168]	; (800e450 <LoRaMacHandleRequestEvents+0xb8>)
 800e3a8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d14a      	bne.n	800e446 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e3b0:	4b27      	ldr	r3, [pc, #156]	; (800e450 <LoRaMacHandleRequestEvents+0xb8>)
 800e3b2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e3b6:	f003 0301 	and.w	r3, r3, #1
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d006      	beq.n	800e3ce <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e3c0:	4a23      	ldr	r2, [pc, #140]	; (800e450 <LoRaMacHandleRequestEvents+0xb8>)
 800e3c2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e3c6:	f36f 0300 	bfc	r3, #0, #1
 800e3ca:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e3ce:	4b20      	ldr	r3, [pc, #128]	; (800e450 <LoRaMacHandleRequestEvents+0xb8>)
 800e3d0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e3d4:	f003 0304 	and.w	r3, r3, #4
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d006      	beq.n	800e3ec <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e3de:	4a1c      	ldr	r2, [pc, #112]	; (800e450 <LoRaMacHandleRequestEvents+0xb8>)
 800e3e0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e3e4:	f36f 0382 	bfc	r3, #2, #1
 800e3e8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e3ec:	2001      	movs	r0, #1
 800e3ee:	f7ff ffc3 	bl	800e378 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e3f2:	793b      	ldrb	r3, [r7, #4]
 800e3f4:	f003 0301 	and.w	r3, r3, #1
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d005      	beq.n	800e40a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e3fe:	4b14      	ldr	r3, [pc, #80]	; (800e450 <LoRaMacHandleRequestEvents+0xb8>)
 800e400:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4813      	ldr	r0, [pc, #76]	; (800e454 <LoRaMacHandleRequestEvents+0xbc>)
 800e408:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e40a:	793b      	ldrb	r3, [r7, #4]
 800e40c:	f003 0304 	and.w	r3, r3, #4
 800e410:	b2db      	uxtb	r3, r3
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00e      	beq.n	800e434 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e416:	4810      	ldr	r0, [pc, #64]	; (800e458 <LoRaMacHandleRequestEvents+0xc0>)
 800e418:	f004 faca 	bl	80129b0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e41c:	f004 fb14 	bl	8012a48 <LoRaMacConfirmQueueGetCnt>
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d006      	beq.n	800e434 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e426:	4a0a      	ldr	r2, [pc, #40]	; (800e450 <LoRaMacHandleRequestEvents+0xb8>)
 800e428:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e42c:	f043 0304 	orr.w	r3, r3, #4
 800e430:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e434:	f003 fdfb 	bl	801202e <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e438:	4a05      	ldr	r2, [pc, #20]	; (800e450 <LoRaMacHandleRequestEvents+0xb8>)
 800e43a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e43e:	f36f 1345 	bfc	r3, #5, #1
 800e442:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800e446:	bf00      	nop
 800e448:	3708      	adds	r7, #8
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	2000045c 	.word	0x2000045c
 800e454:	20000894 	.word	0x20000894
 800e458:	200008a8 	.word	0x200008a8

0800e45c <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e462:	4b0a      	ldr	r3, [pc, #40]	; (800e48c <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800e464:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d10a      	bne.n	800e482 <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e46c:	2300      	movs	r3, #0
 800e46e:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e470:	1dfb      	adds	r3, r7, #7
 800e472:	4618      	mov	r0, r3
 800e474:	f004 f882 	bl	801257c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800e478:	79fb      	ldrb	r3, [r7, #7]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d001      	beq.n	800e482 <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800e47e:	f000 fc81 	bl	800ed84 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800e482:	bf00      	nop
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	2000045c 	.word	0x2000045c

0800e490 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b088      	sub	sp, #32
 800e494:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e496:	4b25      	ldr	r3, [pc, #148]	; (800e52c <LoRaMacHandleIndicationEvents+0x9c>)
 800e498:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e49c:	f003 0308 	and.w	r3, r3, #8
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00d      	beq.n	800e4c2 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e4a6:	4a21      	ldr	r2, [pc, #132]	; (800e52c <LoRaMacHandleIndicationEvents+0x9c>)
 800e4a8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e4ac:	f36f 03c3 	bfc	r3, #3, #1
 800e4b0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e4b4:	4b1d      	ldr	r3, [pc, #116]	; (800e52c <LoRaMacHandleIndicationEvents+0x9c>)
 800e4b6:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	491c      	ldr	r1, [pc, #112]	; (800e530 <LoRaMacHandleIndicationEvents+0xa0>)
 800e4be:	481d      	ldr	r0, [pc, #116]	; (800e534 <LoRaMacHandleIndicationEvents+0xa4>)
 800e4c0:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800e4c2:	4b1a      	ldr	r3, [pc, #104]	; (800e52c <LoRaMacHandleIndicationEvents+0x9c>)
 800e4c4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e4c8:	f003 0310 	and.w	r3, r3, #16
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d012      	beq.n	800e4f8 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800e4d2:	2307      	movs	r3, #7
 800e4d4:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800e4da:	4b14      	ldr	r3, [pc, #80]	; (800e52c <LoRaMacHandleIndicationEvents+0x9c>)
 800e4dc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	1d3a      	adds	r2, r7, #4
 800e4e4:	4912      	ldr	r1, [pc, #72]	; (800e530 <LoRaMacHandleIndicationEvents+0xa0>)
 800e4e6:	4610      	mov	r0, r2
 800e4e8:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800e4ea:	4a10      	ldr	r2, [pc, #64]	; (800e52c <LoRaMacHandleIndicationEvents+0x9c>)
 800e4ec:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e4f0:	f36f 1304 	bfc	r3, #4, #1
 800e4f4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e4f8:	4b0c      	ldr	r3, [pc, #48]	; (800e52c <LoRaMacHandleIndicationEvents+0x9c>)
 800e4fa:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e4fe:	f003 0302 	and.w	r3, r3, #2
 800e502:	b2db      	uxtb	r3, r3
 800e504:	2b00      	cmp	r3, #0
 800e506:	d00d      	beq.n	800e524 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e508:	4a08      	ldr	r2, [pc, #32]	; (800e52c <LoRaMacHandleIndicationEvents+0x9c>)
 800e50a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e50e:	f36f 0341 	bfc	r3, #1, #1
 800e512:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e516:	4b05      	ldr	r3, [pc, #20]	; (800e52c <LoRaMacHandleIndicationEvents+0x9c>)
 800e518:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	4904      	ldr	r1, [pc, #16]	; (800e530 <LoRaMacHandleIndicationEvents+0xa0>)
 800e520:	4805      	ldr	r0, [pc, #20]	; (800e538 <LoRaMacHandleIndicationEvents+0xa8>)
 800e522:	4798      	blx	r3
    }
}
 800e524:	bf00      	nop
 800e526:	3720      	adds	r7, #32
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	2000045c 	.word	0x2000045c
 800e530:	200008d8 	.word	0x200008d8
 800e534:	200008bc 	.word	0x200008bc
 800e538:	20000878 	.word	0x20000878

0800e53c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e542:	4b32      	ldr	r3, [pc, #200]	; (800e60c <LoRaMacHandleMcpsRequest+0xd0>)
 800e544:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e548:	f003 0301 	and.w	r3, r3, #1
 800e54c:	b2db      	uxtb	r3, r3
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d058      	beq.n	800e604 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e552:	2300      	movs	r3, #0
 800e554:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e556:	2300      	movs	r3, #0
 800e558:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e55a:	4b2c      	ldr	r3, [pc, #176]	; (800e60c <LoRaMacHandleMcpsRequest+0xd0>)
 800e55c:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e560:	2b00      	cmp	r3, #0
 800e562:	d004      	beq.n	800e56e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e564:	4b29      	ldr	r3, [pc, #164]	; (800e60c <LoRaMacHandleMcpsRequest+0xd0>)
 800e566:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e56a:	2b03      	cmp	r3, #3
 800e56c:	d104      	bne.n	800e578 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e56e:	f002 f89f 	bl	80106b0 <CheckRetransUnconfirmedUplink>
 800e572:	4603      	mov	r3, r0
 800e574:	71fb      	strb	r3, [r7, #7]
 800e576:	e020      	b.n	800e5ba <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e578:	4b24      	ldr	r3, [pc, #144]	; (800e60c <LoRaMacHandleMcpsRequest+0xd0>)
 800e57a:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d11b      	bne.n	800e5ba <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800e582:	4b22      	ldr	r3, [pc, #136]	; (800e60c <LoRaMacHandleMcpsRequest+0xd0>)
 800e584:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d014      	beq.n	800e5b6 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e58c:	f002 f8bc 	bl	8010708 <CheckRetransConfirmedUplink>
 800e590:	4603      	mov	r3, r0
 800e592:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e594:	4b1e      	ldr	r3, [pc, #120]	; (800e610 <LoRaMacHandleMcpsRequest+0xd4>)
 800e596:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d10d      	bne.n	800e5ba <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e59e:	79fb      	ldrb	r3, [r7, #7]
 800e5a0:	f083 0301 	eor.w	r3, r3, #1
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d002      	beq.n	800e5b0 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e5aa:	f002 f929 	bl	8010800 <AckTimeoutRetriesProcess>
 800e5ae:	e004      	b.n	800e5ba <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e5b0:	f002 f964 	bl	801087c <AckTimeoutRetriesFinalize>
 800e5b4:	e001      	b.n	800e5ba <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800e5ba:	79fb      	ldrb	r3, [r7, #7]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d00d      	beq.n	800e5dc <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e5c0:	4814      	ldr	r0, [pc, #80]	; (800e614 <LoRaMacHandleMcpsRequest+0xd8>)
 800e5c2:	f00b fe49 	bl	801a258 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e5c6:	4b11      	ldr	r3, [pc, #68]	; (800e60c <LoRaMacHandleMcpsRequest+0xd0>)
 800e5c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5cc:	f023 0320 	bic.w	r3, r3, #32
 800e5d0:	4a0e      	ldr	r2, [pc, #56]	; (800e60c <LoRaMacHandleMcpsRequest+0xd0>)
 800e5d2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e5d6:	f002 f8b9 	bl	801074c <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e5da:	e013      	b.n	800e604 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e5dc:	79bb      	ldrb	r3, [r7, #6]
 800e5de:	f083 0301 	eor.w	r3, r3, #1
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d00d      	beq.n	800e604 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e5e8:	4a08      	ldr	r2, [pc, #32]	; (800e60c <LoRaMacHandleMcpsRequest+0xd0>)
 800e5ea:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e5ee:	f36f 1345 	bfc	r3, #5, #1
 800e5f2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800e5f6:	4b05      	ldr	r3, [pc, #20]	; (800e60c <LoRaMacHandleMcpsRequest+0xd0>)
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e5fe:	2000      	movs	r0, #0
 800e600:	f000 f97e 	bl	800e900 <OnTxDelayedTimerEvent>
}
 800e604:	bf00      	nop
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	2000045c 	.word	0x2000045c
 800e610:	20000964 	.word	0x20000964
 800e614:	200007c4 	.word	0x200007c4

0800e618 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e61c:	4b1b      	ldr	r3, [pc, #108]	; (800e68c <LoRaMacHandleMlmeRequest+0x74>)
 800e61e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e622:	f003 0304 	and.w	r3, r3, #4
 800e626:	b2db      	uxtb	r3, r3
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d02c      	beq.n	800e686 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e62c:	2001      	movs	r0, #1
 800e62e:	f004 f9a5 	bl	801297c <LoRaMacConfirmQueueIsCmdActive>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d012      	beq.n	800e65e <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e638:	2001      	movs	r0, #1
 800e63a:	f004 f941 	bl	80128c0 <LoRaMacConfirmQueueGetStatus>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d103      	bne.n	800e64c <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e644:	4b11      	ldr	r3, [pc, #68]	; (800e68c <LoRaMacHandleMlmeRequest+0x74>)
 800e646:	2200      	movs	r2, #0
 800e648:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e64c:	4b0f      	ldr	r3, [pc, #60]	; (800e68c <LoRaMacHandleMlmeRequest+0x74>)
 800e64e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e652:	f023 0302 	bic.w	r3, r3, #2
 800e656:	4a0d      	ldr	r2, [pc, #52]	; (800e68c <LoRaMacHandleMlmeRequest+0x74>)
 800e658:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800e65c:	e013      	b.n	800e686 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e65e:	2005      	movs	r0, #5
 800e660:	f004 f98c 	bl	801297c <LoRaMacConfirmQueueIsCmdActive>
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d105      	bne.n	800e676 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e66a:	2006      	movs	r0, #6
 800e66c:	f004 f986 	bl	801297c <LoRaMacConfirmQueueIsCmdActive>
 800e670:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e672:	2b00      	cmp	r3, #0
 800e674:	d007      	beq.n	800e686 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e676:	4b05      	ldr	r3, [pc, #20]	; (800e68c <LoRaMacHandleMlmeRequest+0x74>)
 800e678:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e67c:	f023 0302 	bic.w	r3, r3, #2
 800e680:	4a02      	ldr	r2, [pc, #8]	; (800e68c <LoRaMacHandleMlmeRequest+0x74>)
 800e682:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e686:	bf00      	nop
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	2000045c 	.word	0x2000045c

0800e690 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e694:	200c      	movs	r0, #12
 800e696:	f004 f971 	bl	801297c <LoRaMacConfirmQueueIsCmdActive>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d019      	beq.n	800e6d4 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e6a0:	4b0e      	ldr	r3, [pc, #56]	; (800e6dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e6a2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e6a6:	f003 0301 	and.w	r3, r3, #1
 800e6aa:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d111      	bne.n	800e6d4 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e6b0:	4b0a      	ldr	r3, [pc, #40]	; (800e6dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e6b2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e6b6:	f003 0304 	and.w	r3, r3, #4
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d009      	beq.n	800e6d4 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e6c0:	4b06      	ldr	r3, [pc, #24]	; (800e6dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e6c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e6c6:	f023 0302 	bic.w	r3, r3, #2
 800e6ca:	4a04      	ldr	r2, [pc, #16]	; (800e6dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e6cc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	e000      	b.n	800e6d6 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	2000045c 	.word	0x2000045c

0800e6e0 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e6e4:	4b0d      	ldr	r3, [pc, #52]	; (800e71c <LoRaMacCheckForRxAbort+0x3c>)
 800e6e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e6ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00f      	beq.n	800e712 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e6f2:	4b0a      	ldr	r3, [pc, #40]	; (800e71c <LoRaMacCheckForRxAbort+0x3c>)
 800e6f4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e6f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6fc:	4a07      	ldr	r2, [pc, #28]	; (800e71c <LoRaMacCheckForRxAbort+0x3c>)
 800e6fe:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e702:	4b06      	ldr	r3, [pc, #24]	; (800e71c <LoRaMacCheckForRxAbort+0x3c>)
 800e704:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e708:	f023 0302 	bic.w	r3, r3, #2
 800e70c:	4a03      	ldr	r2, [pc, #12]	; (800e71c <LoRaMacCheckForRxAbort+0x3c>)
 800e70e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e712:	bf00      	nop
 800e714:	46bd      	mov	sp, r7
 800e716:	bc80      	pop	{r7}
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	2000045c 	.word	0x2000045c

0800e720 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e728:	2300      	movs	r3, #0
 800e72a:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e72c:	2300      	movs	r3, #0
 800e72e:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e730:	4b50      	ldr	r3, [pc, #320]	; (800e874 <LoRaMacHandleNvm+0x154>)
 800e732:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e736:	2b00      	cmp	r3, #0
 800e738:	f040 8097 	bne.w	800e86a <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2124      	movs	r1, #36	; 0x24
 800e740:	4618      	mov	r0, r3
 800e742:	f007 fecd 	bl	80164e0 <Crc32>
 800e746:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e74c:	68ba      	ldr	r2, [r7, #8]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d006      	beq.n	800e760 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	68ba      	ldr	r2, [r7, #8]
 800e756:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e758:	89fb      	ldrh	r3, [r7, #14]
 800e75a:	f043 0301 	orr.w	r3, r3, #1
 800e75e:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	3328      	adds	r3, #40	; 0x28
 800e764:	2114      	movs	r1, #20
 800e766:	4618      	mov	r0, r3
 800e768:	f007 feba 	bl	80164e0 <Crc32>
 800e76c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e772:	68ba      	ldr	r2, [r7, #8]
 800e774:	429a      	cmp	r2, r3
 800e776:	d006      	beq.n	800e786 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	68ba      	ldr	r2, [r7, #8]
 800e77c:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e77e:	89fb      	ldrh	r3, [r7, #14]
 800e780:	f043 0302 	orr.w	r3, r3, #2
 800e784:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	3340      	adds	r3, #64	; 0x40
 800e78a:	21d4      	movs	r1, #212	; 0xd4
 800e78c:	4618      	mov	r0, r3
 800e78e:	f007 fea7 	bl	80164e0 <Crc32>
 800e792:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d007      	beq.n	800e7b0 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e7a8:	89fb      	ldrh	r3, [r7, #14]
 800e7aa:	f043 0304 	orr.w	r3, r3, #4
 800e7ae:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800e7b6:	21bc      	movs	r1, #188	; 0xbc
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f007 fe91 	bl	80164e0 <Crc32>
 800e7be:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d007      	beq.n	800e7dc <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	68ba      	ldr	r2, [r7, #8]
 800e7d0:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e7d4:	89fb      	ldrh	r3, [r7, #14]
 800e7d6:	f043 0308 	orr.w	r3, r3, #8
 800e7da:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e7e2:	2190      	movs	r1, #144	; 0x90
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f007 fe7b 	bl	80164e0 <Crc32>
 800e7ea:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e7f2:	68ba      	ldr	r2, [r7, #8]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d007      	beq.n	800e808 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e800:	89fb      	ldrh	r3, [r7, #14]
 800e802:	f043 0310 	orr.w	r3, r3, #16
 800e806:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800e80e:	21c4      	movs	r1, #196	; 0xc4
 800e810:	4618      	mov	r0, r3
 800e812:	f007 fe65 	bl	80164e0 <Crc32>
 800e816:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	429a      	cmp	r2, r3
 800e822:	d007      	beq.n	800e834 <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	68ba      	ldr	r2, [r7, #8]
 800e828:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e82c:	89fb      	ldrh	r3, [r7, #14]
 800e82e:	f043 0320 	orr.w	r3, r3, #32
 800e832:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e83a:	2114      	movs	r1, #20
 800e83c:	4618      	mov	r0, r3
 800e83e:	f007 fe4f 	bl	80164e0 <Crc32>
 800e842:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d007      	beq.n	800e860 <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	68ba      	ldr	r2, [r7, #8]
 800e854:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e858:	89fb      	ldrh	r3, [r7, #14]
 800e85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e85e:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e860:	89fb      	ldrh	r3, [r7, #14]
 800e862:	4618      	mov	r0, r3
 800e864:	f001 ffae 	bl	80107c4 <CallNvmDataChangeCallback>
 800e868:	e000      	b.n	800e86c <LoRaMacHandleNvm+0x14c>
        return;
 800e86a:	bf00      	nop
}
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	2000045c 	.word	0x2000045c

0800e878 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e87e:	2300      	movs	r3, #0
 800e880:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e882:	f7ff fd1b 	bl	800e2bc <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e886:	f003 fc36 	bl	80120f6 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e88a:	4b1b      	ldr	r3, [pc, #108]	; (800e8f8 <LoRaMacProcess+0x80>)
 800e88c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e890:	f003 0320 	and.w	r3, r3, #32
 800e894:	b2db      	uxtb	r3, r3
 800e896:	2b00      	cmp	r3, #0
 800e898:	d021      	beq.n	800e8de <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e89a:	2000      	movs	r0, #0
 800e89c:	f7ff fd6c 	bl	800e378 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e8a0:	f7ff ff1e 	bl	800e6e0 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e8a4:	f002 f81e 	bl	80108e4 <IsRequestPending>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d006      	beq.n	800e8bc <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e8ae:	f7ff feef 	bl	800e690 <LoRaMacCheckForBeaconAcquisition>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	79fb      	ldrb	r3, [r7, #7]
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e8bc:	79fb      	ldrb	r3, [r7, #7]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d103      	bne.n	800e8ca <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e8c2:	f7ff fea9 	bl	800e618 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e8c6:	f7ff fe39 	bl	800e53c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e8ca:	f7ff fd65 	bl	800e398 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800e8ce:	f7ff fdc5 	bl	800e45c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800e8d2:	480a      	ldr	r0, [pc, #40]	; (800e8fc <LoRaMacProcess+0x84>)
 800e8d4:	f7ff ff24 	bl	800e720 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e8d8:	2001      	movs	r0, #1
 800e8da:	f7ff fd4d 	bl	800e378 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800e8de:	f7ff fdd7 	bl	800e490 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e8e2:	4b05      	ldr	r3, [pc, #20]	; (800e8f8 <LoRaMacProcess+0x80>)
 800e8e4:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e8e8:	2b02      	cmp	r3, #2
 800e8ea:	d101      	bne.n	800e8f0 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800e8ec:	f001 fb7c 	bl	800ffe8 <OpenContinuousRxCWindow>
    }
}
 800e8f0:	bf00      	nop
 800e8f2:	3708      	adds	r7, #8
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	2000045c 	.word	0x2000045c
 800e8fc:	20000964 	.word	0x20000964

0800e900 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e908:	4817      	ldr	r0, [pc, #92]	; (800e968 <OnTxDelayedTimerEvent+0x68>)
 800e90a:	f00b fca5 	bl	801a258 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e90e:	4b17      	ldr	r3, [pc, #92]	; (800e96c <OnTxDelayedTimerEvent+0x6c>)
 800e910:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e914:	f023 0320 	bic.w	r3, r3, #32
 800e918:	4a14      	ldr	r2, [pc, #80]	; (800e96c <OnTxDelayedTimerEvent+0x6c>)
 800e91a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e91e:	2001      	movs	r0, #1
 800e920:	f001 f8fc 	bl	800fb1c <ScheduleTx>
 800e924:	4603      	mov	r3, r0
 800e926:	2b00      	cmp	r3, #0
 800e928:	d018      	beq.n	800e95c <OnTxDelayedTimerEvent+0x5c>
 800e92a:	2b0b      	cmp	r3, #11
 800e92c:	d016      	beq.n	800e95c <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e92e:	4b10      	ldr	r3, [pc, #64]	; (800e970 <OnTxDelayedTimerEvent+0x70>)
 800e930:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e934:	b2da      	uxtb	r2, r3
 800e936:	4b0d      	ldr	r3, [pc, #52]	; (800e96c <OnTxDelayedTimerEvent+0x6c>)
 800e938:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e93c:	4b0b      	ldr	r3, [pc, #44]	; (800e96c <OnTxDelayedTimerEvent+0x6c>)
 800e93e:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800e942:	4b0a      	ldr	r3, [pc, #40]	; (800e96c <OnTxDelayedTimerEvent+0x6c>)
 800e944:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e948:	4b08      	ldr	r3, [pc, #32]	; (800e96c <OnTxDelayedTimerEvent+0x6c>)
 800e94a:	2209      	movs	r2, #9
 800e94c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e950:	2009      	movs	r0, #9
 800e952:	f003 ffdf 	bl	8012914 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e956:	f001 fef9 	bl	801074c <StopRetransmission>
            break;
 800e95a:	e000      	b.n	800e95e <OnTxDelayedTimerEvent+0x5e>
            break;
 800e95c:	bf00      	nop
        }
    }
}
 800e95e:	bf00      	nop
 800e960:	3708      	adds	r7, #8
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	200007c4 	.word	0x200007c4
 800e96c:	2000045c 	.word	0x2000045c
 800e970:	20000964 	.word	0x20000964

0800e974 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e97c:	4b14      	ldr	r3, [pc, #80]	; (800e9d0 <OnRxWindow1TimerEvent+0x5c>)
 800e97e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e982:	4b13      	ldr	r3, [pc, #76]	; (800e9d0 <OnRxWindow1TimerEvent+0x5c>)
 800e984:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e988:	4b12      	ldr	r3, [pc, #72]	; (800e9d4 <OnRxWindow1TimerEvent+0x60>)
 800e98a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e98e:	b25a      	sxtb	r2, r3
 800e990:	4b0f      	ldr	r3, [pc, #60]	; (800e9d0 <OnRxWindow1TimerEvent+0x5c>)
 800e992:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e996:	4b0f      	ldr	r3, [pc, #60]	; (800e9d4 <OnRxWindow1TimerEvent+0x60>)
 800e998:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e99c:	4b0c      	ldr	r3, [pc, #48]	; (800e9d0 <OnRxWindow1TimerEvent+0x5c>)
 800e99e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e9a2:	4b0c      	ldr	r3, [pc, #48]	; (800e9d4 <OnRxWindow1TimerEvent+0x60>)
 800e9a4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e9a8:	4b09      	ldr	r3, [pc, #36]	; (800e9d0 <OnRxWindow1TimerEvent+0x5c>)
 800e9aa:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e9ae:	4b08      	ldr	r3, [pc, #32]	; (800e9d0 <OnRxWindow1TimerEvent+0x5c>)
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e9b6:	4b06      	ldr	r3, [pc, #24]	; (800e9d0 <OnRxWindow1TimerEvent+0x5c>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800e9be:	4906      	ldr	r1, [pc, #24]	; (800e9d8 <OnRxWindow1TimerEvent+0x64>)
 800e9c0:	4806      	ldr	r0, [pc, #24]	; (800e9dc <OnRxWindow1TimerEvent+0x68>)
 800e9c2:	f001 fae3 	bl	800ff8c <RxWindowSetup>
}
 800e9c6:	bf00      	nop
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	2000045c 	.word	0x2000045c
 800e9d4:	20000964 	.word	0x20000964
 800e9d8:	20000814 	.word	0x20000814
 800e9dc:	200007dc 	.word	0x200007dc

0800e9e0 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e9e8:	4b16      	ldr	r3, [pc, #88]	; (800ea44 <OnRxWindow2TimerEvent+0x64>)
 800e9ea:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d023      	beq.n	800ea3a <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e9f2:	4b14      	ldr	r3, [pc, #80]	; (800ea44 <OnRxWindow2TimerEvent+0x64>)
 800e9f4:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e9f8:	4b12      	ldr	r3, [pc, #72]	; (800ea44 <OnRxWindow2TimerEvent+0x64>)
 800e9fa:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e9fe:	4b12      	ldr	r3, [pc, #72]	; (800ea48 <OnRxWindow2TimerEvent+0x68>)
 800ea00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea02:	4a10      	ldr	r2, [pc, #64]	; (800ea44 <OnRxWindow2TimerEvent+0x64>)
 800ea04:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ea08:	4b0f      	ldr	r3, [pc, #60]	; (800ea48 <OnRxWindow2TimerEvent+0x68>)
 800ea0a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ea0e:	4b0d      	ldr	r3, [pc, #52]	; (800ea44 <OnRxWindow2TimerEvent+0x64>)
 800ea10:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ea14:	4b0c      	ldr	r3, [pc, #48]	; (800ea48 <OnRxWindow2TimerEvent+0x68>)
 800ea16:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ea1a:	4b0a      	ldr	r3, [pc, #40]	; (800ea44 <OnRxWindow2TimerEvent+0x64>)
 800ea1c:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ea20:	4b08      	ldr	r3, [pc, #32]	; (800ea44 <OnRxWindow2TimerEvent+0x64>)
 800ea22:	2200      	movs	r2, #0
 800ea24:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ea28:	4b06      	ldr	r3, [pc, #24]	; (800ea44 <OnRxWindow2TimerEvent+0x64>)
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ea30:	4906      	ldr	r1, [pc, #24]	; (800ea4c <OnRxWindow2TimerEvent+0x6c>)
 800ea32:	4807      	ldr	r0, [pc, #28]	; (800ea50 <OnRxWindow2TimerEvent+0x70>)
 800ea34:	f001 faaa 	bl	800ff8c <RxWindowSetup>
 800ea38:	e000      	b.n	800ea3c <OnRxWindow2TimerEvent+0x5c>
        return;
 800ea3a:	bf00      	nop
}
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	2000045c 	.word	0x2000045c
 800ea48:	20000964 	.word	0x20000964
 800ea4c:	20000828 	.word	0x20000828
 800ea50:	200007f4 	.word	0x200007f4

0800ea54 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ea5c:	4815      	ldr	r0, [pc, #84]	; (800eab4 <OnAckTimeoutTimerEvent+0x60>)
 800ea5e:	f00b fbfb 	bl	801a258 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800ea62:	4b15      	ldr	r3, [pc, #84]	; (800eab8 <OnAckTimeoutTimerEvent+0x64>)
 800ea64:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d003      	beq.n	800ea74 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800ea6c:	4b12      	ldr	r3, [pc, #72]	; (800eab8 <OnAckTimeoutTimerEvent+0x64>)
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ea74:	4b11      	ldr	r3, [pc, #68]	; (800eabc <OnAckTimeoutTimerEvent+0x68>)
 800ea76:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ea7a:	2b02      	cmp	r3, #2
 800ea7c:	d106      	bne.n	800ea8c <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ea7e:	4a0e      	ldr	r2, [pc, #56]	; (800eab8 <OnAckTimeoutTimerEvent+0x64>)
 800ea80:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ea84:	f043 0320 	orr.w	r3, r3, #32
 800ea88:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ea8c:	4b0a      	ldr	r3, [pc, #40]	; (800eab8 <OnAckTimeoutTimerEvent+0x64>)
 800ea8e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d00a      	beq.n	800eaac <OnAckTimeoutTimerEvent+0x58>
 800ea96:	4b08      	ldr	r3, [pc, #32]	; (800eab8 <OnAckTimeoutTimerEvent+0x64>)
 800ea98:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea9c:	691b      	ldr	r3, [r3, #16]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d004      	beq.n	800eaac <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eaa2:	4b05      	ldr	r3, [pc, #20]	; (800eab8 <OnAckTimeoutTimerEvent+0x64>)
 800eaa4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eaa8:	691b      	ldr	r3, [r3, #16]
 800eaaa:	4798      	blx	r3
    }
}
 800eaac:	bf00      	nop
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	20000854 	.word	0x20000854
 800eab8:	2000045c 	.word	0x2000045c
 800eabc:	20000964 	.word	0x20000964

0800eac0 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	60ba      	str	r2, [r7, #8]
 800eac8:	607b      	str	r3, [r7, #4]
 800eaca:	4603      	mov	r3, r0
 800eacc:	73fb      	strb	r3, [r7, #15]
 800eace:	460b      	mov	r3, r1
 800ead0:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d005      	beq.n	800eae4 <GetFCntDown+0x24>
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d002      	beq.n	800eae4 <GetFCntDown+0x24>
 800eade:	6a3b      	ldr	r3, [r7, #32]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d101      	bne.n	800eae8 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800eae4:	230a      	movs	r3, #10
 800eae6:	e029      	b.n	800eb3c <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800eae8:	7bfb      	ldrb	r3, [r7, #15]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d016      	beq.n	800eb1c <GetFCntDown+0x5c>
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d118      	bne.n	800eb24 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800eaf2:	79bb      	ldrb	r3, [r7, #6]
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d10d      	bne.n	800eb14 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800eaf8:	7bbb      	ldrb	r3, [r7, #14]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d002      	beq.n	800eb04 <GetFCntDown+0x44>
 800eafe:	7bbb      	ldrb	r3, [r7, #14]
 800eb00:	2b03      	cmp	r3, #3
 800eb02:	d103      	bne.n	800eb0c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	2202      	movs	r2, #2
 800eb08:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800eb0a:	e00d      	b.n	800eb28 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	701a      	strb	r2, [r3, #0]
            break;
 800eb12:	e009      	b.n	800eb28 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	2203      	movs	r2, #3
 800eb18:	701a      	strb	r2, [r3, #0]
            break;
 800eb1a:	e005      	b.n	800eb28 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	2204      	movs	r2, #4
 800eb20:	701a      	strb	r2, [r3, #0]
            break;
 800eb22:	e001      	b.n	800eb28 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800eb24:	2305      	movs	r3, #5
 800eb26:	e009      	b.n	800eb3c <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	7818      	ldrb	r0, [r3, #0]
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	89db      	ldrh	r3, [r3, #14]
 800eb30:	461a      	mov	r2, r3
 800eb32:	8b39      	ldrh	r1, [r7, #24]
 800eb34:	6a3b      	ldr	r3, [r7, #32]
 800eb36:	f004 faf1 	bl	801311c <LoRaMacCryptoGetFCntDown>
 800eb3a:	4603      	mov	r3, r0
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800eb44:	b5b0      	push	{r4, r5, r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb4e:	2303      	movs	r3, #3
 800eb50:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800eb52:	4b61      	ldr	r3, [pc, #388]	; (800ecd8 <SwitchClass+0x194>)
 800eb54:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	f000 80a5 	beq.w	800eca8 <SwitchClass+0x164>
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	f300 80b4 	bgt.w	800eccc <SwitchClass+0x188>
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d003      	beq.n	800eb70 <SwitchClass+0x2c>
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	f000 808f 	beq.w	800ec8c <SwitchClass+0x148>
 800eb6e:	e0ad      	b.n	800eccc <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800eb70:	79fb      	ldrb	r3, [r7, #7]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d107      	bne.n	800eb86 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800eb76:	4b58      	ldr	r3, [pc, #352]	; (800ecd8 <SwitchClass+0x194>)
 800eb78:	4a57      	ldr	r2, [pc, #348]	; (800ecd8 <SwitchClass+0x194>)
 800eb7a:	336c      	adds	r3, #108	; 0x6c
 800eb7c:	3264      	adds	r2, #100	; 0x64
 800eb7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eb82:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800eb86:	79fb      	ldrb	r3, [r7, #7]
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d10c      	bne.n	800eba6 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800eb8c:	79fb      	ldrb	r3, [r7, #7]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f003 fa53 	bl	801203a <LoRaMacClassBSwitchClass>
 800eb94:	4603      	mov	r3, r0
 800eb96:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800eb98:	7bfb      	ldrb	r3, [r7, #15]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d103      	bne.n	800eba6 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800eb9e:	4a4e      	ldr	r2, [pc, #312]	; (800ecd8 <SwitchClass+0x194>)
 800eba0:	79fb      	ldrb	r3, [r7, #7]
 800eba2:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800eba6:	79fb      	ldrb	r3, [r7, #7]
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	f040 808a 	bne.w	800ecc2 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ebae:	4a4a      	ldr	r2, [pc, #296]	; (800ecd8 <SwitchClass+0x194>)
 800ebb0:	79fb      	ldrb	r3, [r7, #7]
 800ebb2:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ebb6:	4a49      	ldr	r2, [pc, #292]	; (800ecdc <SwitchClass+0x198>)
 800ebb8:	4b48      	ldr	r3, [pc, #288]	; (800ecdc <SwitchClass+0x198>)
 800ebba:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800ebbe:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800ebc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebc6:	682b      	ldr	r3, [r5, #0]
 800ebc8:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ebca:	4b44      	ldr	r3, [pc, #272]	; (800ecdc <SwitchClass+0x198>)
 800ebcc:	2202      	movs	r2, #2
 800ebce:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	73bb      	strb	r3, [r7, #14]
 800ebd6:	e049      	b.n	800ec6c <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ebd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebdc:	4a3e      	ldr	r2, [pc, #248]	; (800ecd8 <SwitchClass+0x194>)
 800ebde:	212c      	movs	r1, #44	; 0x2c
 800ebe0:	fb01 f303 	mul.w	r3, r1, r3
 800ebe4:	4413      	add	r3, r2
 800ebe6:	33d2      	adds	r3, #210	; 0xd2
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d038      	beq.n	800ec60 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ebee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebf2:	4a39      	ldr	r2, [pc, #228]	; (800ecd8 <SwitchClass+0x194>)
 800ebf4:	212c      	movs	r1, #44	; 0x2c
 800ebf6:	fb01 f303 	mul.w	r3, r1, r3
 800ebfa:	4413      	add	r3, r2
 800ebfc:	33e8      	adds	r3, #232	; 0xe8
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4a35      	ldr	r2, [pc, #212]	; (800ecd8 <SwitchClass+0x194>)
 800ec02:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800ec04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec08:	4a33      	ldr	r2, [pc, #204]	; (800ecd8 <SwitchClass+0x194>)
 800ec0a:	212c      	movs	r1, #44	; 0x2c
 800ec0c:	fb01 f303 	mul.w	r3, r1, r3
 800ec10:	4413      	add	r3, r2
 800ec12:	33ec      	adds	r3, #236	; 0xec
 800ec14:	f993 3000 	ldrsb.w	r3, [r3]
 800ec18:	b2da      	uxtb	r2, r3
 800ec1a:	4b2f      	ldr	r3, [pc, #188]	; (800ecd8 <SwitchClass+0x194>)
 800ec1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ec20:	4b2e      	ldr	r3, [pc, #184]	; (800ecdc <SwitchClass+0x198>)
 800ec22:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ec26:	4b2d      	ldr	r3, [pc, #180]	; (800ecdc <SwitchClass+0x198>)
 800ec28:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ec2c:	4b2a      	ldr	r3, [pc, #168]	; (800ecd8 <SwitchClass+0x194>)
 800ec2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec30:	4a2a      	ldr	r2, [pc, #168]	; (800ecdc <SwitchClass+0x198>)
 800ec32:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec36:	4b28      	ldr	r3, [pc, #160]	; (800ecd8 <SwitchClass+0x194>)
 800ec38:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ec3c:	4b27      	ldr	r3, [pc, #156]	; (800ecdc <SwitchClass+0x198>)
 800ec3e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ec42:	4b25      	ldr	r3, [pc, #148]	; (800ecd8 <SwitchClass+0x194>)
 800ec44:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ec48:	4b24      	ldr	r3, [pc, #144]	; (800ecdc <SwitchClass+0x198>)
 800ec4a:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ec4e:	4b23      	ldr	r3, [pc, #140]	; (800ecdc <SwitchClass+0x198>)
 800ec50:	2203      	movs	r2, #3
 800ec52:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ec56:	4b21      	ldr	r3, [pc, #132]	; (800ecdc <SwitchClass+0x198>)
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800ec5e:	e009      	b.n	800ec74 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ec60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	3301      	adds	r3, #1
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	73bb      	strb	r3, [r7, #14]
 800ec6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	ddb1      	ble.n	800ebd8 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ec74:	4b19      	ldr	r3, [pc, #100]	; (800ecdc <SwitchClass+0x198>)
 800ec76:	2200      	movs	r2, #0
 800ec78:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ec7c:	4b18      	ldr	r3, [pc, #96]	; (800ece0 <SwitchClass+0x19c>)
 800ec7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec80:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ec82:	f001 f9b1 	bl	800ffe8 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ec86:	2300      	movs	r3, #0
 800ec88:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ec8a:	e01a      	b.n	800ecc2 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ec8c:	79fb      	ldrb	r3, [r7, #7]
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f003 f9d3 	bl	801203a <LoRaMacClassBSwitchClass>
 800ec94:	4603      	mov	r3, r0
 800ec96:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ec98:	7bfb      	ldrb	r3, [r7, #15]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d113      	bne.n	800ecc6 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ec9e:	4a0e      	ldr	r2, [pc, #56]	; (800ecd8 <SwitchClass+0x194>)
 800eca0:	79fb      	ldrb	r3, [r7, #7]
 800eca2:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800eca6:	e00e      	b.n	800ecc6 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800eca8:	79fb      	ldrb	r3, [r7, #7]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d10d      	bne.n	800ecca <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ecae:	4a0a      	ldr	r2, [pc, #40]	; (800ecd8 <SwitchClass+0x194>)
 800ecb0:	79fb      	ldrb	r3, [r7, #7]
 800ecb2:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ecb6:	4b0a      	ldr	r3, [pc, #40]	; (800ece0 <SwitchClass+0x19c>)
 800ecb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecba:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ecc0:	e003      	b.n	800ecca <SwitchClass+0x186>
            break;
 800ecc2:	bf00      	nop
 800ecc4:	e002      	b.n	800eccc <SwitchClass+0x188>
            break;
 800ecc6:	bf00      	nop
 800ecc8:	e000      	b.n	800eccc <SwitchClass+0x188>
            break;
 800ecca:	bf00      	nop
        }
    }

    return status;
 800eccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bdb0      	pop	{r4, r5, r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	20000964 	.word	0x20000964
 800ecdc:	2000045c 	.word	0x2000045c
 800ece0:	0801ba28 	.word	0x0801ba28

0800ece4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b086      	sub	sp, #24
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	4603      	mov	r3, r0
 800ecec:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ecee:	4b10      	ldr	r3, [pc, #64]	; (800ed30 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ecf0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ecf4:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ecf6:	79fb      	ldrb	r3, [r7, #7]
 800ecf8:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ecfa:	230d      	movs	r3, #13
 800ecfc:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ecfe:	4b0c      	ldr	r3, [pc, #48]	; (800ed30 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ed00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d001      	beq.n	800ed0c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ed08:	230e      	movs	r3, #14
 800ed0a:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed0c:	4b08      	ldr	r3, [pc, #32]	; (800ed30 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ed0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed12:	f107 0210 	add.w	r2, r7, #16
 800ed16:	4611      	mov	r1, r2
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f005 f881 	bl	8013e20 <RegionGetPhyParam>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	b2db      	uxtb	r3, r3
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3718      	adds	r7, #24
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	20000964 	.word	0x20000964

0800ed34 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	71fb      	strb	r3, [r7, #7]
 800ed3e:	460b      	mov	r3, r1
 800ed40:	71bb      	strb	r3, [r7, #6]
 800ed42:	4613      	mov	r3, r2
 800ed44:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800ed46:	2300      	movs	r3, #0
 800ed48:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ed4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7ff ffc6 	bl	800ece4 <GetMaxAppPayloadWithoutFOptsLength>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ed5c:	79fb      	ldrb	r3, [r7, #7]
 800ed5e:	b29a      	uxth	r2, r3
 800ed60:	797b      	ldrb	r3, [r7, #5]
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	4413      	add	r3, r2
 800ed66:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ed68:	89ba      	ldrh	r2, [r7, #12]
 800ed6a:	89fb      	ldrh	r3, [r7, #14]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d804      	bhi.n	800ed7a <ValidatePayloadLength+0x46>
 800ed70:	89bb      	ldrh	r3, [r7, #12]
 800ed72:	2bff      	cmp	r3, #255	; 0xff
 800ed74:	d801      	bhi.n	800ed7a <ValidatePayloadLength+0x46>
    {
        return true;
 800ed76:	2301      	movs	r3, #1
 800ed78:	e000      	b.n	800ed7c <ValidatePayloadLength+0x48>
    }
    return false;
 800ed7a:	2300      	movs	r3, #0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800ed84:	b480      	push	{r7}
 800ed86:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800ed88:	4a05      	ldr	r2, [pc, #20]	; (800eda0 <SetMlmeScheduleUplinkIndication+0x1c>)
 800ed8a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ed8e:	f043 0310 	orr.w	r3, r3, #16
 800ed92:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800ed96:	bf00      	nop
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bc80      	pop	{r7}
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop
 800eda0:	2000045c 	.word	0x2000045c

0800eda4 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800eda4:	b590      	push	{r4, r7, lr}
 800eda6:	b0a5      	sub	sp, #148	; 0x94
 800eda8:	af02      	add	r7, sp, #8
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	4608      	mov	r0, r1
 800edae:	4611      	mov	r1, r2
 800edb0:	461a      	mov	r2, r3
 800edb2:	4603      	mov	r3, r0
 800edb4:	70fb      	strb	r3, [r7, #3]
 800edb6:	460b      	mov	r3, r1
 800edb8:	70bb      	strb	r3, [r7, #2]
 800edba:	4613      	mov	r3, r2
 800edbc:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800edc4:	2300      	movs	r3, #0
 800edc6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800edca:	2300      	movs	r3, #0
 800edcc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800edd0:	f000 bc73 	b.w	800f6ba <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800edd4:	78fb      	ldrb	r3, [r7, #3]
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	4413      	add	r3, r2
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	4618      	mov	r0, r3
 800edde:	f003 fbf5 	bl	80125cc <LoRaMacCommandsGetCmdSize>
 800ede2:	4603      	mov	r3, r0
 800ede4:	461a      	mov	r2, r3
 800ede6:	78fb      	ldrb	r3, [r7, #3]
 800ede8:	441a      	add	r2, r3
 800edea:	78bb      	ldrb	r3, [r7, #2]
 800edec:	429a      	cmp	r2, r3
 800edee:	f300 846a 	bgt.w	800f6c6 <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800edf2:	78fb      	ldrb	r3, [r7, #3]
 800edf4:	1c5a      	adds	r2, r3, #1
 800edf6:	70fa      	strb	r2, [r7, #3]
 800edf8:	461a      	mov	r2, r3
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4413      	add	r3, r2
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	3b02      	subs	r3, #2
 800ee02:	2b11      	cmp	r3, #17
 800ee04:	f200 8461 	bhi.w	800f6ca <ProcessMacCommands+0x926>
 800ee08:	a201      	add	r2, pc, #4	; (adr r2, 800ee10 <ProcessMacCommands+0x6c>)
 800ee0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0e:	bf00      	nop
 800ee10:	0800ee59 	.word	0x0800ee59
 800ee14:	0800ee9b 	.word	0x0800ee9b
 800ee18:	0800efb7 	.word	0x0800efb7
 800ee1c:	0800eff5 	.word	0x0800eff5
 800ee20:	0800f0e5 	.word	0x0800f0e5
 800ee24:	0800f141 	.word	0x0800f141
 800ee28:	0800f1fd 	.word	0x0800f1fd
 800ee2c:	0800f257 	.word	0x0800f257
 800ee30:	0800f33b 	.word	0x0800f33b
 800ee34:	0800f6cb 	.word	0x0800f6cb
 800ee38:	0800f6cb 	.word	0x0800f6cb
 800ee3c:	0800f3e5 	.word	0x0800f3e5
 800ee40:	0800f6cb 	.word	0x0800f6cb
 800ee44:	0800f6cb 	.word	0x0800f6cb
 800ee48:	0800f4fb 	.word	0x0800f4fb
 800ee4c:	0800f52f 	.word	0x0800f52f
 800ee50:	0800f5bf 	.word	0x0800f5bf
 800ee54:	0800f635 	.word	0x0800f635
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800ee58:	2004      	movs	r0, #4
 800ee5a:	f003 fd8f 	bl	801297c <LoRaMacConfirmQueueIsCmdActive>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	f000 842a 	beq.w	800f6ba <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800ee66:	2104      	movs	r1, #4
 800ee68:	2000      	movs	r0, #0
 800ee6a:	f003 fcfb 	bl	8012864 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800ee6e:	78fb      	ldrb	r3, [r7, #3]
 800ee70:	1c5a      	adds	r2, r3, #1
 800ee72:	70fa      	strb	r2, [r7, #3]
 800ee74:	461a      	mov	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	4413      	add	r3, r2
 800ee7a:	781a      	ldrb	r2, [r3, #0]
 800ee7c:	4bad      	ldr	r3, [pc, #692]	; (800f134 <ProcessMacCommands+0x390>)
 800ee7e:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800ee82:	78fb      	ldrb	r3, [r7, #3]
 800ee84:	1c5a      	adds	r2, r3, #1
 800ee86:	70fa      	strb	r2, [r7, #3]
 800ee88:	461a      	mov	r2, r3
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	781a      	ldrb	r2, [r3, #0]
 800ee90:	4ba8      	ldr	r3, [pc, #672]	; (800f134 <ProcessMacCommands+0x390>)
 800ee92:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800ee96:	f000 bc10 	b.w	800f6ba <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800eea0:	2300      	movs	r3, #0
 800eea2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800eea6:	2300      	movs	r3, #0
 800eea8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800eeac:	2300      	movs	r3, #0
 800eeae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800eeb2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800eeb6:	f083 0301 	eor.w	r3, r3, #1
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d078      	beq.n	800efb2 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800eec0:	2301      	movs	r3, #1
 800eec2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800eec6:	78fb      	ldrb	r3, [r7, #3]
 800eec8:	3b01      	subs	r3, #1
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	4413      	add	r3, r2
 800eece:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800eed0:	78ba      	ldrb	r2, [r7, #2]
 800eed2:	78fb      	ldrb	r3, [r7, #3]
 800eed4:	1ad3      	subs	r3, r2, r3
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	3301      	adds	r3, #1
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800eee0:	4b95      	ldr	r3, [pc, #596]	; (800f138 <ProcessMacCommands+0x394>)
 800eee2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800eee6:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800eeea:	4b93      	ldr	r3, [pc, #588]	; (800f138 <ProcessMacCommands+0x394>)
 800eeec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800eef0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800eef4:	4b90      	ldr	r3, [pc, #576]	; (800f138 <ProcessMacCommands+0x394>)
 800eef6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800eefa:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800eefe:	4b8e      	ldr	r3, [pc, #568]	; (800f138 <ProcessMacCommands+0x394>)
 800ef00:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ef04:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ef08:	4b8b      	ldr	r3, [pc, #556]	; (800f138 <ProcessMacCommands+0x394>)
 800ef0a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ef0e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800ef12:	4b89      	ldr	r3, [pc, #548]	; (800f138 <ProcessMacCommands+0x394>)
 800ef14:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ef18:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800ef1a:	4b87      	ldr	r3, [pc, #540]	; (800f138 <ProcessMacCommands+0x394>)
 800ef1c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ef20:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800ef24:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800ef28:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ef2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ef30:	9301      	str	r3, [sp, #4]
 800ef32:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800ef36:	9300      	str	r3, [sp, #0]
 800ef38:	4623      	mov	r3, r4
 800ef3a:	f005 f82f 	bl	8013f9c <RegionLinkAdrReq>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800ef44:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ef48:	f003 0307 	and.w	r3, r3, #7
 800ef4c:	2b07      	cmp	r3, #7
 800ef4e:	d10e      	bne.n	800ef6e <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800ef50:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800ef54:	4b78      	ldr	r3, [pc, #480]	; (800f138 <ProcessMacCommands+0x394>)
 800ef56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800ef5a:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800ef5e:	4b76      	ldr	r3, [pc, #472]	; (800f138 <ProcessMacCommands+0x394>)
 800ef60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800ef64:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800ef68:	4b73      	ldr	r3, [pc, #460]	; (800f138 <ProcessMacCommands+0x394>)
 800ef6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ef6e:	2300      	movs	r3, #0
 800ef70:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ef74:	e00b      	b.n	800ef8e <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800ef76:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	2003      	movs	r0, #3
 800ef80:	f003 f9d4 	bl	801232c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ef84:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800ef88:	3301      	adds	r3, #1
 800ef8a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ef8e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ef92:	4a6a      	ldr	r2, [pc, #424]	; (800f13c <ProcessMacCommands+0x398>)
 800ef94:	fba2 2303 	umull	r2, r3, r2, r3
 800ef98:	089b      	lsrs	r3, r3, #2
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d3e8      	bcc.n	800ef76 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800efa4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800efa8:	78fb      	ldrb	r3, [r7, #3]
 800efaa:	4413      	add	r3, r2
 800efac:	b2db      	uxtb	r3, r3
 800efae:	3b01      	subs	r3, #1
 800efb0:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800efb2:	bf00      	nop
 800efb4:	e381      	b.n	800f6ba <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800efb6:	78fb      	ldrb	r3, [r7, #3]
 800efb8:	1c5a      	adds	r2, r3, #1
 800efba:	70fa      	strb	r2, [r7, #3]
 800efbc:	461a      	mov	r2, r3
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4413      	add	r3, r2
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	f003 030f 	and.w	r3, r3, #15
 800efc8:	b2da      	uxtb	r2, r3
 800efca:	4b5b      	ldr	r3, [pc, #364]	; (800f138 <ProcessMacCommands+0x394>)
 800efcc:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800efd0:	4b59      	ldr	r3, [pc, #356]	; (800f138 <ProcessMacCommands+0x394>)
 800efd2:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800efd6:	461a      	mov	r2, r3
 800efd8:	2301      	movs	r3, #1
 800efda:	4093      	lsls	r3, r2
 800efdc:	b29a      	uxth	r2, r3
 800efde:	4b56      	ldr	r3, [pc, #344]	; (800f138 <ProcessMacCommands+0x394>)
 800efe0:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800efe4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800efe8:	2200      	movs	r2, #0
 800efea:	4619      	mov	r1, r3
 800efec:	2004      	movs	r0, #4
 800efee:	f003 f99d 	bl	801232c <LoRaMacCommandsAddCmd>
                break;
 800eff2:	e362      	b.n	800f6ba <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800eff4:	2307      	movs	r3, #7
 800eff6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800effa:	78fb      	ldrb	r3, [r7, #3]
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	4413      	add	r3, r2
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	091b      	lsrs	r3, r3, #4
 800f004:	b2db      	uxtb	r3, r3
 800f006:	b25b      	sxtb	r3, r3
 800f008:	f003 0307 	and.w	r3, r3, #7
 800f00c:	b25b      	sxtb	r3, r3
 800f00e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f012:	78fb      	ldrb	r3, [r7, #3]
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	4413      	add	r3, r2
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	b25b      	sxtb	r3, r3
 800f01c:	f003 030f 	and.w	r3, r3, #15
 800f020:	b25b      	sxtb	r3, r3
 800f022:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f026:	78fb      	ldrb	r3, [r7, #3]
 800f028:	3301      	adds	r3, #1
 800f02a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f02c:	78fb      	ldrb	r3, [r7, #3]
 800f02e:	1c5a      	adds	r2, r3, #1
 800f030:	70fa      	strb	r2, [r7, #3]
 800f032:	461a      	mov	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	4413      	add	r3, r2
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f03c:	78fb      	ldrb	r3, [r7, #3]
 800f03e:	1c5a      	adds	r2, r3, #1
 800f040:	70fa      	strb	r2, [r7, #3]
 800f042:	461a      	mov	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4413      	add	r3, r2
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	021a      	lsls	r2, r3, #8
 800f04c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f04e:	4313      	orrs	r3, r2
 800f050:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f052:	78fb      	ldrb	r3, [r7, #3]
 800f054:	1c5a      	adds	r2, r3, #1
 800f056:	70fa      	strb	r2, [r7, #3]
 800f058:	461a      	mov	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4413      	add	r3, r2
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	041a      	lsls	r2, r3, #16
 800f062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f064:	4313      	orrs	r3, r2
 800f066:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f06a:	2264      	movs	r2, #100	; 0x64
 800f06c:	fb02 f303 	mul.w	r3, r2, r3
 800f070:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f072:	4b31      	ldr	r3, [pc, #196]	; (800f138 <ProcessMacCommands+0x394>)
 800f074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f078:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f07c:	4611      	mov	r1, r2
 800f07e:	4618      	mov	r0, r3
 800f080:	f004 ffa6 	bl	8013fd0 <RegionRxParamSetupReq>
 800f084:	4603      	mov	r3, r0
 800f086:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f08a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f08e:	f003 0307 	and.w	r3, r3, #7
 800f092:	2b07      	cmp	r3, #7
 800f094:	d117      	bne.n	800f0c6 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f096:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f09a:	b2da      	uxtb	r2, r3
 800f09c:	4b26      	ldr	r3, [pc, #152]	; (800f138 <ProcessMacCommands+0x394>)
 800f09e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f0a2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f0a6:	b2da      	uxtb	r2, r3
 800f0a8:	4b23      	ldr	r3, [pc, #140]	; (800f138 <ProcessMacCommands+0x394>)
 800f0aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f0ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0b0:	4a21      	ldr	r2, [pc, #132]	; (800f138 <ProcessMacCommands+0x394>)
 800f0b2:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f0b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0b6:	4a20      	ldr	r2, [pc, #128]	; (800f138 <ProcessMacCommands+0x394>)
 800f0b8:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f0ba:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f0be:	b2da      	uxtb	r2, r3
 800f0c0:	4b1d      	ldr	r3, [pc, #116]	; (800f138 <ProcessMacCommands+0x394>)
 800f0c2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f0c6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f0ca:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f0ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	2005      	movs	r0, #5
 800f0d8:	f003 f928 	bl	801232c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f0dc:	f7ff fe52 	bl	800ed84 <SetMlmeScheduleUplinkIndication>
                break;
 800f0e0:	bf00      	nop
 800f0e2:	e2ea      	b.n	800f6ba <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f0e4:	23ff      	movs	r3, #255	; 0xff
 800f0e6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f0ea:	4b12      	ldr	r3, [pc, #72]	; (800f134 <ProcessMacCommands+0x390>)
 800f0ec:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d00d      	beq.n	800f110 <ProcessMacCommands+0x36c>
 800f0f4:	4b0f      	ldr	r3, [pc, #60]	; (800f134 <ProcessMacCommands+0x390>)
 800f0f6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d007      	beq.n	800f110 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f100:	4b0c      	ldr	r3, [pc, #48]	; (800f134 <ProcessMacCommands+0x390>)
 800f102:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4798      	blx	r3
 800f10a:	4603      	mov	r3, r0
 800f10c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f110:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f114:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f118:	787b      	ldrb	r3, [r7, #1]
 800f11a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f124:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f128:	2202      	movs	r2, #2
 800f12a:	4619      	mov	r1, r3
 800f12c:	2006      	movs	r0, #6
 800f12e:	f003 f8fd 	bl	801232c <LoRaMacCommandsAddCmd>
                break;
 800f132:	e2c2      	b.n	800f6ba <ProcessMacCommands+0x916>
 800f134:	2000045c 	.word	0x2000045c
 800f138:	20000964 	.word	0x20000964
 800f13c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f140:	2303      	movs	r3, #3
 800f142:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f146:	78fb      	ldrb	r3, [r7, #3]
 800f148:	1c5a      	adds	r2, r3, #1
 800f14a:	70fa      	strb	r2, [r7, #3]
 800f14c:	461a      	mov	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4413      	add	r3, r2
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	b25b      	sxtb	r3, r3
 800f156:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f15a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f15e:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f160:	78fb      	ldrb	r3, [r7, #3]
 800f162:	1c5a      	adds	r2, r3, #1
 800f164:	70fa      	strb	r2, [r7, #3]
 800f166:	461a      	mov	r2, r3
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	4413      	add	r3, r2
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f170:	78fb      	ldrb	r3, [r7, #3]
 800f172:	1c5a      	adds	r2, r3, #1
 800f174:	70fa      	strb	r2, [r7, #3]
 800f176:	461a      	mov	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	4413      	add	r3, r2
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	021a      	lsls	r2, r3, #8
 800f180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f182:	4313      	orrs	r3, r2
 800f184:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f186:	78fb      	ldrb	r3, [r7, #3]
 800f188:	1c5a      	adds	r2, r3, #1
 800f18a:	70fa      	strb	r2, [r7, #3]
 800f18c:	461a      	mov	r2, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	4413      	add	r3, r2
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	041a      	lsls	r2, r3, #16
 800f196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f198:	4313      	orrs	r3, r2
 800f19a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19e:	2264      	movs	r2, #100	; 0x64
 800f1a0:	fb02 f303 	mul.w	r3, r2, r3
 800f1a4:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f1aa:	78fb      	ldrb	r3, [r7, #3]
 800f1ac:	1c5a      	adds	r2, r3, #1
 800f1ae:	70fa      	strb	r2, [r7, #3]
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	b25b      	sxtb	r3, r3
 800f1ba:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f1be:	4b87      	ldr	r3, [pc, #540]	; (800f3dc <ProcessMacCommands+0x638>)
 800f1c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f1c4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f1c8:	4611      	mov	r1, r2
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f004 ff13 	bl	8013ff6 <RegionNewChannelReq>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f1d8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f1dc:	b25b      	sxtb	r3, r3
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	db0a      	blt.n	800f1f8 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800f1e2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f1e6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f1ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	2007      	movs	r0, #7
 800f1f4:	f003 f89a 	bl	801232c <LoRaMacCommandsAddCmd>
                }
                break;
 800f1f8:	bf00      	nop
 800f1fa:	e25e      	b.n	800f6ba <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f1fc:	78fb      	ldrb	r3, [r7, #3]
 800f1fe:	1c5a      	adds	r2, r3, #1
 800f200:	70fa      	strb	r2, [r7, #3]
 800f202:	461a      	mov	r2, r3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4413      	add	r3, r2
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	f003 030f 	and.w	r3, r3, #15
 800f20e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f212:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f216:	2b00      	cmp	r3, #0
 800f218:	d104      	bne.n	800f224 <ProcessMacCommands+0x480>
                {
                    delay++;
 800f21a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f21e:	3301      	adds	r3, #1
 800f220:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f224:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f228:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f22c:	fb02 f303 	mul.w	r3, r2, r3
 800f230:	461a      	mov	r2, r3
 800f232:	4b6a      	ldr	r3, [pc, #424]	; (800f3dc <ProcessMacCommands+0x638>)
 800f234:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f236:	4b69      	ldr	r3, [pc, #420]	; (800f3dc <ProcessMacCommands+0x638>)
 800f238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f23a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f23e:	4a67      	ldr	r2, [pc, #412]	; (800f3dc <ProcessMacCommands+0x638>)
 800f240:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f242:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f246:	2200      	movs	r2, #0
 800f248:	4619      	mov	r1, r3
 800f24a:	2008      	movs	r0, #8
 800f24c:	f003 f86e 	bl	801232c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f250:	f7ff fd98 	bl	800ed84 <SetMlmeScheduleUplinkIndication>
                break;
 800f254:	e231      	b.n	800f6ba <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f256:	78fb      	ldrb	r3, [r7, #3]
 800f258:	1c5a      	adds	r2, r3, #1
 800f25a:	70fa      	strb	r2, [r7, #3]
 800f25c:	461a      	mov	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4413      	add	r3, r2
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f268:	2300      	movs	r3, #0
 800f26a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f26e:	2300      	movs	r3, #0
 800f270:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f274:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f278:	f003 0320 	and.w	r3, r3, #32
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d002      	beq.n	800f286 <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f280:	2301      	movs	r3, #1
 800f282:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f286:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f28a:	f003 0310 	and.w	r3, r3, #16
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d002      	beq.n	800f298 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f292:	2301      	movs	r3, #1
 800f294:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f298:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f29c:	f003 030f 	and.w	r3, r3, #15
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f2a6:	4b4d      	ldr	r3, [pc, #308]	; (800f3dc <ProcessMacCommands+0x638>)
 800f2a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f2b0:	4611      	mov	r1, r2
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f004 feb2 	bl	801401c <RegionTxParamSetupReq>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2be:	d03a      	beq.n	800f336 <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f2c0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f2c4:	4b45      	ldr	r3, [pc, #276]	; (800f3dc <ProcessMacCommands+0x638>)
 800f2c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f2ca:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f2ce:	4b43      	ldr	r3, [pc, #268]	; (800f3dc <ProcessMacCommands+0x638>)
 800f2d0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f2d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f2d8:	461a      	mov	r2, r3
 800f2da:	4b41      	ldr	r3, [pc, #260]	; (800f3e0 <ProcessMacCommands+0x63c>)
 800f2dc:	5c9b      	ldrb	r3, [r3, r2]
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7f1 fa74 	bl	80007cc <__aeabi_ui2f>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	4a3d      	ldr	r2, [pc, #244]	; (800f3dc <ProcessMacCommands+0x638>)
 800f2e8:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f2ea:	2302      	movs	r3, #2
 800f2ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f2f0:	4b3a      	ldr	r3, [pc, #232]	; (800f3dc <ProcessMacCommands+0x638>)
 800f2f2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f2f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f2fa:	4b38      	ldr	r3, [pc, #224]	; (800f3dc <ProcessMacCommands+0x638>)
 800f2fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f300:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f304:	4611      	mov	r1, r2
 800f306:	4618      	mov	r0, r3
 800f308:	f004 fd8a 	bl	8013e20 <RegionGetPhyParam>
 800f30c:	4603      	mov	r3, r0
 800f30e:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f312:	b25a      	sxtb	r2, r3
 800f314:	4b31      	ldr	r3, [pc, #196]	; (800f3dc <ProcessMacCommands+0x638>)
 800f316:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f31a:	4293      	cmp	r3, r2
 800f31c:	bfb8      	it	lt
 800f31e:	4613      	movlt	r3, r2
 800f320:	b25a      	sxtb	r2, r3
 800f322:	4b2e      	ldr	r3, [pc, #184]	; (800f3dc <ProcessMacCommands+0x638>)
 800f324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f328:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f32c:	2200      	movs	r2, #0
 800f32e:	4619      	mov	r1, r3
 800f330:	2009      	movs	r0, #9
 800f332:	f002 fffb 	bl	801232c <LoRaMacCommandsAddCmd>
                }
                break;
 800f336:	bf00      	nop
 800f338:	e1bf      	b.n	800f6ba <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f33a:	2303      	movs	r3, #3
 800f33c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f340:	78fb      	ldrb	r3, [r7, #3]
 800f342:	1c5a      	adds	r2, r3, #1
 800f344:	70fa      	strb	r2, [r7, #3]
 800f346:	461a      	mov	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	4413      	add	r3, r2
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f352:	78fb      	ldrb	r3, [r7, #3]
 800f354:	1c5a      	adds	r2, r3, #1
 800f356:	70fa      	strb	r2, [r7, #3]
 800f358:	461a      	mov	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4413      	add	r3, r2
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f362:	78fb      	ldrb	r3, [r7, #3]
 800f364:	1c5a      	adds	r2, r3, #1
 800f366:	70fa      	strb	r2, [r7, #3]
 800f368:	461a      	mov	r2, r3
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4413      	add	r3, r2
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	021a      	lsls	r2, r3, #8
 800f372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f374:	4313      	orrs	r3, r2
 800f376:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f378:	78fb      	ldrb	r3, [r7, #3]
 800f37a:	1c5a      	adds	r2, r3, #1
 800f37c:	70fa      	strb	r2, [r7, #3]
 800f37e:	461a      	mov	r2, r3
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4413      	add	r3, r2
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	041a      	lsls	r2, r3, #16
 800f388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38a:	4313      	orrs	r3, r2
 800f38c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f390:	2264      	movs	r2, #100	; 0x64
 800f392:	fb02 f303 	mul.w	r3, r2, r3
 800f396:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f398:	4b10      	ldr	r3, [pc, #64]	; (800f3dc <ProcessMacCommands+0x638>)
 800f39a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f39e:	f107 0220 	add.w	r2, r7, #32
 800f3a2:	4611      	mov	r1, r2
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f004 fe4c 	bl	8014042 <RegionDlChannelReq>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f3b2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f3b6:	b25b      	sxtb	r3, r3
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	db0c      	blt.n	800f3d6 <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800f3bc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f3c0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f3c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	200a      	movs	r0, #10
 800f3ce:	f002 ffad 	bl	801232c <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800f3d2:	f7ff fcd7 	bl	800ed84 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800f3d6:	bf00      	nop
 800f3d8:	e16f      	b.n	800f6ba <ProcessMacCommands+0x916>
 800f3da:	bf00      	nop
 800f3dc:	20000964 	.word	0x20000964
 800f3e0:	0801b9e0 	.word	0x0801b9e0
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f3e4:	200a      	movs	r0, #10
 800f3e6:	f003 fac9 	bl	801297c <LoRaMacConfirmQueueIsCmdActive>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	f000 8164 	beq.w	800f6ba <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f3f2:	210a      	movs	r1, #10
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	f003 fa35 	bl	8012864 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800f3fa:	f107 0318 	add.w	r3, r7, #24
 800f3fe:	2200      	movs	r2, #0
 800f400:	601a      	str	r2, [r3, #0]
 800f402:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f404:	f107 0310 	add.w	r3, r7, #16
 800f408:	2200      	movs	r2, #0
 800f40a:	601a      	str	r2, [r3, #0]
 800f40c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f40e:	f107 0308 	add.w	r3, r7, #8
 800f412:	2200      	movs	r2, #0
 800f414:	601a      	str	r2, [r3, #0]
 800f416:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f418:	78fb      	ldrb	r3, [r7, #3]
 800f41a:	1c5a      	adds	r2, r3, #1
 800f41c:	70fa      	strb	r2, [r7, #3]
 800f41e:	461a      	mov	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4413      	add	r3, r2
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f428:	78fb      	ldrb	r3, [r7, #3]
 800f42a:	1c5a      	adds	r2, r3, #1
 800f42c:	70fa      	strb	r2, [r7, #3]
 800f42e:	461a      	mov	r2, r3
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	4413      	add	r3, r2
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	021a      	lsls	r2, r3, #8
 800f438:	69bb      	ldr	r3, [r7, #24]
 800f43a:	4313      	orrs	r3, r2
 800f43c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f43e:	78fb      	ldrb	r3, [r7, #3]
 800f440:	1c5a      	adds	r2, r3, #1
 800f442:	70fa      	strb	r2, [r7, #3]
 800f444:	461a      	mov	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4413      	add	r3, r2
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	041a      	lsls	r2, r3, #16
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	4313      	orrs	r3, r2
 800f452:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f454:	78fb      	ldrb	r3, [r7, #3]
 800f456:	1c5a      	adds	r2, r3, #1
 800f458:	70fa      	strb	r2, [r7, #3]
 800f45a:	461a      	mov	r2, r3
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4413      	add	r3, r2
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	061a      	lsls	r2, r3, #24
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	4313      	orrs	r3, r2
 800f468:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f46a:	78fb      	ldrb	r3, [r7, #3]
 800f46c:	1c5a      	adds	r2, r3, #1
 800f46e:	70fa      	strb	r2, [r7, #3]
 800f470:	461a      	mov	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4413      	add	r3, r2
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	b21b      	sxth	r3, r3
 800f47a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f47c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f480:	461a      	mov	r2, r3
 800f482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f486:	fb03 f302 	mul.w	r3, r3, r2
 800f48a:	121b      	asrs	r3, r3, #8
 800f48c:	b21b      	sxth	r3, r3
 800f48e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f490:	f107 0310 	add.w	r3, r7, #16
 800f494:	f107 0218 	add.w	r2, r7, #24
 800f498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f49c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f4a0:	693a      	ldr	r2, [r7, #16]
 800f4a2:	4b8c      	ldr	r3, [pc, #560]	; (800f6d4 <ProcessMacCommands+0x930>)
 800f4a4:	4413      	add	r3, r2
 800f4a6:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f4a8:	f107 0308 	add.w	r3, r7, #8
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f00a fa6f 	bl	8019990 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f4b2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f4b6:	4b88      	ldr	r3, [pc, #544]	; (800f6d8 <ProcessMacCommands+0x934>)
 800f4b8:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f4bc:	9200      	str	r2, [sp, #0]
 800f4be:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f4c2:	f107 0210 	add.w	r2, r7, #16
 800f4c6:	ca06      	ldmia	r2, {r1, r2}
 800f4c8:	f00a f9fb 	bl	80198c2 <SysTimeSub>
 800f4cc:	f107 0010 	add.w	r0, r7, #16
 800f4d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4d2:	9300      	str	r3, [sp, #0]
 800f4d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4d6:	f107 0208 	add.w	r2, r7, #8
 800f4da:	ca06      	ldmia	r2, {r1, r2}
 800f4dc:	f00a f9b8 	bl	8019850 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f4e0:	f107 0310 	add.w	r3, r7, #16
 800f4e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f4e8:	f00a fa24 	bl	8019934 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f4ec:	f002 fde3 	bl	80120b6 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f4f0:	4b79      	ldr	r3, [pc, #484]	; (800f6d8 <ProcessMacCommands+0x934>)
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800f4f8:	e0df      	b.n	800f6ba <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f4fa:	200d      	movs	r0, #13
 800f4fc:	f003 fa3e 	bl	801297c <LoRaMacConfirmQueueIsCmdActive>
 800f500:	4603      	mov	r3, r0
 800f502:	2b00      	cmp	r3, #0
 800f504:	f000 80d9 	beq.w	800f6ba <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f508:	210d      	movs	r1, #13
 800f50a:	2000      	movs	r0, #0
 800f50c:	f003 f9aa 	bl	8012864 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f510:	4b71      	ldr	r3, [pc, #452]	; (800f6d8 <ProcessMacCommands+0x934>)
 800f512:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f516:	2b04      	cmp	r3, #4
 800f518:	f000 80cf 	beq.w	800f6ba <ProcessMacCommands+0x916>
 800f51c:	4b6e      	ldr	r3, [pc, #440]	; (800f6d8 <ProcessMacCommands+0x934>)
 800f51e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f522:	2b05      	cmp	r3, #5
 800f524:	f000 80c9 	beq.w	800f6ba <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f528:	f002 fda6 	bl	8012078 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f52c:	e0c5      	b.n	800f6ba <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f52e:	2303      	movs	r3, #3
 800f530:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f534:	2300      	movs	r3, #0
 800f536:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f538:	78fb      	ldrb	r3, [r7, #3]
 800f53a:	1c5a      	adds	r2, r3, #1
 800f53c:	70fa      	strb	r2, [r7, #3]
 800f53e:	461a      	mov	r2, r3
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4413      	add	r3, r2
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f548:	78fb      	ldrb	r3, [r7, #3]
 800f54a:	1c5a      	adds	r2, r3, #1
 800f54c:	70fa      	strb	r2, [r7, #3]
 800f54e:	461a      	mov	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4413      	add	r3, r2
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	021b      	lsls	r3, r3, #8
 800f558:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f55a:	4313      	orrs	r3, r2
 800f55c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f55e:	78fb      	ldrb	r3, [r7, #3]
 800f560:	1c5a      	adds	r2, r3, #1
 800f562:	70fa      	strb	r2, [r7, #3]
 800f564:	461a      	mov	r2, r3
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4413      	add	r3, r2
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	041b      	lsls	r3, r3, #16
 800f56e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f570:	4313      	orrs	r3, r2
 800f572:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f576:	2264      	movs	r2, #100	; 0x64
 800f578:	fb02 f303 	mul.w	r3, r2, r3
 800f57c:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f57e:	78fb      	ldrb	r3, [r7, #3]
 800f580:	1c5a      	adds	r2, r3, #1
 800f582:	70fa      	strb	r2, [r7, #3]
 800f584:	461a      	mov	r2, r3
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4413      	add	r3, r2
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	f003 030f 	and.w	r3, r3, #15
 800f590:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f594:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f598:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f59a:	4618      	mov	r0, r3
 800f59c:	f002 fd72 	bl	8012084 <LoRaMacClassBPingSlotChannelReq>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f5a6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f5aa:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f5ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	2011      	movs	r0, #17
 800f5b8:	f002 feb8 	bl	801232c <LoRaMacCommandsAddCmd>
                break;
 800f5bc:	e07d      	b.n	800f6ba <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f5be:	200e      	movs	r0, #14
 800f5c0:	f003 f9dc 	bl	801297c <LoRaMacConfirmQueueIsCmdActive>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d077      	beq.n	800f6ba <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f5ca:	210e      	movs	r1, #14
 800f5cc:	2000      	movs	r0, #0
 800f5ce:	f003 f949 	bl	8012864 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f5de:	78fb      	ldrb	r3, [r7, #3]
 800f5e0:	1c5a      	adds	r2, r3, #1
 800f5e2:	70fa      	strb	r2, [r7, #3]
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f5f0:	78fb      	ldrb	r3, [r7, #3]
 800f5f2:	1c5a      	adds	r2, r3, #1
 800f5f4:	70fa      	strb	r2, [r7, #3]
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	021b      	lsls	r3, r3, #8
 800f600:	b21a      	sxth	r2, r3
 800f602:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f606:	4313      	orrs	r3, r2
 800f608:	b21b      	sxth	r3, r3
 800f60a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f60e:	78fb      	ldrb	r3, [r7, #3]
 800f610:	1c5a      	adds	r2, r3, #1
 800f612:	70fa      	strb	r2, [r7, #3]
 800f614:	461a      	mov	r2, r3
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	4413      	add	r3, r2
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f620:	4b2e      	ldr	r3, [pc, #184]	; (800f6dc <ProcessMacCommands+0x938>)
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f628:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f62c:	4618      	mov	r0, r3
 800f62e:	f002 fd35 	bl	801209c <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f632:	e042      	b.n	800f6ba <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f634:	2300      	movs	r3, #0
 800f636:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f63a:	78fb      	ldrb	r3, [r7, #3]
 800f63c:	1c5a      	adds	r2, r3, #1
 800f63e:	70fa      	strb	r2, [r7, #3]
 800f640:	461a      	mov	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4413      	add	r3, r2
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f64c:	78fb      	ldrb	r3, [r7, #3]
 800f64e:	1c5a      	adds	r2, r3, #1
 800f650:	70fa      	strb	r2, [r7, #3]
 800f652:	461a      	mov	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4413      	add	r3, r2
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	021b      	lsls	r3, r3, #8
 800f65c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f660:	4313      	orrs	r3, r2
 800f662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f666:	78fb      	ldrb	r3, [r7, #3]
 800f668:	1c5a      	adds	r2, r3, #1
 800f66a:	70fa      	strb	r2, [r7, #3]
 800f66c:	461a      	mov	r2, r3
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	4413      	add	r3, r2
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	041b      	lsls	r3, r3, #16
 800f676:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f67a:	4313      	orrs	r3, r2
 800f67c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f680:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f684:	2264      	movs	r2, #100	; 0x64
 800f686:	fb02 f303 	mul.w	r3, r2, r3
 800f68a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f68e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f692:	f002 fd16 	bl	80120c2 <LoRaMacClassBBeaconFreqReq>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d003      	beq.n	800f6a4 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800f69c:	2301      	movs	r3, #1
 800f69e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f6a2:	e002      	b.n	800f6aa <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f6aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	2013      	movs	r0, #19
 800f6b4:	f002 fe3a 	bl	801232c <LoRaMacCommandsAddCmd>
                }
                break;
 800f6b8:	bf00      	nop
    while( macIndex < commandsSize )
 800f6ba:	78fa      	ldrb	r2, [r7, #3]
 800f6bc:	78bb      	ldrb	r3, [r7, #2]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	f4ff ab88 	bcc.w	800edd4 <ProcessMacCommands+0x30>
 800f6c4:	e002      	b.n	800f6cc <ProcessMacCommands+0x928>
            return;
 800f6c6:	bf00      	nop
 800f6c8:	e000      	b.n	800f6cc <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f6ca:	bf00      	nop
        }
    }
}
 800f6cc:	378c      	adds	r7, #140	; 0x8c
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd90      	pop	{r4, r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	12d53d80 	.word	0x12d53d80
 800f6d8:	2000045c 	.word	0x2000045c
 800f6dc:	200017b0 	.word	0x200017b0

0800f6e0 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b08e      	sub	sp, #56	; 0x38
 800f6e4:	af02      	add	r7, sp, #8
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	607a      	str	r2, [r7, #4]
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	460b      	mov	r3, r1
 800f6ee:	72fb      	strb	r3, [r7, #11]
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f6f4:	2303      	movs	r3, #3
 800f6f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f6fa:	4b65      	ldr	r3, [pc, #404]	; (800f890 <Send+0x1b0>)
 800f6fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f700:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f704:	4b62      	ldr	r3, [pc, #392]	; (800f890 <Send+0x1b0>)
 800f706:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f70a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f70e:	4b60      	ldr	r3, [pc, #384]	; (800f890 <Send+0x1b0>)
 800f710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f712:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f714:	4b5e      	ldr	r3, [pc, #376]	; (800f890 <Send+0x1b0>)
 800f716:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d101      	bne.n	800f722 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f71e:	2307      	movs	r3, #7
 800f720:	e0b1      	b.n	800f886 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f722:	4b5b      	ldr	r3, [pc, #364]	; (800f890 <Send+0x1b0>)
 800f724:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d102      	bne.n	800f732 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f72c:	4b58      	ldr	r3, [pc, #352]	; (800f890 <Send+0x1b0>)
 800f72e:	2200      	movs	r2, #0
 800f730:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f732:	2300      	movs	r3, #0
 800f734:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f738:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f73c:	f36f 0303 	bfc	r3, #0, #4
 800f740:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f744:	4b52      	ldr	r3, [pc, #328]	; (800f890 <Send+0x1b0>)
 800f746:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800f74a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f74e:	f362 13c7 	bfi	r3, r2, #7, #1
 800f752:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f756:	4b4e      	ldr	r3, [pc, #312]	; (800f890 <Send+0x1b0>)
 800f758:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	d106      	bne.n	800f76e <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f760:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f764:	f043 0310 	orr.w	r3, r3, #16
 800f768:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800f76c:	e005      	b.n	800f77a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f76e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f772:	f36f 1304 	bfc	r3, #4, #1
 800f776:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f77a:	4b45      	ldr	r3, [pc, #276]	; (800f890 <Send+0x1b0>)
 800f77c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f780:	2b00      	cmp	r3, #0
 800f782:	d005      	beq.n	800f790 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f784:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f788:	f043 0320 	orr.w	r3, r3, #32
 800f78c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800f790:	4b3f      	ldr	r3, [pc, #252]	; (800f890 <Send+0x1b0>)
 800f792:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f796:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800f798:	2301      	movs	r3, #1
 800f79a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f79c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f7a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	bf14      	ite	ne
 800f7aa:	2301      	movne	r3, #1
 800f7ac:	2300      	moveq	r3, #0
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f7b2:	4b37      	ldr	r3, [pc, #220]	; (800f890 <Send+0x1b0>)
 800f7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7b6:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800f7b8:	4b36      	ldr	r3, [pc, #216]	; (800f894 <Send+0x1b4>)
 800f7ba:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800f7be:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800f7c0:	4b34      	ldr	r3, [pc, #208]	; (800f894 <Send+0x1b4>)
 800f7c2:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800f7c6:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f7c8:	4b31      	ldr	r3, [pc, #196]	; (800f890 <Send+0x1b0>)
 800f7ca:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f7ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f7d2:	4b2f      	ldr	r3, [pc, #188]	; (800f890 <Send+0x1b0>)
 800f7d4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f7d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f7dc:	4b2c      	ldr	r3, [pc, #176]	; (800f890 <Send+0x1b0>)
 800f7de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f7e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f7e6:	4b2a      	ldr	r3, [pc, #168]	; (800f890 <Send+0x1b0>)
 800f7e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f7f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7f4:	f107 0014 	add.w	r0, r7, #20
 800f7f8:	4a27      	ldr	r2, [pc, #156]	; (800f898 <Send+0x1b8>)
 800f7fa:	4928      	ldr	r1, [pc, #160]	; (800f89c <Send+0x1bc>)
 800f7fc:	f002 fb7c 	bl	8011ef8 <LoRaMacAdrCalcNext>
 800f800:	4603      	mov	r3, r0
 800f802:	461a      	mov	r2, r3
 800f804:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f808:	f362 1386 	bfi	r3, r2, #6, #1
 800f80c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f810:	7afa      	ldrb	r2, [r7, #11]
 800f812:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f816:	893b      	ldrh	r3, [r7, #8]
 800f818:	9300      	str	r3, [sp, #0]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f000 fc21 	bl	8010064 <PrepareFrame>
 800f822:	4603      	mov	r3, r0
 800f824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d003      	beq.n	800f838 <Send+0x158>
 800f830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f834:	2b0a      	cmp	r3, #10
 800f836:	d107      	bne.n	800f848 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800f838:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f83c:	4618      	mov	r0, r3
 800f83e:	f000 f96d 	bl	800fb1c <ScheduleTx>
 800f842:	4603      	mov	r3, r0
 800f844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00a      	beq.n	800f866 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f850:	4a0f      	ldr	r2, [pc, #60]	; (800f890 <Send+0x1b0>)
 800f852:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f856:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f85a:	4a0d      	ldr	r2, [pc, #52]	; (800f890 <Send+0x1b0>)
 800f85c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f860:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800f864:	e00d      	b.n	800f882 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f866:	4b0a      	ldr	r3, [pc, #40]	; (800f890 <Send+0x1b0>)
 800f868:	2200      	movs	r2, #0
 800f86a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f870:	4a07      	ldr	r2, [pc, #28]	; (800f890 <Send+0x1b0>)
 800f872:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f874:	f002 fdd2 	bl	801241c <LoRaMacCommandsRemoveNoneStickyCmds>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d001      	beq.n	800f882 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f87e:	2313      	movs	r3, #19
 800f880:	e001      	b.n	800f886 <Send+0x1a6>
        }
    }
    return status;
 800f882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f886:	4618      	mov	r0, r3
 800f888:	3730      	adds	r7, #48	; 0x30
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	bf00      	nop
 800f890:	20000964 	.word	0x20000964
 800f894:	2000045c 	.word	0x2000045c
 800f898:	2000099c 	.word	0x2000099c
 800f89c:	2000099d 	.word	0x2000099d

0800f8a0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f8b6:	79fb      	ldrb	r3, [r7, #7]
 800f8b8:	2bff      	cmp	r3, #255	; 0xff
 800f8ba:	d129      	bne.n	800f910 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f8bc:	2000      	movs	r0, #0
 800f8be:	f7ff f941 	bl	800eb44 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f8c2:	4b1a      	ldr	r3, [pc, #104]	; (800f92c <SendReJoinReq+0x8c>)
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f8ca:	4b18      	ldr	r3, [pc, #96]	; (800f92c <SendReJoinReq+0x8c>)
 800f8cc:	4a18      	ldr	r2, [pc, #96]	; (800f930 <SendReJoinReq+0x90>)
 800f8ce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f8d2:	4b16      	ldr	r3, [pc, #88]	; (800f92c <SendReJoinReq+0x8c>)
 800f8d4:	22ff      	movs	r2, #255	; 0xff
 800f8d6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f8da:	7b3b      	ldrb	r3, [r7, #12]
 800f8dc:	f36f 1347 	bfc	r3, #5, #3
 800f8e0:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f8e2:	7b3a      	ldrb	r2, [r7, #12]
 800f8e4:	4b11      	ldr	r3, [pc, #68]	; (800f92c <SendReJoinReq+0x8c>)
 800f8e6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f8ea:	f7fc fc85 	bl	800c1f8 <SecureElementGetJoinEui>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2208      	movs	r2, #8
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	480f      	ldr	r0, [pc, #60]	; (800f934 <SendReJoinReq+0x94>)
 800f8f6:	f006 fd9e 	bl	8016436 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800f8fa:	f7fc fc5b 	bl	800c1b4 <SecureElementGetDevEui>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2208      	movs	r2, #8
 800f902:	4619      	mov	r1, r3
 800f904:	480c      	ldr	r0, [pc, #48]	; (800f938 <SendReJoinReq+0x98>)
 800f906:	f006 fd96 	bl	8016436 <memcpy1>

            allowDelayedTx = false;
 800f90a:	2300      	movs	r3, #0
 800f90c:	73fb      	strb	r3, [r7, #15]

            break;
 800f90e:	e002      	b.n	800f916 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f910:	2302      	movs	r3, #2
 800f912:	73bb      	strb	r3, [r7, #14]
            break;
 800f914:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f916:	7bfb      	ldrb	r3, [r7, #15]
 800f918:	4618      	mov	r0, r3
 800f91a:	f000 f8ff 	bl	800fb1c <ScheduleTx>
 800f91e:	4603      	mov	r3, r0
 800f920:	73bb      	strb	r3, [r7, #14]
    return status;
 800f922:	7bbb      	ldrb	r3, [r7, #14]
}
 800f924:	4618      	mov	r0, r3
 800f926:	3710      	adds	r7, #16
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	2000045c 	.word	0x2000045c
 800f930:	2000045e 	.word	0x2000045e
 800f934:	2000056a 	.word	0x2000056a
 800f938:	20000572 	.word	0x20000572

0800f93c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f940:	f002 fb49 	bl	8011fd6 <LoRaMacClassBIsBeaconExpected>
 800f944:	4603      	mov	r3, r0
 800f946:	2b00      	cmp	r3, #0
 800f948:	d001      	beq.n	800f94e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f94a:	230e      	movs	r3, #14
 800f94c:	e013      	b.n	800f976 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f94e:	4b0b      	ldr	r3, [pc, #44]	; (800f97c <CheckForClassBCollision+0x40>)
 800f950:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f954:	2b01      	cmp	r3, #1
 800f956:	d10d      	bne.n	800f974 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f958:	f002 fb44 	bl	8011fe4 <LoRaMacClassBIsPingExpected>
 800f95c:	4603      	mov	r3, r0
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d001      	beq.n	800f966 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f962:	230f      	movs	r3, #15
 800f964:	e007      	b.n	800f976 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f966:	f002 fb44 	bl	8011ff2 <LoRaMacClassBIsMulticastExpected>
 800f96a:	4603      	mov	r3, r0
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d001      	beq.n	800f974 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f970:	230f      	movs	r3, #15
 800f972:	e000      	b.n	800f976 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	20000964 	.word	0x20000964

0800f980 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f980:	b590      	push	{r4, r7, lr}
 800f982:	b083      	sub	sp, #12
 800f984:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f986:	4b2d      	ldr	r3, [pc, #180]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f988:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f98c:	4b2b      	ldr	r3, [pc, #172]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f98e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f992:	4b2a      	ldr	r3, [pc, #168]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f994:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800f998:	4b28      	ldr	r3, [pc, #160]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f99a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f99e:	4b27      	ldr	r3, [pc, #156]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f9a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f9a4:	b25b      	sxtb	r3, r3
 800f9a6:	f004 fba3 	bl	80140f0 <RegionApplyDrOffset>
 800f9aa:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f9ac:	b259      	sxtb	r1, r3
 800f9ae:	4b23      	ldr	r3, [pc, #140]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f9b0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f9b4:	4b21      	ldr	r3, [pc, #132]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f9b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9b8:	4821      	ldr	r0, [pc, #132]	; (800fa40 <ComputeRxWindowParameters+0xc0>)
 800f9ba:	9000      	str	r0, [sp, #0]
 800f9bc:	4620      	mov	r0, r4
 800f9be:	f004 faa7 	bl	8013f10 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f9c2:	4b1e      	ldr	r3, [pc, #120]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f9c4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800f9c8:	4b1c      	ldr	r3, [pc, #112]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f9ca:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f9ce:	b259      	sxtb	r1, r3
 800f9d0:	4b1a      	ldr	r3, [pc, #104]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f9d2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f9d6:	4b19      	ldr	r3, [pc, #100]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9da:	4c1a      	ldr	r4, [pc, #104]	; (800fa44 <ComputeRxWindowParameters+0xc4>)
 800f9dc:	9400      	str	r4, [sp, #0]
 800f9de:	f004 fa97 	bl	8013f10 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f9e2:	4b16      	ldr	r3, [pc, #88]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f9e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9e6:	4a18      	ldr	r2, [pc, #96]	; (800fa48 <ComputeRxWindowParameters+0xc8>)
 800f9e8:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f9ec:	4413      	add	r3, r2
 800f9ee:	4a16      	ldr	r2, [pc, #88]	; (800fa48 <ComputeRxWindowParameters+0xc8>)
 800f9f0:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f9f4:	4b11      	ldr	r3, [pc, #68]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800f9f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9f8:	4a13      	ldr	r2, [pc, #76]	; (800fa48 <ComputeRxWindowParameters+0xc8>)
 800f9fa:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f9fe:	4413      	add	r3, r2
 800fa00:	4a11      	ldr	r2, [pc, #68]	; (800fa48 <ComputeRxWindowParameters+0xc8>)
 800fa02:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa06:	4b0d      	ldr	r3, [pc, #52]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800fa08:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d111      	bne.n	800fa34 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fa10:	4b0a      	ldr	r3, [pc, #40]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800fa12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa14:	4a0c      	ldr	r2, [pc, #48]	; (800fa48 <ComputeRxWindowParameters+0xc8>)
 800fa16:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fa1a:	4413      	add	r3, r2
 800fa1c:	4a0a      	ldr	r2, [pc, #40]	; (800fa48 <ComputeRxWindowParameters+0xc8>)
 800fa1e:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fa22:	4b06      	ldr	r3, [pc, #24]	; (800fa3c <ComputeRxWindowParameters+0xbc>)
 800fa24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa26:	4a08      	ldr	r2, [pc, #32]	; (800fa48 <ComputeRxWindowParameters+0xc8>)
 800fa28:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fa2c:	4413      	add	r3, r2
 800fa2e:	4a06      	ldr	r2, [pc, #24]	; (800fa48 <ComputeRxWindowParameters+0xc8>)
 800fa30:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800fa34:	bf00      	nop
 800fa36:	3704      	adds	r7, #4
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd90      	pop	{r4, r7, pc}
 800fa3c:	20000964 	.word	0x20000964
 800fa40:	20000814 	.word	0x20000814
 800fa44:	20000828 	.word	0x20000828
 800fa48:	2000045c 	.word	0x2000045c

0800fa4c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800fa52:	2300      	movs	r3, #0
 800fa54:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fa56:	4b13      	ldr	r3, [pc, #76]	; (800faa4 <VerifyTxFrame+0x58>)
 800fa58:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d01b      	beq.n	800fa98 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fa60:	1d3b      	adds	r3, r7, #4
 800fa62:	4618      	mov	r0, r3
 800fa64:	f002 fd20 	bl	80124a8 <LoRaMacCommandsGetSizeSerializedCmds>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d001      	beq.n	800fa72 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fa6e:	2313      	movs	r3, #19
 800fa70:	e013      	b.n	800fa9a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800fa72:	4b0d      	ldr	r3, [pc, #52]	; (800faa8 <VerifyTxFrame+0x5c>)
 800fa74:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fa78:	4a0a      	ldr	r2, [pc, #40]	; (800faa4 <VerifyTxFrame+0x58>)
 800fa7a:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	b2d2      	uxtb	r2, r2
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7ff f956 	bl	800ed34 <ValidatePayloadLength>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	f083 0301 	eor.w	r3, r3, #1
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d001      	beq.n	800fa98 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fa94:	2308      	movs	r3, #8
 800fa96:	e000      	b.n	800fa9a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fa98:	2300      	movs	r3, #0
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3708      	adds	r7, #8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	20000964 	.word	0x20000964
 800faa8:	2000045c 	.word	0x2000045c

0800faac <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fab2:	4b18      	ldr	r3, [pc, #96]	; (800fb14 <SerializeTxFrame+0x68>)
 800fab4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d002      	beq.n	800fac2 <SerializeTxFrame+0x16>
 800fabc:	2b04      	cmp	r3, #4
 800fabe:	d011      	beq.n	800fae4 <SerializeTxFrame+0x38>
 800fac0:	e021      	b.n	800fb06 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fac2:	4815      	ldr	r0, [pc, #84]	; (800fb18 <SerializeTxFrame+0x6c>)
 800fac4:	f004 f823 	bl	8013b0e <LoRaMacSerializerJoinRequest>
 800fac8:	4603      	mov	r3, r0
 800faca:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800facc:	79fb      	ldrb	r3, [r7, #7]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d001      	beq.n	800fad6 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fad2:	2311      	movs	r3, #17
 800fad4:	e01a      	b.n	800fb0c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fad6:	4b0f      	ldr	r3, [pc, #60]	; (800fb14 <SerializeTxFrame+0x68>)
 800fad8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fadc:	b29a      	uxth	r2, r3
 800fade:	4b0d      	ldr	r3, [pc, #52]	; (800fb14 <SerializeTxFrame+0x68>)
 800fae0:	801a      	strh	r2, [r3, #0]
            break;
 800fae2:	e012      	b.n	800fb0a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fae4:	480c      	ldr	r0, [pc, #48]	; (800fb18 <SerializeTxFrame+0x6c>)
 800fae6:	f004 f894 	bl	8013c12 <LoRaMacSerializerData>
 800faea:	4603      	mov	r3, r0
 800faec:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800faee:	79fb      	ldrb	r3, [r7, #7]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d001      	beq.n	800faf8 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800faf4:	2311      	movs	r3, #17
 800faf6:	e009      	b.n	800fb0c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800faf8:	4b06      	ldr	r3, [pc, #24]	; (800fb14 <SerializeTxFrame+0x68>)
 800fafa:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fafe:	b29a      	uxth	r2, r3
 800fb00:	4b04      	ldr	r3, [pc, #16]	; (800fb14 <SerializeTxFrame+0x68>)
 800fb02:	801a      	strh	r2, [r3, #0]
            break;
 800fb04:	e001      	b.n	800fb0a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fb06:	2303      	movs	r3, #3
 800fb08:	e000      	b.n	800fb0c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fb0a:	2300      	movs	r3, #0
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	2000045c 	.word	0x2000045c
 800fb18:	20000564 	.word	0x20000564

0800fb1c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b090      	sub	sp, #64	; 0x40
 800fb20:	af02      	add	r7, sp, #8
 800fb22:	4603      	mov	r3, r0
 800fb24:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb26:	2303      	movs	r3, #3
 800fb28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800fb2c:	f7ff ff06 	bl	800f93c <CheckForClassBCollision>
 800fb30:	4603      	mov	r3, r0
 800fb32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fb36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d002      	beq.n	800fb44 <ScheduleTx+0x28>
    {
        return status;
 800fb3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb42:	e08f      	b.n	800fc64 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800fb44:	f000 f8fa 	bl	800fd3c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fb48:	f7ff ffb0 	bl	800faac <SerializeTxFrame>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fb52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d002      	beq.n	800fb60 <ScheduleTx+0x44>
    {
        return status;
 800fb5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb5e:	e081      	b.n	800fc64 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fb60:	4b42      	ldr	r3, [pc, #264]	; (800fc6c <ScheduleTx+0x150>)
 800fb62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb64:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fb66:	4b41      	ldr	r3, [pc, #260]	; (800fc6c <ScheduleTx+0x150>)
 800fb68:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fb6c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fb6e:	4b3f      	ldr	r3, [pc, #252]	; (800fc6c <ScheduleTx+0x150>)
 800fb70:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fb74:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fb76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f009 ff40 	bl	8019a00 <SysTimeGetMcuTime>
 800fb80:	4638      	mov	r0, r7
 800fb82:	4b3a      	ldr	r3, [pc, #232]	; (800fc6c <ScheduleTx+0x150>)
 800fb84:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800fb88:	9200      	str	r2, [sp, #0]
 800fb8a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800fb8e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fb92:	ca06      	ldmia	r2, {r1, r2}
 800fb94:	f009 fe95 	bl	80198c2 <SysTimeSub>
 800fb98:	f107 0320 	add.w	r3, r7, #32
 800fb9c:	463a      	mov	r2, r7
 800fb9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fba2:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fba6:	4b31      	ldr	r3, [pc, #196]	; (800fc6c <ScheduleTx+0x150>)
 800fba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbaa:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fbac:	2300      	movs	r3, #0
 800fbae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fbb6:	4b2e      	ldr	r3, [pc, #184]	; (800fc70 <ScheduleTx+0x154>)
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fbbc:	4b2b      	ldr	r3, [pc, #172]	; (800fc6c <ScheduleTx+0x150>)
 800fbbe:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d104      	bne.n	800fbd0 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fbd0:	4b26      	ldr	r3, [pc, #152]	; (800fc6c <ScheduleTx+0x150>)
 800fbd2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fbd6:	f107 0114 	add.w	r1, r7, #20
 800fbda:	4b26      	ldr	r3, [pc, #152]	; (800fc74 <ScheduleTx+0x158>)
 800fbdc:	9300      	str	r3, [sp, #0]
 800fbde:	4b26      	ldr	r3, [pc, #152]	; (800fc78 <ScheduleTx+0x15c>)
 800fbe0:	4a26      	ldr	r2, [pc, #152]	; (800fc7c <ScheduleTx+0x160>)
 800fbe2:	f004 fa5b 	bl	801409c <RegionNextChannel>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800fbec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d022      	beq.n	800fc3a <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fbf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbf8:	2b0b      	cmp	r3, #11
 800fbfa:	d11b      	bne.n	800fc34 <ScheduleTx+0x118>
 800fbfc:	7bfb      	ldrb	r3, [r7, #15]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d018      	beq.n	800fc34 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800fc02:	4b1b      	ldr	r3, [pc, #108]	; (800fc70 <ScheduleTx+0x154>)
 800fc04:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d011      	beq.n	800fc30 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fc0c:	4b18      	ldr	r3, [pc, #96]	; (800fc70 <ScheduleTx+0x154>)
 800fc0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fc12:	f043 0320 	orr.w	r3, r3, #32
 800fc16:	4a16      	ldr	r2, [pc, #88]	; (800fc70 <ScheduleTx+0x154>)
 800fc18:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fc1c:	4b14      	ldr	r3, [pc, #80]	; (800fc70 <ScheduleTx+0x154>)
 800fc1e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fc22:	4619      	mov	r1, r3
 800fc24:	4816      	ldr	r0, [pc, #88]	; (800fc80 <ScheduleTx+0x164>)
 800fc26:	f00a fb87 	bl	801a338 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800fc2a:	4815      	ldr	r0, [pc, #84]	; (800fc80 <ScheduleTx+0x164>)
 800fc2c:	f00a faa6 	bl	801a17c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fc30:	2300      	movs	r3, #0
 800fc32:	e017      	b.n	800fc64 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fc34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc38:	e014      	b.n	800fc64 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fc3a:	f7ff fea1 	bl	800f980 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fc3e:	f7ff ff05 	bl	800fa4c <VerifyTxFrame>
 800fc42:	4603      	mov	r3, r0
 800fc44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fc48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d002      	beq.n	800fc56 <ScheduleTx+0x13a>
    {
        return status;
 800fc50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc54:	e006      	b.n	800fc64 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800fc56:	4b06      	ldr	r3, [pc, #24]	; (800fc70 <ScheduleTx+0x154>)
 800fc58:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f000 fb1d 	bl	801029c <SendFrameOnChannel>
 800fc62:	4603      	mov	r3, r0
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3738      	adds	r7, #56	; 0x38
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	20000964 	.word	0x20000964
 800fc70:	2000045c 	.word	0x2000045c
 800fc74:	20000994 	.word	0x20000994
 800fc78:	200008e0 	.word	0x200008e0
 800fc7c:	20000871 	.word	0x20000871
 800fc80:	200007c4 	.word	0x200007c4

0800fc84 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b084      	sub	sp, #16
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	460a      	mov	r2, r1
 800fc8e:	71fb      	strb	r3, [r7, #7]
 800fc90:	4613      	mov	r3, r2
 800fc92:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fc94:	2313      	movs	r3, #19
 800fc96:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800fc9c:	4b25      	ldr	r3, [pc, #148]	; (800fd34 <SecureFrame+0xb0>)
 800fc9e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d002      	beq.n	800fcac <SecureFrame+0x28>
 800fca6:	2b04      	cmp	r3, #4
 800fca8:	d011      	beq.n	800fcce <SecureFrame+0x4a>
 800fcaa:	e03b      	b.n	800fd24 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fcac:	4822      	ldr	r0, [pc, #136]	; (800fd38 <SecureFrame+0xb4>)
 800fcae:	f003 faf7 	bl	80132a0 <LoRaMacCryptoPrepareJoinRequest>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fcb6:	7bfb      	ldrb	r3, [r7, #15]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d001      	beq.n	800fcc0 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fcbc:	2311      	movs	r3, #17
 800fcbe:	e034      	b.n	800fd2a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fcc0:	4b1c      	ldr	r3, [pc, #112]	; (800fd34 <SecureFrame+0xb0>)
 800fcc2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	4b1a      	ldr	r3, [pc, #104]	; (800fd34 <SecureFrame+0xb0>)
 800fcca:	801a      	strh	r2, [r3, #0]
            break;
 800fccc:	e02c      	b.n	800fd28 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fcce:	f107 0308 	add.w	r3, r7, #8
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f003 fa0a 	bl	80130ec <LoRaMacCryptoGetFCntUp>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fcde:	2312      	movs	r3, #18
 800fce0:	e023      	b.n	800fd2a <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800fce2:	4b14      	ldr	r3, [pc, #80]	; (800fd34 <SecureFrame+0xb0>)
 800fce4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d104      	bne.n	800fcf6 <SecureFrame+0x72>
 800fcec:	4b11      	ldr	r3, [pc, #68]	; (800fd34 <SecureFrame+0xb0>)
 800fcee:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800fcf2:	2b01      	cmp	r3, #1
 800fcf4:	d902      	bls.n	800fcfc <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800fcfc:	68b8      	ldr	r0, [r7, #8]
 800fcfe:	79ba      	ldrb	r2, [r7, #6]
 800fd00:	79f9      	ldrb	r1, [r7, #7]
 800fd02:	4b0d      	ldr	r3, [pc, #52]	; (800fd38 <SecureFrame+0xb4>)
 800fd04:	f003 fbe4 	bl	80134d0 <LoRaMacCryptoSecureMessage>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fd0c:	7bfb      	ldrb	r3, [r7, #15]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d001      	beq.n	800fd16 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd12:	2311      	movs	r3, #17
 800fd14:	e009      	b.n	800fd2a <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fd16:	4b07      	ldr	r3, [pc, #28]	; (800fd34 <SecureFrame+0xb0>)
 800fd18:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fd1c:	b29a      	uxth	r2, r3
 800fd1e:	4b05      	ldr	r3, [pc, #20]	; (800fd34 <SecureFrame+0xb0>)
 800fd20:	801a      	strh	r2, [r3, #0]
            break;
 800fd22:	e001      	b.n	800fd28 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fd24:	2303      	movs	r3, #3
 800fd26:	e000      	b.n	800fd2a <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800fd28:	2300      	movs	r3, #0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3710      	adds	r7, #16
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	2000045c 	.word	0x2000045c
 800fd38:	20000564 	.word	0x20000564

0800fd3c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800fd40:	4b09      	ldr	r3, [pc, #36]	; (800fd68 <CalculateBackOff+0x2c>)
 800fd42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d10a      	bne.n	800fd5e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800fd48:	4b07      	ldr	r3, [pc, #28]	; (800fd68 <CalculateBackOff+0x2c>)
 800fd4a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800fd4e:	3b01      	subs	r3, #1
 800fd50:	4a06      	ldr	r2, [pc, #24]	; (800fd6c <CalculateBackOff+0x30>)
 800fd52:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800fd56:	fb02 f303 	mul.w	r3, r2, r3
 800fd5a:	4a03      	ldr	r2, [pc, #12]	; (800fd68 <CalculateBackOff+0x2c>)
 800fd5c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800fd5e:	bf00      	nop
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bc80      	pop	{r7}
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop
 800fd68:	20000964 	.word	0x20000964
 800fd6c:	2000045c 	.word	0x2000045c

0800fd70 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	4603      	mov	r3, r0
 800fd78:	7139      	strb	r1, [r7, #4]
 800fd7a:	71fb      	strb	r3, [r7, #7]
 800fd7c:	4613      	mov	r3, r2
 800fd7e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800fd80:	79fb      	ldrb	r3, [r7, #7]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d002      	beq.n	800fd8c <RemoveMacCommands+0x1c>
 800fd86:	79fb      	ldrb	r3, [r7, #7]
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	d10d      	bne.n	800fda8 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800fd8c:	79bb      	ldrb	r3, [r7, #6]
 800fd8e:	2b01      	cmp	r3, #1
 800fd90:	d108      	bne.n	800fda4 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800fd92:	793b      	ldrb	r3, [r7, #4]
 800fd94:	f003 0320 	and.w	r3, r3, #32
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d004      	beq.n	800fda8 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800fd9e:	f002 fb61 	bl	8012464 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800fda2:	e001      	b.n	800fda8 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800fda4:	f002 fb5e 	bl	8012464 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800fda8:	bf00      	nop
 800fdaa:	3708      	adds	r7, #8
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}

0800fdb0 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800fdb0:	b5b0      	push	{r4, r5, r7, lr}
 800fdb2:	b08e      	sub	sp, #56	; 0x38
 800fdb4:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800fdb6:	4b68      	ldr	r3, [pc, #416]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800fdbe:	4b66      	ldr	r3, [pc, #408]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800fdc4:	4b65      	ldr	r3, [pc, #404]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800fdcc:	4b63      	ldr	r3, [pc, #396]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fdce:	2201      	movs	r2, #1
 800fdd0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800fdd4:	4b61      	ldr	r3, [pc, #388]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800fddc:	4b5f      	ldr	r3, [pc, #380]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fdde:	2200      	movs	r2, #0
 800fde0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 800fde4:	4b5c      	ldr	r3, [pc, #368]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fde6:	2200      	movs	r2, #0
 800fde8:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800fdec:	4b5a      	ldr	r3, [pc, #360]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fdee:	2201      	movs	r2, #1
 800fdf0:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800fdf4:	4b58      	ldr	r3, [pc, #352]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fdf6:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800fdfa:	4b57      	ldr	r3, [pc, #348]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fdfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800fe00:	4b55      	ldr	r3, [pc, #340]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe02:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800fe06:	4b54      	ldr	r3, [pc, #336]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800fe0c:	4b52      	ldr	r3, [pc, #328]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe0e:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800fe12:	4b51      	ldr	r3, [pc, #324]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800fe18:	4b4f      	ldr	r3, [pc, #316]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe1a:	4a4f      	ldr	r2, [pc, #316]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe1c:	3364      	adds	r3, #100	; 0x64
 800fe1e:	32a4      	adds	r2, #164	; 0xa4
 800fe20:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe24:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800fe28:	4b4b      	ldr	r3, [pc, #300]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe2a:	4a4b      	ldr	r2, [pc, #300]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe2c:	336c      	adds	r3, #108	; 0x6c
 800fe2e:	32ac      	adds	r2, #172	; 0xac
 800fe30:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe34:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800fe38:	4b47      	ldr	r3, [pc, #284]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe3a:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 800fe3e:	4b46      	ldr	r3, [pc, #280]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800fe44:	4b44      	ldr	r3, [pc, #272]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe46:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 800fe4a:	4b43      	ldr	r3, [pc, #268]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe4c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800fe50:	4b41      	ldr	r3, [pc, #260]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fe56:	4a40      	ldr	r2, [pc, #256]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe58:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800fe5a:	4b3f      	ldr	r3, [pc, #252]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fe60:	4a3d      	ldr	r2, [pc, #244]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe62:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800fe64:	4b3d      	ldr	r3, [pc, #244]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fe66:	2200      	movs	r2, #0
 800fe68:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800fe6c:	4b3a      	ldr	r3, [pc, #232]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe6e:	2200      	movs	r2, #0
 800fe70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800fe74:	2301      	movs	r3, #1
 800fe76:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fe78:	4b39      	ldr	r3, [pc, #228]	; (800ff60 <ResetMacParameters+0x1b0>)
 800fe7a:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fe7c:	4b39      	ldr	r3, [pc, #228]	; (800ff64 <ResetMacParameters+0x1b4>)
 800fe7e:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fe80:	4b35      	ldr	r3, [pc, #212]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fe82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe86:	1d3a      	adds	r2, r7, #4
 800fe88:	4611      	mov	r1, r2
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f003 fff2 	bl	8013e74 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800fe90:	4b32      	ldr	r3, [pc, #200]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fe92:	2200      	movs	r2, #0
 800fe94:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fe98:	4b30      	ldr	r3, [pc, #192]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fe9a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fe9e:	4b2f      	ldr	r3, [pc, #188]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fea0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fea4:	4b2c      	ldr	r3, [pc, #176]	; (800ff58 <ResetMacParameters+0x1a8>)
 800fea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fea8:	4a2c      	ldr	r2, [pc, #176]	; (800ff5c <ResetMacParameters+0x1ac>)
 800feaa:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800feae:	4b2a      	ldr	r3, [pc, #168]	; (800ff58 <ResetMacParameters+0x1a8>)
 800feb0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800feb4:	4b29      	ldr	r3, [pc, #164]	; (800ff5c <ResetMacParameters+0x1ac>)
 800feb6:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800feba:	4b27      	ldr	r3, [pc, #156]	; (800ff58 <ResetMacParameters+0x1a8>)
 800febc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fec0:	4b26      	ldr	r3, [pc, #152]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fec2:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fec6:	4b25      	ldr	r3, [pc, #148]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fec8:	2200      	movs	r2, #0
 800feca:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fece:	4b23      	ldr	r3, [pc, #140]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fed0:	2201      	movs	r2, #1
 800fed2:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fed6:	4a21      	ldr	r2, [pc, #132]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fed8:	4b20      	ldr	r3, [pc, #128]	; (800ff5c <ResetMacParameters+0x1ac>)
 800feda:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800fede:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800fee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fee6:	682b      	ldr	r3, [r5, #0]
 800fee8:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800feea:	4b1c      	ldr	r3, [pc, #112]	; (800ff5c <ResetMacParameters+0x1ac>)
 800feec:	2201      	movs	r2, #1
 800feee:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fef2:	4b1a      	ldr	r3, [pc, #104]	; (800ff5c <ResetMacParameters+0x1ac>)
 800fef4:	2202      	movs	r2, #2
 800fef6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800fefa:	2300      	movs	r3, #0
 800fefc:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800fefe:	2300      	movs	r3, #0
 800ff00:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800ff02:	4b16      	ldr	r3, [pc, #88]	; (800ff5c <ResetMacParameters+0x1ac>)
 800ff04:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d009      	beq.n	800ff20 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800ff0c:	4b13      	ldr	r3, [pc, #76]	; (800ff5c <ResetMacParameters+0x1ac>)
 800ff0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800ff16:	4b11      	ldr	r3, [pc, #68]	; (800ff5c <ResetMacParameters+0x1ac>)
 800ff18:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ff1c:	691b      	ldr	r3, [r3, #16]
 800ff1e:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800ff20:	4b11      	ldr	r3, [pc, #68]	; (800ff68 <ResetMacParameters+0x1b8>)
 800ff22:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800ff24:	4b11      	ldr	r3, [pc, #68]	; (800ff6c <ResetMacParameters+0x1bc>)
 800ff26:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800ff28:	4b11      	ldr	r3, [pc, #68]	; (800ff70 <ResetMacParameters+0x1c0>)
 800ff2a:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800ff2c:	4b11      	ldr	r3, [pc, #68]	; (800ff74 <ResetMacParameters+0x1c4>)
 800ff2e:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800ff30:	4b11      	ldr	r3, [pc, #68]	; (800ff78 <ResetMacParameters+0x1c8>)
 800ff32:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800ff34:	4b11      	ldr	r3, [pc, #68]	; (800ff7c <ResetMacParameters+0x1cc>)
 800ff36:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800ff38:	4b11      	ldr	r3, [pc, #68]	; (800ff80 <ResetMacParameters+0x1d0>)
 800ff3a:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800ff3c:	4b11      	ldr	r3, [pc, #68]	; (800ff84 <ResetMacParameters+0x1d4>)
 800ff3e:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800ff40:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ff44:	f107 0310 	add.w	r3, r7, #16
 800ff48:	4a0f      	ldr	r2, [pc, #60]	; (800ff88 <ResetMacParameters+0x1d8>)
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f001 ffec 	bl	8011f28 <LoRaMacClassBInit>
}
 800ff50:	bf00      	nop
 800ff52:	3738      	adds	r7, #56	; 0x38
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bdb0      	pop	{r4, r5, r7, pc}
 800ff58:	20000964 	.word	0x20000964
 800ff5c:	2000045c 	.word	0x2000045c
 800ff60:	20000b3c 	.word	0x20000b3c
 800ff64:	20000bd0 	.word	0x20000bd0
 800ff68:	200008bc 	.word	0x200008bc
 800ff6c:	20000878 	.word	0x20000878
 800ff70:	200008a8 	.word	0x200008a8
 800ff74:	200008dd 	.word	0x200008dd
 800ff78:	20000a30 	.word	0x20000a30
 800ff7c:	200009a4 	.word	0x200009a4
 800ff80:	200009a8 	.word	0x200009a8
 800ff84:	20000a34 	.word	0x20000a34
 800ff88:	20000c98 	.word	0x20000c98

0800ff8c <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f00a f95e 	bl	801a258 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800ff9c:	4b0e      	ldr	r3, [pc, #56]	; (800ffd8 <RxWindowSetup+0x4c>)
 800ff9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffa0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ffa2:	4b0e      	ldr	r3, [pc, #56]	; (800ffdc <RxWindowSetup+0x50>)
 800ffa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ffa8:	4a0d      	ldr	r2, [pc, #52]	; (800ffe0 <RxWindowSetup+0x54>)
 800ffaa:	6839      	ldr	r1, [r7, #0]
 800ffac:	4618      	mov	r0, r3
 800ffae:	f003 ffc9 	bl	8013f44 <RegionRxConfig>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d00a      	beq.n	800ffce <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800ffb8:	4b07      	ldr	r3, [pc, #28]	; (800ffd8 <RxWindowSetup+0x4c>)
 800ffba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffbc:	4a07      	ldr	r2, [pc, #28]	; (800ffdc <RxWindowSetup+0x50>)
 800ffbe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ffc0:	4610      	mov	r0, r2
 800ffc2:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	7cda      	ldrb	r2, [r3, #19]
 800ffc8:	4b06      	ldr	r3, [pc, #24]	; (800ffe4 <RxWindowSetup+0x58>)
 800ffca:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800ffce:	bf00      	nop
 800ffd0:	3708      	adds	r7, #8
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	0801ba28 	.word	0x0801ba28
 800ffdc:	20000964 	.word	0x20000964
 800ffe0:	2000087c 	.word	0x2000087c
 800ffe4:	2000045c 	.word	0x2000045c

0800ffe8 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800ffe8:	b590      	push	{r4, r7, lr}
 800ffea:	b083      	sub	sp, #12
 800ffec:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ffee:	4b18      	ldr	r3, [pc, #96]	; (8010050 <OpenContinuousRxCWindow+0x68>)
 800fff0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800fff4:	4b16      	ldr	r3, [pc, #88]	; (8010050 <OpenContinuousRxCWindow+0x68>)
 800fff6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fffa:	b259      	sxtb	r1, r3
 800fffc:	4b14      	ldr	r3, [pc, #80]	; (8010050 <OpenContinuousRxCWindow+0x68>)
 800fffe:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010002:	4b13      	ldr	r3, [pc, #76]	; (8010050 <OpenContinuousRxCWindow+0x68>)
 8010004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010006:	4c13      	ldr	r4, [pc, #76]	; (8010054 <OpenContinuousRxCWindow+0x6c>)
 8010008:	9400      	str	r4, [sp, #0]
 801000a:	f003 ff81 	bl	8013f10 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801000e:	4b12      	ldr	r3, [pc, #72]	; (8010058 <OpenContinuousRxCWindow+0x70>)
 8010010:	2202      	movs	r2, #2
 8010012:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010016:	4b10      	ldr	r3, [pc, #64]	; (8010058 <OpenContinuousRxCWindow+0x70>)
 8010018:	2201      	movs	r2, #1
 801001a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801001e:	4b0c      	ldr	r3, [pc, #48]	; (8010050 <OpenContinuousRxCWindow+0x68>)
 8010020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010024:	4a0d      	ldr	r2, [pc, #52]	; (801005c <OpenContinuousRxCWindow+0x74>)
 8010026:	490b      	ldr	r1, [pc, #44]	; (8010054 <OpenContinuousRxCWindow+0x6c>)
 8010028:	4618      	mov	r0, r3
 801002a:	f003 ff8b 	bl	8013f44 <RegionRxConfig>
 801002e:	4603      	mov	r3, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d009      	beq.n	8010048 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 8010034:	4b0a      	ldr	r3, [pc, #40]	; (8010060 <OpenContinuousRxCWindow+0x78>)
 8010036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010038:	2000      	movs	r0, #0
 801003a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 801003c:	4b06      	ldr	r3, [pc, #24]	; (8010058 <OpenContinuousRxCWindow+0x70>)
 801003e:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8010042:	4b05      	ldr	r3, [pc, #20]	; (8010058 <OpenContinuousRxCWindow+0x70>)
 8010044:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8010048:	bf00      	nop
 801004a:	3704      	adds	r7, #4
 801004c:	46bd      	mov	sp, r7
 801004e:	bd90      	pop	{r4, r7, pc}
 8010050:	20000964 	.word	0x20000964
 8010054:	2000083c 	.word	0x2000083c
 8010058:	2000045c 	.word	0x2000045c
 801005c:	2000087c 	.word	0x2000087c
 8010060:	0801ba28 	.word	0x0801ba28

08010064 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b088      	sub	sp, #32
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	603b      	str	r3, [r7, #0]
 8010070:	4613      	mov	r3, r2
 8010072:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010074:	4b82      	ldr	r3, [pc, #520]	; (8010280 <PrepareFrame+0x21c>)
 8010076:	2200      	movs	r2, #0
 8010078:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801007a:	4b81      	ldr	r3, [pc, #516]	; (8010280 <PrepareFrame+0x21c>)
 801007c:	2200      	movs	r2, #0
 801007e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010086:	2300      	movs	r3, #0
 8010088:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801008a:	2300      	movs	r3, #0
 801008c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d101      	bne.n	8010098 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010094:	2300      	movs	r3, #0
 8010096:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010098:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801009a:	461a      	mov	r2, r3
 801009c:	6839      	ldr	r1, [r7, #0]
 801009e:	4879      	ldr	r0, [pc, #484]	; (8010284 <PrepareFrame+0x220>)
 80100a0:	f006 f9c9 	bl	8016436 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80100a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80100a6:	b2da      	uxtb	r2, r3
 80100a8:	4b75      	ldr	r3, [pc, #468]	; (8010280 <PrepareFrame+0x21c>)
 80100aa:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	781a      	ldrb	r2, [r3, #0]
 80100b2:	4b73      	ldr	r3, [pc, #460]	; (8010280 <PrepareFrame+0x21c>)
 80100b4:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	2b07      	cmp	r3, #7
 80100c2:	f000 80b9 	beq.w	8010238 <PrepareFrame+0x1d4>
 80100c6:	2b07      	cmp	r3, #7
 80100c8:	f300 80d0 	bgt.w	801026c <PrepareFrame+0x208>
 80100cc:	2b02      	cmp	r3, #2
 80100ce:	d006      	beq.n	80100de <PrepareFrame+0x7a>
 80100d0:	2b04      	cmp	r3, #4
 80100d2:	f040 80cb 	bne.w	801026c <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80100d6:	4b6a      	ldr	r3, [pc, #424]	; (8010280 <PrepareFrame+0x21c>)
 80100d8:	2201      	movs	r2, #1
 80100da:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80100de:	4b68      	ldr	r3, [pc, #416]	; (8010280 <PrepareFrame+0x21c>)
 80100e0:	2204      	movs	r2, #4
 80100e2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80100e6:	4b66      	ldr	r3, [pc, #408]	; (8010280 <PrepareFrame+0x21c>)
 80100e8:	4a67      	ldr	r2, [pc, #412]	; (8010288 <PrepareFrame+0x224>)
 80100ea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80100ee:	4b64      	ldr	r3, [pc, #400]	; (8010280 <PrepareFrame+0x21c>)
 80100f0:	22ff      	movs	r2, #255	; 0xff
 80100f2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	781a      	ldrb	r2, [r3, #0]
 80100fa:	4b61      	ldr	r3, [pc, #388]	; (8010280 <PrepareFrame+0x21c>)
 80100fc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010100:	4a5f      	ldr	r2, [pc, #380]	; (8010280 <PrepareFrame+0x21c>)
 8010102:	79fb      	ldrb	r3, [r7, #7]
 8010104:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010108:	4b60      	ldr	r3, [pc, #384]	; (801028c <PrepareFrame+0x228>)
 801010a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801010e:	4a5c      	ldr	r2, [pc, #368]	; (8010280 <PrepareFrame+0x21c>)
 8010110:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	781a      	ldrb	r2, [r3, #0]
 8010118:	4b59      	ldr	r3, [pc, #356]	; (8010280 <PrepareFrame+0x21c>)
 801011a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801011e:	4b58      	ldr	r3, [pc, #352]	; (8010280 <PrepareFrame+0x21c>)
 8010120:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8010124:	4b56      	ldr	r3, [pc, #344]	; (8010280 <PrepareFrame+0x21c>)
 8010126:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801012a:	4b55      	ldr	r3, [pc, #340]	; (8010280 <PrepareFrame+0x21c>)
 801012c:	4a55      	ldr	r2, [pc, #340]	; (8010284 <PrepareFrame+0x220>)
 801012e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010132:	f107 0318 	add.w	r3, r7, #24
 8010136:	4618      	mov	r0, r3
 8010138:	f002 ffd8 	bl	80130ec <LoRaMacCryptoGetFCntUp>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d001      	beq.n	8010146 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010142:	2312      	movs	r3, #18
 8010144:	e098      	b.n	8010278 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	b29a      	uxth	r2, r3
 801014a:	4b4d      	ldr	r3, [pc, #308]	; (8010280 <PrepareFrame+0x21c>)
 801014c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8010150:	4b4b      	ldr	r3, [pc, #300]	; (8010280 <PrepareFrame+0x21c>)
 8010152:	2200      	movs	r2, #0
 8010154:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8010158:	4b49      	ldr	r3, [pc, #292]	; (8010280 <PrepareFrame+0x21c>)
 801015a:	2200      	movs	r2, #0
 801015c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010160:	69bb      	ldr	r3, [r7, #24]
 8010162:	4a47      	ldr	r2, [pc, #284]	; (8010280 <PrepareFrame+0x21c>)
 8010164:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010168:	f107 0314 	add.w	r3, r7, #20
 801016c:	4618      	mov	r0, r3
 801016e:	f002 f99b 	bl	80124a8 <LoRaMacCommandsGetSizeSerializedCmds>
 8010172:	4603      	mov	r3, r0
 8010174:	2b00      	cmp	r3, #0
 8010176:	d001      	beq.n	801017c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010178:	2313      	movs	r3, #19
 801017a:	e07d      	b.n	8010278 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d076      	beq.n	8010270 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010182:	4b42      	ldr	r3, [pc, #264]	; (801028c <PrepareFrame+0x228>)
 8010184:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010188:	4618      	mov	r0, r3
 801018a:	f7fe fdab 	bl	800ece4 <GetMaxAppPayloadWithoutFOptsLength>
 801018e:	4603      	mov	r3, r0
 8010190:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010192:	4b3b      	ldr	r3, [pc, #236]	; (8010280 <PrepareFrame+0x21c>)
 8010194:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010198:	2b00      	cmp	r3, #0
 801019a:	d01d      	beq.n	80101d8 <PrepareFrame+0x174>
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	2b0f      	cmp	r3, #15
 80101a0:	d81a      	bhi.n	80101d8 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80101a2:	f107 0314 	add.w	r3, r7, #20
 80101a6:	4a3a      	ldr	r2, [pc, #232]	; (8010290 <PrepareFrame+0x22c>)
 80101a8:	4619      	mov	r1, r3
 80101aa:	200f      	movs	r0, #15
 80101ac:	f002 f992 	bl	80124d4 <LoRaMacCommandsSerializeCmds>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d001      	beq.n	80101ba <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80101b6:	2313      	movs	r3, #19
 80101b8:	e05e      	b.n	8010278 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	f003 030f 	and.w	r3, r3, #15
 80101c0:	b2d9      	uxtb	r1, r3
 80101c2:	68ba      	ldr	r2, [r7, #8]
 80101c4:	7813      	ldrb	r3, [r2, #0]
 80101c6:	f361 0303 	bfi	r3, r1, #0, #4
 80101ca:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	781a      	ldrb	r2, [r3, #0]
 80101d0:	4b2b      	ldr	r3, [pc, #172]	; (8010280 <PrepareFrame+0x21c>)
 80101d2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80101d6:	e04b      	b.n	8010270 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80101d8:	4b29      	ldr	r3, [pc, #164]	; (8010280 <PrepareFrame+0x21c>)
 80101da:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d010      	beq.n	8010204 <PrepareFrame+0x1a0>
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	2b0f      	cmp	r3, #15
 80101e6:	d90d      	bls.n	8010204 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80101e8:	7ffb      	ldrb	r3, [r7, #31]
 80101ea:	f107 0114 	add.w	r1, r7, #20
 80101ee:	4a29      	ldr	r2, [pc, #164]	; (8010294 <PrepareFrame+0x230>)
 80101f0:	4618      	mov	r0, r3
 80101f2:	f002 f96f 	bl	80124d4 <LoRaMacCommandsSerializeCmds>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d001      	beq.n	8010200 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80101fc:	2313      	movs	r3, #19
 80101fe:	e03b      	b.n	8010278 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010200:	230a      	movs	r3, #10
 8010202:	e039      	b.n	8010278 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010204:	7ffb      	ldrb	r3, [r7, #31]
 8010206:	f107 0114 	add.w	r1, r7, #20
 801020a:	4a22      	ldr	r2, [pc, #136]	; (8010294 <PrepareFrame+0x230>)
 801020c:	4618      	mov	r0, r3
 801020e:	f002 f961 	bl	80124d4 <LoRaMacCommandsSerializeCmds>
 8010212:	4603      	mov	r3, r0
 8010214:	2b00      	cmp	r3, #0
 8010216:	d001      	beq.n	801021c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010218:	2313      	movs	r3, #19
 801021a:	e02d      	b.n	8010278 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801021c:	4b18      	ldr	r3, [pc, #96]	; (8010280 <PrepareFrame+0x21c>)
 801021e:	2200      	movs	r2, #0
 8010220:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010224:	4b16      	ldr	r3, [pc, #88]	; (8010280 <PrepareFrame+0x21c>)
 8010226:	4a1b      	ldr	r2, [pc, #108]	; (8010294 <PrepareFrame+0x230>)
 8010228:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	b2da      	uxtb	r2, r3
 8010230:	4b13      	ldr	r3, [pc, #76]	; (8010280 <PrepareFrame+0x21c>)
 8010232:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8010236:	e01b      	b.n	8010270 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d01a      	beq.n	8010274 <PrepareFrame+0x210>
 801023e:	4b10      	ldr	r3, [pc, #64]	; (8010280 <PrepareFrame+0x21c>)
 8010240:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010244:	2b00      	cmp	r3, #0
 8010246:	d015      	beq.n	8010274 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010248:	4813      	ldr	r0, [pc, #76]	; (8010298 <PrepareFrame+0x234>)
 801024a:	4b0d      	ldr	r3, [pc, #52]	; (8010280 <PrepareFrame+0x21c>)
 801024c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010250:	b29b      	uxth	r3, r3
 8010252:	461a      	mov	r2, r3
 8010254:	6839      	ldr	r1, [r7, #0]
 8010256:	f006 f8ee 	bl	8016436 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801025a:	4b09      	ldr	r3, [pc, #36]	; (8010280 <PrepareFrame+0x21c>)
 801025c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010260:	b29b      	uxth	r3, r3
 8010262:	3301      	adds	r3, #1
 8010264:	b29a      	uxth	r2, r3
 8010266:	4b06      	ldr	r3, [pc, #24]	; (8010280 <PrepareFrame+0x21c>)
 8010268:	801a      	strh	r2, [r3, #0]
            }
            break;
 801026a:	e003      	b.n	8010274 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801026c:	2302      	movs	r3, #2
 801026e:	e003      	b.n	8010278 <PrepareFrame+0x214>
            break;
 8010270:	bf00      	nop
 8010272:	e000      	b.n	8010276 <PrepareFrame+0x212>
            break;
 8010274:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010276:	2300      	movs	r3, #0
}
 8010278:	4618      	mov	r0, r3
 801027a:	3720      	adds	r7, #32
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	2000045c 	.word	0x2000045c
 8010284:	20000594 	.word	0x20000594
 8010288:	2000045e 	.word	0x2000045e
 801028c:	20000964 	.word	0x20000964
 8010290:	20000574 	.word	0x20000574
 8010294:	200008e4 	.word	0x200008e4
 8010298:	2000045f 	.word	0x2000045f

0801029c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b08a      	sub	sp, #40	; 0x28
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	4603      	mov	r3, r0
 80102a4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80102a6:	2303      	movs	r3, #3
 80102a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80102b0:	79fb      	ldrb	r3, [r7, #7]
 80102b2:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80102b4:	4b47      	ldr	r3, [pc, #284]	; (80103d4 <SendFrameOnChannel+0x138>)
 80102b6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80102ba:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80102bc:	4b45      	ldr	r3, [pc, #276]	; (80103d4 <SendFrameOnChannel+0x138>)
 80102be:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80102c2:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80102c4:	4b43      	ldr	r3, [pc, #268]	; (80103d4 <SendFrameOnChannel+0x138>)
 80102c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102c8:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80102ca:	4b42      	ldr	r3, [pc, #264]	; (80103d4 <SendFrameOnChannel+0x138>)
 80102cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102ce:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80102d0:	4b41      	ldr	r3, [pc, #260]	; (80103d8 <SendFrameOnChannel+0x13c>)
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80102d6:	4b3f      	ldr	r3, [pc, #252]	; (80103d4 <SendFrameOnChannel+0x138>)
 80102d8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80102dc:	f107 020f 	add.w	r2, r7, #15
 80102e0:	f107 0110 	add.w	r1, r7, #16
 80102e4:	4b3d      	ldr	r3, [pc, #244]	; (80103dc <SendFrameOnChannel+0x140>)
 80102e6:	f003 fe42 	bl	8013f6e <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80102ea:	4b3b      	ldr	r3, [pc, #236]	; (80103d8 <SendFrameOnChannel+0x13c>)
 80102ec:	2201      	movs	r2, #1
 80102ee:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80102f2:	4b38      	ldr	r3, [pc, #224]	; (80103d4 <SendFrameOnChannel+0x138>)
 80102f4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80102f8:	b2da      	uxtb	r2, r3
 80102fa:	4b37      	ldr	r3, [pc, #220]	; (80103d8 <SendFrameOnChannel+0x13c>)
 80102fc:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8010300:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010304:	4b34      	ldr	r3, [pc, #208]	; (80103d8 <SendFrameOnChannel+0x13c>)
 8010306:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 801030a:	79fb      	ldrb	r3, [r7, #7]
 801030c:	4a32      	ldr	r2, [pc, #200]	; (80103d8 <SendFrameOnChannel+0x13c>)
 801030e:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010312:	4b31      	ldr	r3, [pc, #196]	; (80103d8 <SendFrameOnChannel+0x13c>)
 8010314:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010318:	4a2f      	ldr	r2, [pc, #188]	; (80103d8 <SendFrameOnChannel+0x13c>)
 801031a:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801031e:	4b2e      	ldr	r3, [pc, #184]	; (80103d8 <SendFrameOnChannel+0x13c>)
 8010320:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010324:	4a2c      	ldr	r2, [pc, #176]	; (80103d8 <SendFrameOnChannel+0x13c>)
 8010326:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801032a:	f001 fe69 	bl	8012000 <LoRaMacClassBIsBeaconModeActive>
 801032e:	4603      	mov	r3, r0
 8010330:	2b00      	cmp	r3, #0
 8010332:	d00b      	beq.n	801034c <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010334:	4b28      	ldr	r3, [pc, #160]	; (80103d8 <SendFrameOnChannel+0x13c>)
 8010336:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801033a:	4618      	mov	r0, r3
 801033c:	f001 fecb 	bl	80120d6 <LoRaMacClassBIsUplinkCollision>
 8010340:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010342:	6a3b      	ldr	r3, [r7, #32]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d001      	beq.n	801034c <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010348:	2310      	movs	r3, #16
 801034a:	e03e      	b.n	80103ca <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801034c:	4b21      	ldr	r3, [pc, #132]	; (80103d4 <SendFrameOnChannel+0x138>)
 801034e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010352:	2b01      	cmp	r3, #1
 8010354:	d101      	bne.n	801035a <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010356:	f001 fec8 	bl	80120ea <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801035a:	f001 fe62 	bl	8012022 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801035e:	4b1d      	ldr	r3, [pc, #116]	; (80103d4 <SendFrameOnChannel+0x138>)
 8010360:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010364:	b2db      	uxtb	r3, r3
 8010366:	4a1c      	ldr	r2, [pc, #112]	; (80103d8 <SendFrameOnChannel+0x13c>)
 8010368:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 801036c:	4611      	mov	r1, r2
 801036e:	4618      	mov	r0, r3
 8010370:	f7ff fc88 	bl	800fc84 <SecureFrame>
 8010374:	4603      	mov	r3, r0
 8010376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 801037a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801037e:	2b00      	cmp	r3, #0
 8010380:	d002      	beq.n	8010388 <SendFrameOnChannel+0xec>
    {
        return status;
 8010382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010386:	e020      	b.n	80103ca <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010388:	4b13      	ldr	r3, [pc, #76]	; (80103d8 <SendFrameOnChannel+0x13c>)
 801038a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801038e:	f043 0302 	orr.w	r3, r3, #2
 8010392:	4a11      	ldr	r2, [pc, #68]	; (80103d8 <SendFrameOnChannel+0x13c>)
 8010394:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8010398:	4b0f      	ldr	r3, [pc, #60]	; (80103d8 <SendFrameOnChannel+0x13c>)
 801039a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801039e:	f083 0301 	eor.w	r3, r3, #1
 80103a2:	b2db      	uxtb	r3, r3
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d007      	beq.n	80103b8 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 80103a8:	4b0b      	ldr	r3, [pc, #44]	; (80103d8 <SendFrameOnChannel+0x13c>)
 80103aa:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80103ae:	3301      	adds	r3, #1
 80103b0:	b2da      	uxtb	r2, r3
 80103b2:	4b09      	ldr	r3, [pc, #36]	; (80103d8 <SendFrameOnChannel+0x13c>)
 80103b4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80103b8:	4b09      	ldr	r3, [pc, #36]	; (80103e0 <SendFrameOnChannel+0x144>)
 80103ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103bc:	4a06      	ldr	r2, [pc, #24]	; (80103d8 <SendFrameOnChannel+0x13c>)
 80103be:	8812      	ldrh	r2, [r2, #0]
 80103c0:	b2d2      	uxtb	r2, r2
 80103c2:	4611      	mov	r1, r2
 80103c4:	4807      	ldr	r0, [pc, #28]	; (80103e4 <SendFrameOnChannel+0x148>)
 80103c6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3728      	adds	r7, #40	; 0x28
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop
 80103d4:	20000964 	.word	0x20000964
 80103d8:	2000045c 	.word	0x2000045c
 80103dc:	20000874 	.word	0x20000874
 80103e0:	0801ba28 	.word	0x0801ba28
 80103e4:	2000045e 	.word	0x2000045e

080103e8 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b086      	sub	sp, #24
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	4603      	mov	r3, r0
 80103f0:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80103f2:	4b15      	ldr	r3, [pc, #84]	; (8010448 <SetTxContinuousWave+0x60>)
 80103f4:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80103f8:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80103fa:	4b14      	ldr	r3, [pc, #80]	; (801044c <SetTxContinuousWave+0x64>)
 80103fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010400:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010402:	4b12      	ldr	r3, [pc, #72]	; (801044c <SetTxContinuousWave+0x64>)
 8010404:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010408:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801040a:	4b10      	ldr	r3, [pc, #64]	; (801044c <SetTxContinuousWave+0x64>)
 801040c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801040e:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010410:	4b0e      	ldr	r3, [pc, #56]	; (801044c <SetTxContinuousWave+0x64>)
 8010412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010414:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8010416:	88fb      	ldrh	r3, [r7, #6]
 8010418:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 801041a:	4b0c      	ldr	r3, [pc, #48]	; (801044c <SetTxContinuousWave+0x64>)
 801041c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010420:	f107 0208 	add.w	r2, r7, #8
 8010424:	4611      	mov	r1, r2
 8010426:	4618      	mov	r0, r3
 8010428:	f003 fe50 	bl	80140cc <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801042c:	4b06      	ldr	r3, [pc, #24]	; (8010448 <SetTxContinuousWave+0x60>)
 801042e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010432:	f043 0302 	orr.w	r3, r3, #2
 8010436:	4a04      	ldr	r2, [pc, #16]	; (8010448 <SetTxContinuousWave+0x60>)
 8010438:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801043c:	2300      	movs	r3, #0
}
 801043e:	4618      	mov	r0, r3
 8010440:	3718      	adds	r7, #24
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop
 8010448:	2000045c 	.word	0x2000045c
 801044c:	20000964 	.word	0x20000964

08010450 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
 8010456:	4603      	mov	r3, r0
 8010458:	6039      	str	r1, [r7, #0]
 801045a:	80fb      	strh	r3, [r7, #6]
 801045c:	4613      	mov	r3, r2
 801045e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010460:	4b09      	ldr	r3, [pc, #36]	; (8010488 <SetTxContinuousWave1+0x38>)
 8010462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010464:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010468:	88fa      	ldrh	r2, [r7, #6]
 801046a:	6838      	ldr	r0, [r7, #0]
 801046c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801046e:	4b07      	ldr	r3, [pc, #28]	; (801048c <SetTxContinuousWave1+0x3c>)
 8010470:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010474:	f043 0302 	orr.w	r3, r3, #2
 8010478:	4a04      	ldr	r2, [pc, #16]	; (801048c <SetTxContinuousWave1+0x3c>)
 801047a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801047e:	2300      	movs	r3, #0
}
 8010480:	4618      	mov	r0, r3
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}
 8010488:	0801ba28 	.word	0x0801ba28
 801048c:	2000045c 	.word	0x2000045c

08010490 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 8010490:	b480      	push	{r7}
 8010492:	af00      	add	r7, sp, #0
    return &Nvm;
 8010494:	4b02      	ldr	r3, [pc, #8]	; (80104a0 <GetNvmData+0x10>)
}
 8010496:	4618      	mov	r0, r3
 8010498:	46bd      	mov	sp, r7
 801049a:	bc80      	pop	{r7}
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop
 80104a0:	20000964 	.word	0x20000964

080104a4 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80104ac:	2300      	movs	r3, #0
 80104ae:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d101      	bne.n	80104ba <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80104b6:	2303      	movs	r3, #3
 80104b8:	e09a      	b.n	80105f0 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80104ba:	4b4f      	ldr	r3, [pc, #316]	; (80105f8 <RestoreNvmData+0x154>)
 80104bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	d001      	beq.n	80104c8 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 80104c4:	2301      	movs	r3, #1
 80104c6:	e093      	b.n	80105f0 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2124      	movs	r1, #36	; 0x24
 80104cc:	4618      	mov	r0, r3
 80104ce:	f006 f807 	bl	80164e0 <Crc32>
 80104d2:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104d8:	68fa      	ldr	r2, [r7, #12]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d105      	bne.n	80104ea <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2228      	movs	r2, #40	; 0x28
 80104e2:	4619      	mov	r1, r3
 80104e4:	4845      	ldr	r0, [pc, #276]	; (80105fc <RestoreNvmData+0x158>)
 80104e6:	f005 ffa6 	bl	8016436 <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	3328      	adds	r3, #40	; 0x28
 80104ee:	2114      	movs	r1, #20
 80104f0:	4618      	mov	r0, r3
 80104f2:	f005 fff5 	bl	80164e0 <Crc32>
 80104f6:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d106      	bne.n	8010510 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	3328      	adds	r3, #40	; 0x28
 8010506:	2218      	movs	r2, #24
 8010508:	4619      	mov	r1, r3
 801050a:	483d      	ldr	r0, [pc, #244]	; (8010600 <RestoreNvmData+0x15c>)
 801050c:	f005 ff93 	bl	8016436 <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	3340      	adds	r3, #64	; 0x40
 8010514:	21d4      	movs	r1, #212	; 0xd4
 8010516:	4618      	mov	r0, r3
 8010518:	f005 ffe2 	bl	80164e0 <Crc32>
 801051c:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	429a      	cmp	r2, r3
 8010528:	d11f      	bne.n	801056a <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	3340      	adds	r3, #64	; 0x40
 801052e:	22d8      	movs	r2, #216	; 0xd8
 8010530:	4619      	mov	r1, r3
 8010532:	4834      	ldr	r0, [pc, #208]	; (8010604 <RestoreNvmData+0x160>)
 8010534:	f005 ff7f 	bl	8016436 <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010538:	4b2f      	ldr	r3, [pc, #188]	; (80105f8 <RestoreNvmData+0x154>)
 801053a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801053e:	4b2e      	ldr	r3, [pc, #184]	; (80105f8 <RestoreNvmData+0x154>)
 8010540:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010544:	4b2d      	ldr	r3, [pc, #180]	; (80105fc <RestoreNvmData+0x158>)
 8010546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010548:	4a2b      	ldr	r2, [pc, #172]	; (80105f8 <RestoreNvmData+0x154>)
 801054a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801054e:	4b2b      	ldr	r3, [pc, #172]	; (80105fc <RestoreNvmData+0x158>)
 8010550:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010554:	4b28      	ldr	r3, [pc, #160]	; (80105f8 <RestoreNvmData+0x154>)
 8010556:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 801055a:	4b27      	ldr	r3, [pc, #156]	; (80105f8 <RestoreNvmData+0x154>)
 801055c:	2201      	movs	r2, #1
 801055e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010562:	4b25      	ldr	r3, [pc, #148]	; (80105f8 <RestoreNvmData+0x154>)
 8010564:	2202      	movs	r2, #2
 8010566:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010570:	21bc      	movs	r1, #188	; 0xbc
 8010572:	4618      	mov	r0, r3
 8010574:	f005 ffb4 	bl	80164e0 <Crc32>
 8010578:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8010580:	68fa      	ldr	r2, [r7, #12]
 8010582:	429a      	cmp	r2, r3
 8010584:	d107      	bne.n	8010596 <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801058c:	22c0      	movs	r2, #192	; 0xc0
 801058e:	4619      	mov	r1, r3
 8010590:	481d      	ldr	r0, [pc, #116]	; (8010608 <RestoreNvmData+0x164>)
 8010592:	f005 ff50 	bl	8016436 <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801059c:	2190      	movs	r1, #144	; 0x90
 801059e:	4618      	mov	r0, r3
 80105a0:	f005 ff9e 	bl	80164e0 <Crc32>
 80105a4:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80105ac:	68fa      	ldr	r2, [r7, #12]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d107      	bne.n	80105c2 <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80105b8:	2294      	movs	r2, #148	; 0x94
 80105ba:	4619      	mov	r1, r3
 80105bc:	4813      	ldr	r0, [pc, #76]	; (801060c <RestoreNvmData+0x168>)
 80105be:	f005 ff3a 	bl	8016436 <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80105c8:	2114      	movs	r1, #20
 80105ca:	4618      	mov	r0, r3
 80105cc:	f005 ff88 	bl	80164e0 <Crc32>
 80105d0:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80105d8:	68fa      	ldr	r2, [r7, #12]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d107      	bne.n	80105ee <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80105e4:	2218      	movs	r2, #24
 80105e6:	4619      	mov	r1, r3
 80105e8:	4809      	ldr	r0, [pc, #36]	; (8010610 <RestoreNvmData+0x16c>)
 80105ea:	f005 ff24 	bl	8016436 <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 80105ee:	2300      	movs	r3, #0
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	3710      	adds	r7, #16
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}
 80105f8:	2000045c 	.word	0x2000045c
 80105fc:	20000964 	.word	0x20000964
 8010600:	2000098c 	.word	0x2000098c
 8010604:	200009a4 	.word	0x200009a4
 8010608:	20000a7c 	.word	0x20000a7c
 801060c:	20000b3c 	.word	0x20000b3c
 8010610:	20000c98 	.word	0x20000c98

08010614 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d002      	beq.n	801062a <DetermineFrameType+0x16>
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d101      	bne.n	801062e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801062a:	2303      	movs	r3, #3
 801062c:	e03b      	b.n	80106a6 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	7b1b      	ldrb	r3, [r3, #12]
 8010632:	f003 030f 	and.w	r3, r3, #15
 8010636:	b2db      	uxtb	r3, r3
 8010638:	2b00      	cmp	r3, #0
 801063a:	d008      	beq.n	801064e <DetermineFrameType+0x3a>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d003      	beq.n	801064e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	2200      	movs	r2, #0
 801064a:	701a      	strb	r2, [r3, #0]
 801064c:	e02a      	b.n	80106a4 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010654:	2b00      	cmp	r3, #0
 8010656:	d103      	bne.n	8010660 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	2201      	movs	r2, #1
 801065c:	701a      	strb	r2, [r3, #0]
 801065e:	e021      	b.n	80106a4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	7b1b      	ldrb	r3, [r3, #12]
 8010664:	f003 030f 	and.w	r3, r3, #15
 8010668:	b2db      	uxtb	r3, r3
 801066a:	2b00      	cmp	r3, #0
 801066c:	d108      	bne.n	8010680 <DetermineFrameType+0x6c>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d103      	bne.n	8010680 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	2202      	movs	r2, #2
 801067c:	701a      	strb	r2, [r3, #0]
 801067e:	e011      	b.n	80106a4 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	7b1b      	ldrb	r3, [r3, #12]
 8010684:	f003 030f 	and.w	r3, r3, #15
 8010688:	b2db      	uxtb	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d108      	bne.n	80106a0 <DetermineFrameType+0x8c>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d003      	beq.n	80106a0 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	2203      	movs	r2, #3
 801069c:	701a      	strb	r2, [r3, #0]
 801069e:	e001      	b.n	80106a4 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80106a0:	2317      	movs	r3, #23
 80106a2:	e000      	b.n	80106a6 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80106a4:	2300      	movs	r3, #0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	370c      	adds	r7, #12
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bc80      	pop	{r7}
 80106ae:	4770      	bx	lr

080106b0 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80106b0:	b480      	push	{r7}
 80106b2:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80106b4:	4b12      	ldr	r3, [pc, #72]	; (8010700 <CheckRetransUnconfirmedUplink+0x50>)
 80106b6:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 80106ba:	4b12      	ldr	r3, [pc, #72]	; (8010704 <CheckRetransUnconfirmedUplink+0x54>)
 80106bc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d301      	bcc.n	80106c8 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 80106c4:	2301      	movs	r3, #1
 80106c6:	e016      	b.n	80106f6 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80106c8:	4b0d      	ldr	r3, [pc, #52]	; (8010700 <CheckRetransUnconfirmedUplink+0x50>)
 80106ca:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80106ce:	f003 0302 	and.w	r3, r3, #2
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00d      	beq.n	80106f4 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80106d8:	4b0a      	ldr	r3, [pc, #40]	; (8010704 <CheckRetransUnconfirmedUplink+0x54>)
 80106da:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d101      	bne.n	80106e6 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 80106e2:	2301      	movs	r3, #1
 80106e4:	e007      	b.n	80106f6 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80106e6:	4b06      	ldr	r3, [pc, #24]	; (8010700 <CheckRetransUnconfirmedUplink+0x50>)
 80106e8:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d101      	bne.n	80106f4 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 80106f0:	2301      	movs	r3, #1
 80106f2:	e000      	b.n	80106f6 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80106f4:	2300      	movs	r3, #0
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bc80      	pop	{r7}
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	2000045c 	.word	0x2000045c
 8010704:	20000964 	.word	0x20000964

08010708 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010708:	b480      	push	{r7}
 801070a:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 801070c:	4b0e      	ldr	r3, [pc, #56]	; (8010748 <CheckRetransConfirmedUplink+0x40>)
 801070e:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8010712:	4b0d      	ldr	r3, [pc, #52]	; (8010748 <CheckRetransConfirmedUplink+0x40>)
 8010714:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010718:	429a      	cmp	r2, r3
 801071a:	d301      	bcc.n	8010720 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 801071c:	2301      	movs	r3, #1
 801071e:	e00f      	b.n	8010740 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010720:	4b09      	ldr	r3, [pc, #36]	; (8010748 <CheckRetransConfirmedUplink+0x40>)
 8010722:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010726:	f003 0302 	and.w	r3, r3, #2
 801072a:	b2db      	uxtb	r3, r3
 801072c:	2b00      	cmp	r3, #0
 801072e:	d006      	beq.n	801073e <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010730:	4b05      	ldr	r3, [pc, #20]	; (8010748 <CheckRetransConfirmedUplink+0x40>)
 8010732:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010736:	2b00      	cmp	r3, #0
 8010738:	d001      	beq.n	801073e <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 801073a:	2301      	movs	r3, #1
 801073c:	e000      	b.n	8010740 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 801073e:	2300      	movs	r3, #0
}
 8010740:	4618      	mov	r0, r3
 8010742:	46bd      	mov	sp, r7
 8010744:	bc80      	pop	{r7}
 8010746:	4770      	bx	lr
 8010748:	2000045c 	.word	0x2000045c

0801074c <StopRetransmission>:

static bool StopRetransmission( void )
{
 801074c:	b480      	push	{r7}
 801074e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010750:	4b1a      	ldr	r3, [pc, #104]	; (80107bc <StopRetransmission+0x70>)
 8010752:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010756:	f003 0302 	and.w	r3, r3, #2
 801075a:	b2db      	uxtb	r3, r3
 801075c:	2b00      	cmp	r3, #0
 801075e:	d009      	beq.n	8010774 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010760:	4b16      	ldr	r3, [pc, #88]	; (80107bc <StopRetransmission+0x70>)
 8010762:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010766:	2b00      	cmp	r3, #0
 8010768:	d00e      	beq.n	8010788 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801076a:	4b14      	ldr	r3, [pc, #80]	; (80107bc <StopRetransmission+0x70>)
 801076c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010770:	2b01      	cmp	r3, #1
 8010772:	d009      	beq.n	8010788 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010774:	4b12      	ldr	r3, [pc, #72]	; (80107c0 <StopRetransmission+0x74>)
 8010776:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801077a:	2b00      	cmp	r3, #0
 801077c:	d004      	beq.n	8010788 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 801077e:	4b10      	ldr	r3, [pc, #64]	; (80107c0 <StopRetransmission+0x74>)
 8010780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010782:	3301      	adds	r3, #1
 8010784:	4a0e      	ldr	r2, [pc, #56]	; (80107c0 <StopRetransmission+0x74>)
 8010786:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010788:	4b0c      	ldr	r3, [pc, #48]	; (80107bc <StopRetransmission+0x70>)
 801078a:	2200      	movs	r2, #0
 801078c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8010790:	4b0a      	ldr	r3, [pc, #40]	; (80107bc <StopRetransmission+0x70>)
 8010792:	2200      	movs	r2, #0
 8010794:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8010798:	4b08      	ldr	r3, [pc, #32]	; (80107bc <StopRetransmission+0x70>)
 801079a:	2200      	movs	r2, #0
 801079c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80107a0:	4b06      	ldr	r3, [pc, #24]	; (80107bc <StopRetransmission+0x70>)
 80107a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80107a6:	f023 0302 	bic.w	r3, r3, #2
 80107aa:	4a04      	ldr	r2, [pc, #16]	; (80107bc <StopRetransmission+0x70>)
 80107ac:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80107b0:	2301      	movs	r3, #1
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bc80      	pop	{r7}
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	2000045c 	.word	0x2000045c
 80107c0:	20000964 	.word	0x20000964

080107c4 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	4603      	mov	r3, r0
 80107cc:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80107ce:	4b0b      	ldr	r3, [pc, #44]	; (80107fc <CallNvmDataChangeCallback+0x38>)
 80107d0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d00c      	beq.n	80107f2 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80107d8:	4b08      	ldr	r3, [pc, #32]	; (80107fc <CallNvmDataChangeCallback+0x38>)
 80107da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80107de:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d006      	beq.n	80107f2 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80107e4:	4b05      	ldr	r3, [pc, #20]	; (80107fc <CallNvmDataChangeCallback+0x38>)
 80107e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80107ea:	68db      	ldr	r3, [r3, #12]
 80107ec:	88fa      	ldrh	r2, [r7, #6]
 80107ee:	4610      	mov	r0, r2
 80107f0:	4798      	blx	r3
    }
}
 80107f2:	bf00      	nop
 80107f4:	3708      	adds	r7, #8
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	bf00      	nop
 80107fc:	2000045c 	.word	0x2000045c

08010800 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010806:	4b1b      	ldr	r3, [pc, #108]	; (8010874 <AckTimeoutRetriesProcess+0x74>)
 8010808:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 801080c:	4b19      	ldr	r3, [pc, #100]	; (8010874 <AckTimeoutRetriesProcess+0x74>)
 801080e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010812:	429a      	cmp	r2, r3
 8010814:	d229      	bcs.n	801086a <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010816:	4b17      	ldr	r3, [pc, #92]	; (8010874 <AckTimeoutRetriesProcess+0x74>)
 8010818:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 801081c:	3301      	adds	r3, #1
 801081e:	b2da      	uxtb	r2, r3
 8010820:	4b14      	ldr	r3, [pc, #80]	; (8010874 <AckTimeoutRetriesProcess+0x74>)
 8010822:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8010826:	4b13      	ldr	r3, [pc, #76]	; (8010874 <AckTimeoutRetriesProcess+0x74>)
 8010828:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 801082c:	f003 0301 	and.w	r3, r3, #1
 8010830:	b2db      	uxtb	r3, r3
 8010832:	2b00      	cmp	r3, #0
 8010834:	d019      	beq.n	801086a <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010836:	2322      	movs	r3, #34	; 0x22
 8010838:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801083a:	4b0f      	ldr	r3, [pc, #60]	; (8010878 <AckTimeoutRetriesProcess+0x78>)
 801083c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010840:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010842:	4b0d      	ldr	r3, [pc, #52]	; (8010878 <AckTimeoutRetriesProcess+0x78>)
 8010844:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010848:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801084a:	4b0b      	ldr	r3, [pc, #44]	; (8010878 <AckTimeoutRetriesProcess+0x78>)
 801084c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010850:	f107 0208 	add.w	r2, r7, #8
 8010854:	4611      	mov	r1, r2
 8010856:	4618      	mov	r0, r3
 8010858:	f003 fae2 	bl	8013e20 <RegionGetPhyParam>
 801085c:	4603      	mov	r3, r0
 801085e:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	b25a      	sxtb	r2, r3
 8010864:	4b04      	ldr	r3, [pc, #16]	; (8010878 <AckTimeoutRetriesProcess+0x78>)
 8010866:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 801086a:	bf00      	nop
 801086c:	3710      	adds	r7, #16
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	2000045c 	.word	0x2000045c
 8010878:	20000964 	.word	0x20000964

0801087c <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b084      	sub	sp, #16
 8010880:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8010882:	4b14      	ldr	r3, [pc, #80]	; (80108d4 <AckTimeoutRetriesFinalize+0x58>)
 8010884:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010888:	f083 0301 	eor.w	r3, r3, #1
 801088c:	b2db      	uxtb	r3, r3
 801088e:	2b00      	cmp	r3, #0
 8010890:	d015      	beq.n	80108be <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010892:	2302      	movs	r3, #2
 8010894:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8010896:	4b10      	ldr	r3, [pc, #64]	; (80108d8 <AckTimeoutRetriesFinalize+0x5c>)
 8010898:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 801089a:	4b10      	ldr	r3, [pc, #64]	; (80108dc <AckTimeoutRetriesFinalize+0x60>)
 801089c:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801089e:	4b10      	ldr	r3, [pc, #64]	; (80108e0 <AckTimeoutRetriesFinalize+0x64>)
 80108a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108a4:	1d3a      	adds	r2, r7, #4
 80108a6:	4611      	mov	r1, r2
 80108a8:	4618      	mov	r0, r3
 80108aa:	f003 fae3 	bl	8013e74 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80108ae:	4b09      	ldr	r3, [pc, #36]	; (80108d4 <AckTimeoutRetriesFinalize+0x58>)
 80108b0:	2200      	movs	r2, #0
 80108b2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 80108b6:	4b07      	ldr	r3, [pc, #28]	; (80108d4 <AckTimeoutRetriesFinalize+0x58>)
 80108b8:	2200      	movs	r2, #0
 80108ba:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80108be:	4b05      	ldr	r3, [pc, #20]	; (80108d4 <AckTimeoutRetriesFinalize+0x58>)
 80108c0:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80108c4:	4b03      	ldr	r3, [pc, #12]	; (80108d4 <AckTimeoutRetriesFinalize+0x58>)
 80108c6:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 80108ca:	bf00      	nop
 80108cc:	3710      	adds	r7, #16
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
 80108d2:	bf00      	nop
 80108d4:	2000045c 	.word	0x2000045c
 80108d8:	20000b3c 	.word	0x20000b3c
 80108dc:	20000bd0 	.word	0x20000bd0
 80108e0:	20000964 	.word	0x20000964

080108e4 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 80108e4:	b480      	push	{r7}
 80108e6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80108e8:	4b0b      	ldr	r3, [pc, #44]	; (8010918 <IsRequestPending+0x34>)
 80108ea:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80108ee:	f003 0304 	and.w	r3, r3, #4
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d107      	bne.n	8010908 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80108f8:	4b07      	ldr	r3, [pc, #28]	; (8010918 <IsRequestPending+0x34>)
 80108fa:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80108fe:	f003 0301 	and.w	r3, r3, #1
 8010902:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010904:	2b00      	cmp	r3, #0
 8010906:	d001      	beq.n	801090c <IsRequestPending+0x28>
    {
        return 1;
 8010908:	2301      	movs	r3, #1
 801090a:	e000      	b.n	801090e <IsRequestPending+0x2a>
    }
    return 0;
 801090c:	2300      	movs	r3, #0
}
 801090e:	4618      	mov	r0, r3
 8010910:	46bd      	mov	sp, r7
 8010912:	bc80      	pop	{r7}
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop
 8010918:	2000045c 	.word	0x2000045c

0801091c <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 801091c:	b590      	push	{r4, r7, lr}
 801091e:	b08f      	sub	sp, #60	; 0x3c
 8010920:	af02      	add	r7, sp, #8
 8010922:	6178      	str	r0, [r7, #20]
 8010924:	6139      	str	r1, [r7, #16]
 8010926:	4613      	mov	r3, r2
 8010928:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d002      	beq.n	8010936 <LoRaMacInitialization+0x1a>
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d101      	bne.n	801093a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010936:	2303      	movs	r3, #3
 8010938:	e275      	b.n	8010e26 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00b      	beq.n	801095a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010946:	2b00      	cmp	r3, #0
 8010948:	d007      	beq.n	801095a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801094e:	2b00      	cmp	r3, #0
 8010950:	d003      	beq.n	801095a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010956:	2b00      	cmp	r3, #0
 8010958:	d101      	bne.n	801095e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801095a:	2303      	movs	r3, #3
 801095c:	e263      	b.n	8010e26 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801095e:	7bfb      	ldrb	r3, [r7, #15]
 8010960:	4618      	mov	r0, r3
 8010962:	f003 fa4d 	bl	8013e00 <RegionIsActive>
 8010966:	4603      	mov	r3, r0
 8010968:	f083 0301 	eor.w	r3, r3, #1
 801096c:	b2db      	uxtb	r3, r3
 801096e:	2b00      	cmp	r3, #0
 8010970:	d001      	beq.n	8010976 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010972:	2309      	movs	r3, #9
 8010974:	e257      	b.n	8010e26 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010976:	6978      	ldr	r0, [r7, #20]
 8010978:	f001 fef6 	bl	8012768 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 801097c:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8010980:	2100      	movs	r1, #0
 8010982:	48c7      	ldr	r0, [pc, #796]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010984:	f005 fd92 	bl	80164ac <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010988:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 801098c:	2100      	movs	r1, #0
 801098e:	48c5      	ldr	r0, [pc, #788]	; (8010ca4 <LoRaMacInitialization+0x388>)
 8010990:	f005 fd8c 	bl	80164ac <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010994:	4bc3      	ldr	r3, [pc, #780]	; (8010ca4 <LoRaMacInitialization+0x388>)
 8010996:	2201      	movs	r2, #1
 8010998:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 801099c:	4bc1      	ldr	r3, [pc, #772]	; (8010ca4 <LoRaMacInitialization+0x388>)
 801099e:	2201      	movs	r2, #1
 80109a0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 80109a4:	4abe      	ldr	r2, [pc, #760]	; (8010ca0 <LoRaMacInitialization+0x384>)
 80109a6:	7bfb      	ldrb	r3, [r7, #15]
 80109a8:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80109ac:	4bbc      	ldr	r3, [pc, #752]	; (8010ca0 <LoRaMacInitialization+0x384>)
 80109ae:	2200      	movs	r2, #0
 80109b0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80109b4:	4bba      	ldr	r3, [pc, #744]	; (8010ca0 <LoRaMacInitialization+0x384>)
 80109b6:	2200      	movs	r2, #0
 80109b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80109bc:	4bb8      	ldr	r3, [pc, #736]	; (8010ca0 <LoRaMacInitialization+0x384>)
 80109be:	4aba      	ldr	r2, [pc, #744]	; (8010ca8 <LoRaMacInitialization+0x38c>)
 80109c0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80109c4:	230f      	movs	r3, #15
 80109c6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109ca:	4bb5      	ldr	r3, [pc, #724]	; (8010ca0 <LoRaMacInitialization+0x384>)
 80109cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109d4:	4611      	mov	r1, r2
 80109d6:	4618      	mov	r0, r3
 80109d8:	f003 fa22 	bl	8013e20 <RegionGetPhyParam>
 80109dc:	4603      	mov	r3, r0
 80109de:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80109e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	bf14      	ite	ne
 80109e6:	2301      	movne	r3, #1
 80109e8:	2300      	moveq	r3, #0
 80109ea:	b2da      	uxtb	r2, r3
 80109ec:	4bac      	ldr	r3, [pc, #688]	; (8010ca0 <LoRaMacInitialization+0x384>)
 80109ee:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80109f2:	230a      	movs	r3, #10
 80109f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109f8:	4ba9      	ldr	r3, [pc, #676]	; (8010ca0 <LoRaMacInitialization+0x384>)
 80109fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a02:	4611      	mov	r1, r2
 8010a04:	4618      	mov	r0, r3
 8010a06:	f003 fa0b 	bl	8013e20 <RegionGetPhyParam>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a10:	b25a      	sxtb	r2, r3
 8010a12:	4ba3      	ldr	r3, [pc, #652]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010a14:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010a18:	2306      	movs	r3, #6
 8010a1a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a1e:	4ba0      	ldr	r3, [pc, #640]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a28:	4611      	mov	r1, r2
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f003 f9f8 	bl	8013e20 <RegionGetPhyParam>
 8010a30:	4603      	mov	r3, r0
 8010a32:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a36:	b25a      	sxtb	r2, r3
 8010a38:	4b99      	ldr	r3, [pc, #612]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010a3a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010a3e:	2310      	movs	r3, #16
 8010a40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a44:	4b96      	ldr	r3, [pc, #600]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a4e:	4611      	mov	r1, r2
 8010a50:	4618      	mov	r0, r3
 8010a52:	f003 f9e5 	bl	8013e20 <RegionGetPhyParam>
 8010a56:	4603      	mov	r3, r0
 8010a58:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5c:	4a90      	ldr	r2, [pc, #576]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010a5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010a62:	2311      	movs	r3, #17
 8010a64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a68:	4b8d      	ldr	r3, [pc, #564]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a72:	4611      	mov	r1, r2
 8010a74:	4618      	mov	r0, r3
 8010a76:	f003 f9d3 	bl	8013e20 <RegionGetPhyParam>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a80:	4a87      	ldr	r2, [pc, #540]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010a86:	2312      	movs	r3, #18
 8010a88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a8c:	4b84      	ldr	r3, [pc, #528]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a96:	4611      	mov	r1, r2
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f003 f9c1 	bl	8013e20 <RegionGetPhyParam>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa4:	4a7e      	ldr	r2, [pc, #504]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010aa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010aaa:	2313      	movs	r3, #19
 8010aac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ab0:	4b7b      	ldr	r3, [pc, #492]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ab6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010aba:	4611      	mov	r1, r2
 8010abc:	4618      	mov	r0, r3
 8010abe:	f003 f9af 	bl	8013e20 <RegionGetPhyParam>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac8:	4a75      	ldr	r2, [pc, #468]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010aca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010ace:	2314      	movs	r3, #20
 8010ad0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ad4:	4b72      	ldr	r3, [pc, #456]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ada:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ade:	4611      	mov	r1, r2
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f003 f99d 	bl	8013e20 <RegionGetPhyParam>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aec:	4a6c      	ldr	r2, [pc, #432]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010aee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010af2:	2317      	movs	r3, #23
 8010af4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010af8:	4b69      	ldr	r3, [pc, #420]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010afe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b02:	4611      	mov	r1, r2
 8010b04:	4618      	mov	r0, r3
 8010b06:	f003 f98b 	bl	8013e20 <RegionGetPhyParam>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b10:	b2da      	uxtb	r2, r3
 8010b12:	4b63      	ldr	r3, [pc, #396]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010b14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010b18:	2318      	movs	r3, #24
 8010b1a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b1e:	4b60      	ldr	r3, [pc, #384]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b28:	4611      	mov	r1, r2
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f003 f978 	bl	8013e20 <RegionGetPhyParam>
 8010b30:	4603      	mov	r3, r0
 8010b32:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b36:	4a5a      	ldr	r2, [pc, #360]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010b38:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3e:	4a58      	ldr	r2, [pc, #352]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010b40:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010b44:	2319      	movs	r3, #25
 8010b46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b4a:	4b55      	ldr	r3, [pc, #340]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b54:	4611      	mov	r1, r2
 8010b56:	4618      	mov	r0, r3
 8010b58:	f003 f962 	bl	8013e20 <RegionGetPhyParam>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b62:	b2da      	uxtb	r2, r3
 8010b64:	4b4e      	ldr	r3, [pc, #312]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010b66:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6c:	b2da      	uxtb	r2, r3
 8010b6e:	4b4c      	ldr	r3, [pc, #304]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010b70:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010b74:	231e      	movs	r3, #30
 8010b76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b7a:	4b49      	ldr	r3, [pc, #292]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b80:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b84:	4611      	mov	r1, r2
 8010b86:	4618      	mov	r0, r3
 8010b88:	f003 f94a 	bl	8013e20 <RegionGetPhyParam>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b92:	b2da      	uxtb	r2, r3
 8010b94:	4b42      	ldr	r3, [pc, #264]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010b96:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010b9a:	231f      	movs	r3, #31
 8010b9c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ba0:	4b3f      	ldr	r3, [pc, #252]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ba6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010baa:	4611      	mov	r1, r2
 8010bac:	4618      	mov	r0, r3
 8010bae:	f003 f937 	bl	8013e20 <RegionGetPhyParam>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb8:	b2da      	uxtb	r2, r3
 8010bba:	4b39      	ldr	r3, [pc, #228]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010bbc:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010bc0:	2320      	movs	r3, #32
 8010bc2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010bc6:	4b36      	ldr	r3, [pc, #216]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bcc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010bd0:	4611      	mov	r1, r2
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f003 f924 	bl	8013e20 <RegionGetPhyParam>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bde:	4a30      	ldr	r2, [pc, #192]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010be0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010be4:	2321      	movs	r3, #33	; 0x21
 8010be6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010bea:	4b2d      	ldr	r3, [pc, #180]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bf0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010bf4:	4611      	mov	r1, r2
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f003 f912 	bl	8013e20 <RegionGetPhyParam>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c02:	4a27      	ldr	r2, [pc, #156]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c04:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010c08:	230b      	movs	r3, #11
 8010c0a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c0e:	4b24      	ldr	r3, [pc, #144]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c18:	4611      	mov	r1, r2
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f003 f900 	bl	8013e20 <RegionGetPhyParam>
 8010c20:	4603      	mov	r3, r0
 8010c22:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	4b1e      	ldr	r3, [pc, #120]	; (8010ca4 <LoRaMacInitialization+0x388>)
 8010c2a:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010c2e:	230c      	movs	r3, #12
 8010c30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c34:	4b1a      	ldr	r3, [pc, #104]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c3e:	4611      	mov	r1, r2
 8010c40:	4618      	mov	r0, r3
 8010c42:	f003 f8ed 	bl	8013e20 <RegionGetPhyParam>
 8010c46:	4603      	mov	r3, r0
 8010c48:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4c:	b29a      	uxth	r2, r3
 8010c4e:	4b15      	ldr	r3, [pc, #84]	; (8010ca4 <LoRaMacInitialization+0x388>)
 8010c50:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010c54:	4b12      	ldr	r3, [pc, #72]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c56:	2201      	movs	r2, #1
 8010c58:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010c5c:	4b10      	ldr	r3, [pc, #64]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c5e:	220a      	movs	r2, #10
 8010c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010c64:	4b0e      	ldr	r3, [pc, #56]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c66:	2206      	movs	r2, #6
 8010c68:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010c6c:	4b0c      	ldr	r3, [pc, #48]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c72:	4a0b      	ldr	r2, [pc, #44]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c74:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010c76:	4b0a      	ldr	r3, [pc, #40]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c78:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010c7c:	4b08      	ldr	r3, [pc, #32]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010c82:	4b07      	ldr	r3, [pc, #28]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c88:	4a05      	ldr	r2, [pc, #20]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010c8c:	4b04      	ldr	r3, [pc, #16]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c92:	4a03      	ldr	r2, [pc, #12]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c94:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010c96:	4b02      	ldr	r3, [pc, #8]	; (8010ca0 <LoRaMacInitialization+0x384>)
 8010c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010c9c:	e006      	b.n	8010cac <LoRaMacInitialization+0x390>
 8010c9e:	bf00      	nop
 8010ca0:	20000964 	.word	0x20000964
 8010ca4:	2000045c 	.word	0x2000045c
 8010ca8:	01000300 	.word	0x01000300
 8010cac:	4a60      	ldr	r2, [pc, #384]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010cae:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010cb0:	4b5f      	ldr	r3, [pc, #380]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010cb6:	4a5e      	ldr	r2, [pc, #376]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010cb8:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010cba:	4b5d      	ldr	r3, [pc, #372]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010cbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010cc0:	4a5b      	ldr	r2, [pc, #364]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010cc2:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010cc4:	4b5a      	ldr	r3, [pc, #360]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010cc6:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8010cca:	4b59      	ldr	r3, [pc, #356]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010ccc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010cd6:	4b57      	ldr	r3, [pc, #348]	; (8010e34 <LoRaMacInitialization+0x518>)
 8010cd8:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010cda:	4b57      	ldr	r3, [pc, #348]	; (8010e38 <LoRaMacInitialization+0x51c>)
 8010cdc:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010cde:	4b54      	ldr	r3, [pc, #336]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ce4:	f107 0218 	add.w	r2, r7, #24
 8010ce8:	4611      	mov	r1, r2
 8010cea:	4618      	mov	r0, r3
 8010cec:	f003 f8c2 	bl	8013e74 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8010cf0:	4a52      	ldr	r2, [pc, #328]	; (8010e3c <LoRaMacInitialization+0x520>)
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010cf8:	f7ff f85a 	bl	800fdb0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010cfc:	4b4c      	ldr	r3, [pc, #304]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010cfe:	2201      	movs	r2, #1
 8010d00:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8010d04:	4a4d      	ldr	r2, [pc, #308]	; (8010e3c <LoRaMacInitialization+0x520>)
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010d0c:	4b4b      	ldr	r3, [pc, #300]	; (8010e3c <LoRaMacInitialization+0x520>)
 8010d0e:	2200      	movs	r2, #0
 8010d10:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010d14:	4b49      	ldr	r3, [pc, #292]	; (8010e3c <LoRaMacInitialization+0x520>)
 8010d16:	2201      	movs	r2, #1
 8010d18:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010d1c:	4b44      	ldr	r3, [pc, #272]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010d1e:	2200      	movs	r2, #0
 8010d20:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010d22:	4b43      	ldr	r3, [pc, #268]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010d24:	2200      	movs	r2, #0
 8010d26:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010d28:	2300      	movs	r3, #0
 8010d2a:	9300      	str	r3, [sp, #0]
 8010d2c:	4b44      	ldr	r3, [pc, #272]	; (8010e40 <LoRaMacInitialization+0x524>)
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f04f 31ff 	mov.w	r1, #4294967295
 8010d34:	4843      	ldr	r0, [pc, #268]	; (8010e44 <LoRaMacInitialization+0x528>)
 8010d36:	f009 f9eb 	bl	801a110 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	9300      	str	r3, [sp, #0]
 8010d3e:	4b42      	ldr	r3, [pc, #264]	; (8010e48 <LoRaMacInitialization+0x52c>)
 8010d40:	2200      	movs	r2, #0
 8010d42:	f04f 31ff 	mov.w	r1, #4294967295
 8010d46:	4841      	ldr	r0, [pc, #260]	; (8010e4c <LoRaMacInitialization+0x530>)
 8010d48:	f009 f9e2 	bl	801a110 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	9300      	str	r3, [sp, #0]
 8010d50:	4b3f      	ldr	r3, [pc, #252]	; (8010e50 <LoRaMacInitialization+0x534>)
 8010d52:	2200      	movs	r2, #0
 8010d54:	f04f 31ff 	mov.w	r1, #4294967295
 8010d58:	483e      	ldr	r0, [pc, #248]	; (8010e54 <LoRaMacInitialization+0x538>)
 8010d5a:	f009 f9d9 	bl	801a110 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010d5e:	2300      	movs	r3, #0
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	4b3d      	ldr	r3, [pc, #244]	; (8010e58 <LoRaMacInitialization+0x53c>)
 8010d64:	2200      	movs	r2, #0
 8010d66:	f04f 31ff 	mov.w	r1, #4294967295
 8010d6a:	483c      	ldr	r0, [pc, #240]	; (8010e5c <LoRaMacInitialization+0x540>)
 8010d6c:	f009 f9d0 	bl	801a110 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010d70:	4c2f      	ldr	r4, [pc, #188]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010d72:	463b      	mov	r3, r7
 8010d74:	4618      	mov	r0, r3
 8010d76:	f008 fe43 	bl	8019a00 <SysTimeGetMcuTime>
 8010d7a:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8010d7e:	463a      	mov	r2, r7
 8010d80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d84:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010d88:	4b2c      	ldr	r3, [pc, #176]	; (8010e3c <LoRaMacInitialization+0x520>)
 8010d8a:	4a35      	ldr	r2, [pc, #212]	; (8010e60 <LoRaMacInitialization+0x544>)
 8010d8c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010d90:	4b2a      	ldr	r3, [pc, #168]	; (8010e3c <LoRaMacInitialization+0x520>)
 8010d92:	4a34      	ldr	r2, [pc, #208]	; (8010e64 <LoRaMacInitialization+0x548>)
 8010d94:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010d98:	4b28      	ldr	r3, [pc, #160]	; (8010e3c <LoRaMacInitialization+0x520>)
 8010d9a:	4a33      	ldr	r2, [pc, #204]	; (8010e68 <LoRaMacInitialization+0x54c>)
 8010d9c:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010da0:	4b26      	ldr	r3, [pc, #152]	; (8010e3c <LoRaMacInitialization+0x520>)
 8010da2:	4a32      	ldr	r2, [pc, #200]	; (8010e6c <LoRaMacInitialization+0x550>)
 8010da4:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010da8:	4b24      	ldr	r3, [pc, #144]	; (8010e3c <LoRaMacInitialization+0x520>)
 8010daa:	4a31      	ldr	r2, [pc, #196]	; (8010e70 <LoRaMacInitialization+0x554>)
 8010dac:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010db0:	4b30      	ldr	r3, [pc, #192]	; (8010e74 <LoRaMacInitialization+0x558>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4830      	ldr	r0, [pc, #192]	; (8010e78 <LoRaMacInitialization+0x55c>)
 8010db6:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	689b      	ldr	r3, [r3, #8]
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	482f      	ldr	r0, [pc, #188]	; (8010e7c <LoRaMacInitialization+0x560>)
 8010dc0:	f7fa ff3e 	bl	800bc40 <SecureElementInit>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d001      	beq.n	8010dce <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010dca:	2311      	movs	r3, #17
 8010dcc:	e02b      	b.n	8010e26 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010dce:	4818      	ldr	r0, [pc, #96]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010dd0:	f002 f950 	bl	8013074 <LoRaMacCryptoInit>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d001      	beq.n	8010dde <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010dda:	2311      	movs	r3, #17
 8010ddc:	e023      	b.n	8010e26 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010dde:	f001 fa95 	bl	801230c <LoRaMacCommandsInit>
 8010de2:	4603      	mov	r3, r0
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d001      	beq.n	8010dec <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010de8:	2313      	movs	r3, #19
 8010dea:	e01c      	b.n	8010e26 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8010dec:	4824      	ldr	r0, [pc, #144]	; (8010e80 <LoRaMacInitialization+0x564>)
 8010dee:	f002 f9ff 	bl	80131f0 <LoRaMacCryptoSetMulticastReference>
 8010df2:	4603      	mov	r3, r0
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d001      	beq.n	8010dfc <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010df8:	2311      	movs	r3, #17
 8010dfa:	e014      	b.n	8010e26 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010dfc:	4b1d      	ldr	r3, [pc, #116]	; (8010e74 <LoRaMacInitialization+0x558>)
 8010dfe:	695b      	ldr	r3, [r3, #20]
 8010e00:	4798      	blx	r3
 8010e02:	4603      	mov	r3, r0
 8010e04:	4618      	mov	r0, r3
 8010e06:	f005 faf1 	bl	80163ec <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010e0a:	4b1a      	ldr	r3, [pc, #104]	; (8010e74 <LoRaMacInitialization+0x558>)
 8010e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e0e:	4a08      	ldr	r2, [pc, #32]	; (8010e30 <LoRaMacInitialization+0x514>)
 8010e10:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8010e14:	4610      	mov	r0, r2
 8010e16:	4798      	blx	r3
    Radio.Sleep( );
 8010e18:	4b16      	ldr	r3, [pc, #88]	; (8010e74 <LoRaMacInitialization+0x558>)
 8010e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e1c:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010e1e:	2001      	movs	r0, #1
 8010e20:	f7fd faaa 	bl	800e378 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010e24:	2300      	movs	r3, #0
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3734      	adds	r7, #52	; 0x34
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd90      	pop	{r4, r7, pc}
 8010e2e:	bf00      	nop
 8010e30:	20000964 	.word	0x20000964
 8010e34:	20000b3c 	.word	0x20000b3c
 8010e38:	20000bd0 	.word	0x20000bd0
 8010e3c:	2000045c 	.word	0x2000045c
 8010e40:	0800e901 	.word	0x0800e901
 8010e44:	200007c4 	.word	0x200007c4
 8010e48:	0800e975 	.word	0x0800e975
 8010e4c:	200007dc 	.word	0x200007dc
 8010e50:	0800e9e1 	.word	0x0800e9e1
 8010e54:	200007f4 	.word	0x200007f4
 8010e58:	0800ea55 	.word	0x0800ea55
 8010e5c:	20000854 	.word	0x20000854
 8010e60:	0800d505 	.word	0x0800d505
 8010e64:	0800d57d 	.word	0x0800d57d
 8010e68:	0800d655 	.word	0x0800d655
 8010e6c:	0800d609 	.word	0x0800d609
 8010e70:	0800d691 	.word	0x0800d691
 8010e74:	0801ba28 	.word	0x0801ba28
 8010e78:	200007a8 	.word	0x200007a8
 8010e7c:	20000a7c 	.word	0x20000a7c
 8010e80:	20000a34 	.word	0x20000a34

08010e84 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010e84:	b480      	push	{r7}
 8010e86:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8010e88:	4b04      	ldr	r3, [pc, #16]	; (8010e9c <LoRaMacStart+0x18>)
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8010e90:	2300      	movs	r3, #0
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bc80      	pop	{r7}
 8010e98:	4770      	bx	lr
 8010e9a:	bf00      	nop
 8010e9c:	2000045c 	.word	0x2000045c

08010ea0 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b08a      	sub	sp, #40	; 0x28
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	6039      	str	r1, [r7, #0]
 8010eaa:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010eac:	4b3e      	ldr	r3, [pc, #248]	; (8010fa8 <LoRaMacQueryTxPossible+0x108>)
 8010eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eb0:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010eb2:	4b3d      	ldr	r3, [pc, #244]	; (8010fa8 <LoRaMacQueryTxPossible+0x108>)
 8010eb4:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8010eb8:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010eba:	4b3b      	ldr	r3, [pc, #236]	; (8010fa8 <LoRaMacQueryTxPossible+0x108>)
 8010ebc:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8010ec0:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d101      	bne.n	8010ed0 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010ecc:	2303      	movs	r3, #3
 8010ece:	e066      	b.n	8010f9e <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8010ed0:	4b35      	ldr	r3, [pc, #212]	; (8010fa8 <LoRaMacQueryTxPossible+0x108>)
 8010ed2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010ed6:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010edc:	4b32      	ldr	r3, [pc, #200]	; (8010fa8 <LoRaMacQueryTxPossible+0x108>)
 8010ede:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010ee2:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010ee4:	4b30      	ldr	r3, [pc, #192]	; (8010fa8 <LoRaMacQueryTxPossible+0x108>)
 8010ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ee8:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010eea:	4b30      	ldr	r3, [pc, #192]	; (8010fac <LoRaMacQueryTxPossible+0x10c>)
 8010eec:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010ef0:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010ef2:	4b2e      	ldr	r3, [pc, #184]	; (8010fac <LoRaMacQueryTxPossible+0x10c>)
 8010ef4:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010ef8:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010efa:	4b2b      	ldr	r3, [pc, #172]	; (8010fa8 <LoRaMacQueryTxPossible+0x108>)
 8010efc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010f00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010f04:	4b28      	ldr	r3, [pc, #160]	; (8010fa8 <LoRaMacQueryTxPossible+0x108>)
 8010f06:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010f0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010f0e:	4b26      	ldr	r3, [pc, #152]	; (8010fa8 <LoRaMacQueryTxPossible+0x108>)
 8010f10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010f14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010f18:	4b23      	ldr	r3, [pc, #140]	; (8010fa8 <LoRaMacQueryTxPossible+0x108>)
 8010f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010f22:	f107 0310 	add.w	r3, r7, #16
 8010f26:	f107 020e 	add.w	r2, r7, #14
 8010f2a:	f107 010f 	add.w	r1, r7, #15
 8010f2e:	f107 0014 	add.w	r0, r7, #20
 8010f32:	f000 ffe1 	bl	8011ef8 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7fd fed2 	bl	800ece4 <GetMaxAppPayloadWithoutFOptsLength>
 8010f40:	4603      	mov	r3, r0
 8010f42:	461a      	mov	r2, r3
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010f48:	f107 0308 	add.w	r3, r7, #8
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f001 faab 	bl	80124a8 <LoRaMacCommandsGetSizeSerializedCmds>
 8010f52:	4603      	mov	r3, r0
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d001      	beq.n	8010f5c <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010f58:	2313      	movs	r3, #19
 8010f5a:	e020      	b.n	8010f9e <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	2b0f      	cmp	r3, #15
 8010f60:	d819      	bhi.n	8010f96 <LoRaMacQueryTxPossible+0xf6>
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	785b      	ldrb	r3, [r3, #1]
 8010f66:	461a      	mov	r2, r3
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d313      	bcc.n	8010f96 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	785a      	ldrb	r2, [r3, #1]
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	b2db      	uxtb	r3, r3
 8010f76:	1ad3      	subs	r3, r2, r3
 8010f78:	b2da      	uxtb	r2, r3
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	785b      	ldrb	r3, [r3, #1]
 8010f82:	4619      	mov	r1, r3
 8010f84:	79fa      	ldrb	r2, [r7, #7]
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	4413      	add	r3, r2
 8010f8a:	4299      	cmp	r1, r3
 8010f8c:	d301      	bcc.n	8010f92 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	e005      	b.n	8010f9e <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010f92:	2308      	movs	r3, #8
 8010f94:	e003      	b.n	8010f9e <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010f9c:	2308      	movs	r3, #8
    }
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3728      	adds	r7, #40	; 0x28
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	20000964 	.word	0x20000964
 8010fac:	2000045c 	.word	0x2000045c

08010fb0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010fb0:	b590      	push	{r4, r7, lr}
 8010fb2:	b087      	sub	sp, #28
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d101      	bne.n	8010fc6 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010fc2:	2303      	movs	r3, #3
 8010fc4:	e14b      	b.n	801125e <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	2b28      	cmp	r3, #40	; 0x28
 8010fcc:	f200 8140 	bhi.w	8011250 <LoRaMacMibGetRequestConfirm+0x2a0>
 8010fd0:	a201      	add	r2, pc, #4	; (adr r2, 8010fd8 <LoRaMacMibGetRequestConfirm+0x28>)
 8010fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd6:	bf00      	nop
 8010fd8:	0801107d 	.word	0x0801107d
 8010fdc:	08011089 	.word	0x08011089
 8010fe0:	08011095 	.word	0x08011095
 8010fe4:	080110a1 	.word	0x080110a1
 8010fe8:	080110ad 	.word	0x080110ad
 8010fec:	080110b9 	.word	0x080110b9
 8010ff0:	080110c5 	.word	0x080110c5
 8010ff4:	08011251 	.word	0x08011251
 8010ff8:	08011251 	.word	0x08011251
 8010ffc:	08011251 	.word	0x08011251
 8011000:	08011251 	.word	0x08011251
 8011004:	08011251 	.word	0x08011251
 8011008:	08011251 	.word	0x08011251
 801100c:	08011251 	.word	0x08011251
 8011010:	08011251 	.word	0x08011251
 8011014:	080110d1 	.word	0x080110d1
 8011018:	080110dd 	.word	0x080110dd
 801101c:	080110e9 	.word	0x080110e9
 8011020:	0801110b 	.word	0x0801110b
 8011024:	0801111d 	.word	0x0801111d
 8011028:	0801112f 	.word	0x0801112f
 801102c:	08011141 	.word	0x08011141
 8011030:	08011175 	.word	0x08011175
 8011034:	08011153 	.word	0x08011153
 8011038:	08011197 	.word	0x08011197
 801103c:	080111a3 	.word	0x080111a3
 8011040:	080111ad 	.word	0x080111ad
 8011044:	080111b7 	.word	0x080111b7
 8011048:	080111c1 	.word	0x080111c1
 801104c:	080111cb 	.word	0x080111cb
 8011050:	080111d5 	.word	0x080111d5
 8011054:	080111e1 	.word	0x080111e1
 8011058:	080111f9 	.word	0x080111f9
 801105c:	080111ed 	.word	0x080111ed
 8011060:	08011205 	.word	0x08011205
 8011064:	0801120f 	.word	0x0801120f
 8011068:	0801121b 	.word	0x0801121b
 801106c:	08011231 	.word	0x08011231
 8011070:	08011225 	.word	0x08011225
 8011074:	08011251 	.word	0x08011251
 8011078:	0801123d 	.word	0x0801123d
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 801107c:	4b7a      	ldr	r3, [pc, #488]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801107e:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	711a      	strb	r2, [r3, #4]
            break;
 8011086:	e0e9      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011088:	4b77      	ldr	r3, [pc, #476]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801108a:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	711a      	strb	r2, [r3, #4]
            break;
 8011092:	e0e3      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011094:	f7fb f88e 	bl	800c1b4 <SecureElementGetDevEui>
 8011098:	4602      	mov	r2, r0
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	605a      	str	r2, [r3, #4]
            break;
 801109e:	e0dd      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80110a0:	f7fb f8aa 	bl	800c1f8 <SecureElementGetJoinEui>
 80110a4:	4602      	mov	r2, r0
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	605a      	str	r2, [r3, #4]
            break;
 80110aa:	e0d7      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80110ac:	4b6e      	ldr	r3, [pc, #440]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110ae:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	711a      	strb	r2, [r3, #4]
            break;
 80110b6:	e0d1      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80110b8:	4b6b      	ldr	r3, [pc, #428]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110ba:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	605a      	str	r2, [r3, #4]
            break;
 80110c2:	e0cb      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80110c4:	4b68      	ldr	r3, [pc, #416]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110c6:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	605a      	str	r2, [r3, #4]
            break;
 80110ce:	e0c5      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80110d0:	4b65      	ldr	r3, [pc, #404]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110d2:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	711a      	strb	r2, [r3, #4]
            break;
 80110da:	e0bf      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80110dc:	4b62      	ldr	r3, [pc, #392]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110de:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	711a      	strb	r2, [r3, #4]
            break;
 80110e6:	e0b9      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80110e8:	231d      	movs	r3, #29
 80110ea:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110ec:	4b5e      	ldr	r3, [pc, #376]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110f2:	f107 0210 	add.w	r2, r7, #16
 80110f6:	4611      	mov	r1, r2
 80110f8:	4618      	mov	r0, r3
 80110fa:	f002 fe91 	bl	8013e20 <RegionGetPhyParam>
 80110fe:	4603      	mov	r3, r0
 8011100:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011102:	68fa      	ldr	r2, [r7, #12]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	605a      	str	r2, [r3, #4]
            break;
 8011108:	e0a8      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	4a56      	ldr	r2, [pc, #344]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801110e:	3304      	adds	r3, #4
 8011110:	3264      	adds	r2, #100	; 0x64
 8011112:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011116:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801111a:	e09f      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	4a52      	ldr	r2, [pc, #328]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011120:	3304      	adds	r3, #4
 8011122:	32a4      	adds	r2, #164	; 0xa4
 8011124:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011128:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801112c:	e096      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4a4d      	ldr	r2, [pc, #308]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011132:	3304      	adds	r3, #4
 8011134:	326c      	adds	r2, #108	; 0x6c
 8011136:	e892 0003 	ldmia.w	r2, {r0, r1}
 801113a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801113e:	e08d      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4a49      	ldr	r2, [pc, #292]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011144:	3304      	adds	r3, #4
 8011146:	32ac      	adds	r2, #172	; 0xac
 8011148:	e892 0003 	ldmia.w	r2, {r0, r1}
 801114c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011150:	e084      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011152:	231b      	movs	r3, #27
 8011154:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011156:	4b44      	ldr	r3, [pc, #272]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801115c:	f107 0210 	add.w	r2, r7, #16
 8011160:	4611      	mov	r1, r2
 8011162:	4618      	mov	r0, r3
 8011164:	f002 fe5c 	bl	8013e20 <RegionGetPhyParam>
 8011168:	4603      	mov	r3, r0
 801116a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 801116c:	68fa      	ldr	r2, [r7, #12]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	605a      	str	r2, [r3, #4]
            break;
 8011172:	e073      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011174:	231a      	movs	r3, #26
 8011176:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011178:	4b3b      	ldr	r3, [pc, #236]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801117a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801117e:	f107 0210 	add.w	r2, r7, #16
 8011182:	4611      	mov	r1, r2
 8011184:	4618      	mov	r0, r3
 8011186:	f002 fe4b 	bl	8013e20 <RegionGetPhyParam>
 801118a:	4603      	mov	r3, r0
 801118c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801118e:	68fa      	ldr	r2, [r7, #12]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	605a      	str	r2, [r3, #4]
            break;
 8011194:	e062      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011196:	4b34      	ldr	r3, [pc, #208]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011198:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	711a      	strb	r2, [r3, #4]
            break;
 80111a0:	e05c      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80111a2:	4b31      	ldr	r3, [pc, #196]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	605a      	str	r2, [r3, #4]
            break;
 80111aa:	e057      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80111ac:	4b2e      	ldr	r3, [pc, #184]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	605a      	str	r2, [r3, #4]
            break;
 80111b4:	e052      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80111b6:	4b2c      	ldr	r3, [pc, #176]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	605a      	str	r2, [r3, #4]
            break;
 80111be:	e04d      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80111c0:	4b29      	ldr	r3, [pc, #164]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	605a      	str	r2, [r3, #4]
            break;
 80111c8:	e048      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80111ca:	4b27      	ldr	r3, [pc, #156]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	605a      	str	r2, [r3, #4]
            break;
 80111d2:	e043      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80111d4:	4b24      	ldr	r3, [pc, #144]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111d6:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	711a      	strb	r2, [r3, #4]
            break;
 80111de:	e03d      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80111e0:	4b21      	ldr	r3, [pc, #132]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111e2:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	711a      	strb	r2, [r3, #4]
            break;
 80111ea:	e037      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80111ec:	4b1e      	ldr	r3, [pc, #120]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111ee:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	711a      	strb	r2, [r3, #4]
            break;
 80111f6:	e031      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80111f8:	4b1b      	ldr	r3, [pc, #108]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111fa:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	711a      	strb	r2, [r3, #4]
            break;
 8011202:	e02b      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011204:	4b18      	ldr	r3, [pc, #96]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	605a      	str	r2, [r3, #4]
            break;
 801120c:	e026      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801120e:	4b16      	ldr	r3, [pc, #88]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011210:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	711a      	strb	r2, [r3, #4]
            break;
 8011218:	e020      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801121a:	4b13      	ldr	r3, [pc, #76]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801121c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	605a      	str	r2, [r3, #4]
            break;
 8011222:	e01b      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 8011224:	f7ff f934 	bl	8010490 <GetNvmData>
 8011228:	4602      	mov	r2, r0
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	605a      	str	r2, [r3, #4]
            break;
 801122e:	e015      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011230:	4b0d      	ldr	r3, [pc, #52]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011232:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	605a      	str	r2, [r3, #4]
            break;
 801123a:	e00f      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	4a0a      	ldr	r2, [pc, #40]	; (8011268 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011240:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8011244:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011246:	687c      	ldr	r4, [r7, #4]
 8011248:	f002 ff74 	bl	8014134 <RegionGetVersion>
 801124c:	60a0      	str	r0, [r4, #8]
            break;
 801124e:	e005      	b.n	801125c <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f000 fefd 	bl	8012050 <LoRaMacClassBMibGetRequestConfirm>
 8011256:	4603      	mov	r3, r0
 8011258:	75fb      	strb	r3, [r7, #23]
            break;
 801125a:	bf00      	nop
        }
    }
    return status;
 801125c:	7dfb      	ldrb	r3, [r7, #23]
}
 801125e:	4618      	mov	r0, r3
 8011260:	371c      	adds	r7, #28
 8011262:	46bd      	mov	sp, r7
 8011264:	bd90      	pop	{r4, r7, pc}
 8011266:	bf00      	nop
 8011268:	20000964 	.word	0x20000964

0801126c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b086      	sub	sp, #24
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011274:	2300      	movs	r3, #0
 8011276:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d101      	bne.n	8011282 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801127e:	2303      	movs	r3, #3
 8011280:	e32b      	b.n	80118da <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011282:	4bbe      	ldr	r3, [pc, #760]	; (801157c <LoRaMacMibSetRequestConfirm+0x310>)
 8011284:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011288:	f003 0302 	and.w	r3, r3, #2
 801128c:	2b00      	cmp	r3, #0
 801128e:	d001      	beq.n	8011294 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011290:	2301      	movs	r3, #1
 8011292:	e322      	b.n	80118da <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	2b27      	cmp	r3, #39	; 0x27
 801129a:	f200 82fc 	bhi.w	8011896 <LoRaMacMibSetRequestConfirm+0x62a>
 801129e:	a201      	add	r2, pc, #4	; (adr r2, 80112a4 <LoRaMacMibSetRequestConfirm+0x38>)
 80112a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a4:	08011345 	.word	0x08011345
 80112a8:	08011355 	.word	0x08011355
 80112ac:	0801136f 	.word	0x0801136f
 80112b0:	08011387 	.word	0x08011387
 80112b4:	0801139f 	.word	0x0801139f
 80112b8:	080113ab 	.word	0x080113ab
 80112bc:	080113b7 	.word	0x080113b7
 80112c0:	080113c3 	.word	0x080113c3
 80112c4:	080113e9 	.word	0x080113e9
 80112c8:	0801140f 	.word	0x0801140f
 80112cc:	08011435 	.word	0x08011435
 80112d0:	0801145b 	.word	0x0801145b
 80112d4:	08011481 	.word	0x08011481
 80112d8:	080114a7 	.word	0x080114a7
 80112dc:	080114cd 	.word	0x080114cd
 80112e0:	080114f3 	.word	0x080114f3
 80112e4:	08011513 	.word	0x08011513
 80112e8:	08011897 	.word	0x08011897
 80112ec:	0801151f 	.word	0x0801151f
 80112f0:	0801159b 	.word	0x0801159b
 80112f4:	080115db 	.word	0x080115db
 80112f8:	0801163d 	.word	0x0801163d
 80112fc:	080116ad 	.word	0x080116ad
 8011300:	0801167d 	.word	0x0801167d
 8011304:	080116dd 	.word	0x080116dd
 8011308:	080116ff 	.word	0x080116ff
 801130c:	08011709 	.word	0x08011709
 8011310:	08011713 	.word	0x08011713
 8011314:	0801171d 	.word	0x0801171d
 8011318:	08011727 	.word	0x08011727
 801131c:	08011731 	.word	0x08011731
 8011320:	08011763 	.word	0x08011763
 8011324:	080117cf 	.word	0x080117cf
 8011328:	0801179d 	.word	0x0801179d
 801132c:	08011801 	.word	0x08011801
 8011330:	08011817 	.word	0x08011817
 8011334:	0801182f 	.word	0x0801182f
 8011338:	08011839 	.word	0x08011839
 801133c:	08011845 	.word	0x08011845
 8011340:	0801186d 	.word	0x0801186d
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	791b      	ldrb	r3, [r3, #4]
 8011348:	4618      	mov	r0, r3
 801134a:	f7fd fbfb 	bl	800eb44 <SwitchClass>
 801134e:	4603      	mov	r3, r0
 8011350:	75fb      	strb	r3, [r7, #23]
            break;
 8011352:	e2c1      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	791b      	ldrb	r3, [r3, #4]
 8011358:	2b02      	cmp	r3, #2
 801135a:	d005      	beq.n	8011368 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	791a      	ldrb	r2, [r3, #4]
 8011360:	4b87      	ldr	r3, [pc, #540]	; (8011580 <LoRaMacMibSetRequestConfirm+0x314>)
 8011362:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011366:	e2b7      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011368:	2303      	movs	r3, #3
 801136a:	75fb      	strb	r3, [r7, #23]
            break;
 801136c:	e2b4      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	4618      	mov	r0, r3
 8011374:	f7fa ff06 	bl	800c184 <SecureElementSetDevEui>
 8011378:	4603      	mov	r3, r0
 801137a:	2b00      	cmp	r3, #0
 801137c:	f000 8291 	beq.w	80118a2 <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011380:	2303      	movs	r3, #3
 8011382:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011384:	e28d      	b.n	80118a2 <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	4618      	mov	r0, r3
 801138c:	f7fa ff1c 	bl	800c1c8 <SecureElementSetJoinEui>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	f000 8287 	beq.w	80118a6 <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011398:	2303      	movs	r3, #3
 801139a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801139c:	e283      	b.n	80118a6 <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	791a      	ldrb	r2, [r3, #4]
 80113a2:	4b77      	ldr	r3, [pc, #476]	; (8011580 <LoRaMacMibSetRequestConfirm+0x314>)
 80113a4:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 80113a8:	e296      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	4a74      	ldr	r2, [pc, #464]	; (8011580 <LoRaMacMibSetRequestConfirm+0x314>)
 80113b0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 80113b4:	e290      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	4a71      	ldr	r2, [pc, #452]	; (8011580 <LoRaMacMibSetRequestConfirm+0x314>)
 80113bc:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 80113c0:	e28a      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d00b      	beq.n	80113e2 <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	4619      	mov	r1, r3
 80113d0:	2000      	movs	r0, #0
 80113d2:	f001 ff35 	bl	8013240 <LoRaMacCryptoSetKey>
 80113d6:	4603      	mov	r3, r0
 80113d8:	2b00      	cmp	r3, #0
 80113da:	f000 8266 	beq.w	80118aa <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80113de:	2311      	movs	r3, #17
 80113e0:	e27b      	b.n	80118da <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113e2:	2303      	movs	r3, #3
 80113e4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113e6:	e260      	b.n	80118aa <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00b      	beq.n	8011408 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	4619      	mov	r1, r3
 80113f6:	2001      	movs	r0, #1
 80113f8:	f001 ff22 	bl	8013240 <LoRaMacCryptoSetKey>
 80113fc:	4603      	mov	r3, r0
 80113fe:	2b00      	cmp	r3, #0
 8011400:	f000 8255 	beq.w	80118ae <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011404:	2311      	movs	r3, #17
 8011406:	e268      	b.n	80118da <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011408:	2303      	movs	r3, #3
 801140a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801140c:	e24f      	b.n	80118ae <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d00b      	beq.n	801142e <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	685b      	ldr	r3, [r3, #4]
 801141a:	4619      	mov	r1, r3
 801141c:	2002      	movs	r0, #2
 801141e:	f001 ff0f 	bl	8013240 <LoRaMacCryptoSetKey>
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	f000 8244 	beq.w	80118b2 <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801142a:	2311      	movs	r3, #17
 801142c:	e255      	b.n	80118da <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801142e:	2303      	movs	r3, #3
 8011430:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011432:	e23e      	b.n	80118b2 <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	685b      	ldr	r3, [r3, #4]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00b      	beq.n	8011454 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	4619      	mov	r1, r3
 8011442:	2003      	movs	r0, #3
 8011444:	f001 fefc 	bl	8013240 <LoRaMacCryptoSetKey>
 8011448:	4603      	mov	r3, r0
 801144a:	2b00      	cmp	r3, #0
 801144c:	f000 8233 	beq.w	80118b6 <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011450:	2311      	movs	r3, #17
 8011452:	e242      	b.n	80118da <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011454:	2303      	movs	r3, #3
 8011456:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011458:	e22d      	b.n	80118b6 <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d00b      	beq.n	801147a <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	4619      	mov	r1, r3
 8011468:	207f      	movs	r0, #127	; 0x7f
 801146a:	f001 fee9 	bl	8013240 <LoRaMacCryptoSetKey>
 801146e:	4603      	mov	r3, r0
 8011470:	2b00      	cmp	r3, #0
 8011472:	f000 8222 	beq.w	80118ba <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011476:	2311      	movs	r3, #17
 8011478:	e22f      	b.n	80118da <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801147a:	2303      	movs	r3, #3
 801147c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801147e:	e21c      	b.n	80118ba <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d00b      	beq.n	80114a0 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	685b      	ldr	r3, [r3, #4]
 801148c:	4619      	mov	r1, r3
 801148e:	2080      	movs	r0, #128	; 0x80
 8011490:	f001 fed6 	bl	8013240 <LoRaMacCryptoSetKey>
 8011494:	4603      	mov	r3, r0
 8011496:	2b00      	cmp	r3, #0
 8011498:	f000 8211 	beq.w	80118be <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801149c:	2311      	movs	r3, #17
 801149e:	e21c      	b.n	80118da <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114a0:	2303      	movs	r3, #3
 80114a2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114a4:	e20b      	b.n	80118be <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d00b      	beq.n	80114c6 <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	4619      	mov	r1, r3
 80114b4:	2081      	movs	r0, #129	; 0x81
 80114b6:	f001 fec3 	bl	8013240 <LoRaMacCryptoSetKey>
 80114ba:	4603      	mov	r3, r0
 80114bc:	2b00      	cmp	r3, #0
 80114be:	f000 8200 	beq.w	80118c2 <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80114c2:	2311      	movs	r3, #17
 80114c4:	e209      	b.n	80118da <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114c6:	2303      	movs	r3, #3
 80114c8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114ca:	e1fa      	b.n	80118c2 <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00b      	beq.n	80114ec <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	4619      	mov	r1, r3
 80114da:	2082      	movs	r0, #130	; 0x82
 80114dc:	f001 feb0 	bl	8013240 <LoRaMacCryptoSetKey>
 80114e0:	4603      	mov	r3, r0
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	f000 81ef 	beq.w	80118c6 <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80114e8:	2311      	movs	r3, #17
 80114ea:	e1f6      	b.n	80118da <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114ec:	2303      	movs	r3, #3
 80114ee:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114f0:	e1e9      	b.n	80118c6 <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	791a      	ldrb	r2, [r3, #4]
 80114f6:	4b22      	ldr	r3, [pc, #136]	; (8011580 <LoRaMacMibSetRequestConfirm+0x314>)
 80114f8:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80114fc:	4b21      	ldr	r3, [pc, #132]	; (8011584 <LoRaMacMibSetRequestConfirm+0x318>)
 80114fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011500:	4a1f      	ldr	r2, [pc, #124]	; (8011580 <LoRaMacMibSetRequestConfirm+0x314>)
 8011502:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8011506:	4610      	mov	r0, r2
 8011508:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801150a:	4b1e      	ldr	r3, [pc, #120]	; (8011584 <LoRaMacMibSetRequestConfirm+0x318>)
 801150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801150e:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8011510:	e1e2      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	791a      	ldrb	r2, [r3, #4]
 8011516:	4b1a      	ldr	r3, [pc, #104]	; (8011580 <LoRaMacMibSetRequestConfirm+0x314>)
 8011518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 801151c:	e1dc      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	7a1b      	ldrb	r3, [r3, #8]
 8011522:	b25b      	sxtb	r3, r3
 8011524:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011526:	4b16      	ldr	r3, [pc, #88]	; (8011580 <LoRaMacMibSetRequestConfirm+0x314>)
 8011528:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801152c:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801152e:	4b14      	ldr	r3, [pc, #80]	; (8011580 <LoRaMacMibSetRequestConfirm+0x314>)
 8011530:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011534:	f107 0108 	add.w	r1, r7, #8
 8011538:	2207      	movs	r2, #7
 801153a:	4618      	mov	r0, r3
 801153c:	f002 fcac 	bl	8013e98 <RegionVerify>
 8011540:	4603      	mov	r3, r0
 8011542:	f083 0301 	eor.w	r3, r3, #1
 8011546:	b2db      	uxtb	r3, r3
 8011548:	2b00      	cmp	r3, #0
 801154a:	d002      	beq.n	8011552 <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801154c:	2303      	movs	r3, #3
 801154e:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8011550:	e1c2      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011558:	4b09      	ldr	r3, [pc, #36]	; (8011580 <LoRaMacMibSetRequestConfirm+0x314>)
 801155a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801155e:	f107 0108 	add.w	r1, r7, #8
 8011562:	2200      	movs	r2, #0
 8011564:	4618      	mov	r0, r3
 8011566:	f002 fc97 	bl	8013e98 <RegionVerify>
 801156a:	4603      	mov	r3, r0
 801156c:	f083 0301 	eor.w	r3, r3, #1
 8011570:	b2db      	uxtb	r3, r3
 8011572:	2b00      	cmp	r3, #0
 8011574:	d008      	beq.n	8011588 <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011576:	2303      	movs	r3, #3
 8011578:	75fb      	strb	r3, [r7, #23]
            break;
 801157a:	e1ad      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
 801157c:	2000045c 	.word	0x2000045c
 8011580:	20000964 	.word	0x20000964
 8011584:	0801ba28 	.word	0x0801ba28
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011588:	4bb6      	ldr	r3, [pc, #728]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801158a:	687a      	ldr	r2, [r7, #4]
 801158c:	3364      	adds	r3, #100	; 0x64
 801158e:	3204      	adds	r2, #4
 8011590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011594:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011598:	e19e      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	7a1b      	ldrb	r3, [r3, #8]
 801159e:	b25b      	sxtb	r3, r3
 80115a0:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80115a2:	4bb0      	ldr	r3, [pc, #704]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115a4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80115a8:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80115aa:	4bae      	ldr	r3, [pc, #696]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115b0:	f107 0108 	add.w	r1, r7, #8
 80115b4:	2207      	movs	r2, #7
 80115b6:	4618      	mov	r0, r3
 80115b8:	f002 fc6e 	bl	8013e98 <RegionVerify>
 80115bc:	4603      	mov	r3, r0
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d008      	beq.n	80115d4 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80115c2:	4ba8      	ldr	r3, [pc, #672]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115c4:	687a      	ldr	r2, [r7, #4]
 80115c6:	33a4      	adds	r3, #164	; 0xa4
 80115c8:	3204      	adds	r2, #4
 80115ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115ce:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80115d2:	e181      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80115d4:	2303      	movs	r3, #3
 80115d6:	75fb      	strb	r3, [r7, #23]
            break;
 80115d8:	e17e      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	7a1b      	ldrb	r3, [r3, #8]
 80115de:	b25b      	sxtb	r3, r3
 80115e0:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80115e2:	4ba0      	ldr	r3, [pc, #640]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115e4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80115e8:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80115ea:	4b9e      	ldr	r3, [pc, #632]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115f0:	f107 0108 	add.w	r1, r7, #8
 80115f4:	2207      	movs	r2, #7
 80115f6:	4618      	mov	r0, r3
 80115f8:	f002 fc4e 	bl	8013e98 <RegionVerify>
 80115fc:	4603      	mov	r3, r0
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d019      	beq.n	8011636 <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011602:	4b98      	ldr	r3, [pc, #608]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	336c      	adds	r3, #108	; 0x6c
 8011608:	3204      	adds	r2, #4
 801160a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801160e:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011612:	4b94      	ldr	r3, [pc, #592]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011614:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011618:	2b02      	cmp	r3, #2
 801161a:	f040 8156 	bne.w	80118ca <LoRaMacMibSetRequestConfirm+0x65e>
 801161e:	4b91      	ldr	r3, [pc, #580]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011620:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8011624:	2b00      	cmp	r3, #0
 8011626:	f000 8150 	beq.w	80118ca <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801162a:	4b8f      	ldr	r3, [pc, #572]	; (8011868 <LoRaMacMibSetRequestConfirm+0x5fc>)
 801162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801162e:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8011630:	f7fe fcda 	bl	800ffe8 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011634:	e149      	b.n	80118ca <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011636:	2303      	movs	r3, #3
 8011638:	75fb      	strb	r3, [r7, #23]
            break;
 801163a:	e146      	b.n	80118ca <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	7a1b      	ldrb	r3, [r3, #8]
 8011640:	b25b      	sxtb	r3, r3
 8011642:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011644:	4b87      	ldr	r3, [pc, #540]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011646:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801164a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801164c:	4b85      	ldr	r3, [pc, #532]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801164e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011652:	f107 0108 	add.w	r1, r7, #8
 8011656:	2207      	movs	r2, #7
 8011658:	4618      	mov	r0, r3
 801165a:	f002 fc1d 	bl	8013e98 <RegionVerify>
 801165e:	4603      	mov	r3, r0
 8011660:	2b00      	cmp	r3, #0
 8011662:	d008      	beq.n	8011676 <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011664:	4b7f      	ldr	r3, [pc, #508]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011666:	687a      	ldr	r2, [r7, #4]
 8011668:	33ac      	adds	r3, #172	; 0xac
 801166a:	3204      	adds	r2, #4
 801166c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011670:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011674:	e130      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011676:	2303      	movs	r3, #3
 8011678:	75fb      	strb	r3, [r7, #23]
            break;
 801167a:	e12d      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	685b      	ldr	r3, [r3, #4]
 8011680:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011682:	2301      	movs	r3, #1
 8011684:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011686:	4b77      	ldr	r3, [pc, #476]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011688:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801168c:	f107 020c 	add.w	r2, r7, #12
 8011690:	4611      	mov	r1, r2
 8011692:	4618      	mov	r0, r3
 8011694:	f002 fc29 	bl	8013eea <RegionChanMaskSet>
 8011698:	4603      	mov	r3, r0
 801169a:	f083 0301 	eor.w	r3, r3, #1
 801169e:	b2db      	uxtb	r3, r3
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	f000 8114 	beq.w	80118ce <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116a6:	2303      	movs	r3, #3
 80116a8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116aa:	e110      	b.n	80118ce <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80116b2:	2300      	movs	r3, #0
 80116b4:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80116b6:	4b6b      	ldr	r3, [pc, #428]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116bc:	f107 020c 	add.w	r2, r7, #12
 80116c0:	4611      	mov	r1, r2
 80116c2:	4618      	mov	r0, r3
 80116c4:	f002 fc11 	bl	8013eea <RegionChanMaskSet>
 80116c8:	4603      	mov	r3, r0
 80116ca:	f083 0301 	eor.w	r3, r3, #1
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	f000 80fe 	beq.w	80118d2 <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116d6:	2303      	movs	r3, #3
 80116d8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116da:	e0fa      	b.n	80118d2 <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	791b      	ldrb	r3, [r3, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d009      	beq.n	80116f8 <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80116e8:	2b0f      	cmp	r3, #15
 80116ea:	d805      	bhi.n	80116f8 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	791a      	ldrb	r2, [r3, #4]
 80116f0:	4b5c      	ldr	r3, [pc, #368]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80116f6:	e0ef      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116f8:	2303      	movs	r3, #3
 80116fa:	75fb      	strb	r3, [r7, #23]
            break;
 80116fc:	e0ec      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	4a58      	ldr	r2, [pc, #352]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011704:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8011706:	e0e7      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	4a55      	ldr	r2, [pc, #340]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801170e:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8011710:	e0e2      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	4a53      	ldr	r2, [pc, #332]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011718:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 801171a:	e0dd      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	4a50      	ldr	r2, [pc, #320]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011722:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8011724:	e0d8      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	4a4e      	ldr	r2, [pc, #312]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801172c:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 801172e:	e0d3      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011736:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011738:	4b4a      	ldr	r3, [pc, #296]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801173a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801173e:	f107 0108 	add.w	r1, r7, #8
 8011742:	2206      	movs	r2, #6
 8011744:	4618      	mov	r0, r3
 8011746:	f002 fba7 	bl	8013e98 <RegionVerify>
 801174a:	4603      	mov	r3, r0
 801174c:	2b00      	cmp	r3, #0
 801174e:	d005      	beq.n	801175c <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011750:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011754:	4b43      	ldr	r3, [pc, #268]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011756:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801175a:	e0bd      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801175c:	2303      	movs	r3, #3
 801175e:	75fb      	strb	r3, [r7, #23]
            break;
 8011760:	e0ba      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011768:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801176a:	4b3e      	ldr	r3, [pc, #248]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801176c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011770:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011772:	4b3c      	ldr	r3, [pc, #240]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011774:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011778:	f107 0108 	add.w	r1, r7, #8
 801177c:	2205      	movs	r2, #5
 801177e:	4618      	mov	r0, r3
 8011780:	f002 fb8a 	bl	8013e98 <RegionVerify>
 8011784:	4603      	mov	r3, r0
 8011786:	2b00      	cmp	r3, #0
 8011788:	d005      	beq.n	8011796 <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801178a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801178e:	4b35      	ldr	r3, [pc, #212]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011794:	e0a0      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011796:	2303      	movs	r3, #3
 8011798:	75fb      	strb	r3, [r7, #23]
            break;
 801179a:	e09d      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80117a2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80117a4:	4b2f      	ldr	r3, [pc, #188]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117aa:	f107 0108 	add.w	r1, r7, #8
 80117ae:	220a      	movs	r2, #10
 80117b0:	4618      	mov	r0, r3
 80117b2:	f002 fb71 	bl	8013e98 <RegionVerify>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d005      	beq.n	80117c8 <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80117bc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80117c0:	4b28      	ldr	r3, [pc, #160]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117c2:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80117c6:	e087      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117c8:	2303      	movs	r3, #3
 80117ca:	75fb      	strb	r3, [r7, #23]
            break;
 80117cc:	e084      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80117d4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80117d6:	4b23      	ldr	r3, [pc, #140]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117dc:	f107 0108 	add.w	r1, r7, #8
 80117e0:	2209      	movs	r2, #9
 80117e2:	4618      	mov	r0, r3
 80117e4:	f002 fb58 	bl	8013e98 <RegionVerify>
 80117e8:	4603      	mov	r3, r0
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d005      	beq.n	80117fa <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80117ee:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80117f2:	4b1c      	ldr	r3, [pc, #112]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80117f8:	e06e      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117fa:	2303      	movs	r3, #3
 80117fc:	75fb      	strb	r3, [r7, #23]
            break;
 80117fe:	e06b      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	4a17      	ldr	r2, [pc, #92]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011806:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 801180a:	4b16      	ldr	r3, [pc, #88]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801180c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011810:	4a14      	ldr	r2, [pc, #80]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011812:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011814:	e060      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	791a      	ldrb	r2, [r3, #4]
 801181a:	4b12      	ldr	r3, [pc, #72]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801181c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8011820:	4b10      	ldr	r3, [pc, #64]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011822:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8011826:	4b0f      	ldr	r3, [pc, #60]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011828:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 801182c:	e054      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	4a0c      	ldr	r2, [pc, #48]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011834:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8011836:	e04f      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	685b      	ldr	r3, [r3, #4]
 801183c:	4a09      	ldr	r2, [pc, #36]	; (8011864 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801183e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 8011842:	e049      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d007      	beq.n	801185c <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	4618      	mov	r0, r3
 8011852:	f7fe fe27 	bl	80104a4 <RestoreNvmData>
 8011856:	4603      	mov	r3, r0
 8011858:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801185a:	e03d      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801185c:	2303      	movs	r3, #3
 801185e:	75fb      	strb	r3, [r7, #23]
            break;
 8011860:	e03a      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
 8011862:	bf00      	nop
 8011864:	20000964 	.word	0x20000964
 8011868:	0801ba28 	.word	0x0801ba28
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	799b      	ldrb	r3, [r3, #6]
 8011870:	2b01      	cmp	r3, #1
 8011872:	d80d      	bhi.n	8011890 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011874:	4a1b      	ldr	r2, [pc, #108]	; (80118e4 <LoRaMacMibSetRequestConfirm+0x678>)
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6858      	ldr	r0, [r3, #4]
 8011882:	f001 fc23 	bl	80130cc <LoRaMacCryptoSetLrWanVersion>
 8011886:	4603      	mov	r3, r0
 8011888:	2b00      	cmp	r3, #0
 801188a:	d024      	beq.n	80118d6 <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801188c:	2311      	movs	r3, #17
 801188e:	e024      	b.n	80118da <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011890:	2303      	movs	r3, #3
 8011892:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011894:	e01f      	b.n	80118d6 <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 fbe4 	bl	8012064 <LoRaMacMibClassBSetRequestConfirm>
 801189c:	4603      	mov	r3, r0
 801189e:	75fb      	strb	r3, [r7, #23]
            break;
 80118a0:	e01a      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118a2:	bf00      	nop
 80118a4:	e018      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118a6:	bf00      	nop
 80118a8:	e016      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118aa:	bf00      	nop
 80118ac:	e014      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118ae:	bf00      	nop
 80118b0:	e012      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118b2:	bf00      	nop
 80118b4:	e010      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118b6:	bf00      	nop
 80118b8:	e00e      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118ba:	bf00      	nop
 80118bc:	e00c      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118be:	bf00      	nop
 80118c0:	e00a      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118c2:	bf00      	nop
 80118c4:	e008      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118c6:	bf00      	nop
 80118c8:	e006      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118ca:	bf00      	nop
 80118cc:	e004      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118ce:	bf00      	nop
 80118d0:	e002      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118d2:	bf00      	nop
 80118d4:	e000      	b.n	80118d8 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118d6:	bf00      	nop
        }
    }
    return status;
 80118d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3718      	adds	r7, #24
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
 80118e2:	bf00      	nop
 80118e4:	20000964 	.word	0x20000964

080118e8 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b086      	sub	sp, #24
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80118f0:	2302      	movs	r3, #2
 80118f2:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80118f4:	2300      	movs	r3, #0
 80118f6:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d101      	bne.n	8011902 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80118fe:	2303      	movs	r3, #3
 8011900:	e127      	b.n	8011b52 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 8011902:	f7fc fd23 	bl	800e34c <LoRaMacIsBusy>
 8011906:	4603      	mov	r3, r0
 8011908:	2b00      	cmp	r3, #0
 801190a:	d001      	beq.n	8011910 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 801190c:	2301      	movs	r3, #1
 801190e:	e120      	b.n	8011b52 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011910:	f001 f8a6 	bl	8012a60 <LoRaMacConfirmQueueIsFull>
 8011914:	4603      	mov	r3, r0
 8011916:	2b00      	cmp	r3, #0
 8011918:	d001      	beq.n	801191e <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 801191a:	2301      	movs	r3, #1
 801191c:	e119      	b.n	8011b52 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801191e:	f001 f893 	bl	8012a48 <LoRaMacConfirmQueueGetCnt>
 8011922:	4603      	mov	r3, r0
 8011924:	2b00      	cmp	r3, #0
 8011926:	d104      	bne.n	8011932 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011928:	2214      	movs	r2, #20
 801192a:	2100      	movs	r1, #0
 801192c:	488b      	ldr	r0, [pc, #556]	; (8011b5c <LoRaMacMlmeRequest+0x274>)
 801192e:	f004 fdbd 	bl	80164ac <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011932:	4b8b      	ldr	r3, [pc, #556]	; (8011b60 <LoRaMacMlmeRequest+0x278>)
 8011934:	2201      	movs	r2, #1
 8011936:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801193a:	4a89      	ldr	r2, [pc, #548]	; (8011b60 <LoRaMacMlmeRequest+0x278>)
 801193c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011940:	f043 0304 	orr.w	r3, r3, #4
 8011944:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	781b      	ldrb	r3, [r3, #0]
 801194c:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801194e:	2301      	movs	r3, #1
 8011950:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8011952:	2300      	movs	r3, #0
 8011954:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	781b      	ldrb	r3, [r3, #0]
 801195a:	3b01      	subs	r3, #1
 801195c:	2b0d      	cmp	r3, #13
 801195e:	f200 80ce 	bhi.w	8011afe <LoRaMacMlmeRequest+0x216>
 8011962:	a201      	add	r2, pc, #4	; (adr r2, 8011968 <LoRaMacMlmeRequest+0x80>)
 8011964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011968:	080119a1 	.word	0x080119a1
 801196c:	08011aff 	.word	0x08011aff
 8011970:	08011aff 	.word	0x08011aff
 8011974:	08011a0b 	.word	0x08011a0b
 8011978:	08011a29 	.word	0x08011a29
 801197c:	08011a39 	.word	0x08011a39
 8011980:	08011aff 	.word	0x08011aff
 8011984:	08011aff 	.word	0x08011aff
 8011988:	08011aff 	.word	0x08011aff
 801198c:	08011a55 	.word	0x08011a55
 8011990:	08011aff 	.word	0x08011aff
 8011994:	08011ad3 	.word	0x08011ad3
 8011998:	08011a73 	.word	0x08011a73
 801199c:	08011ab5 	.word	0x08011ab5
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80119a0:	4b6f      	ldr	r3, [pc, #444]	; (8011b60 <LoRaMacMlmeRequest+0x278>)
 80119a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80119a6:	f003 0320 	and.w	r3, r3, #32
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d001      	beq.n	80119b2 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 80119ae:	2301      	movs	r3, #1
 80119b0:	e0cf      	b.n	8011b52 <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 80119b2:	f7fe f9fd 	bl	800fdb0 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80119b6:	4b6b      	ldr	r3, [pc, #428]	; (8011b64 <LoRaMacMlmeRequest+0x27c>)
 80119b8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	791b      	ldrb	r3, [r3, #4]
 80119c0:	b25b      	sxtb	r3, r3
 80119c2:	2200      	movs	r2, #0
 80119c4:	4619      	mov	r1, r3
 80119c6:	f002 fb4f 	bl	8014068 <RegionAlternateDr>
 80119ca:	4603      	mov	r3, r0
 80119cc:	461a      	mov	r2, r3
 80119ce:	4b65      	ldr	r3, [pc, #404]	; (8011b64 <LoRaMacMlmeRequest+0x27c>)
 80119d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80119d4:	2307      	movs	r3, #7
 80119d6:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 80119d8:	20ff      	movs	r0, #255	; 0xff
 80119da:	f7fd ff61 	bl	800f8a0 <SendReJoinReq>
 80119de:	4603      	mov	r3, r0
 80119e0:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 80119e2:	7dfb      	ldrb	r3, [r7, #23]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	f000 808c 	beq.w	8011b02 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80119ea:	4b5e      	ldr	r3, [pc, #376]	; (8011b64 <LoRaMacMlmeRequest+0x27c>)
 80119ec:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	791b      	ldrb	r3, [r3, #4]
 80119f4:	b25b      	sxtb	r3, r3
 80119f6:	2201      	movs	r2, #1
 80119f8:	4619      	mov	r1, r3
 80119fa:	f002 fb35 	bl	8014068 <RegionAlternateDr>
 80119fe:	4603      	mov	r3, r0
 8011a00:	461a      	mov	r2, r3
 8011a02:	4b58      	ldr	r3, [pc, #352]	; (8011b64 <LoRaMacMlmeRequest+0x27c>)
 8011a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8011a08:	e07b      	b.n	8011b02 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011a0e:	f107 030c 	add.w	r3, r7, #12
 8011a12:	2200      	movs	r2, #0
 8011a14:	4619      	mov	r1, r3
 8011a16:	2002      	movs	r0, #2
 8011a18:	f000 fc88 	bl	801232c <LoRaMacCommandsAddCmd>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d071      	beq.n	8011b06 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a22:	2313      	movs	r3, #19
 8011a24:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a26:	e06e      	b.n	8011b06 <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	889b      	ldrh	r3, [r3, #4]
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7fe fcdb 	bl	80103e8 <SetTxContinuousWave>
 8011a32:	4603      	mov	r3, r0
 8011a34:	75fb      	strb	r3, [r7, #23]
            break;
 8011a36:	e06d      	b.n	8011b14 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	8898      	ldrh	r0, [r3, #4]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6899      	ldr	r1, [r3, #8]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011a46:	b2db      	uxtb	r3, r3
 8011a48:	461a      	mov	r2, r3
 8011a4a:	f7fe fd01 	bl	8010450 <SetTxContinuousWave1>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	75fb      	strb	r3, [r7, #23]
            break;
 8011a52:	e05f      	b.n	8011b14 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011a54:	2300      	movs	r3, #0
 8011a56:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011a58:	f107 030c 	add.w	r3, r7, #12
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	4619      	mov	r1, r3
 8011a60:	200d      	movs	r0, #13
 8011a62:	f000 fc63 	bl	801232c <LoRaMacCommandsAddCmd>
 8011a66:	4603      	mov	r3, r0
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d04e      	beq.n	8011b0a <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a6c:	2313      	movs	r3, #19
 8011a6e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a70:	e04b      	b.n	8011b0a <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011a72:	4b3c      	ldr	r3, [pc, #240]	; (8011b64 <LoRaMacMlmeRequest+0x27c>)
 8011a74:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d148      	bne.n	8011b0e <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	791b      	ldrb	r3, [r3, #4]
 8011a80:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	791b      	ldrb	r3, [r3, #4]
 8011a86:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011a8a:	b2db      	uxtb	r3, r3
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f000 fabe 	bl	801200e <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011a92:	7dbb      	ldrb	r3, [r7, #22]
 8011a94:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011a96:	2300      	movs	r3, #0
 8011a98:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011a9a:	f107 030c 	add.w	r3, r7, #12
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	2010      	movs	r0, #16
 8011aa4:	f000 fc42 	bl	801232c <LoRaMacCommandsAddCmd>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d02f      	beq.n	8011b0e <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011aae:	2313      	movs	r3, #19
 8011ab0:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011ab2:	e02c      	b.n	8011b0e <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011ab8:	f107 030c 	add.w	r3, r7, #12
 8011abc:	2200      	movs	r2, #0
 8011abe:	4619      	mov	r1, r3
 8011ac0:	2012      	movs	r0, #18
 8011ac2:	f000 fc33 	bl	801232c <LoRaMacCommandsAddCmd>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d022      	beq.n	8011b12 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011acc:	2313      	movs	r3, #19
 8011ace:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ad0:	e01f      	b.n	8011b12 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011ad6:	f000 fa50 	bl	8011f7a <LoRaMacClassBIsAcquisitionInProgress>
 8011ada:	4603      	mov	r3, r0
 8011adc:	f083 0301 	eor.w	r3, r3, #1
 8011ae0:	b2db      	uxtb	r3, r3
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d008      	beq.n	8011af8 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011ae6:	2000      	movs	r0, #0
 8011ae8:	f000 fa29 	bl	8011f3e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011aec:	2000      	movs	r0, #0
 8011aee:	f000 fa4b 	bl	8011f88 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011af2:	2300      	movs	r3, #0
 8011af4:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011af6:	e00d      	b.n	8011b14 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8011af8:	2301      	movs	r3, #1
 8011afa:	75fb      	strb	r3, [r7, #23]
            break;
 8011afc:	e00a      	b.n	8011b14 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8011afe:	bf00      	nop
 8011b00:	e008      	b.n	8011b14 <LoRaMacMlmeRequest+0x22c>
            break;
 8011b02:	bf00      	nop
 8011b04:	e006      	b.n	8011b14 <LoRaMacMlmeRequest+0x22c>
            break;
 8011b06:	bf00      	nop
 8011b08:	e004      	b.n	8011b14 <LoRaMacMlmeRequest+0x22c>
            break;
 8011b0a:	bf00      	nop
 8011b0c:	e002      	b.n	8011b14 <LoRaMacMlmeRequest+0x22c>
            break;
 8011b0e:	bf00      	nop
 8011b10:	e000      	b.n	8011b14 <LoRaMacMlmeRequest+0x22c>
            break;
 8011b12:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011b14:	4b12      	ldr	r3, [pc, #72]	; (8011b60 <LoRaMacMlmeRequest+0x278>)
 8011b16:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011b1e:	7dfb      	ldrb	r3, [r7, #23]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d010      	beq.n	8011b46 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011b24:	f000 ff90 	bl	8012a48 <LoRaMacConfirmQueueGetCnt>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d110      	bne.n	8011b50 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011b2e:	4b0c      	ldr	r3, [pc, #48]	; (8011b60 <LoRaMacMlmeRequest+0x278>)
 8011b30:	2200      	movs	r2, #0
 8011b32:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011b36:	4a0a      	ldr	r2, [pc, #40]	; (8011b60 <LoRaMacMlmeRequest+0x278>)
 8011b38:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b3c:	f36f 0382 	bfc	r3, #2, #1
 8011b40:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011b44:	e004      	b.n	8011b50 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011b46:	f107 0310 	add.w	r3, r7, #16
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f000 fe2e 	bl	80127ac <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3718      	adds	r7, #24
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	200008a8 	.word	0x200008a8
 8011b60:	2000045c 	.word	0x2000045c
 8011b64:	20000964 	.word	0x20000964

08011b68 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b08c      	sub	sp, #48	; 0x30
 8011b6c:	af02      	add	r7, sp, #8
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	460b      	mov	r3, r1
 8011b72:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011b74:	2302      	movs	r3, #2
 8011b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011b80:	2300      	movs	r3, #0
 8011b82:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011b84:	2300      	movs	r3, #0
 8011b86:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011b88:	2300      	movs	r3, #0
 8011b8a:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d101      	bne.n	8011b96 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b92:	2303      	movs	r3, #3
 8011b94:	e0d4      	b.n	8011d40 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8011b96:	f7fc fbd9 	bl	800e34c <LoRaMacIsBusy>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d001      	beq.n	8011ba4 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	e0cd      	b.n	8011d40 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011ba8:	2214      	movs	r2, #20
 8011baa:	2100      	movs	r1, #0
 8011bac:	4866      	ldr	r0, [pc, #408]	; (8011d48 <LoRaMacMcpsRequest+0x1e0>)
 8011bae:	f004 fc7d 	bl	80164ac <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011bb2:	4b66      	ldr	r3, [pc, #408]	; (8011d4c <LoRaMacMcpsRequest+0x1e4>)
 8011bb4:	2201      	movs	r2, #1
 8011bb6:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011bba:	4b64      	ldr	r3, [pc, #400]	; (8011d4c <LoRaMacMcpsRequest+0x1e4>)
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	2b03      	cmp	r3, #3
 8011bc8:	d03d      	beq.n	8011c46 <LoRaMacMcpsRequest+0xde>
 8011bca:	2b03      	cmp	r3, #3
 8011bcc:	dc4f      	bgt.n	8011c6e <LoRaMacMcpsRequest+0x106>
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d002      	beq.n	8011bd8 <LoRaMacMcpsRequest+0x70>
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d019      	beq.n	8011c0a <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011bd6:	e04a      	b.n	8011c6e <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011bd8:	2301      	movs	r3, #1
 8011bda:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011bdc:	4b5b      	ldr	r3, [pc, #364]	; (8011d4c <LoRaMacMcpsRequest+0x1e4>)
 8011bde:	2201      	movs	r2, #1
 8011be0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011be4:	7b3b      	ldrb	r3, [r7, #12]
 8011be6:	2202      	movs	r2, #2
 8011be8:	f362 1347 	bfi	r3, r2, #5, #3
 8011bec:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	791b      	ldrb	r3, [r3, #4]
 8011bf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	689b      	ldr	r3, [r3, #8]
 8011bfa:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	899b      	ldrh	r3, [r3, #12]
 8011c00:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	7b9b      	ldrb	r3, [r3, #14]
 8011c06:	777b      	strb	r3, [r7, #29]
            break;
 8011c08:	e032      	b.n	8011c70 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	7bdb      	ldrb	r3, [r3, #15]
 8011c12:	2b08      	cmp	r3, #8
 8011c14:	bf28      	it	cs
 8011c16:	2308      	movcs	r3, #8
 8011c18:	b2da      	uxtb	r2, r3
 8011c1a:	4b4c      	ldr	r3, [pc, #304]	; (8011d4c <LoRaMacMcpsRequest+0x1e4>)
 8011c1c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011c20:	7b3b      	ldrb	r3, [r7, #12]
 8011c22:	2204      	movs	r2, #4
 8011c24:	f362 1347 	bfi	r3, r2, #5, #3
 8011c28:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	791b      	ldrb	r3, [r3, #4]
 8011c2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	689b      	ldr	r3, [r3, #8]
 8011c36:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	899b      	ldrh	r3, [r3, #12]
 8011c3c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	7b9b      	ldrb	r3, [r3, #14]
 8011c42:	777b      	strb	r3, [r7, #29]
            break;
 8011c44:	e014      	b.n	8011c70 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011c46:	2301      	movs	r3, #1
 8011c48:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011c4a:	4b40      	ldr	r3, [pc, #256]	; (8011d4c <LoRaMacMcpsRequest+0x1e4>)
 8011c4c:	2201      	movs	r2, #1
 8011c4e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011c52:	7b3b      	ldrb	r3, [r7, #12]
 8011c54:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011c58:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	891b      	ldrh	r3, [r3, #8]
 8011c64:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	7a9b      	ldrb	r3, [r3, #10]
 8011c6a:	777b      	strb	r3, [r7, #29]
            break;
 8011c6c:	e000      	b.n	8011c70 <LoRaMacMcpsRequest+0x108>
            break;
 8011c6e:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011c70:	2302      	movs	r3, #2
 8011c72:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011c74:	4b36      	ldr	r3, [pc, #216]	; (8011d50 <LoRaMacMcpsRequest+0x1e8>)
 8011c76:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011c7a:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c7c:	4b34      	ldr	r3, [pc, #208]	; (8011d50 <LoRaMacMcpsRequest+0x1e8>)
 8011c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c82:	f107 0214 	add.w	r2, r7, #20
 8011c86:	4611      	mov	r1, r2
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f002 f8c9 	bl	8013e20 <RegionGetPhyParam>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	b25b      	sxtb	r3, r3
 8011c96:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	bfb8      	it	lt
 8011c9e:	4613      	movlt	r3, r2
 8011ca0:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011ca2:	7f3b      	ldrb	r3, [r7, #28]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d044      	beq.n	8011d32 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011ca8:	4b29      	ldr	r3, [pc, #164]	; (8011d50 <LoRaMacMcpsRequest+0x1e8>)
 8011caa:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011cae:	f083 0301 	eor.w	r3, r3, #1
 8011cb2:	b2db      	uxtb	r3, r3
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d019      	beq.n	8011cec <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011cb8:	7f7b      	ldrb	r3, [r7, #29]
 8011cba:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011cbc:	4b24      	ldr	r3, [pc, #144]	; (8011d50 <LoRaMacMcpsRequest+0x1e8>)
 8011cbe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011cc2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011cc4:	4b22      	ldr	r3, [pc, #136]	; (8011d50 <LoRaMacMcpsRequest+0x1e8>)
 8011cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cca:	f107 0108 	add.w	r1, r7, #8
 8011cce:	2205      	movs	r2, #5
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f002 f8e1 	bl	8013e98 <RegionVerify>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d005      	beq.n	8011ce8 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011cdc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011ce0:	4b1b      	ldr	r3, [pc, #108]	; (8011d50 <LoRaMacMcpsRequest+0x1e8>)
 8011ce2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011ce6:	e001      	b.n	8011cec <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011ce8:	2303      	movs	r3, #3
 8011cea:	e029      	b.n	8011d40 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011cec:	8bfa      	ldrh	r2, [r7, #30]
 8011cee:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8011cf2:	f107 000c 	add.w	r0, r7, #12
 8011cf6:	78fb      	ldrb	r3, [r7, #3]
 8011cf8:	9300      	str	r3, [sp, #0]
 8011cfa:	4613      	mov	r3, r2
 8011cfc:	6a3a      	ldr	r2, [r7, #32]
 8011cfe:	f7fd fcef 	bl	800f6e0 <Send>
 8011d02:	4603      	mov	r3, r0
 8011d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8011d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d10c      	bne.n	8011d2a <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	781a      	ldrb	r2, [r3, #0]
 8011d14:	4b0d      	ldr	r3, [pc, #52]	; (8011d4c <LoRaMacMcpsRequest+0x1e4>)
 8011d16:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011d1a:	4a0c      	ldr	r2, [pc, #48]	; (8011d4c <LoRaMacMcpsRequest+0x1e4>)
 8011d1c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d20:	f043 0301 	orr.w	r3, r3, #1
 8011d24:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011d28:	e003      	b.n	8011d32 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011d2a:	4b08      	ldr	r3, [pc, #32]	; (8011d4c <LoRaMacMcpsRequest+0x1e4>)
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011d32:	4b06      	ldr	r3, [pc, #24]	; (8011d4c <LoRaMacMcpsRequest+0x1e4>)
 8011d34:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	611a      	str	r2, [r3, #16]

    return status;
 8011d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3728      	adds	r7, #40	; 0x28
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	20000894 	.word	0x20000894
 8011d4c:	2000045c 	.word	0x2000045c
 8011d50:	20000964 	.word	0x20000964

08011d54 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b084      	sub	sp, #16
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011d5e:	79fb      	ldrb	r3, [r7, #7]
 8011d60:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011d62:	4b0a      	ldr	r3, [pc, #40]	; (8011d8c <LoRaMacTestSetDutyCycleOn+0x38>)
 8011d64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d68:	f107 010c 	add.w	r1, r7, #12
 8011d6c:	220f      	movs	r2, #15
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f002 f892 	bl	8013e98 <RegionVerify>
 8011d74:	4603      	mov	r3, r0
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d003      	beq.n	8011d82 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8011d7a:	4a04      	ldr	r2, [pc, #16]	; (8011d8c <LoRaMacTestSetDutyCycleOn+0x38>)
 8011d7c:	79fb      	ldrb	r3, [r7, #7]
 8011d7e:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 8011d82:	bf00      	nop
 8011d84:	3710      	adds	r7, #16
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}
 8011d8a:	bf00      	nop
 8011d8c:	20000964 	.word	0x20000964

08011d90 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b08c      	sub	sp, #48	; 0x30
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	607a      	str	r2, [r7, #4]
 8011d9c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	7c1b      	ldrb	r3, [r3, #16]
 8011da8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	7c5b      	ldrb	r3, [r3, #17]
 8011db0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	689a      	ldr	r2, [r3, #8]
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	795b      	ldrb	r3, [r3, #5]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	f000 808b 	beq.w	8011edc <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011dc6:	2302      	movs	r3, #2
 8011dc8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	7c9b      	ldrb	r3, [r3, #18]
 8011dd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	7cdb      	ldrb	r3, [r3, #19]
 8011dd8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011ddc:	4611      	mov	r1, r2
 8011dde:	4618      	mov	r0, r3
 8011de0:	f002 f81e 	bl	8013e20 <RegionGetPhyParam>
 8011de4:	4603      	mov	r3, r0
 8011de6:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8011de8:	6a3b      	ldr	r3, [r7, #32]
 8011dea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8011dee:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8011df2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8011df6:	4293      	cmp	r3, r2
 8011df8:	bfb8      	it	lt
 8011dfa:	4613      	movlt	r3, r2
 8011dfc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8011e00:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011e04:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011e08:	429a      	cmp	r2, r3
 8011e0a:	d106      	bne.n	8011e1a <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011e12:	2300      	movs	r3, #0
 8011e14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011e18:	e060      	b.n	8011edc <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	689b      	ldr	r3, [r3, #8]
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	8992      	ldrh	r2, [r2, #12]
 8011e22:	4293      	cmp	r3, r2
 8011e24:	d303      	bcc.n	8011e2e <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8011e26:	2301      	movs	r3, #1
 8011e28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011e2c:	e002      	b.n	8011e34 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	689b      	ldr	r3, [r3, #8]
 8011e38:	68fa      	ldr	r2, [r7, #12]
 8011e3a:	8992      	ldrh	r2, [r2, #12]
 8011e3c:	4611      	mov	r1, r2
 8011e3e:	68fa      	ldr	r2, [r7, #12]
 8011e40:	89d2      	ldrh	r2, [r2, #14]
 8011e42:	440a      	add	r2, r1
 8011e44:	4293      	cmp	r3, r2
 8011e46:	d349      	bcc.n	8011edc <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011e48:	2308      	movs	r3, #8
 8011e4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	7cdb      	ldrb	r3, [r3, #19]
 8011e52:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011e56:	4611      	mov	r1, r2
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f001 ffe1 	bl	8013e20 <RegionGetPhyParam>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8011e62:	6a3b      	ldr	r3, [r7, #32]
 8011e64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	689b      	ldr	r3, [r3, #8]
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	89d2      	ldrh	r2, [r2, #14]
 8011e70:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e74:	fb02 f201 	mul.w	r2, r2, r1
 8011e78:	1a9b      	subs	r3, r3, r2
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d12e      	bne.n	8011edc <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011e7e:	2322      	movs	r3, #34	; 0x22
 8011e80:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8011e84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011e88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	7c9b      	ldrb	r3, [r3, #18]
 8011e90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	7cdb      	ldrb	r3, [r3, #19]
 8011e98:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011e9c:	4611      	mov	r1, r2
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f001 ffbe 	bl	8013e20 <RegionGetPhyParam>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8011ea8:	6a3b      	ldr	r3, [r7, #32]
 8011eaa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8011eae:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011eb2:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d110      	bne.n	8011edc <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	791b      	ldrb	r3, [r3, #4]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d009      	beq.n	8011edc <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011ec8:	2302      	movs	r3, #2
 8011eca:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	7cdb      	ldrb	r3, [r3, #19]
 8011ed0:	f107 0214 	add.w	r2, r7, #20
 8011ed4:	4611      	mov	r1, r2
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f001 ffcc 	bl	8013e74 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011ee2:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011eea:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011eec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3730      	adds	r7, #48	; 0x30
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	60f8      	str	r0, [r7, #12]
 8011f00:	60b9      	str	r1, [r7, #8]
 8011f02:	607a      	str	r2, [r7, #4]
 8011f04:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	789b      	ldrb	r3, [r3, #2]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d107      	bne.n	8011f1e <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	687a      	ldr	r2, [r7, #4]
 8011f12:	68b9      	ldr	r1, [r7, #8]
 8011f14:	68f8      	ldr	r0, [r7, #12]
 8011f16:	f7ff ff3b 	bl	8011d90 <CalcNextV10X>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	e000      	b.n	8011f20 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011f1e:	2300      	movs	r3, #0
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3710      	adds	r7, #16
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b085      	sub	sp, #20
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	60f8      	str	r0, [r7, #12]
 8011f30:	60b9      	str	r1, [r7, #8]
 8011f32:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f34:	bf00      	nop
 8011f36:	3714      	adds	r7, #20
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bc80      	pop	{r7}
 8011f3c:	4770      	bx	lr

08011f3e <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011f3e:	b480      	push	{r7}
 8011f40:	b083      	sub	sp, #12
 8011f42:	af00      	add	r7, sp, #0
 8011f44:	4603      	mov	r3, r0
 8011f46:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f48:	bf00      	nop
 8011f4a:	370c      	adds	r7, #12
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bc80      	pop	{r7}
 8011f50:	4770      	bx	lr

08011f52 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011f52:	b480      	push	{r7}
 8011f54:	b083      	sub	sp, #12
 8011f56:	af00      	add	r7, sp, #0
 8011f58:	4603      	mov	r3, r0
 8011f5a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f5c:	bf00      	nop
 8011f5e:	370c      	adds	r7, #12
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bc80      	pop	{r7}
 8011f64:	4770      	bx	lr

08011f66 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8011f66:	b480      	push	{r7}
 8011f68:	b083      	sub	sp, #12
 8011f6a:	af00      	add	r7, sp, #0
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f70:	bf00      	nop
 8011f72:	370c      	adds	r7, #12
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bc80      	pop	{r7}
 8011f78:	4770      	bx	lr

08011f7a <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8011f7a:	b480      	push	{r7}
 8011f7c:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8011f7e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bc80      	pop	{r7}
 8011f86:	4770      	bx	lr

08011f88 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b083      	sub	sp, #12
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f90:	bf00      	nop
 8011f92:	370c      	adds	r7, #12
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bc80      	pop	{r7}
 8011f98:	4770      	bx	lr

08011f9a <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8011f9a:	b480      	push	{r7}
 8011f9c:	b083      	sub	sp, #12
 8011f9e:	af00      	add	r7, sp, #0
 8011fa0:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fa2:	bf00      	nop
 8011fa4:	370c      	adds	r7, #12
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bc80      	pop	{r7}
 8011faa:	4770      	bx	lr

08011fac <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8011fac:	b480      	push	{r7}
 8011fae:	b083      	sub	sp, #12
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fb4:	bf00      	nop
 8011fb6:	370c      	adds	r7, #12
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bc80      	pop	{r7}
 8011fbc:	4770      	bx	lr

08011fbe <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8011fbe:	b480      	push	{r7}
 8011fc0:	b083      	sub	sp, #12
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
 8011fc6:	460b      	mov	r3, r1
 8011fc8:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8011fca:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	370c      	adds	r7, #12
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bc80      	pop	{r7}
 8011fd4:	4770      	bx	lr

08011fd6 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8011fd6:	b480      	push	{r7}
 8011fd8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011fda:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bc80      	pop	{r7}
 8011fe2:	4770      	bx	lr

08011fe4 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011fe8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bc80      	pop	{r7}
 8011ff0:	4770      	bx	lr

08011ff2 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8011ff2:	b480      	push	{r7}
 8011ff4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011ff6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bc80      	pop	{r7}
 8011ffe:	4770      	bx	lr

08012000 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012000:	b480      	push	{r7}
 8012002:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012004:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012006:	4618      	mov	r0, r3
 8012008:	46bd      	mov	sp, r7
 801200a:	bc80      	pop	{r7}
 801200c:	4770      	bx	lr

0801200e <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801200e:	b480      	push	{r7}
 8012010:	b083      	sub	sp, #12
 8012012:	af00      	add	r7, sp, #0
 8012014:	4603      	mov	r3, r0
 8012016:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012018:	bf00      	nop
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	bc80      	pop	{r7}
 8012020:	4770      	bx	lr

08012022 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8012022:	b480      	push	{r7}
 8012024:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012026:	bf00      	nop
 8012028:	46bd      	mov	sp, r7
 801202a:	bc80      	pop	{r7}
 801202c:	4770      	bx	lr

0801202e <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801202e:	b480      	push	{r7}
 8012030:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012032:	bf00      	nop
 8012034:	46bd      	mov	sp, r7
 8012036:	bc80      	pop	{r7}
 8012038:	4770      	bx	lr

0801203a <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801203a:	b480      	push	{r7}
 801203c:	b083      	sub	sp, #12
 801203e:	af00      	add	r7, sp, #0
 8012040:	4603      	mov	r3, r0
 8012042:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012044:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012046:	4618      	mov	r0, r3
 8012048:	370c      	adds	r7, #12
 801204a:	46bd      	mov	sp, r7
 801204c:	bc80      	pop	{r7}
 801204e:	4770      	bx	lr

08012050 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012058:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801205a:	4618      	mov	r0, r3
 801205c:	370c      	adds	r7, #12
 801205e:	46bd      	mov	sp, r7
 8012060:	bc80      	pop	{r7}
 8012062:	4770      	bx	lr

08012064 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012064:	b480      	push	{r7}
 8012066:	b083      	sub	sp, #12
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801206c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801206e:	4618      	mov	r0, r3
 8012070:	370c      	adds	r7, #12
 8012072:	46bd      	mov	sp, r7
 8012074:	bc80      	pop	{r7}
 8012076:	4770      	bx	lr

08012078 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012078:	b480      	push	{r7}
 801207a:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801207c:	bf00      	nop
 801207e:	46bd      	mov	sp, r7
 8012080:	bc80      	pop	{r7}
 8012082:	4770      	bx	lr

08012084 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012084:	b480      	push	{r7}
 8012086:	b083      	sub	sp, #12
 8012088:	af00      	add	r7, sp, #0
 801208a:	4603      	mov	r3, r0
 801208c:	6039      	str	r1, [r7, #0]
 801208e:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012090:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012092:	4618      	mov	r0, r3
 8012094:	370c      	adds	r7, #12
 8012096:	46bd      	mov	sp, r7
 8012098:	bc80      	pop	{r7}
 801209a:	4770      	bx	lr

0801209c <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801209c:	b480      	push	{r7}
 801209e:	b083      	sub	sp, #12
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	4603      	mov	r3, r0
 80120a4:	603a      	str	r2, [r7, #0]
 80120a6:	80fb      	strh	r3, [r7, #6]
 80120a8:	460b      	mov	r3, r1
 80120aa:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120ac:	bf00      	nop
 80120ae:	370c      	adds	r7, #12
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bc80      	pop	{r7}
 80120b4:	4770      	bx	lr

080120b6 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80120b6:	b480      	push	{r7}
 80120b8:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120ba:	bf00      	nop
 80120bc:	46bd      	mov	sp, r7
 80120be:	bc80      	pop	{r7}
 80120c0:	4770      	bx	lr

080120c2 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80120c2:	b480      	push	{r7}
 80120c4:	b083      	sub	sp, #12
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80120ca:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	370c      	adds	r7, #12
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bc80      	pop	{r7}
 80120d4:	4770      	bx	lr

080120d6 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80120d6:	b480      	push	{r7}
 80120d8:	b083      	sub	sp, #12
 80120da:	af00      	add	r7, sp, #0
 80120dc:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80120de:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120e0:	4618      	mov	r0, r3
 80120e2:	370c      	adds	r7, #12
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bc80      	pop	{r7}
 80120e8:	4770      	bx	lr

080120ea <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80120ea:	b480      	push	{r7}
 80120ec:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120ee:	bf00      	nop
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bc80      	pop	{r7}
 80120f4:	4770      	bx	lr

080120f6 <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 80120f6:	b480      	push	{r7}
 80120f8:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120fa:	bf00      	nop
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bc80      	pop	{r7}
 8012100:	4770      	bx	lr

08012102 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012102:	b480      	push	{r7}
 8012104:	b085      	sub	sp, #20
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801210e:	2300      	movs	r3, #0
 8012110:	81fb      	strh	r3, [r7, #14]
 8012112:	e00a      	b.n	801212a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012114:	89fb      	ldrh	r3, [r7, #14]
 8012116:	68ba      	ldr	r2, [r7, #8]
 8012118:	4413      	add	r3, r2
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d001      	beq.n	8012124 <IsSlotFree+0x22>
        {
            return false;
 8012120:	2300      	movs	r3, #0
 8012122:	e006      	b.n	8012132 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012124:	89fb      	ldrh	r3, [r7, #14]
 8012126:	3301      	adds	r3, #1
 8012128:	81fb      	strh	r3, [r7, #14]
 801212a:	89fb      	ldrh	r3, [r7, #14]
 801212c:	2b0f      	cmp	r3, #15
 801212e:	d9f1      	bls.n	8012114 <IsSlotFree+0x12>
        }
    }
    return true;
 8012130:	2301      	movs	r3, #1
}
 8012132:	4618      	mov	r0, r3
 8012134:	3714      	adds	r7, #20
 8012136:	46bd      	mov	sp, r7
 8012138:	bc80      	pop	{r7}
 801213a:	4770      	bx	lr

0801213c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b082      	sub	sp, #8
 8012140:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012142:	2300      	movs	r3, #0
 8012144:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012146:	e007      	b.n	8012158 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012148:	79fb      	ldrb	r3, [r7, #7]
 801214a:	3301      	adds	r3, #1
 801214c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801214e:	79fb      	ldrb	r3, [r7, #7]
 8012150:	2b0f      	cmp	r3, #15
 8012152:	d101      	bne.n	8012158 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012154:	2300      	movs	r3, #0
 8012156:	e012      	b.n	801217e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012158:	79fb      	ldrb	r3, [r7, #7]
 801215a:	011b      	lsls	r3, r3, #4
 801215c:	3308      	adds	r3, #8
 801215e:	4a0a      	ldr	r2, [pc, #40]	; (8012188 <MallocNewMacCommandSlot+0x4c>)
 8012160:	4413      	add	r3, r2
 8012162:	4618      	mov	r0, r3
 8012164:	f7ff ffcd 	bl	8012102 <IsSlotFree>
 8012168:	4603      	mov	r3, r0
 801216a:	f083 0301 	eor.w	r3, r3, #1
 801216e:	b2db      	uxtb	r3, r3
 8012170:	2b00      	cmp	r3, #0
 8012172:	d1e9      	bne.n	8012148 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012174:	79fb      	ldrb	r3, [r7, #7]
 8012176:	011b      	lsls	r3, r3, #4
 8012178:	3308      	adds	r3, #8
 801217a:	4a03      	ldr	r2, [pc, #12]	; (8012188 <MallocNewMacCommandSlot+0x4c>)
 801217c:	4413      	add	r3, r2
}
 801217e:	4618      	mov	r0, r3
 8012180:	3708      	adds	r7, #8
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	20000cb4 	.word	0x20000cb4

0801218c <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d101      	bne.n	801219e <FreeMacCommandSlot+0x12>
    {
        return false;
 801219a:	2300      	movs	r3, #0
 801219c:	e005      	b.n	80121aa <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801219e:	2210      	movs	r2, #16
 80121a0:	2100      	movs	r1, #0
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f004 f982 	bl	80164ac <memset1>

    return true;
 80121a8:	2301      	movs	r3, #1
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	3708      	adds	r7, #8
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}

080121b2 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80121b2:	b480      	push	{r7}
 80121b4:	b083      	sub	sp, #12
 80121b6:	af00      	add	r7, sp, #0
 80121b8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d101      	bne.n	80121c4 <LinkedListInit+0x12>
    {
        return false;
 80121c0:	2300      	movs	r3, #0
 80121c2:	e006      	b.n	80121d2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2200      	movs	r2, #0
 80121ce:	605a      	str	r2, [r3, #4]

    return true;
 80121d0:	2301      	movs	r3, #1
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	370c      	adds	r7, #12
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bc80      	pop	{r7}
 80121da:	4770      	bx	lr

080121dc <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80121dc:	b480      	push	{r7}
 80121de:	b083      	sub	sp, #12
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d002      	beq.n	80121f2 <LinkedListAdd+0x16>
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d101      	bne.n	80121f6 <LinkedListAdd+0x1a>
    {
        return false;
 80121f2:	2300      	movs	r3, #0
 80121f4:	e015      	b.n	8012222 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d102      	bne.n	8012204 <LinkedListAdd+0x28>
    {
        list->First = element;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	683a      	ldr	r2, [r7, #0]
 8012202:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	685b      	ldr	r3, [r3, #4]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d003      	beq.n	8012214 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	683a      	ldr	r2, [r7, #0]
 8012212:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012214:	683b      	ldr	r3, [r7, #0]
 8012216:	2200      	movs	r2, #0
 8012218:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	683a      	ldr	r2, [r7, #0]
 801221e:	605a      	str	r2, [r3, #4]

    return true;
 8012220:	2301      	movs	r3, #1
}
 8012222:	4618      	mov	r0, r3
 8012224:	370c      	adds	r7, #12
 8012226:	46bd      	mov	sp, r7
 8012228:	bc80      	pop	{r7}
 801222a:	4770      	bx	lr

0801222c <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801222c:	b480      	push	{r7}
 801222e:	b085      	sub	sp, #20
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d002      	beq.n	8012242 <LinkedListGetPrevious+0x16>
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d101      	bne.n	8012246 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012242:	2300      	movs	r3, #0
 8012244:	e016      	b.n	8012274 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 801224c:	683a      	ldr	r2, [r7, #0]
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	429a      	cmp	r2, r3
 8012252:	d00c      	beq.n	801226e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012254:	e002      	b.n	801225c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d007      	beq.n	8012272 <LinkedListGetPrevious+0x46>
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	683a      	ldr	r2, [r7, #0]
 8012268:	429a      	cmp	r2, r3
 801226a:	d1f4      	bne.n	8012256 <LinkedListGetPrevious+0x2a>
 801226c:	e001      	b.n	8012272 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801226e:	2300      	movs	r3, #0
 8012270:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012272:	68fb      	ldr	r3, [r7, #12]
}
 8012274:	4618      	mov	r0, r3
 8012276:	3714      	adds	r7, #20
 8012278:	46bd      	mov	sp, r7
 801227a:	bc80      	pop	{r7}
 801227c:	4770      	bx	lr

0801227e <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801227e:	b580      	push	{r7, lr}
 8012280:	b084      	sub	sp, #16
 8012282:	af00      	add	r7, sp, #0
 8012284:	6078      	str	r0, [r7, #4]
 8012286:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d002      	beq.n	8012294 <LinkedListRemove+0x16>
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d101      	bne.n	8012298 <LinkedListRemove+0x1a>
    {
        return false;
 8012294:	2300      	movs	r3, #0
 8012296:	e020      	b.n	80122da <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012298:	6839      	ldr	r1, [r7, #0]
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f7ff ffc6 	bl	801222c <LinkedListGetPrevious>
 80122a0:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	683a      	ldr	r2, [r7, #0]
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d103      	bne.n	80122b4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	681a      	ldr	r2, [r3, #0]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	683a      	ldr	r2, [r7, #0]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d102      	bne.n	80122c4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	68fa      	ldr	r2, [r7, #12]
 80122c2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d003      	beq.n	80122d2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	681a      	ldr	r2, [r3, #0]
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	2200      	movs	r2, #0
 80122d6:	601a      	str	r2, [r3, #0]

    return true;
 80122d8:	2301      	movs	r3, #1
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3710      	adds	r7, #16
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}

080122e2 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80122e2:	b480      	push	{r7}
 80122e4:	b083      	sub	sp, #12
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	4603      	mov	r3, r0
 80122ea:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80122ec:	79fb      	ldrb	r3, [r7, #7]
 80122ee:	2b05      	cmp	r3, #5
 80122f0:	d004      	beq.n	80122fc <IsSticky+0x1a>
 80122f2:	2b05      	cmp	r3, #5
 80122f4:	db04      	blt.n	8012300 <IsSticky+0x1e>
 80122f6:	3b08      	subs	r3, #8
 80122f8:	2b02      	cmp	r3, #2
 80122fa:	d801      	bhi.n	8012300 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 80122fc:	2301      	movs	r3, #1
 80122fe:	e000      	b.n	8012302 <IsSticky+0x20>
        default:
            return false;
 8012300:	2300      	movs	r3, #0
    }
}
 8012302:	4618      	mov	r0, r3
 8012304:	370c      	adds	r7, #12
 8012306:	46bd      	mov	sp, r7
 8012308:	bc80      	pop	{r7}
 801230a:	4770      	bx	lr

0801230c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 801230c:	b580      	push	{r7, lr}
 801230e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012310:	22fc      	movs	r2, #252	; 0xfc
 8012312:	2100      	movs	r1, #0
 8012314:	4804      	ldr	r0, [pc, #16]	; (8012328 <LoRaMacCommandsInit+0x1c>)
 8012316:	f004 f8c9 	bl	80164ac <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801231a:	4803      	ldr	r0, [pc, #12]	; (8012328 <LoRaMacCommandsInit+0x1c>)
 801231c:	f7ff ff49 	bl	80121b2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012320:	2300      	movs	r3, #0
}
 8012322:	4618      	mov	r0, r3
 8012324:	bd80      	pop	{r7, pc}
 8012326:	bf00      	nop
 8012328:	20000cb4 	.word	0x20000cb4

0801232c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b086      	sub	sp, #24
 8012330:	af00      	add	r7, sp, #0
 8012332:	4603      	mov	r3, r0
 8012334:	60b9      	str	r1, [r7, #8]
 8012336:	607a      	str	r2, [r7, #4]
 8012338:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d101      	bne.n	8012344 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012340:	2301      	movs	r3, #1
 8012342:	e033      	b.n	80123ac <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012344:	f7ff fefa 	bl	801213c <MallocNewMacCommandSlot>
 8012348:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d101      	bne.n	8012354 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012350:	2302      	movs	r3, #2
 8012352:	e02b      	b.n	80123ac <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012354:	6979      	ldr	r1, [r7, #20]
 8012356:	4817      	ldr	r0, [pc, #92]	; (80123b4 <LoRaMacCommandsAddCmd+0x88>)
 8012358:	f7ff ff40 	bl	80121dc <LinkedListAdd>
 801235c:	4603      	mov	r3, r0
 801235e:	f083 0301 	eor.w	r3, r3, #1
 8012362:	b2db      	uxtb	r3, r3
 8012364:	2b00      	cmp	r3, #0
 8012366:	d001      	beq.n	801236c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012368:	2305      	movs	r3, #5
 801236a:	e01f      	b.n	80123ac <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	7bfa      	ldrb	r2, [r7, #15]
 8012370:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	687a      	ldr	r2, [r7, #4]
 8012376:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	3305      	adds	r3, #5
 801237c:	687a      	ldr	r2, [r7, #4]
 801237e:	b292      	uxth	r2, r2
 8012380:	68b9      	ldr	r1, [r7, #8]
 8012382:	4618      	mov	r0, r3
 8012384:	f004 f857 	bl	8016436 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012388:	7bfb      	ldrb	r3, [r7, #15]
 801238a:	4618      	mov	r0, r3
 801238c:	f7ff ffa9 	bl	80122e2 <IsSticky>
 8012390:	4603      	mov	r3, r0
 8012392:	461a      	mov	r2, r3
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012398:	4b06      	ldr	r3, [pc, #24]	; (80123b4 <LoRaMacCommandsAddCmd+0x88>)
 801239a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	4413      	add	r3, r2
 80123a2:	3301      	adds	r3, #1
 80123a4:	4a03      	ldr	r2, [pc, #12]	; (80123b4 <LoRaMacCommandsAddCmd+0x88>)
 80123a6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80123aa:	2300      	movs	r3, #0
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3718      	adds	r7, #24
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	20000cb4 	.word	0x20000cb4

080123b8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d101      	bne.n	80123ca <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80123c6:	2301      	movs	r3, #1
 80123c8:	e021      	b.n	801240e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80123ca:	6879      	ldr	r1, [r7, #4]
 80123cc:	4812      	ldr	r0, [pc, #72]	; (8012418 <LoRaMacCommandsRemoveCmd+0x60>)
 80123ce:	f7ff ff56 	bl	801227e <LinkedListRemove>
 80123d2:	4603      	mov	r3, r0
 80123d4:	f083 0301 	eor.w	r3, r3, #1
 80123d8:	b2db      	uxtb	r3, r3
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d001      	beq.n	80123e2 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80123de:	2303      	movs	r3, #3
 80123e0:	e015      	b.n	801240e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80123e2:	4b0d      	ldr	r3, [pc, #52]	; (8012418 <LoRaMacCommandsRemoveCmd+0x60>)
 80123e4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	689b      	ldr	r3, [r3, #8]
 80123ec:	1ad3      	subs	r3, r2, r3
 80123ee:	3b01      	subs	r3, #1
 80123f0:	4a09      	ldr	r2, [pc, #36]	; (8012418 <LoRaMacCommandsRemoveCmd+0x60>)
 80123f2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f7ff fec8 	bl	801218c <FreeMacCommandSlot>
 80123fc:	4603      	mov	r3, r0
 80123fe:	f083 0301 	eor.w	r3, r3, #1
 8012402:	b2db      	uxtb	r3, r3
 8012404:	2b00      	cmp	r3, #0
 8012406:	d001      	beq.n	801240c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012408:	2305      	movs	r3, #5
 801240a:	e000      	b.n	801240e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801240c:	2300      	movs	r3, #0
}
 801240e:	4618      	mov	r0, r3
 8012410:	3708      	adds	r7, #8
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	20000cb4 	.word	0x20000cb4

0801241c <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012422:	4b0f      	ldr	r3, [pc, #60]	; (8012460 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012428:	e012      	b.n	8012450 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	7b1b      	ldrb	r3, [r3, #12]
 801242e:	f083 0301 	eor.w	r3, r3, #1
 8012432:	b2db      	uxtb	r3, r3
 8012434:	2b00      	cmp	r3, #0
 8012436:	d008      	beq.n	801244a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f7ff ffba 	bl	80123b8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	607b      	str	r3, [r7, #4]
 8012448:	e002      	b.n	8012450 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d1e9      	bne.n	801242a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012456:	2300      	movs	r3, #0
}
 8012458:	4618      	mov	r0, r3
 801245a:	3708      	adds	r7, #8
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}
 8012460:	20000cb4 	.word	0x20000cb4

08012464 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801246a:	4b0e      	ldr	r3, [pc, #56]	; (80124a4 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012470:	e00f      	b.n	8012492 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	791b      	ldrb	r3, [r3, #4]
 801247c:	4618      	mov	r0, r3
 801247e:	f7ff ff30 	bl	80122e2 <IsSticky>
 8012482:	4603      	mov	r3, r0
 8012484:	2b00      	cmp	r3, #0
 8012486:	d002      	beq.n	801248e <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f7ff ff95 	bl	80123b8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d1ec      	bne.n	8012472 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012498:	2300      	movs	r3, #0
}
 801249a:	4618      	mov	r0, r3
 801249c:	3708      	adds	r7, #8
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	20000cb4 	.word	0x20000cb4

080124a8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80124a8:	b480      	push	{r7}
 80124aa:	b083      	sub	sp, #12
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d101      	bne.n	80124ba <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80124b6:	2301      	movs	r3, #1
 80124b8:	e005      	b.n	80124c6 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80124ba:	4b05      	ldr	r3, [pc, #20]	; (80124d0 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80124bc:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80124c4:	2300      	movs	r3, #0
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	370c      	adds	r7, #12
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bc80      	pop	{r7}
 80124ce:	4770      	bx	lr
 80124d0:	20000cb4 	.word	0x20000cb4

080124d4 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b088      	sub	sp, #32
 80124d8:	af00      	add	r7, sp, #0
 80124da:	60f8      	str	r0, [r7, #12]
 80124dc:	60b9      	str	r1, [r7, #8]
 80124de:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80124e0:	4b25      	ldr	r3, [pc, #148]	; (8012578 <LoRaMacCommandsSerializeCmds+0xa4>)
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80124e6:	2300      	movs	r3, #0
 80124e8:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d002      	beq.n	80124f6 <LoRaMacCommandsSerializeCmds+0x22>
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d126      	bne.n	8012544 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80124f6:	2301      	movs	r3, #1
 80124f8:	e039      	b.n	801256e <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80124fa:	7efb      	ldrb	r3, [r7, #27]
 80124fc:	68fa      	ldr	r2, [r7, #12]
 80124fe:	1ad2      	subs	r2, r2, r3
 8012500:	69fb      	ldr	r3, [r7, #28]
 8012502:	689b      	ldr	r3, [r3, #8]
 8012504:	3301      	adds	r3, #1
 8012506:	429a      	cmp	r2, r3
 8012508:	d320      	bcc.n	801254c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801250a:	7efb      	ldrb	r3, [r7, #27]
 801250c:	1c5a      	adds	r2, r3, #1
 801250e:	76fa      	strb	r2, [r7, #27]
 8012510:	461a      	mov	r2, r3
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	4413      	add	r3, r2
 8012516:	69fa      	ldr	r2, [r7, #28]
 8012518:	7912      	ldrb	r2, [r2, #4]
 801251a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801251c:	7efb      	ldrb	r3, [r7, #27]
 801251e:	687a      	ldr	r2, [r7, #4]
 8012520:	18d0      	adds	r0, r2, r3
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	1d59      	adds	r1, r3, #5
 8012526:	69fb      	ldr	r3, [r7, #28]
 8012528:	689b      	ldr	r3, [r3, #8]
 801252a:	b29b      	uxth	r3, r3
 801252c:	461a      	mov	r2, r3
 801252e:	f003 ff82 	bl	8016436 <memcpy1>
            itr += curElement->PayloadSize;
 8012532:	69fb      	ldr	r3, [r7, #28]
 8012534:	689b      	ldr	r3, [r3, #8]
 8012536:	b2da      	uxtb	r2, r3
 8012538:	7efb      	ldrb	r3, [r7, #27]
 801253a:	4413      	add	r3, r2
 801253c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801253e:	69fb      	ldr	r3, [r7, #28]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012544:	69fb      	ldr	r3, [r7, #28]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d1d7      	bne.n	80124fa <LoRaMacCommandsSerializeCmds+0x26>
 801254a:	e009      	b.n	8012560 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 801254c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801254e:	e007      	b.n	8012560 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012550:	69fb      	ldr	r3, [r7, #28]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012556:	69f8      	ldr	r0, [r7, #28]
 8012558:	f7ff ff2e 	bl	80123b8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d1f4      	bne.n	8012550 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012566:	68b8      	ldr	r0, [r7, #8]
 8012568:	f7ff ff9e 	bl	80124a8 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 801256c:	2300      	movs	r3, #0
}
 801256e:	4618      	mov	r0, r3
 8012570:	3720      	adds	r7, #32
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}
 8012576:	bf00      	nop
 8012578:	20000cb4 	.word	0x20000cb4

0801257c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 801257c:	b480      	push	{r7}
 801257e:	b085      	sub	sp, #20
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d101      	bne.n	801258e <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801258a:	2301      	movs	r3, #1
 801258c:	e016      	b.n	80125bc <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801258e:	4b0e      	ldr	r3, [pc, #56]	; (80125c8 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2200      	movs	r2, #0
 8012598:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801259a:	e00b      	b.n	80125b4 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	7b1b      	ldrb	r3, [r3, #12]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d004      	beq.n	80125ae <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2201      	movs	r2, #1
 80125a8:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80125aa:	2300      	movs	r3, #0
 80125ac:	e006      	b.n	80125bc <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d1f0      	bne.n	801259c <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80125ba:	2300      	movs	r3, #0
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3714      	adds	r7, #20
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bc80      	pop	{r7}
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop
 80125c8:	20000cb4 	.word	0x20000cb4

080125cc <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80125cc:	b480      	push	{r7}
 80125ce:	b085      	sub	sp, #20
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	4603      	mov	r3, r0
 80125d4:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80125d6:	2300      	movs	r3, #0
 80125d8:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80125da:	79fb      	ldrb	r3, [r7, #7]
 80125dc:	3b02      	subs	r3, #2
 80125de:	2b11      	cmp	r3, #17
 80125e0:	d850      	bhi.n	8012684 <LoRaMacCommandsGetCmdSize+0xb8>
 80125e2:	a201      	add	r2, pc, #4	; (adr r2, 80125e8 <LoRaMacCommandsGetCmdSize+0x1c>)
 80125e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125e8:	08012631 	.word	0x08012631
 80125ec:	08012637 	.word	0x08012637
 80125f0:	0801263d 	.word	0x0801263d
 80125f4:	08012643 	.word	0x08012643
 80125f8:	08012649 	.word	0x08012649
 80125fc:	0801264f 	.word	0x0801264f
 8012600:	08012655 	.word	0x08012655
 8012604:	0801265b 	.word	0x0801265b
 8012608:	08012661 	.word	0x08012661
 801260c:	08012685 	.word	0x08012685
 8012610:	08012685 	.word	0x08012685
 8012614:	08012667 	.word	0x08012667
 8012618:	08012685 	.word	0x08012685
 801261c:	08012685 	.word	0x08012685
 8012620:	0801266d 	.word	0x0801266d
 8012624:	08012673 	.word	0x08012673
 8012628:	08012679 	.word	0x08012679
 801262c:	0801267f 	.word	0x0801267f
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012630:	2303      	movs	r3, #3
 8012632:	73fb      	strb	r3, [r7, #15]
            break;
 8012634:	e027      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8012636:	2305      	movs	r3, #5
 8012638:	73fb      	strb	r3, [r7, #15]
            break;
 801263a:	e024      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 801263c:	2302      	movs	r3, #2
 801263e:	73fb      	strb	r3, [r7, #15]
            break;
 8012640:	e021      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8012642:	2305      	movs	r3, #5
 8012644:	73fb      	strb	r3, [r7, #15]
            break;
 8012646:	e01e      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012648:	2301      	movs	r3, #1
 801264a:	73fb      	strb	r3, [r7, #15]
            break;
 801264c:	e01b      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801264e:	2306      	movs	r3, #6
 8012650:	73fb      	strb	r3, [r7, #15]
            break;
 8012652:	e018      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012654:	2302      	movs	r3, #2
 8012656:	73fb      	strb	r3, [r7, #15]
            break;
 8012658:	e015      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801265a:	2302      	movs	r3, #2
 801265c:	73fb      	strb	r3, [r7, #15]
            break;
 801265e:	e012      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012660:	2305      	movs	r3, #5
 8012662:	73fb      	strb	r3, [r7, #15]
            break;
 8012664:	e00f      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012666:	2306      	movs	r3, #6
 8012668:	73fb      	strb	r3, [r7, #15]
            break;
 801266a:	e00c      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 801266c:	2301      	movs	r3, #1
 801266e:	73fb      	strb	r3, [r7, #15]
            break;
 8012670:	e009      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012672:	2305      	movs	r3, #5
 8012674:	73fb      	strb	r3, [r7, #15]
            break;
 8012676:	e006      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012678:	2304      	movs	r3, #4
 801267a:	73fb      	strb	r3, [r7, #15]
            break;
 801267c:	e003      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801267e:	2304      	movs	r3, #4
 8012680:	73fb      	strb	r3, [r7, #15]
            break;
 8012682:	e000      	b.n	8012686 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012684:	bf00      	nop
        }
    }
    return cidSize;
 8012686:	7bfb      	ldrb	r3, [r7, #15]
}
 8012688:	4618      	mov	r0, r3
 801268a:	3714      	adds	r7, #20
 801268c:	46bd      	mov	sp, r7
 801268e:	bc80      	pop	{r7}
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop

08012694 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	4a07      	ldr	r2, [pc, #28]	; (80126bc <IncreaseBufferPointer+0x28>)
 80126a0:	4293      	cmp	r3, r2
 80126a2:	d102      	bne.n	80126aa <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80126a4:	4b06      	ldr	r3, [pc, #24]	; (80126c0 <IncreaseBufferPointer+0x2c>)
 80126a6:	607b      	str	r3, [r7, #4]
 80126a8:	e002      	b.n	80126b0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	3304      	adds	r3, #4
 80126ae:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80126b0:	687b      	ldr	r3, [r7, #4]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	370c      	adds	r7, #12
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bc80      	pop	{r7}
 80126ba:	4770      	bx	lr
 80126bc:	20000dcc 	.word	0x20000dcc
 80126c0:	20000dbc 	.word	0x20000dbc

080126c4 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80126c4:	b480      	push	{r7}
 80126c6:	b083      	sub	sp, #12
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	4603      	mov	r3, r0
 80126cc:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80126ce:	79fb      	ldrb	r3, [r7, #7]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d101      	bne.n	80126d8 <IsListEmpty+0x14>
    {
        return true;
 80126d4:	2301      	movs	r3, #1
 80126d6:	e000      	b.n	80126da <IsListEmpty+0x16>
    }
    return false;
 80126d8:	2300      	movs	r3, #0
}
 80126da:	4618      	mov	r0, r3
 80126dc:	370c      	adds	r7, #12
 80126de:	46bd      	mov	sp, r7
 80126e0:	bc80      	pop	{r7}
 80126e2:	4770      	bx	lr

080126e4 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80126e4:	b480      	push	{r7}
 80126e6:	b083      	sub	sp, #12
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	4603      	mov	r3, r0
 80126ec:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80126ee:	79fb      	ldrb	r3, [r7, #7]
 80126f0:	2b04      	cmp	r3, #4
 80126f2:	d901      	bls.n	80126f8 <IsListFull+0x14>
    {
        return true;
 80126f4:	2301      	movs	r3, #1
 80126f6:	e000      	b.n	80126fa <IsListFull+0x16>
    }
    return false;
 80126f8:	2300      	movs	r3, #0
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	370c      	adds	r7, #12
 80126fe:	46bd      	mov	sp, r7
 8012700:	bc80      	pop	{r7}
 8012702:	4770      	bx	lr

08012704 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b086      	sub	sp, #24
 8012708:	af00      	add	r7, sp, #0
 801270a:	4603      	mov	r3, r0
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	607a      	str	r2, [r7, #4]
 8012710:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012716:	4b13      	ldr	r3, [pc, #76]	; (8012764 <GetElement+0x60>)
 8012718:	f893 3020 	ldrb.w	r3, [r3, #32]
 801271c:	4618      	mov	r0, r3
 801271e:	f7ff ffd1 	bl	80126c4 <IsListEmpty>
 8012722:	4603      	mov	r3, r0
 8012724:	2b00      	cmp	r3, #0
 8012726:	d001      	beq.n	801272c <GetElement+0x28>
    {
        return NULL;
 8012728:	2300      	movs	r3, #0
 801272a:	e017      	b.n	801275c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801272c:	2300      	movs	r3, #0
 801272e:	74fb      	strb	r3, [r7, #19]
 8012730:	e00d      	b.n	801274e <GetElement+0x4a>
    {
        if( element->Request == request )
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	7bfa      	ldrb	r2, [r7, #15]
 8012738:	429a      	cmp	r2, r3
 801273a:	d101      	bne.n	8012740 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	e00d      	b.n	801275c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012740:	6978      	ldr	r0, [r7, #20]
 8012742:	f7ff ffa7 	bl	8012694 <IncreaseBufferPointer>
 8012746:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012748:	7cfb      	ldrb	r3, [r7, #19]
 801274a:	3301      	adds	r3, #1
 801274c:	74fb      	strb	r3, [r7, #19]
 801274e:	4b05      	ldr	r3, [pc, #20]	; (8012764 <GetElement+0x60>)
 8012750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012754:	7cfa      	ldrb	r2, [r7, #19]
 8012756:	429a      	cmp	r2, r3
 8012758:	d3eb      	bcc.n	8012732 <GetElement+0x2e>
    }

    return NULL;
 801275a:	2300      	movs	r3, #0
}
 801275c:	4618      	mov	r0, r3
 801275e:	3718      	adds	r7, #24
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}
 8012764:	20000db0 	.word	0x20000db0

08012768 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012770:	4a0c      	ldr	r2, [pc, #48]	; (80127a4 <LoRaMacConfirmQueueInit+0x3c>)
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012776:	4b0b      	ldr	r3, [pc, #44]	; (80127a4 <LoRaMacConfirmQueueInit+0x3c>)
 8012778:	2200      	movs	r2, #0
 801277a:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801277e:	4b09      	ldr	r3, [pc, #36]	; (80127a4 <LoRaMacConfirmQueueInit+0x3c>)
 8012780:	4a09      	ldr	r2, [pc, #36]	; (80127a8 <LoRaMacConfirmQueueInit+0x40>)
 8012782:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012784:	4b07      	ldr	r3, [pc, #28]	; (80127a4 <LoRaMacConfirmQueueInit+0x3c>)
 8012786:	4a08      	ldr	r2, [pc, #32]	; (80127a8 <LoRaMacConfirmQueueInit+0x40>)
 8012788:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801278a:	2214      	movs	r2, #20
 801278c:	21ff      	movs	r1, #255	; 0xff
 801278e:	4806      	ldr	r0, [pc, #24]	; (80127a8 <LoRaMacConfirmQueueInit+0x40>)
 8012790:	f003 fe8c 	bl	80164ac <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012794:	4b03      	ldr	r3, [pc, #12]	; (80127a4 <LoRaMacConfirmQueueInit+0x3c>)
 8012796:	2201      	movs	r2, #1
 8012798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 801279c:	bf00      	nop
 801279e:	3708      	adds	r7, #8
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}
 80127a4:	20000db0 	.word	0x20000db0
 80127a8:	20000dbc 	.word	0x20000dbc

080127ac <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80127b4:	4b19      	ldr	r3, [pc, #100]	; (801281c <LoRaMacConfirmQueueAdd+0x70>)
 80127b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7ff ff92 	bl	80126e4 <IsListFull>
 80127c0:	4603      	mov	r3, r0
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d001      	beq.n	80127ca <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80127c6:	2300      	movs	r3, #0
 80127c8:	e023      	b.n	8012812 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80127ca:	4b14      	ldr	r3, [pc, #80]	; (801281c <LoRaMacConfirmQueueAdd+0x70>)
 80127cc:	689b      	ldr	r3, [r3, #8]
 80127ce:	687a      	ldr	r2, [r7, #4]
 80127d0:	7812      	ldrb	r2, [r2, #0]
 80127d2:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80127d4:	4b11      	ldr	r3, [pc, #68]	; (801281c <LoRaMacConfirmQueueAdd+0x70>)
 80127d6:	689b      	ldr	r3, [r3, #8]
 80127d8:	687a      	ldr	r2, [r7, #4]
 80127da:	7852      	ldrb	r2, [r2, #1]
 80127dc:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80127de:	4b0f      	ldr	r3, [pc, #60]	; (801281c <LoRaMacConfirmQueueAdd+0x70>)
 80127e0:	689b      	ldr	r3, [r3, #8]
 80127e2:	687a      	ldr	r2, [r7, #4]
 80127e4:	78d2      	ldrb	r2, [r2, #3]
 80127e6:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80127e8:	4b0c      	ldr	r3, [pc, #48]	; (801281c <LoRaMacConfirmQueueAdd+0x70>)
 80127ea:	689b      	ldr	r3, [r3, #8]
 80127ec:	2200      	movs	r2, #0
 80127ee:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80127f0:	4b0a      	ldr	r3, [pc, #40]	; (801281c <LoRaMacConfirmQueueAdd+0x70>)
 80127f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127f6:	3301      	adds	r3, #1
 80127f8:	b2da      	uxtb	r2, r3
 80127fa:	4b08      	ldr	r3, [pc, #32]	; (801281c <LoRaMacConfirmQueueAdd+0x70>)
 80127fc:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012800:	4b06      	ldr	r3, [pc, #24]	; (801281c <LoRaMacConfirmQueueAdd+0x70>)
 8012802:	689b      	ldr	r3, [r3, #8]
 8012804:	4618      	mov	r0, r3
 8012806:	f7ff ff45 	bl	8012694 <IncreaseBufferPointer>
 801280a:	4603      	mov	r3, r0
 801280c:	4a03      	ldr	r2, [pc, #12]	; (801281c <LoRaMacConfirmQueueAdd+0x70>)
 801280e:	6093      	str	r3, [r2, #8]

    return true;
 8012810:	2301      	movs	r3, #1
}
 8012812:	4618      	mov	r0, r3
 8012814:	3708      	adds	r7, #8
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
 801281a:	bf00      	nop
 801281c:	20000db0 	.word	0x20000db0

08012820 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012820:	b580      	push	{r7, lr}
 8012822:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012824:	4b0e      	ldr	r3, [pc, #56]	; (8012860 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012826:	f893 3020 	ldrb.w	r3, [r3, #32]
 801282a:	4618      	mov	r0, r3
 801282c:	f7ff ff4a 	bl	80126c4 <IsListEmpty>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d001      	beq.n	801283a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012836:	2300      	movs	r3, #0
 8012838:	e010      	b.n	801285c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801283a:	4b09      	ldr	r3, [pc, #36]	; (8012860 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801283c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012840:	3b01      	subs	r3, #1
 8012842:	b2da      	uxtb	r2, r3
 8012844:	4b06      	ldr	r3, [pc, #24]	; (8012860 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012846:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801284a:	4b05      	ldr	r3, [pc, #20]	; (8012860 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801284c:	685b      	ldr	r3, [r3, #4]
 801284e:	4618      	mov	r0, r3
 8012850:	f7ff ff20 	bl	8012694 <IncreaseBufferPointer>
 8012854:	4603      	mov	r3, r0
 8012856:	4a02      	ldr	r2, [pc, #8]	; (8012860 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012858:	6053      	str	r3, [r2, #4]

    return true;
 801285a:	2301      	movs	r3, #1
}
 801285c:	4618      	mov	r0, r3
 801285e:	bd80      	pop	{r7, pc}
 8012860:	20000db0 	.word	0x20000db0

08012864 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	4603      	mov	r3, r0
 801286c:	460a      	mov	r2, r1
 801286e:	71fb      	strb	r3, [r7, #7]
 8012870:	4613      	mov	r3, r2
 8012872:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012874:	2300      	movs	r3, #0
 8012876:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012878:	4b10      	ldr	r3, [pc, #64]	; (80128bc <LoRaMacConfirmQueueSetStatus+0x58>)
 801287a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801287e:	4618      	mov	r0, r3
 8012880:	f7ff ff20 	bl	80126c4 <IsListEmpty>
 8012884:	4603      	mov	r3, r0
 8012886:	f083 0301 	eor.w	r3, r3, #1
 801288a:	b2db      	uxtb	r3, r3
 801288c:	2b00      	cmp	r3, #0
 801288e:	d011      	beq.n	80128b4 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012890:	4b0a      	ldr	r3, [pc, #40]	; (80128bc <LoRaMacConfirmQueueSetStatus+0x58>)
 8012892:	6859      	ldr	r1, [r3, #4]
 8012894:	4b09      	ldr	r3, [pc, #36]	; (80128bc <LoRaMacConfirmQueueSetStatus+0x58>)
 8012896:	689a      	ldr	r2, [r3, #8]
 8012898:	79bb      	ldrb	r3, [r7, #6]
 801289a:	4618      	mov	r0, r3
 801289c:	f7ff ff32 	bl	8012704 <GetElement>
 80128a0:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d005      	beq.n	80128b4 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	79fa      	ldrb	r2, [r7, #7]
 80128ac:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	2201      	movs	r2, #1
 80128b2:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80128b4:	bf00      	nop
 80128b6:	3710      	adds	r7, #16
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}
 80128bc:	20000db0 	.word	0x20000db0

080128c0 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b084      	sub	sp, #16
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	4603      	mov	r3, r0
 80128c8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80128ca:	2300      	movs	r3, #0
 80128cc:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80128ce:	4b10      	ldr	r3, [pc, #64]	; (8012910 <LoRaMacConfirmQueueGetStatus+0x50>)
 80128d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128d4:	4618      	mov	r0, r3
 80128d6:	f7ff fef5 	bl	80126c4 <IsListEmpty>
 80128da:	4603      	mov	r3, r0
 80128dc:	f083 0301 	eor.w	r3, r3, #1
 80128e0:	b2db      	uxtb	r3, r3
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d00e      	beq.n	8012904 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80128e6:	4b0a      	ldr	r3, [pc, #40]	; (8012910 <LoRaMacConfirmQueueGetStatus+0x50>)
 80128e8:	6859      	ldr	r1, [r3, #4]
 80128ea:	4b09      	ldr	r3, [pc, #36]	; (8012910 <LoRaMacConfirmQueueGetStatus+0x50>)
 80128ec:	689a      	ldr	r2, [r3, #8]
 80128ee:	79fb      	ldrb	r3, [r7, #7]
 80128f0:	4618      	mov	r0, r3
 80128f2:	f7ff ff07 	bl	8012704 <GetElement>
 80128f6:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d002      	beq.n	8012904 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	785b      	ldrb	r3, [r3, #1]
 8012902:	e000      	b.n	8012906 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012904:	2301      	movs	r3, #1
}
 8012906:	4618      	mov	r0, r3
 8012908:	3710      	adds	r7, #16
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	20000db0 	.word	0x20000db0

08012914 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b084      	sub	sp, #16
 8012918:	af00      	add	r7, sp, #0
 801291a:	4603      	mov	r3, r0
 801291c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801291e:	4b16      	ldr	r3, [pc, #88]	; (8012978 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012924:	4a14      	ldr	r2, [pc, #80]	; (8012978 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012926:	79fb      	ldrb	r3, [r7, #7]
 8012928:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801292c:	4b12      	ldr	r3, [pc, #72]	; (8012978 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801292e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012932:	4618      	mov	r0, r3
 8012934:	f7ff fec6 	bl	80126c4 <IsListEmpty>
 8012938:	4603      	mov	r3, r0
 801293a:	f083 0301 	eor.w	r3, r3, #1
 801293e:	b2db      	uxtb	r3, r3
 8012940:	2b00      	cmp	r3, #0
 8012942:	d015      	beq.n	8012970 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	79fa      	ldrb	r2, [r7, #7]
 8012948:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	78db      	ldrb	r3, [r3, #3]
 801294e:	f083 0301 	eor.w	r3, r3, #1
 8012952:	b2db      	uxtb	r3, r3
 8012954:	2b00      	cmp	r3, #0
 8012956:	d002      	beq.n	801295e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	2201      	movs	r2, #1
 801295c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801295e:	68f8      	ldr	r0, [r7, #12]
 8012960:	f7ff fe98 	bl	8012694 <IncreaseBufferPointer>
 8012964:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012966:	4b04      	ldr	r3, [pc, #16]	; (8012978 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012968:	689b      	ldr	r3, [r3, #8]
 801296a:	68fa      	ldr	r2, [r7, #12]
 801296c:	429a      	cmp	r2, r3
 801296e:	d1e9      	bne.n	8012944 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012970:	bf00      	nop
 8012972:	3710      	adds	r7, #16
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}
 8012978:	20000db0 	.word	0x20000db0

0801297c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	4603      	mov	r3, r0
 8012984:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012986:	4b09      	ldr	r3, [pc, #36]	; (80129ac <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012988:	6859      	ldr	r1, [r3, #4]
 801298a:	4b08      	ldr	r3, [pc, #32]	; (80129ac <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801298c:	689a      	ldr	r2, [r3, #8]
 801298e:	79fb      	ldrb	r3, [r7, #7]
 8012990:	4618      	mov	r0, r3
 8012992:	f7ff feb7 	bl	8012704 <GetElement>
 8012996:	4603      	mov	r3, r0
 8012998:	2b00      	cmp	r3, #0
 801299a:	d001      	beq.n	80129a0 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 801299c:	2301      	movs	r3, #1
 801299e:	e000      	b.n	80129a2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80129a0:	2300      	movs	r3, #0
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	3708      	adds	r7, #8
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
 80129aa:	bf00      	nop
 80129ac:	20000db0 	.word	0x20000db0

080129b0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b084      	sub	sp, #16
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80129b8:	4b22      	ldr	r3, [pc, #136]	; (8012a44 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129be:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80129c0:	2300      	movs	r3, #0
 80129c2:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80129c4:	2300      	movs	r3, #0
 80129c6:	73fb      	strb	r3, [r7, #15]
 80129c8:	e032      	b.n	8012a30 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80129ca:	4b1e      	ldr	r3, [pc, #120]	; (8012a44 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	781a      	ldrb	r2, [r3, #0]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80129d4:	4b1b      	ldr	r3, [pc, #108]	; (8012a44 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	785a      	ldrb	r2, [r3, #1]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80129de:	4b19      	ldr	r3, [pc, #100]	; (8012a44 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129e0:	685b      	ldr	r3, [r3, #4]
 80129e2:	789b      	ldrb	r3, [r3, #2]
 80129e4:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80129e6:	7b7b      	ldrb	r3, [r7, #13]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d005      	beq.n	80129f8 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80129ec:	4b15      	ldr	r3, [pc, #84]	; (8012a44 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	689b      	ldr	r3, [r3, #8]
 80129f2:	6878      	ldr	r0, [r7, #4]
 80129f4:	4798      	blx	r3
 80129f6:	e00b      	b.n	8012a10 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80129f8:	4b12      	ldr	r3, [pc, #72]	; (8012a44 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129fa:	685b      	ldr	r3, [r3, #4]
 80129fc:	781b      	ldrb	r3, [r3, #0]
 80129fe:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012a00:	4b10      	ldr	r3, [pc, #64]	; (8012a44 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	785b      	ldrb	r3, [r3, #1]
 8012a06:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012a08:	4b0e      	ldr	r3, [pc, #56]	; (8012a44 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	78db      	ldrb	r3, [r3, #3]
 8012a0e:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012a10:	f7ff ff06 	bl	8012820 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012a14:	7b7b      	ldrb	r3, [r7, #13]
 8012a16:	f083 0301 	eor.w	r3, r3, #1
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d004      	beq.n	8012a2a <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012a20:	f107 0308 	add.w	r3, r7, #8
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7ff fec1 	bl	80127ac <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012a2a:	7bfb      	ldrb	r3, [r7, #15]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	73fb      	strb	r3, [r7, #15]
 8012a30:	7bfa      	ldrb	r2, [r7, #15]
 8012a32:	7bbb      	ldrb	r3, [r7, #14]
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d3c8      	bcc.n	80129ca <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8012a38:	bf00      	nop
 8012a3a:	bf00      	nop
 8012a3c:	3710      	adds	r7, #16
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	bf00      	nop
 8012a44:	20000db0 	.word	0x20000db0

08012a48 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012a48:	b480      	push	{r7}
 8012a4a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012a4c:	4b03      	ldr	r3, [pc, #12]	; (8012a5c <LoRaMacConfirmQueueGetCnt+0x14>)
 8012a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bc80      	pop	{r7}
 8012a58:	4770      	bx	lr
 8012a5a:	bf00      	nop
 8012a5c:	20000db0 	.word	0x20000db0

08012a60 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012a64:	4b06      	ldr	r3, [pc, #24]	; (8012a80 <LoRaMacConfirmQueueIsFull+0x20>)
 8012a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7ff fe3a 	bl	80126e4 <IsListFull>
 8012a70:	4603      	mov	r3, r0
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d001      	beq.n	8012a7a <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012a76:	2301      	movs	r3, #1
 8012a78:	e000      	b.n	8012a7c <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012a7a:	2300      	movs	r3, #0
    }
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	20000db0 	.word	0x20000db0

08012a84 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b08e      	sub	sp, #56	; 0x38
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	60f8      	str	r0, [r7, #12]
 8012a8c:	607b      	str	r3, [r7, #4]
 8012a8e:	460b      	mov	r3, r1
 8012a90:	817b      	strh	r3, [r7, #10]
 8012a92:	4613      	mov	r3, r2
 8012a94:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d101      	bne.n	8012aa0 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012a9c:	230a      	movs	r3, #10
 8012a9e:	e087      	b.n	8012bb0 <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8012aaa:	2300      	movs	r3, #0
 8012aac:	623b      	str	r3, [r7, #32]
 8012aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	601a      	str	r2, [r3, #0]
 8012ab6:	605a      	str	r2, [r3, #4]
 8012ab8:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012aba:	2300      	movs	r3, #0
 8012abc:	613b      	str	r3, [r7, #16]
 8012abe:	f107 0314 	add.w	r3, r7, #20
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	601a      	str	r2, [r3, #0]
 8012ac6:	605a      	str	r2, [r3, #4]
 8012ac8:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012aca:	2301      	movs	r3, #1
 8012acc:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012ace:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012ad2:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	b2db      	uxtb	r3, r3
 8012ad8:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	0a1b      	lsrs	r3, r3, #8
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	0c1b      	lsrs	r3, r3, #16
 8012ae6:	b2db      	uxtb	r3, r3
 8012ae8:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	0e1b      	lsrs	r3, r3, #24
 8012aee:	b2db      	uxtb	r3, r3
 8012af0:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012afa:	0a1b      	lsrs	r3, r3, #8
 8012afc:	b2db      	uxtb	r3, r3
 8012afe:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b02:	0c1b      	lsrs	r3, r3, #16
 8012b04:	b2db      	uxtb	r3, r3
 8012b06:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b0a:	0e1b      	lsrs	r3, r3, #24
 8012b0c:	b2db      	uxtb	r3, r3
 8012b0e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012b10:	e049      	b.n	8012ba6 <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8012b12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012b18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012b1a:	3301      	adds	r3, #1
 8012b1c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012b1e:	f107 0320 	add.w	r3, r7, #32
 8012b22:	7a7a      	ldrb	r2, [r7, #9]
 8012b24:	f107 0010 	add.w	r0, r7, #16
 8012b28:	2110      	movs	r1, #16
 8012b2a:	f7f9 f9fa 	bl	800bf22 <SecureElementAesEncrypt>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d001      	beq.n	8012b38 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012b34:	230f      	movs	r3, #15
 8012b36:	e03b      	b.n	8012bb0 <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012b38:	2300      	movs	r3, #0
 8012b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b3e:	e01f      	b.n	8012b80 <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012b40:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012b44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b48:	4413      	add	r3, r2
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	4413      	add	r3, r2
 8012b50:	7819      	ldrb	r1, [r3, #0]
 8012b52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b56:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012b5a:	4413      	add	r3, r2
 8012b5c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012b60:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012b64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b68:	4403      	add	r3, r0
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	4403      	add	r3, r0
 8012b70:	404a      	eors	r2, r1
 8012b72:	b2d2      	uxtb	r2, r2
 8012b74:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012b76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b84:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012b88:	2a10      	cmp	r2, #16
 8012b8a:	bfa8      	it	ge
 8012b8c:	2210      	movge	r2, #16
 8012b8e:	b212      	sxth	r2, r2
 8012b90:	4293      	cmp	r3, r2
 8012b92:	dbd5      	blt.n	8012b40 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012b94:	897b      	ldrh	r3, [r7, #10]
 8012b96:	3b10      	subs	r3, #16
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ba0:	3310      	adds	r3, #16
 8012ba2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012ba6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	dcb1      	bgt.n	8012b12 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012bae:	2300      	movs	r3, #0
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3738      	adds	r7, #56	; 0x38
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012bb8:	b490      	push	{r4, r7}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	4608      	mov	r0, r1
 8012bc2:	4611      	mov	r1, r2
 8012bc4:	461a      	mov	r2, r3
 8012bc6:	4623      	mov	r3, r4
 8012bc8:	80fb      	strh	r3, [r7, #6]
 8012bca:	4603      	mov	r3, r0
 8012bcc:	717b      	strb	r3, [r7, #5]
 8012bce:	460b      	mov	r3, r1
 8012bd0:	713b      	strb	r3, [r7, #4]
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012bd6:	69bb      	ldr	r3, [r7, #24]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d101      	bne.n	8012be0 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012bdc:	230a      	movs	r3, #10
 8012bde:	e04e      	b.n	8012c7e <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	2249      	movs	r2, #73	; 0x49
 8012be4:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012be6:	69bb      	ldr	r3, [r7, #24]
 8012be8:	3301      	adds	r3, #1
 8012bea:	2200      	movs	r2, #0
 8012bec:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012bee:	69bb      	ldr	r3, [r7, #24]
 8012bf0:	3302      	adds	r3, #2
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012bf6:	69bb      	ldr	r3, [r7, #24]
 8012bf8:	3303      	adds	r3, #3
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	3304      	adds	r3, #4
 8012c02:	2200      	movs	r2, #0
 8012c04:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012c06:	69bb      	ldr	r3, [r7, #24]
 8012c08:	3305      	adds	r3, #5
 8012c0a:	78fa      	ldrb	r2, [r7, #3]
 8012c0c:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012c0e:	69bb      	ldr	r3, [r7, #24]
 8012c10:	3306      	adds	r3, #6
 8012c12:	693a      	ldr	r2, [r7, #16]
 8012c14:	b2d2      	uxtb	r2, r2
 8012c16:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012c18:	693b      	ldr	r3, [r7, #16]
 8012c1a:	0a1a      	lsrs	r2, r3, #8
 8012c1c:	69bb      	ldr	r3, [r7, #24]
 8012c1e:	3307      	adds	r3, #7
 8012c20:	b2d2      	uxtb	r2, r2
 8012c22:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	0c1a      	lsrs	r2, r3, #16
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	3308      	adds	r3, #8
 8012c2c:	b2d2      	uxtb	r2, r2
 8012c2e:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	0e1a      	lsrs	r2, r3, #24
 8012c34:	69bb      	ldr	r3, [r7, #24]
 8012c36:	3309      	adds	r3, #9
 8012c38:	b2d2      	uxtb	r2, r2
 8012c3a:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012c3c:	69bb      	ldr	r3, [r7, #24]
 8012c3e:	330a      	adds	r3, #10
 8012c40:	697a      	ldr	r2, [r7, #20]
 8012c42:	b2d2      	uxtb	r2, r2
 8012c44:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	0a1a      	lsrs	r2, r3, #8
 8012c4a:	69bb      	ldr	r3, [r7, #24]
 8012c4c:	330b      	adds	r3, #11
 8012c4e:	b2d2      	uxtb	r2, r2
 8012c50:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	0c1a      	lsrs	r2, r3, #16
 8012c56:	69bb      	ldr	r3, [r7, #24]
 8012c58:	330c      	adds	r3, #12
 8012c5a:	b2d2      	uxtb	r2, r2
 8012c5c:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	0e1a      	lsrs	r2, r3, #24
 8012c62:	69bb      	ldr	r3, [r7, #24]
 8012c64:	330d      	adds	r3, #13
 8012c66:	b2d2      	uxtb	r2, r2
 8012c68:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012c6a:	69bb      	ldr	r3, [r7, #24]
 8012c6c:	330e      	adds	r3, #14
 8012c6e:	2200      	movs	r2, #0
 8012c70:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012c72:	69bb      	ldr	r3, [r7, #24]
 8012c74:	330f      	adds	r3, #15
 8012c76:	88fa      	ldrh	r2, [r7, #6]
 8012c78:	b2d2      	uxtb	r2, r2
 8012c7a:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012c7c:	2300      	movs	r3, #0
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3708      	adds	r7, #8
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bc90      	pop	{r4, r7}
 8012c86:	4770      	bx	lr

08012c88 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012c88:	b590      	push	{r4, r7, lr}
 8012c8a:	b08b      	sub	sp, #44	; 0x2c
 8012c8c:	af04      	add	r7, sp, #16
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	4608      	mov	r0, r1
 8012c92:	4611      	mov	r1, r2
 8012c94:	461a      	mov	r2, r3
 8012c96:	4603      	mov	r3, r0
 8012c98:	807b      	strh	r3, [r7, #2]
 8012c9a:	460b      	mov	r3, r1
 8012c9c:	707b      	strb	r3, [r7, #1]
 8012c9e:	4613      	mov	r3, r2
 8012ca0:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d002      	beq.n	8012cae <ComputeCmacB0+0x26>
 8012ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d101      	bne.n	8012cb2 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012cae:	230a      	movs	r3, #10
 8012cb0:	e024      	b.n	8012cfc <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012cb2:	887b      	ldrh	r3, [r7, #2]
 8012cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012cb8:	d901      	bls.n	8012cbe <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012cba:	230e      	movs	r3, #14
 8012cbc:	e01e      	b.n	8012cfc <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012cbe:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8012cc2:	783a      	ldrb	r2, [r7, #0]
 8012cc4:	7879      	ldrb	r1, [r7, #1]
 8012cc6:	8878      	ldrh	r0, [r7, #2]
 8012cc8:	f107 0308 	add.w	r3, r7, #8
 8012ccc:	9302      	str	r3, [sp, #8]
 8012cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd0:	9301      	str	r3, [sp, #4]
 8012cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd4:	9300      	str	r3, [sp, #0]
 8012cd6:	4623      	mov	r3, r4
 8012cd8:	f7ff ff6e 	bl	8012bb8 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012cdc:	7879      	ldrb	r1, [r7, #1]
 8012cde:	887a      	ldrh	r2, [r7, #2]
 8012ce0:	f107 0008 	add.w	r0, r7, #8
 8012ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ce6:	9300      	str	r3, [sp, #0]
 8012ce8:	460b      	mov	r3, r1
 8012cea:	6879      	ldr	r1, [r7, #4]
 8012cec:	f7f9 f8cc 	bl	800be88 <SecureElementComputeAesCmac>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d001      	beq.n	8012cfa <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012cf6:	230f      	movs	r3, #15
 8012cf8:	e000      	b.n	8012cfc <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012cfa:	2300      	movs	r3, #0
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	371c      	adds	r7, #28
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd90      	pop	{r4, r7, pc}

08012d04 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012d04:	b590      	push	{r4, r7, lr}
 8012d06:	b0cd      	sub	sp, #308	; 0x134
 8012d08:	af04      	add	r7, sp, #16
 8012d0a:	1d3c      	adds	r4, r7, #4
 8012d0c:	6020      	str	r0, [r4, #0]
 8012d0e:	460c      	mov	r4, r1
 8012d10:	4610      	mov	r0, r2
 8012d12:	4619      	mov	r1, r3
 8012d14:	1cbb      	adds	r3, r7, #2
 8012d16:	4622      	mov	r2, r4
 8012d18:	801a      	strh	r2, [r3, #0]
 8012d1a:	1c7b      	adds	r3, r7, #1
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	701a      	strb	r2, [r3, #0]
 8012d20:	463b      	mov	r3, r7
 8012d22:	460a      	mov	r2, r1
 8012d24:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012d26:	1d3b      	adds	r3, r7, #4
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d101      	bne.n	8012d32 <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012d2e:	230a      	movs	r3, #10
 8012d30:	e04b      	b.n	8012dca <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012d32:	1cbb      	adds	r3, r7, #2
 8012d34:	881b      	ldrh	r3, [r3, #0]
 8012d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d3a:	d901      	bls.n	8012d40 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012d3c:	230e      	movs	r3, #14
 8012d3e:	e044      	b.n	8012dca <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012d40:	f107 030c 	add.w	r3, r7, #12
 8012d44:	f44f 7288 	mov.w	r2, #272	; 0x110
 8012d48:	2100      	movs	r1, #0
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f003 fbae 	bl	80164ac <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012d50:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8012d54:	463b      	mov	r3, r7
 8012d56:	781a      	ldrb	r2, [r3, #0]
 8012d58:	1c7b      	adds	r3, r7, #1
 8012d5a:	7819      	ldrb	r1, [r3, #0]
 8012d5c:	1cbb      	adds	r3, r7, #2
 8012d5e:	8818      	ldrh	r0, [r3, #0]
 8012d60:	f107 030c 	add.w	r3, r7, #12
 8012d64:	9302      	str	r3, [sp, #8]
 8012d66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012d6a:	9301      	str	r3, [sp, #4]
 8012d6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d70:	9300      	str	r3, [sp, #0]
 8012d72:	4623      	mov	r3, r4
 8012d74:	f7ff ff20 	bl	8012bb8 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8012d78:	f107 030c 	add.w	r3, r7, #12
 8012d7c:	3310      	adds	r3, #16
 8012d7e:	1cba      	adds	r2, r7, #2
 8012d80:	8812      	ldrh	r2, [r2, #0]
 8012d82:	1d39      	adds	r1, r7, #4
 8012d84:	6809      	ldr	r1, [r1, #0]
 8012d86:	4618      	mov	r0, r3
 8012d88:	f003 fb55 	bl	8016436 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012d8c:	2306      	movs	r3, #6
 8012d8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8012d92:	1cbb      	adds	r3, r7, #2
 8012d94:	881b      	ldrh	r3, [r3, #0]
 8012d96:	3310      	adds	r3, #16
 8012d98:	b299      	uxth	r1, r3
 8012d9a:	1c7b      	adds	r3, r7, #1
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	f107 000c 	add.w	r0, r7, #12
 8012da2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8012da6:	f7f9 f88d 	bl	800bec4 <SecureElementVerifyAesCmac>
 8012daa:	4603      	mov	r3, r0
 8012dac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012db0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d101      	bne.n	8012dbc <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8012db8:	2300      	movs	r3, #0
 8012dba:	e006      	b.n	8012dca <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8012dbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012dc0:	2b01      	cmp	r3, #1
 8012dc2:	d101      	bne.n	8012dc8 <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	e000      	b.n	8012dca <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012dc8:	230f      	movs	r3, #15
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd90      	pop	{r4, r7, pc}

08012dd4 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b085      	sub	sp, #20
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	4603      	mov	r3, r0
 8012ddc:	6039      	str	r1, [r7, #0]
 8012dde:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012de0:	2300      	movs	r3, #0
 8012de2:	73fb      	strb	r3, [r7, #15]
 8012de4:	e011      	b.n	8012e0a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8012de6:	7bfb      	ldrb	r3, [r7, #15]
 8012de8:	4a0c      	ldr	r2, [pc, #48]	; (8012e1c <GetKeyAddrItem+0x48>)
 8012dea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8012dee:	79fa      	ldrb	r2, [r7, #7]
 8012df0:	429a      	cmp	r2, r3
 8012df2:	d107      	bne.n	8012e04 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8012df4:	7bfb      	ldrb	r3, [r7, #15]
 8012df6:	009b      	lsls	r3, r3, #2
 8012df8:	4a08      	ldr	r2, [pc, #32]	; (8012e1c <GetKeyAddrItem+0x48>)
 8012dfa:	441a      	add	r2, r3
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012e00:	2300      	movs	r3, #0
 8012e02:	e006      	b.n	8012e12 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012e04:	7bfb      	ldrb	r3, [r7, #15]
 8012e06:	3301      	adds	r3, #1
 8012e08:	73fb      	strb	r3, [r7, #15]
 8012e0a:	7bfb      	ldrb	r3, [r7, #15]
 8012e0c:	2b01      	cmp	r3, #1
 8012e0e:	d9ea      	bls.n	8012de6 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012e10:	230c      	movs	r3, #12
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	3714      	adds	r7, #20
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bc80      	pop	{r7}
 8012e1a:	4770      	bx	lr
 8012e1c:	20000114 	.word	0x20000114

08012e20 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b088      	sub	sp, #32
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	60b9      	str	r1, [r7, #8]
 8012e28:	607a      	str	r2, [r7, #4]
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	73fb      	strb	r3, [r7, #15]
 8012e30:	4613      	mov	r3, r2
 8012e32:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012e34:	2300      	movs	r3, #0
 8012e36:	613b      	str	r3, [r7, #16]
 8012e38:	f107 0314 	add.w	r3, r7, #20
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	601a      	str	r2, [r3, #0]
 8012e40:	605a      	str	r2, [r3, #4]
 8012e42:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8012e44:	7bfb      	ldrb	r3, [r7, #15]
 8012e46:	2b02      	cmp	r3, #2
 8012e48:	d002      	beq.n	8012e50 <DeriveSessionKey10x+0x30>
 8012e4a:	2b03      	cmp	r3, #3
 8012e4c:	d003      	beq.n	8012e56 <DeriveSessionKey10x+0x36>
 8012e4e:	e005      	b.n	8012e5c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8012e50:	2301      	movs	r3, #1
 8012e52:	743b      	strb	r3, [r7, #16]
            break;
 8012e54:	e004      	b.n	8012e60 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8012e56:	2302      	movs	r3, #2
 8012e58:	743b      	strb	r3, [r7, #16]
            break;
 8012e5a:	e001      	b.n	8012e60 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012e5c:	230b      	movs	r3, #11
 8012e5e:	e02a      	b.n	8012eb6 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	0a1b      	lsrs	r3, r3, #8
 8012e6a:	b2db      	uxtb	r3, r3
 8012e6c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	0c1b      	lsrs	r3, r3, #16
 8012e72:	b2db      	uxtb	r3, r3
 8012e74:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	b2db      	uxtb	r3, r3
 8012e7a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	0a1b      	lsrs	r3, r3, #8
 8012e80:	b2db      	uxtb	r3, r3
 8012e82:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	0c1b      	lsrs	r3, r3, #16
 8012e88:	b2db      	uxtb	r3, r3
 8012e8a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012e8c:	89bb      	ldrh	r3, [r7, #12]
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012e92:	89bb      	ldrh	r3, [r7, #12]
 8012e94:	0a1b      	lsrs	r3, r3, #8
 8012e96:	b29b      	uxth	r3, r3
 8012e98:	b2db      	uxtb	r3, r3
 8012e9a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012e9c:	7bfa      	ldrb	r2, [r7, #15]
 8012e9e:	f107 0310 	add.w	r3, r7, #16
 8012ea2:	2101      	movs	r1, #1
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7f9 f89a 	bl	800bfde <SecureElementDeriveAndStoreKey>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d001      	beq.n	8012eb4 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012eb0:	230f      	movs	r3, #15
 8012eb2:	e000      	b.n	8012eb6 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012eb4:	2300      	movs	r3, #0
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3720      	adds	r7, #32
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
	...

08012ec0 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	6039      	str	r1, [r7, #0]
 8012eca:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d101      	bne.n	8012ed6 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012ed2:	230a      	movs	r3, #10
 8012ed4:	e03b      	b.n	8012f4e <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8012ed6:	79fb      	ldrb	r3, [r7, #7]
 8012ed8:	3b01      	subs	r3, #1
 8012eda:	2b03      	cmp	r3, #3
 8012edc:	d834      	bhi.n	8012f48 <GetLastFcntDown+0x88>
 8012ede:	a201      	add	r2, pc, #4	; (adr r2, 8012ee4 <GetLastFcntDown+0x24>)
 8012ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ee4:	08012ef5 	.word	0x08012ef5
 8012ee8:	08012f0d 	.word	0x08012f0d
 8012eec:	08012f25 	.word	0x08012f25
 8012ef0:	08012f3d 	.word	0x08012f3d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012ef4:	4b18      	ldr	r3, [pc, #96]	; (8012f58 <GetLastFcntDown+0x98>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	691a      	ldr	r2, [r3, #16]
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8012efe:	4b16      	ldr	r3, [pc, #88]	; (8012f58 <GetLastFcntDown+0x98>)
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	4b15      	ldr	r3, [pc, #84]	; (8012f58 <GetLastFcntDown+0x98>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	6912      	ldr	r2, [r2, #16]
 8012f08:	621a      	str	r2, [r3, #32]
            break;
 8012f0a:	e01f      	b.n	8012f4c <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012f0c:	4b12      	ldr	r3, [pc, #72]	; (8012f58 <GetLastFcntDown+0x98>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	695a      	ldr	r2, [r3, #20]
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8012f16:	4b10      	ldr	r3, [pc, #64]	; (8012f58 <GetLastFcntDown+0x98>)
 8012f18:	681a      	ldr	r2, [r3, #0]
 8012f1a:	4b0f      	ldr	r3, [pc, #60]	; (8012f58 <GetLastFcntDown+0x98>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	6952      	ldr	r2, [r2, #20]
 8012f20:	621a      	str	r2, [r3, #32]
            break;
 8012f22:	e013      	b.n	8012f4c <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012f24:	4b0c      	ldr	r3, [pc, #48]	; (8012f58 <GetLastFcntDown+0x98>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	699a      	ldr	r2, [r3, #24]
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012f2e:	4b0a      	ldr	r3, [pc, #40]	; (8012f58 <GetLastFcntDown+0x98>)
 8012f30:	681a      	ldr	r2, [r3, #0]
 8012f32:	4b09      	ldr	r3, [pc, #36]	; (8012f58 <GetLastFcntDown+0x98>)
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	6992      	ldr	r2, [r2, #24]
 8012f38:	621a      	str	r2, [r3, #32]
            break;
 8012f3a:	e007      	b.n	8012f4c <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8012f3c:	4b06      	ldr	r3, [pc, #24]	; (8012f58 <GetLastFcntDown+0x98>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	69da      	ldr	r2, [r3, #28]
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	601a      	str	r2, [r3, #0]
            break;
 8012f46:	e001      	b.n	8012f4c <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012f48:	2305      	movs	r3, #5
 8012f4a:	e000      	b.n	8012f4e <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012f4c:	2300      	movs	r3, #0
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	370c      	adds	r7, #12
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bc80      	pop	{r7}
 8012f56:	4770      	bx	lr
 8012f58:	20000dd4 	.word	0x20000dd4

08012f5c <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	4603      	mov	r3, r0
 8012f64:	6039      	str	r1, [r7, #0]
 8012f66:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8012f6c:	f107 020c 	add.w	r2, r7, #12
 8012f70:	79fb      	ldrb	r3, [r7, #7]
 8012f72:	4611      	mov	r1, r2
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7ff ffa3 	bl	8012ec0 <GetLastFcntDown>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d001      	beq.n	8012f84 <CheckFCntDown+0x28>
    {
        return false;
 8012f80:	2300      	movs	r3, #0
 8012f82:	e00a      	b.n	8012f9a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	683a      	ldr	r2, [r7, #0]
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d803      	bhi.n	8012f94 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8012f8c:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f92:	d101      	bne.n	8012f98 <CheckFCntDown+0x3c>
    {
        return true;
 8012f94:	2301      	movs	r3, #1
 8012f96:	e000      	b.n	8012f9a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8012f98:	2300      	movs	r3, #0
    }
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3710      	adds	r7, #16
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
	...

08012fa4 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012fa4:	b480      	push	{r7}
 8012fa6:	b083      	sub	sp, #12
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	4603      	mov	r3, r0
 8012fac:	6039      	str	r1, [r7, #0]
 8012fae:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012fb0:	79fb      	ldrb	r3, [r7, #7]
 8012fb2:	3b01      	subs	r3, #1
 8012fb4:	2b03      	cmp	r3, #3
 8012fb6:	d81f      	bhi.n	8012ff8 <UpdateFCntDown+0x54>
 8012fb8:	a201      	add	r2, pc, #4	; (adr r2, 8012fc0 <UpdateFCntDown+0x1c>)
 8012fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fbe:	bf00      	nop
 8012fc0:	08012fd1 	.word	0x08012fd1
 8012fc4:	08012fdb 	.word	0x08012fdb
 8012fc8:	08012fe5 	.word	0x08012fe5
 8012fcc:	08012fef 	.word	0x08012fef
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012fd0:	4b0c      	ldr	r3, [pc, #48]	; (8013004 <UpdateFCntDown+0x60>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	683a      	ldr	r2, [r7, #0]
 8012fd6:	611a      	str	r2, [r3, #16]
            break;
 8012fd8:	e00f      	b.n	8012ffa <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8012fda:	4b0a      	ldr	r3, [pc, #40]	; (8013004 <UpdateFCntDown+0x60>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	683a      	ldr	r2, [r7, #0]
 8012fe0:	615a      	str	r2, [r3, #20]
            break;
 8012fe2:	e00a      	b.n	8012ffa <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012fe4:	4b07      	ldr	r3, [pc, #28]	; (8013004 <UpdateFCntDown+0x60>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	683a      	ldr	r2, [r7, #0]
 8012fea:	619a      	str	r2, [r3, #24]
            break;
 8012fec:	e005      	b.n	8012ffa <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8012fee:	4b05      	ldr	r3, [pc, #20]	; (8013004 <UpdateFCntDown+0x60>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	683a      	ldr	r2, [r7, #0]
 8012ff4:	61da      	str	r2, [r3, #28]
            break;
 8012ff6:	e000      	b.n	8012ffa <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8012ff8:	bf00      	nop
    }
}
 8012ffa:	bf00      	nop
 8012ffc:	370c      	adds	r7, #12
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bc80      	pop	{r7}
 8013002:	4770      	bx	lr
 8013004:	20000dd4 	.word	0x20000dd4

08013008 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013008:	b480      	push	{r7}
 801300a:	b083      	sub	sp, #12
 801300c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801300e:	4b18      	ldr	r3, [pc, #96]	; (8013070 <ResetFCnts+0x68>)
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	2200      	movs	r2, #0
 8013014:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013016:	4b16      	ldr	r3, [pc, #88]	; (8013070 <ResetFCnts+0x68>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	f04f 32ff 	mov.w	r2, #4294967295
 801301e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013020:	4b13      	ldr	r3, [pc, #76]	; (8013070 <ResetFCnts+0x68>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	f04f 32ff 	mov.w	r2, #4294967295
 8013028:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801302a:	4b11      	ldr	r3, [pc, #68]	; (8013070 <ResetFCnts+0x68>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	f04f 32ff 	mov.w	r2, #4294967295
 8013032:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013034:	4b0e      	ldr	r3, [pc, #56]	; (8013070 <ResetFCnts+0x68>)
 8013036:	681a      	ldr	r2, [r3, #0]
 8013038:	4b0d      	ldr	r3, [pc, #52]	; (8013070 <ResetFCnts+0x68>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	6992      	ldr	r2, [r2, #24]
 801303e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013040:	2300      	movs	r3, #0
 8013042:	607b      	str	r3, [r7, #4]
 8013044:	e00b      	b.n	801305e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8013046:	4b0a      	ldr	r3, [pc, #40]	; (8013070 <ResetFCnts+0x68>)
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	3306      	adds	r3, #6
 801304e:	009b      	lsls	r3, r3, #2
 8013050:	4413      	add	r3, r2
 8013052:	f04f 32ff 	mov.w	r2, #4294967295
 8013056:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	3301      	adds	r3, #1
 801305c:	607b      	str	r3, [r7, #4]
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2b00      	cmp	r3, #0
 8013062:	ddf0      	ble.n	8013046 <ResetFCnts+0x3e>
    }
}
 8013064:	bf00      	nop
 8013066:	bf00      	nop
 8013068:	370c      	adds	r7, #12
 801306a:	46bd      	mov	sp, r7
 801306c:	bc80      	pop	{r7}
 801306e:	4770      	bx	lr
 8013070:	20000dd4 	.word	0x20000dd4

08013074 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d101      	bne.n	8013086 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013082:	2309      	movs	r3, #9
 8013084:	e01c      	b.n	80130c0 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013086:	4a10      	ldr	r2, [pc, #64]	; (80130c8 <LoRaMacCryptoInit+0x54>)
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801308c:	4b0e      	ldr	r3, [pc, #56]	; (80130c8 <LoRaMacCryptoInit+0x54>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	2228      	movs	r2, #40	; 0x28
 8013092:	2100      	movs	r1, #0
 8013094:	4618      	mov	r0, r3
 8013096:	f003 fa09 	bl	80164ac <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801309a:	4b0b      	ldr	r3, [pc, #44]	; (80130c8 <LoRaMacCryptoInit+0x54>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	2201      	movs	r2, #1
 80130a0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80130a2:	4b09      	ldr	r3, [pc, #36]	; (80130c8 <LoRaMacCryptoInit+0x54>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	2201      	movs	r2, #1
 80130a8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80130aa:	4b07      	ldr	r3, [pc, #28]	; (80130c8 <LoRaMacCryptoInit+0x54>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	2201      	movs	r2, #1
 80130b0:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80130b2:	4b05      	ldr	r3, [pc, #20]	; (80130c8 <LoRaMacCryptoInit+0x54>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	2200      	movs	r2, #0
 80130b8:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80130ba:	f7ff ffa5 	bl	8013008 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80130be:	2300      	movs	r3, #0
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	20000dd4 	.word	0x20000dd4

080130cc <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80130cc:	b480      	push	{r7}
 80130ce:	b083      	sub	sp, #12
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80130d4:	4b04      	ldr	r3, [pc, #16]	; (80130e8 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	687a      	ldr	r2, [r7, #4]
 80130da:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80130dc:	2300      	movs	r3, #0
}
 80130de:	4618      	mov	r0, r3
 80130e0:	370c      	adds	r7, #12
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bc80      	pop	{r7}
 80130e6:	4770      	bx	lr
 80130e8:	20000dd4 	.word	0x20000dd4

080130ec <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80130ec:	b480      	push	{r7}
 80130ee:	b083      	sub	sp, #12
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d101      	bne.n	80130fe <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80130fa:	230a      	movs	r3, #10
 80130fc:	e006      	b.n	801310c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80130fe:	4b06      	ldr	r3, [pc, #24]	; (8013118 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	68db      	ldr	r3, [r3, #12]
 8013104:	1c5a      	adds	r2, r3, #1
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801310a:	2300      	movs	r3, #0
}
 801310c:	4618      	mov	r0, r3
 801310e:	370c      	adds	r7, #12
 8013110:	46bd      	mov	sp, r7
 8013112:	bc80      	pop	{r7}
 8013114:	4770      	bx	lr
 8013116:	bf00      	nop
 8013118:	20000dd4 	.word	0x20000dd4

0801311c <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 801311c:	b5b0      	push	{r4, r5, r7, lr}
 801311e:	b088      	sub	sp, #32
 8013120:	af00      	add	r7, sp, #0
 8013122:	60ba      	str	r2, [r7, #8]
 8013124:	607b      	str	r3, [r7, #4]
 8013126:	4603      	mov	r3, r0
 8013128:	73fb      	strb	r3, [r7, #15]
 801312a:	460b      	mov	r3, r1
 801312c:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 801312e:	2300      	movs	r3, #0
 8013130:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8013132:	2300      	movs	r3, #0
 8013134:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013136:	2313      	movs	r3, #19
 8013138:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d101      	bne.n	8013144 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013140:	230a      	movs	r3, #10
 8013142:	e04f      	b.n	80131e4 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013144:	f107 0214 	add.w	r2, r7, #20
 8013148:	7bfb      	ldrb	r3, [r7, #15]
 801314a:	4611      	mov	r1, r2
 801314c:	4618      	mov	r0, r3
 801314e:	f7ff feb7 	bl	8012ec0 <GetLastFcntDown>
 8013152:	4603      	mov	r3, r0
 8013154:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013156:	7efb      	ldrb	r3, [r7, #27]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d001      	beq.n	8013160 <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 801315c:	7efb      	ldrb	r3, [r7, #27]
 801315e:	e041      	b.n	80131e4 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013166:	d103      	bne.n	8013170 <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	68ba      	ldr	r2, [r7, #8]
 801316c:	601a      	str	r2, [r3, #0]
 801316e:	e01e      	b.n	80131ae <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013170:	697b      	ldr	r3, [r7, #20]
 8013172:	b29b      	uxth	r3, r3
 8013174:	68ba      	ldr	r2, [r7, #8]
 8013176:	1ad3      	subs	r3, r2, r3
 8013178:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	2b00      	cmp	r3, #0
 801317e:	dd05      	ble.n	801318c <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013180:	697a      	ldr	r2, [r7, #20]
 8013182:	69fb      	ldr	r3, [r7, #28]
 8013184:	441a      	add	r2, r3
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	601a      	str	r2, [r3, #0]
 801318a:	e010      	b.n	80131ae <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 801318c:	69fb      	ldr	r3, [r7, #28]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d104      	bne.n	801319c <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013192:	697a      	ldr	r2, [r7, #20]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013198:	2307      	movs	r3, #7
 801319a:	e023      	b.n	80131e4 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	0c1b      	lsrs	r3, r3, #16
 80131a0:	041b      	lsls	r3, r3, #16
 80131a2:	68ba      	ldr	r2, [r7, #8]
 80131a4:	4413      	add	r3, r2
 80131a6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80131ae:	4b0f      	ldr	r3, [pc, #60]	; (80131ec <LoRaMacCryptoGetFCntDown+0xd0>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	789b      	ldrb	r3, [r3, #2]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d114      	bne.n	80131e2 <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4618      	mov	r0, r3
 80131be:	f04f 0100 	mov.w	r1, #0
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	461a      	mov	r2, r3
 80131c6:	f04f 0300 	mov.w	r3, #0
 80131ca:	1a84      	subs	r4, r0, r2
 80131cc:	eb61 0503 	sbc.w	r5, r1, r3
 80131d0:	89ba      	ldrh	r2, [r7, #12]
 80131d2:	f04f 0300 	mov.w	r3, #0
 80131d6:	4294      	cmp	r4, r2
 80131d8:	eb75 0303 	sbcs.w	r3, r5, r3
 80131dc:	db01      	blt.n	80131e2 <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80131de:	2308      	movs	r3, #8
 80131e0:	e000      	b.n	80131e4 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80131e2:	2300      	movs	r3, #0
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3720      	adds	r7, #32
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bdb0      	pop	{r4, r5, r7, pc}
 80131ec:	20000dd4 	.word	0x20000dd4

080131f0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80131f0:	b480      	push	{r7}
 80131f2:	b085      	sub	sp, #20
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d101      	bne.n	8013202 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80131fe:	230a      	movs	r3, #10
 8013200:	e017      	b.n	8013232 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013202:	2300      	movs	r3, #0
 8013204:	60fb      	str	r3, [r7, #12]
 8013206:	e010      	b.n	801322a <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013208:	4b0c      	ldr	r3, [pc, #48]	; (801323c <LoRaMacCryptoSetMulticastReference+0x4c>)
 801320a:	6819      	ldr	r1, [r3, #0]
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	222c      	movs	r2, #44	; 0x2c
 8013210:	fb02 f303 	mul.w	r3, r2, r3
 8013214:	687a      	ldr	r2, [r7, #4]
 8013216:	4413      	add	r3, r2
 8013218:	68fa      	ldr	r2, [r7, #12]
 801321a:	3206      	adds	r2, #6
 801321c:	0092      	lsls	r2, r2, #2
 801321e:	440a      	add	r2, r1
 8013220:	3204      	adds	r2, #4
 8013222:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	3301      	adds	r3, #1
 8013228:	60fb      	str	r3, [r7, #12]
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	2b00      	cmp	r3, #0
 801322e:	ddeb      	ble.n	8013208 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013230:	2300      	movs	r3, #0
}
 8013232:	4618      	mov	r0, r3
 8013234:	3714      	adds	r7, #20
 8013236:	46bd      	mov	sp, r7
 8013238:	bc80      	pop	{r7}
 801323a:	4770      	bx	lr
 801323c:	20000dd4 	.word	0x20000dd4

08013240 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	4603      	mov	r3, r0
 8013248:	6039      	str	r1, [r7, #0]
 801324a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801324c:	79fb      	ldrb	r3, [r7, #7]
 801324e:	6839      	ldr	r1, [r7, #0]
 8013250:	4618      	mov	r0, r3
 8013252:	f7f8 fdbb 	bl	800bdcc <SecureElementSetKey>
 8013256:	4603      	mov	r3, r0
 8013258:	2b00      	cmp	r3, #0
 801325a:	d001      	beq.n	8013260 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801325c:	230f      	movs	r3, #15
 801325e:	e018      	b.n	8013292 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8013260:	79fb      	ldrb	r3, [r7, #7]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d114      	bne.n	8013290 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013266:	4b0d      	ldr	r3, [pc, #52]	; (801329c <LoRaMacCryptoSetKey+0x5c>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	789b      	ldrb	r3, [r3, #2]
 801326c:	79fa      	ldrb	r2, [r7, #7]
 801326e:	4611      	mov	r1, r2
 8013270:	4618      	mov	r0, r3
 8013272:	f000 fa3f 	bl	80136f4 <LoRaMacCryptoDeriveMcRootKey>
 8013276:	4603      	mov	r3, r0
 8013278:	2b00      	cmp	r3, #0
 801327a:	d001      	beq.n	8013280 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801327c:	230f      	movs	r3, #15
 801327e:	e008      	b.n	8013292 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013280:	2004      	movs	r0, #4
 8013282:	f000 fa62 	bl	801374a <LoRaMacCryptoDeriveMcKEKey>
 8013286:	4603      	mov	r3, r0
 8013288:	2b00      	cmp	r3, #0
 801328a:	d001      	beq.n	8013290 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801328c:	230f      	movs	r3, #15
 801328e:	e000      	b.n	8013292 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013290:	2300      	movs	r3, #0
}
 8013292:	4618      	mov	r0, r3
 8013294:	3708      	adds	r7, #8
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
 801329a:	bf00      	nop
 801329c:	20000dd4 	.word	0x20000dd4

080132a0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b086      	sub	sp, #24
 80132a4:	af02      	add	r7, sp, #8
 80132a6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d101      	bne.n	80132b2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80132ae:	230a      	movs	r3, #10
 80132b0:	e033      	b.n	801331a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80132b2:	2301      	movs	r3, #1
 80132b4:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80132b6:	2300      	movs	r3, #0
 80132b8:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80132ba:	f107 0308 	add.w	r3, r7, #8
 80132be:	4618      	mov	r0, r3
 80132c0:	f7f8 ff4a 	bl	800c158 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80132c4:	68ba      	ldr	r2, [r7, #8]
 80132c6:	4b17      	ldr	r3, [pc, #92]	; (8013324 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	b292      	uxth	r2, r2
 80132cc:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80132ce:	4b15      	ldr	r3, [pc, #84]	; (8013324 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	889a      	ldrh	r2, [r3, #4]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f000 fc18 	bl	8013b0e <LoRaMacSerializerJoinRequest>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d001      	beq.n	80132e8 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80132e4:	2311      	movs	r3, #17
 80132e6:	e018      	b.n	801331a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6819      	ldr	r1, [r3, #0]
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	3318      	adds	r3, #24
 80132f0:	7bfa      	ldrb	r2, [r7, #15]
 80132f2:	9300      	str	r3, [sp, #0]
 80132f4:	4613      	mov	r3, r2
 80132f6:	2213      	movs	r2, #19
 80132f8:	2000      	movs	r0, #0
 80132fa:	f7f8 fdc5 	bl	800be88 <SecureElementComputeAesCmac>
 80132fe:	4603      	mov	r3, r0
 8013300:	2b00      	cmp	r3, #0
 8013302:	d001      	beq.n	8013308 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013304:	230f      	movs	r3, #15
 8013306:	e008      	b.n	801331a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f000 fc00 	bl	8013b0e <LoRaMacSerializerJoinRequest>
 801330e:	4603      	mov	r3, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d001      	beq.n	8013318 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013314:	2311      	movs	r3, #17
 8013316:	e000      	b.n	801331a <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013318:	2300      	movs	r3, #0
}
 801331a:	4618      	mov	r0, r3
 801331c:	3710      	adds	r7, #16
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	20000dd4 	.word	0x20000dd4

08013328 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013328:	b590      	push	{r4, r7, lr}
 801332a:	b097      	sub	sp, #92	; 0x5c
 801332c:	af04      	add	r7, sp, #16
 801332e:	4603      	mov	r3, r0
 8013330:	60b9      	str	r1, [r7, #8]
 8013332:	607a      	str	r2, [r7, #4]
 8013334:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d002      	beq.n	8013342 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d101      	bne.n	8013346 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013342:	230a      	movs	r3, #10
 8013344:	e0bd      	b.n	80134c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013346:	2313      	movs	r3, #19
 8013348:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801334c:	2300      	movs	r3, #0
 801334e:	61bb      	str	r3, [r7, #24]
 8013350:	f107 031c 	add.w	r3, r7, #28
 8013354:	221d      	movs	r2, #29
 8013356:	2100      	movs	r1, #0
 8013358:	4618      	mov	r0, r3
 801335a:	f007 fc25 	bl	801aba8 <memset>
    uint8_t versionMinor         = 0;
 801335e:	2300      	movs	r3, #0
 8013360:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013362:	4b5a      	ldr	r3, [pc, #360]	; (80134cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	889b      	ldrh	r3, [r3, #4]
 8013368:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681c      	ldr	r4, [r3, #0]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	791b      	ldrb	r3, [r3, #4]
 8013374:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013378:	7bf8      	ldrb	r0, [r7, #15]
 801337a:	f107 0217 	add.w	r2, r7, #23
 801337e:	9202      	str	r2, [sp, #8]
 8013380:	f107 0218 	add.w	r2, r7, #24
 8013384:	9201      	str	r2, [sp, #4]
 8013386:	9300      	str	r3, [sp, #0]
 8013388:	4623      	mov	r3, r4
 801338a:	460a      	mov	r2, r1
 801338c:	68b9      	ldr	r1, [r7, #8]
 801338e:	f7f8 fe66 	bl	800c05e <SecureElementProcessJoinAccept>
 8013392:	4603      	mov	r3, r0
 8013394:	2b00      	cmp	r3, #0
 8013396:	d001      	beq.n	801339c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013398:	230f      	movs	r3, #15
 801339a:	e092      	b.n	80134c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	6818      	ldr	r0, [r3, #0]
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	791b      	ldrb	r3, [r3, #4]
 80133a4:	b29a      	uxth	r2, r3
 80133a6:	f107 0318 	add.w	r3, r7, #24
 80133aa:	4619      	mov	r1, r3
 80133ac:	f003 f843 	bl	8016436 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	f000 f9ed 	bl	8013790 <LoRaMacParserJoinAccept>
 80133b6:	4603      	mov	r3, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d001      	beq.n	80133c0 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80133bc:	2310      	movs	r3, #16
 80133be:	e080      	b.n	80134c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	799b      	ldrb	r3, [r3, #6]
 80133c4:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	79db      	ldrb	r3, [r3, #7]
 80133ca:	021b      	lsls	r3, r3, #8
 80133cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133ce:	4313      	orrs	r3, r2
 80133d0:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	7a1b      	ldrb	r3, [r3, #8]
 80133d6:	041b      	lsls	r3, r3, #16
 80133d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133da:	4313      	orrs	r3, r2
 80133dc:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80133de:	4b3b      	ldr	r3, [pc, #236]	; (80134cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	689b      	ldr	r3, [r3, #8]
 80133e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d010      	beq.n	801340c <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80133ea:	4b38      	ldr	r3, [pc, #224]	; (80134cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133f0:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80133f2:	7dfb      	ldrb	r3, [r7, #23]
 80133f4:	2100      	movs	r1, #0
 80133f6:	4618      	mov	r0, r3
 80133f8:	f000 f97c 	bl	80136f4 <LoRaMacCryptoDeriveMcRootKey>
 80133fc:	4603      	mov	r3, r0
 80133fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013402:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013406:	2b00      	cmp	r3, #0
 8013408:	d005      	beq.n	8013416 <LoRaMacCryptoHandleJoinAccept+0xee>
 801340a:	e001      	b.n	8013410 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801340c:	2303      	movs	r3, #3
 801340e:	e058      	b.n	80134c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8013410:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013414:	e055      	b.n	80134c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8013416:	2004      	movs	r0, #4
 8013418:	f000 f997 	bl	801374a <LoRaMacCryptoDeriveMcKEKey>
 801341c:	4603      	mov	r3, r0
 801341e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013422:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013426:	2b00      	cmp	r3, #0
 8013428:	d002      	beq.n	8013430 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801342a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801342e:	e048      	b.n	80134c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	7a5b      	ldrb	r3, [r3, #9]
 8013434:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	7a9b      	ldrb	r3, [r3, #10]
 801343a:	021b      	lsls	r3, r3, #8
 801343c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801343e:	4313      	orrs	r3, r2
 8013440:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	7adb      	ldrb	r3, [r3, #11]
 8013446:	041b      	lsls	r3, r3, #16
 8013448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801344a:	4313      	orrs	r3, r2
 801344c:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801344e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013452:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013454:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013456:	2003      	movs	r0, #3
 8013458:	f7ff fce2 	bl	8012e20 <DeriveSessionKey10x>
 801345c:	4603      	mov	r3, r0
 801345e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013462:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013466:	2b00      	cmp	r3, #0
 8013468:	d002      	beq.n	8013470 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 801346a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801346e:	e028      	b.n	80134c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013470:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013476:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013478:	2002      	movs	r0, #2
 801347a:	f7ff fcd1 	bl	8012e20 <DeriveSessionKey10x>
 801347e:	4603      	mov	r3, r0
 8013480:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013484:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013488:	2b00      	cmp	r3, #0
 801348a:	d002      	beq.n	8013492 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 801348c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013490:	e017      	b.n	80134c2 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013492:	4b0e      	ldr	r3, [pc, #56]	; (80134cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	7dfa      	ldrb	r2, [r7, #23]
 8013498:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 801349a:	4b0c      	ldr	r3, [pc, #48]	; (80134cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	2200      	movs	r2, #0
 80134a0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80134a2:	4b0a      	ldr	r3, [pc, #40]	; (80134cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	f04f 32ff 	mov.w	r2, #4294967295
 80134aa:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80134ac:	4b07      	ldr	r3, [pc, #28]	; (80134cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	f04f 32ff 	mov.w	r2, #4294967295
 80134b4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80134b6:	4b05      	ldr	r3, [pc, #20]	; (80134cc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f04f 32ff 	mov.w	r2, #4294967295
 80134be:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80134c0:	2300      	movs	r3, #0
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	374c      	adds	r7, #76	; 0x4c
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd90      	pop	{r4, r7, pc}
 80134ca:	bf00      	nop
 80134cc:	20000dd4 	.word	0x20000dd4

080134d0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80134d0:	b590      	push	{r4, r7, lr}
 80134d2:	b08b      	sub	sp, #44	; 0x2c
 80134d4:	af04      	add	r7, sp, #16
 80134d6:	60f8      	str	r0, [r7, #12]
 80134d8:	607b      	str	r3, [r7, #4]
 80134da:	460b      	mov	r3, r1
 80134dc:	72fb      	strb	r3, [r7, #11]
 80134de:	4613      	mov	r3, r2
 80134e0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80134e2:	2313      	movs	r3, #19
 80134e4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80134e6:	2303      	movs	r3, #3
 80134e8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d101      	bne.n	80134f4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80134f0:	230a      	movs	r3, #10
 80134f2:	e05f      	b.n	80135b4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80134f4:	4b31      	ldr	r3, [pc, #196]	; (80135bc <LoRaMacCryptoSecureMessage+0xec>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	68db      	ldr	r3, [r3, #12]
 80134fa:	68fa      	ldr	r2, [r7, #12]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d201      	bcs.n	8013504 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013500:	2306      	movs	r3, #6
 8013502:	e057      	b.n	80135b4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f893 3020 	ldrb.w	r3, [r3, #32]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d101      	bne.n	8013512 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801350e:	2302      	movs	r3, #2
 8013510:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013512:	4b2a      	ldr	r3, [pc, #168]	; (80135bc <LoRaMacCryptoSecureMessage+0xec>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	68db      	ldr	r3, [r3, #12]
 8013518:	68fa      	ldr	r2, [r7, #12]
 801351a:	429a      	cmp	r2, r3
 801351c:	d916      	bls.n	801354c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013528:	b219      	sxth	r1, r3
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	689c      	ldr	r4, [r3, #8]
 801352e:	7dfa      	ldrb	r2, [r7, #23]
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	9301      	str	r3, [sp, #4]
 8013534:	2300      	movs	r3, #0
 8013536:	9300      	str	r3, [sp, #0]
 8013538:	4623      	mov	r3, r4
 801353a:	f7ff faa3 	bl	8012a84 <PayloadEncrypt>
 801353e:	4603      	mov	r3, r0
 8013540:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013542:	7dbb      	ldrb	r3, [r7, #22]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d001      	beq.n	801354c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013548:	7dbb      	ldrb	r3, [r7, #22]
 801354a:	e033      	b.n	80135b4 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f000 fb60 	bl	8013c12 <LoRaMacSerializerData>
 8013552:	4603      	mov	r3, r0
 8013554:	2b00      	cmp	r3, #0
 8013556:	d001      	beq.n	801355c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013558:	2311      	movs	r3, #17
 801355a:	e02b      	b.n	80135b4 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801355c:	2302      	movs	r3, #2
 801355e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	6818      	ldr	r0, [r3, #0]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	791b      	ldrb	r3, [r3, #4]
 8013568:	b29b      	uxth	r3, r3
 801356a:	3b04      	subs	r3, #4
 801356c:	b299      	uxth	r1, r3
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	689b      	ldr	r3, [r3, #8]
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	322c      	adds	r2, #44	; 0x2c
 8013576:	7dfc      	ldrb	r4, [r7, #23]
 8013578:	9203      	str	r2, [sp, #12]
 801357a:	68fa      	ldr	r2, [r7, #12]
 801357c:	9202      	str	r2, [sp, #8]
 801357e:	9301      	str	r3, [sp, #4]
 8013580:	2300      	movs	r3, #0
 8013582:	9300      	str	r3, [sp, #0]
 8013584:	2300      	movs	r3, #0
 8013586:	4622      	mov	r2, r4
 8013588:	f7ff fb7e 	bl	8012c88 <ComputeCmacB0>
 801358c:	4603      	mov	r3, r0
 801358e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013590:	7dbb      	ldrb	r3, [r7, #22]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d001      	beq.n	801359a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8013596:	7dbb      	ldrb	r3, [r7, #22]
 8013598:	e00c      	b.n	80135b4 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f000 fb39 	bl	8013c12 <LoRaMacSerializerData>
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d001      	beq.n	80135aa <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80135a6:	2311      	movs	r3, #17
 80135a8:	e004      	b.n	80135b4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80135aa:	4b04      	ldr	r3, [pc, #16]	; (80135bc <LoRaMacCryptoSecureMessage+0xec>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	68fa      	ldr	r2, [r7, #12]
 80135b0:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80135b2:	2300      	movs	r3, #0
}
 80135b4:	4618      	mov	r0, r3
 80135b6:	371c      	adds	r7, #28
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd90      	pop	{r4, r7, pc}
 80135bc:	20000dd4 	.word	0x20000dd4

080135c0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80135c0:	b590      	push	{r4, r7, lr}
 80135c2:	b08b      	sub	sp, #44	; 0x2c
 80135c4:	af04      	add	r7, sp, #16
 80135c6:	60b9      	str	r1, [r7, #8]
 80135c8:	607b      	str	r3, [r7, #4]
 80135ca:	4603      	mov	r3, r0
 80135cc:	73fb      	strb	r3, [r7, #15]
 80135ce:	4613      	mov	r3, r2
 80135d0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80135d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d101      	bne.n	80135dc <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80135d8:	230a      	movs	r3, #10
 80135da:	e084      	b.n	80136e6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80135dc:	7bbb      	ldrb	r3, [r7, #14]
 80135de:	6879      	ldr	r1, [r7, #4]
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7ff fcbb 	bl	8012f5c <CheckFCntDown>
 80135e6:	4603      	mov	r3, r0
 80135e8:	f083 0301 	eor.w	r3, r3, #1
 80135ec:	b2db      	uxtb	r3, r3
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d001      	beq.n	80135f6 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80135f2:	2306      	movs	r3, #6
 80135f4:	e077      	b.n	80136e6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80135f6:	2313      	movs	r3, #19
 80135f8:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80135fa:	2303      	movs	r3, #3
 80135fc:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80135fe:	2302      	movs	r3, #2
 8013600:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013604:	f000 f98f 	bl	8013926 <LoRaMacParserData>
 8013608:	4603      	mov	r3, r0
 801360a:	2b00      	cmp	r3, #0
 801360c:	d001      	beq.n	8013612 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801360e:	2310      	movs	r3, #16
 8013610:	e069      	b.n	80136e6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013612:	f107 0210 	add.w	r2, r7, #16
 8013616:	7bfb      	ldrb	r3, [r7, #15]
 8013618:	4611      	mov	r1, r2
 801361a:	4618      	mov	r0, r3
 801361c:	f7ff fbda 	bl	8012dd4 <GetKeyAddrItem>
 8013620:	4603      	mov	r3, r0
 8013622:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013624:	7d7b      	ldrb	r3, [r7, #21]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d001      	beq.n	801362e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801362a:	7d7b      	ldrb	r3, [r7, #21]
 801362c:	e05b      	b.n	80136e6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	785b      	ldrb	r3, [r3, #1]
 8013632:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013634:	693b      	ldr	r3, [r7, #16]
 8013636:	789b      	ldrb	r3, [r3, #2]
 8013638:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	68ba      	ldr	r2, [r7, #8]
 8013640:	429a      	cmp	r2, r3
 8013642:	d001      	beq.n	8013648 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013644:	2302      	movs	r3, #2
 8013646:	e04e      	b.n	80136e6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801364a:	7b1b      	ldrb	r3, [r3, #12]
 801364c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013650:	b2db      	uxtb	r3, r3
 8013652:	2b00      	cmp	r3, #0
 8013654:	bf14      	ite	ne
 8013656:	2301      	movne	r3, #1
 8013658:	2300      	moveq	r3, #0
 801365a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801365c:	4b24      	ldr	r3, [pc, #144]	; (80136f0 <LoRaMacCryptoUnsecureMessage+0x130>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	789b      	ldrb	r3, [r3, #2]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d101      	bne.n	801366a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013666:	2300      	movs	r3, #0
 8013668:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366c:	6818      	ldr	r0, [r3, #0]
 801366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013670:	791b      	ldrb	r3, [r3, #4]
 8013672:	b29b      	uxth	r3, r3
 8013674:	3b04      	subs	r3, #4
 8013676:	b299      	uxth	r1, r3
 8013678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801367c:	7dbc      	ldrb	r4, [r7, #22]
 801367e:	7d3a      	ldrb	r2, [r7, #20]
 8013680:	9303      	str	r3, [sp, #12]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	9302      	str	r3, [sp, #8]
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	9301      	str	r3, [sp, #4]
 801368a:	2301      	movs	r3, #1
 801368c:	9300      	str	r3, [sp, #0]
 801368e:	4623      	mov	r3, r4
 8013690:	f7ff fb38 	bl	8012d04 <VerifyCmacB0>
 8013694:	4603      	mov	r3, r0
 8013696:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013698:	7d7b      	ldrb	r3, [r7, #21]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d001      	beq.n	80136a2 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801369e:	7d7b      	ldrb	r3, [r7, #21]
 80136a0:	e021      	b.n	80136e6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80136a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d101      	bne.n	80136b0 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80136ac:	2302      	movs	r3, #2
 80136ae:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80136b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80136b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136ba:	b219      	sxth	r1, r3
 80136bc:	7dfa      	ldrb	r2, [r7, #23]
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	9301      	str	r3, [sp, #4]
 80136c2:	2301      	movs	r3, #1
 80136c4:	9300      	str	r3, [sp, #0]
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	f7ff f9dc 	bl	8012a84 <PayloadEncrypt>
 80136cc:	4603      	mov	r3, r0
 80136ce:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136d0:	7d7b      	ldrb	r3, [r7, #21]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d001      	beq.n	80136da <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80136d6:	7d7b      	ldrb	r3, [r7, #21]
 80136d8:	e005      	b.n	80136e6 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80136da:	7bbb      	ldrb	r3, [r7, #14]
 80136dc:	6879      	ldr	r1, [r7, #4]
 80136de:	4618      	mov	r0, r3
 80136e0:	f7ff fc60 	bl	8012fa4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80136e4:	2300      	movs	r3, #0
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	371c      	adds	r7, #28
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd90      	pop	{r4, r7, pc}
 80136ee:	bf00      	nop
 80136f0:	20000dd4 	.word	0x20000dd4

080136f4 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b086      	sub	sp, #24
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	4603      	mov	r3, r0
 80136fc:	460a      	mov	r2, r1
 80136fe:	71fb      	strb	r3, [r7, #7]
 8013700:	4613      	mov	r3, r2
 8013702:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8013704:	79bb      	ldrb	r3, [r7, #6]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d001      	beq.n	801370e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801370a:	230b      	movs	r3, #11
 801370c:	e019      	b.n	8013742 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 801370e:	2300      	movs	r3, #0
 8013710:	60bb      	str	r3, [r7, #8]
 8013712:	f107 030c 	add.w	r3, r7, #12
 8013716:	2200      	movs	r2, #0
 8013718:	601a      	str	r2, [r3, #0]
 801371a:	605a      	str	r2, [r3, #4]
 801371c:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 801371e:	79fb      	ldrb	r3, [r7, #7]
 8013720:	2b01      	cmp	r3, #1
 8013722:	d101      	bne.n	8013728 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8013724:	2320      	movs	r3, #32
 8013726:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013728:	79b9      	ldrb	r1, [r7, #6]
 801372a:	f107 0308 	add.w	r3, r7, #8
 801372e:	2204      	movs	r2, #4
 8013730:	4618      	mov	r0, r3
 8013732:	f7f8 fc54 	bl	800bfde <SecureElementDeriveAndStoreKey>
 8013736:	4603      	mov	r3, r0
 8013738:	2b00      	cmp	r3, #0
 801373a:	d001      	beq.n	8013740 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801373c:	230f      	movs	r3, #15
 801373e:	e000      	b.n	8013742 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013740:	2300      	movs	r3, #0
}
 8013742:	4618      	mov	r0, r3
 8013744:	3718      	adds	r7, #24
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}

0801374a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 801374a:	b580      	push	{r7, lr}
 801374c:	b086      	sub	sp, #24
 801374e:	af00      	add	r7, sp, #0
 8013750:	4603      	mov	r3, r0
 8013752:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013754:	79fb      	ldrb	r3, [r7, #7]
 8013756:	2b04      	cmp	r3, #4
 8013758:	d001      	beq.n	801375e <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801375a:	230b      	movs	r3, #11
 801375c:	e014      	b.n	8013788 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 801375e:	2300      	movs	r3, #0
 8013760:	60bb      	str	r3, [r7, #8]
 8013762:	f107 030c 	add.w	r3, r7, #12
 8013766:	2200      	movs	r2, #0
 8013768:	601a      	str	r2, [r3, #0]
 801376a:	605a      	str	r2, [r3, #4]
 801376c:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801376e:	79f9      	ldrb	r1, [r7, #7]
 8013770:	f107 0308 	add.w	r3, r7, #8
 8013774:	227f      	movs	r2, #127	; 0x7f
 8013776:	4618      	mov	r0, r3
 8013778:	f7f8 fc31 	bl	800bfde <SecureElementDeriveAndStoreKey>
 801377c:	4603      	mov	r3, r0
 801377e:	2b00      	cmp	r3, #0
 8013780:	d001      	beq.n	8013786 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013782:	230f      	movs	r3, #15
 8013784:	e000      	b.n	8013788 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013786:	2300      	movs	r3, #0
}
 8013788:	4618      	mov	r0, r3
 801378a:	3718      	adds	r7, #24
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}

08013790 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b084      	sub	sp, #16
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d003      	beq.n	80137a6 <LoRaMacParserJoinAccept+0x16>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d101      	bne.n	80137aa <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80137a6:	2302      	movs	r3, #2
 80137a8:	e0b9      	b.n	801391e <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80137aa:	2300      	movs	r3, #0
 80137ac:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681a      	ldr	r2, [r3, #0]
 80137b2:	89fb      	ldrh	r3, [r7, #14]
 80137b4:	1c59      	adds	r1, r3, #1
 80137b6:	81f9      	strh	r1, [r7, #14]
 80137b8:	4413      	add	r3, r2
 80137ba:	781a      	ldrb	r2, [r3, #0]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	1d98      	adds	r0, r3, #6
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681a      	ldr	r2, [r3, #0]
 80137c8:	89fb      	ldrh	r3, [r7, #14]
 80137ca:	4413      	add	r3, r2
 80137cc:	2203      	movs	r2, #3
 80137ce:	4619      	mov	r1, r3
 80137d0:	f002 fe31 	bl	8016436 <memcpy1>
    bufItr = bufItr + 3;
 80137d4:	89fb      	ldrh	r3, [r7, #14]
 80137d6:	3303      	adds	r3, #3
 80137d8:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f103 0009 	add.w	r0, r3, #9
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	681a      	ldr	r2, [r3, #0]
 80137e4:	89fb      	ldrh	r3, [r7, #14]
 80137e6:	4413      	add	r3, r2
 80137e8:	2203      	movs	r2, #3
 80137ea:	4619      	mov	r1, r3
 80137ec:	f002 fe23 	bl	8016436 <memcpy1>
    bufItr = bufItr + 3;
 80137f0:	89fb      	ldrh	r3, [r7, #14]
 80137f2:	3303      	adds	r3, #3
 80137f4:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	89fb      	ldrh	r3, [r7, #14]
 80137fc:	1c59      	adds	r1, r3, #1
 80137fe:	81f9      	strh	r1, [r7, #14]
 8013800:	4413      	add	r3, r2
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	461a      	mov	r2, r3
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681a      	ldr	r2, [r3, #0]
 801380e:	89fb      	ldrh	r3, [r7, #14]
 8013810:	1c59      	adds	r1, r3, #1
 8013812:	81f9      	strh	r1, [r7, #14]
 8013814:	4413      	add	r3, r2
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	021a      	lsls	r2, r3, #8
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	68db      	ldr	r3, [r3, #12]
 801381e:	431a      	orrs	r2, r3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	681a      	ldr	r2, [r3, #0]
 8013828:	89fb      	ldrh	r3, [r7, #14]
 801382a:	1c59      	adds	r1, r3, #1
 801382c:	81f9      	strh	r1, [r7, #14]
 801382e:	4413      	add	r3, r2
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	041a      	lsls	r2, r3, #16
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	68db      	ldr	r3, [r3, #12]
 8013838:	431a      	orrs	r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	89fb      	ldrh	r3, [r7, #14]
 8013844:	1c59      	adds	r1, r3, #1
 8013846:	81f9      	strh	r1, [r7, #14]
 8013848:	4413      	add	r3, r2
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	061a      	lsls	r2, r3, #24
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	68db      	ldr	r3, [r3, #12]
 8013852:	431a      	orrs	r2, r3
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	681a      	ldr	r2, [r3, #0]
 801385c:	89fb      	ldrh	r3, [r7, #14]
 801385e:	1c59      	adds	r1, r3, #1
 8013860:	81f9      	strh	r1, [r7, #14]
 8013862:	4413      	add	r3, r2
 8013864:	781a      	ldrb	r2, [r3, #0]
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	89fb      	ldrh	r3, [r7, #14]
 8013870:	1c59      	adds	r1, r3, #1
 8013872:	81f9      	strh	r1, [r7, #14]
 8013874:	4413      	add	r3, r2
 8013876:	781a      	ldrb	r2, [r3, #0]
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	791b      	ldrb	r3, [r3, #4]
 8013880:	1f1a      	subs	r2, r3, #4
 8013882:	89fb      	ldrh	r3, [r7, #14]
 8013884:	1ad3      	subs	r3, r2, r3
 8013886:	2b10      	cmp	r3, #16
 8013888:	d10e      	bne.n	80138a8 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	f103 0012 	add.w	r0, r3, #18
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	681a      	ldr	r2, [r3, #0]
 8013894:	89fb      	ldrh	r3, [r7, #14]
 8013896:	4413      	add	r3, r2
 8013898:	2210      	movs	r2, #16
 801389a:	4619      	mov	r1, r3
 801389c:	f002 fdcb 	bl	8016436 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80138a0:	89fb      	ldrh	r3, [r7, #14]
 80138a2:	3310      	adds	r3, #16
 80138a4:	81fb      	strh	r3, [r7, #14]
 80138a6:	e008      	b.n	80138ba <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	791b      	ldrb	r3, [r3, #4]
 80138ac:	1f1a      	subs	r2, r3, #4
 80138ae:	89fb      	ldrh	r3, [r7, #14]
 80138b0:	1ad3      	subs	r3, r2, r3
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	dd01      	ble.n	80138ba <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80138b6:	2301      	movs	r3, #1
 80138b8:	e031      	b.n	801391e <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	681a      	ldr	r2, [r3, #0]
 80138be:	89fb      	ldrh	r3, [r7, #14]
 80138c0:	1c59      	adds	r1, r3, #1
 80138c2:	81f9      	strh	r1, [r7, #14]
 80138c4:	4413      	add	r3, r2
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	461a      	mov	r2, r3
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	681a      	ldr	r2, [r3, #0]
 80138d2:	89fb      	ldrh	r3, [r7, #14]
 80138d4:	1c59      	adds	r1, r3, #1
 80138d6:	81f9      	strh	r1, [r7, #14]
 80138d8:	4413      	add	r3, r2
 80138da:	781b      	ldrb	r3, [r3, #0]
 80138dc:	021a      	lsls	r2, r3, #8
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e2:	431a      	orrs	r2, r3
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681a      	ldr	r2, [r3, #0]
 80138ec:	89fb      	ldrh	r3, [r7, #14]
 80138ee:	1c59      	adds	r1, r3, #1
 80138f0:	81f9      	strh	r1, [r7, #14]
 80138f2:	4413      	add	r3, r2
 80138f4:	781b      	ldrb	r3, [r3, #0]
 80138f6:	041a      	lsls	r2, r3, #16
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138fc:	431a      	orrs	r2, r3
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681a      	ldr	r2, [r3, #0]
 8013906:	89fb      	ldrh	r3, [r7, #14]
 8013908:	1c59      	adds	r1, r3, #1
 801390a:	81f9      	strh	r1, [r7, #14]
 801390c:	4413      	add	r3, r2
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	061a      	lsls	r2, r3, #24
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013916:	431a      	orrs	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801391c:	2300      	movs	r3, #0
}
 801391e:	4618      	mov	r0, r3
 8013920:	3710      	adds	r7, #16
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}

08013926 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8013926:	b580      	push	{r7, lr}
 8013928:	b084      	sub	sp, #16
 801392a:	af00      	add	r7, sp, #0
 801392c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d003      	beq.n	801393c <LoRaMacParserData+0x16>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d101      	bne.n	8013940 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801393c:	2302      	movs	r3, #2
 801393e:	e0e2      	b.n	8013b06 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8013940:	2300      	movs	r3, #0
 8013942:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681a      	ldr	r2, [r3, #0]
 8013948:	89fb      	ldrh	r3, [r7, #14]
 801394a:	1c59      	adds	r1, r3, #1
 801394c:	81f9      	strh	r1, [r7, #14]
 801394e:	4413      	add	r3, r2
 8013950:	781a      	ldrb	r2, [r3, #0]
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	89fb      	ldrh	r3, [r7, #14]
 801395c:	1c59      	adds	r1, r3, #1
 801395e:	81f9      	strh	r1, [r7, #14]
 8013960:	4413      	add	r3, r2
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	461a      	mov	r2, r3
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	89fb      	ldrh	r3, [r7, #14]
 8013970:	1c59      	adds	r1, r3, #1
 8013972:	81f9      	strh	r1, [r7, #14]
 8013974:	4413      	add	r3, r2
 8013976:	781b      	ldrb	r3, [r3, #0]
 8013978:	021a      	lsls	r2, r3, #8
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	689b      	ldr	r3, [r3, #8]
 801397e:	431a      	orrs	r2, r3
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	89fb      	ldrh	r3, [r7, #14]
 801398a:	1c59      	adds	r1, r3, #1
 801398c:	81f9      	strh	r1, [r7, #14]
 801398e:	4413      	add	r3, r2
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	041a      	lsls	r2, r3, #16
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	689b      	ldr	r3, [r3, #8]
 8013998:	431a      	orrs	r2, r3
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	89fb      	ldrh	r3, [r7, #14]
 80139a4:	1c59      	adds	r1, r3, #1
 80139a6:	81f9      	strh	r1, [r7, #14]
 80139a8:	4413      	add	r3, r2
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	061a      	lsls	r2, r3, #24
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	689b      	ldr	r3, [r3, #8]
 80139b2:	431a      	orrs	r2, r3
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681a      	ldr	r2, [r3, #0]
 80139bc:	89fb      	ldrh	r3, [r7, #14]
 80139be:	1c59      	adds	r1, r3, #1
 80139c0:	81f9      	strh	r1, [r7, #14]
 80139c2:	4413      	add	r3, r2
 80139c4:	781a      	ldrb	r2, [r3, #0]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681a      	ldr	r2, [r3, #0]
 80139ce:	89fb      	ldrh	r3, [r7, #14]
 80139d0:	1c59      	adds	r1, r3, #1
 80139d2:	81f9      	strh	r1, [r7, #14]
 80139d4:	4413      	add	r3, r2
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	b29a      	uxth	r2, r3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681a      	ldr	r2, [r3, #0]
 80139e2:	89fb      	ldrh	r3, [r7, #14]
 80139e4:	1c59      	adds	r1, r3, #1
 80139e6:	81f9      	strh	r1, [r7, #14]
 80139e8:	4413      	add	r3, r2
 80139ea:	781b      	ldrb	r3, [r3, #0]
 80139ec:	0219      	lsls	r1, r3, #8
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	89db      	ldrh	r3, [r3, #14]
 80139f2:	b21a      	sxth	r2, r3
 80139f4:	b20b      	sxth	r3, r1
 80139f6:	4313      	orrs	r3, r2
 80139f8:	b21b      	sxth	r3, r3
 80139fa:	b29a      	uxth	r2, r3
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	f103 0010 	add.w	r0, r3, #16
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	681a      	ldr	r2, [r3, #0]
 8013a0a:	89fb      	ldrh	r3, [r7, #14]
 8013a0c:	18d1      	adds	r1, r2, r3
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	7b1b      	ldrb	r3, [r3, #12]
 8013a12:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013a16:	b2db      	uxtb	r3, r3
 8013a18:	b29b      	uxth	r3, r3
 8013a1a:	461a      	mov	r2, r3
 8013a1c:	f002 fd0b 	bl	8016436 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	7b1b      	ldrb	r3, [r3, #12]
 8013a24:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013a28:	b2db      	uxtb	r3, r3
 8013a2a:	b29a      	uxth	r2, r3
 8013a2c:	89fb      	ldrh	r3, [r7, #14]
 8013a2e:	4413      	add	r3, r2
 8013a30:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	2200      	movs	r2, #0
 8013a36:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	791b      	ldrb	r3, [r3, #4]
 8013a46:	461a      	mov	r2, r3
 8013a48:	89fb      	ldrh	r3, [r7, #14]
 8013a4a:	1ad3      	subs	r3, r2, r3
 8013a4c:	2b04      	cmp	r3, #4
 8013a4e:	dd28      	ble.n	8013aa2 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681a      	ldr	r2, [r3, #0]
 8013a54:	89fb      	ldrh	r3, [r7, #14]
 8013a56:	1c59      	adds	r1, r3, #1
 8013a58:	81f9      	strh	r1, [r7, #14]
 8013a5a:	4413      	add	r3, r2
 8013a5c:	781a      	ldrb	r2, [r3, #0]
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	791a      	ldrb	r2, [r3, #4]
 8013a68:	89fb      	ldrh	r3, [r7, #14]
 8013a6a:	b2db      	uxtb	r3, r3
 8013a6c:	1ad3      	subs	r3, r2, r3
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	3b04      	subs	r3, #4
 8013a72:	b2da      	uxtb	r2, r3
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681a      	ldr	r2, [r3, #0]
 8013a82:	89fb      	ldrh	r3, [r7, #14]
 8013a84:	18d1      	adds	r1, r2, r3
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a8c:	b29b      	uxth	r3, r3
 8013a8e:	461a      	mov	r2, r3
 8013a90:	f002 fcd1 	bl	8016436 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a9a:	b29a      	uxth	r2, r3
 8013a9c:	89fb      	ldrh	r3, [r7, #14]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	681a      	ldr	r2, [r3, #0]
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	791b      	ldrb	r3, [r3, #4]
 8013aaa:	3b04      	subs	r3, #4
 8013aac:	4413      	add	r3, r2
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6819      	ldr	r1, [r3, #0]
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	791b      	ldrb	r3, [r3, #4]
 8013ac2:	3b03      	subs	r3, #3
 8013ac4:	440b      	add	r3, r1
 8013ac6:	781b      	ldrb	r3, [r3, #0]
 8013ac8:	021b      	lsls	r3, r3, #8
 8013aca:	431a      	orrs	r2, r3
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6819      	ldr	r1, [r3, #0]
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	791b      	ldrb	r3, [r3, #4]
 8013adc:	3b02      	subs	r3, #2
 8013ade:	440b      	add	r3, r1
 8013ae0:	781b      	ldrb	r3, [r3, #0]
 8013ae2:	041b      	lsls	r3, r3, #16
 8013ae4:	431a      	orrs	r2, r3
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	6819      	ldr	r1, [r3, #0]
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	791b      	ldrb	r3, [r3, #4]
 8013af6:	3b01      	subs	r3, #1
 8013af8:	440b      	add	r3, r1
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	061b      	lsls	r3, r3, #24
 8013afe:	431a      	orrs	r2, r3
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013b04:	2300      	movs	r3, #0
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3710      	adds	r7, #16
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}

08013b0e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013b0e:	b580      	push	{r7, lr}
 8013b10:	b084      	sub	sp, #16
 8013b12:	af00      	add	r7, sp, #0
 8013b14:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d003      	beq.n	8013b24 <LoRaMacSerializerJoinRequest+0x16>
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d101      	bne.n	8013b28 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013b24:	2301      	movs	r3, #1
 8013b26:	e070      	b.n	8013c0a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	791b      	ldrb	r3, [r3, #4]
 8013b30:	2b16      	cmp	r3, #22
 8013b32:	d801      	bhi.n	8013b38 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013b34:	2302      	movs	r3, #2
 8013b36:	e068      	b.n	8013c0a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681a      	ldr	r2, [r3, #0]
 8013b3c:	89fb      	ldrh	r3, [r7, #14]
 8013b3e:	1c59      	adds	r1, r3, #1
 8013b40:	81f9      	strh	r1, [r7, #14]
 8013b42:	4413      	add	r3, r2
 8013b44:	687a      	ldr	r2, [r7, #4]
 8013b46:	7952      	ldrb	r2, [r2, #5]
 8013b48:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681a      	ldr	r2, [r3, #0]
 8013b4e:	89fb      	ldrh	r3, [r7, #14]
 8013b50:	18d0      	adds	r0, r2, r3
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	3306      	adds	r3, #6
 8013b56:	2208      	movs	r2, #8
 8013b58:	4619      	mov	r1, r3
 8013b5a:	f002 fc87 	bl	801646c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013b5e:	89fb      	ldrh	r3, [r7, #14]
 8013b60:	3308      	adds	r3, #8
 8013b62:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681a      	ldr	r2, [r3, #0]
 8013b68:	89fb      	ldrh	r3, [r7, #14]
 8013b6a:	18d0      	adds	r0, r2, r3
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	330e      	adds	r3, #14
 8013b70:	2208      	movs	r2, #8
 8013b72:	4619      	mov	r1, r3
 8013b74:	f002 fc7a 	bl	801646c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013b78:	89fb      	ldrh	r3, [r7, #14]
 8013b7a:	3308      	adds	r3, #8
 8013b7c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	8ad9      	ldrh	r1, [r3, #22]
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681a      	ldr	r2, [r3, #0]
 8013b86:	89fb      	ldrh	r3, [r7, #14]
 8013b88:	1c58      	adds	r0, r3, #1
 8013b8a:	81f8      	strh	r0, [r7, #14]
 8013b8c:	4413      	add	r3, r2
 8013b8e:	b2ca      	uxtb	r2, r1
 8013b90:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	8adb      	ldrh	r3, [r3, #22]
 8013b96:	0a1b      	lsrs	r3, r3, #8
 8013b98:	b299      	uxth	r1, r3
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	681a      	ldr	r2, [r3, #0]
 8013b9e:	89fb      	ldrh	r3, [r7, #14]
 8013ba0:	1c58      	adds	r0, r3, #1
 8013ba2:	81f8      	strh	r0, [r7, #14]
 8013ba4:	4413      	add	r3, r2
 8013ba6:	b2ca      	uxtb	r2, r1
 8013ba8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	6999      	ldr	r1, [r3, #24]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	681a      	ldr	r2, [r3, #0]
 8013bb2:	89fb      	ldrh	r3, [r7, #14]
 8013bb4:	1c58      	adds	r0, r3, #1
 8013bb6:	81f8      	strh	r0, [r7, #14]
 8013bb8:	4413      	add	r3, r2
 8013bba:	b2ca      	uxtb	r2, r1
 8013bbc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	699b      	ldr	r3, [r3, #24]
 8013bc2:	0a19      	lsrs	r1, r3, #8
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681a      	ldr	r2, [r3, #0]
 8013bc8:	89fb      	ldrh	r3, [r7, #14]
 8013bca:	1c58      	adds	r0, r3, #1
 8013bcc:	81f8      	strh	r0, [r7, #14]
 8013bce:	4413      	add	r3, r2
 8013bd0:	b2ca      	uxtb	r2, r1
 8013bd2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	699b      	ldr	r3, [r3, #24]
 8013bd8:	0c19      	lsrs	r1, r3, #16
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	681a      	ldr	r2, [r3, #0]
 8013bde:	89fb      	ldrh	r3, [r7, #14]
 8013be0:	1c58      	adds	r0, r3, #1
 8013be2:	81f8      	strh	r0, [r7, #14]
 8013be4:	4413      	add	r3, r2
 8013be6:	b2ca      	uxtb	r2, r1
 8013be8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	699b      	ldr	r3, [r3, #24]
 8013bee:	0e19      	lsrs	r1, r3, #24
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681a      	ldr	r2, [r3, #0]
 8013bf4:	89fb      	ldrh	r3, [r7, #14]
 8013bf6:	1c58      	adds	r0, r3, #1
 8013bf8:	81f8      	strh	r0, [r7, #14]
 8013bfa:	4413      	add	r3, r2
 8013bfc:	b2ca      	uxtb	r2, r1
 8013bfe:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013c00:	89fb      	ldrh	r3, [r7, #14]
 8013c02:	b2da      	uxtb	r2, r3
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013c08:	2300      	movs	r3, #0
}
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	3710      	adds	r7, #16
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd80      	pop	{r7, pc}

08013c12 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013c12:	b580      	push	{r7, lr}
 8013c14:	b084      	sub	sp, #16
 8013c16:	af00      	add	r7, sp, #0
 8013c18:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d003      	beq.n	8013c28 <LoRaMacSerializerData+0x16>
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d101      	bne.n	8013c2c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013c28:	2301      	movs	r3, #1
 8013c2a:	e0e5      	b.n	8013df8 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013c30:	2308      	movs	r3, #8
 8013c32:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	7b1b      	ldrb	r3, [r3, #12]
 8013c38:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013c3c:	b2db      	uxtb	r3, r3
 8013c3e:	b29a      	uxth	r2, r3
 8013c40:	89bb      	ldrh	r3, [r7, #12]
 8013c42:	4413      	add	r3, r2
 8013c44:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d002      	beq.n	8013c56 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013c50:	89bb      	ldrh	r3, [r7, #12]
 8013c52:	3301      	adds	r3, #1
 8013c54:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c5c:	b29a      	uxth	r2, r3
 8013c5e:	89bb      	ldrh	r3, [r7, #12]
 8013c60:	4413      	add	r3, r2
 8013c62:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013c64:	89bb      	ldrh	r3, [r7, #12]
 8013c66:	3304      	adds	r3, #4
 8013c68:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	791b      	ldrb	r3, [r3, #4]
 8013c6e:	b29b      	uxth	r3, r3
 8013c70:	89ba      	ldrh	r2, [r7, #12]
 8013c72:	429a      	cmp	r2, r3
 8013c74:	d901      	bls.n	8013c7a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013c76:	2302      	movs	r3, #2
 8013c78:	e0be      	b.n	8013df8 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681a      	ldr	r2, [r3, #0]
 8013c7e:	89fb      	ldrh	r3, [r7, #14]
 8013c80:	1c59      	adds	r1, r3, #1
 8013c82:	81f9      	strh	r1, [r7, #14]
 8013c84:	4413      	add	r3, r2
 8013c86:	687a      	ldr	r2, [r7, #4]
 8013c88:	7952      	ldrb	r2, [r2, #5]
 8013c8a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6899      	ldr	r1, [r3, #8]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	681a      	ldr	r2, [r3, #0]
 8013c94:	89fb      	ldrh	r3, [r7, #14]
 8013c96:	1c58      	adds	r0, r3, #1
 8013c98:	81f8      	strh	r0, [r7, #14]
 8013c9a:	4413      	add	r3, r2
 8013c9c:	b2ca      	uxtb	r2, r1
 8013c9e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	689b      	ldr	r3, [r3, #8]
 8013ca4:	0a19      	lsrs	r1, r3, #8
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	681a      	ldr	r2, [r3, #0]
 8013caa:	89fb      	ldrh	r3, [r7, #14]
 8013cac:	1c58      	adds	r0, r3, #1
 8013cae:	81f8      	strh	r0, [r7, #14]
 8013cb0:	4413      	add	r3, r2
 8013cb2:	b2ca      	uxtb	r2, r1
 8013cb4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	689b      	ldr	r3, [r3, #8]
 8013cba:	0c19      	lsrs	r1, r3, #16
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	89fb      	ldrh	r3, [r7, #14]
 8013cc2:	1c58      	adds	r0, r3, #1
 8013cc4:	81f8      	strh	r0, [r7, #14]
 8013cc6:	4413      	add	r3, r2
 8013cc8:	b2ca      	uxtb	r2, r1
 8013cca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	689b      	ldr	r3, [r3, #8]
 8013cd0:	0e19      	lsrs	r1, r3, #24
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681a      	ldr	r2, [r3, #0]
 8013cd6:	89fb      	ldrh	r3, [r7, #14]
 8013cd8:	1c58      	adds	r0, r3, #1
 8013cda:	81f8      	strh	r0, [r7, #14]
 8013cdc:	4413      	add	r3, r2
 8013cde:	b2ca      	uxtb	r2, r1
 8013ce0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681a      	ldr	r2, [r3, #0]
 8013ce6:	89fb      	ldrh	r3, [r7, #14]
 8013ce8:	1c59      	adds	r1, r3, #1
 8013cea:	81f9      	strh	r1, [r7, #14]
 8013cec:	4413      	add	r3, r2
 8013cee:	687a      	ldr	r2, [r7, #4]
 8013cf0:	7b12      	ldrb	r2, [r2, #12]
 8013cf2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	89d9      	ldrh	r1, [r3, #14]
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	681a      	ldr	r2, [r3, #0]
 8013cfc:	89fb      	ldrh	r3, [r7, #14]
 8013cfe:	1c58      	adds	r0, r3, #1
 8013d00:	81f8      	strh	r0, [r7, #14]
 8013d02:	4413      	add	r3, r2
 8013d04:	b2ca      	uxtb	r2, r1
 8013d06:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	89db      	ldrh	r3, [r3, #14]
 8013d0c:	0a1b      	lsrs	r3, r3, #8
 8013d0e:	b299      	uxth	r1, r3
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681a      	ldr	r2, [r3, #0]
 8013d14:	89fb      	ldrh	r3, [r7, #14]
 8013d16:	1c58      	adds	r0, r3, #1
 8013d18:	81f8      	strh	r0, [r7, #14]
 8013d1a:	4413      	add	r3, r2
 8013d1c:	b2ca      	uxtb	r2, r1
 8013d1e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681a      	ldr	r2, [r3, #0]
 8013d24:	89fb      	ldrh	r3, [r7, #14]
 8013d26:	18d0      	adds	r0, r2, r3
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f103 0110 	add.w	r1, r3, #16
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	7b1b      	ldrb	r3, [r3, #12]
 8013d32:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013d36:	b2db      	uxtb	r3, r3
 8013d38:	b29b      	uxth	r3, r3
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	f002 fb7b 	bl	8016436 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	7b1b      	ldrb	r3, [r3, #12]
 8013d44:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013d48:	b2db      	uxtb	r3, r3
 8013d4a:	b29a      	uxth	r2, r3
 8013d4c:	89fb      	ldrh	r3, [r7, #14]
 8013d4e:	4413      	add	r3, r2
 8013d50:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d009      	beq.n	8013d70 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	89fb      	ldrh	r3, [r7, #14]
 8013d62:	1c59      	adds	r1, r3, #1
 8013d64:	81f9      	strh	r1, [r7, #14]
 8013d66:	4413      	add	r3, r2
 8013d68:	687a      	ldr	r2, [r7, #4]
 8013d6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013d6e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	89fb      	ldrh	r3, [r7, #14]
 8013d76:	18d0      	adds	r0, r2, r3
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	461a      	mov	r2, r3
 8013d86:	f002 fb56 	bl	8016436 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d90:	b29a      	uxth	r2, r3
 8013d92:	89fb      	ldrh	r3, [r7, #14]
 8013d94:	4413      	add	r3, r2
 8013d96:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681a      	ldr	r2, [r3, #0]
 8013da0:	89fb      	ldrh	r3, [r7, #14]
 8013da2:	1c58      	adds	r0, r3, #1
 8013da4:	81f8      	strh	r0, [r7, #14]
 8013da6:	4413      	add	r3, r2
 8013da8:	b2ca      	uxtb	r2, r1
 8013daa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013db0:	0a19      	lsrs	r1, r3, #8
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	681a      	ldr	r2, [r3, #0]
 8013db6:	89fb      	ldrh	r3, [r7, #14]
 8013db8:	1c58      	adds	r0, r3, #1
 8013dba:	81f8      	strh	r0, [r7, #14]
 8013dbc:	4413      	add	r3, r2
 8013dbe:	b2ca      	uxtb	r2, r1
 8013dc0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dc6:	0c19      	lsrs	r1, r3, #16
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681a      	ldr	r2, [r3, #0]
 8013dcc:	89fb      	ldrh	r3, [r7, #14]
 8013dce:	1c58      	adds	r0, r3, #1
 8013dd0:	81f8      	strh	r0, [r7, #14]
 8013dd2:	4413      	add	r3, r2
 8013dd4:	b2ca      	uxtb	r2, r1
 8013dd6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ddc:	0e19      	lsrs	r1, r3, #24
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	681a      	ldr	r2, [r3, #0]
 8013de2:	89fb      	ldrh	r3, [r7, #14]
 8013de4:	1c58      	adds	r0, r3, #1
 8013de6:	81f8      	strh	r0, [r7, #14]
 8013de8:	4413      	add	r3, r2
 8013dea:	b2ca      	uxtb	r2, r1
 8013dec:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013dee:	89fb      	ldrh	r3, [r7, #14]
 8013df0:	b2da      	uxtb	r2, r3
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013df6:	2300      	movs	r3, #0
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3710      	adds	r7, #16
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8013e00:	b480      	push	{r7}
 8013e02:	b083      	sub	sp, #12
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	4603      	mov	r3, r0
 8013e08:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e0a:	79fb      	ldrb	r3, [r7, #7]
 8013e0c:	2b05      	cmp	r3, #5
 8013e0e:	d101      	bne.n	8013e14 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8013e10:	2301      	movs	r3, #1
 8013e12:	e000      	b.n	8013e16 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8013e14:	2300      	movs	r3, #0
        }
    }
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	370c      	adds	r7, #12
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bc80      	pop	{r7}
 8013e1e:	4770      	bx	lr

08013e20 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b084      	sub	sp, #16
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	4603      	mov	r3, r0
 8013e28:	6039      	str	r1, [r7, #0]
 8013e2a:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	60bb      	str	r3, [r7, #8]
    switch( region )
 8013e30:	79fb      	ldrb	r3, [r7, #7]
 8013e32:	2b05      	cmp	r3, #5
 8013e34:	d105      	bne.n	8013e42 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8013e36:	6838      	ldr	r0, [r7, #0]
 8013e38:	f001 f992 	bl	8015160 <RegionEU868GetPhyParam>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	60fb      	str	r3, [r7, #12]
 8013e40:	e001      	b.n	8013e46 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	60fb      	str	r3, [r7, #12]
 8013e46:	2300      	movs	r3, #0
 8013e48:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	3710      	adds	r7, #16
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}

08013e52 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8013e52:	b580      	push	{r7, lr}
 8013e54:	b082      	sub	sp, #8
 8013e56:	af00      	add	r7, sp, #0
 8013e58:	4603      	mov	r3, r0
 8013e5a:	6039      	str	r1, [r7, #0]
 8013e5c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e5e:	79fb      	ldrb	r3, [r7, #7]
 8013e60:	2b05      	cmp	r3, #5
 8013e62:	d103      	bne.n	8013e6c <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8013e64:	6838      	ldr	r0, [r7, #0]
 8013e66:	f001 fac5 	bl	80153f4 <RegionEU868SetBandTxDone>
 8013e6a:	e000      	b.n	8013e6e <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013e6c:	bf00      	nop
        }
    }
}
 8013e6e:	3708      	adds	r7, #8
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	6039      	str	r1, [r7, #0]
 8013e7e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e80:	79fb      	ldrb	r3, [r7, #7]
 8013e82:	2b05      	cmp	r3, #5
 8013e84:	d103      	bne.n	8013e8e <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8013e86:	6838      	ldr	r0, [r7, #0]
 8013e88:	f001 fae0 	bl	801544c <RegionEU868InitDefaults>
 8013e8c:	e000      	b.n	8013e90 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8013e8e:	bf00      	nop
        }
    }
}
 8013e90:	bf00      	nop
 8013e92:	3708      	adds	r7, #8
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	6039      	str	r1, [r7, #0]
 8013ea2:	71fb      	strb	r3, [r7, #7]
 8013ea4:	4613      	mov	r3, r2
 8013ea6:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8013ea8:	79fb      	ldrb	r3, [r7, #7]
 8013eaa:	2b05      	cmp	r3, #5
 8013eac:	d106      	bne.n	8013ebc <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013eae:	79bb      	ldrb	r3, [r7, #6]
 8013eb0:	4619      	mov	r1, r3
 8013eb2:	6838      	ldr	r0, [r7, #0]
 8013eb4:	f001 fb66 	bl	8015584 <RegionEU868Verify>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	e000      	b.n	8013ebe <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8013ebc:	2300      	movs	r3, #0
        }
    }
}
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	3708      	adds	r7, #8
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}

08013ec6 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8013ec6:	b580      	push	{r7, lr}
 8013ec8:	b082      	sub	sp, #8
 8013eca:	af00      	add	r7, sp, #0
 8013ecc:	4603      	mov	r3, r0
 8013ece:	6039      	str	r1, [r7, #0]
 8013ed0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013ed2:	79fb      	ldrb	r3, [r7, #7]
 8013ed4:	2b05      	cmp	r3, #5
 8013ed6:	d103      	bne.n	8013ee0 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8013ed8:	6838      	ldr	r0, [r7, #0]
 8013eda:	f001 fbcf 	bl	801567c <RegionEU868ApplyCFList>
 8013ede:	e000      	b.n	8013ee2 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013ee0:	bf00      	nop
        }
    }
}
 8013ee2:	bf00      	nop
 8013ee4:	3708      	adds	r7, #8
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}

08013eea <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013eea:	b580      	push	{r7, lr}
 8013eec:	b082      	sub	sp, #8
 8013eee:	af00      	add	r7, sp, #0
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	6039      	str	r1, [r7, #0]
 8013ef4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013ef6:	79fb      	ldrb	r3, [r7, #7]
 8013ef8:	2b05      	cmp	r3, #5
 8013efa:	d104      	bne.n	8013f06 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013efc:	6838      	ldr	r0, [r7, #0]
 8013efe:	f001 fc31 	bl	8015764 <RegionEU868ChanMaskSet>
 8013f02:	4603      	mov	r3, r0
 8013f04:	e000      	b.n	8013f08 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8013f06:	2300      	movs	r3, #0
        }
    }
}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3708      	adds	r7, #8
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b082      	sub	sp, #8
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	603b      	str	r3, [r7, #0]
 8013f18:	4603      	mov	r3, r0
 8013f1a:	71fb      	strb	r3, [r7, #7]
 8013f1c:	460b      	mov	r3, r1
 8013f1e:	71bb      	strb	r3, [r7, #6]
 8013f20:	4613      	mov	r3, r2
 8013f22:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013f24:	79fb      	ldrb	r3, [r7, #7]
 8013f26:	2b05      	cmp	r3, #5
 8013f28:	d107      	bne.n	8013f3a <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013f2a:	7979      	ldrb	r1, [r7, #5]
 8013f2c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013f30:	693b      	ldr	r3, [r7, #16]
 8013f32:	683a      	ldr	r2, [r7, #0]
 8013f34:	f001 fc40 	bl	80157b8 <RegionEU868ComputeRxWindowParameters>
 8013f38:	e000      	b.n	8013f3c <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8013f3a:	bf00      	nop
        }
    }
}
 8013f3c:	bf00      	nop
 8013f3e:	3708      	adds	r7, #8
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}

08013f44 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b084      	sub	sp, #16
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	60b9      	str	r1, [r7, #8]
 8013f4e:	607a      	str	r2, [r7, #4]
 8013f50:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f52:	7bfb      	ldrb	r3, [r7, #15]
 8013f54:	2b05      	cmp	r3, #5
 8013f56:	d105      	bne.n	8013f64 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013f58:	6879      	ldr	r1, [r7, #4]
 8013f5a:	68b8      	ldr	r0, [r7, #8]
 8013f5c:	f001 fc86 	bl	801586c <RegionEU868RxConfig>
 8013f60:	4603      	mov	r3, r0
 8013f62:	e000      	b.n	8013f66 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013f64:	2300      	movs	r3, #0
        }
    }
}
 8013f66:	4618      	mov	r0, r3
 8013f68:	3710      	adds	r7, #16
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd80      	pop	{r7, pc}

08013f6e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013f6e:	b580      	push	{r7, lr}
 8013f70:	b084      	sub	sp, #16
 8013f72:	af00      	add	r7, sp, #0
 8013f74:	60b9      	str	r1, [r7, #8]
 8013f76:	607a      	str	r2, [r7, #4]
 8013f78:	603b      	str	r3, [r7, #0]
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f7e:	7bfb      	ldrb	r3, [r7, #15]
 8013f80:	2b05      	cmp	r3, #5
 8013f82:	d106      	bne.n	8013f92 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013f84:	683a      	ldr	r2, [r7, #0]
 8013f86:	6879      	ldr	r1, [r7, #4]
 8013f88:	68b8      	ldr	r0, [r7, #8]
 8013f8a:	f001 fd3f 	bl	8015a0c <RegionEU868TxConfig>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	e000      	b.n	8013f94 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013f92:	2300      	movs	r3, #0
        }
    }
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	3710      	adds	r7, #16
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	bd80      	pop	{r7, pc}

08013f9c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b086      	sub	sp, #24
 8013fa0:	af02      	add	r7, sp, #8
 8013fa2:	60b9      	str	r1, [r7, #8]
 8013fa4:	607a      	str	r2, [r7, #4]
 8013fa6:	603b      	str	r3, [r7, #0]
 8013fa8:	4603      	mov	r3, r0
 8013faa:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013fac:	7bfb      	ldrb	r3, [r7, #15]
 8013fae:	2b05      	cmp	r3, #5
 8013fb0:	d109      	bne.n	8013fc6 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013fb2:	69fb      	ldr	r3, [r7, #28]
 8013fb4:	9300      	str	r3, [sp, #0]
 8013fb6:	69bb      	ldr	r3, [r7, #24]
 8013fb8:	683a      	ldr	r2, [r7, #0]
 8013fba:	6879      	ldr	r1, [r7, #4]
 8013fbc:	68b8      	ldr	r0, [r7, #8]
 8013fbe:	f001 fdf5 	bl	8015bac <RegionEU868LinkAdrReq>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	e000      	b.n	8013fc8 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8013fc6:	2300      	movs	r3, #0
        }
    }
}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3710      	adds	r7, #16
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	6039      	str	r1, [r7, #0]
 8013fda:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013fdc:	79fb      	ldrb	r3, [r7, #7]
 8013fde:	2b05      	cmp	r3, #5
 8013fe0:	d104      	bne.n	8013fec <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8013fe2:	6838      	ldr	r0, [r7, #0]
 8013fe4:	f001 ff04 	bl	8015df0 <RegionEU868RxParamSetupReq>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	e000      	b.n	8013fee <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013fec:	2300      	movs	r3, #0
        }
    }
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3708      	adds	r7, #8
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}

08013ff6 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8013ff6:	b580      	push	{r7, lr}
 8013ff8:	b082      	sub	sp, #8
 8013ffa:	af00      	add	r7, sp, #0
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	6039      	str	r1, [r7, #0]
 8014000:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014002:	79fb      	ldrb	r3, [r7, #7]
 8014004:	2b05      	cmp	r3, #5
 8014006:	d104      	bne.n	8014012 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8014008:	6838      	ldr	r0, [r7, #0]
 801400a:	f001 ff2f 	bl	8015e6c <RegionEU868NewChannelReq>
 801400e:	4603      	mov	r3, r0
 8014010:	e000      	b.n	8014014 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014012:	2300      	movs	r3, #0
        }
    }
}
 8014014:	4618      	mov	r0, r3
 8014016:	3708      	adds	r7, #8
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}

0801401c <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b082      	sub	sp, #8
 8014020:	af00      	add	r7, sp, #0
 8014022:	4603      	mov	r3, r0
 8014024:	6039      	str	r1, [r7, #0]
 8014026:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014028:	79fb      	ldrb	r3, [r7, #7]
 801402a:	2b05      	cmp	r3, #5
 801402c:	d104      	bne.n	8014038 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801402e:	6838      	ldr	r0, [r7, #0]
 8014030:	f001 ff7a 	bl	8015f28 <RegionEU868TxParamSetupReq>
 8014034:	4603      	mov	r3, r0
 8014036:	e000      	b.n	801403a <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014038:	2300      	movs	r3, #0
        }
    }
}
 801403a:	4618      	mov	r0, r3
 801403c:	3708      	adds	r7, #8
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}

08014042 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014042:	b580      	push	{r7, lr}
 8014044:	b082      	sub	sp, #8
 8014046:	af00      	add	r7, sp, #0
 8014048:	4603      	mov	r3, r0
 801404a:	6039      	str	r1, [r7, #0]
 801404c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801404e:	79fb      	ldrb	r3, [r7, #7]
 8014050:	2b05      	cmp	r3, #5
 8014052:	d104      	bne.n	801405e <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8014054:	6838      	ldr	r0, [r7, #0]
 8014056:	f001 ff73 	bl	8015f40 <RegionEU868DlChannelReq>
 801405a:	4603      	mov	r3, r0
 801405c:	e000      	b.n	8014060 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801405e:	2300      	movs	r3, #0
        }
    }
}
 8014060:	4618      	mov	r0, r3
 8014062:	3708      	adds	r7, #8
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}

08014068 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b082      	sub	sp, #8
 801406c:	af00      	add	r7, sp, #0
 801406e:	4603      	mov	r3, r0
 8014070:	71fb      	strb	r3, [r7, #7]
 8014072:	460b      	mov	r3, r1
 8014074:	71bb      	strb	r3, [r7, #6]
 8014076:	4613      	mov	r3, r2
 8014078:	717b      	strb	r3, [r7, #5]
    switch( region )
 801407a:	79fb      	ldrb	r3, [r7, #7]
 801407c:	2b05      	cmp	r3, #5
 801407e:	d108      	bne.n	8014092 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8014080:	797a      	ldrb	r2, [r7, #5]
 8014082:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014086:	4611      	mov	r1, r2
 8014088:	4618      	mov	r0, r3
 801408a:	f001 ff9d 	bl	8015fc8 <RegionEU868AlternateDr>
 801408e:	4603      	mov	r3, r0
 8014090:	e000      	b.n	8014094 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014092:	2300      	movs	r3, #0
        }
    }
}
 8014094:	4618      	mov	r0, r3
 8014096:	3708      	adds	r7, #8
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}

0801409c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b084      	sub	sp, #16
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	60b9      	str	r1, [r7, #8]
 80140a4:	607a      	str	r2, [r7, #4]
 80140a6:	603b      	str	r3, [r7, #0]
 80140a8:	4603      	mov	r3, r0
 80140aa:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80140ac:	7bfb      	ldrb	r3, [r7, #15]
 80140ae:	2b05      	cmp	r3, #5
 80140b0:	d107      	bne.n	80140c2 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80140b2:	69bb      	ldr	r3, [r7, #24]
 80140b4:	683a      	ldr	r2, [r7, #0]
 80140b6:	6879      	ldr	r1, [r7, #4]
 80140b8:	68b8      	ldr	r0, [r7, #8]
 80140ba:	f001 ff95 	bl	8015fe8 <RegionEU868NextChannel>
 80140be:	4603      	mov	r3, r0
 80140c0:	e000      	b.n	80140c4 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80140c2:	2309      	movs	r3, #9
        }
    }
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	3710      	adds	r7, #16
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}

080140cc <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b082      	sub	sp, #8
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	4603      	mov	r3, r0
 80140d4:	6039      	str	r1, [r7, #0]
 80140d6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80140d8:	79fb      	ldrb	r3, [r7, #7]
 80140da:	2b05      	cmp	r3, #5
 80140dc:	d103      	bne.n	80140e6 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80140de:	6838      	ldr	r0, [r7, #0]
 80140e0:	f002 f8fa 	bl	80162d8 <RegionEU868SetContinuousWave>
 80140e4:	e000      	b.n	80140e8 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80140e6:	bf00      	nop
        }
    }
}
 80140e8:	bf00      	nop
 80140ea:	3708      	adds	r7, #8
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}

080140f0 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80140f0:	b590      	push	{r4, r7, lr}
 80140f2:	b083      	sub	sp, #12
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	4604      	mov	r4, r0
 80140f8:	4608      	mov	r0, r1
 80140fa:	4611      	mov	r1, r2
 80140fc:	461a      	mov	r2, r3
 80140fe:	4623      	mov	r3, r4
 8014100:	71fb      	strb	r3, [r7, #7]
 8014102:	4603      	mov	r3, r0
 8014104:	71bb      	strb	r3, [r7, #6]
 8014106:	460b      	mov	r3, r1
 8014108:	717b      	strb	r3, [r7, #5]
 801410a:	4613      	mov	r3, r2
 801410c:	713b      	strb	r3, [r7, #4]
    switch( region )
 801410e:	79fb      	ldrb	r3, [r7, #7]
 8014110:	2b05      	cmp	r3, #5
 8014112:	d109      	bne.n	8014128 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8014114:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014118:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801411c:	79bb      	ldrb	r3, [r7, #6]
 801411e:	4618      	mov	r0, r3
 8014120:	f002 f928 	bl	8016374 <RegionEU868ApplyDrOffset>
 8014124:	4603      	mov	r3, r0
 8014126:	e000      	b.n	801412a <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014128:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801412a:	4618      	mov	r0, r3
 801412c:	370c      	adds	r7, #12
 801412e:	46bd      	mov	sp, r7
 8014130:	bd90      	pop	{r4, r7, pc}
	...

08014134 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014134:	b480      	push	{r7}
 8014136:	b083      	sub	sp, #12
 8014138:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801413a:	4b04      	ldr	r3, [pc, #16]	; (801414c <RegionGetVersion+0x18>)
 801413c:	607b      	str	r3, [r7, #4]

    return version;
 801413e:	687b      	ldr	r3, [r7, #4]
}
 8014140:	4618      	mov	r0, r3
 8014142:	370c      	adds	r7, #12
 8014144:	46bd      	mov	sp, r7
 8014146:	bc80      	pop	{r7}
 8014148:	4770      	bx	lr
 801414a:	bf00      	nop
 801414c:	01000300 	.word	0x01000300

08014150 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014150:	b480      	push	{r7}
 8014152:	b087      	sub	sp, #28
 8014154:	af00      	add	r7, sp, #0
 8014156:	60f8      	str	r0, [r7, #12]
 8014158:	4608      	mov	r0, r1
 801415a:	4639      	mov	r1, r7
 801415c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014160:	4603      	mov	r3, r0
 8014162:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	881b      	ldrh	r3, [r3, #0]
 8014168:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801416a:	7afb      	ldrb	r3, [r7, #11]
 801416c:	f083 0301 	eor.w	r3, r3, #1
 8014170:	b2db      	uxtb	r3, r3
 8014172:	2b00      	cmp	r3, #0
 8014174:	d01b      	beq.n	80141ae <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014176:	f242 7310 	movw	r3, #10000	; 0x2710
 801417a:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8014182:	d202      	bcs.n	801418a <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014184:	2364      	movs	r3, #100	; 0x64
 8014186:	82bb      	strh	r3, [r7, #20]
 8014188:	e00b      	b.n	80141a2 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801418a:	683b      	ldr	r3, [r7, #0]
 801418c:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8014190:	4293      	cmp	r3, r2
 8014192:	d803      	bhi.n	801419c <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014198:	82bb      	strh	r3, [r7, #20]
 801419a:	e002      	b.n	80141a2 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801419c:	f242 7310 	movw	r3, #10000	; 0x2710
 80141a0:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80141a2:	8aba      	ldrh	r2, [r7, #20]
 80141a4:	8afb      	ldrh	r3, [r7, #22]
 80141a6:	4293      	cmp	r3, r2
 80141a8:	bf38      	it	cc
 80141aa:	4613      	movcc	r3, r2
 80141ac:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80141ae:	8afb      	ldrh	r3, [r7, #22]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d101      	bne.n	80141b8 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80141b4:	2301      	movs	r3, #1
 80141b6:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80141b8:	8afb      	ldrh	r3, [r7, #22]
}
 80141ba:	4618      	mov	r0, r3
 80141bc:	371c      	adds	r7, #28
 80141be:	46bd      	mov	sp, r7
 80141c0:	bc80      	pop	{r7}
 80141c2:	4770      	bx	lr

080141c4 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b08e      	sub	sp, #56	; 0x38
 80141c8:	af02      	add	r7, sp, #8
 80141ca:	60f8      	str	r0, [r7, #12]
 80141cc:	4608      	mov	r0, r1
 80141ce:	4639      	mov	r1, r7
 80141d0:	e881 000c 	stmia.w	r1, {r2, r3}
 80141d4:	4603      	mov	r3, r0
 80141d6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	881b      	ldrh	r3, [r3, #0]
 80141dc:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80141de:	4b4b      	ldr	r3, [pc, #300]	; (801430c <SetMaxTimeCredits+0x148>)
 80141e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80141e2:	463b      	mov	r3, r7
 80141e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80141e8:	f005 fc2a 	bl	8019a40 <SysTimeToMs>
 80141ec:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80141ee:	f107 0314 	add.w	r3, r7, #20
 80141f2:	2200      	movs	r2, #0
 80141f4:	601a      	str	r2, [r3, #0]
 80141f6:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80141f8:	7af9      	ldrb	r1, [r7, #11]
 80141fa:	463b      	mov	r3, r7
 80141fc:	cb0c      	ldmia	r3, {r2, r3}
 80141fe:	68f8      	ldr	r0, [r7, #12]
 8014200:	f7ff ffa6 	bl	8014150 <GetDutyCycle>
 8014204:	4603      	mov	r3, r0
 8014206:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8014208:	7afb      	ldrb	r3, [r7, #11]
 801420a:	f083 0301 	eor.w	r3, r3, #1
 801420e:	b2db      	uxtb	r3, r3
 8014210:	2b00      	cmp	r3, #0
 8014212:	d062      	beq.n	80142da <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014214:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014216:	2b64      	cmp	r3, #100	; 0x64
 8014218:	d105      	bne.n	8014226 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801421a:	4b3c      	ldr	r3, [pc, #240]	; (801430c <SetMaxTimeCredits+0x148>)
 801421c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014222:	609a      	str	r2, [r3, #8]
 8014224:	e00b      	b.n	801423e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014226:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801422c:	d105      	bne.n	801423a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801422e:	4b38      	ldr	r3, [pc, #224]	; (8014310 <SetMaxTimeCredits+0x14c>)
 8014230:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014236:	609a      	str	r2, [r3, #8]
 8014238:	e001      	b.n	801423e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801423a:	4b36      	ldr	r3, [pc, #216]	; (8014314 <SetMaxTimeCredits+0x150>)
 801423c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	689a      	ldr	r2, [r3, #8]
 8014242:	f107 031c 	add.w	r3, r7, #28
 8014246:	4611      	mov	r1, r2
 8014248:	4618      	mov	r0, r3
 801424a:	f005 fc21 	bl	8019a90 <SysTimeFromMs>
 801424e:	f107 0014 	add.w	r0, r7, #20
 8014252:	6a3b      	ldr	r3, [r7, #32]
 8014254:	9300      	str	r3, [sp, #0]
 8014256:	69fb      	ldr	r3, [r7, #28]
 8014258:	463a      	mov	r2, r7
 801425a:	ca06      	ldmia	r2, {r1, r2}
 801425c:	f005 fb31 	bl	80198c2 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014260:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014264:	f083 0301 	eor.w	r3, r3, #1
 8014268:	b2db      	uxtb	r3, r3
 801426a:	2b00      	cmp	r3, #0
 801426c:	d006      	beq.n	801427c <SetMaxTimeCredits+0xb8>
 801426e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014272:	f083 0301 	eor.w	r3, r3, #1
 8014276:	b2db      	uxtb	r3, r3
 8014278:	2b00      	cmp	r3, #0
 801427a:	d108      	bne.n	801428e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014282:	429a      	cmp	r2, r3
 8014284:	d103      	bne.n	801428e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8014286:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014288:	4a23      	ldr	r2, [pc, #140]	; (8014318 <SetMaxTimeCredits+0x154>)
 801428a:	4293      	cmp	r3, r2
 801428c:	d92f      	bls.n	80142ee <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014292:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	4a21      	ldr	r2, [pc, #132]	; (801431c <SetMaxTimeCredits+0x158>)
 8014298:	4293      	cmp	r3, r2
 801429a:	d928      	bls.n	80142ee <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80142a2:	3b30      	subs	r3, #48	; 0x30
 80142a4:	4a1e      	ldr	r2, [pc, #120]	; (8014320 <SetMaxTimeCredits+0x15c>)
 80142a6:	fba2 2303 	umull	r2, r3, r2, r3
 80142aa:	0c1b      	lsrs	r3, r3, #16
 80142ac:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80142ae:	697b      	ldr	r3, [r7, #20]
 80142b0:	4a1c      	ldr	r2, [pc, #112]	; (8014324 <SetMaxTimeCredits+0x160>)
 80142b2:	fb02 f303 	mul.w	r3, r2, r3
 80142b6:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80142b8:	697b      	ldr	r3, [r7, #20]
 80142ba:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80142be:	3330      	adds	r3, #48	; 0x30
 80142c0:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80142c2:	2300      	movs	r3, #0
 80142c4:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80142c6:	f107 0314 	add.w	r3, r7, #20
 80142ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80142ce:	f005 fbb7 	bl	8019a40 <SysTimeToMs>
 80142d2:	4602      	mov	r2, r0
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	609a      	str	r2, [r3, #8]
 80142d8:	e009      	b.n	80142ee <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80142da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80142de:	f083 0301 	eor.w	r3, r3, #1
 80142e2:	b2db      	uxtb	r3, r3
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d002      	beq.n	80142ee <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142ec:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	685b      	ldr	r3, [r3, #4]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d102      	bne.n	80142fc <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142fa:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014300:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8014302:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8014304:	4618      	mov	r0, r3
 8014306:	3730      	adds	r7, #48	; 0x30
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}
 801430c:	001b7740 	.word	0x001b7740
 8014310:	0112a880 	.word	0x0112a880
 8014314:	02932e00 	.word	0x02932e00
 8014318:	0001517f 	.word	0x0001517f
 801431c:	0001ec2f 	.word	0x0001ec2f
 8014320:	c22e4507 	.word	0xc22e4507
 8014324:	00015180 	.word	0x00015180

08014328 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b086      	sub	sp, #24
 801432c:	af02      	add	r7, sp, #8
 801432e:	6078      	str	r0, [r7, #4]
 8014330:	4608      	mov	r0, r1
 8014332:	4611      	mov	r1, r2
 8014334:	461a      	mov	r2, r3
 8014336:	4603      	mov	r3, r0
 8014338:	70fb      	strb	r3, [r7, #3]
 801433a:	460b      	mov	r3, r1
 801433c:	70bb      	strb	r3, [r7, #2]
 801433e:	4613      	mov	r3, r2
 8014340:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8014342:	78f9      	ldrb	r1, [r7, #3]
 8014344:	787b      	ldrb	r3, [r7, #1]
 8014346:	9301      	str	r3, [sp, #4]
 8014348:	78bb      	ldrb	r3, [r7, #2]
 801434a:	9300      	str	r3, [sp, #0]
 801434c:	f107 0318 	add.w	r3, r7, #24
 8014350:	cb0c      	ldmia	r3, {r2, r3}
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f7ff ff36 	bl	80141c4 <SetMaxTimeCredits>
 8014358:	4603      	mov	r3, r0
 801435a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801435c:	78fb      	ldrb	r3, [r7, #3]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d00a      	beq.n	8014378 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	4618      	mov	r0, r3
 8014368:	f006 f8a2 	bl	801a4b0 <UTIL_TIMER_GetElapsedTime>
 801436c:	4602      	mov	r2, r0
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	68db      	ldr	r3, [r3, #12]
 8014372:	441a      	add	r2, r3
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	68da      	ldr	r2, [r3, #12]
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	691b      	ldr	r3, [r3, #16]
 8014380:	429a      	cmp	r2, r3
 8014382:	d903      	bls.n	801438c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	691a      	ldr	r2, [r3, #16]
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6a3a      	ldr	r2, [r7, #32]
 8014390:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8014392:	89fb      	ldrh	r3, [r7, #14]
}
 8014394:	4618      	mov	r0, r3
 8014396:	3710      	adds	r7, #16
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801439c:	b480      	push	{r7}
 801439e:	b085      	sub	sp, #20
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	4603      	mov	r3, r0
 80143a4:	460a      	mov	r2, r1
 80143a6:	80fb      	strh	r3, [r7, #6]
 80143a8:	4613      	mov	r3, r2
 80143aa:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80143ac:	2300      	movs	r3, #0
 80143ae:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80143b0:	2300      	movs	r3, #0
 80143b2:	73bb      	strb	r3, [r7, #14]
 80143b4:	e011      	b.n	80143da <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80143b6:	88fa      	ldrh	r2, [r7, #6]
 80143b8:	7bbb      	ldrb	r3, [r7, #14]
 80143ba:	2101      	movs	r1, #1
 80143bc:	fa01 f303 	lsl.w	r3, r1, r3
 80143c0:	401a      	ands	r2, r3
 80143c2:	7bbb      	ldrb	r3, [r7, #14]
 80143c4:	2101      	movs	r1, #1
 80143c6:	fa01 f303 	lsl.w	r3, r1, r3
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d102      	bne.n	80143d4 <CountChannels+0x38>
        {
            nbActiveBits++;
 80143ce:	7bfb      	ldrb	r3, [r7, #15]
 80143d0:	3301      	adds	r3, #1
 80143d2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80143d4:	7bbb      	ldrb	r3, [r7, #14]
 80143d6:	3301      	adds	r3, #1
 80143d8:	73bb      	strb	r3, [r7, #14]
 80143da:	7bba      	ldrb	r2, [r7, #14]
 80143dc:	797b      	ldrb	r3, [r7, #5]
 80143de:	429a      	cmp	r2, r3
 80143e0:	d3e9      	bcc.n	80143b6 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80143e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3714      	adds	r7, #20
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bc80      	pop	{r7}
 80143ec:	4770      	bx	lr

080143ee <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80143ee:	b580      	push	{r7, lr}
 80143f0:	b084      	sub	sp, #16
 80143f2:	af00      	add	r7, sp, #0
 80143f4:	6039      	str	r1, [r7, #0]
 80143f6:	4611      	mov	r1, r2
 80143f8:	461a      	mov	r2, r3
 80143fa:	4603      	mov	r3, r0
 80143fc:	71fb      	strb	r3, [r7, #7]
 80143fe:	460b      	mov	r3, r1
 8014400:	71bb      	strb	r3, [r7, #6]
 8014402:	4613      	mov	r3, r2
 8014404:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8014406:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801440a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801440e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014412:	4618      	mov	r0, r3
 8014414:	f000 f85d 	bl	80144d2 <RegionCommonValueInRange>
 8014418:	4603      	mov	r3, r0
 801441a:	2b00      	cmp	r3, #0
 801441c:	d101      	bne.n	8014422 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801441e:	2300      	movs	r3, #0
 8014420:	e053      	b.n	80144ca <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014422:	2300      	movs	r3, #0
 8014424:	73fb      	strb	r3, [r7, #15]
 8014426:	2300      	movs	r3, #0
 8014428:	73bb      	strb	r3, [r7, #14]
 801442a:	e049      	b.n	80144c0 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801442c:	2300      	movs	r3, #0
 801442e:	737b      	strb	r3, [r7, #13]
 8014430:	e03d      	b.n	80144ae <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8014432:	7bbb      	ldrb	r3, [r7, #14]
 8014434:	005b      	lsls	r3, r3, #1
 8014436:	683a      	ldr	r2, [r7, #0]
 8014438:	4413      	add	r3, r2
 801443a:	881b      	ldrh	r3, [r3, #0]
 801443c:	461a      	mov	r2, r3
 801443e:	7b7b      	ldrb	r3, [r7, #13]
 8014440:	fa42 f303 	asr.w	r3, r2, r3
 8014444:	f003 0301 	and.w	r3, r3, #1
 8014448:	2b00      	cmp	r3, #0
 801444a:	d02d      	beq.n	80144a8 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801444c:	7bfa      	ldrb	r2, [r7, #15]
 801444e:	7b7b      	ldrb	r3, [r7, #13]
 8014450:	4413      	add	r3, r2
 8014452:	461a      	mov	r2, r3
 8014454:	4613      	mov	r3, r2
 8014456:	005b      	lsls	r3, r3, #1
 8014458:	4413      	add	r3, r2
 801445a:	009b      	lsls	r3, r3, #2
 801445c:	461a      	mov	r2, r3
 801445e:	69fb      	ldr	r3, [r7, #28]
 8014460:	4413      	add	r3, r2
 8014462:	7a1b      	ldrb	r3, [r3, #8]
 8014464:	f343 0303 	sbfx	r3, r3, #0, #4
 8014468:	b25b      	sxtb	r3, r3
 801446a:	f003 030f 	and.w	r3, r3, #15
 801446e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8014470:	7bfa      	ldrb	r2, [r7, #15]
 8014472:	7b7b      	ldrb	r3, [r7, #13]
 8014474:	4413      	add	r3, r2
 8014476:	461a      	mov	r2, r3
 8014478:	4613      	mov	r3, r2
 801447a:	005b      	lsls	r3, r3, #1
 801447c:	4413      	add	r3, r2
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	461a      	mov	r2, r3
 8014482:	69fb      	ldr	r3, [r7, #28]
 8014484:	4413      	add	r3, r2
 8014486:	7a1b      	ldrb	r3, [r3, #8]
 8014488:	f343 1303 	sbfx	r3, r3, #4, #4
 801448c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801448e:	f003 030f 	and.w	r3, r3, #15
 8014492:	b25a      	sxtb	r2, r3
 8014494:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014498:	4618      	mov	r0, r3
 801449a:	f000 f81a 	bl	80144d2 <RegionCommonValueInRange>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b01      	cmp	r3, #1
 80144a2:	d101      	bne.n	80144a8 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80144a4:	2301      	movs	r3, #1
 80144a6:	e010      	b.n	80144ca <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80144a8:	7b7b      	ldrb	r3, [r7, #13]
 80144aa:	3301      	adds	r3, #1
 80144ac:	737b      	strb	r3, [r7, #13]
 80144ae:	7b7b      	ldrb	r3, [r7, #13]
 80144b0:	2b0f      	cmp	r3, #15
 80144b2:	d9be      	bls.n	8014432 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80144b4:	7bfb      	ldrb	r3, [r7, #15]
 80144b6:	3310      	adds	r3, #16
 80144b8:	73fb      	strb	r3, [r7, #15]
 80144ba:	7bbb      	ldrb	r3, [r7, #14]
 80144bc:	3301      	adds	r3, #1
 80144be:	73bb      	strb	r3, [r7, #14]
 80144c0:	7bfa      	ldrb	r2, [r7, #15]
 80144c2:	79fb      	ldrb	r3, [r7, #7]
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d3b1      	bcc.n	801442c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80144c8:	2300      	movs	r3, #0
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3710      	adds	r7, #16
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}

080144d2 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80144d2:	b480      	push	{r7}
 80144d4:	b083      	sub	sp, #12
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	4603      	mov	r3, r0
 80144da:	71fb      	strb	r3, [r7, #7]
 80144dc:	460b      	mov	r3, r1
 80144de:	71bb      	strb	r3, [r7, #6]
 80144e0:	4613      	mov	r3, r2
 80144e2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80144e4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80144e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80144ec:	429a      	cmp	r2, r3
 80144ee:	db07      	blt.n	8014500 <RegionCommonValueInRange+0x2e>
 80144f0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80144f4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	dc01      	bgt.n	8014500 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80144fc:	2301      	movs	r3, #1
 80144fe:	e000      	b.n	8014502 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8014500:	2300      	movs	r3, #0
}
 8014502:	4618      	mov	r0, r3
 8014504:	370c      	adds	r7, #12
 8014506:	46bd      	mov	sp, r7
 8014508:	bc80      	pop	{r7}
 801450a:	4770      	bx	lr

0801450c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801450c:	b480      	push	{r7}
 801450e:	b085      	sub	sp, #20
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
 8014514:	460b      	mov	r3, r1
 8014516:	70fb      	strb	r3, [r7, #3]
 8014518:	4613      	mov	r3, r2
 801451a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 801451c:	78fb      	ldrb	r3, [r7, #3]
 801451e:	091b      	lsrs	r3, r3, #4
 8014520:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8014522:	78bb      	ldrb	r3, [r7, #2]
 8014524:	091b      	lsrs	r3, r3, #4
 8014526:	b2db      	uxtb	r3, r3
 8014528:	7bfa      	ldrb	r2, [r7, #15]
 801452a:	429a      	cmp	r2, r3
 801452c:	d803      	bhi.n	8014536 <RegionCommonChanDisable+0x2a>
 801452e:	78fa      	ldrb	r2, [r7, #3]
 8014530:	78bb      	ldrb	r3, [r7, #2]
 8014532:	429a      	cmp	r2, r3
 8014534:	d301      	bcc.n	801453a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8014536:	2300      	movs	r3, #0
 8014538:	e017      	b.n	801456a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801453a:	7bfb      	ldrb	r3, [r7, #15]
 801453c:	005b      	lsls	r3, r3, #1
 801453e:	687a      	ldr	r2, [r7, #4]
 8014540:	4413      	add	r3, r2
 8014542:	881b      	ldrh	r3, [r3, #0]
 8014544:	b21a      	sxth	r2, r3
 8014546:	78fb      	ldrb	r3, [r7, #3]
 8014548:	f003 030f 	and.w	r3, r3, #15
 801454c:	2101      	movs	r1, #1
 801454e:	fa01 f303 	lsl.w	r3, r1, r3
 8014552:	b21b      	sxth	r3, r3
 8014554:	43db      	mvns	r3, r3
 8014556:	b21b      	sxth	r3, r3
 8014558:	4013      	ands	r3, r2
 801455a:	b219      	sxth	r1, r3
 801455c:	7bfb      	ldrb	r3, [r7, #15]
 801455e:	005b      	lsls	r3, r3, #1
 8014560:	687a      	ldr	r2, [r7, #4]
 8014562:	4413      	add	r3, r2
 8014564:	b28a      	uxth	r2, r1
 8014566:	801a      	strh	r2, [r3, #0]

    return true;
 8014568:	2301      	movs	r3, #1
}
 801456a:	4618      	mov	r0, r3
 801456c:	3714      	adds	r7, #20
 801456e:	46bd      	mov	sp, r7
 8014570:	bc80      	pop	{r7}
 8014572:	4770      	bx	lr

08014574 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	460b      	mov	r3, r1
 801457e:	70fb      	strb	r3, [r7, #3]
 8014580:	4613      	mov	r3, r2
 8014582:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014584:	2300      	movs	r3, #0
 8014586:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d101      	bne.n	8014592 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801458e:	2300      	movs	r3, #0
 8014590:	e018      	b.n	80145c4 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014592:	78fb      	ldrb	r3, [r7, #3]
 8014594:	73bb      	strb	r3, [r7, #14]
 8014596:	e010      	b.n	80145ba <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014598:	7bbb      	ldrb	r3, [r7, #14]
 801459a:	005b      	lsls	r3, r3, #1
 801459c:	687a      	ldr	r2, [r7, #4]
 801459e:	4413      	add	r3, r2
 80145a0:	881b      	ldrh	r3, [r3, #0]
 80145a2:	2110      	movs	r1, #16
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7ff fef9 	bl	801439c <CountChannels>
 80145aa:	4603      	mov	r3, r0
 80145ac:	461a      	mov	r2, r3
 80145ae:	7bfb      	ldrb	r3, [r7, #15]
 80145b0:	4413      	add	r3, r2
 80145b2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80145b4:	7bbb      	ldrb	r3, [r7, #14]
 80145b6:	3301      	adds	r3, #1
 80145b8:	73bb      	strb	r3, [r7, #14]
 80145ba:	7bba      	ldrb	r2, [r7, #14]
 80145bc:	78bb      	ldrb	r3, [r7, #2]
 80145be:	429a      	cmp	r2, r3
 80145c0:	d3ea      	bcc.n	8014598 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80145c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3710      	adds	r7, #16
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80145cc:	b480      	push	{r7}
 80145ce:	b087      	sub	sp, #28
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	4613      	mov	r3, r2
 80145d8:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d016      	beq.n	801460e <RegionCommonChanMaskCopy+0x42>
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d013      	beq.n	801460e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80145e6:	2300      	movs	r3, #0
 80145e8:	75fb      	strb	r3, [r7, #23]
 80145ea:	e00c      	b.n	8014606 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80145ec:	7dfb      	ldrb	r3, [r7, #23]
 80145ee:	005b      	lsls	r3, r3, #1
 80145f0:	68ba      	ldr	r2, [r7, #8]
 80145f2:	441a      	add	r2, r3
 80145f4:	7dfb      	ldrb	r3, [r7, #23]
 80145f6:	005b      	lsls	r3, r3, #1
 80145f8:	68f9      	ldr	r1, [r7, #12]
 80145fa:	440b      	add	r3, r1
 80145fc:	8812      	ldrh	r2, [r2, #0]
 80145fe:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8014600:	7dfb      	ldrb	r3, [r7, #23]
 8014602:	3301      	adds	r3, #1
 8014604:	75fb      	strb	r3, [r7, #23]
 8014606:	7dfa      	ldrb	r2, [r7, #23]
 8014608:	79fb      	ldrb	r3, [r7, #7]
 801460a:	429a      	cmp	r2, r3
 801460c:	d3ee      	bcc.n	80145ec <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801460e:	bf00      	nop
 8014610:	371c      	adds	r7, #28
 8014612:	46bd      	mov	sp, r7
 8014614:	bc80      	pop	{r7}
 8014616:	4770      	bx	lr

08014618 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014618:	b082      	sub	sp, #8
 801461a:	b580      	push	{r7, lr}
 801461c:	b086      	sub	sp, #24
 801461e:	af00      	add	r7, sp, #0
 8014620:	60f8      	str	r0, [r7, #12]
 8014622:	60b9      	str	r1, [r7, #8]
 8014624:	627b      	str	r3, [r7, #36]	; 0x24
 8014626:	4613      	mov	r3, r2
 8014628:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801462a:	79f9      	ldrb	r1, [r7, #7]
 801462c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014630:	cb0c      	ldmia	r3, {r2, r3}
 8014632:	68f8      	ldr	r0, [r7, #12]
 8014634:	f7ff fd8c 	bl	8014150 <GetDutyCycle>
 8014638:	4603      	mov	r3, r0
 801463a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	68da      	ldr	r2, [r3, #12]
 8014640:	8afb      	ldrh	r3, [r7, #22]
 8014642:	68b9      	ldr	r1, [r7, #8]
 8014644:	fb01 f303 	mul.w	r3, r1, r3
 8014648:	429a      	cmp	r2, r3
 801464a:	d909      	bls.n	8014660 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	68da      	ldr	r2, [r3, #12]
 8014650:	8afb      	ldrh	r3, [r7, #22]
 8014652:	68b9      	ldr	r1, [r7, #8]
 8014654:	fb01 f303 	mul.w	r3, r1, r3
 8014658:	1ad2      	subs	r2, r2, r3
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801465e:	e002      	b.n	8014666 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	2200      	movs	r2, #0
 8014664:	60da      	str	r2, [r3, #12]
}
 8014666:	bf00      	nop
 8014668:	3718      	adds	r7, #24
 801466a:	46bd      	mov	sp, r7
 801466c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014670:	b002      	add	sp, #8
 8014672:	4770      	bx	lr

08014674 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014676:	b08f      	sub	sp, #60	; 0x3c
 8014678:	af04      	add	r7, sp, #16
 801467a:	6039      	str	r1, [r7, #0]
 801467c:	4611      	mov	r1, r2
 801467e:	461a      	mov	r2, r3
 8014680:	4603      	mov	r3, r0
 8014682:	71fb      	strb	r3, [r7, #7]
 8014684:	460b      	mov	r3, r1
 8014686:	71bb      	strb	r3, [r7, #6]
 8014688:	4613      	mov	r3, r2
 801468a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801468c:	f04f 33ff 	mov.w	r3, #4294967295
 8014690:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8014692:	f005 fefb 	bl	801a48c <UTIL_TIMER_GetCurrentTime>
 8014696:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8014698:	2300      	movs	r3, #0
 801469a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 801469c:	2301      	movs	r3, #1
 801469e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80146a0:	2300      	movs	r3, #0
 80146a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80146a6:	2300      	movs	r3, #0
 80146a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80146ac:	e0ba      	b.n	8014824 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80146ae:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146b2:	4613      	mov	r3, r2
 80146b4:	005b      	lsls	r3, r3, #1
 80146b6:	4413      	add	r3, r2
 80146b8:	00db      	lsls	r3, r3, #3
 80146ba:	461a      	mov	r2, r3
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	189c      	adds	r4, r3, r2
 80146c0:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 80146c4:	797a      	ldrb	r2, [r7, #5]
 80146c6:	79fd      	ldrb	r5, [r7, #7]
 80146c8:	69fb      	ldr	r3, [r7, #28]
 80146ca:	9302      	str	r3, [sp, #8]
 80146cc:	46ec      	mov	ip, sp
 80146ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80146d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80146d6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80146da:	4633      	mov	r3, r6
 80146dc:	4629      	mov	r1, r5
 80146de:	4620      	mov	r0, r4
 80146e0:	f7ff fe22 	bl	8014328 <UpdateTimeCredits>
 80146e4:	4603      	mov	r3, r0
 80146e6:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80146e8:	8afa      	ldrh	r2, [r7, #22]
 80146ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146ec:	fb02 f303 	mul.w	r3, r2, r3
 80146f0:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80146f2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146f6:	4613      	mov	r3, r2
 80146f8:	005b      	lsls	r3, r3, #1
 80146fa:	4413      	add	r3, r2
 80146fc:	00db      	lsls	r3, r3, #3
 80146fe:	461a      	mov	r2, r3
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	4413      	add	r3, r2
 8014704:	68db      	ldr	r3, [r3, #12]
 8014706:	69ba      	ldr	r2, [r7, #24]
 8014708:	429a      	cmp	r2, r3
 801470a:	d308      	bcc.n	801471e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801470c:	797b      	ldrb	r3, [r7, #5]
 801470e:	f083 0301 	eor.w	r3, r3, #1
 8014712:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014714:	2b00      	cmp	r3, #0
 8014716:	d013      	beq.n	8014740 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014718:	79fb      	ldrb	r3, [r7, #7]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d010      	beq.n	8014740 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801471e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014722:	4613      	mov	r3, r2
 8014724:	005b      	lsls	r3, r3, #1
 8014726:	4413      	add	r3, r2
 8014728:	00db      	lsls	r3, r3, #3
 801472a:	461a      	mov	r2, r3
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	4413      	add	r3, r2
 8014730:	2201      	movs	r2, #1
 8014732:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8014734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014738:	3301      	adds	r3, #1
 801473a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801473e:	e06c      	b.n	801481a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8014740:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014744:	4613      	mov	r3, r2
 8014746:	005b      	lsls	r3, r3, #1
 8014748:	4413      	add	r3, r2
 801474a:	00db      	lsls	r3, r3, #3
 801474c:	461a      	mov	r2, r3
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	4413      	add	r3, r2
 8014752:	2200      	movs	r2, #0
 8014754:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8014756:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801475a:	4613      	mov	r3, r2
 801475c:	005b      	lsls	r3, r3, #1
 801475e:	4413      	add	r3, r2
 8014760:	00db      	lsls	r3, r3, #3
 8014762:	461a      	mov	r2, r3
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	4413      	add	r3, r2
 8014768:	691b      	ldr	r3, [r3, #16]
 801476a:	69ba      	ldr	r2, [r7, #24]
 801476c:	429a      	cmp	r2, r3
 801476e:	d215      	bcs.n	801479c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8014770:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014774:	4613      	mov	r3, r2
 8014776:	005b      	lsls	r3, r3, #1
 8014778:	4413      	add	r3, r2
 801477a:	00db      	lsls	r3, r3, #3
 801477c:	461a      	mov	r2, r3
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	4413      	add	r3, r2
 8014782:	68db      	ldr	r3, [r3, #12]
 8014784:	69ba      	ldr	r2, [r7, #24]
 8014786:	1ad3      	subs	r3, r2, r3
 8014788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801478a:	4293      	cmp	r3, r2
 801478c:	bf28      	it	cs
 801478e:	4613      	movcs	r3, r2
 8014790:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014796:	3301      	adds	r3, #1
 8014798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801479c:	79fb      	ldrb	r3, [r7, #7]
 801479e:	f083 0301 	eor.w	r3, r3, #1
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d038      	beq.n	801481a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80147a8:	2300      	movs	r3, #0
 80147aa:	60fb      	str	r3, [r7, #12]
 80147ac:	2300      	movs	r3, #0
 80147ae:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80147b0:	8afb      	ldrh	r3, [r7, #22]
 80147b2:	2b64      	cmp	r3, #100	; 0x64
 80147b4:	d103      	bne.n	80147be <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80147b6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80147ba:	60fb      	str	r3, [r7, #12]
 80147bc:	e009      	b.n	80147d2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80147be:	8afb      	ldrh	r3, [r7, #22]
 80147c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80147c4:	d103      	bne.n	80147ce <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80147c6:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 80147ca:	60fb      	str	r3, [r7, #12]
 80147cc:	e001      	b.n	80147d2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80147ce:	4b1e      	ldr	r3, [pc, #120]	; (8014848 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80147d0:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80147d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147d4:	4a1c      	ldr	r2, [pc, #112]	; (8014848 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80147d6:	4293      	cmp	r3, r2
 80147d8:	d90e      	bls.n	80147f8 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80147da:	68fa      	ldr	r2, [r7, #12]
 80147dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147de:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80147e2:	3b30      	subs	r3, #48	; 0x30
 80147e4:	4919      	ldr	r1, [pc, #100]	; (801484c <RegionCommonUpdateBandTimeOff+0x1d8>)
 80147e6:	fba1 1303 	umull	r1, r3, r1, r3
 80147ea:	0c1b      	lsrs	r3, r3, #16
 80147ec:	3301      	adds	r3, #1
 80147ee:	4918      	ldr	r1, [pc, #96]	; (8014850 <RegionCommonUpdateBandTimeOff+0x1dc>)
 80147f0:	fb01 f303 	mul.w	r3, r1, r3
 80147f4:	4413      	add	r3, r2
 80147f6:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80147f8:	f107 000c 	add.w	r0, r7, #12
 80147fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147fe:	9300      	str	r3, [sp, #0]
 8014800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014802:	f107 020c 	add.w	r2, r7, #12
 8014806:	ca06      	ldmia	r2, {r1, r2}
 8014808:	f005 f85b 	bl	80198c2 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 801480c:	f107 030c 	add.w	r3, r7, #12
 8014810:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014814:	f005 f914 	bl	8019a40 <SysTimeToMs>
 8014818:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801481a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801481e:	3301      	adds	r3, #1
 8014820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014824:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014828:	79bb      	ldrb	r3, [r7, #6]
 801482a:	429a      	cmp	r2, r3
 801482c:	f4ff af3f 	bcc.w	80146ae <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8014830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014834:	2b00      	cmp	r3, #0
 8014836:	d102      	bne.n	801483e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014838:	f04f 33ff 	mov.w	r3, #4294967295
 801483c:	e000      	b.n	8014840 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014840:	4618      	mov	r0, r3
 8014842:	372c      	adds	r7, #44	; 0x2c
 8014844:	46bd      	mov	sp, r7
 8014846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014848:	0001ec30 	.word	0x0001ec30
 801484c:	c22e4507 	.word	0xc22e4507
 8014850:	00015180 	.word	0x00015180

08014854 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014854:	b480      	push	{r7}
 8014856:	b085      	sub	sp, #20
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801485e:	2300      	movs	r3, #0
 8014860:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	781b      	ldrb	r3, [r3, #0]
 8014866:	2b03      	cmp	r3, #3
 8014868:	d13f      	bne.n	80148ea <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	3301      	adds	r3, #1
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	b25a      	sxtb	r2, r3
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801487c:	f003 030f 	and.w	r3, r3, #15
 8014880:	b25a      	sxtb	r2, r3
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801488c:	b2db      	uxtb	r3, r3
 801488e:	091b      	lsrs	r3, r3, #4
 8014890:	b2db      	uxtb	r3, r3
 8014892:	b25a      	sxtb	r2, r3
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	3302      	adds	r3, #2
 801489c:	781b      	ldrb	r3, [r3, #0]
 801489e:	b29a      	uxth	r2, r3
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	889b      	ldrh	r3, [r3, #4]
 80148a8:	b21a      	sxth	r2, r3
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	3303      	adds	r3, #3
 80148ae:	781b      	ldrb	r3, [r3, #0]
 80148b0:	021b      	lsls	r3, r3, #8
 80148b2:	b21b      	sxth	r3, r3
 80148b4:	4313      	orrs	r3, r2
 80148b6:	b21b      	sxth	r3, r3
 80148b8:	b29a      	uxth	r2, r3
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	791a      	ldrb	r2, [r3, #4]
 80148c2:	683b      	ldr	r3, [r7, #0]
 80148c4:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	781b      	ldrb	r3, [r3, #0]
 80148ca:	091b      	lsrs	r3, r3, #4
 80148cc:	b2db      	uxtb	r3, r3
 80148ce:	f003 0307 	and.w	r3, r3, #7
 80148d2:	b2da      	uxtb	r2, r3
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80148d8:	683b      	ldr	r3, [r7, #0]
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	f003 030f 	and.w	r3, r3, #15
 80148e0:	b2da      	uxtb	r2, r3
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80148e6:	2305      	movs	r3, #5
 80148e8:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80148ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3714      	adds	r7, #20
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bc80      	pop	{r7}
 80148f4:	4770      	bx	lr

080148f6 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80148f6:	b5b0      	push	{r4, r5, r7, lr}
 80148f8:	b088      	sub	sp, #32
 80148fa:	af02      	add	r7, sp, #8
 80148fc:	60f8      	str	r0, [r7, #12]
 80148fe:	60b9      	str	r1, [r7, #8]
 8014900:	607a      	str	r2, [r7, #4]
 8014902:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	791b      	ldrb	r3, [r3, #4]
 8014908:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	799b      	ldrb	r3, [r3, #6]
 801490e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	79db      	ldrb	r3, [r3, #7]
 8014914:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	7a1b      	ldrb	r3, [r3, #8]
 801491a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	795b      	ldrb	r3, [r3, #5]
 8014920:	f083 0301 	eor.w	r3, r3, #1
 8014924:	b2db      	uxtb	r3, r3
 8014926:	2b00      	cmp	r3, #0
 8014928:	d008      	beq.n	801493c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	7adb      	ldrb	r3, [r3, #11]
 801492e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	7a5b      	ldrb	r3, [r3, #9]
 8014934:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	7a9b      	ldrb	r3, [r3, #10]
 801493a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801493c:	7dfb      	ldrb	r3, [r7, #23]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d03a      	beq.n	80149b8 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	7b18      	ldrb	r0, [r3, #12]
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	6919      	ldr	r1, [r3, #16]
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8014956:	68fa      	ldr	r2, [r7, #12]
 8014958:	6992      	ldr	r2, [r2, #24]
 801495a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801495e:	9201      	str	r2, [sp, #4]
 8014960:	9300      	str	r3, [sp, #0]
 8014962:	462b      	mov	r3, r5
 8014964:	4622      	mov	r2, r4
 8014966:	f7ff fd42 	bl	80143ee <RegionCommonChanVerifyDr>
 801496a:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801496c:	f083 0301 	eor.w	r3, r3, #1
 8014970:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014972:	2b00      	cmp	r3, #0
 8014974:	d003      	beq.n	801497e <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8014976:	7dfb      	ldrb	r3, [r7, #23]
 8014978:	f023 0302 	bic.w	r3, r3, #2
 801497c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801498a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801498e:	4618      	mov	r0, r3
 8014990:	f7ff fd9f 	bl	80144d2 <RegionCommonValueInRange>
 8014994:	4603      	mov	r3, r0
 8014996:	2b00      	cmp	r3, #0
 8014998:	d10e      	bne.n	80149b8 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80149a0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80149a4:	429a      	cmp	r2, r3
 80149a6:	da03      	bge.n	80149b0 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	7f5b      	ldrb	r3, [r3, #29]
 80149ac:	757b      	strb	r3, [r7, #21]
 80149ae:	e003      	b.n	80149b8 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80149b0:	7dfb      	ldrb	r3, [r7, #23]
 80149b2:	f023 0304 	bic.w	r3, r3, #4
 80149b6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80149b8:	7dfb      	ldrb	r3, [r7, #23]
 80149ba:	2b07      	cmp	r3, #7
 80149bc:	d105      	bne.n	80149ca <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 80149be:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d101      	bne.n	80149ca <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 80149c6:	2301      	movs	r3, #1
 80149c8:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80149ca:	68bb      	ldr	r3, [r7, #8]
 80149cc:	7dba      	ldrb	r2, [r7, #22]
 80149ce:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	7d7a      	ldrb	r2, [r7, #21]
 80149d4:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80149d6:	7d3a      	ldrb	r2, [r7, #20]
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	701a      	strb	r2, [r3, #0]

    return status;
 80149dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3718      	adds	r7, #24
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080149e8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80149e8:	b480      	push	{r7}
 80149ea:	b083      	sub	sp, #12
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	4603      	mov	r3, r0
 80149f0:	6039      	str	r1, [r7, #0]
 80149f2:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80149f4:	79fb      	ldrb	r3, [r7, #7]
 80149f6:	4a06      	ldr	r2, [pc, #24]	; (8014a10 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80149f8:	fa02 f303 	lsl.w	r3, r2, r3
 80149fc:	461a      	mov	r2, r3
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	370c      	adds	r7, #12
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bc80      	pop	{r7}
 8014a0c:	4770      	bx	lr
 8014a0e:	bf00      	nop
 8014a10:	000f4240 	.word	0x000f4240

08014a14 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014a14:	b480      	push	{r7}
 8014a16:	b083      	sub	sp, #12
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8014a1e:	79fb      	ldrb	r3, [r7, #7]
 8014a20:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014a24:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	370c      	adds	r7, #12
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bc80      	pop	{r7}
 8014a30:	4770      	bx	lr
	...

08014a34 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8014a34:	b480      	push	{r7}
 8014a36:	b085      	sub	sp, #20
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	60f8      	str	r0, [r7, #12]
 8014a3c:	607a      	str	r2, [r7, #4]
 8014a3e:	603b      	str	r3, [r7, #0]
 8014a40:	460b      	mov	r3, r1
 8014a42:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014a44:	7afa      	ldrb	r2, [r7, #11]
 8014a46:	7afb      	ldrb	r3, [r7, #11]
 8014a48:	3b04      	subs	r3, #4
 8014a4a:	4619      	mov	r1, r3
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	fb03 f101 	mul.w	r1, r3, r1
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a58:	fb00 f303 	mul.w	r3, r0, r3
 8014a5c:	440b      	add	r3, r1
 8014a5e:	005b      	lsls	r3, r3, #1
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d013      	beq.n	8014a8c <RegionCommonComputeRxWindowParameters+0x58>
 8014a64:	7afb      	ldrb	r3, [r7, #11]
 8014a66:	3b04      	subs	r3, #4
 8014a68:	4619      	mov	r1, r3
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	fb03 f101 	mul.w	r1, r3, r1
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a76:	fb00 f303 	mul.w	r3, r0, r3
 8014a7a:	440b      	add	r3, r1
 8014a7c:	0059      	lsls	r1, r3, #1
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	440b      	add	r3, r1
 8014a82:	1e59      	subs	r1, r3, #1
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8014a8a:	e00f      	b.n	8014aac <RegionCommonComputeRxWindowParameters+0x78>
 8014a8c:	7afb      	ldrb	r3, [r7, #11]
 8014a8e:	3b04      	subs	r3, #4
 8014a90:	4619      	mov	r1, r3
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	fb03 f101 	mul.w	r1, r3, r1
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a9e:	fb00 f303 	mul.w	r3, r0, r3
 8014aa2:	440b      	add	r3, r1
 8014aa4:	0059      	lsls	r1, r3, #1
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8014aac:	429a      	cmp	r2, r3
 8014aae:	bf38      	it	cc
 8014ab0:	461a      	movcc	r2, r3
 8014ab2:	69bb      	ldr	r3, [r7, #24]
 8014ab4:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	009b      	lsls	r3, r3, #2
 8014aba:	4619      	mov	r1, r3
 8014abc:	69bb      	ldr	r3, [r7, #24]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	68fa      	ldr	r2, [r7, #12]
 8014ac2:	fb02 f303 	mul.w	r3, r2, r3
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d007      	beq.n	8014ada <RegionCommonComputeRxWindowParameters+0xa6>
 8014aca:	69bb      	ldr	r3, [r7, #24]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	68fa      	ldr	r2, [r7, #12]
 8014ad0:	fb02 f303 	mul.w	r3, r2, r3
 8014ad4:	3301      	adds	r3, #1
 8014ad6:	085b      	lsrs	r3, r3, #1
 8014ad8:	e005      	b.n	8014ae6 <RegionCommonComputeRxWindowParameters+0xb2>
 8014ada:	69bb      	ldr	r3, [r7, #24]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	68fa      	ldr	r2, [r7, #12]
 8014ae0:	fb02 f303 	mul.w	r3, r2, r3
 8014ae4:	085b      	lsrs	r3, r3, #1
 8014ae6:	1acb      	subs	r3, r1, r3
 8014ae8:	683a      	ldr	r2, [r7, #0]
 8014aea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014aee:	fb01 f202 	mul.w	r2, r1, r2
 8014af2:	1a9b      	subs	r3, r3, r2
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	dd27      	ble.n	8014b48 <RegionCommonComputeRxWindowParameters+0x114>
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	009b      	lsls	r3, r3, #2
 8014afc:	4619      	mov	r1, r3
 8014afe:	69bb      	ldr	r3, [r7, #24]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	68fa      	ldr	r2, [r7, #12]
 8014b04:	fb02 f303 	mul.w	r3, r2, r3
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d007      	beq.n	8014b1c <RegionCommonComputeRxWindowParameters+0xe8>
 8014b0c:	69bb      	ldr	r3, [r7, #24]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	68fa      	ldr	r2, [r7, #12]
 8014b12:	fb02 f303 	mul.w	r3, r2, r3
 8014b16:	3301      	adds	r3, #1
 8014b18:	085b      	lsrs	r3, r3, #1
 8014b1a:	e005      	b.n	8014b28 <RegionCommonComputeRxWindowParameters+0xf4>
 8014b1c:	69bb      	ldr	r3, [r7, #24]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	68fa      	ldr	r2, [r7, #12]
 8014b22:	fb02 f303 	mul.w	r3, r2, r3
 8014b26:	085b      	lsrs	r3, r3, #1
 8014b28:	1acb      	subs	r3, r1, r3
 8014b2a:	683a      	ldr	r2, [r7, #0]
 8014b2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014b30:	fb01 f202 	mul.w	r2, r1, r2
 8014b34:	1a9b      	subs	r3, r3, r2
 8014b36:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8014b3a:	4a19      	ldr	r2, [pc, #100]	; (8014ba0 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014b3c:	fb82 1203 	smull	r1, r2, r2, r3
 8014b40:	1192      	asrs	r2, r2, #6
 8014b42:	17db      	asrs	r3, r3, #31
 8014b44:	1ad3      	subs	r3, r2, r3
 8014b46:	e024      	b.n	8014b92 <RegionCommonComputeRxWindowParameters+0x15e>
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	009b      	lsls	r3, r3, #2
 8014b4c:	4619      	mov	r1, r3
 8014b4e:	69bb      	ldr	r3, [r7, #24]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	68fa      	ldr	r2, [r7, #12]
 8014b54:	fb02 f303 	mul.w	r3, r2, r3
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d007      	beq.n	8014b6c <RegionCommonComputeRxWindowParameters+0x138>
 8014b5c:	69bb      	ldr	r3, [r7, #24]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	68fa      	ldr	r2, [r7, #12]
 8014b62:	fb02 f303 	mul.w	r3, r2, r3
 8014b66:	3301      	adds	r3, #1
 8014b68:	085b      	lsrs	r3, r3, #1
 8014b6a:	e005      	b.n	8014b78 <RegionCommonComputeRxWindowParameters+0x144>
 8014b6c:	69bb      	ldr	r3, [r7, #24]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	68fa      	ldr	r2, [r7, #12]
 8014b72:	fb02 f303 	mul.w	r3, r2, r3
 8014b76:	085b      	lsrs	r3, r3, #1
 8014b78:	1acb      	subs	r3, r1, r3
 8014b7a:	683a      	ldr	r2, [r7, #0]
 8014b7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014b80:	fb01 f202 	mul.w	r2, r1, r2
 8014b84:	1a9b      	subs	r3, r3, r2
 8014b86:	4a06      	ldr	r2, [pc, #24]	; (8014ba0 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014b88:	fb82 1203 	smull	r1, r2, r2, r3
 8014b8c:	1192      	asrs	r2, r2, #6
 8014b8e:	17db      	asrs	r3, r3, #31
 8014b90:	1ad3      	subs	r3, r2, r3
 8014b92:	69fa      	ldr	r2, [r7, #28]
 8014b94:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014b96:	bf00      	nop
 8014b98:	3714      	adds	r7, #20
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bc80      	pop	{r7}
 8014b9e:	4770      	bx	lr
 8014ba0:	10624dd3 	.word	0x10624dd3

08014ba4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b086      	sub	sp, #24
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	4603      	mov	r3, r0
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	607a      	str	r2, [r7, #4]
 8014bb0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014bba:	005b      	lsls	r3, r3, #1
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7eb fe05 	bl	80007cc <__aeabi_ui2f>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	68b8      	ldr	r0, [r7, #8]
 8014bc8:	f7eb fd4e 	bl	8000668 <__aeabi_fsub>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	6879      	ldr	r1, [r7, #4]
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7eb fd49 	bl	8000668 <__aeabi_fsub>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7eb fc39 	bl	8000450 <__aeabi_f2d>
 8014bde:	4602      	mov	r2, r0
 8014be0:	460b      	mov	r3, r1
 8014be2:	4610      	mov	r0, r2
 8014be4:	4619      	mov	r1, r3
 8014be6:	f005 ffe7 	bl	801abb8 <floor>
 8014bea:	4602      	mov	r2, r0
 8014bec:	460b      	mov	r3, r1
 8014bee:	4610      	mov	r0, r2
 8014bf0:	4619      	mov	r1, r3
 8014bf2:	f7eb fd0d 	bl	8000610 <__aeabi_d2iz>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3718      	adds	r7, #24
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}

08014c06 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014c06:	b590      	push	{r4, r7, lr}
 8014c08:	b087      	sub	sp, #28
 8014c0a:	af00      	add	r7, sp, #0
 8014c0c:	60f8      	str	r0, [r7, #12]
 8014c0e:	60b9      	str	r1, [r7, #8]
 8014c10:	607a      	str	r2, [r7, #4]
 8014c12:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014c14:	2300      	movs	r3, #0
 8014c16:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	757b      	strb	r3, [r7, #21]
 8014c20:	2300      	movs	r3, #0
 8014c22:	753b      	strb	r3, [r7, #20]
 8014c24:	e09c      	b.n	8014d60 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014c26:	2300      	movs	r3, #0
 8014c28:	74fb      	strb	r3, [r7, #19]
 8014c2a:	e08f      	b.n	8014d4c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	685a      	ldr	r2, [r3, #4]
 8014c30:	7d3b      	ldrb	r3, [r7, #20]
 8014c32:	005b      	lsls	r3, r3, #1
 8014c34:	4413      	add	r3, r2
 8014c36:	881b      	ldrh	r3, [r3, #0]
 8014c38:	461a      	mov	r2, r3
 8014c3a:	7cfb      	ldrb	r3, [r7, #19]
 8014c3c:	fa42 f303 	asr.w	r3, r2, r3
 8014c40:	f003 0301 	and.w	r3, r3, #1
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d07e      	beq.n	8014d46 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	689a      	ldr	r2, [r3, #8]
 8014c4c:	7d79      	ldrb	r1, [r7, #21]
 8014c4e:	7cfb      	ldrb	r3, [r7, #19]
 8014c50:	440b      	add	r3, r1
 8014c52:	4619      	mov	r1, r3
 8014c54:	460b      	mov	r3, r1
 8014c56:	005b      	lsls	r3, r3, #1
 8014c58:	440b      	add	r3, r1
 8014c5a:	009b      	lsls	r3, r3, #2
 8014c5c:	4413      	add	r3, r2
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d06b      	beq.n	8014d3c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	f083 0301 	eor.w	r3, r3, #1
 8014c6c:	b2db      	uxtb	r3, r3
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d011      	beq.n	8014c96 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d00d      	beq.n	8014c96 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	695a      	ldr	r2, [r3, #20]
 8014c7e:	7d3b      	ldrb	r3, [r7, #20]
 8014c80:	005b      	lsls	r3, r3, #1
 8014c82:	4413      	add	r3, r2
 8014c84:	881b      	ldrh	r3, [r3, #0]
 8014c86:	461a      	mov	r2, r3
 8014c88:	7cfb      	ldrb	r3, [r7, #19]
 8014c8a:	fa42 f303 	asr.w	r3, r2, r3
 8014c8e:	f003 0301 	and.w	r3, r3, #1
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d054      	beq.n	8014d40 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	785b      	ldrb	r3, [r3, #1]
 8014c9a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	689a      	ldr	r2, [r3, #8]
 8014ca0:	7d79      	ldrb	r1, [r7, #21]
 8014ca2:	7cfb      	ldrb	r3, [r7, #19]
 8014ca4:	440b      	add	r3, r1
 8014ca6:	4619      	mov	r1, r3
 8014ca8:	460b      	mov	r3, r1
 8014caa:	005b      	lsls	r3, r3, #1
 8014cac:	440b      	add	r3, r1
 8014cae:	009b      	lsls	r3, r3, #2
 8014cb0:	4413      	add	r3, r2
 8014cb2:	7a1b      	ldrb	r3, [r3, #8]
 8014cb4:	f343 0303 	sbfx	r3, r3, #0, #4
 8014cb8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014cba:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	689a      	ldr	r2, [r3, #8]
 8014cc0:	7d79      	ldrb	r1, [r7, #21]
 8014cc2:	7cfb      	ldrb	r3, [r7, #19]
 8014cc4:	440b      	add	r3, r1
 8014cc6:	4619      	mov	r1, r3
 8014cc8:	460b      	mov	r3, r1
 8014cca:	005b      	lsls	r3, r3, #1
 8014ccc:	440b      	add	r3, r1
 8014cce:	009b      	lsls	r3, r3, #2
 8014cd0:	4413      	add	r3, r2
 8014cd2:	7a1b      	ldrb	r3, [r3, #8]
 8014cd4:	f343 1303 	sbfx	r3, r3, #4, #4
 8014cd8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014cda:	461a      	mov	r2, r3
 8014cdc:	4621      	mov	r1, r4
 8014cde:	f7ff fbf8 	bl	80144d2 <RegionCommonValueInRange>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d02d      	beq.n	8014d44 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	68da      	ldr	r2, [r3, #12]
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	6899      	ldr	r1, [r3, #8]
 8014cf0:	7d78      	ldrb	r0, [r7, #21]
 8014cf2:	7cfb      	ldrb	r3, [r7, #19]
 8014cf4:	4403      	add	r3, r0
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	005b      	lsls	r3, r3, #1
 8014cfc:	4403      	add	r3, r0
 8014cfe:	009b      	lsls	r3, r3, #2
 8014d00:	440b      	add	r3, r1
 8014d02:	7a5b      	ldrb	r3, [r3, #9]
 8014d04:	4619      	mov	r1, r3
 8014d06:	460b      	mov	r3, r1
 8014d08:	005b      	lsls	r3, r3, #1
 8014d0a:	440b      	add	r3, r1
 8014d0c:	00db      	lsls	r3, r3, #3
 8014d0e:	4413      	add	r3, r2
 8014d10:	7d1b      	ldrb	r3, [r3, #20]
 8014d12:	f083 0301 	eor.w	r3, r3, #1
 8014d16:	b2db      	uxtb	r3, r3
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d003      	beq.n	8014d24 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014d1c:	7dbb      	ldrb	r3, [r7, #22]
 8014d1e:	3301      	adds	r3, #1
 8014d20:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014d22:	e010      	b.n	8014d46 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014d24:	7dfb      	ldrb	r3, [r7, #23]
 8014d26:	1c5a      	adds	r2, r3, #1
 8014d28:	75fa      	strb	r2, [r7, #23]
 8014d2a:	461a      	mov	r2, r3
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	4413      	add	r3, r2
 8014d30:	7d79      	ldrb	r1, [r7, #21]
 8014d32:	7cfa      	ldrb	r2, [r7, #19]
 8014d34:	440a      	add	r2, r1
 8014d36:	b2d2      	uxtb	r2, r2
 8014d38:	701a      	strb	r2, [r3, #0]
 8014d3a:	e004      	b.n	8014d46 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014d3c:	bf00      	nop
 8014d3e:	e002      	b.n	8014d46 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014d40:	bf00      	nop
 8014d42:	e000      	b.n	8014d46 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014d44:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014d46:	7cfb      	ldrb	r3, [r7, #19]
 8014d48:	3301      	adds	r3, #1
 8014d4a:	74fb      	strb	r3, [r7, #19]
 8014d4c:	7cfb      	ldrb	r3, [r7, #19]
 8014d4e:	2b0f      	cmp	r3, #15
 8014d50:	f67f af6c 	bls.w	8014c2c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014d54:	7d7b      	ldrb	r3, [r7, #21]
 8014d56:	3310      	adds	r3, #16
 8014d58:	757b      	strb	r3, [r7, #21]
 8014d5a:	7d3b      	ldrb	r3, [r7, #20]
 8014d5c:	3301      	adds	r3, #1
 8014d5e:	753b      	strb	r3, [r7, #20]
 8014d60:	7d7b      	ldrb	r3, [r7, #21]
 8014d62:	b29a      	uxth	r2, r3
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	8a1b      	ldrh	r3, [r3, #16]
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	f4ff af5c 	bcc.w	8014c26 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	7dfa      	ldrb	r2, [r7, #23]
 8014d72:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	7dba      	ldrb	r2, [r7, #22]
 8014d78:	701a      	strb	r2, [r3, #0]
}
 8014d7a:	bf00      	nop
 8014d7c:	371c      	adds	r7, #28
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd90      	pop	{r4, r7, pc}

08014d82 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d84:	b08b      	sub	sp, #44	; 0x2c
 8014d86:	af04      	add	r7, sp, #16
 8014d88:	60f8      	str	r0, [r7, #12]
 8014d8a:	60b9      	str	r1, [r7, #8]
 8014d8c:	607a      	str	r2, [r7, #4]
 8014d8e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	685b      	ldr	r3, [r3, #4]
 8014d94:	4618      	mov	r0, r3
 8014d96:	f005 fb8b 	bl	801a4b0 <UTIL_TIMER_GetElapsedTime>
 8014d9a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	681a      	ldr	r2, [r3, #0]
 8014da0:	697b      	ldr	r3, [r7, #20]
 8014da2:	1ad2      	subs	r2, r2, r3
 8014da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014da6:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8014da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014daa:	2201      	movs	r2, #1
 8014dac:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	2200      	movs	r2, #0
 8014db2:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	685b      	ldr	r3, [r3, #4]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d004      	beq.n	8014dc6 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014dc0:	697a      	ldr	r2, [r7, #20]
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d32b      	bcc.n	8014e1e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	69db      	ldr	r3, [r3, #28]
 8014dd0:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014dd6:	68dd      	ldr	r5, [r3, #12]
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	7a5e      	ldrb	r6, [r3, #9]
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	f893 c008 	ldrb.w	ip, [r3, #8]
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	7d1b      	ldrb	r3, [r3, #20]
 8014de6:	68fa      	ldr	r2, [r7, #12]
 8014de8:	6992      	ldr	r2, [r2, #24]
 8014dea:	9203      	str	r2, [sp, #12]
 8014dec:	68fa      	ldr	r2, [r7, #12]
 8014dee:	f10d 0e04 	add.w	lr, sp, #4
 8014df2:	320c      	adds	r2, #12
 8014df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014df8:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014dfc:	9300      	str	r3, [sp, #0]
 8014dfe:	4663      	mov	r3, ip
 8014e00:	4632      	mov	r2, r6
 8014e02:	4629      	mov	r1, r5
 8014e04:	4620      	mov	r0, r4
 8014e06:	f7ff fc35 	bl	8014674 <RegionCommonUpdateBandTimeOff>
 8014e0a:	4602      	mov	r2, r0
 8014e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e0e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	69d8      	ldr	r0, [r3, #28]
 8014e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e16:	683a      	ldr	r2, [r7, #0]
 8014e18:	6879      	ldr	r1, [r7, #4]
 8014e1a:	f7ff fef4 	bl	8014c06 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d004      	beq.n	8014e30 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8014e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e28:	2200      	movs	r2, #0
 8014e2a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	e006      	b.n	8014e3e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d001      	beq.n	8014e3c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014e38:	230b      	movs	r3, #11
 8014e3a:	e000      	b.n	8014e3e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014e3c:	230c      	movs	r3, #12
    }
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	371c      	adds	r7, #28
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e46 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8014e46:	b5b0      	push	{r4, r5, r7, lr}
 8014e48:	b086      	sub	sp, #24
 8014e4a:	af02      	add	r7, sp, #8
 8014e4c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f993 2000 	ldrsb.w	r2, [r3]
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014e60:	429a      	cmp	r2, r3
 8014e62:	d103      	bne.n	8014e6c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014e6a:	e026      	b.n	8014eba <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014e6c:	7bfb      	ldrb	r3, [r7, #15]
 8014e6e:	3b01      	subs	r3, #1
 8014e70:	b2db      	uxtb	r3, r3
 8014e72:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014e7a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d019      	beq.n	8014eb6 <RegionCommonGetNextLowerTxDr+0x70>
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	78d8      	ldrb	r0, [r3, #3]
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	6859      	ldr	r1, [r3, #4]
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	6892      	ldr	r2, [r2, #8]
 8014e9a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014e9e:	9201      	str	r2, [sp, #4]
 8014ea0:	9300      	str	r3, [sp, #0]
 8014ea2:	462b      	mov	r3, r5
 8014ea4:	4622      	mov	r2, r4
 8014ea6:	f7ff faa2 	bl	80143ee <RegionCommonChanVerifyDr>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	f083 0301 	eor.w	r3, r3, #1
 8014eb0:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d1da      	bne.n	8014e6c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8014eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3710      	adds	r7, #16
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bdb0      	pop	{r4, r5, r7, pc}

08014ec2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014ec2:	b480      	push	{r7}
 8014ec4:	b083      	sub	sp, #12
 8014ec6:	af00      	add	r7, sp, #0
 8014ec8:	4603      	mov	r3, r0
 8014eca:	460a      	mov	r2, r1
 8014ecc:	71fb      	strb	r3, [r7, #7]
 8014ece:	4613      	mov	r3, r2
 8014ed0:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014ed2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014eda:	4293      	cmp	r3, r2
 8014edc:	bfb8      	it	lt
 8014ede:	4613      	movlt	r3, r2
 8014ee0:	b25b      	sxtb	r3, r3
}
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	370c      	adds	r7, #12
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bc80      	pop	{r7}
 8014eea:	4770      	bx	lr

08014eec <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014eec:	b480      	push	{r7}
 8014eee:	b083      	sub	sp, #12
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	009b      	lsls	r3, r3, #2
 8014efa:	683a      	ldr	r2, [r7, #0]
 8014efc:	4413      	add	r3, r2
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	4a07      	ldr	r2, [pc, #28]	; (8014f20 <RegionCommonGetBandwidth+0x34>)
 8014f02:	4293      	cmp	r3, r2
 8014f04:	d004      	beq.n	8014f10 <RegionCommonGetBandwidth+0x24>
 8014f06:	4a07      	ldr	r2, [pc, #28]	; (8014f24 <RegionCommonGetBandwidth+0x38>)
 8014f08:	4293      	cmp	r3, r2
 8014f0a:	d003      	beq.n	8014f14 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	e002      	b.n	8014f16 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014f10:	2301      	movs	r3, #1
 8014f12:	e000      	b.n	8014f16 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014f14:	2302      	movs	r3, #2
    }
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	370c      	adds	r7, #12
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bc80      	pop	{r7}
 8014f1e:	4770      	bx	lr
 8014f20:	0003d090 	.word	0x0003d090
 8014f24:	0007a120 	.word	0x0007a120

08014f28 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8014f28:	b5b0      	push	{r4, r5, r7, lr}
 8014f2a:	b08c      	sub	sp, #48	; 0x30
 8014f2c:	af04      	add	r7, sp, #16
 8014f2e:	4603      	mov	r3, r0
 8014f30:	6039      	str	r1, [r7, #0]
 8014f32:	71fb      	strb	r3, [r7, #7]
 8014f34:	4613      	mov	r3, r2
 8014f36:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8014f38:	4b17      	ldr	r3, [pc, #92]	; (8014f98 <RegionCommonRxConfigPrint+0x70>)
 8014f3a:	f107 0408 	add.w	r4, r7, #8
 8014f3e:	461d      	mov	r5, r3
 8014f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f48:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8014f4c:	79fb      	ldrb	r3, [r7, #7]
 8014f4e:	2b05      	cmp	r3, #5
 8014f50:	d813      	bhi.n	8014f7a <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8014f52:	79fb      	ldrb	r3, [r7, #7]
 8014f54:	009b      	lsls	r3, r3, #2
 8014f56:	f107 0220 	add.w	r2, r7, #32
 8014f5a:	4413      	add	r3, r2
 8014f5c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8014f60:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014f64:	9202      	str	r2, [sp, #8]
 8014f66:	683a      	ldr	r2, [r7, #0]
 8014f68:	9201      	str	r2, [sp, #4]
 8014f6a:	9300      	str	r3, [sp, #0]
 8014f6c:	4b0b      	ldr	r3, [pc, #44]	; (8014f9c <RegionCommonRxConfigPrint+0x74>)
 8014f6e:	2201      	movs	r2, #1
 8014f70:	2100      	movs	r1, #0
 8014f72:	2002      	movs	r0, #2
 8014f74:	f005 fb7a 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014f78:	e00a      	b.n	8014f90 <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014f7a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014f7e:	9301      	str	r3, [sp, #4]
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	9300      	str	r3, [sp, #0]
 8014f84:	4b06      	ldr	r3, [pc, #24]	; (8014fa0 <RegionCommonRxConfigPrint+0x78>)
 8014f86:	2201      	movs	r2, #1
 8014f88:	2100      	movs	r1, #0
 8014f8a:	2002      	movs	r0, #2
 8014f8c:	f005 fb6e 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
}
 8014f90:	bf00      	nop
 8014f92:	3720      	adds	r7, #32
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bdb0      	pop	{r4, r5, r7, pc}
 8014f98:	0801b468 	.word	0x0801b468
 8014f9c:	0801b42c 	.word	0x0801b42c
 8014fa0:	0801b44c 	.word	0x0801b44c

08014fa4 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b084      	sub	sp, #16
 8014fa8:	af02      	add	r7, sp, #8
 8014faa:	6078      	str	r0, [r7, #4]
 8014fac:	460b      	mov	r3, r1
 8014fae:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014fb4:	9301      	str	r3, [sp, #4]
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	9300      	str	r3, [sp, #0]
 8014fba:	4b05      	ldr	r3, [pc, #20]	; (8014fd0 <RegionCommonTxConfigPrint+0x2c>)
 8014fbc:	2201      	movs	r2, #1
 8014fbe:	2100      	movs	r1, #0
 8014fc0:	2002      	movs	r0, #2
 8014fc2:	f005 fb53 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
}
 8014fc6:	bf00      	nop
 8014fc8:	3708      	adds	r7, #8
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}
 8014fce:	bf00      	nop
 8014fd0:	0801b480 	.word	0x0801b480

08014fd4 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b082      	sub	sp, #8
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
 8014fdc:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014fde:	4b2d      	ldr	r3, [pc, #180]	; (8015094 <VerifyRfFreq+0xc0>)
 8014fe0:	6a1b      	ldr	r3, [r3, #32]
 8014fe2:	6878      	ldr	r0, [r7, #4]
 8014fe4:	4798      	blx	r3
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	f083 0301 	eor.w	r3, r3, #1
 8014fec:	b2db      	uxtb	r3, r3
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d001      	beq.n	8014ff6 <VerifyRfFreq+0x22>
    {
        return false;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	e04a      	b.n	801508c <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	4a27      	ldr	r2, [pc, #156]	; (8015098 <VerifyRfFreq+0xc4>)
 8014ffa:	4293      	cmp	r3, r2
 8014ffc:	d307      	bcc.n	801500e <VerifyRfFreq+0x3a>
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	4a26      	ldr	r2, [pc, #152]	; (801509c <VerifyRfFreq+0xc8>)
 8015002:	4293      	cmp	r3, r2
 8015004:	d803      	bhi.n	801500e <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	2202      	movs	r2, #2
 801500a:	701a      	strb	r2, [r3, #0]
 801500c:	e03d      	b.n	801508a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	4a22      	ldr	r2, [pc, #136]	; (801509c <VerifyRfFreq+0xc8>)
 8015012:	4293      	cmp	r3, r2
 8015014:	d907      	bls.n	8015026 <VerifyRfFreq+0x52>
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	4a21      	ldr	r2, [pc, #132]	; (80150a0 <VerifyRfFreq+0xcc>)
 801501a:	4293      	cmp	r3, r2
 801501c:	d803      	bhi.n	8015026 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801501e:	683b      	ldr	r3, [r7, #0]
 8015020:	2200      	movs	r2, #0
 8015022:	701a      	strb	r2, [r3, #0]
 8015024:	e031      	b.n	801508a <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	4a1d      	ldr	r2, [pc, #116]	; (80150a0 <VerifyRfFreq+0xcc>)
 801502a:	4293      	cmp	r3, r2
 801502c:	d907      	bls.n	801503e <VerifyRfFreq+0x6a>
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	4a1c      	ldr	r2, [pc, #112]	; (80150a4 <VerifyRfFreq+0xd0>)
 8015032:	4293      	cmp	r3, r2
 8015034:	d803      	bhi.n	801503e <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	2201      	movs	r2, #1
 801503a:	701a      	strb	r2, [r3, #0]
 801503c:	e025      	b.n	801508a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	4a19      	ldr	r2, [pc, #100]	; (80150a8 <VerifyRfFreq+0xd4>)
 8015042:	4293      	cmp	r3, r2
 8015044:	d907      	bls.n	8015056 <VerifyRfFreq+0x82>
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	4a18      	ldr	r2, [pc, #96]	; (80150ac <VerifyRfFreq+0xd8>)
 801504a:	4293      	cmp	r3, r2
 801504c:	d803      	bhi.n	8015056 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	2205      	movs	r2, #5
 8015052:	701a      	strb	r2, [r3, #0]
 8015054:	e019      	b.n	801508a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	4a15      	ldr	r2, [pc, #84]	; (80150b0 <VerifyRfFreq+0xdc>)
 801505a:	4293      	cmp	r3, r2
 801505c:	d907      	bls.n	801506e <VerifyRfFreq+0x9a>
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	4a14      	ldr	r2, [pc, #80]	; (80150b4 <VerifyRfFreq+0xe0>)
 8015062:	4293      	cmp	r3, r2
 8015064:	d803      	bhi.n	801506e <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	2203      	movs	r2, #3
 801506a:	701a      	strb	r2, [r3, #0]
 801506c:	e00d      	b.n	801508a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	4a11      	ldr	r2, [pc, #68]	; (80150b8 <VerifyRfFreq+0xe4>)
 8015072:	4293      	cmp	r3, r2
 8015074:	d307      	bcc.n	8015086 <VerifyRfFreq+0xb2>
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	4a10      	ldr	r2, [pc, #64]	; (80150bc <VerifyRfFreq+0xe8>)
 801507a:	4293      	cmp	r3, r2
 801507c:	d803      	bhi.n	8015086 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801507e:	683b      	ldr	r3, [r7, #0]
 8015080:	2204      	movs	r2, #4
 8015082:	701a      	strb	r2, [r3, #0]
 8015084:	e001      	b.n	801508a <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8015086:	2300      	movs	r3, #0
 8015088:	e000      	b.n	801508c <VerifyRfFreq+0xb8>
    }
    return true;
 801508a:	2301      	movs	r3, #1
}
 801508c:	4618      	mov	r0, r3
 801508e:	3708      	adds	r7, #8
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}
 8015094:	0801ba28 	.word	0x0801ba28
 8015098:	337055c0 	.word	0x337055c0
 801509c:	338eda3f 	.word	0x338eda3f
 80150a0:	33bca100 	.word	0x33bca100
 80150a4:	33c5c8c0 	.word	0x33c5c8c0
 80150a8:	33c74f5f 	.word	0x33c74f5f
 80150ac:	33cef080 	.word	0x33cef080
 80150b0:	33d1fdbf 	.word	0x33d1fdbf
 80150b4:	33d5ce50 	.word	0x33d5ce50
 80150b8:	33d691a0 	.word	0x33d691a0
 80150bc:	33db2580 	.word	0x33db2580

080150c0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80150c0:	b590      	push	{r4, r7, lr}
 80150c2:	b08b      	sub	sp, #44	; 0x2c
 80150c4:	af04      	add	r7, sp, #16
 80150c6:	4603      	mov	r3, r0
 80150c8:	460a      	mov	r2, r1
 80150ca:	71fb      	strb	r3, [r7, #7]
 80150cc:	4613      	mov	r3, r2
 80150ce:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80150d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80150d4:	4a1f      	ldr	r2, [pc, #124]	; (8015154 <GetTimeOnAir+0x94>)
 80150d6:	5cd3      	ldrb	r3, [r2, r3]
 80150d8:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80150da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80150de:	491e      	ldr	r1, [pc, #120]	; (8015158 <GetTimeOnAir+0x98>)
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7ff ff03 	bl	8014eec <RegionCommonGetBandwidth>
 80150e6:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80150e8:	2300      	movs	r3, #0
 80150ea:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80150ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80150f0:	2b07      	cmp	r3, #7
 80150f2:	d118      	bne.n	8015126 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80150f4:	4b19      	ldr	r3, [pc, #100]	; (801515c <GetTimeOnAir+0x9c>)
 80150f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80150f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80150fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015100:	fb02 f303 	mul.w	r3, r2, r3
 8015104:	4619      	mov	r1, r3
 8015106:	88bb      	ldrh	r3, [r7, #4]
 8015108:	b2db      	uxtb	r3, r3
 801510a:	2201      	movs	r2, #1
 801510c:	9203      	str	r2, [sp, #12]
 801510e:	9302      	str	r3, [sp, #8]
 8015110:	2300      	movs	r3, #0
 8015112:	9301      	str	r3, [sp, #4]
 8015114:	2305      	movs	r3, #5
 8015116:	9300      	str	r3, [sp, #0]
 8015118:	2300      	movs	r3, #0
 801511a:	460a      	mov	r2, r1
 801511c:	68f9      	ldr	r1, [r7, #12]
 801511e:	2000      	movs	r0, #0
 8015120:	47a0      	blx	r4
 8015122:	6178      	str	r0, [r7, #20]
 8015124:	e011      	b.n	801514a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015126:	4b0d      	ldr	r3, [pc, #52]	; (801515c <GetTimeOnAir+0x9c>)
 8015128:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801512a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801512e:	88bb      	ldrh	r3, [r7, #4]
 8015130:	b2db      	uxtb	r3, r3
 8015132:	2101      	movs	r1, #1
 8015134:	9103      	str	r1, [sp, #12]
 8015136:	9302      	str	r3, [sp, #8]
 8015138:	2300      	movs	r3, #0
 801513a:	9301      	str	r3, [sp, #4]
 801513c:	2308      	movs	r3, #8
 801513e:	9300      	str	r3, [sp, #0]
 8015140:	2301      	movs	r3, #1
 8015142:	68f9      	ldr	r1, [r7, #12]
 8015144:	2001      	movs	r0, #1
 8015146:	47a0      	blx	r4
 8015148:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801514a:	697b      	ldr	r3, [r7, #20]
}
 801514c:	4618      	mov	r0, r3
 801514e:	371c      	adds	r7, #28
 8015150:	46bd      	mov	sp, r7
 8015152:	bd90      	pop	{r4, r7, pc}
 8015154:	0801b9f0 	.word	0x0801b9f0
 8015158:	0801b9f8 	.word	0x0801b9f8
 801515c:	0801ba28 	.word	0x0801ba28

08015160 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b088      	sub	sp, #32
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015168:	2300      	movs	r3, #0
 801516a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	781b      	ldrb	r3, [r3, #0]
 8015170:	3b01      	subs	r3, #1
 8015172:	2b38      	cmp	r3, #56	; 0x38
 8015174:	f200 8125 	bhi.w	80153c2 <RegionEU868GetPhyParam+0x262>
 8015178:	a201      	add	r2, pc, #4	; (adr r2, 8015180 <RegionEU868GetPhyParam+0x20>)
 801517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801517e:	bf00      	nop
 8015180:	08015265 	.word	0x08015265
 8015184:	0801526b 	.word	0x0801526b
 8015188:	080153c3 	.word	0x080153c3
 801518c:	080153c3 	.word	0x080153c3
 8015190:	080153c3 	.word	0x080153c3
 8015194:	08015271 	.word	0x08015271
 8015198:	080153c3 	.word	0x080153c3
 801519c:	080152a9 	.word	0x080152a9
 80151a0:	080153c3 	.word	0x080153c3
 80151a4:	080152af 	.word	0x080152af
 80151a8:	080152b5 	.word	0x080152b5
 80151ac:	080152bb 	.word	0x080152bb
 80151b0:	080152c1 	.word	0x080152c1
 80151b4:	080152d1 	.word	0x080152d1
 80151b8:	080152e1 	.word	0x080152e1
 80151bc:	080152e7 	.word	0x080152e7
 80151c0:	080152ef 	.word	0x080152ef
 80151c4:	080152f7 	.word	0x080152f7
 80151c8:	080152ff 	.word	0x080152ff
 80151cc:	08015307 	.word	0x08015307
 80151d0:	0801530f 	.word	0x0801530f
 80151d4:	08015317 	.word	0x08015317
 80151d8:	0801532b 	.word	0x0801532b
 80151dc:	08015331 	.word	0x08015331
 80151e0:	08015337 	.word	0x08015337
 80151e4:	0801533d 	.word	0x0801533d
 80151e8:	08015347 	.word	0x08015347
 80151ec:	08015351 	.word	0x08015351
 80151f0:	08015357 	.word	0x08015357
 80151f4:	0801535f 	.word	0x0801535f
 80151f8:	08015365 	.word	0x08015365
 80151fc:	0801536b 	.word	0x0801536b
 8015200:	08015373 	.word	0x08015373
 8015204:	08015277 	.word	0x08015277
 8015208:	080153c3 	.word	0x080153c3
 801520c:	080153c3 	.word	0x080153c3
 8015210:	080153c3 	.word	0x080153c3
 8015214:	080153c3 	.word	0x080153c3
 8015218:	080153c3 	.word	0x080153c3
 801521c:	080153c3 	.word	0x080153c3
 8015220:	080153c3 	.word	0x080153c3
 8015224:	080153c3 	.word	0x080153c3
 8015228:	080153c3 	.word	0x080153c3
 801522c:	080153c3 	.word	0x080153c3
 8015230:	080153c3 	.word	0x080153c3
 8015234:	080153c3 	.word	0x080153c3
 8015238:	080153c3 	.word	0x080153c3
 801523c:	08015379 	.word	0x08015379
 8015240:	0801537f 	.word	0x0801537f
 8015244:	0801538d 	.word	0x0801538d
 8015248:	080153c3 	.word	0x080153c3
 801524c:	080153c3 	.word	0x080153c3
 8015250:	08015393 	.word	0x08015393
 8015254:	08015399 	.word	0x08015399
 8015258:	080153c3 	.word	0x080153c3
 801525c:	0801539f 	.word	0x0801539f
 8015260:	080153af 	.word	0x080153af
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8015264:	2300      	movs	r3, #0
 8015266:	61bb      	str	r3, [r7, #24]
            break;
 8015268:	e0ac      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801526a:	2300      	movs	r3, #0
 801526c:	61bb      	str	r3, [r7, #24]
            break;
 801526e:	e0a9      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8015270:	2300      	movs	r3, #0
 8015272:	61bb      	str	r3, [r7, #24]
            break;
 8015274:	e0a6      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801527c:	733b      	strb	r3, [r7, #12]
 801527e:	2307      	movs	r3, #7
 8015280:	737b      	strb	r3, [r7, #13]
 8015282:	2300      	movs	r3, #0
 8015284:	73bb      	strb	r3, [r7, #14]
 8015286:	2310      	movs	r3, #16
 8015288:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801528a:	4b52      	ldr	r3, [pc, #328]	; (80153d4 <RegionEU868GetPhyParam+0x274>)
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015290:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015292:	4b50      	ldr	r3, [pc, #320]	; (80153d4 <RegionEU868GetPhyParam+0x274>)
 8015294:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015296:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015298:	f107 030c 	add.w	r3, r7, #12
 801529c:	4618      	mov	r0, r3
 801529e:	f7ff fdd2 	bl	8014e46 <RegionCommonGetNextLowerTxDr>
 80152a2:	4603      	mov	r3, r0
 80152a4:	61bb      	str	r3, [r7, #24]
            break;
 80152a6:	e08d      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80152a8:	2300      	movs	r3, #0
 80152aa:	61bb      	str	r3, [r7, #24]
            break;
 80152ac:	e08a      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80152ae:	2300      	movs	r3, #0
 80152b0:	61bb      	str	r3, [r7, #24]
            break;
 80152b2:	e087      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80152b4:	2340      	movs	r3, #64	; 0x40
 80152b6:	61bb      	str	r3, [r7, #24]
            break;
 80152b8:	e084      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80152ba:	2320      	movs	r3, #32
 80152bc:	61bb      	str	r3, [r7, #24]
            break;
 80152be:	e081      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80152c6:	461a      	mov	r2, r3
 80152c8:	4b43      	ldr	r3, [pc, #268]	; (80153d8 <RegionEU868GetPhyParam+0x278>)
 80152ca:	5c9b      	ldrb	r3, [r3, r2]
 80152cc:	61bb      	str	r3, [r7, #24]
            break;
 80152ce:	e079      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80152d6:	461a      	mov	r2, r3
 80152d8:	4b40      	ldr	r3, [pc, #256]	; (80153dc <RegionEU868GetPhyParam+0x27c>)
 80152da:	5c9b      	ldrb	r3, [r3, r2]
 80152dc:	61bb      	str	r3, [r7, #24]
            break;
 80152de:	e071      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80152e0:	2301      	movs	r3, #1
 80152e2:	61bb      	str	r3, [r7, #24]
            break;
 80152e4:	e06e      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80152e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80152ea:	61bb      	str	r3, [r7, #24]
            break;
 80152ec:	e06a      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80152ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80152f2:	61bb      	str	r3, [r7, #24]
            break;
 80152f4:	e066      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80152f6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80152fa:	61bb      	str	r3, [r7, #24]
            break;
 80152fc:	e062      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80152fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8015302:	61bb      	str	r3, [r7, #24]
            break;
 8015304:	e05e      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015306:	f241 7370 	movw	r3, #6000	; 0x1770
 801530a:	61bb      	str	r3, [r7, #24]
            break;
 801530c:	e05a      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801530e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015312:	61bb      	str	r3, [r7, #24]
            break;
 8015314:	e056      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8015316:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801531a:	4831      	ldr	r0, [pc, #196]	; (80153e0 <RegionEU868GetPhyParam+0x280>)
 801531c:	f001 f874 	bl	8016408 <randr>
 8015320:	4603      	mov	r3, r0
 8015322:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8015326:	61bb      	str	r3, [r7, #24]
            break;
 8015328:	e04c      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801532a:	2300      	movs	r3, #0
 801532c:	61bb      	str	r3, [r7, #24]
            break;
 801532e:	e049      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8015330:	4b2c      	ldr	r3, [pc, #176]	; (80153e4 <RegionEU868GetPhyParam+0x284>)
 8015332:	61bb      	str	r3, [r7, #24]
            break;
 8015334:	e046      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8015336:	2300      	movs	r3, #0
 8015338:	61bb      	str	r3, [r7, #24]
            break;
 801533a:	e043      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801533c:	4b25      	ldr	r3, [pc, #148]	; (80153d4 <RegionEU868GetPhyParam+0x274>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	33c0      	adds	r3, #192	; 0xc0
 8015342:	61bb      	str	r3, [r7, #24]
            break;
 8015344:	e03e      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015346:	4b23      	ldr	r3, [pc, #140]	; (80153d4 <RegionEU868GetPhyParam+0x274>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	33c2      	adds	r3, #194	; 0xc2
 801534c:	61bb      	str	r3, [r7, #24]
            break;
 801534e:	e039      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8015350:	2310      	movs	r3, #16
 8015352:	61bb      	str	r3, [r7, #24]
            break;
 8015354:	e036      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015356:	4b1f      	ldr	r3, [pc, #124]	; (80153d4 <RegionEU868GetPhyParam+0x274>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	61bb      	str	r3, [r7, #24]
            break;
 801535c:	e032      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801535e:	2300      	movs	r3, #0
 8015360:	61bb      	str	r3, [r7, #24]
            break;
 8015362:	e02f      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015364:	2300      	movs	r3, #0
 8015366:	61bb      	str	r3, [r7, #24]
            break;
 8015368:	e02c      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801536a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801536e:	61bb      	str	r3, [r7, #24]
            break;
 8015370:	e028      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8015372:	4b1d      	ldr	r3, [pc, #116]	; (80153e8 <RegionEU868GetPhyParam+0x288>)
 8015374:	61bb      	str	r3, [r7, #24]
            break;
 8015376:	e025      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015378:	4b1a      	ldr	r3, [pc, #104]	; (80153e4 <RegionEU868GetPhyParam+0x284>)
 801537a:	61bb      	str	r3, [r7, #24]
            break;
 801537c:	e022      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801537e:	2311      	movs	r3, #17
 8015380:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8015382:	2302      	movs	r3, #2
 8015384:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015386:	2300      	movs	r3, #0
 8015388:	76bb      	strb	r3, [r7, #26]
            break;
 801538a:	e01b      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801538c:	2303      	movs	r3, #3
 801538e:	61bb      	str	r3, [r7, #24]
            break;
 8015390:	e018      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015392:	4b14      	ldr	r3, [pc, #80]	; (80153e4 <RegionEU868GetPhyParam+0x284>)
 8015394:	61bb      	str	r3, [r7, #24]
            break;
 8015396:	e015      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015398:	2303      	movs	r3, #3
 801539a:	61bb      	str	r3, [r7, #24]
            break;
 801539c:	e012      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80153a4:	461a      	mov	r2, r3
 80153a6:	4b11      	ldr	r3, [pc, #68]	; (80153ec <RegionEU868GetPhyParam+0x28c>)
 80153a8:	5c9b      	ldrb	r3, [r3, r2]
 80153aa:	61bb      	str	r3, [r7, #24]
            break;
 80153ac:	e00a      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80153b4:	490e      	ldr	r1, [pc, #56]	; (80153f0 <RegionEU868GetPhyParam+0x290>)
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7ff fd98 	bl	8014eec <RegionCommonGetBandwidth>
 80153bc:	4603      	mov	r3, r0
 80153be:	61bb      	str	r3, [r7, #24]
            break;
 80153c0:	e000      	b.n	80153c4 <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 80153c2:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80153c4:	69bb      	ldr	r3, [r7, #24]
 80153c6:	61fb      	str	r3, [r7, #28]
 80153c8:	2300      	movs	r3, #0
 80153ca:	69fb      	ldr	r3, [r7, #28]
}
 80153cc:	4618      	mov	r0, r3
 80153ce:	3720      	adds	r7, #32
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bd80      	pop	{r7, pc}
 80153d4:	20000ddc 	.word	0x20000ddc
 80153d8:	0801ba18 	.word	0x0801ba18
 80153dc:	0801ba20 	.word	0x0801ba20
 80153e0:	fffffc18 	.word	0xfffffc18
 80153e4:	33d3e608 	.word	0x33d3e608
 80153e8:	4009999a 	.word	0x4009999a
 80153ec:	0801b9f0 	.word	0x0801b9f0
 80153f0:	0801b9f8 	.word	0x0801b9f8

080153f4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80153f4:	b590      	push	{r4, r7, lr}
 80153f6:	b085      	sub	sp, #20
 80153f8:	af02      	add	r7, sp, #8
 80153fa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80153fc:	4b11      	ldr	r3, [pc, #68]	; (8015444 <RegionEU868SetBandTxDone+0x50>)
 80153fe:	681a      	ldr	r2, [r3, #0]
 8015400:	4b11      	ldr	r3, [pc, #68]	; (8015448 <RegionEU868SetBandTxDone+0x54>)
 8015402:	6819      	ldr	r1, [r3, #0]
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	781b      	ldrb	r3, [r3, #0]
 8015408:	4618      	mov	r0, r3
 801540a:	4603      	mov	r3, r0
 801540c:	005b      	lsls	r3, r3, #1
 801540e:	4403      	add	r3, r0
 8015410:	009b      	lsls	r3, r3, #2
 8015412:	440b      	add	r3, r1
 8015414:	3309      	adds	r3, #9
 8015416:	781b      	ldrb	r3, [r3, #0]
 8015418:	4619      	mov	r1, r3
 801541a:	460b      	mov	r3, r1
 801541c:	005b      	lsls	r3, r3, #1
 801541e:	440b      	add	r3, r1
 8015420:	00db      	lsls	r3, r3, #3
 8015422:	18d0      	adds	r0, r2, r3
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6899      	ldr	r1, [r3, #8]
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	785c      	ldrb	r4, [r3, #1]
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	691a      	ldr	r2, [r3, #16]
 8015430:	9200      	str	r2, [sp, #0]
 8015432:	68db      	ldr	r3, [r3, #12]
 8015434:	4622      	mov	r2, r4
 8015436:	f7ff f8ef 	bl	8014618 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 801543a:	bf00      	nop
 801543c:	370c      	adds	r7, #12
 801543e:	46bd      	mov	sp, r7
 8015440:	bd90      	pop	{r4, r7, pc}
 8015442:	bf00      	nop
 8015444:	20000dd8 	.word	0x20000dd8
 8015448:	20000ddc 	.word	0x20000ddc

0801544c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b0b0      	sub	sp, #192	; 0xc0
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8015454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015458:	2290      	movs	r2, #144	; 0x90
 801545a:	2100      	movs	r1, #0
 801545c:	4618      	mov	r0, r3
 801545e:	f005 fba3 	bl	801aba8 <memset>
 8015462:	2364      	movs	r3, #100	; 0x64
 8015464:	863b      	strh	r3, [r7, #48]	; 0x30
 8015466:	2364      	movs	r3, #100	; 0x64
 8015468:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801546c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015470:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8015474:	230a      	movs	r3, #10
 8015476:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801547a:	2364      	movs	r3, #100	; 0x64
 801547c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8015480:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015484:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	7a1b      	ldrb	r3, [r3, #8]
 801548c:	2b02      	cmp	r3, #2
 801548e:	d05c      	beq.n	801554a <RegionEU868InitDefaults+0xfe>
 8015490:	2b02      	cmp	r3, #2
 8015492:	dc69      	bgt.n	8015568 <RegionEU868InitDefaults+0x11c>
 8015494:	2b00      	cmp	r3, #0
 8015496:	d002      	beq.n	801549e <RegionEU868InitDefaults+0x52>
 8015498:	2b01      	cmp	r3, #1
 801549a:	d03e      	beq.n	801551a <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801549c:	e064      	b.n	8015568 <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d061      	beq.n	801556a <RegionEU868InitDefaults+0x11e>
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	685b      	ldr	r3, [r3, #4]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d05d      	beq.n	801556a <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	4a2f      	ldr	r2, [pc, #188]	; (8015570 <RegionEU868InitDefaults+0x124>)
 80154b4:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	685b      	ldr	r3, [r3, #4]
 80154ba:	4a2e      	ldr	r2, [pc, #184]	; (8015574 <RegionEU868InitDefaults+0x128>)
 80154bc:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80154be:	4b2c      	ldr	r3, [pc, #176]	; (8015570 <RegionEU868InitDefaults+0x124>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	4618      	mov	r0, r3
 80154c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80154c8:	2290      	movs	r2, #144	; 0x90
 80154ca:	4619      	mov	r1, r3
 80154cc:	f000 ffb3 	bl	8016436 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80154d0:	4b28      	ldr	r3, [pc, #160]	; (8015574 <RegionEU868InitDefaults+0x128>)
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	4a28      	ldr	r2, [pc, #160]	; (8015578 <RegionEU868InitDefaults+0x12c>)
 80154d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80154d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80154dc:	4b25      	ldr	r3, [pc, #148]	; (8015574 <RegionEU868InitDefaults+0x128>)
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	4a26      	ldr	r2, [pc, #152]	; (801557c <RegionEU868InitDefaults+0x130>)
 80154e2:	330c      	adds	r3, #12
 80154e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80154e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80154ea:	4b22      	ldr	r3, [pc, #136]	; (8015574 <RegionEU868InitDefaults+0x128>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	4a24      	ldr	r2, [pc, #144]	; (8015580 <RegionEU868InitDefaults+0x134>)
 80154f0:	3318      	adds	r3, #24
 80154f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80154f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80154f8:	4b1e      	ldr	r3, [pc, #120]	; (8015574 <RegionEU868InitDefaults+0x128>)
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	2207      	movs	r2, #7
 80154fe:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015502:	4b1c      	ldr	r3, [pc, #112]	; (8015574 <RegionEU868InitDefaults+0x128>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 801550a:	4b1a      	ldr	r3, [pc, #104]	; (8015574 <RegionEU868InitDefaults+0x128>)
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	33c2      	adds	r3, #194	; 0xc2
 8015510:	2201      	movs	r2, #1
 8015512:	4619      	mov	r1, r3
 8015514:	f7ff f85a 	bl	80145cc <RegionCommonChanMaskCopy>
 8015518:	e027      	b.n	801556a <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801551a:	4b16      	ldr	r3, [pc, #88]	; (8015574 <RegionEU868InitDefaults+0x128>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	2200      	movs	r2, #0
 8015520:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015522:	4b14      	ldr	r3, [pc, #80]	; (8015574 <RegionEU868InitDefaults+0x128>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	2200      	movs	r2, #0
 8015528:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801552a:	4b12      	ldr	r3, [pc, #72]	; (8015574 <RegionEU868InitDefaults+0x128>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	2200      	movs	r2, #0
 8015530:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015532:	4b10      	ldr	r3, [pc, #64]	; (8015574 <RegionEU868InitDefaults+0x128>)
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 801553a:	4b0e      	ldr	r3, [pc, #56]	; (8015574 <RegionEU868InitDefaults+0x128>)
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	33c2      	adds	r3, #194	; 0xc2
 8015540:	2201      	movs	r2, #1
 8015542:	4619      	mov	r1, r3
 8015544:	f7ff f842 	bl	80145cc <RegionCommonChanMaskCopy>
            break;
 8015548:	e00f      	b.n	801556a <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801554a:	4b0a      	ldr	r3, [pc, #40]	; (8015574 <RegionEU868InitDefaults+0x128>)
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8015552:	4b08      	ldr	r3, [pc, #32]	; (8015574 <RegionEU868InitDefaults+0x128>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 801555a:	4b06      	ldr	r3, [pc, #24]	; (8015574 <RegionEU868InitDefaults+0x128>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	430a      	orrs	r2, r1
 8015560:	b292      	uxth	r2, r2
 8015562:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 8015566:	e000      	b.n	801556a <RegionEU868InitDefaults+0x11e>
            break;
 8015568:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801556a:	37c0      	adds	r7, #192	; 0xc0
 801556c:	46bd      	mov	sp, r7
 801556e:	bd80      	pop	{r7, pc}
 8015570:	20000dd8 	.word	0x20000dd8
 8015574:	20000ddc 	.word	0x20000ddc
 8015578:	0801b49c 	.word	0x0801b49c
 801557c:	0801b4a8 	.word	0x0801b4a8
 8015580:	0801b4b4 	.word	0x0801b4b4

08015584 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b084      	sub	sp, #16
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
 801558c:	460b      	mov	r3, r1
 801558e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015590:	78fb      	ldrb	r3, [r7, #3]
 8015592:	2b0f      	cmp	r3, #15
 8015594:	d86c      	bhi.n	8015670 <RegionEU868Verify+0xec>
 8015596:	a201      	add	r2, pc, #4	; (adr r2, 801559c <RegionEU868Verify+0x18>)
 8015598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801559c:	080155dd 	.word	0x080155dd
 80155a0:	08015671 	.word	0x08015671
 80155a4:	08015671 	.word	0x08015671
 80155a8:	08015671 	.word	0x08015671
 80155ac:	08015671 	.word	0x08015671
 80155b0:	080155f5 	.word	0x080155f5
 80155b4:	08015613 	.word	0x08015613
 80155b8:	08015631 	.word	0x08015631
 80155bc:	08015671 	.word	0x08015671
 80155c0:	0801564f 	.word	0x0801564f
 80155c4:	0801564f 	.word	0x0801564f
 80155c8:	08015671 	.word	0x08015671
 80155cc:	08015671 	.word	0x08015671
 80155d0:	08015671 	.word	0x08015671
 80155d4:	08015671 	.word	0x08015671
 80155d8:	0801566d 	.word	0x0801566d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80155dc:	2300      	movs	r3, #0
 80155de:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	f107 020f 	add.w	r2, r7, #15
 80155e8:	4611      	mov	r1, r2
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7ff fcf2 	bl	8014fd4 <VerifyRfFreq>
 80155f0:	4603      	mov	r3, r0
 80155f2:	e03e      	b.n	8015672 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f993 3000 	ldrsb.w	r3, [r3]
 80155fa:	2207      	movs	r2, #7
 80155fc:	2100      	movs	r1, #0
 80155fe:	4618      	mov	r0, r3
 8015600:	f7fe ff67 	bl	80144d2 <RegionCommonValueInRange>
 8015604:	4603      	mov	r3, r0
 8015606:	2b00      	cmp	r3, #0
 8015608:	bf14      	ite	ne
 801560a:	2301      	movne	r3, #1
 801560c:	2300      	moveq	r3, #0
 801560e:	b2db      	uxtb	r3, r3
 8015610:	e02f      	b.n	8015672 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f993 3000 	ldrsb.w	r3, [r3]
 8015618:	2205      	movs	r2, #5
 801561a:	2100      	movs	r1, #0
 801561c:	4618      	mov	r0, r3
 801561e:	f7fe ff58 	bl	80144d2 <RegionCommonValueInRange>
 8015622:	4603      	mov	r3, r0
 8015624:	2b00      	cmp	r3, #0
 8015626:	bf14      	ite	ne
 8015628:	2301      	movne	r3, #1
 801562a:	2300      	moveq	r3, #0
 801562c:	b2db      	uxtb	r3, r3
 801562e:	e020      	b.n	8015672 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f993 3000 	ldrsb.w	r3, [r3]
 8015636:	2207      	movs	r2, #7
 8015638:	2100      	movs	r1, #0
 801563a:	4618      	mov	r0, r3
 801563c:	f7fe ff49 	bl	80144d2 <RegionCommonValueInRange>
 8015640:	4603      	mov	r3, r0
 8015642:	2b00      	cmp	r3, #0
 8015644:	bf14      	ite	ne
 8015646:	2301      	movne	r3, #1
 8015648:	2300      	moveq	r3, #0
 801564a:	b2db      	uxtb	r3, r3
 801564c:	e011      	b.n	8015672 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f993 3000 	ldrsb.w	r3, [r3]
 8015654:	2207      	movs	r2, #7
 8015656:	2100      	movs	r1, #0
 8015658:	4618      	mov	r0, r3
 801565a:	f7fe ff3a 	bl	80144d2 <RegionCommonValueInRange>
 801565e:	4603      	mov	r3, r0
 8015660:	2b00      	cmp	r3, #0
 8015662:	bf14      	ite	ne
 8015664:	2301      	movne	r3, #1
 8015666:	2300      	moveq	r3, #0
 8015668:	b2db      	uxtb	r3, r3
 801566a:	e002      	b.n	8015672 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801566c:	2301      	movs	r3, #1
 801566e:	e000      	b.n	8015672 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8015670:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8015672:	4618      	mov	r0, r3
 8015674:	3710      	adds	r7, #16
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}
 801567a:	bf00      	nop

0801567c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b08a      	sub	sp, #40	; 0x28
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015684:	2350      	movs	r3, #80	; 0x50
 8015686:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	791b      	ldrb	r3, [r3, #4]
 801568e:	2b10      	cmp	r3, #16
 8015690:	d162      	bne.n	8015758 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	330f      	adds	r3, #15
 8015698:	781b      	ldrb	r3, [r3, #0]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d15e      	bne.n	801575c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801569e:	2300      	movs	r3, #0
 80156a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156a4:	2303      	movs	r3, #3
 80156a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80156aa:	e050      	b.n	801574e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80156ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156b0:	2b07      	cmp	r3, #7
 80156b2:	d824      	bhi.n	80156fe <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	681a      	ldr	r2, [r3, #0]
 80156b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156bc:	4413      	add	r3, r2
 80156be:	781b      	ldrb	r3, [r3, #0]
 80156c0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80156c2:	69ba      	ldr	r2, [r7, #24]
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	6819      	ldr	r1, [r3, #0]
 80156c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156cc:	3301      	adds	r3, #1
 80156ce:	440b      	add	r3, r1
 80156d0:	781b      	ldrb	r3, [r3, #0]
 80156d2:	021b      	lsls	r3, r3, #8
 80156d4:	4313      	orrs	r3, r2
 80156d6:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80156d8:	69ba      	ldr	r2, [r7, #24]
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	6819      	ldr	r1, [r3, #0]
 80156de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156e2:	3302      	adds	r3, #2
 80156e4:	440b      	add	r3, r1
 80156e6:	781b      	ldrb	r3, [r3, #0]
 80156e8:	041b      	lsls	r3, r3, #16
 80156ea:	4313      	orrs	r3, r2
 80156ec:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80156ee:	69bb      	ldr	r3, [r7, #24]
 80156f0:	2264      	movs	r2, #100	; 0x64
 80156f2:	fb02 f303 	mul.w	r3, r2, r3
 80156f6:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80156f8:	2300      	movs	r3, #0
 80156fa:	61fb      	str	r3, [r7, #28]
 80156fc:	e006      	b.n	801570c <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80156fe:	2300      	movs	r3, #0
 8015700:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015702:	2300      	movs	r3, #0
 8015704:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015708:	2300      	movs	r3, #0
 801570a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 801570c:	69bb      	ldr	r3, [r7, #24]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d00b      	beq.n	801572a <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015712:	f107 0318 	add.w	r3, r7, #24
 8015716:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015718:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801571c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801571e:	f107 0310 	add.w	r3, r7, #16
 8015722:	4618      	mov	r0, r3
 8015724:	f000 fd0e 	bl	8016144 <RegionEU868ChannelAdd>
 8015728:	e007      	b.n	801573a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801572a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801572e:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8015730:	f107 030c 	add.w	r3, r7, #12
 8015734:	4618      	mov	r0, r3
 8015736:	f000 fda7 	bl	8016288 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801573a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801573e:	3303      	adds	r3, #3
 8015740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015748:	3301      	adds	r3, #1
 801574a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801574e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015752:	2b0f      	cmp	r3, #15
 8015754:	d9aa      	bls.n	80156ac <RegionEU868ApplyCFList+0x30>
 8015756:	e002      	b.n	801575e <RegionEU868ApplyCFList+0xe2>
        return;
 8015758:	bf00      	nop
 801575a:	e000      	b.n	801575e <RegionEU868ApplyCFList+0xe2>
        return;
 801575c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801575e:	3728      	adds	r7, #40	; 0x28
 8015760:	46bd      	mov	sp, r7
 8015762:	bd80      	pop	{r7, pc}

08015764 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	791b      	ldrb	r3, [r3, #4]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d002      	beq.n	801577a <RegionEU868ChanMaskSet+0x16>
 8015774:	2b01      	cmp	r3, #1
 8015776:	d00b      	beq.n	8015790 <RegionEU868ChanMaskSet+0x2c>
 8015778:	e015      	b.n	80157a6 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801577a:	4b0e      	ldr	r3, [pc, #56]	; (80157b4 <RegionEU868ChanMaskSet+0x50>)
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	2201      	movs	r2, #1
 8015788:	4619      	mov	r1, r3
 801578a:	f7fe ff1f 	bl	80145cc <RegionCommonChanMaskCopy>
            break;
 801578e:	e00c      	b.n	80157aa <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015790:	4b08      	ldr	r3, [pc, #32]	; (80157b4 <RegionEU868ChanMaskSet+0x50>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	2201      	movs	r2, #1
 801579e:	4619      	mov	r1, r3
 80157a0:	f7fe ff14 	bl	80145cc <RegionCommonChanMaskCopy>
            break;
 80157a4:	e001      	b.n	80157aa <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80157a6:	2300      	movs	r3, #0
 80157a8:	e000      	b.n	80157ac <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80157aa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	3708      	adds	r7, #8
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	20000ddc 	.word	0x20000ddc

080157b8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b088      	sub	sp, #32
 80157bc:	af02      	add	r7, sp, #8
 80157be:	60ba      	str	r2, [r7, #8]
 80157c0:	607b      	str	r3, [r7, #4]
 80157c2:	4603      	mov	r3, r0
 80157c4:	73fb      	strb	r3, [r7, #15]
 80157c6:	460b      	mov	r3, r1
 80157c8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80157ca:	2300      	movs	r3, #0
 80157cc:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80157ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157d2:	2b07      	cmp	r3, #7
 80157d4:	bfa8      	it	ge
 80157d6:	2307      	movge	r3, #7
 80157d8:	b25a      	sxtb	r2, r3
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157e4:	491e      	ldr	r1, [pc, #120]	; (8015860 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80157e6:	4618      	mov	r0, r3
 80157e8:	f7ff fb80 	bl	8014eec <RegionCommonGetBandwidth>
 80157ec:	4603      	mov	r3, r0
 80157ee:	b2da      	uxtb	r2, r3
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157fa:	2b07      	cmp	r3, #7
 80157fc:	d10a      	bne.n	8015814 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015804:	461a      	mov	r2, r3
 8015806:	4b17      	ldr	r3, [pc, #92]	; (8015864 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015808:	5c9b      	ldrb	r3, [r3, r2]
 801580a:	4618      	mov	r0, r3
 801580c:	f7ff f902 	bl	8014a14 <RegionCommonComputeSymbolTimeFsk>
 8015810:	6178      	str	r0, [r7, #20]
 8015812:	e011      	b.n	8015838 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801581a:	461a      	mov	r2, r3
 801581c:	4b11      	ldr	r3, [pc, #68]	; (8015864 <RegionEU868ComputeRxWindowParameters+0xac>)
 801581e:	5c9a      	ldrb	r2, [r3, r2]
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015826:	4619      	mov	r1, r3
 8015828:	4b0d      	ldr	r3, [pc, #52]	; (8015860 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801582a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801582e:	4619      	mov	r1, r3
 8015830:	4610      	mov	r0, r2
 8015832:	f7ff f8d9 	bl	80149e8 <RegionCommonComputeSymbolTimeLoRa>
 8015836:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015838:	4b0b      	ldr	r3, [pc, #44]	; (8015868 <RegionEU868ComputeRxWindowParameters+0xb0>)
 801583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801583c:	4798      	blx	r3
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	3308      	adds	r3, #8
 8015842:	687a      	ldr	r2, [r7, #4]
 8015844:	320c      	adds	r2, #12
 8015846:	7bb9      	ldrb	r1, [r7, #14]
 8015848:	9201      	str	r2, [sp, #4]
 801584a:	9300      	str	r3, [sp, #0]
 801584c:	4603      	mov	r3, r0
 801584e:	68ba      	ldr	r2, [r7, #8]
 8015850:	6978      	ldr	r0, [r7, #20]
 8015852:	f7ff f8ef 	bl	8014a34 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015856:	bf00      	nop
 8015858:	3718      	adds	r7, #24
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	0801b9f8 	.word	0x0801b9f8
 8015864:	0801b9f0 	.word	0x0801b9f0
 8015868:	0801ba28 	.word	0x0801ba28

0801586c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801586c:	b5b0      	push	{r4, r5, r7, lr}
 801586e:	b090      	sub	sp, #64	; 0x40
 8015870:	af0a      	add	r7, sp, #40	; 0x28
 8015872:	6078      	str	r0, [r7, #4]
 8015874:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	785b      	ldrb	r3, [r3, #1]
 801587a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801587c:	2300      	movs	r3, #0
 801587e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015880:	2300      	movs	r3, #0
 8015882:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	685b      	ldr	r3, [r3, #4]
 8015888:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801588a:	4b5a      	ldr	r3, [pc, #360]	; (80159f4 <RegionEU868RxConfig+0x188>)
 801588c:	685b      	ldr	r3, [r3, #4]
 801588e:	4798      	blx	r3
 8015890:	4603      	mov	r3, r0
 8015892:	2b00      	cmp	r3, #0
 8015894:	d001      	beq.n	801589a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8015896:	2300      	movs	r3, #0
 8015898:	e0a8      	b.n	80159ec <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	7cdb      	ldrb	r3, [r3, #19]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d126      	bne.n	80158f0 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80158a2:	4b55      	ldr	r3, [pc, #340]	; (80159f8 <RegionEU868RxConfig+0x18c>)
 80158a4:	681a      	ldr	r2, [r3, #0]
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	781b      	ldrb	r3, [r3, #0]
 80158aa:	4619      	mov	r1, r3
 80158ac:	460b      	mov	r3, r1
 80158ae:	005b      	lsls	r3, r3, #1
 80158b0:	440b      	add	r3, r1
 80158b2:	009b      	lsls	r3, r3, #2
 80158b4:	4413      	add	r3, r2
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80158ba:	4b4f      	ldr	r3, [pc, #316]	; (80159f8 <RegionEU868RxConfig+0x18c>)
 80158bc:	681a      	ldr	r2, [r3, #0]
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	4619      	mov	r1, r3
 80158c4:	460b      	mov	r3, r1
 80158c6:	005b      	lsls	r3, r3, #1
 80158c8:	440b      	add	r3, r1
 80158ca:	009b      	lsls	r3, r3, #2
 80158cc:	4413      	add	r3, r2
 80158ce:	3304      	adds	r3, #4
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d00c      	beq.n	80158f0 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80158d6:	4b48      	ldr	r3, [pc, #288]	; (80159f8 <RegionEU868RxConfig+0x18c>)
 80158d8:	681a      	ldr	r2, [r3, #0]
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	781b      	ldrb	r3, [r3, #0]
 80158de:	4619      	mov	r1, r3
 80158e0:	460b      	mov	r3, r1
 80158e2:	005b      	lsls	r3, r3, #1
 80158e4:	440b      	add	r3, r1
 80158e6:	009b      	lsls	r3, r3, #2
 80158e8:	4413      	add	r3, r2
 80158ea:	3304      	adds	r3, #4
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80158f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158f4:	4a41      	ldr	r2, [pc, #260]	; (80159fc <RegionEU868RxConfig+0x190>)
 80158f6:	5cd3      	ldrb	r3, [r2, r3]
 80158f8:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80158fa:	4b3e      	ldr	r3, [pc, #248]	; (80159f4 <RegionEU868RxConfig+0x188>)
 80158fc:	68db      	ldr	r3, [r3, #12]
 80158fe:	6938      	ldr	r0, [r7, #16]
 8015900:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015906:	2b07      	cmp	r3, #7
 8015908:	d128      	bne.n	801595c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801590a:	2300      	movs	r3, #0
 801590c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801590e:	4b39      	ldr	r3, [pc, #228]	; (80159f4 <RegionEU868RxConfig+0x188>)
 8015910:	699c      	ldr	r4, [r3, #24]
 8015912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015916:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801591a:	fb02 f303 	mul.w	r3, r2, r3
 801591e:	4619      	mov	r1, r3
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	689b      	ldr	r3, [r3, #8]
 8015924:	b29b      	uxth	r3, r3
 8015926:	687a      	ldr	r2, [r7, #4]
 8015928:	7c92      	ldrb	r2, [r2, #18]
 801592a:	7df8      	ldrb	r0, [r7, #23]
 801592c:	9209      	str	r2, [sp, #36]	; 0x24
 801592e:	2200      	movs	r2, #0
 8015930:	9208      	str	r2, [sp, #32]
 8015932:	2200      	movs	r2, #0
 8015934:	9207      	str	r2, [sp, #28]
 8015936:	2200      	movs	r2, #0
 8015938:	9206      	str	r2, [sp, #24]
 801593a:	2201      	movs	r2, #1
 801593c:	9205      	str	r2, [sp, #20]
 801593e:	2200      	movs	r2, #0
 8015940:	9204      	str	r2, [sp, #16]
 8015942:	2200      	movs	r2, #0
 8015944:	9203      	str	r2, [sp, #12]
 8015946:	9302      	str	r3, [sp, #8]
 8015948:	2305      	movs	r3, #5
 801594a:	9301      	str	r3, [sp, #4]
 801594c:	4b2c      	ldr	r3, [pc, #176]	; (8015a00 <RegionEU868RxConfig+0x194>)
 801594e:	9300      	str	r3, [sp, #0]
 8015950:	2300      	movs	r3, #0
 8015952:	460a      	mov	r2, r1
 8015954:	f24c 3150 	movw	r1, #50000	; 0xc350
 8015958:	47a0      	blx	r4
 801595a:	e024      	b.n	80159a6 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801595c:	2301      	movs	r3, #1
 801595e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015960:	4b24      	ldr	r3, [pc, #144]	; (80159f4 <RegionEU868RxConfig+0x188>)
 8015962:	699c      	ldr	r4, [r3, #24]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	789b      	ldrb	r3, [r3, #2]
 8015968:	461d      	mov	r5, r3
 801596a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	689b      	ldr	r3, [r3, #8]
 8015972:	b29b      	uxth	r3, r3
 8015974:	687a      	ldr	r2, [r7, #4]
 8015976:	7c92      	ldrb	r2, [r2, #18]
 8015978:	7df8      	ldrb	r0, [r7, #23]
 801597a:	9209      	str	r2, [sp, #36]	; 0x24
 801597c:	2201      	movs	r2, #1
 801597e:	9208      	str	r2, [sp, #32]
 8015980:	2200      	movs	r2, #0
 8015982:	9207      	str	r2, [sp, #28]
 8015984:	2200      	movs	r2, #0
 8015986:	9206      	str	r2, [sp, #24]
 8015988:	2200      	movs	r2, #0
 801598a:	9205      	str	r2, [sp, #20]
 801598c:	2200      	movs	r2, #0
 801598e:	9204      	str	r2, [sp, #16]
 8015990:	2200      	movs	r2, #0
 8015992:	9203      	str	r2, [sp, #12]
 8015994:	9302      	str	r3, [sp, #8]
 8015996:	2308      	movs	r3, #8
 8015998:	9301      	str	r3, [sp, #4]
 801599a:	2300      	movs	r3, #0
 801599c:	9300      	str	r3, [sp, #0]
 801599e:	2301      	movs	r3, #1
 80159a0:	460a      	mov	r2, r1
 80159a2:	4629      	mov	r1, r5
 80159a4:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	7c5b      	ldrb	r3, [r3, #17]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d005      	beq.n	80159ba <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80159ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159b2:	4a14      	ldr	r2, [pc, #80]	; (8015a04 <RegionEU868RxConfig+0x198>)
 80159b4:	5cd3      	ldrb	r3, [r2, r3]
 80159b6:	75bb      	strb	r3, [r7, #22]
 80159b8:	e004      	b.n	80159c4 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80159ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159be:	4a12      	ldr	r2, [pc, #72]	; (8015a08 <RegionEU868RxConfig+0x19c>)
 80159c0:	5cd3      	ldrb	r3, [r2, r3]
 80159c2:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80159c4:	4b0b      	ldr	r3, [pc, #44]	; (80159f4 <RegionEU868RxConfig+0x188>)
 80159c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159c8:	7dba      	ldrb	r2, [r7, #22]
 80159ca:	320d      	adds	r2, #13
 80159cc:	b2d1      	uxtb	r1, r2
 80159ce:	7dfa      	ldrb	r2, [r7, #23]
 80159d0:	4610      	mov	r0, r2
 80159d2:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	7cdb      	ldrb	r3, [r3, #19]
 80159d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80159dc:	6939      	ldr	r1, [r7, #16]
 80159de:	4618      	mov	r0, r3
 80159e0:	f7ff faa2 	bl	8014f28 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80159e4:	683b      	ldr	r3, [r7, #0]
 80159e6:	7bfa      	ldrb	r2, [r7, #15]
 80159e8:	701a      	strb	r2, [r3, #0]
    return true;
 80159ea:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80159ec:	4618      	mov	r0, r3
 80159ee:	3718      	adds	r7, #24
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bdb0      	pop	{r4, r5, r7, pc}
 80159f4:	0801ba28 	.word	0x0801ba28
 80159f8:	20000ddc 	.word	0x20000ddc
 80159fc:	0801b9f0 	.word	0x0801b9f0
 8015a00:	00014585 	.word	0x00014585
 8015a04:	0801ba20 	.word	0x0801ba20
 8015a08:	0801ba18 	.word	0x0801ba18

08015a0c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015a0c:	b590      	push	{r4, r7, lr}
 8015a0e:	b093      	sub	sp, #76	; 0x4c
 8015a10:	af0a      	add	r7, sp, #40	; 0x28
 8015a12:	60f8      	str	r0, [r7, #12]
 8015a14:	60b9      	str	r1, [r7, #8]
 8015a16:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a1e:	461a      	mov	r2, r3
 8015a20:	4b5d      	ldr	r3, [pc, #372]	; (8015b98 <RegionEU868TxConfig+0x18c>)
 8015a22:	5c9b      	ldrb	r3, [r3, r2]
 8015a24:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015a2c:	4b5b      	ldr	r3, [pc, #364]	; (8015b9c <RegionEU868TxConfig+0x190>)
 8015a2e:	681a      	ldr	r2, [r3, #0]
 8015a30:	4b5b      	ldr	r3, [pc, #364]	; (8015ba0 <RegionEU868TxConfig+0x194>)
 8015a32:	6819      	ldr	r1, [r3, #0]
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	781b      	ldrb	r3, [r3, #0]
 8015a38:	461c      	mov	r4, r3
 8015a3a:	4623      	mov	r3, r4
 8015a3c:	005b      	lsls	r3, r3, #1
 8015a3e:	4423      	add	r3, r4
 8015a40:	009b      	lsls	r3, r3, #2
 8015a42:	440b      	add	r3, r1
 8015a44:	3309      	adds	r3, #9
 8015a46:	781b      	ldrb	r3, [r3, #0]
 8015a48:	4619      	mov	r1, r3
 8015a4a:	460b      	mov	r3, r1
 8015a4c:	005b      	lsls	r3, r3, #1
 8015a4e:	440b      	add	r3, r1
 8015a50:	00db      	lsls	r3, r3, #3
 8015a52:	4413      	add	r3, r2
 8015a54:	3302      	adds	r3, #2
 8015a56:	f993 3000 	ldrsb.w	r3, [r3]
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	f7ff fa31 	bl	8014ec2 <RegionCommonLimitTxPower>
 8015a60:	4603      	mov	r3, r0
 8015a62:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a6a:	494e      	ldr	r1, [pc, #312]	; (8015ba4 <RegionEU868TxConfig+0x198>)
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7ff fa3d 	bl	8014eec <RegionCommonGetBandwidth>
 8015a72:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015a74:	2300      	movs	r3, #0
 8015a76:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	6859      	ldr	r1, [r3, #4]
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	689a      	ldr	r2, [r3, #8]
 8015a80:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7ff f88d 	bl	8014ba4 <RegionCommonComputeTxPower>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015a8e:	4b46      	ldr	r3, [pc, #280]	; (8015ba8 <RegionEU868TxConfig+0x19c>)
 8015a90:	68da      	ldr	r2, [r3, #12]
 8015a92:	4b43      	ldr	r3, [pc, #268]	; (8015ba0 <RegionEU868TxConfig+0x194>)
 8015a94:	6819      	ldr	r1, [r3, #0]
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	781b      	ldrb	r3, [r3, #0]
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	005b      	lsls	r3, r3, #1
 8015aa0:	4403      	add	r3, r0
 8015aa2:	009b      	lsls	r3, r3, #2
 8015aa4:	440b      	add	r3, r1
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ab2:	2b07      	cmp	r3, #7
 8015ab4:	d124      	bne.n	8015b00 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015aba:	4b3b      	ldr	r3, [pc, #236]	; (8015ba8 <RegionEU868TxConfig+0x19c>)
 8015abc:	69dc      	ldr	r4, [r3, #28]
 8015abe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015ac6:	fb02 f303 	mul.w	r3, r2, r3
 8015aca:	461a      	mov	r2, r3
 8015acc:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015ad0:	7ff8      	ldrb	r0, [r7, #31]
 8015ad2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8015ad6:	9308      	str	r3, [sp, #32]
 8015ad8:	2300      	movs	r3, #0
 8015ada:	9307      	str	r3, [sp, #28]
 8015adc:	2300      	movs	r3, #0
 8015ade:	9306      	str	r3, [sp, #24]
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	9305      	str	r3, [sp, #20]
 8015ae4:	2301      	movs	r3, #1
 8015ae6:	9304      	str	r3, [sp, #16]
 8015ae8:	2300      	movs	r3, #0
 8015aea:	9303      	str	r3, [sp, #12]
 8015aec:	2305      	movs	r3, #5
 8015aee:	9302      	str	r3, [sp, #8]
 8015af0:	2300      	movs	r3, #0
 8015af2:	9301      	str	r3, [sp, #4]
 8015af4:	9200      	str	r2, [sp, #0]
 8015af6:	69bb      	ldr	r3, [r7, #24]
 8015af8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015afc:	47a0      	blx	r4
 8015afe:	e01d      	b.n	8015b3c <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015b00:	2301      	movs	r3, #1
 8015b02:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015b04:	4b28      	ldr	r3, [pc, #160]	; (8015ba8 <RegionEU868TxConfig+0x19c>)
 8015b06:	69dc      	ldr	r4, [r3, #28]
 8015b08:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015b0c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015b10:	7ff8      	ldrb	r0, [r7, #31]
 8015b12:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8015b16:	9208      	str	r2, [sp, #32]
 8015b18:	2200      	movs	r2, #0
 8015b1a:	9207      	str	r2, [sp, #28]
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	9206      	str	r2, [sp, #24]
 8015b20:	2200      	movs	r2, #0
 8015b22:	9205      	str	r2, [sp, #20]
 8015b24:	2201      	movs	r2, #1
 8015b26:	9204      	str	r2, [sp, #16]
 8015b28:	2200      	movs	r2, #0
 8015b2a:	9203      	str	r2, [sp, #12]
 8015b2c:	2208      	movs	r2, #8
 8015b2e:	9202      	str	r2, [sp, #8]
 8015b30:	2201      	movs	r2, #1
 8015b32:	9201      	str	r2, [sp, #4]
 8015b34:	9300      	str	r3, [sp, #0]
 8015b36:	69bb      	ldr	r3, [r7, #24]
 8015b38:	2200      	movs	r2, #0
 8015b3a:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015b3c:	4b18      	ldr	r3, [pc, #96]	; (8015ba0 <RegionEU868TxConfig+0x194>)
 8015b3e:	681a      	ldr	r2, [r3, #0]
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	4619      	mov	r1, r3
 8015b46:	460b      	mov	r3, r1
 8015b48:	005b      	lsls	r3, r3, #1
 8015b4a:	440b      	add	r3, r1
 8015b4c:	009b      	lsls	r3, r3, #2
 8015b4e:	4413      	add	r3, r2
 8015b50:	681a      	ldr	r2, [r3, #0]
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015b58:	4619      	mov	r1, r3
 8015b5a:	4610      	mov	r0, r2
 8015b5c:	f7ff fa22 	bl	8014fa4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	899b      	ldrh	r3, [r3, #12]
 8015b6a:	4619      	mov	r1, r3
 8015b6c:	4610      	mov	r0, r2
 8015b6e:	f7ff faa7 	bl	80150c0 <GetTimeOnAir>
 8015b72:	4602      	mov	r2, r0
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015b78:	4b0b      	ldr	r3, [pc, #44]	; (8015ba8 <RegionEU868TxConfig+0x19c>)
 8015b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b7c:	68fa      	ldr	r2, [r7, #12]
 8015b7e:	8992      	ldrh	r2, [r2, #12]
 8015b80:	b2d1      	uxtb	r1, r2
 8015b82:	7ffa      	ldrb	r2, [r7, #31]
 8015b84:	4610      	mov	r0, r2
 8015b86:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015b88:	68bb      	ldr	r3, [r7, #8]
 8015b8a:	7f7a      	ldrb	r2, [r7, #29]
 8015b8c:	701a      	strb	r2, [r3, #0]
    return true;
 8015b8e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015b90:	4618      	mov	r0, r3
 8015b92:	3724      	adds	r7, #36	; 0x24
 8015b94:	46bd      	mov	sp, r7
 8015b96:	bd90      	pop	{r4, r7, pc}
 8015b98:	0801b9f0 	.word	0x0801b9f0
 8015b9c:	20000dd8 	.word	0x20000dd8
 8015ba0:	20000ddc 	.word	0x20000ddc
 8015ba4:	0801b9f8 	.word	0x0801b9f8
 8015ba8:	0801ba28 	.word	0x0801ba28

08015bac <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015bac:	b590      	push	{r4, r7, lr}
 8015bae:	b093      	sub	sp, #76	; 0x4c
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	60b9      	str	r1, [r7, #8]
 8015bb6:	607a      	str	r2, [r7, #4]
 8015bb8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015bba:	2307      	movs	r3, #7
 8015bbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015bc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	601a      	str	r2, [r3, #0]
 8015bc8:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015bda:	e085      	b.n	8015ce8 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	685a      	ldr	r2, [r3, #4]
 8015be0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015be4:	4413      	add	r3, r2
 8015be6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015bea:	4611      	mov	r1, r2
 8015bec:	4618      	mov	r0, r3
 8015bee:	f7fe fe31 	bl	8014854 <RegionCommonParseLinkAdrReq>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015bf8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d07b      	beq.n	8015cf8 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015c00:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015c04:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015c08:	4413      	add	r3, r2
 8015c0a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015c0e:	2307      	movs	r3, #7
 8015c10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015c14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015c18:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015c1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d109      	bne.n	8015c36 <RegionEU868LinkAdrReq+0x8a>
 8015c22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d106      	bne.n	8015c36 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015c28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c2c:	f023 0301 	bic.w	r3, r3, #1
 8015c30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015c34:	e058      	b.n	8015ce8 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015c36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d003      	beq.n	8015c46 <RegionEU868LinkAdrReq+0x9a>
 8015c3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c42:	2b05      	cmp	r3, #5
 8015c44:	d903      	bls.n	8015c4e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015c46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015c4a:	2b06      	cmp	r3, #6
 8015c4c:	d906      	bls.n	8015c5c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015c4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c52:	f023 0301 	bic.w	r3, r3, #1
 8015c56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015c5a:	e045      	b.n	8015ce8 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015c62:	e03d      	b.n	8015ce0 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015c64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c68:	2b06      	cmp	r3, #6
 8015c6a:	d118      	bne.n	8015c9e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015c6c:	4b5f      	ldr	r3, [pc, #380]	; (8015dec <RegionEU868LinkAdrReq+0x240>)
 8015c6e:	6819      	ldr	r1, [r3, #0]
 8015c70:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015c74:	4613      	mov	r3, r2
 8015c76:	005b      	lsls	r3, r3, #1
 8015c78:	4413      	add	r3, r2
 8015c7a:	009b      	lsls	r3, r3, #2
 8015c7c:	440b      	add	r3, r1
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d028      	beq.n	8015cd6 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015c84:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015c88:	2201      	movs	r2, #1
 8015c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8015c8e:	b21a      	sxth	r2, r3
 8015c90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c92:	b21b      	sxth	r3, r3
 8015c94:	4313      	orrs	r3, r2
 8015c96:	b21b      	sxth	r3, r3
 8015c98:	b29b      	uxth	r3, r3
 8015c9a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015c9c:	e01b      	b.n	8015cd6 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015c9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ca0:	461a      	mov	r2, r3
 8015ca2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015ca6:	fa42 f303 	asr.w	r3, r2, r3
 8015caa:	f003 0301 	and.w	r3, r3, #1
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d011      	beq.n	8015cd6 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015cb2:	4b4e      	ldr	r3, [pc, #312]	; (8015dec <RegionEU868LinkAdrReq+0x240>)
 8015cb4:	6819      	ldr	r1, [r3, #0]
 8015cb6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015cba:	4613      	mov	r3, r2
 8015cbc:	005b      	lsls	r3, r3, #1
 8015cbe:	4413      	add	r3, r2
 8015cc0:	009b      	lsls	r3, r3, #2
 8015cc2:	440b      	add	r3, r1
 8015cc4:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d105      	bne.n	8015cd6 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015cca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015cce:	f023 0301 	bic.w	r3, r3, #1
 8015cd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015cd6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015cda:	3301      	adds	r3, #1
 8015cdc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015ce0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015ce4:	2b0f      	cmp	r3, #15
 8015ce6:	d9bd      	bls.n	8015c64 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	7a1b      	ldrb	r3, [r3, #8]
 8015cec:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	f4ff af73 	bcc.w	8015bdc <RegionEU868LinkAdrReq+0x30>
 8015cf6:	e000      	b.n	8015cfa <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015cf8:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015cfa:	2302      	movs	r3, #2
 8015cfc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	7a5b      	ldrb	r3, [r3, #9]
 8015d04:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015d08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f7ff fa27 	bl	8015160 <RegionEU868GetPhyParam>
 8015d12:	4603      	mov	r3, r0
 8015d14:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015d16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015d1a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	7a9b      	ldrb	r3, [r3, #10]
 8015d20:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015d22:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015d26:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015d28:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015d2c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015d2e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015d32:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015d3a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015d42:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	7b5b      	ldrb	r3, [r3, #13]
 8015d48:	b25b      	sxtb	r3, r3
 8015d4a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015d4c:	2310      	movs	r3, #16
 8015d4e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015d50:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8015d54:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d58:	b25b      	sxtb	r3, r3
 8015d5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015d5e:	2307      	movs	r3, #7
 8015d60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015d64:	4b21      	ldr	r3, [pc, #132]	; (8015dec <RegionEU868LinkAdrReq+0x240>)
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015d6a:	2307      	movs	r3, #7
 8015d6c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015d70:	2300      	movs	r3, #0
 8015d72:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015d7c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8015d80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015d84:	1c9a      	adds	r2, r3, #2
 8015d86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015d8a:	1c59      	adds	r1, r3, #1
 8015d8c:	f107 0010 	add.w	r0, r7, #16
 8015d90:	4623      	mov	r3, r4
 8015d92:	f7fe fdb0 	bl	80148f6 <RegionCommonLinkAdrReqVerifyParams>
 8015d96:	4603      	mov	r3, r0
 8015d98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015d9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015da0:	2b07      	cmp	r3, #7
 8015da2:	d10c      	bne.n	8015dbe <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015da4:	4b11      	ldr	r3, [pc, #68]	; (8015dec <RegionEU868LinkAdrReq+0x240>)
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	33c0      	adds	r3, #192	; 0xc0
 8015daa:	2202      	movs	r2, #2
 8015dac:	2100      	movs	r1, #0
 8015dae:	4618      	mov	r0, r3
 8015db0:	f000 fb7c 	bl	80164ac <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015db4:	4b0d      	ldr	r3, [pc, #52]	; (8015dec <RegionEU868LinkAdrReq+0x240>)
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015dba:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015dbe:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8015dc2:	68bb      	ldr	r3, [r7, #8]
 8015dc4:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015dc6:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015dce:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015dd8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015ddc:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015dde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	374c      	adds	r7, #76	; 0x4c
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd90      	pop	{r4, r7, pc}
 8015dea:	bf00      	nop
 8015dec:	20000ddc 	.word	0x20000ddc

08015df0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b084      	sub	sp, #16
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015df8:	2307      	movs	r3, #7
 8015dfa:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	685b      	ldr	r3, [r3, #4]
 8015e04:	f107 020e 	add.w	r2, r7, #14
 8015e08:	4611      	mov	r1, r2
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f7ff f8e2 	bl	8014fd4 <VerifyRfFreq>
 8015e10:	4603      	mov	r3, r0
 8015e12:	f083 0301 	eor.w	r3, r3, #1
 8015e16:	b2db      	uxtb	r3, r3
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d003      	beq.n	8015e24 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015e1c:	7bfb      	ldrb	r3, [r7, #15]
 8015e1e:	f023 0301 	bic.w	r3, r3, #1
 8015e22:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f993 3000 	ldrsb.w	r3, [r3]
 8015e2a:	2207      	movs	r2, #7
 8015e2c:	2100      	movs	r1, #0
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f7fe fb4f 	bl	80144d2 <RegionCommonValueInRange>
 8015e34:	4603      	mov	r3, r0
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d103      	bne.n	8015e42 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8015e3a:	7bfb      	ldrb	r3, [r7, #15]
 8015e3c:	f023 0302 	bic.w	r3, r3, #2
 8015e40:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e48:	2205      	movs	r2, #5
 8015e4a:	2100      	movs	r1, #0
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f7fe fb40 	bl	80144d2 <RegionCommonValueInRange>
 8015e52:	4603      	mov	r3, r0
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d103      	bne.n	8015e60 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015e58:	7bfb      	ldrb	r3, [r7, #15]
 8015e5a:	f023 0304 	bic.w	r3, r3, #4
 8015e5e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3710      	adds	r7, #16
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}
	...

08015e6c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b086      	sub	sp, #24
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015e74:	2303      	movs	r3, #3
 8015e76:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d114      	bne.n	8015eac <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015e8c:	f107 0308 	add.w	r3, r7, #8
 8015e90:	4618      	mov	r0, r3
 8015e92:	f000 f9f9 	bl	8016288 <RegionEU868ChannelsRemove>
 8015e96:	4603      	mov	r3, r0
 8015e98:	f083 0301 	eor.w	r3, r3, #1
 8015e9c:	b2db      	uxtb	r3, r3
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d03b      	beq.n	8015f1a <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015ea2:	7dfb      	ldrb	r3, [r7, #23]
 8015ea4:	f023 0303 	bic.w	r3, r3, #3
 8015ea8:	75fb      	strb	r3, [r7, #23]
 8015eaa:	e036      	b.n	8015f1a <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015eb8:	b2db      	uxtb	r3, r3
 8015eba:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015ebc:	f107 030c 	add.w	r3, r7, #12
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	f000 f93f 	bl	8016144 <RegionEU868ChannelAdd>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	2b06      	cmp	r3, #6
 8015eca:	d820      	bhi.n	8015f0e <RegionEU868NewChannelReq+0xa2>
 8015ecc:	a201      	add	r2, pc, #4	; (adr r2, 8015ed4 <RegionEU868NewChannelReq+0x68>)
 8015ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ed2:	bf00      	nop
 8015ed4:	08015f19 	.word	0x08015f19
 8015ed8:	08015f0f 	.word	0x08015f0f
 8015edc:	08015f0f 	.word	0x08015f0f
 8015ee0:	08015f0f 	.word	0x08015f0f
 8015ee4:	08015ef1 	.word	0x08015ef1
 8015ee8:	08015efb 	.word	0x08015efb
 8015eec:	08015f05 	.word	0x08015f05
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015ef0:	7dfb      	ldrb	r3, [r7, #23]
 8015ef2:	f023 0301 	bic.w	r3, r3, #1
 8015ef6:	75fb      	strb	r3, [r7, #23]
                break;
 8015ef8:	e00f      	b.n	8015f1a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015efa:	7dfb      	ldrb	r3, [r7, #23]
 8015efc:	f023 0302 	bic.w	r3, r3, #2
 8015f00:	75fb      	strb	r3, [r7, #23]
                break;
 8015f02:	e00a      	b.n	8015f1a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015f04:	7dfb      	ldrb	r3, [r7, #23]
 8015f06:	f023 0303 	bic.w	r3, r3, #3
 8015f0a:	75fb      	strb	r3, [r7, #23]
                break;
 8015f0c:	e005      	b.n	8015f1a <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015f0e:	7dfb      	ldrb	r3, [r7, #23]
 8015f10:	f023 0303 	bic.w	r3, r3, #3
 8015f14:	75fb      	strb	r3, [r7, #23]
                break;
 8015f16:	e000      	b.n	8015f1a <RegionEU868NewChannelReq+0xae>
                break;
 8015f18:	bf00      	nop
            }
        }
    }

    return status;
 8015f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	3718      	adds	r7, #24
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}
 8015f26:	bf00      	nop

08015f28 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015f28:	b480      	push	{r7}
 8015f2a:	b083      	sub	sp, #12
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015f30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f34:	4618      	mov	r0, r3
 8015f36:	370c      	adds	r7, #12
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bc80      	pop	{r7}
 8015f3c:	4770      	bx	lr
	...

08015f40 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b084      	sub	sp, #16
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015f48:	2303      	movs	r3, #3
 8015f4a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	685b      	ldr	r3, [r3, #4]
 8015f54:	f107 020e 	add.w	r2, r7, #14
 8015f58:	4611      	mov	r1, r2
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f7ff f83a 	bl	8014fd4 <VerifyRfFreq>
 8015f60:	4603      	mov	r3, r0
 8015f62:	f083 0301 	eor.w	r3, r3, #1
 8015f66:	b2db      	uxtb	r3, r3
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d003      	beq.n	8015f74 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8015f6c:	7bfb      	ldrb	r3, [r7, #15]
 8015f6e:	f023 0301 	bic.w	r3, r3, #1
 8015f72:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015f74:	4b13      	ldr	r3, [pc, #76]	; (8015fc4 <RegionEU868DlChannelReq+0x84>)
 8015f76:	681a      	ldr	r2, [r3, #0]
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	781b      	ldrb	r3, [r3, #0]
 8015f7c:	4619      	mov	r1, r3
 8015f7e:	460b      	mov	r3, r1
 8015f80:	005b      	lsls	r3, r3, #1
 8015f82:	440b      	add	r3, r1
 8015f84:	009b      	lsls	r3, r3, #2
 8015f86:	4413      	add	r3, r2
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d103      	bne.n	8015f96 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8015f8e:	7bfb      	ldrb	r3, [r7, #15]
 8015f90:	f023 0302 	bic.w	r3, r3, #2
 8015f94:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015f96:	7bfb      	ldrb	r3, [r7, #15]
 8015f98:	2b03      	cmp	r3, #3
 8015f9a:	d10d      	bne.n	8015fb8 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015f9c:	4b09      	ldr	r3, [pc, #36]	; (8015fc4 <RegionEU868DlChannelReq+0x84>)
 8015f9e:	6819      	ldr	r1, [r3, #0]
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	781b      	ldrb	r3, [r3, #0]
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	685a      	ldr	r2, [r3, #4]
 8015faa:	4603      	mov	r3, r0
 8015fac:	005b      	lsls	r3, r3, #1
 8015fae:	4403      	add	r3, r0
 8015fb0:	009b      	lsls	r3, r3, #2
 8015fb2:	440b      	add	r3, r1
 8015fb4:	3304      	adds	r3, #4
 8015fb6:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8015fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	3710      	adds	r7, #16
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}
 8015fc4:	20000ddc 	.word	0x20000ddc

08015fc8 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015fc8:	b480      	push	{r7}
 8015fca:	b083      	sub	sp, #12
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	4603      	mov	r3, r0
 8015fd0:	460a      	mov	r2, r1
 8015fd2:	71fb      	strb	r3, [r7, #7]
 8015fd4:	4613      	mov	r3, r2
 8015fd6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8015fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8015fdc:	4618      	mov	r0, r3
 8015fde:	370c      	adds	r7, #12
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bc80      	pop	{r7}
 8015fe4:	4770      	bx	lr
	...

08015fe8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b09a      	sub	sp, #104	; 0x68
 8015fec:	af02      	add	r7, sp, #8
 8015fee:	60f8      	str	r0, [r7, #12]
 8015ff0:	60b9      	str	r1, [r7, #8]
 8015ff2:	607a      	str	r2, [r7, #4]
 8015ff4:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8016002:	2300      	movs	r3, #0
 8016004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016006:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801600a:	2200      	movs	r2, #0
 801600c:	601a      	str	r2, [r3, #0]
 801600e:	605a      	str	r2, [r3, #4]
 8016010:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016012:	230c      	movs	r3, #12
 8016014:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8016018:	2307      	movs	r3, #7
 801601a:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801601c:	4b47      	ldr	r3, [pc, #284]	; (801613c <RegionEU868NextChannel+0x154>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	33c0      	adds	r3, #192	; 0xc0
 8016022:	2201      	movs	r2, #1
 8016024:	2100      	movs	r1, #0
 8016026:	4618      	mov	r0, r3
 8016028:	f7fe faa4 	bl	8014574 <RegionCommonCountChannels>
 801602c:	4603      	mov	r3, r0
 801602e:	2b00      	cmp	r3, #0
 8016030:	d10a      	bne.n	8016048 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016032:	4b42      	ldr	r3, [pc, #264]	; (801613c <RegionEU868NextChannel+0x154>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 801603a:	4b40      	ldr	r3, [pc, #256]	; (801613c <RegionEU868NextChannel+0x154>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	f042 0207 	orr.w	r2, r2, #7
 8016042:	b292      	uxth	r2, r2
 8016044:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	7a5b      	ldrb	r3, [r3, #9]
 801604c:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016054:	b2db      	uxtb	r3, r3
 8016056:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016058:	4b38      	ldr	r3, [pc, #224]	; (801613c <RegionEU868NextChannel+0x154>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	33c0      	adds	r3, #192	; 0xc0
 801605e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016060:	4b36      	ldr	r3, [pc, #216]	; (801613c <RegionEU868NextChannel+0x154>)
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8016066:	4b36      	ldr	r3, [pc, #216]	; (8016140 <RegionEU868NextChannel+0x158>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801606c:	2310      	movs	r3, #16
 801606e:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8016070:	f107 0312 	add.w	r3, r7, #18
 8016074:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	685b      	ldr	r3, [r3, #4]
 8016080:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	7a9b      	ldrb	r3, [r3, #10]
 8016086:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801608a:	2306      	movs	r3, #6
 801608c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016090:	68fa      	ldr	r2, [r7, #12]
 8016092:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016096:	320c      	adds	r2, #12
 8016098:	e892 0003 	ldmia.w	r2, {r0, r1}
 801609c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	7d1b      	ldrb	r3, [r3, #20]
 80160a4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	8adb      	ldrh	r3, [r3, #22]
 80160b2:	4619      	mov	r1, r3
 80160b4:	4610      	mov	r0, r2
 80160b6:	f7ff f803 	bl	80150c0 <GetTimeOnAir>
 80160ba:	4603      	mov	r3, r0
 80160bc:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80160be:	f107 0314 	add.w	r3, r7, #20
 80160c2:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80160c4:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80160c8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80160cc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	9301      	str	r3, [sp, #4]
 80160d4:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80160d8:	9300      	str	r3, [sp, #0]
 80160da:	460b      	mov	r3, r1
 80160dc:	6839      	ldr	r1, [r7, #0]
 80160de:	f7fe fe50 	bl	8014d82 <RegionCommonIdentifyChannels>
 80160e2:	4603      	mov	r3, r0
 80160e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80160e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d10f      	bne.n	8016110 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80160f0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80160f4:	3b01      	subs	r3, #1
 80160f6:	4619      	mov	r1, r3
 80160f8:	2000      	movs	r0, #0
 80160fa:	f000 f985 	bl	8016408 <randr>
 80160fe:	4603      	mov	r3, r0
 8016100:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8016104:	4413      	add	r3, r2
 8016106:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801610a:	68bb      	ldr	r3, [r7, #8]
 801610c:	701a      	strb	r2, [r3, #0]
 801610e:	e00e      	b.n	801612e <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8016110:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016114:	2b0c      	cmp	r3, #12
 8016116:	d10a      	bne.n	801612e <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016118:	4b08      	ldr	r3, [pc, #32]	; (801613c <RegionEU868NextChannel+0x154>)
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8016120:	4b06      	ldr	r3, [pc, #24]	; (801613c <RegionEU868NextChannel+0x154>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	f042 0207 	orr.w	r2, r2, #7
 8016128:	b292      	uxth	r2, r2
 801612a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 801612e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016132:	4618      	mov	r0, r3
 8016134:	3760      	adds	r7, #96	; 0x60
 8016136:	46bd      	mov	sp, r7
 8016138:	bd80      	pop	{r7, pc}
 801613a:	bf00      	nop
 801613c:	20000ddc 	.word	0x20000ddc
 8016140:	20000dd8 	.word	0x20000dd8

08016144 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b084      	sub	sp, #16
 8016148:	af00      	add	r7, sp, #0
 801614a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801614c:	2300      	movs	r3, #0
 801614e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8016150:	2300      	movs	r3, #0
 8016152:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016154:	2300      	movs	r3, #0
 8016156:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	791b      	ldrb	r3, [r3, #4]
 801615c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801615e:	7b7b      	ldrb	r3, [r7, #13]
 8016160:	2b02      	cmp	r3, #2
 8016162:	d801      	bhi.n	8016168 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016164:	2306      	movs	r3, #6
 8016166:	e089      	b.n	801627c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016168:	7b7b      	ldrb	r3, [r7, #13]
 801616a:	2b0f      	cmp	r3, #15
 801616c:	d901      	bls.n	8016172 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801616e:	2303      	movs	r3, #3
 8016170:	e084      	b.n	801627c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	7a1b      	ldrb	r3, [r3, #8]
 8016178:	f343 0303 	sbfx	r3, r3, #0, #4
 801617c:	b25b      	sxtb	r3, r3
 801617e:	2207      	movs	r2, #7
 8016180:	2100      	movs	r1, #0
 8016182:	4618      	mov	r0, r3
 8016184:	f7fe f9a5 	bl	80144d2 <RegionCommonValueInRange>
 8016188:	4603      	mov	r3, r0
 801618a:	2b00      	cmp	r3, #0
 801618c:	d101      	bne.n	8016192 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801618e:	2301      	movs	r3, #1
 8016190:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	7a1b      	ldrb	r3, [r3, #8]
 8016198:	f343 1303 	sbfx	r3, r3, #4, #4
 801619c:	b25b      	sxtb	r3, r3
 801619e:	2207      	movs	r2, #7
 80161a0:	2100      	movs	r1, #0
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7fe f995 	bl	80144d2 <RegionCommonValueInRange>
 80161a8:	4603      	mov	r3, r0
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d101      	bne.n	80161b2 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80161ae:	2301      	movs	r3, #1
 80161b0:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	7a1b      	ldrb	r3, [r3, #8]
 80161b8:	f343 0303 	sbfx	r3, r3, #0, #4
 80161bc:	b25a      	sxtb	r2, r3
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	7a1b      	ldrb	r3, [r3, #8]
 80161c4:	f343 1303 	sbfx	r3, r3, #4, #4
 80161c8:	b25b      	sxtb	r3, r3
 80161ca:	429a      	cmp	r2, r3
 80161cc:	dd01      	ble.n	80161d2 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80161ce:	2301      	movs	r3, #1
 80161d0:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80161d2:	7bbb      	ldrb	r3, [r7, #14]
 80161d4:	f083 0301 	eor.w	r3, r3, #1
 80161d8:	b2db      	uxtb	r3, r3
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d010      	beq.n	8016200 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	f107 020c 	add.w	r2, r7, #12
 80161e8:	4611      	mov	r1, r2
 80161ea:	4618      	mov	r0, r3
 80161ec:	f7fe fef2 	bl	8014fd4 <VerifyRfFreq>
 80161f0:	4603      	mov	r3, r0
 80161f2:	f083 0301 	eor.w	r3, r3, #1
 80161f6:	b2db      	uxtb	r3, r3
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d001      	beq.n	8016200 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80161fc:	2301      	movs	r3, #1
 80161fe:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016200:	7bfb      	ldrb	r3, [r7, #15]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d004      	beq.n	8016210 <RegionEU868ChannelAdd+0xcc>
 8016206:	7bbb      	ldrb	r3, [r7, #14]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d001      	beq.n	8016210 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801620c:	2306      	movs	r3, #6
 801620e:	e035      	b.n	801627c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8016210:	7bfb      	ldrb	r3, [r7, #15]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d001      	beq.n	801621a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8016216:	2305      	movs	r3, #5
 8016218:	e030      	b.n	801627c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801621a:	7bbb      	ldrb	r3, [r7, #14]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d001      	beq.n	8016224 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016220:	2304      	movs	r3, #4
 8016222:	e02b      	b.n	801627c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016224:	4b17      	ldr	r3, [pc, #92]	; (8016284 <RegionEU868ChannelAdd+0x140>)
 8016226:	6819      	ldr	r1, [r3, #0]
 8016228:	7b7a      	ldrb	r2, [r7, #13]
 801622a:	4613      	mov	r3, r2
 801622c:	005b      	lsls	r3, r3, #1
 801622e:	4413      	add	r3, r2
 8016230:	009b      	lsls	r3, r3, #2
 8016232:	18c8      	adds	r0, r1, r3
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	220c      	movs	r2, #12
 801623a:	4619      	mov	r1, r3
 801623c:	f000 f8fb 	bl	8016436 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8016240:	4b10      	ldr	r3, [pc, #64]	; (8016284 <RegionEU868ChannelAdd+0x140>)
 8016242:	6819      	ldr	r1, [r3, #0]
 8016244:	7b7a      	ldrb	r2, [r7, #13]
 8016246:	7b38      	ldrb	r0, [r7, #12]
 8016248:	4613      	mov	r3, r2
 801624a:	005b      	lsls	r3, r3, #1
 801624c:	4413      	add	r3, r2
 801624e:	009b      	lsls	r3, r3, #2
 8016250:	440b      	add	r3, r1
 8016252:	3309      	adds	r3, #9
 8016254:	4602      	mov	r2, r0
 8016256:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016258:	4b0a      	ldr	r3, [pc, #40]	; (8016284 <RegionEU868ChannelAdd+0x140>)
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8016260:	b21a      	sxth	r2, r3
 8016262:	7b7b      	ldrb	r3, [r7, #13]
 8016264:	2101      	movs	r1, #1
 8016266:	fa01 f303 	lsl.w	r3, r1, r3
 801626a:	b21b      	sxth	r3, r3
 801626c:	4313      	orrs	r3, r2
 801626e:	b21a      	sxth	r2, r3
 8016270:	4b04      	ldr	r3, [pc, #16]	; (8016284 <RegionEU868ChannelAdd+0x140>)
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	b292      	uxth	r2, r2
 8016276:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 801627a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801627c:	4618      	mov	r0, r3
 801627e:	3710      	adds	r7, #16
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}
 8016284:	20000ddc 	.word	0x20000ddc

08016288 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b086      	sub	sp, #24
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016296:	7dfb      	ldrb	r3, [r7, #23]
 8016298:	2b02      	cmp	r3, #2
 801629a:	d801      	bhi.n	80162a0 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801629c:	2300      	movs	r3, #0
 801629e:	e015      	b.n	80162cc <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80162a0:	4b0c      	ldr	r3, [pc, #48]	; (80162d4 <RegionEU868ChannelsRemove+0x4c>)
 80162a2:	6819      	ldr	r1, [r3, #0]
 80162a4:	7dfa      	ldrb	r2, [r7, #23]
 80162a6:	4613      	mov	r3, r2
 80162a8:	005b      	lsls	r3, r3, #1
 80162aa:	4413      	add	r3, r2
 80162ac:	009b      	lsls	r3, r3, #2
 80162ae:	440b      	add	r3, r1
 80162b0:	461a      	mov	r2, r3
 80162b2:	2300      	movs	r3, #0
 80162b4:	6013      	str	r3, [r2, #0]
 80162b6:	6053      	str	r3, [r2, #4]
 80162b8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80162ba:	4b06      	ldr	r3, [pc, #24]	; (80162d4 <RegionEU868ChannelsRemove+0x4c>)
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	33c0      	adds	r3, #192	; 0xc0
 80162c0:	7df9      	ldrb	r1, [r7, #23]
 80162c2:	2210      	movs	r2, #16
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7fe f921 	bl	801450c <RegionCommonChanDisable>
 80162ca:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80162cc:	4618      	mov	r0, r3
 80162ce:	3718      	adds	r7, #24
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bd80      	pop	{r7, pc}
 80162d4:	20000ddc 	.word	0x20000ddc

080162d8 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80162d8:	b590      	push	{r4, r7, lr}
 80162da:	b085      	sub	sp, #20
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80162e6:	4b20      	ldr	r3, [pc, #128]	; (8016368 <RegionEU868SetContinuousWave+0x90>)
 80162e8:	681a      	ldr	r2, [r3, #0]
 80162ea:	4b20      	ldr	r3, [pc, #128]	; (801636c <RegionEU868SetContinuousWave+0x94>)
 80162ec:	6819      	ldr	r1, [r3, #0]
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	781b      	ldrb	r3, [r3, #0]
 80162f2:	461c      	mov	r4, r3
 80162f4:	4623      	mov	r3, r4
 80162f6:	005b      	lsls	r3, r3, #1
 80162f8:	4423      	add	r3, r4
 80162fa:	009b      	lsls	r3, r3, #2
 80162fc:	440b      	add	r3, r1
 80162fe:	3309      	adds	r3, #9
 8016300:	781b      	ldrb	r3, [r3, #0]
 8016302:	4619      	mov	r1, r3
 8016304:	460b      	mov	r3, r1
 8016306:	005b      	lsls	r3, r3, #1
 8016308:	440b      	add	r3, r1
 801630a:	00db      	lsls	r3, r3, #3
 801630c:	4413      	add	r3, r2
 801630e:	3302      	adds	r3, #2
 8016310:	f993 3000 	ldrsb.w	r3, [r3]
 8016314:	4619      	mov	r1, r3
 8016316:	f7fe fdd4 	bl	8014ec2 <RegionCommonLimitTxPower>
 801631a:	4603      	mov	r3, r0
 801631c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801631e:	2300      	movs	r3, #0
 8016320:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8016322:	4b12      	ldr	r3, [pc, #72]	; (801636c <RegionEU868SetContinuousWave+0x94>)
 8016324:	681a      	ldr	r2, [r3, #0]
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	781b      	ldrb	r3, [r3, #0]
 801632a:	4619      	mov	r1, r3
 801632c:	460b      	mov	r3, r1
 801632e:	005b      	lsls	r3, r3, #1
 8016330:	440b      	add	r3, r1
 8016332:	009b      	lsls	r3, r3, #2
 8016334:	4413      	add	r3, r2
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	6859      	ldr	r1, [r3, #4]
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	689a      	ldr	r2, [r3, #8]
 8016342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016346:	4618      	mov	r0, r3
 8016348:	f7fe fc2c 	bl	8014ba4 <RegionCommonComputeTxPower>
 801634c:	4603      	mov	r3, r0
 801634e:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8016350:	4b07      	ldr	r3, [pc, #28]	; (8016370 <RegionEU868SetContinuousWave+0x98>)
 8016352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016354:	687a      	ldr	r2, [r7, #4]
 8016356:	8992      	ldrh	r2, [r2, #12]
 8016358:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801635c:	68b8      	ldr	r0, [r7, #8]
 801635e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8016360:	bf00      	nop
 8016362:	3714      	adds	r7, #20
 8016364:	46bd      	mov	sp, r7
 8016366:	bd90      	pop	{r4, r7, pc}
 8016368:	20000dd8 	.word	0x20000dd8
 801636c:	20000ddc 	.word	0x20000ddc
 8016370:	0801ba28 	.word	0x0801ba28

08016374 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016374:	b480      	push	{r7}
 8016376:	b085      	sub	sp, #20
 8016378:	af00      	add	r7, sp, #0
 801637a:	4603      	mov	r3, r0
 801637c:	71fb      	strb	r3, [r7, #7]
 801637e:	460b      	mov	r3, r1
 8016380:	71bb      	strb	r3, [r7, #6]
 8016382:	4613      	mov	r3, r2
 8016384:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8016386:	79ba      	ldrb	r2, [r7, #6]
 8016388:	797b      	ldrb	r3, [r7, #5]
 801638a:	1ad3      	subs	r3, r2, r3
 801638c:	b2db      	uxtb	r3, r3
 801638e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8016390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016394:	2b00      	cmp	r3, #0
 8016396:	da01      	bge.n	801639c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8016398:	2300      	movs	r3, #0
 801639a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801639c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801639e:	4618      	mov	r0, r3
 80163a0:	3714      	adds	r7, #20
 80163a2:	46bd      	mov	sp, r7
 80163a4:	bc80      	pop	{r7}
 80163a6:	4770      	bx	lr

080163a8 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80163a8:	b480      	push	{r7}
 80163aa:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80163ac:	4b0d      	ldr	r3, [pc, #52]	; (80163e4 <rand1+0x3c>)
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	4a0d      	ldr	r2, [pc, #52]	; (80163e8 <rand1+0x40>)
 80163b2:	fb02 f303 	mul.w	r3, r2, r3
 80163b6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80163ba:	3339      	adds	r3, #57	; 0x39
 80163bc:	4a09      	ldr	r2, [pc, #36]	; (80163e4 <rand1+0x3c>)
 80163be:	6013      	str	r3, [r2, #0]
 80163c0:	4b08      	ldr	r3, [pc, #32]	; (80163e4 <rand1+0x3c>)
 80163c2:	681a      	ldr	r2, [r3, #0]
 80163c4:	2303      	movs	r3, #3
 80163c6:	fba3 1302 	umull	r1, r3, r3, r2
 80163ca:	1ad1      	subs	r1, r2, r3
 80163cc:	0849      	lsrs	r1, r1, #1
 80163ce:	440b      	add	r3, r1
 80163d0:	0f99      	lsrs	r1, r3, #30
 80163d2:	460b      	mov	r3, r1
 80163d4:	07db      	lsls	r3, r3, #31
 80163d6:	1a5b      	subs	r3, r3, r1
 80163d8:	1ad1      	subs	r1, r2, r3
 80163da:	460b      	mov	r3, r1
}
 80163dc:	4618      	mov	r0, r3
 80163de:	46bd      	mov	sp, r7
 80163e0:	bc80      	pop	{r7}
 80163e2:	4770      	bx	lr
 80163e4:	2000011c 	.word	0x2000011c
 80163e8:	41c64e6d 	.word	0x41c64e6d

080163ec <srand1>:

void srand1( uint32_t seed )
{
 80163ec:	b480      	push	{r7}
 80163ee:	b083      	sub	sp, #12
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
    next = seed;
 80163f4:	4a03      	ldr	r2, [pc, #12]	; (8016404 <srand1+0x18>)
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	6013      	str	r3, [r2, #0]
}
 80163fa:	bf00      	nop
 80163fc:	370c      	adds	r7, #12
 80163fe:	46bd      	mov	sp, r7
 8016400:	bc80      	pop	{r7}
 8016402:	4770      	bx	lr
 8016404:	2000011c 	.word	0x2000011c

08016408 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b082      	sub	sp, #8
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
 8016410:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8016412:	f7ff ffc9 	bl	80163a8 <rand1>
 8016416:	4602      	mov	r2, r0
 8016418:	6839      	ldr	r1, [r7, #0]
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	1acb      	subs	r3, r1, r3
 801641e:	3301      	adds	r3, #1
 8016420:	fb92 f1f3 	sdiv	r1, r2, r3
 8016424:	fb03 f301 	mul.w	r3, r3, r1
 8016428:	1ad2      	subs	r2, r2, r3
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	4413      	add	r3, r2
}
 801642e:	4618      	mov	r0, r3
 8016430:	3708      	adds	r7, #8
 8016432:	46bd      	mov	sp, r7
 8016434:	bd80      	pop	{r7, pc}

08016436 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016436:	b480      	push	{r7}
 8016438:	b085      	sub	sp, #20
 801643a:	af00      	add	r7, sp, #0
 801643c:	60f8      	str	r0, [r7, #12]
 801643e:	60b9      	str	r1, [r7, #8]
 8016440:	4613      	mov	r3, r2
 8016442:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016444:	e007      	b.n	8016456 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016446:	68ba      	ldr	r2, [r7, #8]
 8016448:	1c53      	adds	r3, r2, #1
 801644a:	60bb      	str	r3, [r7, #8]
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	1c59      	adds	r1, r3, #1
 8016450:	60f9      	str	r1, [r7, #12]
 8016452:	7812      	ldrb	r2, [r2, #0]
 8016454:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016456:	88fb      	ldrh	r3, [r7, #6]
 8016458:	1e5a      	subs	r2, r3, #1
 801645a:	80fa      	strh	r2, [r7, #6]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d1f2      	bne.n	8016446 <memcpy1+0x10>
    }
}
 8016460:	bf00      	nop
 8016462:	bf00      	nop
 8016464:	3714      	adds	r7, #20
 8016466:	46bd      	mov	sp, r7
 8016468:	bc80      	pop	{r7}
 801646a:	4770      	bx	lr

0801646c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801646c:	b480      	push	{r7}
 801646e:	b085      	sub	sp, #20
 8016470:	af00      	add	r7, sp, #0
 8016472:	60f8      	str	r0, [r7, #12]
 8016474:	60b9      	str	r1, [r7, #8]
 8016476:	4613      	mov	r3, r2
 8016478:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801647a:	88fb      	ldrh	r3, [r7, #6]
 801647c:	3b01      	subs	r3, #1
 801647e:	68fa      	ldr	r2, [r7, #12]
 8016480:	4413      	add	r3, r2
 8016482:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016484:	e007      	b.n	8016496 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016486:	68ba      	ldr	r2, [r7, #8]
 8016488:	1c53      	adds	r3, r2, #1
 801648a:	60bb      	str	r3, [r7, #8]
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	1e59      	subs	r1, r3, #1
 8016490:	60f9      	str	r1, [r7, #12]
 8016492:	7812      	ldrb	r2, [r2, #0]
 8016494:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016496:	88fb      	ldrh	r3, [r7, #6]
 8016498:	1e5a      	subs	r2, r3, #1
 801649a:	80fa      	strh	r2, [r7, #6]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d1f2      	bne.n	8016486 <memcpyr+0x1a>
    }
}
 80164a0:	bf00      	nop
 80164a2:	bf00      	nop
 80164a4:	3714      	adds	r7, #20
 80164a6:	46bd      	mov	sp, r7
 80164a8:	bc80      	pop	{r7}
 80164aa:	4770      	bx	lr

080164ac <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80164ac:	b480      	push	{r7}
 80164ae:	b083      	sub	sp, #12
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
 80164b4:	460b      	mov	r3, r1
 80164b6:	70fb      	strb	r3, [r7, #3]
 80164b8:	4613      	mov	r3, r2
 80164ba:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80164bc:	e004      	b.n	80164c8 <memset1+0x1c>
    {
        *dst++ = value;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	1c5a      	adds	r2, r3, #1
 80164c2:	607a      	str	r2, [r7, #4]
 80164c4:	78fa      	ldrb	r2, [r7, #3]
 80164c6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80164c8:	883b      	ldrh	r3, [r7, #0]
 80164ca:	1e5a      	subs	r2, r3, #1
 80164cc:	803a      	strh	r2, [r7, #0]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d1f5      	bne.n	80164be <memset1+0x12>
    }
}
 80164d2:	bf00      	nop
 80164d4:	bf00      	nop
 80164d6:	370c      	adds	r7, #12
 80164d8:	46bd      	mov	sp, r7
 80164da:	bc80      	pop	{r7}
 80164dc:	4770      	bx	lr
	...

080164e0 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80164e0:	b480      	push	{r7}
 80164e2:	b087      	sub	sp, #28
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
 80164e8:	460b      	mov	r3, r1
 80164ea:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 80164ec:	4b1a      	ldr	r3, [pc, #104]	; (8016558 <Crc32+0x78>)
 80164ee:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80164f0:	f04f 33ff 	mov.w	r3, #4294967295
 80164f4:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d101      	bne.n	8016500 <Crc32+0x20>
    {
        return 0;
 80164fc:	2300      	movs	r3, #0
 80164fe:	e026      	b.n	801654e <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016500:	2300      	movs	r3, #0
 8016502:	827b      	strh	r3, [r7, #18]
 8016504:	e01d      	b.n	8016542 <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 8016506:	8a7b      	ldrh	r3, [r7, #18]
 8016508:	687a      	ldr	r2, [r7, #4]
 801650a:	4413      	add	r3, r2
 801650c:	781b      	ldrb	r3, [r3, #0]
 801650e:	461a      	mov	r2, r3
 8016510:	697b      	ldr	r3, [r7, #20]
 8016512:	4053      	eors	r3, r2
 8016514:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8016516:	2300      	movs	r3, #0
 8016518:	823b      	strh	r3, [r7, #16]
 801651a:	e00c      	b.n	8016536 <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801651c:	697b      	ldr	r3, [r7, #20]
 801651e:	085a      	lsrs	r2, r3, #1
 8016520:	697b      	ldr	r3, [r7, #20]
 8016522:	f003 0301 	and.w	r3, r3, #1
 8016526:	4259      	negs	r1, r3
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	400b      	ands	r3, r1
 801652c:	4053      	eors	r3, r2
 801652e:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8016530:	8a3b      	ldrh	r3, [r7, #16]
 8016532:	3301      	adds	r3, #1
 8016534:	823b      	strh	r3, [r7, #16]
 8016536:	8a3b      	ldrh	r3, [r7, #16]
 8016538:	2b07      	cmp	r3, #7
 801653a:	d9ef      	bls.n	801651c <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 801653c:	8a7b      	ldrh	r3, [r7, #18]
 801653e:	3301      	adds	r3, #1
 8016540:	827b      	strh	r3, [r7, #18]
 8016542:	8a7a      	ldrh	r2, [r7, #18]
 8016544:	887b      	ldrh	r3, [r7, #2]
 8016546:	429a      	cmp	r2, r3
 8016548:	d3dd      	bcc.n	8016506 <Crc32+0x26>
        }
    }

    return ~crc;
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	43db      	mvns	r3, r3
}
 801654e:	4618      	mov	r0, r3
 8016550:	371c      	adds	r7, #28
 8016552:	46bd      	mov	sp, r7
 8016554:	bc80      	pop	{r7}
 8016556:	4770      	bx	lr
 8016558:	edb88320 	.word	0xedb88320

0801655c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 801655c:	b480      	push	{r7}
 801655e:	b083      	sub	sp, #12
 8016560:	af00      	add	r7, sp, #0
 8016562:	6078      	str	r0, [r7, #4]
 8016564:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	683a      	ldr	r2, [r7, #0]
 801656a:	619a      	str	r2, [r3, #24]
}
 801656c:	bf00      	nop
 801656e:	370c      	adds	r7, #12
 8016570:	46bd      	mov	sp, r7
 8016572:	bc80      	pop	{r7}
 8016574:	4770      	bx	lr

08016576 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016576:	b480      	push	{r7}
 8016578:	b083      	sub	sp, #12
 801657a:	af00      	add	r7, sp, #0
 801657c:	6078      	str	r0, [r7, #4]
 801657e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	683a      	ldr	r2, [r7, #0]
 8016584:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016586:	bf00      	nop
 8016588:	370c      	adds	r7, #12
 801658a:	46bd      	mov	sp, r7
 801658c:	bc80      	pop	{r7}
 801658e:	4770      	bx	lr

08016590 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b084      	sub	sp, #16
 8016594:	af02      	add	r7, sp, #8
 8016596:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016598:	4a21      	ldr	r2, [pc, #132]	; (8016620 <RadioInit+0x90>)
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801659e:	4b21      	ldr	r3, [pc, #132]	; (8016624 <RadioInit+0x94>)
 80165a0:	2200      	movs	r2, #0
 80165a2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80165a4:	4b1f      	ldr	r3, [pc, #124]	; (8016624 <RadioInit+0x94>)
 80165a6:	2200      	movs	r2, #0
 80165a8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80165aa:	4b1e      	ldr	r3, [pc, #120]	; (8016624 <RadioInit+0x94>)
 80165ac:	2200      	movs	r2, #0
 80165ae:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 80165b0:	481d      	ldr	r0, [pc, #116]	; (8016628 <RadioInit+0x98>)
 80165b2:	f001 fee3 	bl	801837c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 80165b6:	2000      	movs	r0, #0
 80165b8:	f001 f82a 	bl	8017610 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 80165bc:	f002 f974 	bl	80188a8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80165c0:	2100      	movs	r1, #0
 80165c2:	2000      	movs	r0, #0
 80165c4:	f002 fcca 	bl	8018f5c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 80165c8:	2204      	movs	r2, #4
 80165ca:	2100      	movs	r1, #0
 80165cc:	2001      	movs	r0, #1
 80165ce:	f002 faf5 	bl	8018bbc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80165d2:	2300      	movs	r3, #0
 80165d4:	2200      	movs	r2, #0
 80165d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80165da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80165de:	f002 fa29 	bl	8018a34 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80165e2:	f000 fea1 	bl	8017328 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80165e6:	2300      	movs	r3, #0
 80165e8:	9300      	str	r3, [sp, #0]
 80165ea:	4b10      	ldr	r3, [pc, #64]	; (801662c <RadioInit+0x9c>)
 80165ec:	2200      	movs	r2, #0
 80165ee:	f04f 31ff 	mov.w	r1, #4294967295
 80165f2:	480f      	ldr	r0, [pc, #60]	; (8016630 <RadioInit+0xa0>)
 80165f4:	f003 fd8c 	bl	801a110 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80165f8:	2300      	movs	r3, #0
 80165fa:	9300      	str	r3, [sp, #0]
 80165fc:	4b0d      	ldr	r3, [pc, #52]	; (8016634 <RadioInit+0xa4>)
 80165fe:	2200      	movs	r2, #0
 8016600:	f04f 31ff 	mov.w	r1, #4294967295
 8016604:	480c      	ldr	r0, [pc, #48]	; (8016638 <RadioInit+0xa8>)
 8016606:	f003 fd83 	bl	801a110 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801660a:	4809      	ldr	r0, [pc, #36]	; (8016630 <RadioInit+0xa0>)
 801660c:	f003 fe24 	bl	801a258 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016610:	4809      	ldr	r0, [pc, #36]	; (8016638 <RadioInit+0xa8>)
 8016612:	f003 fe21 	bl	801a258 <UTIL_TIMER_Stop>
}
 8016616:	bf00      	nop
 8016618:	3708      	adds	r7, #8
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}
 801661e:	bf00      	nop
 8016620:	20000ee0 	.word	0x20000ee0
 8016624:	200017c0 	.word	0x200017c0
 8016628:	08017709 	.word	0x08017709
 801662c:	0801767d 	.word	0x0801767d
 8016630:	20001818 	.word	0x20001818
 8016634:	08017691 	.word	0x08017691
 8016638:	20001830 	.word	0x20001830

0801663c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801663c:	b580      	push	{r7, lr}
 801663e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016640:	f001 fede 	bl	8018400 <SUBGRF_GetOperatingMode>
 8016644:	4603      	mov	r3, r0
 8016646:	2b07      	cmp	r3, #7
 8016648:	d00a      	beq.n	8016660 <RadioGetStatus+0x24>
 801664a:	2b07      	cmp	r3, #7
 801664c:	dc0a      	bgt.n	8016664 <RadioGetStatus+0x28>
 801664e:	2b04      	cmp	r3, #4
 8016650:	d002      	beq.n	8016658 <RadioGetStatus+0x1c>
 8016652:	2b05      	cmp	r3, #5
 8016654:	d002      	beq.n	801665c <RadioGetStatus+0x20>
 8016656:	e005      	b.n	8016664 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016658:	2302      	movs	r3, #2
 801665a:	e004      	b.n	8016666 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801665c:	2301      	movs	r3, #1
 801665e:	e002      	b.n	8016666 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016660:	2303      	movs	r3, #3
 8016662:	e000      	b.n	8016666 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016664:	2300      	movs	r3, #0
    }
}
 8016666:	4618      	mov	r0, r3
 8016668:	bd80      	pop	{r7, pc}
	...

0801666c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b082      	sub	sp, #8
 8016670:	af00      	add	r7, sp, #0
 8016672:	4603      	mov	r3, r0
 8016674:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8016676:	4a25      	ldr	r2, [pc, #148]	; (801670c <RadioSetModem+0xa0>)
 8016678:	79fb      	ldrb	r3, [r7, #7]
 801667a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 801667c:	79fb      	ldrb	r3, [r7, #7]
 801667e:	4618      	mov	r0, r3
 8016680:	f003 f831 	bl	80196e6 <RFW_SetRadioModem>
    switch( modem )
 8016684:	79fb      	ldrb	r3, [r7, #7]
 8016686:	3b01      	subs	r3, #1
 8016688:	2b03      	cmp	r3, #3
 801668a:	d80b      	bhi.n	80166a4 <RadioSetModem+0x38>
 801668c:	a201      	add	r2, pc, #4	; (adr r2, 8016694 <RadioSetModem+0x28>)
 801668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016692:	bf00      	nop
 8016694:	080166b3 	.word	0x080166b3
 8016698:	080166d9 	.word	0x080166d9
 801669c:	080166e7 	.word	0x080166e7
 80166a0:	080166f5 	.word	0x080166f5
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80166a4:	2000      	movs	r0, #0
 80166a6:	f002 fa63 	bl	8018b70 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80166aa:	4b18      	ldr	r3, [pc, #96]	; (801670c <RadioSetModem+0xa0>)
 80166ac:	2200      	movs	r2, #0
 80166ae:	735a      	strb	r2, [r3, #13]
        break;
 80166b0:	e028      	b.n	8016704 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80166b2:	2001      	movs	r0, #1
 80166b4:	f002 fa5c 	bl	8018b70 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80166b8:	4b14      	ldr	r3, [pc, #80]	; (801670c <RadioSetModem+0xa0>)
 80166ba:	7b5a      	ldrb	r2, [r3, #13]
 80166bc:	4b13      	ldr	r3, [pc, #76]	; (801670c <RadioSetModem+0xa0>)
 80166be:	7b1b      	ldrb	r3, [r3, #12]
 80166c0:	429a      	cmp	r2, r3
 80166c2:	d01e      	beq.n	8016702 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80166c4:	4b11      	ldr	r3, [pc, #68]	; (801670c <RadioSetModem+0xa0>)
 80166c6:	7b1a      	ldrb	r2, [r3, #12]
 80166c8:	4b10      	ldr	r3, [pc, #64]	; (801670c <RadioSetModem+0xa0>)
 80166ca:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80166cc:	4b0f      	ldr	r3, [pc, #60]	; (801670c <RadioSetModem+0xa0>)
 80166ce:	7b5b      	ldrb	r3, [r3, #13]
 80166d0:	4618      	mov	r0, r3
 80166d2:	f000 ff9d 	bl	8017610 <RadioSetPublicNetwork>
        }
        break;
 80166d6:	e014      	b.n	8016702 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80166d8:	2002      	movs	r0, #2
 80166da:	f002 fa49 	bl	8018b70 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80166de:	4b0b      	ldr	r3, [pc, #44]	; (801670c <RadioSetModem+0xa0>)
 80166e0:	2200      	movs	r2, #0
 80166e2:	735a      	strb	r2, [r3, #13]
        break;
 80166e4:	e00e      	b.n	8016704 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80166e6:	2002      	movs	r0, #2
 80166e8:	f002 fa42 	bl	8018b70 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80166ec:	4b07      	ldr	r3, [pc, #28]	; (801670c <RadioSetModem+0xa0>)
 80166ee:	2200      	movs	r2, #0
 80166f0:	735a      	strb	r2, [r3, #13]
        break;
 80166f2:	e007      	b.n	8016704 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80166f4:	2000      	movs	r0, #0
 80166f6:	f002 fa3b 	bl	8018b70 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80166fa:	4b04      	ldr	r3, [pc, #16]	; (801670c <RadioSetModem+0xa0>)
 80166fc:	2200      	movs	r2, #0
 80166fe:	735a      	strb	r2, [r3, #13]
        break;
 8016700:	e000      	b.n	8016704 <RadioSetModem+0x98>
        break;
 8016702:	bf00      	nop
    }
}
 8016704:	bf00      	nop
 8016706:	3708      	adds	r7, #8
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}
 801670c:	200017c0 	.word	0x200017c0

08016710 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b082      	sub	sp, #8
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	f002 f9e7 	bl	8018aec <SUBGRF_SetRfFrequency>
}
 801671e:	bf00      	nop
 8016720:	3708      	adds	r7, #8
 8016722:	46bd      	mov	sp, r7
 8016724:	bd80      	pop	{r7, pc}

08016726 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016726:	b580      	push	{r7, lr}
 8016728:	b090      	sub	sp, #64	; 0x40
 801672a:	af0a      	add	r7, sp, #40	; 0x28
 801672c:	60f8      	str	r0, [r7, #12]
 801672e:	60b9      	str	r1, [r7, #8]
 8016730:	603b      	str	r3, [r7, #0]
 8016732:	4613      	mov	r3, r2
 8016734:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016736:	2301      	movs	r3, #1
 8016738:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801673a:	2300      	movs	r3, #0
 801673c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801673e:	2300      	movs	r3, #0
 8016740:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8016742:	f000 fe04 	bl	801734e <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8016746:	2000      	movs	r0, #0
 8016748:	f7ff ff90 	bl	801666c <RadioSetModem>

    RadioSetChannel( freq );
 801674c:	68f8      	ldr	r0, [r7, #12]
 801674e:	f7ff ffdf 	bl	8016710 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016752:	2301      	movs	r3, #1
 8016754:	9309      	str	r3, [sp, #36]	; 0x24
 8016756:	2300      	movs	r3, #0
 8016758:	9308      	str	r3, [sp, #32]
 801675a:	2300      	movs	r3, #0
 801675c:	9307      	str	r3, [sp, #28]
 801675e:	2300      	movs	r3, #0
 8016760:	9306      	str	r3, [sp, #24]
 8016762:	2300      	movs	r3, #0
 8016764:	9305      	str	r3, [sp, #20]
 8016766:	2300      	movs	r3, #0
 8016768:	9304      	str	r3, [sp, #16]
 801676a:	2300      	movs	r3, #0
 801676c:	9303      	str	r3, [sp, #12]
 801676e:	2300      	movs	r3, #0
 8016770:	9302      	str	r3, [sp, #8]
 8016772:	2303      	movs	r3, #3
 8016774:	9301      	str	r3, [sp, #4]
 8016776:	68bb      	ldr	r3, [r7, #8]
 8016778:	9300      	str	r3, [sp, #0]
 801677a:	2300      	movs	r3, #0
 801677c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8016780:	68b9      	ldr	r1, [r7, #8]
 8016782:	2000      	movs	r0, #0
 8016784:	f000 f840 	bl	8016808 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016788:	2000      	movs	r0, #0
 801678a:	f000 fde7 	bl	801735c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801678e:	f000 ff6d 	bl	801766c <RadioGetWakeupTime>
 8016792:	4603      	mov	r3, r0
 8016794:	4618      	mov	r0, r3
 8016796:	f7eb fc08 	bl	8001faa <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801679a:	f003 fe77 	bl	801a48c <UTIL_TIMER_GetCurrentTime>
 801679e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80167a0:	e00d      	b.n	80167be <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80167a2:	2000      	movs	r0, #0
 80167a4:	f000 feb2 	bl	801750c <RadioRssi>
 80167a8:	4603      	mov	r3, r0
 80167aa:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80167ac:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80167b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	dd02      	ble.n	80167be <RadioIsChannelFree+0x98>
        {
            status = false;
 80167b8:	2300      	movs	r3, #0
 80167ba:	75fb      	strb	r3, [r7, #23]
            break;
 80167bc:	e006      	b.n	80167cc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80167be:	6938      	ldr	r0, [r7, #16]
 80167c0:	f003 fe76 	bl	801a4b0 <UTIL_TIMER_GetElapsedTime>
 80167c4:	4602      	mov	r2, r0
 80167c6:	683b      	ldr	r3, [r7, #0]
 80167c8:	4293      	cmp	r3, r2
 80167ca:	d8ea      	bhi.n	80167a2 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80167cc:	f000 fdbf 	bl	801734e <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 80167d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80167d2:	4618      	mov	r0, r3
 80167d4:	3718      	adds	r7, #24
 80167d6:	46bd      	mov	sp, r7
 80167d8:	bd80      	pop	{r7, pc}

080167da <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80167da:	b580      	push	{r7, lr}
 80167dc:	b082      	sub	sp, #8
 80167de:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80167e0:	2300      	movs	r3, #0
 80167e2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80167e4:	2001      	movs	r0, #1
 80167e6:	f7ff ff41 	bl	801666c <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80167ea:	2300      	movs	r3, #0
 80167ec:	2200      	movs	r2, #0
 80167ee:	2100      	movs	r1, #0
 80167f0:	2000      	movs	r0, #0
 80167f2:	f002 f91f 	bl	8018a34 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80167f6:	f001 fed4 	bl	80185a2 <SUBGRF_GetRandom>
 80167fa:	6078      	str	r0, [r7, #4]

    return rnd;
 80167fc:	687b      	ldr	r3, [r7, #4]
}
 80167fe:	4618      	mov	r0, r3
 8016800:	3708      	adds	r7, #8
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}
	...

08016808 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b08a      	sub	sp, #40	; 0x28
 801680c:	af00      	add	r7, sp, #0
 801680e:	60b9      	str	r1, [r7, #8]
 8016810:	607a      	str	r2, [r7, #4]
 8016812:	461a      	mov	r2, r3
 8016814:	4603      	mov	r3, r0
 8016816:	73fb      	strb	r3, [r7, #15]
 8016818:	4613      	mov	r3, r2
 801681a:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 801681c:	4abd      	ldr	r2, [pc, #756]	; (8016b14 <RadioSetRxConfig+0x30c>)
 801681e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016822:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016824:	f002 ff1d 	bl	8019662 <RFW_DeInit>
    if( rxContinuous == true )
 8016828:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801682c:	2b00      	cmp	r3, #0
 801682e:	d001      	beq.n	8016834 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016830:	2300      	movs	r3, #0
 8016832:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8016834:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016838:	2b00      	cmp	r3, #0
 801683a:	d004      	beq.n	8016846 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801683c:	4ab6      	ldr	r2, [pc, #728]	; (8016b18 <RadioSetRxConfig+0x310>)
 801683e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016842:	7013      	strb	r3, [r2, #0]
 8016844:	e002      	b.n	801684c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016846:	4bb4      	ldr	r3, [pc, #720]	; (8016b18 <RadioSetRxConfig+0x310>)
 8016848:	22ff      	movs	r2, #255	; 0xff
 801684a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801684c:	7bfb      	ldrb	r3, [r7, #15]
 801684e:	2b04      	cmp	r3, #4
 8016850:	d009      	beq.n	8016866 <RadioSetRxConfig+0x5e>
 8016852:	2b04      	cmp	r3, #4
 8016854:	f300 81da 	bgt.w	8016c0c <RadioSetRxConfig+0x404>
 8016858:	2b00      	cmp	r3, #0
 801685a:	f000 80bf 	beq.w	80169dc <RadioSetRxConfig+0x1d4>
 801685e:	2b01      	cmp	r3, #1
 8016860:	f000 812c 	beq.w	8016abc <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016864:	e1d2      	b.n	8016c0c <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016866:	2001      	movs	r0, #1
 8016868:	f001 ffe0 	bl	801882c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801686c:	4ba9      	ldr	r3, [pc, #676]	; (8016b14 <RadioSetRxConfig+0x30c>)
 801686e:	2200      	movs	r2, #0
 8016870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016874:	4aa7      	ldr	r2, [pc, #668]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801687a:	4ba6      	ldr	r3, [pc, #664]	; (8016b14 <RadioSetRxConfig+0x30c>)
 801687c:	2209      	movs	r2, #9
 801687e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016882:	4ba4      	ldr	r3, [pc, #656]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016884:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016888:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801688a:	68b8      	ldr	r0, [r7, #8]
 801688c:	f002 fe1a 	bl	80194c4 <SUBGRF_GetFskBandwidthRegValue>
 8016890:	4603      	mov	r3, r0
 8016892:	461a      	mov	r2, r3
 8016894:	4b9f      	ldr	r3, [pc, #636]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801689a:	4b9e      	ldr	r3, [pc, #632]	; (8016b14 <RadioSetRxConfig+0x30c>)
 801689c:	2200      	movs	r2, #0
 801689e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80168a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80168a2:	00db      	lsls	r3, r3, #3
 80168a4:	b29a      	uxth	r2, r3
 80168a6:	4b9b      	ldr	r3, [pc, #620]	; (8016b14 <RadioSetRxConfig+0x30c>)
 80168a8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80168aa:	4b9a      	ldr	r3, [pc, #616]	; (8016b14 <RadioSetRxConfig+0x30c>)
 80168ac:	2200      	movs	r2, #0
 80168ae:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80168b0:	4b98      	ldr	r3, [pc, #608]	; (8016b14 <RadioSetRxConfig+0x30c>)
 80168b2:	2210      	movs	r2, #16
 80168b4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80168b6:	4b97      	ldr	r3, [pc, #604]	; (8016b14 <RadioSetRxConfig+0x30c>)
 80168b8:	2200      	movs	r2, #0
 80168ba:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80168bc:	4b95      	ldr	r3, [pc, #596]	; (8016b14 <RadioSetRxConfig+0x30c>)
 80168be:	2200      	movs	r2, #0
 80168c0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80168c2:	4b95      	ldr	r3, [pc, #596]	; (8016b18 <RadioSetRxConfig+0x310>)
 80168c4:	781a      	ldrb	r2, [r3, #0]
 80168c6:	4b93      	ldr	r3, [pc, #588]	; (8016b14 <RadioSetRxConfig+0x30c>)
 80168c8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80168ca:	4b92      	ldr	r3, [pc, #584]	; (8016b14 <RadioSetRxConfig+0x30c>)
 80168cc:	2201      	movs	r2, #1
 80168ce:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80168d0:	4b90      	ldr	r3, [pc, #576]	; (8016b14 <RadioSetRxConfig+0x30c>)
 80168d2:	2200      	movs	r2, #0
 80168d4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80168d6:	2004      	movs	r0, #4
 80168d8:	f7ff fec8 	bl	801666c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80168dc:	488f      	ldr	r0, [pc, #572]	; (8016b1c <RadioSetRxConfig+0x314>)
 80168de:	f002 f9d3 	bl	8018c88 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80168e2:	488f      	ldr	r0, [pc, #572]	; (8016b20 <RadioSetRxConfig+0x318>)
 80168e4:	f002 fa9c 	bl	8018e20 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80168e8:	4a8e      	ldr	r2, [pc, #568]	; (8016b24 <RadioSetRxConfig+0x31c>)
 80168ea:	f107 031c 	add.w	r3, r7, #28
 80168ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80168f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80168f6:	f107 031c 	add.w	r3, r7, #28
 80168fa:	4618      	mov	r0, r3
 80168fc:	f001 fdcf 	bl	801849e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016900:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016904:	f001 fe1a 	bl	801853c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8016908:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801690c:	f000 fe1d 	bl	801754a <RadioRead>
 8016910:	4603      	mov	r3, r0
 8016912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801691a:	f023 0310 	bic.w	r3, r3, #16
 801691e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8016922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016926:	4619      	mov	r1, r3
 8016928:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801692c:	f000 fdfb 	bl	8017526 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8016930:	2104      	movs	r1, #4
 8016932:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8016936:	f000 fdf6 	bl	8017526 <RadioWrite>
            modReg= RadioRead(0x89b);
 801693a:	f640 009b 	movw	r0, #2203	; 0x89b
 801693e:	f000 fe04 	bl	801754a <RadioRead>
 8016942:	4603      	mov	r3, r0
 8016944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801694c:	f023 031c 	bic.w	r3, r3, #28
 8016950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8016954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016958:	f043 0308 	orr.w	r3, r3, #8
 801695c:	b2db      	uxtb	r3, r3
 801695e:	4619      	mov	r1, r3
 8016960:	f640 009b 	movw	r0, #2203	; 0x89b
 8016964:	f000 fddf 	bl	8017526 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8016968:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801696c:	f000 fded 	bl	801754a <RadioRead>
 8016970:	4603      	mov	r3, r0
 8016972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801697a:	f023 0318 	bic.w	r3, r3, #24
 801697e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8016982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016986:	f043 0318 	orr.w	r3, r3, #24
 801698a:	b2db      	uxtb	r3, r3
 801698c:	4619      	mov	r1, r3
 801698e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016992:	f000 fdc8 	bl	8017526 <RadioWrite>
            modReg= RadioRead(0x6ac);
 8016996:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801699a:	f000 fdd6 	bl	801754a <RadioRead>
 801699e:	4603      	mov	r3, r0
 80169a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80169a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80169ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80169b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169b4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80169b8:	b2db      	uxtb	r3, r3
 80169ba:	4619      	mov	r1, r3
 80169bc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80169c0:	f000 fdb1 	bl	8017526 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80169c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80169c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80169ca:	fb02 f303 	mul.w	r3, r2, r3
 80169ce:	461a      	mov	r2, r3
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80169d6:	4a4f      	ldr	r2, [pc, #316]	; (8016b14 <RadioSetRxConfig+0x30c>)
 80169d8:	6093      	str	r3, [r2, #8]
            break;
 80169da:	e118      	b.n	8016c0e <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80169dc:	2000      	movs	r0, #0
 80169de:	f001 ff25 	bl	801882c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80169e2:	4b4c      	ldr	r3, [pc, #304]	; (8016b14 <RadioSetRxConfig+0x30c>)
 80169e4:	2200      	movs	r2, #0
 80169e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80169ea:	4a4a      	ldr	r2, [pc, #296]	; (8016b14 <RadioSetRxConfig+0x30c>)
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80169f0:	4b48      	ldr	r3, [pc, #288]	; (8016b14 <RadioSetRxConfig+0x30c>)
 80169f2:	220b      	movs	r2, #11
 80169f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80169f8:	68b8      	ldr	r0, [r7, #8]
 80169fa:	f002 fd63 	bl	80194c4 <SUBGRF_GetFskBandwidthRegValue>
 80169fe:	4603      	mov	r3, r0
 8016a00:	461a      	mov	r2, r3
 8016a02:	4b44      	ldr	r3, [pc, #272]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016a08:	4b42      	ldr	r3, [pc, #264]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016a0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016a10:	00db      	lsls	r3, r3, #3
 8016a12:	b29a      	uxth	r2, r3
 8016a14:	4b3f      	ldr	r3, [pc, #252]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016a16:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016a18:	4b3e      	ldr	r3, [pc, #248]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016a1a:	2204      	movs	r2, #4
 8016a1c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016a1e:	4b3d      	ldr	r3, [pc, #244]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016a20:	2218      	movs	r2, #24
 8016a22:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016a24:	4b3b      	ldr	r3, [pc, #236]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016a26:	2200      	movs	r2, #0
 8016a28:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016a2a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016a2e:	f083 0301 	eor.w	r3, r3, #1
 8016a32:	b2db      	uxtb	r3, r3
 8016a34:	461a      	mov	r2, r3
 8016a36:	4b37      	ldr	r3, [pc, #220]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016a38:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016a3a:	4b37      	ldr	r3, [pc, #220]	; (8016b18 <RadioSetRxConfig+0x310>)
 8016a3c:	781a      	ldrb	r2, [r3, #0]
 8016a3e:	4b35      	ldr	r3, [pc, #212]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016a40:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016a42:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d003      	beq.n	8016a52 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016a4a:	4b32      	ldr	r3, [pc, #200]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016a4c:	22f2      	movs	r2, #242	; 0xf2
 8016a4e:	75da      	strb	r2, [r3, #23]
 8016a50:	e002      	b.n	8016a58 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016a52:	4b30      	ldr	r3, [pc, #192]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016a54:	2201      	movs	r2, #1
 8016a56:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016a58:	4b2e      	ldr	r3, [pc, #184]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016a5a:	2201      	movs	r2, #1
 8016a5c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016a5e:	f000 fc76 	bl	801734e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016a62:	4b2c      	ldr	r3, [pc, #176]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016a64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	bf14      	ite	ne
 8016a6c:	2301      	movne	r3, #1
 8016a6e:	2300      	moveq	r3, #0
 8016a70:	b2db      	uxtb	r3, r3
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7ff fdfa 	bl	801666c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016a78:	4828      	ldr	r0, [pc, #160]	; (8016b1c <RadioSetRxConfig+0x314>)
 8016a7a:	f002 f905 	bl	8018c88 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016a7e:	4828      	ldr	r0, [pc, #160]	; (8016b20 <RadioSetRxConfig+0x318>)
 8016a80:	f002 f9ce 	bl	8018e20 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016a84:	4a28      	ldr	r2, [pc, #160]	; (8016b28 <RadioSetRxConfig+0x320>)
 8016a86:	f107 0314 	add.w	r3, r7, #20
 8016a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016a8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8016a92:	f107 0314 	add.w	r3, r7, #20
 8016a96:	4618      	mov	r0, r3
 8016a98:	f001 fd01 	bl	801849e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016a9c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016aa0:	f001 fd4c 	bl	801853c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016aa4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016aa6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016aaa:	fb02 f303 	mul.w	r3, r2, r3
 8016aae:	461a      	mov	r2, r3
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8016ab6:	4a17      	ldr	r2, [pc, #92]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016ab8:	6093      	str	r3, [r2, #8]
            break;
 8016aba:	e0a8      	b.n	8016c0e <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016abc:	2000      	movs	r0, #0
 8016abe:	f001 feb5 	bl	801882c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016ac2:	4b14      	ldr	r3, [pc, #80]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016ac4:	2201      	movs	r2, #1
 8016ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	b2da      	uxtb	r2, r3
 8016ace:	4b11      	ldr	r3, [pc, #68]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016ad4:	4a15      	ldr	r2, [pc, #84]	; (8016b2c <RadioSetRxConfig+0x324>)
 8016ad6:	68bb      	ldr	r3, [r7, #8]
 8016ad8:	4413      	add	r3, r2
 8016ada:	781a      	ldrb	r2, [r3, #0]
 8016adc:	4b0d      	ldr	r3, [pc, #52]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016ae2:	4a0c      	ldr	r2, [pc, #48]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016ae4:	7bbb      	ldrb	r3, [r7, #14]
 8016ae6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016aea:	68bb      	ldr	r3, [r7, #8]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d105      	bne.n	8016afc <RadioSetRxConfig+0x2f4>
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	2b0b      	cmp	r3, #11
 8016af4:	d008      	beq.n	8016b08 <RadioSetRxConfig+0x300>
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	2b0c      	cmp	r3, #12
 8016afa:	d005      	beq.n	8016b08 <RadioSetRxConfig+0x300>
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	2b01      	cmp	r3, #1
 8016b00:	d116      	bne.n	8016b30 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	2b0c      	cmp	r3, #12
 8016b06:	d113      	bne.n	8016b30 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016b08:	4b02      	ldr	r3, [pc, #8]	; (8016b14 <RadioSetRxConfig+0x30c>)
 8016b0a:	2201      	movs	r2, #1
 8016b0c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016b10:	e012      	b.n	8016b38 <RadioSetRxConfig+0x330>
 8016b12:	bf00      	nop
 8016b14:	200017c0 	.word	0x200017c0
 8016b18:	20000120 	.word	0x20000120
 8016b1c:	200017f8 	.word	0x200017f8
 8016b20:	200017ce 	.word	0x200017ce
 8016b24:	0801b4c0 	.word	0x0801b4c0
 8016b28:	0801b4c8 	.word	0x0801b4c8
 8016b2c:	0801baac 	.word	0x0801baac
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016b30:	4b39      	ldr	r3, [pc, #228]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016b32:	2200      	movs	r2, #0
 8016b34:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016b38:	4b37      	ldr	r3, [pc, #220]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016b3a:	2201      	movs	r2, #1
 8016b3c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016b3e:	4b36      	ldr	r3, [pc, #216]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016b40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016b44:	2b05      	cmp	r3, #5
 8016b46:	d004      	beq.n	8016b52 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016b48:	4b33      	ldr	r3, [pc, #204]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016b4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016b4e:	2b06      	cmp	r3, #6
 8016b50:	d10a      	bne.n	8016b68 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8016b52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b54:	2b0b      	cmp	r3, #11
 8016b56:	d803      	bhi.n	8016b60 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016b58:	4b2f      	ldr	r3, [pc, #188]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016b5a:	220c      	movs	r2, #12
 8016b5c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016b5e:	e006      	b.n	8016b6e <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016b60:	4a2d      	ldr	r2, [pc, #180]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016b62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b64:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016b66:	e002      	b.n	8016b6e <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016b68:	4a2b      	ldr	r2, [pc, #172]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016b6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b6c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016b6e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016b72:	4b29      	ldr	r3, [pc, #164]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016b74:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016b76:	4b29      	ldr	r3, [pc, #164]	; (8016c1c <RadioSetRxConfig+0x414>)
 8016b78:	781a      	ldrb	r2, [r3, #0]
 8016b7a:	4b27      	ldr	r3, [pc, #156]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016b7c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016b7e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016b82:	4b25      	ldr	r3, [pc, #148]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016b84:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016b88:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016b8c:	4b22      	ldr	r3, [pc, #136]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016b8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016b92:	f000 fbdc 	bl	801734e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016b96:	4b20      	ldr	r3, [pc, #128]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016b98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	bf14      	ite	ne
 8016ba0:	2301      	movne	r3, #1
 8016ba2:	2300      	moveq	r3, #0
 8016ba4:	b2db      	uxtb	r3, r3
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f7ff fd60 	bl	801666c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016bac:	481c      	ldr	r0, [pc, #112]	; (8016c20 <RadioSetRxConfig+0x418>)
 8016bae:	f002 f86b 	bl	8018c88 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016bb2:	481c      	ldr	r0, [pc, #112]	; (8016c24 <RadioSetRxConfig+0x41c>)
 8016bb4:	f002 f934 	bl	8018e20 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016bb8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016bba:	b2db      	uxtb	r3, r3
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f001 fe44 	bl	801884a <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016bc2:	4b15      	ldr	r3, [pc, #84]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016bc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016bc8:	2b01      	cmp	r3, #1
 8016bca:	d10d      	bne.n	8016be8 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8016bcc:	f240 7036 	movw	r0, #1846	; 0x736
 8016bd0:	f002 fa82 	bl	80190d8 <SUBGRF_ReadRegister>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	f023 0304 	bic.w	r3, r3, #4
 8016bda:	b2db      	uxtb	r3, r3
 8016bdc:	4619      	mov	r1, r3
 8016bde:	f240 7036 	movw	r0, #1846	; 0x736
 8016be2:	f002 fa65 	bl	80190b0 <SUBGRF_WriteRegister>
 8016be6:	e00c      	b.n	8016c02 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8016be8:	f240 7036 	movw	r0, #1846	; 0x736
 8016bec:	f002 fa74 	bl	80190d8 <SUBGRF_ReadRegister>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	f043 0304 	orr.w	r3, r3, #4
 8016bf6:	b2db      	uxtb	r3, r3
 8016bf8:	4619      	mov	r1, r3
 8016bfa:	f240 7036 	movw	r0, #1846	; 0x736
 8016bfe:	f002 fa57 	bl	80190b0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016c02:	4b05      	ldr	r3, [pc, #20]	; (8016c18 <RadioSetRxConfig+0x410>)
 8016c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c08:	609a      	str	r2, [r3, #8]
            break;
 8016c0a:	e000      	b.n	8016c0e <RadioSetRxConfig+0x406>
            break;
 8016c0c:	bf00      	nop
    }
}
 8016c0e:	bf00      	nop
 8016c10:	3728      	adds	r7, #40	; 0x28
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bd80      	pop	{r7, pc}
 8016c16:	bf00      	nop
 8016c18:	200017c0 	.word	0x200017c0
 8016c1c:	20000120 	.word	0x20000120
 8016c20:	200017f8 	.word	0x200017f8
 8016c24:	200017ce 	.word	0x200017ce

08016c28 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b086      	sub	sp, #24
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	60ba      	str	r2, [r7, #8]
 8016c30:	607b      	str	r3, [r7, #4]
 8016c32:	4603      	mov	r3, r0
 8016c34:	73fb      	strb	r3, [r7, #15]
 8016c36:	460b      	mov	r3, r1
 8016c38:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016c3a:	f002 fd12 	bl	8019662 <RFW_DeInit>
    switch( modem )
 8016c3e:	7bfb      	ldrb	r3, [r7, #15]
 8016c40:	2b03      	cmp	r3, #3
 8016c42:	f000 80d7 	beq.w	8016df4 <RadioSetTxConfig+0x1cc>
 8016c46:	2b03      	cmp	r3, #3
 8016c48:	f300 80e6 	bgt.w	8016e18 <RadioSetTxConfig+0x1f0>
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d002      	beq.n	8016c56 <RadioSetTxConfig+0x2e>
 8016c50:	2b01      	cmp	r3, #1
 8016c52:	d061      	beq.n	8016d18 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8016c54:	e0e0      	b.n	8016e18 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016c56:	4b7c      	ldr	r3, [pc, #496]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016c58:	2200      	movs	r2, #0
 8016c5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016c5e:	4a7a      	ldr	r2, [pc, #488]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016c60:	6a3b      	ldr	r3, [r7, #32]
 8016c62:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016c64:	4b78      	ldr	r3, [pc, #480]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016c66:	220b      	movs	r2, #11
 8016c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016c6c:	6878      	ldr	r0, [r7, #4]
 8016c6e:	f002 fc29 	bl	80194c4 <SUBGRF_GetFskBandwidthRegValue>
 8016c72:	4603      	mov	r3, r0
 8016c74:	461a      	mov	r2, r3
 8016c76:	4b74      	ldr	r3, [pc, #464]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016c7c:	4a72      	ldr	r2, [pc, #456]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016c7e:	68bb      	ldr	r3, [r7, #8]
 8016c80:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016c82:	4b71      	ldr	r3, [pc, #452]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016c84:	2200      	movs	r2, #0
 8016c86:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016c88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016c8a:	00db      	lsls	r3, r3, #3
 8016c8c:	b29a      	uxth	r2, r3
 8016c8e:	4b6e      	ldr	r3, [pc, #440]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016c90:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016c92:	4b6d      	ldr	r3, [pc, #436]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016c94:	2204      	movs	r2, #4
 8016c96:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016c98:	4b6b      	ldr	r3, [pc, #428]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016c9a:	2218      	movs	r2, #24
 8016c9c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016c9e:	4b6a      	ldr	r3, [pc, #424]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016ca4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016ca8:	f083 0301 	eor.w	r3, r3, #1
 8016cac:	b2db      	uxtb	r3, r3
 8016cae:	461a      	mov	r2, r3
 8016cb0:	4b65      	ldr	r3, [pc, #404]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016cb2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016cb4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d003      	beq.n	8016cc4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016cbc:	4b62      	ldr	r3, [pc, #392]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016cbe:	22f2      	movs	r2, #242	; 0xf2
 8016cc0:	75da      	strb	r2, [r3, #23]
 8016cc2:	e002      	b.n	8016cca <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016cc4:	4b60      	ldr	r3, [pc, #384]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016cc6:	2201      	movs	r2, #1
 8016cc8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016cca:	4b5f      	ldr	r3, [pc, #380]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016ccc:	2201      	movs	r2, #1
 8016cce:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016cd0:	f000 fb3d 	bl	801734e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016cd4:	4b5c      	ldr	r3, [pc, #368]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	bf14      	ite	ne
 8016cde:	2301      	movne	r3, #1
 8016ce0:	2300      	moveq	r3, #0
 8016ce2:	b2db      	uxtb	r3, r3
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f7ff fcc1 	bl	801666c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016cea:	4858      	ldr	r0, [pc, #352]	; (8016e4c <RadioSetTxConfig+0x224>)
 8016cec:	f001 ffcc 	bl	8018c88 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016cf0:	4857      	ldr	r0, [pc, #348]	; (8016e50 <RadioSetTxConfig+0x228>)
 8016cf2:	f002 f895 	bl	8018e20 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016cf6:	4a57      	ldr	r2, [pc, #348]	; (8016e54 <RadioSetTxConfig+0x22c>)
 8016cf8:	f107 0310 	add.w	r3, r7, #16
 8016cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d00:	e883 0003 	stmia.w	r3, {r0, r1}
 8016d04:	f107 0310 	add.w	r3, r7, #16
 8016d08:	4618      	mov	r0, r3
 8016d0a:	f001 fbc8 	bl	801849e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016d0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016d12:	f001 fc13 	bl	801853c <SUBGRF_SetWhiteningSeed>
            break;
 8016d16:	e080      	b.n	8016e1a <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016d18:	4b4b      	ldr	r3, [pc, #300]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016d1a:	2201      	movs	r2, #1
 8016d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016d20:	6a3b      	ldr	r3, [r7, #32]
 8016d22:	b2da      	uxtb	r2, r3
 8016d24:	4b48      	ldr	r3, [pc, #288]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016d2a:	4a4b      	ldr	r2, [pc, #300]	; (8016e58 <RadioSetTxConfig+0x230>)
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	4413      	add	r3, r2
 8016d30:	781a      	ldrb	r2, [r3, #0]
 8016d32:	4b45      	ldr	r3, [pc, #276]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016d38:	4a43      	ldr	r2, [pc, #268]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016d3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d3e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d105      	bne.n	8016d54 <RadioSetTxConfig+0x12c>
 8016d48:	6a3b      	ldr	r3, [r7, #32]
 8016d4a:	2b0b      	cmp	r3, #11
 8016d4c:	d008      	beq.n	8016d60 <RadioSetTxConfig+0x138>
 8016d4e:	6a3b      	ldr	r3, [r7, #32]
 8016d50:	2b0c      	cmp	r3, #12
 8016d52:	d005      	beq.n	8016d60 <RadioSetTxConfig+0x138>
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	2b01      	cmp	r3, #1
 8016d58:	d107      	bne.n	8016d6a <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016d5a:	6a3b      	ldr	r3, [r7, #32]
 8016d5c:	2b0c      	cmp	r3, #12
 8016d5e:	d104      	bne.n	8016d6a <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016d60:	4b39      	ldr	r3, [pc, #228]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016d62:	2201      	movs	r2, #1
 8016d64:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016d68:	e003      	b.n	8016d72 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016d6a:	4b37      	ldr	r3, [pc, #220]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016d72:	4b35      	ldr	r3, [pc, #212]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016d74:	2201      	movs	r2, #1
 8016d76:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016d78:	4b33      	ldr	r3, [pc, #204]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016d7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016d7e:	2b05      	cmp	r3, #5
 8016d80:	d004      	beq.n	8016d8c <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016d82:	4b31      	ldr	r3, [pc, #196]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016d84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016d88:	2b06      	cmp	r3, #6
 8016d8a:	d10a      	bne.n	8016da2 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8016d8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016d8e:	2b0b      	cmp	r3, #11
 8016d90:	d803      	bhi.n	8016d9a <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016d92:	4b2d      	ldr	r3, [pc, #180]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016d94:	220c      	movs	r2, #12
 8016d96:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016d98:	e006      	b.n	8016da8 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016d9a:	4a2b      	ldr	r2, [pc, #172]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016d9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016d9e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016da0:	e002      	b.n	8016da8 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016da2:	4a29      	ldr	r2, [pc, #164]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016da4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016da6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016da8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016dac:	4b26      	ldr	r3, [pc, #152]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016dae:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016db0:	4b2a      	ldr	r3, [pc, #168]	; (8016e5c <RadioSetTxConfig+0x234>)
 8016db2:	781a      	ldrb	r2, [r3, #0]
 8016db4:	4b24      	ldr	r3, [pc, #144]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016db6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016db8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016dbc:	4b22      	ldr	r3, [pc, #136]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016dbe:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016dc2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016dc6:	4b20      	ldr	r3, [pc, #128]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016dc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016dcc:	f000 fabf 	bl	801734e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016dd0:	4b1d      	ldr	r3, [pc, #116]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016dd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	bf14      	ite	ne
 8016dda:	2301      	movne	r3, #1
 8016ddc:	2300      	moveq	r3, #0
 8016dde:	b2db      	uxtb	r3, r3
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7ff fc43 	bl	801666c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016de6:	4819      	ldr	r0, [pc, #100]	; (8016e4c <RadioSetTxConfig+0x224>)
 8016de8:	f001 ff4e 	bl	8018c88 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016dec:	4818      	ldr	r0, [pc, #96]	; (8016e50 <RadioSetTxConfig+0x228>)
 8016dee:	f002 f817 	bl	8018e20 <SUBGRF_SetPacketParams>
            break;
 8016df2:	e012      	b.n	8016e1a <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8016df4:	2003      	movs	r0, #3
 8016df6:	f7ff fc39 	bl	801666c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8016dfa:	4b13      	ldr	r3, [pc, #76]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016dfc:	2202      	movs	r2, #2
 8016dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8016e02:	4a11      	ldr	r2, [pc, #68]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016e04:	6a3b      	ldr	r3, [r7, #32]
 8016e06:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8016e08:	4b0f      	ldr	r3, [pc, #60]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016e0a:	2216      	movs	r2, #22
 8016e0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016e10:	480e      	ldr	r0, [pc, #56]	; (8016e4c <RadioSetTxConfig+0x224>)
 8016e12:	f001 ff39 	bl	8018c88 <SUBGRF_SetModulationParams>
            break;
 8016e16:	e000      	b.n	8016e1a <RadioSetTxConfig+0x1f2>
            break;
 8016e18:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016e1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f002 fa62 	bl	80192e8 <SUBGRF_SetRfTxPower>
 8016e24:	4603      	mov	r3, r0
 8016e26:	461a      	mov	r2, r3
 8016e28:	4b07      	ldr	r3, [pc, #28]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016e2a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8016e2e:	4b06      	ldr	r3, [pc, #24]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016e30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016e34:	4618      	mov	r0, r3
 8016e36:	f002 fc28 	bl	801968a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8016e3a:	4a03      	ldr	r2, [pc, #12]	; (8016e48 <RadioSetTxConfig+0x220>)
 8016e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e3e:	6053      	str	r3, [r2, #4]
}
 8016e40:	bf00      	nop
 8016e42:	3718      	adds	r7, #24
 8016e44:	46bd      	mov	sp, r7
 8016e46:	bd80      	pop	{r7, pc}
 8016e48:	200017c0 	.word	0x200017c0
 8016e4c:	200017f8 	.word	0x200017f8
 8016e50:	200017ce 	.word	0x200017ce
 8016e54:	0801b4c8 	.word	0x0801b4c8
 8016e58:	0801baac 	.word	0x0801baac
 8016e5c:	20000120 	.word	0x20000120

08016e60 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8016e60:	b480      	push	{r7}
 8016e62:	b083      	sub	sp, #12
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
    return true;
 8016e68:	2301      	movs	r3, #1
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	370c      	adds	r7, #12
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bc80      	pop	{r7}
 8016e72:	4770      	bx	lr

08016e74 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8016e74:	b480      	push	{r7}
 8016e76:	b085      	sub	sp, #20
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8016e7e:	2300      	movs	r3, #0
 8016e80:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8016e82:	79fb      	ldrb	r3, [r7, #7]
 8016e84:	2b0a      	cmp	r3, #10
 8016e86:	d83e      	bhi.n	8016f06 <RadioGetLoRaBandwidthInHz+0x92>
 8016e88:	a201      	add	r2, pc, #4	; (adr r2, 8016e90 <RadioGetLoRaBandwidthInHz+0x1c>)
 8016e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e8e:	bf00      	nop
 8016e90:	08016ebd 	.word	0x08016ebd
 8016e94:	08016ecd 	.word	0x08016ecd
 8016e98:	08016edd 	.word	0x08016edd
 8016e9c:	08016eed 	.word	0x08016eed
 8016ea0:	08016ef5 	.word	0x08016ef5
 8016ea4:	08016efb 	.word	0x08016efb
 8016ea8:	08016f01 	.word	0x08016f01
 8016eac:	08016f07 	.word	0x08016f07
 8016eb0:	08016ec5 	.word	0x08016ec5
 8016eb4:	08016ed5 	.word	0x08016ed5
 8016eb8:	08016ee5 	.word	0x08016ee5
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8016ebc:	f641 6384 	movw	r3, #7812	; 0x1e84
 8016ec0:	60fb      	str	r3, [r7, #12]
        break;
 8016ec2:	e020      	b.n	8016f06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8016ec4:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8016ec8:	60fb      	str	r3, [r7, #12]
        break;
 8016eca:	e01c      	b.n	8016f06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8016ecc:	f643 5309 	movw	r3, #15625	; 0x3d09
 8016ed0:	60fb      	str	r3, [r7, #12]
        break;
 8016ed2:	e018      	b.n	8016f06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8016ed4:	f245 1361 	movw	r3, #20833	; 0x5161
 8016ed8:	60fb      	str	r3, [r7, #12]
        break;
 8016eda:	e014      	b.n	8016f06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8016edc:	f647 2312 	movw	r3, #31250	; 0x7a12
 8016ee0:	60fb      	str	r3, [r7, #12]
        break;
 8016ee2:	e010      	b.n	8016f06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8016ee4:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8016ee8:	60fb      	str	r3, [r7, #12]
        break;
 8016eea:	e00c      	b.n	8016f06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8016eec:	f24f 4324 	movw	r3, #62500	; 0xf424
 8016ef0:	60fb      	str	r3, [r7, #12]
        break;
 8016ef2:	e008      	b.n	8016f06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8016ef4:	4b07      	ldr	r3, [pc, #28]	; (8016f14 <RadioGetLoRaBandwidthInHz+0xa0>)
 8016ef6:	60fb      	str	r3, [r7, #12]
        break;
 8016ef8:	e005      	b.n	8016f06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8016efa:	4b07      	ldr	r3, [pc, #28]	; (8016f18 <RadioGetLoRaBandwidthInHz+0xa4>)
 8016efc:	60fb      	str	r3, [r7, #12]
        break;
 8016efe:	e002      	b.n	8016f06 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8016f00:	4b06      	ldr	r3, [pc, #24]	; (8016f1c <RadioGetLoRaBandwidthInHz+0xa8>)
 8016f02:	60fb      	str	r3, [r7, #12]
        break;
 8016f04:	bf00      	nop
    }

    return bandwidthInHz;
 8016f06:	68fb      	ldr	r3, [r7, #12]
}
 8016f08:	4618      	mov	r0, r3
 8016f0a:	3714      	adds	r7, #20
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	bc80      	pop	{r7}
 8016f10:	4770      	bx	lr
 8016f12:	bf00      	nop
 8016f14:	0001e848 	.word	0x0001e848
 8016f18:	0003d090 	.word	0x0003d090
 8016f1c:	0007a120 	.word	0x0007a120

08016f20 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016f20:	b480      	push	{r7}
 8016f22:	b083      	sub	sp, #12
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
 8016f28:	4608      	mov	r0, r1
 8016f2a:	4611      	mov	r1, r2
 8016f2c:	461a      	mov	r2, r3
 8016f2e:	4603      	mov	r3, r0
 8016f30:	70fb      	strb	r3, [r7, #3]
 8016f32:	460b      	mov	r3, r1
 8016f34:	803b      	strh	r3, [r7, #0]
 8016f36:	4613      	mov	r3, r2
 8016f38:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8016f3a:	883b      	ldrh	r3, [r7, #0]
 8016f3c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016f3e:	78ba      	ldrb	r2, [r7, #2]
 8016f40:	f082 0201 	eor.w	r2, r2, #1
 8016f44:	b2d2      	uxtb	r2, r2
 8016f46:	2a00      	cmp	r2, #0
 8016f48:	d001      	beq.n	8016f4e <RadioGetGfskTimeOnAirNumerator+0x2e>
 8016f4a:	2208      	movs	r2, #8
 8016f4c:	e000      	b.n	8016f50 <RadioGetGfskTimeOnAirNumerator+0x30>
 8016f4e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8016f50:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016f52:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8016f56:	7c3b      	ldrb	r3, [r7, #16]
 8016f58:	7d39      	ldrb	r1, [r7, #20]
 8016f5a:	2900      	cmp	r1, #0
 8016f5c:	d001      	beq.n	8016f62 <RadioGetGfskTimeOnAirNumerator+0x42>
 8016f5e:	2102      	movs	r1, #2
 8016f60:	e000      	b.n	8016f64 <RadioGetGfskTimeOnAirNumerator+0x44>
 8016f62:	2100      	movs	r1, #0
 8016f64:	440b      	add	r3, r1
 8016f66:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016f68:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	370c      	adds	r7, #12
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	bc80      	pop	{r7}
 8016f72:	4770      	bx	lr

08016f74 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016f74:	b480      	push	{r7}
 8016f76:	b08b      	sub	sp, #44	; 0x2c
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	60f8      	str	r0, [r7, #12]
 8016f7c:	60b9      	str	r1, [r7, #8]
 8016f7e:	4611      	mov	r1, r2
 8016f80:	461a      	mov	r2, r3
 8016f82:	460b      	mov	r3, r1
 8016f84:	71fb      	strb	r3, [r7, #7]
 8016f86:	4613      	mov	r3, r2
 8016f88:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8016f8a:	79fb      	ldrb	r3, [r7, #7]
 8016f8c:	3304      	adds	r3, #4
 8016f8e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8016f90:	2300      	movs	r3, #0
 8016f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8016f96:	68bb      	ldr	r3, [r7, #8]
 8016f98:	2b05      	cmp	r3, #5
 8016f9a:	d002      	beq.n	8016fa2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8016f9c:	68bb      	ldr	r3, [r7, #8]
 8016f9e:	2b06      	cmp	r3, #6
 8016fa0:	d104      	bne.n	8016fac <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8016fa2:	88bb      	ldrh	r3, [r7, #4]
 8016fa4:	2b0b      	cmp	r3, #11
 8016fa6:	d801      	bhi.n	8016fac <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8016fa8:	230c      	movs	r3, #12
 8016faa:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d105      	bne.n	8016fbe <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8016fb2:	68bb      	ldr	r3, [r7, #8]
 8016fb4:	2b0b      	cmp	r3, #11
 8016fb6:	d008      	beq.n	8016fca <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016fb8:	68bb      	ldr	r3, [r7, #8]
 8016fba:	2b0c      	cmp	r3, #12
 8016fbc:	d005      	beq.n	8016fca <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	2b01      	cmp	r3, #1
 8016fc2:	d105      	bne.n	8016fd0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016fc4:	68bb      	ldr	r3, [r7, #8]
 8016fc6:	2b0c      	cmp	r3, #12
 8016fc8:	d102      	bne.n	8016fd0 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8016fca:	2301      	movs	r3, #1
 8016fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016fd0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016fd4:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8016fd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016fda:	2a00      	cmp	r2, #0
 8016fdc:	d001      	beq.n	8016fe2 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8016fde:	2210      	movs	r2, #16
 8016fe0:	e000      	b.n	8016fe4 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8016fe2:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016fe4:	4413      	add	r3, r2
 8016fe6:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8016fe8:	68bb      	ldr	r3, [r7, #8]
 8016fea:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8016fec:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8016fee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016ff2:	2a00      	cmp	r2, #0
 8016ff4:	d001      	beq.n	8016ffa <RadioGetLoRaTimeOnAirNumerator+0x86>
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	e000      	b.n	8016ffc <RadioGetLoRaTimeOnAirNumerator+0x88>
 8016ffa:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8016ffc:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016ffe:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8017000:	68bb      	ldr	r3, [r7, #8]
 8017002:	2b06      	cmp	r3, #6
 8017004:	d803      	bhi.n	801700e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8017006:	68bb      	ldr	r3, [r7, #8]
 8017008:	009b      	lsls	r3, r3, #2
 801700a:	623b      	str	r3, [r7, #32]
 801700c:	e00e      	b.n	801702c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801700e:	69fb      	ldr	r3, [r7, #28]
 8017010:	3308      	adds	r3, #8
 8017012:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017018:	2b00      	cmp	r3, #0
 801701a:	d004      	beq.n	8017026 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801701c:	68bb      	ldr	r3, [r7, #8]
 801701e:	3b02      	subs	r3, #2
 8017020:	009b      	lsls	r3, r3, #2
 8017022:	623b      	str	r3, [r7, #32]
 8017024:	e002      	b.n	801702c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8017026:	68bb      	ldr	r3, [r7, #8]
 8017028:	009b      	lsls	r3, r3, #2
 801702a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801702c:	69fb      	ldr	r3, [r7, #28]
 801702e:	2b00      	cmp	r3, #0
 8017030:	da01      	bge.n	8017036 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8017032:	2300      	movs	r3, #0
 8017034:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8017036:	69fa      	ldr	r2, [r7, #28]
 8017038:	6a3b      	ldr	r3, [r7, #32]
 801703a:	4413      	add	r3, r2
 801703c:	1e5a      	subs	r2, r3, #1
 801703e:	6a3b      	ldr	r3, [r7, #32]
 8017040:	fb92 f3f3 	sdiv	r3, r2, r3
 8017044:	697a      	ldr	r2, [r7, #20]
 8017046:	fb02 f203 	mul.w	r2, r2, r3
 801704a:	88bb      	ldrh	r3, [r7, #4]
 801704c:	4413      	add	r3, r2
    int32_t intermediate =
 801704e:	330c      	adds	r3, #12
 8017050:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8017052:	68bb      	ldr	r3, [r7, #8]
 8017054:	2b06      	cmp	r3, #6
 8017056:	d802      	bhi.n	801705e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017058:	69bb      	ldr	r3, [r7, #24]
 801705a:	3302      	adds	r3, #2
 801705c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801705e:	69bb      	ldr	r3, [r7, #24]
 8017060:	009b      	lsls	r3, r3, #2
 8017062:	1c5a      	adds	r2, r3, #1
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	3b02      	subs	r3, #2
 8017068:	fa02 f303 	lsl.w	r3, r2, r3
}
 801706c:	4618      	mov	r0, r3
 801706e:	372c      	adds	r7, #44	; 0x2c
 8017070:	46bd      	mov	sp, r7
 8017072:	bc80      	pop	{r7}
 8017074:	4770      	bx	lr
	...

08017078 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b08a      	sub	sp, #40	; 0x28
 801707c:	af04      	add	r7, sp, #16
 801707e:	60b9      	str	r1, [r7, #8]
 8017080:	607a      	str	r2, [r7, #4]
 8017082:	461a      	mov	r2, r3
 8017084:	4603      	mov	r3, r0
 8017086:	73fb      	strb	r3, [r7, #15]
 8017088:	4613      	mov	r3, r2
 801708a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801708c:	2300      	movs	r3, #0
 801708e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017090:	2301      	movs	r3, #1
 8017092:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017094:	7bfb      	ldrb	r3, [r7, #15]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d002      	beq.n	80170a0 <RadioTimeOnAir+0x28>
 801709a:	2b01      	cmp	r3, #1
 801709c:	d017      	beq.n	80170ce <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801709e:	e035      	b.n	801710c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80170a0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80170a4:	8c3a      	ldrh	r2, [r7, #32]
 80170a6:	7bb9      	ldrb	r1, [r7, #14]
 80170a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80170ac:	9301      	str	r3, [sp, #4]
 80170ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80170b2:	9300      	str	r3, [sp, #0]
 80170b4:	4603      	mov	r3, r0
 80170b6:	6878      	ldr	r0, [r7, #4]
 80170b8:	f7ff ff32 	bl	8016f20 <RadioGetGfskTimeOnAirNumerator>
 80170bc:	4603      	mov	r3, r0
 80170be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80170c2:	fb02 f303 	mul.w	r3, r2, r3
 80170c6:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	613b      	str	r3, [r7, #16]
        break;
 80170cc:	e01e      	b.n	801710c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80170ce:	8c39      	ldrh	r1, [r7, #32]
 80170d0:	7bba      	ldrb	r2, [r7, #14]
 80170d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80170d6:	9302      	str	r3, [sp, #8]
 80170d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80170dc:	9301      	str	r3, [sp, #4]
 80170de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80170e2:	9300      	str	r3, [sp, #0]
 80170e4:	460b      	mov	r3, r1
 80170e6:	6879      	ldr	r1, [r7, #4]
 80170e8:	68b8      	ldr	r0, [r7, #8]
 80170ea:	f7ff ff43 	bl	8016f74 <RadioGetLoRaTimeOnAirNumerator>
 80170ee:	4603      	mov	r3, r0
 80170f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80170f4:	fb02 f303 	mul.w	r3, r2, r3
 80170f8:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80170fa:	4a0a      	ldr	r2, [pc, #40]	; (8017124 <RadioTimeOnAir+0xac>)
 80170fc:	68bb      	ldr	r3, [r7, #8]
 80170fe:	4413      	add	r3, r2
 8017100:	781b      	ldrb	r3, [r3, #0]
 8017102:	4618      	mov	r0, r3
 8017104:	f7ff feb6 	bl	8016e74 <RadioGetLoRaBandwidthInHz>
 8017108:	6138      	str	r0, [r7, #16]
        break;
 801710a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 801710c:	697a      	ldr	r2, [r7, #20]
 801710e:	693b      	ldr	r3, [r7, #16]
 8017110:	4413      	add	r3, r2
 8017112:	1e5a      	subs	r2, r3, #1
 8017114:	693b      	ldr	r3, [r7, #16]
 8017116:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801711a:	4618      	mov	r0, r3
 801711c:	3718      	adds	r7, #24
 801711e:	46bd      	mov	sp, r7
 8017120:	bd80      	pop	{r7, pc}
 8017122:	bf00      	nop
 8017124:	0801baac 	.word	0x0801baac

08017128 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b084      	sub	sp, #16
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 8017130:	460b      	mov	r3, r1
 8017132:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017134:	2300      	movs	r3, #0
 8017136:	2200      	movs	r2, #0
 8017138:	f240 2101 	movw	r1, #513	; 0x201
 801713c:	f240 2001 	movw	r0, #513	; 0x201
 8017140:	f001 fc78 	bl	8018a34 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE );
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 8017144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017148:	4871      	ldr	r0, [pc, #452]	; (8017310 <RadioSend+0x1e8>)
 801714a:	f7ff fa07 	bl	801655c <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 801714e:	4b71      	ldr	r3, [pc, #452]	; (8017314 <RadioSend+0x1ec>)
 8017150:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017154:	2101      	movs	r1, #1
 8017156:	4618      	mov	r0, r3
 8017158:	f002 f89e 	bl	8019298 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 801715c:	4b6d      	ldr	r3, [pc, #436]	; (8017314 <RadioSend+0x1ec>)
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	2b01      	cmp	r3, #1
 8017162:	d112      	bne.n	801718a <RadioSend+0x62>
 8017164:	4b6b      	ldr	r3, [pc, #428]	; (8017314 <RadioSend+0x1ec>)
 8017166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801716a:	2b06      	cmp	r3, #6
 801716c:	d10d      	bne.n	801718a <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801716e:	f640 0089 	movw	r0, #2185	; 0x889
 8017172:	f001 ffb1 	bl	80190d8 <SUBGRF_ReadRegister>
 8017176:	4603      	mov	r3, r0
 8017178:	f023 0304 	bic.w	r3, r3, #4
 801717c:	b2db      	uxtb	r3, r3
 801717e:	4619      	mov	r1, r3
 8017180:	f640 0089 	movw	r0, #2185	; 0x889
 8017184:	f001 ff94 	bl	80190b0 <SUBGRF_WriteRegister>
 8017188:	e00c      	b.n	80171a4 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801718a:	f640 0089 	movw	r0, #2185	; 0x889
 801718e:	f001 ffa3 	bl	80190d8 <SUBGRF_ReadRegister>
 8017192:	4603      	mov	r3, r0
 8017194:	f043 0304 	orr.w	r3, r3, #4
 8017198:	b2db      	uxtb	r3, r3
 801719a:	4619      	mov	r1, r3
 801719c:	f640 0089 	movw	r0, #2185	; 0x889
 80171a0:	f001 ff86 	bl	80190b0 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 80171a4:	4b5b      	ldr	r3, [pc, #364]	; (8017314 <RadioSend+0x1ec>)
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	2b03      	cmp	r3, #3
 80171aa:	f200 80a4 	bhi.w	80172f6 <RadioSend+0x1ce>
 80171ae:	a201      	add	r2, pc, #4	; (adr r2, 80171b4 <RadioSend+0x8c>)
 80171b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171b4:	080171df 	.word	0x080171df
 80171b8:	080171c5 	.word	0x080171c5
 80171bc:	0801723f 	.word	0x0801723f
 80171c0:	0801725f 	.word	0x0801725f
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80171c4:	4a53      	ldr	r2, [pc, #332]	; (8017314 <RadioSend+0x1ec>)
 80171c6:	78fb      	ldrb	r3, [r7, #3]
 80171c8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80171ca:	4853      	ldr	r0, [pc, #332]	; (8017318 <RadioSend+0x1f0>)
 80171cc:	f001 fe28 	bl	8018e20 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80171d0:	78fb      	ldrb	r3, [r7, #3]
 80171d2:	2200      	movs	r2, #0
 80171d4:	4619      	mov	r1, r3
 80171d6:	6878      	ldr	r0, [r7, #4]
 80171d8:	f001 f94e 	bl	8018478 <SUBGRF_SendPayload>
            break;
 80171dc:	e08c      	b.n	80172f8 <RadioSend+0x1d0>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80171de:	f002 fa46 	bl	801966e <RFW_Is_Init>
 80171e2:	4603      	mov	r3, r0
 80171e4:	2b01      	cmp	r3, #1
 80171e6:	d11d      	bne.n	8017224 <RadioSend+0xfc>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80171e8:	f107 020d 	add.w	r2, r7, #13
 80171ec:	78fb      	ldrb	r3, [r7, #3]
 80171ee:	4619      	mov	r1, r3
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	f002 fa54 	bl	801969e <RFW_TransmitInit>
 80171f6:	4603      	mov	r3, r0
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d10c      	bne.n	8017216 <RadioSend+0xee>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80171fc:	7b7a      	ldrb	r2, [r7, #13]
 80171fe:	4b45      	ldr	r3, [pc, #276]	; (8017314 <RadioSend+0x1ec>)
 8017200:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017202:	4845      	ldr	r0, [pc, #276]	; (8017318 <RadioSend+0x1f0>)
 8017204:	f001 fe0c 	bl	8018e20 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8017208:	7b7b      	ldrb	r3, [r7, #13]
 801720a:	2200      	movs	r2, #0
 801720c:	4619      	mov	r1, r3
 801720e:	6878      	ldr	r0, [r7, #4]
 8017210:	f001 f932 	bl	8018478 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017214:	e070      	b.n	80172f8 <RadioSend+0x1d0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8017216:	4b41      	ldr	r3, [pc, #260]	; (801731c <RadioSend+0x1f4>)
 8017218:	2201      	movs	r2, #1
 801721a:	2100      	movs	r1, #0
 801721c:	2002      	movs	r0, #2
 801721e:	f003 fa25 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
 8017222:	e072      	b.n	801730a <RadioSend+0x1e2>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017224:	4a3b      	ldr	r2, [pc, #236]	; (8017314 <RadioSend+0x1ec>)
 8017226:	78fb      	ldrb	r3, [r7, #3]
 8017228:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801722a:	483b      	ldr	r0, [pc, #236]	; (8017318 <RadioSend+0x1f0>)
 801722c:	f001 fdf8 	bl	8018e20 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8017230:	78fb      	ldrb	r3, [r7, #3]
 8017232:	2200      	movs	r2, #0
 8017234:	4619      	mov	r1, r3
 8017236:	6878      	ldr	r0, [r7, #4]
 8017238:	f001 f91e 	bl	8018478 <SUBGRF_SendPayload>
            break;
 801723c:	e05c      	b.n	80172f8 <RadioSend+0x1d0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801723e:	4b35      	ldr	r3, [pc, #212]	; (8017314 <RadioSend+0x1ec>)
 8017240:	2202      	movs	r2, #2
 8017242:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017244:	4a33      	ldr	r2, [pc, #204]	; (8017314 <RadioSend+0x1ec>)
 8017246:	78fb      	ldrb	r3, [r7, #3]
 8017248:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801724a:	4833      	ldr	r0, [pc, #204]	; (8017318 <RadioSend+0x1f0>)
 801724c:	f001 fde8 	bl	8018e20 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017250:	78fb      	ldrb	r3, [r7, #3]
 8017252:	2200      	movs	r2, #0
 8017254:	4619      	mov	r1, r3
 8017256:	6878      	ldr	r0, [r7, #4]
 8017258:	f001 f90e 	bl	8018478 <SUBGRF_SendPayload>
            break;
 801725c:	e04c      	b.n	80172f8 <RadioSend+0x1d0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801725e:	78fb      	ldrb	r3, [r7, #3]
 8017260:	461a      	mov	r2, r3
 8017262:	6879      	ldr	r1, [r7, #4]
 8017264:	482e      	ldr	r0, [pc, #184]	; (8017320 <RadioSend+0x1f8>)
 8017266:	f000 fc8e 	bl	8017b86 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801726a:	4b2a      	ldr	r3, [pc, #168]	; (8017314 <RadioSend+0x1ec>)
 801726c:	2202      	movs	r2, #2
 801726e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017270:	78fb      	ldrb	r3, [r7, #3]
 8017272:	3301      	adds	r3, #1
 8017274:	b2da      	uxtb	r2, r3
 8017276:	4b27      	ldr	r3, [pc, #156]	; (8017314 <RadioSend+0x1ec>)
 8017278:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801727a:	4827      	ldr	r0, [pc, #156]	; (8017318 <RadioSend+0x1f0>)
 801727c:	f001 fdd0 	bl	8018e20 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8017280:	2100      	movs	r1, #0
 8017282:	20f1      	movs	r0, #241	; 0xf1
 8017284:	f000 f94f 	bl	8017526 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8017288:	2100      	movs	r1, #0
 801728a:	20f0      	movs	r0, #240	; 0xf0
 801728c:	f000 f94b 	bl	8017526 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017290:	4b20      	ldr	r3, [pc, #128]	; (8017314 <RadioSend+0x1ec>)
 8017292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017294:	2b64      	cmp	r3, #100	; 0x64
 8017296:	d108      	bne.n	80172aa <RadioSend+0x182>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8017298:	2170      	movs	r1, #112	; 0x70
 801729a:	20f3      	movs	r0, #243	; 0xf3
 801729c:	f000 f943 	bl	8017526 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 80172a0:	211d      	movs	r1, #29
 80172a2:	20f2      	movs	r0, #242	; 0xf2
 80172a4:	f000 f93f 	bl	8017526 <RadioWrite>
 80172a8:	e007      	b.n	80172ba <RadioSend+0x192>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80172aa:	21e1      	movs	r1, #225	; 0xe1
 80172ac:	20f3      	movs	r0, #243	; 0xf3
 80172ae:	f000 f93a 	bl	8017526 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 80172b2:	2104      	movs	r1, #4
 80172b4:	20f2      	movs	r0, #242	; 0xf2
 80172b6:	f000 f936 	bl	8017526 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80172ba:	78fb      	ldrb	r3, [r7, #3]
 80172bc:	b29b      	uxth	r3, r3
 80172be:	00db      	lsls	r3, r3, #3
 80172c0:	b29b      	uxth	r3, r3
 80172c2:	3302      	adds	r3, #2
 80172c4:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80172c6:	89fb      	ldrh	r3, [r7, #14]
 80172c8:	0a1b      	lsrs	r3, r3, #8
 80172ca:	b29b      	uxth	r3, r3
 80172cc:	b2db      	uxtb	r3, r3
 80172ce:	4619      	mov	r1, r3
 80172d0:	20f4      	movs	r0, #244	; 0xf4
 80172d2:	f000 f928 	bl	8017526 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 80172d6:	89fb      	ldrh	r3, [r7, #14]
 80172d8:	b2db      	uxtb	r3, r3
 80172da:	4619      	mov	r1, r3
 80172dc:	20f5      	movs	r0, #245	; 0xf5
 80172de:	f000 f922 	bl	8017526 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80172e2:	78fb      	ldrb	r3, [r7, #3]
 80172e4:	3301      	adds	r3, #1
 80172e6:	b2db      	uxtb	r3, r3
 80172e8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80172ec:	4619      	mov	r1, r3
 80172ee:	480c      	ldr	r0, [pc, #48]	; (8017320 <RadioSend+0x1f8>)
 80172f0:	f001 f8c2 	bl	8018478 <SUBGRF_SendPayload>
            break;
 80172f4:	e000      	b.n	80172f8 <RadioSend+0x1d0>
        }
        default:
            break;
 80172f6:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80172f8:	4b06      	ldr	r3, [pc, #24]	; (8017314 <RadioSend+0x1ec>)
 80172fa:	685b      	ldr	r3, [r3, #4]
 80172fc:	4619      	mov	r1, r3
 80172fe:	4809      	ldr	r0, [pc, #36]	; (8017324 <RadioSend+0x1fc>)
 8017300:	f003 f81a 	bl	801a338 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017304:	4807      	ldr	r0, [pc, #28]	; (8017324 <RadioSend+0x1fc>)
 8017306:	f002 ff39 	bl	801a17c <UTIL_TIMER_Start>
}
 801730a:	3710      	adds	r7, #16
 801730c:	46bd      	mov	sp, r7
 801730e:	bd80      	pop	{r7, pc}
 8017310:	48000400 	.word	0x48000400
 8017314:	200017c0 	.word	0x200017c0
 8017318:	200017ce 	.word	0x200017ce
 801731c:	0801b4d0 	.word	0x0801b4d0
 8017320:	20000de0 	.word	0x20000de0
 8017324:	20001818 	.word	0x20001818

08017328 <RadioSleep>:

static void RadioSleep( void )
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b082      	sub	sp, #8
 801732c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801732e:	2300      	movs	r3, #0
 8017330:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8017332:	793b      	ldrb	r3, [r7, #4]
 8017334:	f043 0304 	orr.w	r3, r3, #4
 8017338:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801733a:	7938      	ldrb	r0, [r7, #4]
 801733c:	f001 f978 	bl	8018630 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017340:	2002      	movs	r0, #2
 8017342:	f7ea fe32 	bl	8001faa <HAL_Delay>
}
 8017346:	bf00      	nop
 8017348:	3708      	adds	r7, #8
 801734a:	46bd      	mov	sp, r7
 801734c:	bd80      	pop	{r7, pc}

0801734e <RadioStandby>:

static void RadioStandby( void )
{
 801734e:	b580      	push	{r7, lr}
 8017350:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8017352:	2000      	movs	r0, #0
 8017354:	f001 f99e 	bl	8018694 <SUBGRF_SetStandby>
}
 8017358:	bf00      	nop
 801735a:	bd80      	pop	{r7, pc}

0801735c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b082      	sub	sp, #8
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8017364:	f002 f983 	bl	801966e <RFW_Is_Init>
 8017368:	4603      	mov	r3, r0
 801736a:	2b01      	cmp	r3, #1
 801736c:	d102      	bne.n	8017374 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 801736e:	f002 f9a6 	bl	80196be <RFW_ReceiveInit>
 8017372:	e007      	b.n	8017384 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017374:	2300      	movs	r3, #0
 8017376:	2200      	movs	r2, #0
 8017378:	f240 2162 	movw	r1, #610	; 0x262
 801737c:	f240 2062 	movw	r0, #610	; 0x262
 8017380:	f001 fb58 	bl	8018a34 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d006      	beq.n	8017398 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801738a:	6879      	ldr	r1, [r7, #4]
 801738c:	4812      	ldr	r0, [pc, #72]	; (80173d8 <RadioRx+0x7c>)
 801738e:	f002 ffd3 	bl	801a338 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017392:	4811      	ldr	r0, [pc, #68]	; (80173d8 <RadioRx+0x7c>)
 8017394:	f002 fef2 	bl	801a17c <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 8017398:	2101      	movs	r1, #1
 801739a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801739e:	f7ff f8dd 	bl	801655c <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80173a2:	4b0e      	ldr	r3, [pc, #56]	; (80173dc <RadioRx+0x80>)
 80173a4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80173a8:	2100      	movs	r1, #0
 80173aa:	4618      	mov	r0, r3
 80173ac:	f001 ff74 	bl	8019298 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80173b0:	4b0a      	ldr	r3, [pc, #40]	; (80173dc <RadioRx+0x80>)
 80173b2:	785b      	ldrb	r3, [r3, #1]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d004      	beq.n	80173c2 <RadioRx+0x66>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80173b8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80173bc:	f001 f9a6 	bl	801870c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80173c0:	e005      	b.n	80173ce <RadioRx+0x72>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80173c2:	4b06      	ldr	r3, [pc, #24]	; (80173dc <RadioRx+0x80>)
 80173c4:	689b      	ldr	r3, [r3, #8]
 80173c6:	019b      	lsls	r3, r3, #6
 80173c8:	4618      	mov	r0, r3
 80173ca:	f001 f99f 	bl	801870c <SUBGRF_SetRx>
}
 80173ce:	bf00      	nop
 80173d0:	3708      	adds	r7, #8
 80173d2:	46bd      	mov	sp, r7
 80173d4:	bd80      	pop	{r7, pc}
 80173d6:	bf00      	nop
 80173d8:	20001830 	.word	0x20001830
 80173dc:	200017c0 	.word	0x200017c0

080173e0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b082      	sub	sp, #8
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 80173e8:	f002 f941 	bl	801966e <RFW_Is_Init>
 80173ec:	4603      	mov	r3, r0
 80173ee:	2b01      	cmp	r3, #1
 80173f0:	d102      	bne.n	80173f8 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 80173f2:	f002 f964 	bl	80196be <RFW_ReceiveInit>
 80173f6:	e007      	b.n	8017408 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80173f8:	2300      	movs	r3, #0
 80173fa:	2200      	movs	r2, #0
 80173fc:	f240 2162 	movw	r1, #610	; 0x262
 8017400:	f240 2062 	movw	r0, #610	; 0x262
 8017404:	f001 fb16 	bl	8018a34 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d006      	beq.n	801741c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801740e:	6879      	ldr	r1, [r7, #4]
 8017410:	480f      	ldr	r0, [pc, #60]	; (8017450 <RadioRxBoosted+0x70>)
 8017412:	f002 ff91 	bl	801a338 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017416:	480e      	ldr	r0, [pc, #56]	; (8017450 <RadioRxBoosted+0x70>)
 8017418:	f002 feb0 	bl	801a17c <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801741c:	4b0d      	ldr	r3, [pc, #52]	; (8017454 <RadioRxBoosted+0x74>)
 801741e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017422:	2100      	movs	r1, #0
 8017424:	4618      	mov	r0, r3
 8017426:	f001 ff37 	bl	8019298 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801742a:	4b0a      	ldr	r3, [pc, #40]	; (8017454 <RadioRxBoosted+0x74>)
 801742c:	785b      	ldrb	r3, [r3, #1]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d004      	beq.n	801743c <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8017432:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017436:	f001 f989 	bl	801874c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801743a:	e005      	b.n	8017448 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801743c:	4b05      	ldr	r3, [pc, #20]	; (8017454 <RadioRxBoosted+0x74>)
 801743e:	689b      	ldr	r3, [r3, #8]
 8017440:	019b      	lsls	r3, r3, #6
 8017442:	4618      	mov	r0, r3
 8017444:	f001 f982 	bl	801874c <SUBGRF_SetRxBoosted>
}
 8017448:	bf00      	nop
 801744a:	3708      	adds	r7, #8
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}
 8017450:	20001830 	.word	0x20001830
 8017454:	200017c0 	.word	0x200017c0

08017458 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b082      	sub	sp, #8
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
 8017460:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017462:	4b07      	ldr	r3, [pc, #28]	; (8017480 <RadioSetRxDutyCycle+0x28>)
 8017464:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017468:	2100      	movs	r1, #0
 801746a:	4618      	mov	r0, r3
 801746c:	f001 ff14 	bl	8019298 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017470:	6839      	ldr	r1, [r7, #0]
 8017472:	6878      	ldr	r0, [r7, #4]
 8017474:	f001 f98e 	bl	8018794 <SUBGRF_SetRxDutyCycle>
}
 8017478:	bf00      	nop
 801747a:	3708      	adds	r7, #8
 801747c:	46bd      	mov	sp, r7
 801747e:	bd80      	pop	{r7, pc}
 8017480:	200017c0 	.word	0x200017c0

08017484 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017484:	b580      	push	{r7, lr}
 8017486:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017488:	4b09      	ldr	r3, [pc, #36]	; (80174b0 <RadioStartCad+0x2c>)
 801748a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801748e:	2100      	movs	r1, #0
 8017490:	4618      	mov	r0, r3
 8017492:	f001 ff01 	bl	8019298 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017496:	2300      	movs	r3, #0
 8017498:	2200      	movs	r2, #0
 801749a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801749e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80174a2:	f001 fac7 	bl	8018a34 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80174a6:	f001 f9a1 	bl	80187ec <SUBGRF_SetCad>
}
 80174aa:	bf00      	nop
 80174ac:	bd80      	pop	{r7, pc}
 80174ae:	bf00      	nop
 80174b0:	200017c0 	.word	0x200017c0

080174b4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b084      	sub	sp, #16
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
 80174bc:	460b      	mov	r3, r1
 80174be:	70fb      	strb	r3, [r7, #3]
 80174c0:	4613      	mov	r3, r2
 80174c2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80174c4:	883b      	ldrh	r3, [r7, #0]
 80174c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80174ca:	fb02 f303 	mul.w	r3, r2, r3
 80174ce:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80174d0:	6878      	ldr	r0, [r7, #4]
 80174d2:	f001 fb0b 	bl	8018aec <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80174d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80174da:	4618      	mov	r0, r3
 80174dc:	f001 ff04 	bl	80192e8 <SUBGRF_SetRfTxPower>
 80174e0:	4603      	mov	r3, r0
 80174e2:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 80174e4:	7afb      	ldrb	r3, [r7, #11]
 80174e6:	2101      	movs	r1, #1
 80174e8:	4618      	mov	r0, r3
 80174ea:	f001 fed5 	bl	8019298 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80174ee:	f001 f98b 	bl	8018808 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80174f2:	68f9      	ldr	r1, [r7, #12]
 80174f4:	4804      	ldr	r0, [pc, #16]	; (8017508 <RadioSetTxContinuousWave+0x54>)
 80174f6:	f002 ff1f 	bl	801a338 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80174fa:	4803      	ldr	r0, [pc, #12]	; (8017508 <RadioSetTxContinuousWave+0x54>)
 80174fc:	f002 fe3e 	bl	801a17c <UTIL_TIMER_Start>
}
 8017500:	bf00      	nop
 8017502:	3710      	adds	r7, #16
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}
 8017508:	20001818 	.word	0x20001818

0801750c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b082      	sub	sp, #8
 8017510:	af00      	add	r7, sp, #0
 8017512:	4603      	mov	r3, r0
 8017514:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017516:	f001 fd38 	bl	8018f8a <SUBGRF_GetRssiInst>
 801751a:	4603      	mov	r3, r0
 801751c:	b21b      	sxth	r3, r3
}
 801751e:	4618      	mov	r0, r3
 8017520:	3708      	adds	r7, #8
 8017522:	46bd      	mov	sp, r7
 8017524:	bd80      	pop	{r7, pc}

08017526 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017526:	b580      	push	{r7, lr}
 8017528:	b082      	sub	sp, #8
 801752a:	af00      	add	r7, sp, #0
 801752c:	4603      	mov	r3, r0
 801752e:	460a      	mov	r2, r1
 8017530:	80fb      	strh	r3, [r7, #6]
 8017532:	4613      	mov	r3, r2
 8017534:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8017536:	797a      	ldrb	r2, [r7, #5]
 8017538:	88fb      	ldrh	r3, [r7, #6]
 801753a:	4611      	mov	r1, r2
 801753c:	4618      	mov	r0, r3
 801753e:	f001 fdb7 	bl	80190b0 <SUBGRF_WriteRegister>
}
 8017542:	bf00      	nop
 8017544:	3708      	adds	r7, #8
 8017546:	46bd      	mov	sp, r7
 8017548:	bd80      	pop	{r7, pc}

0801754a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801754a:	b580      	push	{r7, lr}
 801754c:	b082      	sub	sp, #8
 801754e:	af00      	add	r7, sp, #0
 8017550:	4603      	mov	r3, r0
 8017552:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8017554:	88fb      	ldrh	r3, [r7, #6]
 8017556:	4618      	mov	r0, r3
 8017558:	f001 fdbe 	bl	80190d8 <SUBGRF_ReadRegister>
 801755c:	4603      	mov	r3, r0
}
 801755e:	4618      	mov	r0, r3
 8017560:	3708      	adds	r7, #8
 8017562:	46bd      	mov	sp, r7
 8017564:	bd80      	pop	{r7, pc}

08017566 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017566:	b580      	push	{r7, lr}
 8017568:	b082      	sub	sp, #8
 801756a:	af00      	add	r7, sp, #0
 801756c:	4603      	mov	r3, r0
 801756e:	6039      	str	r1, [r7, #0]
 8017570:	80fb      	strh	r3, [r7, #6]
 8017572:	4613      	mov	r3, r2
 8017574:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017576:	797b      	ldrb	r3, [r7, #5]
 8017578:	b29a      	uxth	r2, r3
 801757a:	88fb      	ldrh	r3, [r7, #6]
 801757c:	6839      	ldr	r1, [r7, #0]
 801757e:	4618      	mov	r0, r3
 8017580:	f001 fdbe 	bl	8019100 <SUBGRF_WriteRegisters>
}
 8017584:	bf00      	nop
 8017586:	3708      	adds	r7, #8
 8017588:	46bd      	mov	sp, r7
 801758a:	bd80      	pop	{r7, pc}

0801758c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b082      	sub	sp, #8
 8017590:	af00      	add	r7, sp, #0
 8017592:	4603      	mov	r3, r0
 8017594:	6039      	str	r1, [r7, #0]
 8017596:	80fb      	strh	r3, [r7, #6]
 8017598:	4613      	mov	r3, r2
 801759a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801759c:	797b      	ldrb	r3, [r7, #5]
 801759e:	b29a      	uxth	r2, r3
 80175a0:	88fb      	ldrh	r3, [r7, #6]
 80175a2:	6839      	ldr	r1, [r7, #0]
 80175a4:	4618      	mov	r0, r3
 80175a6:	f001 fdcd 	bl	8019144 <SUBGRF_ReadRegisters>
}
 80175aa:	bf00      	nop
 80175ac:	3708      	adds	r7, #8
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}
	...

080175b4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b082      	sub	sp, #8
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	4603      	mov	r3, r0
 80175bc:	460a      	mov	r2, r1
 80175be:	71fb      	strb	r3, [r7, #7]
 80175c0:	4613      	mov	r3, r2
 80175c2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80175c4:	79fb      	ldrb	r3, [r7, #7]
 80175c6:	2b01      	cmp	r3, #1
 80175c8:	d10a      	bne.n	80175e0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80175ca:	4a0e      	ldr	r2, [pc, #56]	; (8017604 <RadioSetMaxPayloadLength+0x50>)
 80175cc:	79bb      	ldrb	r3, [r7, #6]
 80175ce:	7013      	strb	r3, [r2, #0]
 80175d0:	4b0c      	ldr	r3, [pc, #48]	; (8017604 <RadioSetMaxPayloadLength+0x50>)
 80175d2:	781a      	ldrb	r2, [r3, #0]
 80175d4:	4b0c      	ldr	r3, [pc, #48]	; (8017608 <RadioSetMaxPayloadLength+0x54>)
 80175d6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80175d8:	480c      	ldr	r0, [pc, #48]	; (801760c <RadioSetMaxPayloadLength+0x58>)
 80175da:	f001 fc21 	bl	8018e20 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80175de:	e00d      	b.n	80175fc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80175e0:	4b09      	ldr	r3, [pc, #36]	; (8017608 <RadioSetMaxPayloadLength+0x54>)
 80175e2:	7d5b      	ldrb	r3, [r3, #21]
 80175e4:	2b01      	cmp	r3, #1
 80175e6:	d109      	bne.n	80175fc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80175e8:	4a06      	ldr	r2, [pc, #24]	; (8017604 <RadioSetMaxPayloadLength+0x50>)
 80175ea:	79bb      	ldrb	r3, [r7, #6]
 80175ec:	7013      	strb	r3, [r2, #0]
 80175ee:	4b05      	ldr	r3, [pc, #20]	; (8017604 <RadioSetMaxPayloadLength+0x50>)
 80175f0:	781a      	ldrb	r2, [r3, #0]
 80175f2:	4b05      	ldr	r3, [pc, #20]	; (8017608 <RadioSetMaxPayloadLength+0x54>)
 80175f4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80175f6:	4805      	ldr	r0, [pc, #20]	; (801760c <RadioSetMaxPayloadLength+0x58>)
 80175f8:	f001 fc12 	bl	8018e20 <SUBGRF_SetPacketParams>
}
 80175fc:	bf00      	nop
 80175fe:	3708      	adds	r7, #8
 8017600:	46bd      	mov	sp, r7
 8017602:	bd80      	pop	{r7, pc}
 8017604:	20000120 	.word	0x20000120
 8017608:	200017c0 	.word	0x200017c0
 801760c:	200017ce 	.word	0x200017ce

08017610 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b082      	sub	sp, #8
 8017614:	af00      	add	r7, sp, #0
 8017616:	4603      	mov	r3, r0
 8017618:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801761a:	4a13      	ldr	r2, [pc, #76]	; (8017668 <RadioSetPublicNetwork+0x58>)
 801761c:	79fb      	ldrb	r3, [r7, #7]
 801761e:	7313      	strb	r3, [r2, #12]
 8017620:	4b11      	ldr	r3, [pc, #68]	; (8017668 <RadioSetPublicNetwork+0x58>)
 8017622:	7b1a      	ldrb	r2, [r3, #12]
 8017624:	4b10      	ldr	r3, [pc, #64]	; (8017668 <RadioSetPublicNetwork+0x58>)
 8017626:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017628:	2001      	movs	r0, #1
 801762a:	f7ff f81f 	bl	801666c <RadioSetModem>
    if( enable == true )
 801762e:	79fb      	ldrb	r3, [r7, #7]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d00a      	beq.n	801764a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017634:	2134      	movs	r1, #52	; 0x34
 8017636:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801763a:	f001 fd39 	bl	80190b0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801763e:	2144      	movs	r1, #68	; 0x44
 8017640:	f240 7041 	movw	r0, #1857	; 0x741
 8017644:	f001 fd34 	bl	80190b0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017648:	e009      	b.n	801765e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801764a:	2114      	movs	r1, #20
 801764c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017650:	f001 fd2e 	bl	80190b0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017654:	2124      	movs	r1, #36	; 0x24
 8017656:	f240 7041 	movw	r0, #1857	; 0x741
 801765a:	f001 fd29 	bl	80190b0 <SUBGRF_WriteRegister>
}
 801765e:	bf00      	nop
 8017660:	3708      	adds	r7, #8
 8017662:	46bd      	mov	sp, r7
 8017664:	bd80      	pop	{r7, pc}
 8017666:	bf00      	nop
 8017668:	200017c0 	.word	0x200017c0

0801766c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801766c:	b580      	push	{r7, lr}
 801766e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017670:	f001 fe6e 	bl	8019350 <SUBGRF_GetRadioWakeUpTime>
 8017674:	4603      	mov	r3, r0
 8017676:	3303      	adds	r3, #3
}
 8017678:	4618      	mov	r0, r3
 801767a:	bd80      	pop	{r7, pc}

0801767c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b082      	sub	sp, #8
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017684:	f000 f80e 	bl	80176a4 <RadioOnTxTimeoutProcess>
}
 8017688:	bf00      	nop
 801768a:	3708      	adds	r7, #8
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}

08017690 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b082      	sub	sp, #8
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017698:	f000 f81e 	bl	80176d8 <RadioOnRxTimeoutProcess>
}
 801769c:	bf00      	nop
 801769e:	3708      	adds	r7, #8
 80176a0:	46bd      	mov	sp, r7
 80176a2:	bd80      	pop	{r7, pc}

080176a4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 80176a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80176ac:	4808      	ldr	r0, [pc, #32]	; (80176d0 <RadioOnTxTimeoutProcess+0x2c>)
 80176ae:	f7fe ff62 	bl	8016576 <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80176b2:	4b08      	ldr	r3, [pc, #32]	; (80176d4 <RadioOnTxTimeoutProcess+0x30>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d008      	beq.n	80176cc <RadioOnTxTimeoutProcess+0x28>
 80176ba:	4b06      	ldr	r3, [pc, #24]	; (80176d4 <RadioOnTxTimeoutProcess+0x30>)
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	685b      	ldr	r3, [r3, #4]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d003      	beq.n	80176cc <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 80176c4:	4b03      	ldr	r3, [pc, #12]	; (80176d4 <RadioOnTxTimeoutProcess+0x30>)
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	685b      	ldr	r3, [r3, #4]
 80176ca:	4798      	blx	r3
    }
}
 80176cc:	bf00      	nop
 80176ce:	bd80      	pop	{r7, pc}
 80176d0:	48000400 	.word	0x48000400
 80176d4:	20000ee0 	.word	0x20000ee0

080176d8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 80176dc:	2101      	movs	r1, #1
 80176de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80176e2:	f7fe ff48 	bl	8016576 <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80176e6:	4b07      	ldr	r3, [pc, #28]	; (8017704 <RadioOnRxTimeoutProcess+0x2c>)
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d008      	beq.n	8017700 <RadioOnRxTimeoutProcess+0x28>
 80176ee:	4b05      	ldr	r3, [pc, #20]	; (8017704 <RadioOnRxTimeoutProcess+0x2c>)
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	68db      	ldr	r3, [r3, #12]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d003      	beq.n	8017700 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 80176f8:	4b02      	ldr	r3, [pc, #8]	; (8017704 <RadioOnRxTimeoutProcess+0x2c>)
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	68db      	ldr	r3, [r3, #12]
 80176fe:	4798      	blx	r3
    }
}
 8017700:	bf00      	nop
 8017702:	bd80      	pop	{r7, pc}
 8017704:	20000ee0 	.word	0x20000ee0

08017708 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b082      	sub	sp, #8
 801770c:	af00      	add	r7, sp, #0
 801770e:	4603      	mov	r3, r0
 8017710:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017712:	4a05      	ldr	r2, [pc, #20]	; (8017728 <RadioOnDioIrq+0x20>)
 8017714:	88fb      	ldrh	r3, [r7, #6]
 8017716:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801771a:	f000 f807 	bl	801772c <RadioIrqProcess>
}
 801771e:	bf00      	nop
 8017720:	3708      	adds	r7, #8
 8017722:	46bd      	mov	sp, r7
 8017724:	bd80      	pop	{r7, pc}
 8017726:	bf00      	nop
 8017728:	200017c0 	.word	0x200017c0

0801772c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801772c:	b590      	push	{r4, r7, lr}
 801772e:	b083      	sub	sp, #12
 8017730:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8017732:	2300      	movs	r3, #0
 8017734:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017736:	2300      	movs	r3, #0
 8017738:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 801773a:	4bbf      	ldr	r3, [pc, #764]	; (8017a38 <RadioIrqProcess+0x30c>)
 801773c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017744:	f000 8116 	beq.w	8017974 <RadioIrqProcess+0x248>
 8017748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801774c:	f300 81cb 	bgt.w	8017ae6 <RadioIrqProcess+0x3ba>
 8017750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017754:	f000 80fa 	beq.w	801794c <RadioIrqProcess+0x220>
 8017758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801775c:	f300 81c3 	bgt.w	8017ae6 <RadioIrqProcess+0x3ba>
 8017760:	2b80      	cmp	r3, #128	; 0x80
 8017762:	f000 80df 	beq.w	8017924 <RadioIrqProcess+0x1f8>
 8017766:	2b80      	cmp	r3, #128	; 0x80
 8017768:	f300 81bd 	bgt.w	8017ae6 <RadioIrqProcess+0x3ba>
 801776c:	2b20      	cmp	r3, #32
 801776e:	dc49      	bgt.n	8017804 <RadioIrqProcess+0xd8>
 8017770:	2b00      	cmp	r3, #0
 8017772:	f340 81b8 	ble.w	8017ae6 <RadioIrqProcess+0x3ba>
 8017776:	3b01      	subs	r3, #1
 8017778:	2b1f      	cmp	r3, #31
 801777a:	f200 81b4 	bhi.w	8017ae6 <RadioIrqProcess+0x3ba>
 801777e:	a201      	add	r2, pc, #4	; (adr r2, 8017784 <RadioIrqProcess+0x58>)
 8017780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017784:	0801780d 	.word	0x0801780d
 8017788:	08017851 	.word	0x08017851
 801778c:	08017ae7 	.word	0x08017ae7
 8017790:	08017a01 	.word	0x08017a01
 8017794:	08017ae7 	.word	0x08017ae7
 8017798:	08017ae7 	.word	0x08017ae7
 801779c:	08017ae7 	.word	0x08017ae7
 80177a0:	08017a0f 	.word	0x08017a0f
 80177a4:	08017ae7 	.word	0x08017ae7
 80177a8:	08017ae7 	.word	0x08017ae7
 80177ac:	08017ae7 	.word	0x08017ae7
 80177b0:	08017ae7 	.word	0x08017ae7
 80177b4:	08017ae7 	.word	0x08017ae7
 80177b8:	08017ae7 	.word	0x08017ae7
 80177bc:	08017ae7 	.word	0x08017ae7
 80177c0:	08017a2b 	.word	0x08017a2b
 80177c4:	08017ae7 	.word	0x08017ae7
 80177c8:	08017ae7 	.word	0x08017ae7
 80177cc:	08017ae7 	.word	0x08017ae7
 80177d0:	08017ae7 	.word	0x08017ae7
 80177d4:	08017ae7 	.word	0x08017ae7
 80177d8:	08017ae7 	.word	0x08017ae7
 80177dc:	08017ae7 	.word	0x08017ae7
 80177e0:	08017ae7 	.word	0x08017ae7
 80177e4:	08017ae7 	.word	0x08017ae7
 80177e8:	08017ae7 	.word	0x08017ae7
 80177ec:	08017ae7 	.word	0x08017ae7
 80177f0:	08017ae7 	.word	0x08017ae7
 80177f4:	08017ae7 	.word	0x08017ae7
 80177f8:	08017ae7 	.word	0x08017ae7
 80177fc:	08017ae7 	.word	0x08017ae7
 8017800:	08017a69 	.word	0x08017a69
 8017804:	2b40      	cmp	r3, #64	; 0x40
 8017806:	f000 8150 	beq.w	8017aaa <RadioIrqProcess+0x37e>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801780a:	e16c      	b.n	8017ae6 <RadioIrqProcess+0x3ba>
        DBG_GPIO_RADIO_TX(RST);
 801780c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017810:	488a      	ldr	r0, [pc, #552]	; (8017a3c <RadioIrqProcess+0x310>)
 8017812:	f7fe feb0 	bl	8016576 <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 8017816:	488a      	ldr	r0, [pc, #552]	; (8017a40 <RadioIrqProcess+0x314>)
 8017818:	f002 fd1e 	bl	801a258 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801781c:	2000      	movs	r0, #0
 801781e:	f000 ff39 	bl	8018694 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8017822:	f001 ff2b 	bl	801967c <RFW_Is_LongPacketModeEnabled>
 8017826:	4603      	mov	r3, r0
 8017828:	2b01      	cmp	r3, #1
 801782a:	d101      	bne.n	8017830 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 801782c:	f001 ff4f 	bl	80196ce <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017830:	4b84      	ldr	r3, [pc, #528]	; (8017a44 <RadioIrqProcess+0x318>)
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	2b00      	cmp	r3, #0
 8017836:	f000 8158 	beq.w	8017aea <RadioIrqProcess+0x3be>
 801783a:	4b82      	ldr	r3, [pc, #520]	; (8017a44 <RadioIrqProcess+0x318>)
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	2b00      	cmp	r3, #0
 8017842:	f000 8152 	beq.w	8017aea <RadioIrqProcess+0x3be>
            RadioEvents->TxDone( );
 8017846:	4b7f      	ldr	r3, [pc, #508]	; (8017a44 <RadioIrqProcess+0x318>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	4798      	blx	r3
        break;
 801784e:	e14c      	b.n	8017aea <RadioIrqProcess+0x3be>
        DBG_GPIO_RADIO_RX(RST);
 8017850:	2101      	movs	r1, #1
 8017852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017856:	f7fe fe8e 	bl	8016576 <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 801785a:	487b      	ldr	r0, [pc, #492]	; (8017a48 <RadioIrqProcess+0x31c>)
 801785c:	f002 fcfc 	bl	801a258 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017860:	4b75      	ldr	r3, [pc, #468]	; (8017a38 <RadioIrqProcess+0x30c>)
 8017862:	785b      	ldrb	r3, [r3, #1]
 8017864:	f083 0301 	eor.w	r3, r3, #1
 8017868:	b2db      	uxtb	r3, r3
 801786a:	2b00      	cmp	r3, #0
 801786c:	d014      	beq.n	8017898 <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 801786e:	2000      	movs	r0, #0
 8017870:	f000 ff10 	bl	8018694 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8017874:	2100      	movs	r1, #0
 8017876:	f640 1002 	movw	r0, #2306	; 0x902
 801787a:	f001 fc19 	bl	80190b0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 801787e:	f640 1044 	movw	r0, #2372	; 0x944
 8017882:	f001 fc29 	bl	80190d8 <SUBGRF_ReadRegister>
 8017886:	4603      	mov	r3, r0
 8017888:	f043 0302 	orr.w	r3, r3, #2
 801788c:	b2db      	uxtb	r3, r3
 801788e:	4619      	mov	r1, r3
 8017890:	f640 1044 	movw	r0, #2372	; 0x944
 8017894:	f001 fc0c 	bl	80190b0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8017898:	1dfb      	adds	r3, r7, #7
 801789a:	22ff      	movs	r2, #255	; 0xff
 801789c:	4619      	mov	r1, r3
 801789e:	486b      	ldr	r0, [pc, #428]	; (8017a4c <RadioIrqProcess+0x320>)
 80178a0:	f000 fdc8 	bl	8018434 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 80178a4:	486a      	ldr	r0, [pc, #424]	; (8017a50 <RadioIrqProcess+0x324>)
 80178a6:	f001 fbb1 	bl	801900c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80178aa:	4b66      	ldr	r3, [pc, #408]	; (8017a44 <RadioIrqProcess+0x318>)
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d036      	beq.n	8017920 <RadioIrqProcess+0x1f4>
 80178b2:	4b64      	ldr	r3, [pc, #400]	; (8017a44 <RadioIrqProcess+0x318>)
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	689b      	ldr	r3, [r3, #8]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d031      	beq.n	8017920 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 80178bc:	4b5e      	ldr	r3, [pc, #376]	; (8017a38 <RadioIrqProcess+0x30c>)
 80178be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80178c2:	2b01      	cmp	r3, #1
 80178c4:	d10e      	bne.n	80178e4 <RadioIrqProcess+0x1b8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80178c6:	4b5f      	ldr	r3, [pc, #380]	; (8017a44 <RadioIrqProcess+0x318>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	689c      	ldr	r4, [r3, #8]
 80178cc:	79fb      	ldrb	r3, [r7, #7]
 80178ce:	b299      	uxth	r1, r3
 80178d0:	4b59      	ldr	r3, [pc, #356]	; (8017a38 <RadioIrqProcess+0x30c>)
 80178d2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80178d6:	b21a      	sxth	r2, r3
 80178d8:	4b57      	ldr	r3, [pc, #348]	; (8017a38 <RadioIrqProcess+0x30c>)
 80178da:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80178de:	485b      	ldr	r0, [pc, #364]	; (8017a4c <RadioIrqProcess+0x320>)
 80178e0:	47a0      	blx	r4
                break;
 80178e2:	e01e      	b.n	8017922 <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80178e4:	4b54      	ldr	r3, [pc, #336]	; (8017a38 <RadioIrqProcess+0x30c>)
 80178e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178e8:	463a      	mov	r2, r7
 80178ea:	4611      	mov	r1, r2
 80178ec:	4618      	mov	r0, r3
 80178ee:	f001 fe11 	bl	8019514 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80178f2:	4b54      	ldr	r3, [pc, #336]	; (8017a44 <RadioIrqProcess+0x318>)
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	689c      	ldr	r4, [r3, #8]
 80178f8:	79fb      	ldrb	r3, [r7, #7]
 80178fa:	b299      	uxth	r1, r3
 80178fc:	4b4e      	ldr	r3, [pc, #312]	; (8017a38 <RadioIrqProcess+0x30c>)
 80178fe:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8017902:	b218      	sxth	r0, r3
 8017904:	683b      	ldr	r3, [r7, #0]
 8017906:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801790a:	4a52      	ldr	r2, [pc, #328]	; (8017a54 <RadioIrqProcess+0x328>)
 801790c:	fb82 c203 	smull	ip, r2, r2, r3
 8017910:	1192      	asrs	r2, r2, #6
 8017912:	17db      	asrs	r3, r3, #31
 8017914:	1ad3      	subs	r3, r2, r3
 8017916:	b25b      	sxtb	r3, r3
 8017918:	4602      	mov	r2, r0
 801791a:	484c      	ldr	r0, [pc, #304]	; (8017a4c <RadioIrqProcess+0x320>)
 801791c:	47a0      	blx	r4
                break;
 801791e:	e000      	b.n	8017922 <RadioIrqProcess+0x1f6>
        }
 8017920:	bf00      	nop
        break;
 8017922:	e0ef      	b.n	8017b04 <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 8017924:	2000      	movs	r0, #0
 8017926:	f000 feb5 	bl	8018694 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801792a:	4b46      	ldr	r3, [pc, #280]	; (8017a44 <RadioIrqProcess+0x318>)
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	2b00      	cmp	r3, #0
 8017930:	f000 80dd 	beq.w	8017aee <RadioIrqProcess+0x3c2>
 8017934:	4b43      	ldr	r3, [pc, #268]	; (8017a44 <RadioIrqProcess+0x318>)
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	699b      	ldr	r3, [r3, #24]
 801793a:	2b00      	cmp	r3, #0
 801793c:	f000 80d7 	beq.w	8017aee <RadioIrqProcess+0x3c2>
            RadioEvents->CadDone( false );
 8017940:	4b40      	ldr	r3, [pc, #256]	; (8017a44 <RadioIrqProcess+0x318>)
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	699b      	ldr	r3, [r3, #24]
 8017946:	2000      	movs	r0, #0
 8017948:	4798      	blx	r3
        break;
 801794a:	e0d0      	b.n	8017aee <RadioIrqProcess+0x3c2>
        SUBGRF_SetStandby( STDBY_RC );
 801794c:	2000      	movs	r0, #0
 801794e:	f000 fea1 	bl	8018694 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017952:	4b3c      	ldr	r3, [pc, #240]	; (8017a44 <RadioIrqProcess+0x318>)
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	2b00      	cmp	r3, #0
 8017958:	f000 80cb 	beq.w	8017af2 <RadioIrqProcess+0x3c6>
 801795c:	4b39      	ldr	r3, [pc, #228]	; (8017a44 <RadioIrqProcess+0x318>)
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	699b      	ldr	r3, [r3, #24]
 8017962:	2b00      	cmp	r3, #0
 8017964:	f000 80c5 	beq.w	8017af2 <RadioIrqProcess+0x3c6>
            RadioEvents->CadDone( true );
 8017968:	4b36      	ldr	r3, [pc, #216]	; (8017a44 <RadioIrqProcess+0x318>)
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	699b      	ldr	r3, [r3, #24]
 801796e:	2001      	movs	r0, #1
 8017970:	4798      	blx	r3
        break;
 8017972:	e0be      	b.n	8017af2 <RadioIrqProcess+0x3c6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017974:	4b38      	ldr	r3, [pc, #224]	; (8017a58 <RadioIrqProcess+0x32c>)
 8017976:	2201      	movs	r2, #1
 8017978:	2100      	movs	r1, #0
 801797a:	2002      	movs	r0, #2
 801797c:	f002 fe76 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017980:	f000 fd3e 	bl	8018400 <SUBGRF_GetOperatingMode>
 8017984:	4603      	mov	r3, r0
 8017986:	2b04      	cmp	r3, #4
 8017988:	d11a      	bne.n	80179c0 <RadioIrqProcess+0x294>
            DBG_GPIO_RADIO_TX(RST);
 801798a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801798e:	482b      	ldr	r0, [pc, #172]	; (8017a3c <RadioIrqProcess+0x310>)
 8017990:	f7fe fdf1 	bl	8016576 <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8017994:	482a      	ldr	r0, [pc, #168]	; (8017a40 <RadioIrqProcess+0x314>)
 8017996:	f002 fc5f 	bl	801a258 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801799a:	2000      	movs	r0, #0
 801799c:	f000 fe7a 	bl	8018694 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80179a0:	4b28      	ldr	r3, [pc, #160]	; (8017a44 <RadioIrqProcess+0x318>)
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	f000 80a6 	beq.w	8017af6 <RadioIrqProcess+0x3ca>
 80179aa:	4b26      	ldr	r3, [pc, #152]	; (8017a44 <RadioIrqProcess+0x318>)
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	685b      	ldr	r3, [r3, #4]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	f000 80a0 	beq.w	8017af6 <RadioIrqProcess+0x3ca>
                RadioEvents->TxTimeout( );
 80179b6:	4b23      	ldr	r3, [pc, #140]	; (8017a44 <RadioIrqProcess+0x318>)
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	685b      	ldr	r3, [r3, #4]
 80179bc:	4798      	blx	r3
        break;
 80179be:	e09a      	b.n	8017af6 <RadioIrqProcess+0x3ca>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80179c0:	f000 fd1e 	bl	8018400 <SUBGRF_GetOperatingMode>
 80179c4:	4603      	mov	r3, r0
 80179c6:	2b05      	cmp	r3, #5
 80179c8:	f040 8095 	bne.w	8017af6 <RadioIrqProcess+0x3ca>
            DBG_GPIO_RADIO_RX(RST);
 80179cc:	2101      	movs	r1, #1
 80179ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80179d2:	f7fe fdd0 	bl	8016576 <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 80179d6:	481c      	ldr	r0, [pc, #112]	; (8017a48 <RadioIrqProcess+0x31c>)
 80179d8:	f002 fc3e 	bl	801a258 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80179dc:	2000      	movs	r0, #0
 80179de:	f000 fe59 	bl	8018694 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80179e2:	4b18      	ldr	r3, [pc, #96]	; (8017a44 <RadioIrqProcess+0x318>)
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	f000 8085 	beq.w	8017af6 <RadioIrqProcess+0x3ca>
 80179ec:	4b15      	ldr	r3, [pc, #84]	; (8017a44 <RadioIrqProcess+0x318>)
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	68db      	ldr	r3, [r3, #12]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d07f      	beq.n	8017af6 <RadioIrqProcess+0x3ca>
                RadioEvents->RxTimeout( );
 80179f6:	4b13      	ldr	r3, [pc, #76]	; (8017a44 <RadioIrqProcess+0x318>)
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	68db      	ldr	r3, [r3, #12]
 80179fc:	4798      	blx	r3
        break;
 80179fe:	e07a      	b.n	8017af6 <RadioIrqProcess+0x3ca>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017a00:	4b16      	ldr	r3, [pc, #88]	; (8017a5c <RadioIrqProcess+0x330>)
 8017a02:	2201      	movs	r2, #1
 8017a04:	2100      	movs	r1, #0
 8017a06:	2002      	movs	r0, #2
 8017a08:	f002 fe30 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017a0c:	e07a      	b.n	8017b04 <RadioIrqProcess+0x3d8>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017a0e:	4b14      	ldr	r3, [pc, #80]	; (8017a60 <RadioIrqProcess+0x334>)
 8017a10:	2201      	movs	r2, #1
 8017a12:	2100      	movs	r1, #0
 8017a14:	2002      	movs	r0, #2
 8017a16:	f002 fe29 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 8017a1a:	f001 fe28 	bl	801966e <RFW_Is_Init>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	2b01      	cmp	r3, #1
 8017a22:	d16a      	bne.n	8017afa <RadioIrqProcess+0x3ce>
            RFW_ReceivePayload( );
 8017a24:	f001 fe59 	bl	80196da <RFW_ReceivePayload>
        break;
 8017a28:	e067      	b.n	8017afa <RadioIrqProcess+0x3ce>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8017a2a:	4b0e      	ldr	r3, [pc, #56]	; (8017a64 <RadioIrqProcess+0x338>)
 8017a2c:	2201      	movs	r2, #1
 8017a2e:	2100      	movs	r1, #0
 8017a30:	2002      	movs	r0, #2
 8017a32:	f002 fe1b 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017a36:	e065      	b.n	8017b04 <RadioIrqProcess+0x3d8>
 8017a38:	200017c0 	.word	0x200017c0
 8017a3c:	48000400 	.word	0x48000400
 8017a40:	20001818 	.word	0x20001818
 8017a44:	20000ee0 	.word	0x20000ee0
 8017a48:	20001830 	.word	0x20001830
 8017a4c:	20000de0 	.word	0x20000de0
 8017a50:	200017e4 	.word	0x200017e4
 8017a54:	10624dd3 	.word	0x10624dd3
 8017a58:	0801b4e8 	.word	0x0801b4e8
 8017a5c:	0801b4fc 	.word	0x0801b4fc
 8017a60:	0801b508 	.word	0x0801b508
 8017a64:	0801b514 	.word	0x0801b514
        TimerStop( &RxTimeoutTimer );
 8017a68:	4828      	ldr	r0, [pc, #160]	; (8017b0c <RadioIrqProcess+0x3e0>)
 8017a6a:	f002 fbf5 	bl	801a258 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017a6e:	4b28      	ldr	r3, [pc, #160]	; (8017b10 <RadioIrqProcess+0x3e4>)
 8017a70:	785b      	ldrb	r3, [r3, #1]
 8017a72:	f083 0301 	eor.w	r3, r3, #1
 8017a76:	b2db      	uxtb	r3, r3
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d002      	beq.n	8017a82 <RadioIrqProcess+0x356>
            SUBGRF_SetStandby( STDBY_RC );
 8017a7c:	2000      	movs	r0, #0
 8017a7e:	f000 fe09 	bl	8018694 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017a82:	4b24      	ldr	r3, [pc, #144]	; (8017b14 <RadioIrqProcess+0x3e8>)
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d039      	beq.n	8017afe <RadioIrqProcess+0x3d2>
 8017a8a:	4b22      	ldr	r3, [pc, #136]	; (8017b14 <RadioIrqProcess+0x3e8>)
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	68db      	ldr	r3, [r3, #12]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d034      	beq.n	8017afe <RadioIrqProcess+0x3d2>
            RadioEvents->RxTimeout( );
 8017a94:	4b1f      	ldr	r3, [pc, #124]	; (8017b14 <RadioIrqProcess+0x3e8>)
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	68db      	ldr	r3, [r3, #12]
 8017a9a:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017a9c:	4b1e      	ldr	r3, [pc, #120]	; (8017b18 <RadioIrqProcess+0x3ec>)
 8017a9e:	2201      	movs	r2, #1
 8017aa0:	2100      	movs	r1, #0
 8017aa2:	2002      	movs	r0, #2
 8017aa4:	f002 fde2 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017aa8:	e029      	b.n	8017afe <RadioIrqProcess+0x3d2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017aaa:	4b1c      	ldr	r3, [pc, #112]	; (8017b1c <RadioIrqProcess+0x3f0>)
 8017aac:	2201      	movs	r2, #1
 8017aae:	2100      	movs	r1, #0
 8017ab0:	2002      	movs	r0, #2
 8017ab2:	f002 fddb 	bl	801a66c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017ab6:	4b16      	ldr	r3, [pc, #88]	; (8017b10 <RadioIrqProcess+0x3e4>)
 8017ab8:	785b      	ldrb	r3, [r3, #1]
 8017aba:	f083 0301 	eor.w	r3, r3, #1
 8017abe:	b2db      	uxtb	r3, r3
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d002      	beq.n	8017aca <RadioIrqProcess+0x39e>
            SUBGRF_SetStandby( STDBY_RC );
 8017ac4:	2000      	movs	r0, #0
 8017ac6:	f000 fde5 	bl	8018694 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017aca:	4b12      	ldr	r3, [pc, #72]	; (8017b14 <RadioIrqProcess+0x3e8>)
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d017      	beq.n	8017b02 <RadioIrqProcess+0x3d6>
 8017ad2:	4b10      	ldr	r3, [pc, #64]	; (8017b14 <RadioIrqProcess+0x3e8>)
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	691b      	ldr	r3, [r3, #16]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d012      	beq.n	8017b02 <RadioIrqProcess+0x3d6>
            RadioEvents->RxError( );
 8017adc:	4b0d      	ldr	r3, [pc, #52]	; (8017b14 <RadioIrqProcess+0x3e8>)
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	691b      	ldr	r3, [r3, #16]
 8017ae2:	4798      	blx	r3
        break;
 8017ae4:	e00d      	b.n	8017b02 <RadioIrqProcess+0x3d6>
        break;
 8017ae6:	bf00      	nop
 8017ae8:	e00c      	b.n	8017b04 <RadioIrqProcess+0x3d8>
        break;
 8017aea:	bf00      	nop
 8017aec:	e00a      	b.n	8017b04 <RadioIrqProcess+0x3d8>
        break;
 8017aee:	bf00      	nop
 8017af0:	e008      	b.n	8017b04 <RadioIrqProcess+0x3d8>
        break;
 8017af2:	bf00      	nop
 8017af4:	e006      	b.n	8017b04 <RadioIrqProcess+0x3d8>
        break;
 8017af6:	bf00      	nop
 8017af8:	e004      	b.n	8017b04 <RadioIrqProcess+0x3d8>
        break;
 8017afa:	bf00      	nop
 8017afc:	e002      	b.n	8017b04 <RadioIrqProcess+0x3d8>
        break;
 8017afe:	bf00      	nop
 8017b00:	e000      	b.n	8017b04 <RadioIrqProcess+0x3d8>
        break;
 8017b02:	bf00      	nop
  }
}
 8017b04:	bf00      	nop
 8017b06:	370c      	adds	r7, #12
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	bd90      	pop	{r4, r7, pc}
 8017b0c:	20001830 	.word	0x20001830
 8017b10:	200017c0 	.word	0x200017c0
 8017b14:	20000ee0 	.word	0x20000ee0
 8017b18:	0801b520 	.word	0x0801b520
 8017b1c:	0801b52c 	.word	0x0801b52c

08017b20 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017b24:	4b09      	ldr	r3, [pc, #36]	; (8017b4c <RadioTxPrbs+0x2c>)
 8017b26:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017b2a:	2101      	movs	r1, #1
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f001 fbb3 	bl	8019298 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8017b32:	4b07      	ldr	r3, [pc, #28]	; (8017b50 <RadioTxPrbs+0x30>)
 8017b34:	212d      	movs	r1, #45	; 0x2d
 8017b36:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017b3a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017b3c:	f000 fe6d 	bl	801881a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017b40:	4804      	ldr	r0, [pc, #16]	; (8017b54 <RadioTxPrbs+0x34>)
 8017b42:	f000 fdc3 	bl	80186cc <SUBGRF_SetTx>
}
 8017b46:	bf00      	nop
 8017b48:	bd80      	pop	{r7, pc}
 8017b4a:	bf00      	nop
 8017b4c:	200017c0 	.word	0x200017c0
 8017b50:	08017527 	.word	0x08017527
 8017b54:	000fffff 	.word	0x000fffff

08017b58 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017b58:	b580      	push	{r7, lr}
 8017b5a:	b084      	sub	sp, #16
 8017b5c:	af00      	add	r7, sp, #0
 8017b5e:	4603      	mov	r3, r0
 8017b60:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b66:	4618      	mov	r0, r3
 8017b68:	f001 fbbe 	bl	80192e8 <SUBGRF_SetRfTxPower>
 8017b6c:	4603      	mov	r3, r0
 8017b6e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017b70:	7bfb      	ldrb	r3, [r7, #15]
 8017b72:	2101      	movs	r1, #1
 8017b74:	4618      	mov	r0, r3
 8017b76:	f001 fb8f 	bl	8019298 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017b7a:	f000 fe45 	bl	8018808 <SUBGRF_SetTxContinuousWave>
}
 8017b7e:	bf00      	nop
 8017b80:	3710      	adds	r7, #16
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bd80      	pop	{r7, pc}

08017b86 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017b86:	b480      	push	{r7}
 8017b88:	b089      	sub	sp, #36	; 0x24
 8017b8a:	af00      	add	r7, sp, #0
 8017b8c:	60f8      	str	r0, [r7, #12]
 8017b8e:	60b9      	str	r1, [r7, #8]
 8017b90:	4613      	mov	r3, r2
 8017b92:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017b94:	2300      	movs	r3, #0
 8017b96:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8017b98:	2300      	movs	r3, #0
 8017b9a:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	61bb      	str	r3, [r7, #24]
 8017ba0:	e011      	b.n	8017bc6 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017ba2:	69bb      	ldr	r3, [r7, #24]
 8017ba4:	68ba      	ldr	r2, [r7, #8]
 8017ba6:	4413      	add	r3, r2
 8017ba8:	781a      	ldrb	r2, [r3, #0]
 8017baa:	69bb      	ldr	r3, [r7, #24]
 8017bac:	68b9      	ldr	r1, [r7, #8]
 8017bae:	440b      	add	r3, r1
 8017bb0:	43d2      	mvns	r2, r2
 8017bb2:	b2d2      	uxtb	r2, r2
 8017bb4:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017bb6:	69bb      	ldr	r3, [r7, #24]
 8017bb8:	68fa      	ldr	r2, [r7, #12]
 8017bba:	4413      	add	r3, r2
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8017bc0:	69bb      	ldr	r3, [r7, #24]
 8017bc2:	3301      	adds	r3, #1
 8017bc4:	61bb      	str	r3, [r7, #24]
 8017bc6:	79fb      	ldrb	r3, [r7, #7]
 8017bc8:	69ba      	ldr	r2, [r7, #24]
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	dbe9      	blt.n	8017ba2 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8017bce:	2300      	movs	r3, #0
 8017bd0:	61bb      	str	r3, [r7, #24]
 8017bd2:	e049      	b.n	8017c68 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017bd4:	69bb      	ldr	r3, [r7, #24]
 8017bd6:	425a      	negs	r2, r3
 8017bd8:	f003 0307 	and.w	r3, r3, #7
 8017bdc:	f002 0207 	and.w	r2, r2, #7
 8017be0:	bf58      	it	pl
 8017be2:	4253      	negpl	r3, r2
 8017be4:	b2db      	uxtb	r3, r3
 8017be6:	f1c3 0307 	rsb	r3, r3, #7
 8017bea:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017bec:	69bb      	ldr	r3, [r7, #24]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	da00      	bge.n	8017bf4 <payload_integration+0x6e>
 8017bf2:	3307      	adds	r3, #7
 8017bf4:	10db      	asrs	r3, r3, #3
 8017bf6:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017bf8:	69bb      	ldr	r3, [r7, #24]
 8017bfa:	3301      	adds	r3, #1
 8017bfc:	425a      	negs	r2, r3
 8017bfe:	f003 0307 	and.w	r3, r3, #7
 8017c02:	f002 0207 	and.w	r2, r2, #7
 8017c06:	bf58      	it	pl
 8017c08:	4253      	negpl	r3, r2
 8017c0a:	b2db      	uxtb	r3, r3
 8017c0c:	f1c3 0307 	rsb	r3, r3, #7
 8017c10:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017c12:	69bb      	ldr	r3, [r7, #24]
 8017c14:	3301      	adds	r3, #1
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	da00      	bge.n	8017c1c <payload_integration+0x96>
 8017c1a:	3307      	adds	r3, #7
 8017c1c:	10db      	asrs	r3, r3, #3
 8017c1e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017c20:	7dbb      	ldrb	r3, [r7, #22]
 8017c22:	68ba      	ldr	r2, [r7, #8]
 8017c24:	4413      	add	r3, r2
 8017c26:	781b      	ldrb	r3, [r3, #0]
 8017c28:	461a      	mov	r2, r3
 8017c2a:	7dfb      	ldrb	r3, [r7, #23]
 8017c2c:	fa42 f303 	asr.w	r3, r2, r3
 8017c30:	b2db      	uxtb	r3, r3
 8017c32:	f003 0301 	and.w	r3, r3, #1
 8017c36:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017c38:	7ffa      	ldrb	r2, [r7, #31]
 8017c3a:	7cfb      	ldrb	r3, [r7, #19]
 8017c3c:	4053      	eors	r3, r2
 8017c3e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017c40:	7d3b      	ldrb	r3, [r7, #20]
 8017c42:	68fa      	ldr	r2, [r7, #12]
 8017c44:	4413      	add	r3, r2
 8017c46:	781b      	ldrb	r3, [r3, #0]
 8017c48:	b25a      	sxtb	r2, r3
 8017c4a:	7ff9      	ldrb	r1, [r7, #31]
 8017c4c:	7d7b      	ldrb	r3, [r7, #21]
 8017c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8017c52:	b25b      	sxtb	r3, r3
 8017c54:	4313      	orrs	r3, r2
 8017c56:	b259      	sxtb	r1, r3
 8017c58:	7d3b      	ldrb	r3, [r7, #20]
 8017c5a:	68fa      	ldr	r2, [r7, #12]
 8017c5c:	4413      	add	r3, r2
 8017c5e:	b2ca      	uxtb	r2, r1
 8017c60:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8017c62:	69bb      	ldr	r3, [r7, #24]
 8017c64:	3301      	adds	r3, #1
 8017c66:	61bb      	str	r3, [r7, #24]
 8017c68:	79fb      	ldrb	r3, [r7, #7]
 8017c6a:	00db      	lsls	r3, r3, #3
 8017c6c:	69ba      	ldr	r2, [r7, #24]
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	dbb0      	blt.n	8017bd4 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017c72:	7ffb      	ldrb	r3, [r7, #31]
 8017c74:	01db      	lsls	r3, r3, #7
 8017c76:	b25a      	sxtb	r2, r3
 8017c78:	7ffb      	ldrb	r3, [r7, #31]
 8017c7a:	019b      	lsls	r3, r3, #6
 8017c7c:	b25b      	sxtb	r3, r3
 8017c7e:	4313      	orrs	r3, r2
 8017c80:	b25b      	sxtb	r3, r3
 8017c82:	7ffa      	ldrb	r2, [r7, #31]
 8017c84:	2a00      	cmp	r2, #0
 8017c86:	d101      	bne.n	8017c8c <payload_integration+0x106>
 8017c88:	2220      	movs	r2, #32
 8017c8a:	e000      	b.n	8017c8e <payload_integration+0x108>
 8017c8c:	2200      	movs	r2, #0
 8017c8e:	4313      	orrs	r3, r2
 8017c90:	b259      	sxtb	r1, r3
 8017c92:	79fb      	ldrb	r3, [r7, #7]
 8017c94:	68fa      	ldr	r2, [r7, #12]
 8017c96:	4413      	add	r3, r2
 8017c98:	b2ca      	uxtb	r2, r1
 8017c9a:	701a      	strb	r2, [r3, #0]
}
 8017c9c:	bf00      	nop
 8017c9e:	3724      	adds	r7, #36	; 0x24
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bc80      	pop	{r7}
 8017ca4:	4770      	bx	lr
	...

08017ca8 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b08c      	sub	sp, #48	; 0x30
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	60b9      	str	r1, [r7, #8]
 8017cb0:	607a      	str	r2, [r7, #4]
 8017cb2:	603b      	str	r3, [r7, #0]
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8017cb8:	2300      	movs	r3, #0
 8017cba:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	61fb      	str	r3, [r7, #28]
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017cc4:	f001 fccd 	bl	8019662 <RFW_DeInit>

    if( rxContinuous != 0 )
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d001      	beq.n	8017cd2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017cce:	2300      	movs	r3, #0
 8017cd0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	bf14      	ite	ne
 8017cd8:	2301      	movne	r3, #1
 8017cda:	2300      	moveq	r3, #0
 8017cdc:	b2da      	uxtb	r2, r3
 8017cde:	4ba9      	ldr	r3, [pc, #676]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017ce0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017ce2:	7bfb      	ldrb	r3, [r7, #15]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d003      	beq.n	8017cf0 <RadioSetRxGenericConfig+0x48>
 8017ce8:	2b01      	cmp	r3, #1
 8017cea:	f000 80e8 	beq.w	8017ebe <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017cee:	e1a0      	b.n	8018032 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017cf0:	68bb      	ldr	r3, [r7, #8]
 8017cf2:	68db      	ldr	r3, [r3, #12]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d003      	beq.n	8017d00 <RadioSetRxGenericConfig+0x58>
 8017cf8:	68bb      	ldr	r3, [r7, #8]
 8017cfa:	691b      	ldr	r3, [r3, #16]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d102      	bne.n	8017d06 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017d00:	f04f 33ff 	mov.w	r3, #4294967295
 8017d04:	e196      	b.n	8018034 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8017d06:	68bb      	ldr	r3, [r7, #8]
 8017d08:	7d5b      	ldrb	r3, [r3, #21]
 8017d0a:	2b08      	cmp	r3, #8
 8017d0c:	d902      	bls.n	8017d14 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8017d12:	e18f      	b.n	8018034 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017d14:	2300      	movs	r3, #0
 8017d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d18:	e00d      	b.n	8017d36 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8017d1a:	68bb      	ldr	r3, [r7, #8]
 8017d1c:	699a      	ldr	r2, [r3, #24]
 8017d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d20:	4413      	add	r3, r2
 8017d22:	7819      	ldrb	r1, [r3, #0]
 8017d24:	f107 021c 	add.w	r2, r7, #28
 8017d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d2a:	4413      	add	r3, r2
 8017d2c:	460a      	mov	r2, r1
 8017d2e:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d32:	3301      	adds	r3, #1
 8017d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d36:	68bb      	ldr	r3, [r7, #8]
 8017d38:	7d5b      	ldrb	r3, [r3, #21]
 8017d3a:	461a      	mov	r2, r3
 8017d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d3e:	4293      	cmp	r3, r2
 8017d40:	dbeb      	blt.n	8017d1a <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017d42:	68bb      	ldr	r3, [r7, #8]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	bf14      	ite	ne
 8017d4a:	2301      	movne	r3, #1
 8017d4c:	2300      	moveq	r3, #0
 8017d4e:	b2db      	uxtb	r3, r3
 8017d50:	4618      	mov	r0, r3
 8017d52:	f000 fd6b 	bl	801882c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017d56:	4b8b      	ldr	r3, [pc, #556]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017d58:	2200      	movs	r2, #0
 8017d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017d5e:	68bb      	ldr	r3, [r7, #8]
 8017d60:	68db      	ldr	r3, [r3, #12]
 8017d62:	4a88      	ldr	r2, [pc, #544]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017d64:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	791a      	ldrb	r2, [r3, #4]
 8017d6a:	4b86      	ldr	r3, [pc, #536]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017d70:	68bb      	ldr	r3, [r7, #8]
 8017d72:	689b      	ldr	r3, [r3, #8]
 8017d74:	4618      	mov	r0, r3
 8017d76:	f001 fba5 	bl	80194c4 <SUBGRF_GetFskBandwidthRegValue>
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	461a      	mov	r2, r3
 8017d7e:	4b81      	ldr	r3, [pc, #516]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017d84:	4b7f      	ldr	r3, [pc, #508]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017d86:	2200      	movs	r2, #0
 8017d88:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8017d8a:	68bb      	ldr	r3, [r7, #8]
 8017d8c:	691b      	ldr	r3, [r3, #16]
 8017d8e:	b29b      	uxth	r3, r3
 8017d90:	00db      	lsls	r3, r3, #3
 8017d92:	b29a      	uxth	r2, r3
 8017d94:	4b7b      	ldr	r3, [pc, #492]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017d96:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8017d98:	68bb      	ldr	r3, [r7, #8]
 8017d9a:	7d1a      	ldrb	r2, [r3, #20]
 8017d9c:	4b79      	ldr	r3, [pc, #484]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017d9e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017da0:	68bb      	ldr	r3, [r7, #8]
 8017da2:	7d5b      	ldrb	r3, [r3, #21]
 8017da4:	00db      	lsls	r3, r3, #3
 8017da6:	b2da      	uxtb	r2, r3
 8017da8:	4b76      	ldr	r3, [pc, #472]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017daa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8017dac:	68bb      	ldr	r3, [r7, #8]
 8017dae:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8017db2:	4b74      	ldr	r3, [pc, #464]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017db4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8017db6:	68bb      	ldr	r3, [r7, #8]
 8017db8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d105      	bne.n	8017dcc <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8017dc0:	68bb      	ldr	r3, [r7, #8]
 8017dc2:	69db      	ldr	r3, [r3, #28]
 8017dc4:	b2da      	uxtb	r2, r3
 8017dc6:	4b6f      	ldr	r3, [pc, #444]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017dc8:	759a      	strb	r2, [r3, #22]
 8017dca:	e00b      	b.n	8017de4 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8017dcc:	68bb      	ldr	r3, [r7, #8]
 8017dce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017dd2:	2b02      	cmp	r3, #2
 8017dd4:	d103      	bne.n	8017dde <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017dd6:	4b6b      	ldr	r3, [pc, #428]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017dd8:	22ff      	movs	r2, #255	; 0xff
 8017dda:	759a      	strb	r2, [r3, #22]
 8017ddc:	e002      	b.n	8017de4 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017dde:	4b69      	ldr	r3, [pc, #420]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017de0:	22ff      	movs	r2, #255	; 0xff
 8017de2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017de4:	68bb      	ldr	r3, [r7, #8]
 8017de6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8017dea:	2b02      	cmp	r3, #2
 8017dec:	d004      	beq.n	8017df8 <RadioSetRxGenericConfig+0x150>
 8017dee:	68bb      	ldr	r3, [r7, #8]
 8017df0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017df4:	2b02      	cmp	r3, #2
 8017df6:	d12d      	bne.n	8017e54 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017dfe:	2bf1      	cmp	r3, #241	; 0xf1
 8017e00:	d00c      	beq.n	8017e1c <RadioSetRxGenericConfig+0x174>
 8017e02:	68bb      	ldr	r3, [r7, #8]
 8017e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e08:	2bf2      	cmp	r3, #242	; 0xf2
 8017e0a:	d007      	beq.n	8017e1c <RadioSetRxGenericConfig+0x174>
 8017e0c:	68bb      	ldr	r3, [r7, #8]
 8017e0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e12:	2b01      	cmp	r3, #1
 8017e14:	d002      	beq.n	8017e1c <RadioSetRxGenericConfig+0x174>
            return -1;
 8017e16:	f04f 33ff 	mov.w	r3, #4294967295
 8017e1a:	e10b      	b.n	8018034 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8017e20:	68bb      	ldr	r3, [r7, #8]
 8017e22:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8017e24:	4b58      	ldr	r3, [pc, #352]	; (8017f88 <RadioSetRxGenericConfig+0x2e0>)
 8017e26:	6819      	ldr	r1, [r3, #0]
 8017e28:	f107 0310 	add.w	r3, r7, #16
 8017e2c:	4a57      	ldr	r2, [pc, #348]	; (8017f8c <RadioSetRxGenericConfig+0x2e4>)
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f001 fc0a 	bl	8019648 <RFW_Init>
 8017e34:	4603      	mov	r3, r0
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d002      	beq.n	8017e40 <RadioSetRxGenericConfig+0x198>
            return -1;
 8017e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8017e3e:	e0f9      	b.n	8018034 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017e40:	4b50      	ldr	r3, [pc, #320]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017e42:	2200      	movs	r2, #0
 8017e44:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8017e46:	4b4f      	ldr	r3, [pc, #316]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017e48:	2201      	movs	r2, #1
 8017e4a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8017e4c:	4b4d      	ldr	r3, [pc, #308]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017e4e:	2200      	movs	r2, #0
 8017e50:	755a      	strb	r2, [r3, #21]
        {
 8017e52:	e00e      	b.n	8017e72 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017e54:	68bb      	ldr	r3, [r7, #8]
 8017e56:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8017e5a:	4b4a      	ldr	r3, [pc, #296]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017e5c:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017e5e:	68bb      	ldr	r3, [r7, #8]
 8017e60:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017e64:	4b47      	ldr	r3, [pc, #284]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017e66:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8017e68:	68bb      	ldr	r3, [r7, #8]
 8017e6a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017e6e:	4b45      	ldr	r3, [pc, #276]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017e70:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8017e72:	f7ff fa6c 	bl	801734e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8017e76:	2000      	movs	r0, #0
 8017e78:	f7fe fbf8 	bl	801666c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017e7c:	4844      	ldr	r0, [pc, #272]	; (8017f90 <RadioSetRxGenericConfig+0x2e8>)
 8017e7e:	f000 ff03 	bl	8018c88 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e82:	4844      	ldr	r0, [pc, #272]	; (8017f94 <RadioSetRxGenericConfig+0x2ec>)
 8017e84:	f000 ffcc 	bl	8018e20 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017e88:	f107 031c 	add.w	r3, r7, #28
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	f000 fb06 	bl	801849e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8017e92:	68bb      	ldr	r3, [r7, #8]
 8017e94:	8c1b      	ldrh	r3, [r3, #32]
 8017e96:	4618      	mov	r0, r3
 8017e98:	f000 fb50 	bl	801853c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8017e9c:	68bb      	ldr	r3, [r7, #8]
 8017e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f000 fb2b 	bl	80184fc <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8017ea6:	683b      	ldr	r3, [r7, #0]
 8017ea8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017eac:	fb02 f203 	mul.w	r2, r2, r3
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	68db      	ldr	r3, [r3, #12]
 8017eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8017eb8:	4a32      	ldr	r2, [pc, #200]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017eba:	6093      	str	r3, [r2, #8]
        break;
 8017ebc:	e0b9      	b.n	8018032 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8017ebe:	68bb      	ldr	r3, [r7, #8]
 8017ec0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d102      	bne.n	8017ecc <RadioSetRxGenericConfig+0x224>
            return -1;
 8017ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8017eca:	e0b3      	b.n	8018034 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8017ecc:	68bb      	ldr	r3, [r7, #8]
 8017ece:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017ed2:	2b01      	cmp	r3, #1
 8017ed4:	d104      	bne.n	8017ee0 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8017ed6:	68bb      	ldr	r3, [r7, #8]
 8017ed8:	69db      	ldr	r3, [r3, #28]
 8017eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017ede:	e002      	b.n	8017ee6 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8017ee0:	23ff      	movs	r3, #255	; 0xff
 8017ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017ee6:	68bb      	ldr	r3, [r7, #8]
 8017ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	bf14      	ite	ne
 8017eee:	2301      	movne	r3, #1
 8017ef0:	2300      	moveq	r3, #0
 8017ef2:	b2db      	uxtb	r3, r3
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	f000 fc99 	bl	801882c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017efa:	683b      	ldr	r3, [r7, #0]
 8017efc:	b2db      	uxtb	r3, r3
 8017efe:	4618      	mov	r0, r3
 8017f00:	f000 fca3 	bl	801884a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017f04:	4b1f      	ldr	r3, [pc, #124]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017f06:	2201      	movs	r2, #1
 8017f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017f0c:	68bb      	ldr	r3, [r7, #8]
 8017f0e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017f12:	4b1c      	ldr	r3, [pc, #112]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8017f18:	68bb      	ldr	r3, [r7, #8]
 8017f1a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8017f1e:	4b19      	ldr	r3, [pc, #100]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8017f24:	68bb      	ldr	r3, [r7, #8]
 8017f26:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8017f2a:	4b16      	ldr	r3, [pc, #88]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017f2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8017f36:	2b02      	cmp	r3, #2
 8017f38:	d010      	beq.n	8017f5c <RadioSetRxGenericConfig+0x2b4>
 8017f3a:	2b02      	cmp	r3, #2
 8017f3c:	dc2c      	bgt.n	8017f98 <RadioSetRxGenericConfig+0x2f0>
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d002      	beq.n	8017f48 <RadioSetRxGenericConfig+0x2a0>
 8017f42:	2b01      	cmp	r3, #1
 8017f44:	d005      	beq.n	8017f52 <RadioSetRxGenericConfig+0x2aa>
            break;
 8017f46:	e027      	b.n	8017f98 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017f48:	4b0e      	ldr	r3, [pc, #56]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017f50:	e023      	b.n	8017f9a <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017f52:	4b0c      	ldr	r3, [pc, #48]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017f54:	2201      	movs	r2, #1
 8017f56:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017f5a:	e01e      	b.n	8017f9a <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8017f5c:	68bb      	ldr	r3, [r7, #8]
 8017f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f62:	2b0b      	cmp	r3, #11
 8017f64:	d004      	beq.n	8017f70 <RadioSetRxGenericConfig+0x2c8>
 8017f66:	68bb      	ldr	r3, [r7, #8]
 8017f68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f6c:	2b0c      	cmp	r3, #12
 8017f6e:	d104      	bne.n	8017f7a <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017f70:	4b04      	ldr	r3, [pc, #16]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017f72:	2201      	movs	r2, #1
 8017f74:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017f78:	e00f      	b.n	8017f9a <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017f7a:	4b02      	ldr	r3, [pc, #8]	; (8017f84 <RadioSetRxGenericConfig+0x2dc>)
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017f82:	e00a      	b.n	8017f9a <RadioSetRxGenericConfig+0x2f2>
 8017f84:	200017c0 	.word	0x200017c0
 8017f88:	20000ee0 	.word	0x20000ee0
 8017f8c:	20001830 	.word	0x20001830
 8017f90:	200017f8 	.word	0x200017f8
 8017f94:	200017ce 	.word	0x200017ce
            break;
 8017f98:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017f9a:	4b28      	ldr	r3, [pc, #160]	; (801803c <RadioSetRxGenericConfig+0x394>)
 8017f9c:	2201      	movs	r2, #1
 8017f9e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8017fa0:	68bb      	ldr	r3, [r7, #8]
 8017fa2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8017fa4:	4b25      	ldr	r3, [pc, #148]	; (801803c <RadioSetRxGenericConfig+0x394>)
 8017fa6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017fa8:	68bb      	ldr	r3, [r7, #8]
 8017faa:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8017fae:	4b23      	ldr	r3, [pc, #140]	; (801803c <RadioSetRxGenericConfig+0x394>)
 8017fb0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017fb2:	4a22      	ldr	r2, [pc, #136]	; (801803c <RadioSetRxGenericConfig+0x394>)
 8017fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017fb8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8017fba:	68bb      	ldr	r3, [r7, #8]
 8017fbc:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8017fc0:	4b1e      	ldr	r3, [pc, #120]	; (801803c <RadioSetRxGenericConfig+0x394>)
 8017fc2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8017fc6:	68bb      	ldr	r3, [r7, #8]
 8017fc8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8017fcc:	4b1b      	ldr	r3, [pc, #108]	; (801803c <RadioSetRxGenericConfig+0x394>)
 8017fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8017fd2:	f7ff f9bc 	bl	801734e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8017fd6:	2001      	movs	r0, #1
 8017fd8:	f7fe fb48 	bl	801666c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017fdc:	4818      	ldr	r0, [pc, #96]	; (8018040 <RadioSetRxGenericConfig+0x398>)
 8017fde:	f000 fe53 	bl	8018c88 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017fe2:	4818      	ldr	r0, [pc, #96]	; (8018044 <RadioSetRxGenericConfig+0x39c>)
 8017fe4:	f000 ff1c 	bl	8018e20 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017fe8:	4b14      	ldr	r3, [pc, #80]	; (801803c <RadioSetRxGenericConfig+0x394>)
 8017fea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017fee:	2b01      	cmp	r3, #1
 8017ff0:	d10d      	bne.n	801800e <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8017ff2:	f240 7036 	movw	r0, #1846	; 0x736
 8017ff6:	f001 f86f 	bl	80190d8 <SUBGRF_ReadRegister>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	f023 0304 	bic.w	r3, r3, #4
 8018000:	b2db      	uxtb	r3, r3
 8018002:	4619      	mov	r1, r3
 8018004:	f240 7036 	movw	r0, #1846	; 0x736
 8018008:	f001 f852 	bl	80190b0 <SUBGRF_WriteRegister>
 801800c:	e00c      	b.n	8018028 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801800e:	f240 7036 	movw	r0, #1846	; 0x736
 8018012:	f001 f861 	bl	80190d8 <SUBGRF_ReadRegister>
 8018016:	4603      	mov	r3, r0
 8018018:	f043 0304 	orr.w	r3, r3, #4
 801801c:	b2db      	uxtb	r3, r3
 801801e:	4619      	mov	r1, r3
 8018020:	f240 7036 	movw	r0, #1846	; 0x736
 8018024:	f001 f844 	bl	80190b0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018028:	4b04      	ldr	r3, [pc, #16]	; (801803c <RadioSetRxGenericConfig+0x394>)
 801802a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801802e:	609a      	str	r2, [r3, #8]
        break;
 8018030:	bf00      	nop
    }
    return status;
 8018032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018034:	4618      	mov	r0, r3
 8018036:	3730      	adds	r7, #48	; 0x30
 8018038:	46bd      	mov	sp, r7
 801803a:	bd80      	pop	{r7, pc}
 801803c:	200017c0 	.word	0x200017c0
 8018040:	200017f8 	.word	0x200017f8
 8018044:	200017ce 	.word	0x200017ce

08018048 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8018048:	b580      	push	{r7, lr}
 801804a:	b08a      	sub	sp, #40	; 0x28
 801804c:	af00      	add	r7, sp, #0
 801804e:	60b9      	str	r1, [r7, #8]
 8018050:	607b      	str	r3, [r7, #4]
 8018052:	4603      	mov	r3, r0
 8018054:	73fb      	strb	r3, [r7, #15]
 8018056:	4613      	mov	r3, r2
 8018058:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 801805a:	2300      	movs	r3, #0
 801805c:	61fb      	str	r3, [r7, #28]
 801805e:	2300      	movs	r3, #0
 8018060:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018062:	f001 fafe 	bl	8019662 <RFW_DeInit>
    switch( modem )
 8018066:	7bfb      	ldrb	r3, [r7, #15]
 8018068:	2b02      	cmp	r3, #2
 801806a:	f000 8144 	beq.w	80182f6 <RadioSetTxGenericConfig+0x2ae>
 801806e:	2b02      	cmp	r3, #2
 8018070:	f300 8160 	bgt.w	8018334 <RadioSetTxGenericConfig+0x2ec>
 8018074:	2b00      	cmp	r3, #0
 8018076:	d003      	beq.n	8018080 <RadioSetTxGenericConfig+0x38>
 8018078:	2b01      	cmp	r3, #1
 801807a:	f000 80b7 	beq.w	80181ec <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 801807e:	e159      	b.n	8018334 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018080:	68bb      	ldr	r3, [r7, #8]
 8018082:	689b      	ldr	r3, [r3, #8]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d003      	beq.n	8018090 <RadioSetTxGenericConfig+0x48>
 8018088:	68bb      	ldr	r3, [r7, #8]
 801808a:	691b      	ldr	r3, [r3, #16]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d102      	bne.n	8018096 <RadioSetTxGenericConfig+0x4e>
            return -1;
 8018090:	f04f 33ff 	mov.w	r3, #4294967295
 8018094:	e163      	b.n	801835e <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	7d1b      	ldrb	r3, [r3, #20]
 801809a:	2b08      	cmp	r3, #8
 801809c:	d902      	bls.n	80180a4 <RadioSetTxGenericConfig+0x5c>
            return -1;
 801809e:	f04f 33ff 	mov.w	r3, #4294967295
 80180a2:	e15c      	b.n	801835e <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80180a4:	2300      	movs	r3, #0
 80180a6:	627b      	str	r3, [r7, #36]	; 0x24
 80180a8:	e00d      	b.n	80180c6 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 80180aa:	68bb      	ldr	r3, [r7, #8]
 80180ac:	699a      	ldr	r2, [r3, #24]
 80180ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180b0:	4413      	add	r3, r2
 80180b2:	7819      	ldrb	r1, [r3, #0]
 80180b4:	f107 021c 	add.w	r2, r7, #28
 80180b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ba:	4413      	add	r3, r2
 80180bc:	460a      	mov	r2, r1
 80180be:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80180c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c2:	3301      	adds	r3, #1
 80180c4:	627b      	str	r3, [r7, #36]	; 0x24
 80180c6:	68bb      	ldr	r3, [r7, #8]
 80180c8:	7d1b      	ldrb	r3, [r3, #20]
 80180ca:	461a      	mov	r2, r3
 80180cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ce:	4293      	cmp	r3, r2
 80180d0:	dbeb      	blt.n	80180aa <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80180d2:	4ba5      	ldr	r3, [pc, #660]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 80180d4:	2200      	movs	r2, #0
 80180d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80180da:	68bb      	ldr	r3, [r7, #8]
 80180dc:	689b      	ldr	r3, [r3, #8]
 80180de:	4aa2      	ldr	r2, [pc, #648]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 80180e0:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80180e2:	68bb      	ldr	r3, [r7, #8]
 80180e4:	781a      	ldrb	r2, [r3, #0]
 80180e6:	4ba0      	ldr	r3, [pc, #640]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 80180e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80180ec:	68bb      	ldr	r3, [r7, #8]
 80180ee:	685b      	ldr	r3, [r3, #4]
 80180f0:	4618      	mov	r0, r3
 80180f2:	f001 f9e7 	bl	80194c4 <SUBGRF_GetFskBandwidthRegValue>
 80180f6:	4603      	mov	r3, r0
 80180f8:	461a      	mov	r2, r3
 80180fa:	4b9b      	ldr	r3, [pc, #620]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 80180fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	68db      	ldr	r3, [r3, #12]
 8018104:	4a98      	ldr	r2, [pc, #608]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018106:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018108:	4b97      	ldr	r3, [pc, #604]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 801810a:	2200      	movs	r2, #0
 801810c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801810e:	68bb      	ldr	r3, [r7, #8]
 8018110:	691b      	ldr	r3, [r3, #16]
 8018112:	b29b      	uxth	r3, r3
 8018114:	00db      	lsls	r3, r3, #3
 8018116:	b29a      	uxth	r2, r3
 8018118:	4b93      	ldr	r3, [pc, #588]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 801811a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801811c:	4b92      	ldr	r3, [pc, #584]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 801811e:	2204      	movs	r2, #4
 8018120:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018122:	68bb      	ldr	r3, [r7, #8]
 8018124:	7d1b      	ldrb	r3, [r3, #20]
 8018126:	00db      	lsls	r3, r3, #3
 8018128:	b2da      	uxtb	r2, r3
 801812a:	4b8f      	ldr	r3, [pc, #572]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 801812c:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801812e:	4b8e      	ldr	r3, [pc, #568]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018130:	2200      	movs	r2, #0
 8018132:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018134:	68bb      	ldr	r3, [r7, #8]
 8018136:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801813a:	2b02      	cmp	r3, #2
 801813c:	d003      	beq.n	8018146 <RadioSetTxGenericConfig+0xfe>
 801813e:	68bb      	ldr	r3, [r7, #8]
 8018140:	7f9b      	ldrb	r3, [r3, #30]
 8018142:	2b02      	cmp	r3, #2
 8018144:	d12a      	bne.n	801819c <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018146:	68bb      	ldr	r3, [r7, #8]
 8018148:	7fdb      	ldrb	r3, [r3, #31]
 801814a:	2bf1      	cmp	r3, #241	; 0xf1
 801814c:	d00a      	beq.n	8018164 <RadioSetTxGenericConfig+0x11c>
 801814e:	68bb      	ldr	r3, [r7, #8]
 8018150:	7fdb      	ldrb	r3, [r3, #31]
 8018152:	2bf2      	cmp	r3, #242	; 0xf2
 8018154:	d006      	beq.n	8018164 <RadioSetTxGenericConfig+0x11c>
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	7fdb      	ldrb	r3, [r3, #31]
 801815a:	2b01      	cmp	r3, #1
 801815c:	d002      	beq.n	8018164 <RadioSetTxGenericConfig+0x11c>
                return -1;
 801815e:	f04f 33ff 	mov.w	r3, #4294967295
 8018162:	e0fc      	b.n	801835e <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8018164:	2301      	movs	r3, #1
 8018166:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801816c:	4b7f      	ldr	r3, [pc, #508]	; (801836c <RadioSetTxGenericConfig+0x324>)
 801816e:	6819      	ldr	r1, [r3, #0]
 8018170:	f107 0310 	add.w	r3, r7, #16
 8018174:	4a7e      	ldr	r2, [pc, #504]	; (8018370 <RadioSetTxGenericConfig+0x328>)
 8018176:	4618      	mov	r0, r3
 8018178:	f001 fa66 	bl	8019648 <RFW_Init>
 801817c:	4603      	mov	r3, r0
 801817e:	2b00      	cmp	r3, #0
 8018180:	d002      	beq.n	8018188 <RadioSetTxGenericConfig+0x140>
              return -1;
 8018182:	f04f 33ff 	mov.w	r3, #4294967295
 8018186:	e0ea      	b.n	801835e <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018188:	4b77      	ldr	r3, [pc, #476]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 801818a:	2200      	movs	r2, #0
 801818c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801818e:	4b76      	ldr	r3, [pc, #472]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018190:	2201      	movs	r2, #1
 8018192:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018194:	4b74      	ldr	r3, [pc, #464]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018196:	2200      	movs	r2, #0
 8018198:	755a      	strb	r2, [r3, #21]
        {
 801819a:	e00c      	b.n	80181b6 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801819c:	68bb      	ldr	r3, [r7, #8]
 801819e:	7fda      	ldrb	r2, [r3, #31]
 80181a0:	4b71      	ldr	r3, [pc, #452]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 80181a2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80181a4:	68bb      	ldr	r3, [r7, #8]
 80181a6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80181aa:	4b6f      	ldr	r3, [pc, #444]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 80181ac:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80181ae:	68bb      	ldr	r3, [r7, #8]
 80181b0:	7f9a      	ldrb	r2, [r3, #30]
 80181b2:	4b6d      	ldr	r3, [pc, #436]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 80181b4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80181b6:	f7ff f8ca 	bl	801734e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80181ba:	2000      	movs	r0, #0
 80181bc:	f7fe fa56 	bl	801666c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80181c0:	486c      	ldr	r0, [pc, #432]	; (8018374 <RadioSetTxGenericConfig+0x32c>)
 80181c2:	f000 fd61 	bl	8018c88 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80181c6:	486c      	ldr	r0, [pc, #432]	; (8018378 <RadioSetTxGenericConfig+0x330>)
 80181c8:	f000 fe2a 	bl	8018e20 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80181cc:	f107 031c 	add.w	r3, r7, #28
 80181d0:	4618      	mov	r0, r3
 80181d2:	f000 f964 	bl	801849e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80181d6:	68bb      	ldr	r3, [r7, #8]
 80181d8:	8b9b      	ldrh	r3, [r3, #28]
 80181da:	4618      	mov	r0, r3
 80181dc:	f000 f9ae 	bl	801853c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	8c1b      	ldrh	r3, [r3, #32]
 80181e4:	4618      	mov	r0, r3
 80181e6:	f000 f989 	bl	80184fc <SUBGRF_SetCrcPolynomial>
        break;
 80181ea:	e0a4      	b.n	8018336 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80181ec:	4b5e      	ldr	r3, [pc, #376]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 80181ee:	2201      	movs	r2, #1
 80181f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80181f4:	68bb      	ldr	r3, [r7, #8]
 80181f6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80181fa:	4b5b      	ldr	r3, [pc, #364]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 80181fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018200:	68bb      	ldr	r3, [r7, #8]
 8018202:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8018206:	4b58      	ldr	r3, [pc, #352]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018212:	4b55      	ldr	r3, [pc, #340]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018214:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8018218:	68bb      	ldr	r3, [r7, #8]
 801821a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801821e:	2b02      	cmp	r3, #2
 8018220:	d010      	beq.n	8018244 <RadioSetTxGenericConfig+0x1fc>
 8018222:	2b02      	cmp	r3, #2
 8018224:	dc22      	bgt.n	801826c <RadioSetTxGenericConfig+0x224>
 8018226:	2b00      	cmp	r3, #0
 8018228:	d002      	beq.n	8018230 <RadioSetTxGenericConfig+0x1e8>
 801822a:	2b01      	cmp	r3, #1
 801822c:	d005      	beq.n	801823a <RadioSetTxGenericConfig+0x1f2>
            break;
 801822e:	e01d      	b.n	801826c <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018230:	4b4d      	ldr	r3, [pc, #308]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018232:	2200      	movs	r2, #0
 8018234:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018238:	e019      	b.n	801826e <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801823a:	4b4b      	ldr	r3, [pc, #300]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 801823c:	2201      	movs	r2, #1
 801823e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018242:	e014      	b.n	801826e <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018244:	68bb      	ldr	r3, [r7, #8]
 8018246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801824a:	2b0b      	cmp	r3, #11
 801824c:	d004      	beq.n	8018258 <RadioSetTxGenericConfig+0x210>
 801824e:	68bb      	ldr	r3, [r7, #8]
 8018250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018254:	2b0c      	cmp	r3, #12
 8018256:	d104      	bne.n	8018262 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018258:	4b43      	ldr	r3, [pc, #268]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 801825a:	2201      	movs	r2, #1
 801825c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018260:	e005      	b.n	801826e <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018262:	4b41      	ldr	r3, [pc, #260]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018264:	2200      	movs	r2, #0
 8018266:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801826a:	e000      	b.n	801826e <RadioSetTxGenericConfig+0x226>
            break;
 801826c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801826e:	4b3e      	ldr	r3, [pc, #248]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018270:	2201      	movs	r2, #1
 8018272:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018274:	68bb      	ldr	r3, [r7, #8]
 8018276:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8018278:	4b3b      	ldr	r3, [pc, #236]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 801827a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801827c:	68bb      	ldr	r3, [r7, #8]
 801827e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8018282:	4b39      	ldr	r3, [pc, #228]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018284:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018286:	68bb      	ldr	r3, [r7, #8]
 8018288:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801828c:	4b36      	ldr	r3, [pc, #216]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 801828e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018292:	68bb      	ldr	r3, [r7, #8]
 8018294:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018298:	4b33      	ldr	r3, [pc, #204]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 801829a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801829e:	f7ff f856 	bl	801734e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80182a2:	2001      	movs	r0, #1
 80182a4:	f7fe f9e2 	bl	801666c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80182a8:	4832      	ldr	r0, [pc, #200]	; (8018374 <RadioSetTxGenericConfig+0x32c>)
 80182aa:	f000 fced 	bl	8018c88 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80182ae:	4832      	ldr	r0, [pc, #200]	; (8018378 <RadioSetTxGenericConfig+0x330>)
 80182b0:	f000 fdb6 	bl	8018e20 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80182b4:	4b2c      	ldr	r3, [pc, #176]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 80182b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80182ba:	2b06      	cmp	r3, #6
 80182bc:	d10d      	bne.n	80182da <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80182be:	f640 0089 	movw	r0, #2185	; 0x889
 80182c2:	f000 ff09 	bl	80190d8 <SUBGRF_ReadRegister>
 80182c6:	4603      	mov	r3, r0
 80182c8:	f023 0304 	bic.w	r3, r3, #4
 80182cc:	b2db      	uxtb	r3, r3
 80182ce:	4619      	mov	r1, r3
 80182d0:	f640 0089 	movw	r0, #2185	; 0x889
 80182d4:	f000 feec 	bl	80190b0 <SUBGRF_WriteRegister>
        break;
 80182d8:	e02d      	b.n	8018336 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80182da:	f640 0089 	movw	r0, #2185	; 0x889
 80182de:	f000 fefb 	bl	80190d8 <SUBGRF_ReadRegister>
 80182e2:	4603      	mov	r3, r0
 80182e4:	f043 0304 	orr.w	r3, r3, #4
 80182e8:	b2db      	uxtb	r3, r3
 80182ea:	4619      	mov	r1, r3
 80182ec:	f640 0089 	movw	r0, #2185	; 0x889
 80182f0:	f000 fede 	bl	80190b0 <SUBGRF_WriteRegister>
        break;
 80182f4:	e01f      	b.n	8018336 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80182f6:	68bb      	ldr	r3, [r7, #8]
 80182f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d004      	beq.n	8018308 <RadioSetTxGenericConfig+0x2c0>
 80182fe:	68bb      	ldr	r3, [r7, #8]
 8018300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018306:	d902      	bls.n	801830e <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8018308:	f04f 33ff 	mov.w	r3, #4294967295
 801830c:	e027      	b.n	801835e <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 801830e:	2002      	movs	r0, #2
 8018310:	f7fe f9ac 	bl	801666c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018314:	4b14      	ldr	r3, [pc, #80]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018316:	2202      	movs	r2, #2
 8018318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801831c:	68bb      	ldr	r3, [r7, #8]
 801831e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018320:	4a11      	ldr	r2, [pc, #68]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018322:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018324:	4b10      	ldr	r3, [pc, #64]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018326:	2216      	movs	r2, #22
 8018328:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801832c:	4811      	ldr	r0, [pc, #68]	; (8018374 <RadioSetTxGenericConfig+0x32c>)
 801832e:	f000 fcab 	bl	8018c88 <SUBGRF_SetModulationParams>
        break;
 8018332:	e000      	b.n	8018336 <RadioSetTxGenericConfig+0x2ee>
        break;
 8018334:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801833a:	4618      	mov	r0, r3
 801833c:	f000 ffd4 	bl	80192e8 <SUBGRF_SetRfTxPower>
 8018340:	4603      	mov	r3, r0
 8018342:	461a      	mov	r2, r3
 8018344:	4b08      	ldr	r3, [pc, #32]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018346:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801834a:	4b07      	ldr	r3, [pc, #28]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 801834c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018350:	4618      	mov	r0, r3
 8018352:	f001 f99a 	bl	801968a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018356:	4a04      	ldr	r2, [pc, #16]	; (8018368 <RadioSetTxGenericConfig+0x320>)
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	6053      	str	r3, [r2, #4]
    return 0;
 801835c:	2300      	movs	r3, #0
}
 801835e:	4618      	mov	r0, r3
 8018360:	3728      	adds	r7, #40	; 0x28
 8018362:	46bd      	mov	sp, r7
 8018364:	bd80      	pop	{r7, pc}
 8018366:	bf00      	nop
 8018368:	200017c0 	.word	0x200017c0
 801836c:	20000ee0 	.word	0x20000ee0
 8018370:	20001818 	.word	0x20001818
 8018374:	200017f8 	.word	0x200017f8
 8018378:	200017ce 	.word	0x200017ce

0801837c <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b084      	sub	sp, #16
 8018380:	af00      	add	r7, sp, #0
 8018382:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	2b00      	cmp	r3, #0
 8018388:	d002      	beq.n	8018390 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801838a:	4a1a      	ldr	r2, [pc, #104]	; (80183f4 <SUBGRF_Init+0x78>)
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018390:	f7e9 fc50 	bl	8001c34 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018394:	2002      	movs	r0, #2
 8018396:	f001 f873 	bl	8019480 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801839a:	4b17      	ldr	r3, [pc, #92]	; (80183f8 <SUBGRF_Init+0x7c>)
 801839c:	2200      	movs	r2, #0
 801839e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80183a0:	2000      	movs	r0, #0
 80183a2:	f000 f977 	bl	8018694 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80183a6:	f7f2 fb11 	bl	800a9cc <RBI_IsTCXO>
 80183aa:	4603      	mov	r3, r0
 80183ac:	2b01      	cmp	r3, #1
 80183ae:	d10e      	bne.n	80183ce <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80183b0:	2140      	movs	r1, #64	; 0x40
 80183b2:	2001      	movs	r0, #1
 80183b4:	f000 fb78 	bl	8018aa8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80183b8:	2100      	movs	r1, #0
 80183ba:	f640 1011 	movw	r0, #2321	; 0x911
 80183be:	f000 fe77 	bl	80190b0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80183c2:	237f      	movs	r3, #127	; 0x7f
 80183c4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80183c6:	7b38      	ldrb	r0, [r7, #12]
 80183c8:	f000 fa85 	bl	80188d6 <SUBGRF_Calibrate>
 80183cc:	e009      	b.n	80183e2 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80183ce:	2120      	movs	r1, #32
 80183d0:	f640 1011 	movw	r0, #2321	; 0x911
 80183d4:	f000 fe6c 	bl	80190b0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80183d8:	2120      	movs	r1, #32
 80183da:	f640 1012 	movw	r0, #2322	; 0x912
 80183de:	f000 fe67 	bl	80190b0 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 80183e2:	f7f2 fad7 	bl	800a994 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80183e6:	4b05      	ldr	r3, [pc, #20]	; (80183fc <SUBGRF_Init+0x80>)
 80183e8:	2201      	movs	r2, #1
 80183ea:	701a      	strb	r2, [r3, #0]
}
 80183ec:	bf00      	nop
 80183ee:	3710      	adds	r7, #16
 80183f0:	46bd      	mov	sp, r7
 80183f2:	bd80      	pop	{r7, pc}
 80183f4:	20000ef0 	.word	0x20000ef0
 80183f8:	20000eec 	.word	0x20000eec
 80183fc:	20000ee4 	.word	0x20000ee4

08018400 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018400:	b480      	push	{r7}
 8018402:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018404:	4b02      	ldr	r3, [pc, #8]	; (8018410 <SUBGRF_GetOperatingMode+0x10>)
 8018406:	781b      	ldrb	r3, [r3, #0]
}
 8018408:	4618      	mov	r0, r3
 801840a:	46bd      	mov	sp, r7
 801840c:	bc80      	pop	{r7}
 801840e:	4770      	bx	lr
 8018410:	20000ee4 	.word	0x20000ee4

08018414 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b082      	sub	sp, #8
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
 801841c:	460b      	mov	r3, r1
 801841e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018420:	78fb      	ldrb	r3, [r7, #3]
 8018422:	461a      	mov	r2, r3
 8018424:	6879      	ldr	r1, [r7, #4]
 8018426:	2000      	movs	r0, #0
 8018428:	f000 feae 	bl	8019188 <SUBGRF_WriteBuffer>
}
 801842c:	bf00      	nop
 801842e:	3708      	adds	r7, #8
 8018430:	46bd      	mov	sp, r7
 8018432:	bd80      	pop	{r7, pc}

08018434 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018434:	b580      	push	{r7, lr}
 8018436:	b086      	sub	sp, #24
 8018438:	af00      	add	r7, sp, #0
 801843a:	60f8      	str	r0, [r7, #12]
 801843c:	60b9      	str	r1, [r7, #8]
 801843e:	4613      	mov	r3, r2
 8018440:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018442:	2300      	movs	r3, #0
 8018444:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8018446:	f107 0317 	add.w	r3, r7, #23
 801844a:	4619      	mov	r1, r3
 801844c:	68b8      	ldr	r0, [r7, #8]
 801844e:	f000 fdb1 	bl	8018fb4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8018452:	68bb      	ldr	r3, [r7, #8]
 8018454:	781b      	ldrb	r3, [r3, #0]
 8018456:	79fa      	ldrb	r2, [r7, #7]
 8018458:	429a      	cmp	r2, r3
 801845a:	d201      	bcs.n	8018460 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801845c:	2301      	movs	r3, #1
 801845e:	e007      	b.n	8018470 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018460:	7df8      	ldrb	r0, [r7, #23]
 8018462:	68bb      	ldr	r3, [r7, #8]
 8018464:	781b      	ldrb	r3, [r3, #0]
 8018466:	461a      	mov	r2, r3
 8018468:	68f9      	ldr	r1, [r7, #12]
 801846a:	f000 feaf 	bl	80191cc <SUBGRF_ReadBuffer>

    return 0;
 801846e:	2300      	movs	r3, #0
}
 8018470:	4618      	mov	r0, r3
 8018472:	3718      	adds	r7, #24
 8018474:	46bd      	mov	sp, r7
 8018476:	bd80      	pop	{r7, pc}

08018478 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b084      	sub	sp, #16
 801847c:	af00      	add	r7, sp, #0
 801847e:	60f8      	str	r0, [r7, #12]
 8018480:	460b      	mov	r3, r1
 8018482:	607a      	str	r2, [r7, #4]
 8018484:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018486:	7afb      	ldrb	r3, [r7, #11]
 8018488:	4619      	mov	r1, r3
 801848a:	68f8      	ldr	r0, [r7, #12]
 801848c:	f7ff ffc2 	bl	8018414 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018490:	6878      	ldr	r0, [r7, #4]
 8018492:	f000 f91b 	bl	80186cc <SUBGRF_SetTx>
}
 8018496:	bf00      	nop
 8018498:	3710      	adds	r7, #16
 801849a:	46bd      	mov	sp, r7
 801849c:	bd80      	pop	{r7, pc}

0801849e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801849e:	b580      	push	{r7, lr}
 80184a0:	b082      	sub	sp, #8
 80184a2:	af00      	add	r7, sp, #0
 80184a4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80184a6:	2208      	movs	r2, #8
 80184a8:	6879      	ldr	r1, [r7, #4]
 80184aa:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80184ae:	f000 fe27 	bl	8019100 <SUBGRF_WriteRegisters>
    return 0;
 80184b2:	2300      	movs	r3, #0
}
 80184b4:	4618      	mov	r0, r3
 80184b6:	3708      	adds	r7, #8
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bd80      	pop	{r7, pc}

080184bc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80184bc:	b580      	push	{r7, lr}
 80184be:	b084      	sub	sp, #16
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	4603      	mov	r3, r0
 80184c4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80184c6:	88fb      	ldrh	r3, [r7, #6]
 80184c8:	0a1b      	lsrs	r3, r3, #8
 80184ca:	b29b      	uxth	r3, r3
 80184cc:	b2db      	uxtb	r3, r3
 80184ce:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80184d0:	88fb      	ldrh	r3, [r7, #6]
 80184d2:	b2db      	uxtb	r3, r3
 80184d4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80184d6:	f000 fb67 	bl	8018ba8 <SUBGRF_GetPacketType>
 80184da:	4603      	mov	r3, r0
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d108      	bne.n	80184f2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80184e0:	f107 030c 	add.w	r3, r7, #12
 80184e4:	2202      	movs	r2, #2
 80184e6:	4619      	mov	r1, r3
 80184e8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80184ec:	f000 fe08 	bl	8019100 <SUBGRF_WriteRegisters>
            break;
 80184f0:	e000      	b.n	80184f4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80184f2:	bf00      	nop
    }
}
 80184f4:	bf00      	nop
 80184f6:	3710      	adds	r7, #16
 80184f8:	46bd      	mov	sp, r7
 80184fa:	bd80      	pop	{r7, pc}

080184fc <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b084      	sub	sp, #16
 8018500:	af00      	add	r7, sp, #0
 8018502:	4603      	mov	r3, r0
 8018504:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018506:	88fb      	ldrh	r3, [r7, #6]
 8018508:	0a1b      	lsrs	r3, r3, #8
 801850a:	b29b      	uxth	r3, r3
 801850c:	b2db      	uxtb	r3, r3
 801850e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018510:	88fb      	ldrh	r3, [r7, #6]
 8018512:	b2db      	uxtb	r3, r3
 8018514:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018516:	f000 fb47 	bl	8018ba8 <SUBGRF_GetPacketType>
 801851a:	4603      	mov	r3, r0
 801851c:	2b00      	cmp	r3, #0
 801851e:	d108      	bne.n	8018532 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8018520:	f107 030c 	add.w	r3, r7, #12
 8018524:	2202      	movs	r2, #2
 8018526:	4619      	mov	r1, r3
 8018528:	f240 60be 	movw	r0, #1726	; 0x6be
 801852c:	f000 fde8 	bl	8019100 <SUBGRF_WriteRegisters>
            break;
 8018530:	e000      	b.n	8018534 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8018532:	bf00      	nop
    }
}
 8018534:	bf00      	nop
 8018536:	3710      	adds	r7, #16
 8018538:	46bd      	mov	sp, r7
 801853a:	bd80      	pop	{r7, pc}

0801853c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b084      	sub	sp, #16
 8018540:	af00      	add	r7, sp, #0
 8018542:	4603      	mov	r3, r0
 8018544:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8018546:	2300      	movs	r3, #0
 8018548:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801854a:	f000 fb2d 	bl	8018ba8 <SUBGRF_GetPacketType>
 801854e:	4603      	mov	r3, r0
 8018550:	2b00      	cmp	r3, #0
 8018552:	d121      	bne.n	8018598 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018554:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018558:	f000 fdbe 	bl	80190d8 <SUBGRF_ReadRegister>
 801855c:	4603      	mov	r3, r0
 801855e:	f023 0301 	bic.w	r3, r3, #1
 8018562:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018564:	88fb      	ldrh	r3, [r7, #6]
 8018566:	0a1b      	lsrs	r3, r3, #8
 8018568:	b29b      	uxth	r3, r3
 801856a:	b25b      	sxtb	r3, r3
 801856c:	f003 0301 	and.w	r3, r3, #1
 8018570:	b25a      	sxtb	r2, r3
 8018572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018576:	4313      	orrs	r3, r2
 8018578:	b25b      	sxtb	r3, r3
 801857a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801857c:	7bfb      	ldrb	r3, [r7, #15]
 801857e:	4619      	mov	r1, r3
 8018580:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018584:	f000 fd94 	bl	80190b0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018588:	88fb      	ldrh	r3, [r7, #6]
 801858a:	b2db      	uxtb	r3, r3
 801858c:	4619      	mov	r1, r3
 801858e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8018592:	f000 fd8d 	bl	80190b0 <SUBGRF_WriteRegister>
            break;
 8018596:	e000      	b.n	801859a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018598:	bf00      	nop
    }
}
 801859a:	bf00      	nop
 801859c:	3710      	adds	r7, #16
 801859e:	46bd      	mov	sp, r7
 80185a0:	bd80      	pop	{r7, pc}

080185a2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80185a2:	b580      	push	{r7, lr}
 80185a4:	b082      	sub	sp, #8
 80185a6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80185a8:	2300      	movs	r3, #0
 80185aa:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80185ac:	2300      	movs	r3, #0
 80185ae:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80185b0:	2300      	movs	r3, #0
 80185b2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80185b4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80185b8:	f000 fd8e 	bl	80190d8 <SUBGRF_ReadRegister>
 80185bc:	4603      	mov	r3, r0
 80185be:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80185c0:	79fb      	ldrb	r3, [r7, #7]
 80185c2:	f023 0301 	bic.w	r3, r3, #1
 80185c6:	b2db      	uxtb	r3, r3
 80185c8:	4619      	mov	r1, r3
 80185ca:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80185ce:	f000 fd6f 	bl	80190b0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80185d2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80185d6:	f000 fd7f 	bl	80190d8 <SUBGRF_ReadRegister>
 80185da:	4603      	mov	r3, r0
 80185dc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80185de:	79bb      	ldrb	r3, [r7, #6]
 80185e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80185e4:	b2db      	uxtb	r3, r3
 80185e6:	4619      	mov	r1, r3
 80185e8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80185ec:	f000 fd60 	bl	80190b0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80185f0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80185f4:	f000 f88a 	bl	801870c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80185f8:	463b      	mov	r3, r7
 80185fa:	2204      	movs	r2, #4
 80185fc:	4619      	mov	r1, r3
 80185fe:	f640 0019 	movw	r0, #2073	; 0x819
 8018602:	f000 fd9f 	bl	8019144 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8018606:	2000      	movs	r0, #0
 8018608:	f000 f844 	bl	8018694 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801860c:	79fb      	ldrb	r3, [r7, #7]
 801860e:	4619      	mov	r1, r3
 8018610:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018614:	f000 fd4c 	bl	80190b0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8018618:	79bb      	ldrb	r3, [r7, #6]
 801861a:	4619      	mov	r1, r3
 801861c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018620:	f000 fd46 	bl	80190b0 <SUBGRF_WriteRegister>

    return number;
 8018624:	683b      	ldr	r3, [r7, #0]
}
 8018626:	4618      	mov	r0, r3
 8018628:	3708      	adds	r7, #8
 801862a:	46bd      	mov	sp, r7
 801862c:	bd80      	pop	{r7, pc}
	...

08018630 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b084      	sub	sp, #16
 8018634:	af00      	add	r7, sp, #0
 8018636:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8018638:	2000      	movs	r0, #0
 801863a:	f7f2 f9b2 	bl	800a9a2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801863e:	2002      	movs	r0, #2
 8018640:	f000 ff1e 	bl	8019480 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018644:	793b      	ldrb	r3, [r7, #4]
 8018646:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801864a:	b2db      	uxtb	r3, r3
 801864c:	009b      	lsls	r3, r3, #2
 801864e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018650:	793b      	ldrb	r3, [r7, #4]
 8018652:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018656:	b2db      	uxtb	r3, r3
 8018658:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801865a:	b25b      	sxtb	r3, r3
 801865c:	4313      	orrs	r3, r2
 801865e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018660:	793b      	ldrb	r3, [r7, #4]
 8018662:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018666:	b2db      	uxtb	r3, r3
 8018668:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801866a:	4313      	orrs	r3, r2
 801866c:	b25b      	sxtb	r3, r3
 801866e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018670:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018672:	f107 030f 	add.w	r3, r7, #15
 8018676:	2201      	movs	r2, #1
 8018678:	4619      	mov	r1, r3
 801867a:	2084      	movs	r0, #132	; 0x84
 801867c:	f000 fdc8 	bl	8019210 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018680:	4b03      	ldr	r3, [pc, #12]	; (8018690 <SUBGRF_SetSleep+0x60>)
 8018682:	2200      	movs	r2, #0
 8018684:	701a      	strb	r2, [r3, #0]
}
 8018686:	bf00      	nop
 8018688:	3710      	adds	r7, #16
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}
 801868e:	bf00      	nop
 8018690:	20000ee4 	.word	0x20000ee4

08018694 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b082      	sub	sp, #8
 8018698:	af00      	add	r7, sp, #0
 801869a:	4603      	mov	r3, r0
 801869c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801869e:	1dfb      	adds	r3, r7, #7
 80186a0:	2201      	movs	r2, #1
 80186a2:	4619      	mov	r1, r3
 80186a4:	2080      	movs	r0, #128	; 0x80
 80186a6:	f000 fdb3 	bl	8019210 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80186aa:	79fb      	ldrb	r3, [r7, #7]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d103      	bne.n	80186b8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80186b0:	4b05      	ldr	r3, [pc, #20]	; (80186c8 <SUBGRF_SetStandby+0x34>)
 80186b2:	2201      	movs	r2, #1
 80186b4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80186b6:	e002      	b.n	80186be <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80186b8:	4b03      	ldr	r3, [pc, #12]	; (80186c8 <SUBGRF_SetStandby+0x34>)
 80186ba:	2202      	movs	r2, #2
 80186bc:	701a      	strb	r2, [r3, #0]
}
 80186be:	bf00      	nop
 80186c0:	3708      	adds	r7, #8
 80186c2:	46bd      	mov	sp, r7
 80186c4:	bd80      	pop	{r7, pc}
 80186c6:	bf00      	nop
 80186c8:	20000ee4 	.word	0x20000ee4

080186cc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b084      	sub	sp, #16
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80186d4:	4b0c      	ldr	r3, [pc, #48]	; (8018708 <SUBGRF_SetTx+0x3c>)
 80186d6:	2204      	movs	r2, #4
 80186d8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	0c1b      	lsrs	r3, r3, #16
 80186de:	b2db      	uxtb	r3, r3
 80186e0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	0a1b      	lsrs	r3, r3, #8
 80186e6:	b2db      	uxtb	r3, r3
 80186e8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	b2db      	uxtb	r3, r3
 80186ee:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80186f0:	f107 030c 	add.w	r3, r7, #12
 80186f4:	2203      	movs	r2, #3
 80186f6:	4619      	mov	r1, r3
 80186f8:	2083      	movs	r0, #131	; 0x83
 80186fa:	f000 fd89 	bl	8019210 <SUBGRF_WriteCommand>
}
 80186fe:	bf00      	nop
 8018700:	3710      	adds	r7, #16
 8018702:	46bd      	mov	sp, r7
 8018704:	bd80      	pop	{r7, pc}
 8018706:	bf00      	nop
 8018708:	20000ee4 	.word	0x20000ee4

0801870c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b084      	sub	sp, #16
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018714:	4b0c      	ldr	r3, [pc, #48]	; (8018748 <SUBGRF_SetRx+0x3c>)
 8018716:	2205      	movs	r2, #5
 8018718:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	0c1b      	lsrs	r3, r3, #16
 801871e:	b2db      	uxtb	r3, r3
 8018720:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	0a1b      	lsrs	r3, r3, #8
 8018726:	b2db      	uxtb	r3, r3
 8018728:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	b2db      	uxtb	r3, r3
 801872e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018730:	f107 030c 	add.w	r3, r7, #12
 8018734:	2203      	movs	r2, #3
 8018736:	4619      	mov	r1, r3
 8018738:	2082      	movs	r0, #130	; 0x82
 801873a:	f000 fd69 	bl	8019210 <SUBGRF_WriteCommand>
}
 801873e:	bf00      	nop
 8018740:	3710      	adds	r7, #16
 8018742:	46bd      	mov	sp, r7
 8018744:	bd80      	pop	{r7, pc}
 8018746:	bf00      	nop
 8018748:	20000ee4 	.word	0x20000ee4

0801874c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b084      	sub	sp, #16
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018754:	4b0e      	ldr	r3, [pc, #56]	; (8018790 <SUBGRF_SetRxBoosted+0x44>)
 8018756:	2205      	movs	r2, #5
 8018758:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801875a:	2197      	movs	r1, #151	; 0x97
 801875c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8018760:	f000 fca6 	bl	80190b0 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	0c1b      	lsrs	r3, r3, #16
 8018768:	b2db      	uxtb	r3, r3
 801876a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	0a1b      	lsrs	r3, r3, #8
 8018770:	b2db      	uxtb	r3, r3
 8018772:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	b2db      	uxtb	r3, r3
 8018778:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801877a:	f107 030c 	add.w	r3, r7, #12
 801877e:	2203      	movs	r2, #3
 8018780:	4619      	mov	r1, r3
 8018782:	2082      	movs	r0, #130	; 0x82
 8018784:	f000 fd44 	bl	8019210 <SUBGRF_WriteCommand>
}
 8018788:	bf00      	nop
 801878a:	3710      	adds	r7, #16
 801878c:	46bd      	mov	sp, r7
 801878e:	bd80      	pop	{r7, pc}
 8018790:	20000ee4 	.word	0x20000ee4

08018794 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b084      	sub	sp, #16
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
 801879c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	0c1b      	lsrs	r3, r3, #16
 80187a2:	b2db      	uxtb	r3, r3
 80187a4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	0a1b      	lsrs	r3, r3, #8
 80187aa:	b2db      	uxtb	r3, r3
 80187ac:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	b2db      	uxtb	r3, r3
 80187b2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80187b4:	683b      	ldr	r3, [r7, #0]
 80187b6:	0c1b      	lsrs	r3, r3, #16
 80187b8:	b2db      	uxtb	r3, r3
 80187ba:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80187bc:	683b      	ldr	r3, [r7, #0]
 80187be:	0a1b      	lsrs	r3, r3, #8
 80187c0:	b2db      	uxtb	r3, r3
 80187c2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80187c4:	683b      	ldr	r3, [r7, #0]
 80187c6:	b2db      	uxtb	r3, r3
 80187c8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80187ca:	f107 0308 	add.w	r3, r7, #8
 80187ce:	2206      	movs	r2, #6
 80187d0:	4619      	mov	r1, r3
 80187d2:	2094      	movs	r0, #148	; 0x94
 80187d4:	f000 fd1c 	bl	8019210 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80187d8:	4b03      	ldr	r3, [pc, #12]	; (80187e8 <SUBGRF_SetRxDutyCycle+0x54>)
 80187da:	2206      	movs	r2, #6
 80187dc:	701a      	strb	r2, [r3, #0]
}
 80187de:	bf00      	nop
 80187e0:	3710      	adds	r7, #16
 80187e2:	46bd      	mov	sp, r7
 80187e4:	bd80      	pop	{r7, pc}
 80187e6:	bf00      	nop
 80187e8:	20000ee4 	.word	0x20000ee4

080187ec <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80187f0:	2200      	movs	r2, #0
 80187f2:	2100      	movs	r1, #0
 80187f4:	20c5      	movs	r0, #197	; 0xc5
 80187f6:	f000 fd0b 	bl	8019210 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80187fa:	4b02      	ldr	r3, [pc, #8]	; (8018804 <SUBGRF_SetCad+0x18>)
 80187fc:	2207      	movs	r2, #7
 80187fe:	701a      	strb	r2, [r3, #0]
}
 8018800:	bf00      	nop
 8018802:	bd80      	pop	{r7, pc}
 8018804:	20000ee4 	.word	0x20000ee4

08018808 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018808:	b580      	push	{r7, lr}
 801880a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801880c:	2200      	movs	r2, #0
 801880e:	2100      	movs	r1, #0
 8018810:	20d1      	movs	r0, #209	; 0xd1
 8018812:	f000 fcfd 	bl	8019210 <SUBGRF_WriteCommand>
}
 8018816:	bf00      	nop
 8018818:	bd80      	pop	{r7, pc}

0801881a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801881a:	b580      	push	{r7, lr}
 801881c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801881e:	2200      	movs	r2, #0
 8018820:	2100      	movs	r1, #0
 8018822:	20d2      	movs	r0, #210	; 0xd2
 8018824:	f000 fcf4 	bl	8019210 <SUBGRF_WriteCommand>
}
 8018828:	bf00      	nop
 801882a:	bd80      	pop	{r7, pc}

0801882c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b082      	sub	sp, #8
 8018830:	af00      	add	r7, sp, #0
 8018832:	4603      	mov	r3, r0
 8018834:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018836:	1dfb      	adds	r3, r7, #7
 8018838:	2201      	movs	r2, #1
 801883a:	4619      	mov	r1, r3
 801883c:	209f      	movs	r0, #159	; 0x9f
 801883e:	f000 fce7 	bl	8019210 <SUBGRF_WriteCommand>
}
 8018842:	bf00      	nop
 8018844:	3708      	adds	r7, #8
 8018846:	46bd      	mov	sp, r7
 8018848:	bd80      	pop	{r7, pc}

0801884a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801884a:	b580      	push	{r7, lr}
 801884c:	b084      	sub	sp, #16
 801884e:	af00      	add	r7, sp, #0
 8018850:	4603      	mov	r3, r0
 8018852:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018854:	1dfb      	adds	r3, r7, #7
 8018856:	2201      	movs	r2, #1
 8018858:	4619      	mov	r1, r3
 801885a:	20a0      	movs	r0, #160	; 0xa0
 801885c:	f000 fcd8 	bl	8019210 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018860:	79fb      	ldrb	r3, [r7, #7]
 8018862:	2b3f      	cmp	r3, #63	; 0x3f
 8018864:	d91c      	bls.n	80188a0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018866:	79fb      	ldrb	r3, [r7, #7]
 8018868:	085b      	lsrs	r3, r3, #1
 801886a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801886c:	2300      	movs	r3, #0
 801886e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018870:	2300      	movs	r3, #0
 8018872:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018874:	e005      	b.n	8018882 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018876:	7bfb      	ldrb	r3, [r7, #15]
 8018878:	089b      	lsrs	r3, r3, #2
 801887a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801887c:	7bbb      	ldrb	r3, [r7, #14]
 801887e:	3301      	adds	r3, #1
 8018880:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018882:	7bfb      	ldrb	r3, [r7, #15]
 8018884:	2b1f      	cmp	r3, #31
 8018886:	d8f6      	bhi.n	8018876 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018888:	7bfb      	ldrb	r3, [r7, #15]
 801888a:	00db      	lsls	r3, r3, #3
 801888c:	b2da      	uxtb	r2, r3
 801888e:	7bbb      	ldrb	r3, [r7, #14]
 8018890:	4413      	add	r3, r2
 8018892:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018894:	7b7b      	ldrb	r3, [r7, #13]
 8018896:	4619      	mov	r1, r3
 8018898:	f240 7006 	movw	r0, #1798	; 0x706
 801889c:	f000 fc08 	bl	80190b0 <SUBGRF_WriteRegister>
    }
}
 80188a0:	bf00      	nop
 80188a2:	3710      	adds	r7, #16
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}

080188a8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b082      	sub	sp, #8
 80188ac:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80188ae:	f7f2 f894 	bl	800a9da <RBI_IsDCDC>
 80188b2:	4603      	mov	r3, r0
 80188b4:	2b01      	cmp	r3, #1
 80188b6:	d102      	bne.n	80188be <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80188b8:	2301      	movs	r3, #1
 80188ba:	71fb      	strb	r3, [r7, #7]
 80188bc:	e001      	b.n	80188c2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80188be:	2300      	movs	r3, #0
 80188c0:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80188c2:	1dfb      	adds	r3, r7, #7
 80188c4:	2201      	movs	r2, #1
 80188c6:	4619      	mov	r1, r3
 80188c8:	2096      	movs	r0, #150	; 0x96
 80188ca:	f000 fca1 	bl	8019210 <SUBGRF_WriteCommand>
}
 80188ce:	bf00      	nop
 80188d0:	3708      	adds	r7, #8
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd80      	pop	{r7, pc}

080188d6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80188d6:	b580      	push	{r7, lr}
 80188d8:	b084      	sub	sp, #16
 80188da:	af00      	add	r7, sp, #0
 80188dc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80188de:	793b      	ldrb	r3, [r7, #4]
 80188e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80188e4:	b2db      	uxtb	r3, r3
 80188e6:	019b      	lsls	r3, r3, #6
 80188e8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80188ea:	793b      	ldrb	r3, [r7, #4]
 80188ec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80188f0:	b2db      	uxtb	r3, r3
 80188f2:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80188f4:	b25b      	sxtb	r3, r3
 80188f6:	4313      	orrs	r3, r2
 80188f8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80188fa:	793b      	ldrb	r3, [r7, #4]
 80188fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018900:	b2db      	uxtb	r3, r3
 8018902:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018904:	b25b      	sxtb	r3, r3
 8018906:	4313      	orrs	r3, r2
 8018908:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801890a:	793b      	ldrb	r3, [r7, #4]
 801890c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018910:	b2db      	uxtb	r3, r3
 8018912:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018914:	b25b      	sxtb	r3, r3
 8018916:	4313      	orrs	r3, r2
 8018918:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801891a:	793b      	ldrb	r3, [r7, #4]
 801891c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018920:	b2db      	uxtb	r3, r3
 8018922:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018924:	b25b      	sxtb	r3, r3
 8018926:	4313      	orrs	r3, r2
 8018928:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801892a:	793b      	ldrb	r3, [r7, #4]
 801892c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018930:	b2db      	uxtb	r3, r3
 8018932:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018934:	b25b      	sxtb	r3, r3
 8018936:	4313      	orrs	r3, r2
 8018938:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801893a:	793b      	ldrb	r3, [r7, #4]
 801893c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018940:	b2db      	uxtb	r3, r3
 8018942:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018944:	4313      	orrs	r3, r2
 8018946:	b25b      	sxtb	r3, r3
 8018948:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801894a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801894c:	f107 030f 	add.w	r3, r7, #15
 8018950:	2201      	movs	r2, #1
 8018952:	4619      	mov	r1, r3
 8018954:	2089      	movs	r0, #137	; 0x89
 8018956:	f000 fc5b 	bl	8019210 <SUBGRF_WriteCommand>
}
 801895a:	bf00      	nop
 801895c:	3710      	adds	r7, #16
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}
	...

08018964 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b084      	sub	sp, #16
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	4a1b      	ldr	r2, [pc, #108]	; (80189dc <SUBGRF_CalibrateImage+0x78>)
 8018970:	4293      	cmp	r3, r2
 8018972:	d904      	bls.n	801897e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018974:	23e1      	movs	r3, #225	; 0xe1
 8018976:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8018978:	23e9      	movs	r3, #233	; 0xe9
 801897a:	737b      	strb	r3, [r7, #13]
 801897c:	e022      	b.n	80189c4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	4a17      	ldr	r2, [pc, #92]	; (80189e0 <SUBGRF_CalibrateImage+0x7c>)
 8018982:	4293      	cmp	r3, r2
 8018984:	d904      	bls.n	8018990 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8018986:	23d7      	movs	r3, #215	; 0xd7
 8018988:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801898a:	23db      	movs	r3, #219	; 0xdb
 801898c:	737b      	strb	r3, [r7, #13]
 801898e:	e019      	b.n	80189c4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	4a14      	ldr	r2, [pc, #80]	; (80189e4 <SUBGRF_CalibrateImage+0x80>)
 8018994:	4293      	cmp	r3, r2
 8018996:	d904      	bls.n	80189a2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8018998:	23c1      	movs	r3, #193	; 0xc1
 801899a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801899c:	23c5      	movs	r3, #197	; 0xc5
 801899e:	737b      	strb	r3, [r7, #13]
 80189a0:	e010      	b.n	80189c4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	4a10      	ldr	r2, [pc, #64]	; (80189e8 <SUBGRF_CalibrateImage+0x84>)
 80189a6:	4293      	cmp	r3, r2
 80189a8:	d904      	bls.n	80189b4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80189aa:	2375      	movs	r3, #117	; 0x75
 80189ac:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80189ae:	2381      	movs	r3, #129	; 0x81
 80189b0:	737b      	strb	r3, [r7, #13]
 80189b2:	e007      	b.n	80189c4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	4a0d      	ldr	r2, [pc, #52]	; (80189ec <SUBGRF_CalibrateImage+0x88>)
 80189b8:	4293      	cmp	r3, r2
 80189ba:	d903      	bls.n	80189c4 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80189bc:	236b      	movs	r3, #107	; 0x6b
 80189be:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80189c0:	236f      	movs	r3, #111	; 0x6f
 80189c2:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80189c4:	f107 030c 	add.w	r3, r7, #12
 80189c8:	2202      	movs	r2, #2
 80189ca:	4619      	mov	r1, r3
 80189cc:	2098      	movs	r0, #152	; 0x98
 80189ce:	f000 fc1f 	bl	8019210 <SUBGRF_WriteCommand>
}
 80189d2:	bf00      	nop
 80189d4:	3710      	adds	r7, #16
 80189d6:	46bd      	mov	sp, r7
 80189d8:	bd80      	pop	{r7, pc}
 80189da:	bf00      	nop
 80189dc:	35a4e900 	.word	0x35a4e900
 80189e0:	32a9f880 	.word	0x32a9f880
 80189e4:	2de54480 	.word	0x2de54480
 80189e8:	1b6b0b00 	.word	0x1b6b0b00
 80189ec:	1954fc40 	.word	0x1954fc40

080189f0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80189f0:	b590      	push	{r4, r7, lr}
 80189f2:	b085      	sub	sp, #20
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	4604      	mov	r4, r0
 80189f8:	4608      	mov	r0, r1
 80189fa:	4611      	mov	r1, r2
 80189fc:	461a      	mov	r2, r3
 80189fe:	4623      	mov	r3, r4
 8018a00:	71fb      	strb	r3, [r7, #7]
 8018a02:	4603      	mov	r3, r0
 8018a04:	71bb      	strb	r3, [r7, #6]
 8018a06:	460b      	mov	r3, r1
 8018a08:	717b      	strb	r3, [r7, #5]
 8018a0a:	4613      	mov	r3, r2
 8018a0c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018a0e:	79fb      	ldrb	r3, [r7, #7]
 8018a10:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018a12:	79bb      	ldrb	r3, [r7, #6]
 8018a14:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018a16:	797b      	ldrb	r3, [r7, #5]
 8018a18:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018a1a:	793b      	ldrb	r3, [r7, #4]
 8018a1c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018a1e:	f107 030c 	add.w	r3, r7, #12
 8018a22:	2204      	movs	r2, #4
 8018a24:	4619      	mov	r1, r3
 8018a26:	2095      	movs	r0, #149	; 0x95
 8018a28:	f000 fbf2 	bl	8019210 <SUBGRF_WriteCommand>
}
 8018a2c:	bf00      	nop
 8018a2e:	3714      	adds	r7, #20
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd90      	pop	{r4, r7, pc}

08018a34 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018a34:	b590      	push	{r4, r7, lr}
 8018a36:	b085      	sub	sp, #20
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	4604      	mov	r4, r0
 8018a3c:	4608      	mov	r0, r1
 8018a3e:	4611      	mov	r1, r2
 8018a40:	461a      	mov	r2, r3
 8018a42:	4623      	mov	r3, r4
 8018a44:	80fb      	strh	r3, [r7, #6]
 8018a46:	4603      	mov	r3, r0
 8018a48:	80bb      	strh	r3, [r7, #4]
 8018a4a:	460b      	mov	r3, r1
 8018a4c:	807b      	strh	r3, [r7, #2]
 8018a4e:	4613      	mov	r3, r2
 8018a50:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018a52:	88fb      	ldrh	r3, [r7, #6]
 8018a54:	0a1b      	lsrs	r3, r3, #8
 8018a56:	b29b      	uxth	r3, r3
 8018a58:	b2db      	uxtb	r3, r3
 8018a5a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018a5c:	88fb      	ldrh	r3, [r7, #6]
 8018a5e:	b2db      	uxtb	r3, r3
 8018a60:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018a62:	88bb      	ldrh	r3, [r7, #4]
 8018a64:	0a1b      	lsrs	r3, r3, #8
 8018a66:	b29b      	uxth	r3, r3
 8018a68:	b2db      	uxtb	r3, r3
 8018a6a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018a6c:	88bb      	ldrh	r3, [r7, #4]
 8018a6e:	b2db      	uxtb	r3, r3
 8018a70:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018a72:	887b      	ldrh	r3, [r7, #2]
 8018a74:	0a1b      	lsrs	r3, r3, #8
 8018a76:	b29b      	uxth	r3, r3
 8018a78:	b2db      	uxtb	r3, r3
 8018a7a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018a7c:	887b      	ldrh	r3, [r7, #2]
 8018a7e:	b2db      	uxtb	r3, r3
 8018a80:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018a82:	883b      	ldrh	r3, [r7, #0]
 8018a84:	0a1b      	lsrs	r3, r3, #8
 8018a86:	b29b      	uxth	r3, r3
 8018a88:	b2db      	uxtb	r3, r3
 8018a8a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018a8c:	883b      	ldrh	r3, [r7, #0]
 8018a8e:	b2db      	uxtb	r3, r3
 8018a90:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018a92:	f107 0308 	add.w	r3, r7, #8
 8018a96:	2208      	movs	r2, #8
 8018a98:	4619      	mov	r1, r3
 8018a9a:	2008      	movs	r0, #8
 8018a9c:	f000 fbb8 	bl	8019210 <SUBGRF_WriteCommand>
}
 8018aa0:	bf00      	nop
 8018aa2:	3714      	adds	r7, #20
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd90      	pop	{r4, r7, pc}

08018aa8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b084      	sub	sp, #16
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	4603      	mov	r3, r0
 8018ab0:	6039      	str	r1, [r7, #0]
 8018ab2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018ab4:	79fb      	ldrb	r3, [r7, #7]
 8018ab6:	f003 0307 	and.w	r3, r3, #7
 8018aba:	b2db      	uxtb	r3, r3
 8018abc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018abe:	683b      	ldr	r3, [r7, #0]
 8018ac0:	0c1b      	lsrs	r3, r3, #16
 8018ac2:	b2db      	uxtb	r3, r3
 8018ac4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018ac6:	683b      	ldr	r3, [r7, #0]
 8018ac8:	0a1b      	lsrs	r3, r3, #8
 8018aca:	b2db      	uxtb	r3, r3
 8018acc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018ace:	683b      	ldr	r3, [r7, #0]
 8018ad0:	b2db      	uxtb	r3, r3
 8018ad2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018ad4:	f107 030c 	add.w	r3, r7, #12
 8018ad8:	2204      	movs	r2, #4
 8018ada:	4619      	mov	r1, r3
 8018adc:	2097      	movs	r0, #151	; 0x97
 8018ade:	f000 fb97 	bl	8019210 <SUBGRF_WriteCommand>
}
 8018ae2:	bf00      	nop
 8018ae4:	3710      	adds	r7, #16
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	bd80      	pop	{r7, pc}
	...

08018aec <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018aec:	b5b0      	push	{r4, r5, r7, lr}
 8018aee:	b084      	sub	sp, #16
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018af4:	2300      	movs	r3, #0
 8018af6:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018af8:	4b1b      	ldr	r3, [pc, #108]	; (8018b68 <SUBGRF_SetRfFrequency+0x7c>)
 8018afa:	781b      	ldrb	r3, [r3, #0]
 8018afc:	f083 0301 	eor.w	r3, r3, #1
 8018b00:	b2db      	uxtb	r3, r3
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d005      	beq.n	8018b12 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8018b06:	6878      	ldr	r0, [r7, #4]
 8018b08:	f7ff ff2c 	bl	8018964 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018b0c:	4b16      	ldr	r3, [pc, #88]	; (8018b68 <SUBGRF_SetRfFrequency+0x7c>)
 8018b0e:	2201      	movs	r2, #1
 8018b10:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	461a      	mov	r2, r3
 8018b16:	f04f 0300 	mov.w	r3, #0
 8018b1a:	09d5      	lsrs	r5, r2, #7
 8018b1c:	0654      	lsls	r4, r2, #25
 8018b1e:	4a13      	ldr	r2, [pc, #76]	; (8018b6c <SUBGRF_SetRfFrequency+0x80>)
 8018b20:	f04f 0300 	mov.w	r3, #0
 8018b24:	4620      	mov	r0, r4
 8018b26:	4629      	mov	r1, r5
 8018b28:	f7e8 f818 	bl	8000b5c <__aeabi_uldivmod>
 8018b2c:	4602      	mov	r2, r0
 8018b2e:	460b      	mov	r3, r1
 8018b30:	4613      	mov	r3, r2
 8018b32:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	0e1b      	lsrs	r3, r3, #24
 8018b38:	b2db      	uxtb	r3, r3
 8018b3a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	0c1b      	lsrs	r3, r3, #16
 8018b40:	b2db      	uxtb	r3, r3
 8018b42:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	0a1b      	lsrs	r3, r3, #8
 8018b48:	b2db      	uxtb	r3, r3
 8018b4a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	b2db      	uxtb	r3, r3
 8018b50:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018b52:	f107 0308 	add.w	r3, r7, #8
 8018b56:	2204      	movs	r2, #4
 8018b58:	4619      	mov	r1, r3
 8018b5a:	2086      	movs	r0, #134	; 0x86
 8018b5c:	f000 fb58 	bl	8019210 <SUBGRF_WriteCommand>
}
 8018b60:	bf00      	nop
 8018b62:	3710      	adds	r7, #16
 8018b64:	46bd      	mov	sp, r7
 8018b66:	bdb0      	pop	{r4, r5, r7, pc}
 8018b68:	20000eec 	.word	0x20000eec
 8018b6c:	01e84800 	.word	0x01e84800

08018b70 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018b70:	b580      	push	{r7, lr}
 8018b72:	b082      	sub	sp, #8
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	4603      	mov	r3, r0
 8018b78:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018b7a:	79fa      	ldrb	r2, [r7, #7]
 8018b7c:	4b09      	ldr	r3, [pc, #36]	; (8018ba4 <SUBGRF_SetPacketType+0x34>)
 8018b7e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018b80:	79fb      	ldrb	r3, [r7, #7]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d104      	bne.n	8018b90 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018b86:	2100      	movs	r1, #0
 8018b88:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018b8c:	f000 fa90 	bl	80190b0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018b90:	1dfb      	adds	r3, r7, #7
 8018b92:	2201      	movs	r2, #1
 8018b94:	4619      	mov	r1, r3
 8018b96:	208a      	movs	r0, #138	; 0x8a
 8018b98:	f000 fb3a 	bl	8019210 <SUBGRF_WriteCommand>
}
 8018b9c:	bf00      	nop
 8018b9e:	3708      	adds	r7, #8
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}
 8018ba4:	20000ee5 	.word	0x20000ee5

08018ba8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018ba8:	b480      	push	{r7}
 8018baa:	af00      	add	r7, sp, #0
    return PacketType;
 8018bac:	4b02      	ldr	r3, [pc, #8]	; (8018bb8 <SUBGRF_GetPacketType+0x10>)
 8018bae:	781b      	ldrb	r3, [r3, #0]
}
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	46bd      	mov	sp, r7
 8018bb4:	bc80      	pop	{r7}
 8018bb6:	4770      	bx	lr
 8018bb8:	20000ee5 	.word	0x20000ee5

08018bbc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	b084      	sub	sp, #16
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	4603      	mov	r3, r0
 8018bc4:	71fb      	strb	r3, [r7, #7]
 8018bc6:	460b      	mov	r3, r1
 8018bc8:	71bb      	strb	r3, [r7, #6]
 8018bca:	4613      	mov	r3, r2
 8018bcc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8018bce:	79fb      	ldrb	r3, [r7, #7]
 8018bd0:	2b01      	cmp	r3, #1
 8018bd2:	d124      	bne.n	8018c1e <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8018bd4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018bd8:	2b0f      	cmp	r3, #15
 8018bda:	d106      	bne.n	8018bea <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8018bdc:	2301      	movs	r3, #1
 8018bde:	2201      	movs	r2, #1
 8018be0:	2100      	movs	r1, #0
 8018be2:	2006      	movs	r0, #6
 8018be4:	f7ff ff04 	bl	80189f0 <SUBGRF_SetPaConfig>
 8018be8:	e005      	b.n	8018bf6 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8018bea:	2301      	movs	r3, #1
 8018bec:	2201      	movs	r2, #1
 8018bee:	2100      	movs	r1, #0
 8018bf0:	2004      	movs	r0, #4
 8018bf2:	f7ff fefd 	bl	80189f0 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8018bf6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018bfa:	2b0d      	cmp	r3, #13
 8018bfc:	dd02      	ble.n	8018c04 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8018bfe:	230e      	movs	r3, #14
 8018c00:	71bb      	strb	r3, [r7, #6]
 8018c02:	e006      	b.n	8018c12 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8018c04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c08:	f113 0f11 	cmn.w	r3, #17
 8018c0c:	da01      	bge.n	8018c12 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8018c0e:	23ef      	movs	r3, #239	; 0xef
 8018c10:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8018c12:	2118      	movs	r1, #24
 8018c14:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018c18:	f000 fa4a 	bl	80190b0 <SUBGRF_WriteRegister>
 8018c1c:	e025      	b.n	8018c6a <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8018c1e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018c22:	f000 fa59 	bl	80190d8 <SUBGRF_ReadRegister>
 8018c26:	4603      	mov	r3, r0
 8018c28:	f043 031e 	orr.w	r3, r3, #30
 8018c2c:	b2db      	uxtb	r3, r3
 8018c2e:	4619      	mov	r1, r3
 8018c30:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018c34:	f000 fa3c 	bl	80190b0 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8018c38:	2301      	movs	r3, #1
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	2107      	movs	r1, #7
 8018c3e:	2004      	movs	r0, #4
 8018c40:	f7ff fed6 	bl	80189f0 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8018c44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c48:	2b16      	cmp	r3, #22
 8018c4a:	dd02      	ble.n	8018c52 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8018c4c:	2316      	movs	r3, #22
 8018c4e:	71bb      	strb	r3, [r7, #6]
 8018c50:	e006      	b.n	8018c60 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8018c52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c56:	f113 0f09 	cmn.w	r3, #9
 8018c5a:	da01      	bge.n	8018c60 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8018c5c:	23f7      	movs	r3, #247	; 0xf7
 8018c5e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8018c60:	2138      	movs	r1, #56	; 0x38
 8018c62:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018c66:	f000 fa23 	bl	80190b0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018c6a:	79bb      	ldrb	r3, [r7, #6]
 8018c6c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8018c6e:	797b      	ldrb	r3, [r7, #5]
 8018c70:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8018c72:	f107 030c 	add.w	r3, r7, #12
 8018c76:	2202      	movs	r2, #2
 8018c78:	4619      	mov	r1, r3
 8018c7a:	208e      	movs	r0, #142	; 0x8e
 8018c7c:	f000 fac8 	bl	8019210 <SUBGRF_WriteCommand>
}
 8018c80:	bf00      	nop
 8018c82:	3710      	adds	r7, #16
 8018c84:	46bd      	mov	sp, r7
 8018c86:	bd80      	pop	{r7, pc}

08018c88 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018c88:	b5b0      	push	{r4, r5, r7, lr}
 8018c8a:	b086      	sub	sp, #24
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018c90:	2300      	movs	r3, #0
 8018c92:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018c94:	4a5e      	ldr	r2, [pc, #376]	; (8018e10 <SUBGRF_SetModulationParams+0x188>)
 8018c96:	f107 0308 	add.w	r3, r7, #8
 8018c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c9e:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	781a      	ldrb	r2, [r3, #0]
 8018ca6:	4b5b      	ldr	r3, [pc, #364]	; (8018e14 <SUBGRF_SetModulationParams+0x18c>)
 8018ca8:	781b      	ldrb	r3, [r3, #0]
 8018caa:	429a      	cmp	r2, r3
 8018cac:	d004      	beq.n	8018cb8 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	781b      	ldrb	r3, [r3, #0]
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	f7ff ff5c 	bl	8018b70 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	781b      	ldrb	r3, [r3, #0]
 8018cbc:	2b03      	cmp	r3, #3
 8018cbe:	f200 80a2 	bhi.w	8018e06 <SUBGRF_SetModulationParams+0x17e>
 8018cc2:	a201      	add	r2, pc, #4	; (adr r2, 8018cc8 <SUBGRF_SetModulationParams+0x40>)
 8018cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cc8:	08018cd9 	.word	0x08018cd9
 8018ccc:	08018d95 	.word	0x08018d95
 8018cd0:	08018d57 	.word	0x08018d57
 8018cd4:	08018dc3 	.word	0x08018dc3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018cd8:	2308      	movs	r3, #8
 8018cda:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	685b      	ldr	r3, [r3, #4]
 8018ce0:	4a4d      	ldr	r2, [pc, #308]	; (8018e18 <SUBGRF_SetModulationParams+0x190>)
 8018ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8018ce6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018ce8:	697b      	ldr	r3, [r7, #20]
 8018cea:	0c1b      	lsrs	r3, r3, #16
 8018cec:	b2db      	uxtb	r3, r3
 8018cee:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018cf0:	697b      	ldr	r3, [r7, #20]
 8018cf2:	0a1b      	lsrs	r3, r3, #8
 8018cf4:	b2db      	uxtb	r3, r3
 8018cf6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	b2db      	uxtb	r3, r3
 8018cfc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	7b1b      	ldrb	r3, [r3, #12]
 8018d02:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	7b5b      	ldrb	r3, [r3, #13]
 8018d08:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	689b      	ldr	r3, [r3, #8]
 8018d0e:	461a      	mov	r2, r3
 8018d10:	f04f 0300 	mov.w	r3, #0
 8018d14:	09d5      	lsrs	r5, r2, #7
 8018d16:	0654      	lsls	r4, r2, #25
 8018d18:	4a40      	ldr	r2, [pc, #256]	; (8018e1c <SUBGRF_SetModulationParams+0x194>)
 8018d1a:	f04f 0300 	mov.w	r3, #0
 8018d1e:	4620      	mov	r0, r4
 8018d20:	4629      	mov	r1, r5
 8018d22:	f7e7 ff1b 	bl	8000b5c <__aeabi_uldivmod>
 8018d26:	4602      	mov	r2, r0
 8018d28:	460b      	mov	r3, r1
 8018d2a:	4613      	mov	r3, r2
 8018d2c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018d2e:	697b      	ldr	r3, [r7, #20]
 8018d30:	0c1b      	lsrs	r3, r3, #16
 8018d32:	b2db      	uxtb	r3, r3
 8018d34:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018d36:	697b      	ldr	r3, [r7, #20]
 8018d38:	0a1b      	lsrs	r3, r3, #8
 8018d3a:	b2db      	uxtb	r3, r3
 8018d3c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018d3e:	697b      	ldr	r3, [r7, #20]
 8018d40:	b2db      	uxtb	r3, r3
 8018d42:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018d44:	7cfb      	ldrb	r3, [r7, #19]
 8018d46:	b29a      	uxth	r2, r3
 8018d48:	f107 0308 	add.w	r3, r7, #8
 8018d4c:	4619      	mov	r1, r3
 8018d4e:	208b      	movs	r0, #139	; 0x8b
 8018d50:	f000 fa5e 	bl	8019210 <SUBGRF_WriteCommand>
        break;
 8018d54:	e058      	b.n	8018e08 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8018d56:	2304      	movs	r3, #4
 8018d58:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	691b      	ldr	r3, [r3, #16]
 8018d5e:	4a2e      	ldr	r2, [pc, #184]	; (8018e18 <SUBGRF_SetModulationParams+0x190>)
 8018d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d64:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018d66:	697b      	ldr	r3, [r7, #20]
 8018d68:	0c1b      	lsrs	r3, r3, #16
 8018d6a:	b2db      	uxtb	r3, r3
 8018d6c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018d6e:	697b      	ldr	r3, [r7, #20]
 8018d70:	0a1b      	lsrs	r3, r3, #8
 8018d72:	b2db      	uxtb	r3, r3
 8018d74:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018d76:	697b      	ldr	r3, [r7, #20]
 8018d78:	b2db      	uxtb	r3, r3
 8018d7a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	7d1b      	ldrb	r3, [r3, #20]
 8018d80:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018d82:	7cfb      	ldrb	r3, [r7, #19]
 8018d84:	b29a      	uxth	r2, r3
 8018d86:	f107 0308 	add.w	r3, r7, #8
 8018d8a:	4619      	mov	r1, r3
 8018d8c:	208b      	movs	r0, #139	; 0x8b
 8018d8e:	f000 fa3f 	bl	8019210 <SUBGRF_WriteCommand>
        break;
 8018d92:	e039      	b.n	8018e08 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8018d94:	2304      	movs	r3, #4
 8018d96:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	7e1b      	ldrb	r3, [r3, #24]
 8018d9c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	7e5b      	ldrb	r3, [r3, #25]
 8018da2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	7e9b      	ldrb	r3, [r3, #26]
 8018da8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	7edb      	ldrb	r3, [r3, #27]
 8018dae:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018db0:	7cfb      	ldrb	r3, [r7, #19]
 8018db2:	b29a      	uxth	r2, r3
 8018db4:	f107 0308 	add.w	r3, r7, #8
 8018db8:	4619      	mov	r1, r3
 8018dba:	208b      	movs	r0, #139	; 0x8b
 8018dbc:	f000 fa28 	bl	8019210 <SUBGRF_WriteCommand>

        break;
 8018dc0:	e022      	b.n	8018e08 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018dc2:	2305      	movs	r3, #5
 8018dc4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	685b      	ldr	r3, [r3, #4]
 8018dca:	4a13      	ldr	r2, [pc, #76]	; (8018e18 <SUBGRF_SetModulationParams+0x190>)
 8018dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8018dd0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018dd2:	697b      	ldr	r3, [r7, #20]
 8018dd4:	0c1b      	lsrs	r3, r3, #16
 8018dd6:	b2db      	uxtb	r3, r3
 8018dd8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018dda:	697b      	ldr	r3, [r7, #20]
 8018ddc:	0a1b      	lsrs	r3, r3, #8
 8018dde:	b2db      	uxtb	r3, r3
 8018de0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018de2:	697b      	ldr	r3, [r7, #20]
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	7b1b      	ldrb	r3, [r3, #12]
 8018dec:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	7b5b      	ldrb	r3, [r3, #13]
 8018df2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018df4:	7cfb      	ldrb	r3, [r7, #19]
 8018df6:	b29a      	uxth	r2, r3
 8018df8:	f107 0308 	add.w	r3, r7, #8
 8018dfc:	4619      	mov	r1, r3
 8018dfe:	208b      	movs	r0, #139	; 0x8b
 8018e00:	f000 fa06 	bl	8019210 <SUBGRF_WriteCommand>
        break;
 8018e04:	e000      	b.n	8018e08 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8018e06:	bf00      	nop
    }
}
 8018e08:	bf00      	nop
 8018e0a:	3718      	adds	r7, #24
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8018e10:	0801b53c 	.word	0x0801b53c
 8018e14:	20000ee5 	.word	0x20000ee5
 8018e18:	3d090000 	.word	0x3d090000
 8018e1c:	01e84800 	.word	0x01e84800

08018e20 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b086      	sub	sp, #24
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8018e28:	2300      	movs	r3, #0
 8018e2a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018e2c:	4a48      	ldr	r2, [pc, #288]	; (8018f50 <SUBGRF_SetPacketParams+0x130>)
 8018e2e:	f107 030c 	add.w	r3, r7, #12
 8018e32:	ca07      	ldmia	r2, {r0, r1, r2}
 8018e34:	c303      	stmia	r3!, {r0, r1}
 8018e36:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	781a      	ldrb	r2, [r3, #0]
 8018e3c:	4b45      	ldr	r3, [pc, #276]	; (8018f54 <SUBGRF_SetPacketParams+0x134>)
 8018e3e:	781b      	ldrb	r3, [r3, #0]
 8018e40:	429a      	cmp	r2, r3
 8018e42:	d004      	beq.n	8018e4e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	781b      	ldrb	r3, [r3, #0]
 8018e48:	4618      	mov	r0, r3
 8018e4a:	f7ff fe91 	bl	8018b70 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	781b      	ldrb	r3, [r3, #0]
 8018e52:	2b03      	cmp	r3, #3
 8018e54:	d878      	bhi.n	8018f48 <SUBGRF_SetPacketParams+0x128>
 8018e56:	a201      	add	r2, pc, #4	; (adr r2, 8018e5c <SUBGRF_SetPacketParams+0x3c>)
 8018e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e5c:	08018e6d 	.word	0x08018e6d
 8018e60:	08018efd 	.word	0x08018efd
 8018e64:	08018ef1 	.word	0x08018ef1
 8018e68:	08018e6d 	.word	0x08018e6d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	7a5b      	ldrb	r3, [r3, #9]
 8018e70:	2bf1      	cmp	r3, #241	; 0xf1
 8018e72:	d10a      	bne.n	8018e8a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8018e74:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018e78:	f7ff fb20 	bl	80184bc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018e7c:	f248 0005 	movw	r0, #32773	; 0x8005
 8018e80:	f7ff fb3c 	bl	80184fc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8018e84:	2302      	movs	r3, #2
 8018e86:	75bb      	strb	r3, [r7, #22]
 8018e88:	e011      	b.n	8018eae <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	7a5b      	ldrb	r3, [r3, #9]
 8018e8e:	2bf2      	cmp	r3, #242	; 0xf2
 8018e90:	d10a      	bne.n	8018ea8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8018e92:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8018e96:	f7ff fb11 	bl	80184bc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8018e9a:	f241 0021 	movw	r0, #4129	; 0x1021
 8018e9e:	f7ff fb2d 	bl	80184fc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8018ea2:	2306      	movs	r3, #6
 8018ea4:	75bb      	strb	r3, [r7, #22]
 8018ea6:	e002      	b.n	8018eae <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	7a5b      	ldrb	r3, [r3, #9]
 8018eac:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8018eae:	2309      	movs	r3, #9
 8018eb0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	885b      	ldrh	r3, [r3, #2]
 8018eb6:	0a1b      	lsrs	r3, r3, #8
 8018eb8:	b29b      	uxth	r3, r3
 8018eba:	b2db      	uxtb	r3, r3
 8018ebc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	885b      	ldrh	r3, [r3, #2]
 8018ec2:	b2db      	uxtb	r3, r3
 8018ec4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	791b      	ldrb	r3, [r3, #4]
 8018eca:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	795b      	ldrb	r3, [r3, #5]
 8018ed0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	799b      	ldrb	r3, [r3, #6]
 8018ed6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	79db      	ldrb	r3, [r3, #7]
 8018edc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	7a1b      	ldrb	r3, [r3, #8]
 8018ee2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8018ee4:	7dbb      	ldrb	r3, [r7, #22]
 8018ee6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	7a9b      	ldrb	r3, [r3, #10]
 8018eec:	753b      	strb	r3, [r7, #20]
        break;
 8018eee:	e022      	b.n	8018f36 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8018ef0:	2301      	movs	r3, #1
 8018ef2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	7b1b      	ldrb	r3, [r3, #12]
 8018ef8:	733b      	strb	r3, [r7, #12]
        break;
 8018efa:	e01c      	b.n	8018f36 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8018efc:	2306      	movs	r3, #6
 8018efe:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	89db      	ldrh	r3, [r3, #14]
 8018f04:	0a1b      	lsrs	r3, r3, #8
 8018f06:	b29b      	uxth	r3, r3
 8018f08:	b2db      	uxtb	r3, r3
 8018f0a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	89db      	ldrh	r3, [r3, #14]
 8018f10:	b2db      	uxtb	r3, r3
 8018f12:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	7c1a      	ldrb	r2, [r3, #16]
 8018f18:	4b0f      	ldr	r3, [pc, #60]	; (8018f58 <SUBGRF_SetPacketParams+0x138>)
 8018f1a:	4611      	mov	r1, r2
 8018f1c:	7019      	strb	r1, [r3, #0]
 8018f1e:	4613      	mov	r3, r2
 8018f20:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	7c5b      	ldrb	r3, [r3, #17]
 8018f26:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	7c9b      	ldrb	r3, [r3, #18]
 8018f2c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	7cdb      	ldrb	r3, [r3, #19]
 8018f32:	747b      	strb	r3, [r7, #17]
        break;
 8018f34:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8018f36:	7dfb      	ldrb	r3, [r7, #23]
 8018f38:	b29a      	uxth	r2, r3
 8018f3a:	f107 030c 	add.w	r3, r7, #12
 8018f3e:	4619      	mov	r1, r3
 8018f40:	208c      	movs	r0, #140	; 0x8c
 8018f42:	f000 f965 	bl	8019210 <SUBGRF_WriteCommand>
 8018f46:	e000      	b.n	8018f4a <SUBGRF_SetPacketParams+0x12a>
        return;
 8018f48:	bf00      	nop
}
 8018f4a:	3718      	adds	r7, #24
 8018f4c:	46bd      	mov	sp, r7
 8018f4e:	bd80      	pop	{r7, pc}
 8018f50:	0801b544 	.word	0x0801b544
 8018f54:	20000ee5 	.word	0x20000ee5
 8018f58:	20000ee6 	.word	0x20000ee6

08018f5c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b084      	sub	sp, #16
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	4603      	mov	r3, r0
 8018f64:	460a      	mov	r2, r1
 8018f66:	71fb      	strb	r3, [r7, #7]
 8018f68:	4613      	mov	r3, r2
 8018f6a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8018f6c:	79fb      	ldrb	r3, [r7, #7]
 8018f6e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8018f70:	79bb      	ldrb	r3, [r7, #6]
 8018f72:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8018f74:	f107 030c 	add.w	r3, r7, #12
 8018f78:	2202      	movs	r2, #2
 8018f7a:	4619      	mov	r1, r3
 8018f7c:	208f      	movs	r0, #143	; 0x8f
 8018f7e:	f000 f947 	bl	8019210 <SUBGRF_WriteCommand>
}
 8018f82:	bf00      	nop
 8018f84:	3710      	adds	r7, #16
 8018f86:	46bd      	mov	sp, r7
 8018f88:	bd80      	pop	{r7, pc}

08018f8a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8018f8a:	b580      	push	{r7, lr}
 8018f8c:	b082      	sub	sp, #8
 8018f8e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8018f90:	2300      	movs	r3, #0
 8018f92:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8018f94:	1d3b      	adds	r3, r7, #4
 8018f96:	2201      	movs	r2, #1
 8018f98:	4619      	mov	r1, r3
 8018f9a:	2015      	movs	r0, #21
 8018f9c:	f000 f95a 	bl	8019254 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8018fa0:	793b      	ldrb	r3, [r7, #4]
 8018fa2:	425b      	negs	r3, r3
 8018fa4:	105b      	asrs	r3, r3, #1
 8018fa6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8018fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8018fac:	4618      	mov	r0, r3
 8018fae:	3708      	adds	r7, #8
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}

08018fb4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b084      	sub	sp, #16
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
 8018fbc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8018fbe:	f107 030c 	add.w	r3, r7, #12
 8018fc2:	2202      	movs	r2, #2
 8018fc4:	4619      	mov	r1, r3
 8018fc6:	2013      	movs	r0, #19
 8018fc8:	f000 f944 	bl	8019254 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8018fcc:	f7ff fdec 	bl	8018ba8 <SUBGRF_GetPacketType>
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	2b01      	cmp	r3, #1
 8018fd4:	d10d      	bne.n	8018ff2 <SUBGRF_GetRxBufferStatus+0x3e>
 8018fd6:	4b0c      	ldr	r3, [pc, #48]	; (8019008 <SUBGRF_GetRxBufferStatus+0x54>)
 8018fd8:	781b      	ldrb	r3, [r3, #0]
 8018fda:	b2db      	uxtb	r3, r3
 8018fdc:	2b01      	cmp	r3, #1
 8018fde:	d108      	bne.n	8018ff2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8018fe0:	f240 7002 	movw	r0, #1794	; 0x702
 8018fe4:	f000 f878 	bl	80190d8 <SUBGRF_ReadRegister>
 8018fe8:	4603      	mov	r3, r0
 8018fea:	461a      	mov	r2, r3
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	701a      	strb	r2, [r3, #0]
 8018ff0:	e002      	b.n	8018ff8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8018ff2:	7b3a      	ldrb	r2, [r7, #12]
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8018ff8:	7b7a      	ldrb	r2, [r7, #13]
 8018ffa:	683b      	ldr	r3, [r7, #0]
 8018ffc:	701a      	strb	r2, [r3, #0]
}
 8018ffe:	bf00      	nop
 8019000:	3710      	adds	r7, #16
 8019002:	46bd      	mov	sp, r7
 8019004:	bd80      	pop	{r7, pc}
 8019006:	bf00      	nop
 8019008:	20000ee6 	.word	0x20000ee6

0801900c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801900c:	b580      	push	{r7, lr}
 801900e:	b084      	sub	sp, #16
 8019010:	af00      	add	r7, sp, #0
 8019012:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019014:	f107 030c 	add.w	r3, r7, #12
 8019018:	2203      	movs	r2, #3
 801901a:	4619      	mov	r1, r3
 801901c:	2014      	movs	r0, #20
 801901e:	f000 f919 	bl	8019254 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019022:	f7ff fdc1 	bl	8018ba8 <SUBGRF_GetPacketType>
 8019026:	4603      	mov	r3, r0
 8019028:	461a      	mov	r2, r3
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	781b      	ldrb	r3, [r3, #0]
 8019032:	2b00      	cmp	r3, #0
 8019034:	d002      	beq.n	801903c <SUBGRF_GetPacketStatus+0x30>
 8019036:	2b01      	cmp	r3, #1
 8019038:	d013      	beq.n	8019062 <SUBGRF_GetPacketStatus+0x56>
 801903a:	e02a      	b.n	8019092 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801903c:	7b3a      	ldrb	r2, [r7, #12]
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019042:	7b7b      	ldrb	r3, [r7, #13]
 8019044:	425b      	negs	r3, r3
 8019046:	105b      	asrs	r3, r3, #1
 8019048:	b25a      	sxtb	r2, r3
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801904e:	7bbb      	ldrb	r3, [r7, #14]
 8019050:	425b      	negs	r3, r3
 8019052:	105b      	asrs	r3, r3, #1
 8019054:	b25a      	sxtb	r2, r3
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	2200      	movs	r2, #0
 801905e:	609a      	str	r2, [r3, #8]
            break;
 8019060:	e020      	b.n	80190a4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019062:	7b3b      	ldrb	r3, [r7, #12]
 8019064:	425b      	negs	r3, r3
 8019066:	105b      	asrs	r3, r3, #1
 8019068:	b25a      	sxtb	r2, r3
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801906e:	7b7b      	ldrb	r3, [r7, #13]
 8019070:	b25b      	sxtb	r3, r3
 8019072:	3302      	adds	r3, #2
 8019074:	109b      	asrs	r3, r3, #2
 8019076:	b25a      	sxtb	r2, r3
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801907c:	7bbb      	ldrb	r3, [r7, #14]
 801907e:	425b      	negs	r3, r3
 8019080:	105b      	asrs	r3, r3, #1
 8019082:	b25a      	sxtb	r2, r3
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019088:	4b08      	ldr	r3, [pc, #32]	; (80190ac <SUBGRF_GetPacketStatus+0xa0>)
 801908a:	681a      	ldr	r2, [r3, #0]
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	611a      	str	r2, [r3, #16]
            break;
 8019090:	e008      	b.n	80190a4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8019092:	2214      	movs	r2, #20
 8019094:	2100      	movs	r1, #0
 8019096:	6878      	ldr	r0, [r7, #4]
 8019098:	f000 fbbf 	bl	801981a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	220f      	movs	r2, #15
 80190a0:	701a      	strb	r2, [r3, #0]
            break;
 80190a2:	bf00      	nop
    }
}
 80190a4:	bf00      	nop
 80190a6:	3710      	adds	r7, #16
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bd80      	pop	{r7, pc}
 80190ac:	20000ee8 	.word	0x20000ee8

080190b0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80190b0:	b580      	push	{r7, lr}
 80190b2:	b082      	sub	sp, #8
 80190b4:	af00      	add	r7, sp, #0
 80190b6:	4603      	mov	r3, r0
 80190b8:	460a      	mov	r2, r1
 80190ba:	80fb      	strh	r3, [r7, #6]
 80190bc:	4613      	mov	r3, r2
 80190be:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80190c0:	1d7a      	adds	r2, r7, #5
 80190c2:	88f9      	ldrh	r1, [r7, #6]
 80190c4:	2301      	movs	r3, #1
 80190c6:	4803      	ldr	r0, [pc, #12]	; (80190d4 <SUBGRF_WriteRegister+0x24>)
 80190c8:	f7ee fb8c 	bl	80077e4 <HAL_SUBGHZ_WriteRegisters>
}
 80190cc:	bf00      	nop
 80190ce:	3708      	adds	r7, #8
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}
 80190d4:	20001694 	.word	0x20001694

080190d8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80190d8:	b580      	push	{r7, lr}
 80190da:	b084      	sub	sp, #16
 80190dc:	af00      	add	r7, sp, #0
 80190de:	4603      	mov	r3, r0
 80190e0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80190e2:	f107 020f 	add.w	r2, r7, #15
 80190e6:	88f9      	ldrh	r1, [r7, #6]
 80190e8:	2301      	movs	r3, #1
 80190ea:	4804      	ldr	r0, [pc, #16]	; (80190fc <SUBGRF_ReadRegister+0x24>)
 80190ec:	f7ee fbd9 	bl	80078a2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 80190f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80190f2:	4618      	mov	r0, r3
 80190f4:	3710      	adds	r7, #16
 80190f6:	46bd      	mov	sp, r7
 80190f8:	bd80      	pop	{r7, pc}
 80190fa:	bf00      	nop
 80190fc:	20001694 	.word	0x20001694

08019100 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b086      	sub	sp, #24
 8019104:	af00      	add	r7, sp, #0
 8019106:	4603      	mov	r3, r0
 8019108:	6039      	str	r1, [r7, #0]
 801910a:	80fb      	strh	r3, [r7, #6]
 801910c:	4613      	mov	r3, r2
 801910e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019110:	f3ef 8310 	mrs	r3, PRIMASK
 8019114:	60fb      	str	r3, [r7, #12]
  return(result);
 8019116:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019118:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801911a:	b672      	cpsid	i
}
 801911c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801911e:	88bb      	ldrh	r3, [r7, #4]
 8019120:	88f9      	ldrh	r1, [r7, #6]
 8019122:	683a      	ldr	r2, [r7, #0]
 8019124:	4806      	ldr	r0, [pc, #24]	; (8019140 <SUBGRF_WriteRegisters+0x40>)
 8019126:	f7ee fb5d 	bl	80077e4 <HAL_SUBGHZ_WriteRegisters>
 801912a:	697b      	ldr	r3, [r7, #20]
 801912c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801912e:	693b      	ldr	r3, [r7, #16]
 8019130:	f383 8810 	msr	PRIMASK, r3
}
 8019134:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019136:	bf00      	nop
 8019138:	3718      	adds	r7, #24
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}
 801913e:	bf00      	nop
 8019140:	20001694 	.word	0x20001694

08019144 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b086      	sub	sp, #24
 8019148:	af00      	add	r7, sp, #0
 801914a:	4603      	mov	r3, r0
 801914c:	6039      	str	r1, [r7, #0]
 801914e:	80fb      	strh	r3, [r7, #6]
 8019150:	4613      	mov	r3, r2
 8019152:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019154:	f3ef 8310 	mrs	r3, PRIMASK
 8019158:	60fb      	str	r3, [r7, #12]
  return(result);
 801915a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801915c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801915e:	b672      	cpsid	i
}
 8019160:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019162:	88bb      	ldrh	r3, [r7, #4]
 8019164:	88f9      	ldrh	r1, [r7, #6]
 8019166:	683a      	ldr	r2, [r7, #0]
 8019168:	4806      	ldr	r0, [pc, #24]	; (8019184 <SUBGRF_ReadRegisters+0x40>)
 801916a:	f7ee fb9a 	bl	80078a2 <HAL_SUBGHZ_ReadRegisters>
 801916e:	697b      	ldr	r3, [r7, #20]
 8019170:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019172:	693b      	ldr	r3, [r7, #16]
 8019174:	f383 8810 	msr	PRIMASK, r3
}
 8019178:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801917a:	bf00      	nop
 801917c:	3718      	adds	r7, #24
 801917e:	46bd      	mov	sp, r7
 8019180:	bd80      	pop	{r7, pc}
 8019182:	bf00      	nop
 8019184:	20001694 	.word	0x20001694

08019188 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019188:	b580      	push	{r7, lr}
 801918a:	b086      	sub	sp, #24
 801918c:	af00      	add	r7, sp, #0
 801918e:	4603      	mov	r3, r0
 8019190:	6039      	str	r1, [r7, #0]
 8019192:	71fb      	strb	r3, [r7, #7]
 8019194:	4613      	mov	r3, r2
 8019196:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019198:	f3ef 8310 	mrs	r3, PRIMASK
 801919c:	60fb      	str	r3, [r7, #12]
  return(result);
 801919e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80191a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80191a2:	b672      	cpsid	i
}
 80191a4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80191a6:	79bb      	ldrb	r3, [r7, #6]
 80191a8:	b29b      	uxth	r3, r3
 80191aa:	79f9      	ldrb	r1, [r7, #7]
 80191ac:	683a      	ldr	r2, [r7, #0]
 80191ae:	4806      	ldr	r0, [pc, #24]	; (80191c8 <SUBGRF_WriteBuffer+0x40>)
 80191b0:	f7ee fc8b 	bl	8007aca <HAL_SUBGHZ_WriteBuffer>
 80191b4:	697b      	ldr	r3, [r7, #20]
 80191b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191b8:	693b      	ldr	r3, [r7, #16]
 80191ba:	f383 8810 	msr	PRIMASK, r3
}
 80191be:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80191c0:	bf00      	nop
 80191c2:	3718      	adds	r7, #24
 80191c4:	46bd      	mov	sp, r7
 80191c6:	bd80      	pop	{r7, pc}
 80191c8:	20001694 	.word	0x20001694

080191cc <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80191cc:	b580      	push	{r7, lr}
 80191ce:	b086      	sub	sp, #24
 80191d0:	af00      	add	r7, sp, #0
 80191d2:	4603      	mov	r3, r0
 80191d4:	6039      	str	r1, [r7, #0]
 80191d6:	71fb      	strb	r3, [r7, #7]
 80191d8:	4613      	mov	r3, r2
 80191da:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191dc:	f3ef 8310 	mrs	r3, PRIMASK
 80191e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80191e2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80191e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80191e6:	b672      	cpsid	i
}
 80191e8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80191ea:	79bb      	ldrb	r3, [r7, #6]
 80191ec:	b29b      	uxth	r3, r3
 80191ee:	79f9      	ldrb	r1, [r7, #7]
 80191f0:	683a      	ldr	r2, [r7, #0]
 80191f2:	4806      	ldr	r0, [pc, #24]	; (801920c <SUBGRF_ReadBuffer+0x40>)
 80191f4:	f7ee fcbc 	bl	8007b70 <HAL_SUBGHZ_ReadBuffer>
 80191f8:	697b      	ldr	r3, [r7, #20]
 80191fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191fc:	693b      	ldr	r3, [r7, #16]
 80191fe:	f383 8810 	msr	PRIMASK, r3
}
 8019202:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019204:	bf00      	nop
 8019206:	3718      	adds	r7, #24
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}
 801920c:	20001694 	.word	0x20001694

08019210 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019210:	b580      	push	{r7, lr}
 8019212:	b086      	sub	sp, #24
 8019214:	af00      	add	r7, sp, #0
 8019216:	4603      	mov	r3, r0
 8019218:	6039      	str	r1, [r7, #0]
 801921a:	71fb      	strb	r3, [r7, #7]
 801921c:	4613      	mov	r3, r2
 801921e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019220:	f3ef 8310 	mrs	r3, PRIMASK
 8019224:	60fb      	str	r3, [r7, #12]
  return(result);
 8019226:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019228:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801922a:	b672      	cpsid	i
}
 801922c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801922e:	88bb      	ldrh	r3, [r7, #4]
 8019230:	79f9      	ldrb	r1, [r7, #7]
 8019232:	683a      	ldr	r2, [r7, #0]
 8019234:	4806      	ldr	r0, [pc, #24]	; (8019250 <SUBGRF_WriteCommand+0x40>)
 8019236:	f7ee fb95 	bl	8007964 <HAL_SUBGHZ_ExecSetCmd>
 801923a:	697b      	ldr	r3, [r7, #20]
 801923c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801923e:	693b      	ldr	r3, [r7, #16]
 8019240:	f383 8810 	msr	PRIMASK, r3
}
 8019244:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019246:	bf00      	nop
 8019248:	3718      	adds	r7, #24
 801924a:	46bd      	mov	sp, r7
 801924c:	bd80      	pop	{r7, pc}
 801924e:	bf00      	nop
 8019250:	20001694 	.word	0x20001694

08019254 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019254:	b580      	push	{r7, lr}
 8019256:	b086      	sub	sp, #24
 8019258:	af00      	add	r7, sp, #0
 801925a:	4603      	mov	r3, r0
 801925c:	6039      	str	r1, [r7, #0]
 801925e:	71fb      	strb	r3, [r7, #7]
 8019260:	4613      	mov	r3, r2
 8019262:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019264:	f3ef 8310 	mrs	r3, PRIMASK
 8019268:	60fb      	str	r3, [r7, #12]
  return(result);
 801926a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801926c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801926e:	b672      	cpsid	i
}
 8019270:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019272:	88bb      	ldrh	r3, [r7, #4]
 8019274:	79f9      	ldrb	r1, [r7, #7]
 8019276:	683a      	ldr	r2, [r7, #0]
 8019278:	4806      	ldr	r0, [pc, #24]	; (8019294 <SUBGRF_ReadCommand+0x40>)
 801927a:	f7ee fbd2 	bl	8007a22 <HAL_SUBGHZ_ExecGetCmd>
 801927e:	697b      	ldr	r3, [r7, #20]
 8019280:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019282:	693b      	ldr	r3, [r7, #16]
 8019284:	f383 8810 	msr	PRIMASK, r3
}
 8019288:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801928a:	bf00      	nop
 801928c:	3718      	adds	r7, #24
 801928e:	46bd      	mov	sp, r7
 8019290:	bd80      	pop	{r7, pc}
 8019292:	bf00      	nop
 8019294:	20001694 	.word	0x20001694

08019298 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b084      	sub	sp, #16
 801929c:	af00      	add	r7, sp, #0
 801929e:	4603      	mov	r3, r0
 80192a0:	460a      	mov	r2, r1
 80192a2:	71fb      	strb	r3, [r7, #7]
 80192a4:	4613      	mov	r3, r2
 80192a6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80192a8:	2301      	movs	r3, #1
 80192aa:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80192ac:	79bb      	ldrb	r3, [r7, #6]
 80192ae:	2b01      	cmp	r3, #1
 80192b0:	d10d      	bne.n	80192ce <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80192b2:	79fb      	ldrb	r3, [r7, #7]
 80192b4:	2b01      	cmp	r3, #1
 80192b6:	d104      	bne.n	80192c2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80192b8:	2302      	movs	r3, #2
 80192ba:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80192bc:	2004      	movs	r0, #4
 80192be:	f000 f8df 	bl	8019480 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80192c2:	79fb      	ldrb	r3, [r7, #7]
 80192c4:	2b02      	cmp	r3, #2
 80192c6:	d107      	bne.n	80192d8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80192c8:	2303      	movs	r3, #3
 80192ca:	73fb      	strb	r3, [r7, #15]
 80192cc:	e004      	b.n	80192d8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80192ce:	79bb      	ldrb	r3, [r7, #6]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d101      	bne.n	80192d8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80192d4:	2301      	movs	r3, #1
 80192d6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80192d8:	7bfb      	ldrb	r3, [r7, #15]
 80192da:	4618      	mov	r0, r3
 80192dc:	f7f1 fb61 	bl	800a9a2 <RBI_ConfigRFSwitch>
}
 80192e0:	bf00      	nop
 80192e2:	3710      	adds	r7, #16
 80192e4:	46bd      	mov	sp, r7
 80192e6:	bd80      	pop	{r7, pc}

080192e8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b084      	sub	sp, #16
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	4603      	mov	r3, r0
 80192f0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80192f2:	2301      	movs	r3, #1
 80192f4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80192f6:	f7f1 fb62 	bl	800a9be <RBI_GetTxConfig>
 80192fa:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80192fc:	68bb      	ldr	r3, [r7, #8]
 80192fe:	2b02      	cmp	r3, #2
 8019300:	d016      	beq.n	8019330 <SUBGRF_SetRfTxPower+0x48>
 8019302:	68bb      	ldr	r3, [r7, #8]
 8019304:	2b02      	cmp	r3, #2
 8019306:	dc16      	bgt.n	8019336 <SUBGRF_SetRfTxPower+0x4e>
 8019308:	68bb      	ldr	r3, [r7, #8]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d003      	beq.n	8019316 <SUBGRF_SetRfTxPower+0x2e>
 801930e:	68bb      	ldr	r3, [r7, #8]
 8019310:	2b01      	cmp	r3, #1
 8019312:	d00a      	beq.n	801932a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019314:	e00f      	b.n	8019336 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8019316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801931a:	2b0f      	cmp	r3, #15
 801931c:	dd02      	ble.n	8019324 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801931e:	2302      	movs	r3, #2
 8019320:	73fb      	strb	r3, [r7, #15]
            break;
 8019322:	e009      	b.n	8019338 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019324:	2301      	movs	r3, #1
 8019326:	73fb      	strb	r3, [r7, #15]
            break;
 8019328:	e006      	b.n	8019338 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801932a:	2301      	movs	r3, #1
 801932c:	73fb      	strb	r3, [r7, #15]
            break;
 801932e:	e003      	b.n	8019338 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019330:	2302      	movs	r3, #2
 8019332:	73fb      	strb	r3, [r7, #15]
            break;
 8019334:	e000      	b.n	8019338 <SUBGRF_SetRfTxPower+0x50>
            break;
 8019336:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019338:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801933c:	7bfb      	ldrb	r3, [r7, #15]
 801933e:	2202      	movs	r2, #2
 8019340:	4618      	mov	r0, r3
 8019342:	f7ff fc3b 	bl	8018bbc <SUBGRF_SetTxParams>

    return paSelect;
 8019346:	7bfb      	ldrb	r3, [r7, #15]
}
 8019348:	4618      	mov	r0, r3
 801934a:	3710      	adds	r7, #16
 801934c:	46bd      	mov	sp, r7
 801934e:	bd80      	pop	{r7, pc}

08019350 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019350:	b480      	push	{r7}
 8019352:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019354:	2301      	movs	r3, #1
}
 8019356:	4618      	mov	r0, r3
 8019358:	46bd      	mov	sp, r7
 801935a:	bc80      	pop	{r7}
 801935c:	4770      	bx	lr
	...

08019360 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b082      	sub	sp, #8
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019368:	4b03      	ldr	r3, [pc, #12]	; (8019378 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	2001      	movs	r0, #1
 801936e:	4798      	blx	r3
}
 8019370:	bf00      	nop
 8019372:	3708      	adds	r7, #8
 8019374:	46bd      	mov	sp, r7
 8019376:	bd80      	pop	{r7, pc}
 8019378:	20000ef0 	.word	0x20000ef0

0801937c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801937c:	b580      	push	{r7, lr}
 801937e:	b082      	sub	sp, #8
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019384:	4b03      	ldr	r3, [pc, #12]	; (8019394 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	2002      	movs	r0, #2
 801938a:	4798      	blx	r3
}
 801938c:	bf00      	nop
 801938e:	3708      	adds	r7, #8
 8019390:	46bd      	mov	sp, r7
 8019392:	bd80      	pop	{r7, pc}
 8019394:	20000ef0 	.word	0x20000ef0

08019398 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b082      	sub	sp, #8
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80193a0:	4b03      	ldr	r3, [pc, #12]	; (80193b0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	2040      	movs	r0, #64	; 0x40
 80193a6:	4798      	blx	r3
}
 80193a8:	bf00      	nop
 80193aa:	3708      	adds	r7, #8
 80193ac:	46bd      	mov	sp, r7
 80193ae:	bd80      	pop	{r7, pc}
 80193b0:	20000ef0 	.word	0x20000ef0

080193b4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b082      	sub	sp, #8
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
 80193bc:	460b      	mov	r3, r1
 80193be:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80193c0:	78fb      	ldrb	r3, [r7, #3]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d002      	beq.n	80193cc <HAL_SUBGHZ_CADStatusCallback+0x18>
 80193c6:	2b01      	cmp	r3, #1
 80193c8:	d005      	beq.n	80193d6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80193ca:	e00a      	b.n	80193e2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80193cc:	4b07      	ldr	r3, [pc, #28]	; (80193ec <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	2080      	movs	r0, #128	; 0x80
 80193d2:	4798      	blx	r3
            break;
 80193d4:	e005      	b.n	80193e2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80193d6:	4b05      	ldr	r3, [pc, #20]	; (80193ec <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80193de:	4798      	blx	r3
            break;
 80193e0:	bf00      	nop
    }
}
 80193e2:	bf00      	nop
 80193e4:	3708      	adds	r7, #8
 80193e6:	46bd      	mov	sp, r7
 80193e8:	bd80      	pop	{r7, pc}
 80193ea:	bf00      	nop
 80193ec:	20000ef0 	.word	0x20000ef0

080193f0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80193f0:	b580      	push	{r7, lr}
 80193f2:	b082      	sub	sp, #8
 80193f4:	af00      	add	r7, sp, #0
 80193f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80193f8:	4b04      	ldr	r3, [pc, #16]	; (801940c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019400:	4798      	blx	r3
}
 8019402:	bf00      	nop
 8019404:	3708      	adds	r7, #8
 8019406:	46bd      	mov	sp, r7
 8019408:	bd80      	pop	{r7, pc}
 801940a:	bf00      	nop
 801940c:	20000ef0 	.word	0x20000ef0

08019410 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019410:	b580      	push	{r7, lr}
 8019412:	b082      	sub	sp, #8
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019418:	4b03      	ldr	r3, [pc, #12]	; (8019428 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	2020      	movs	r0, #32
 801941e:	4798      	blx	r3
}
 8019420:	bf00      	nop
 8019422:	3708      	adds	r7, #8
 8019424:	46bd      	mov	sp, r7
 8019426:	bd80      	pop	{r7, pc}
 8019428:	20000ef0 	.word	0x20000ef0

0801942c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801942c:	b580      	push	{r7, lr}
 801942e:	b082      	sub	sp, #8
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8019434:	4b03      	ldr	r3, [pc, #12]	; (8019444 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	2004      	movs	r0, #4
 801943a:	4798      	blx	r3
}
 801943c:	bf00      	nop
 801943e:	3708      	adds	r7, #8
 8019440:	46bd      	mov	sp, r7
 8019442:	bd80      	pop	{r7, pc}
 8019444:	20000ef0 	.word	0x20000ef0

08019448 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019448:	b580      	push	{r7, lr}
 801944a:	b082      	sub	sp, #8
 801944c:	af00      	add	r7, sp, #0
 801944e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8019450:	4b03      	ldr	r3, [pc, #12]	; (8019460 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	2008      	movs	r0, #8
 8019456:	4798      	blx	r3
}
 8019458:	bf00      	nop
 801945a:	3708      	adds	r7, #8
 801945c:	46bd      	mov	sp, r7
 801945e:	bd80      	pop	{r7, pc}
 8019460:	20000ef0 	.word	0x20000ef0

08019464 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019464:	b580      	push	{r7, lr}
 8019466:	b082      	sub	sp, #8
 8019468:	af00      	add	r7, sp, #0
 801946a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801946c:	4b03      	ldr	r3, [pc, #12]	; (801947c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	2010      	movs	r0, #16
 8019472:	4798      	blx	r3
}
 8019474:	bf00      	nop
 8019476:	3708      	adds	r7, #8
 8019478:	46bd      	mov	sp, r7
 801947a:	bd80      	pop	{r7, pc}
 801947c:	20000ef0 	.word	0x20000ef0

08019480 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8019480:	b580      	push	{r7, lr}
 8019482:	b084      	sub	sp, #16
 8019484:	af00      	add	r7, sp, #0
 8019486:	4603      	mov	r3, r0
 8019488:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801948a:	f7f1 faa6 	bl	800a9da <RBI_IsDCDC>
 801948e:	4603      	mov	r3, r0
 8019490:	2b01      	cmp	r3, #1
 8019492:	d112      	bne.n	80194ba <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019494:	f640 1023 	movw	r0, #2339	; 0x923
 8019498:	f7ff fe1e 	bl	80190d8 <SUBGRF_ReadRegister>
 801949c:	4603      	mov	r3, r0
 801949e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80194a0:	7bfb      	ldrb	r3, [r7, #15]
 80194a2:	f023 0306 	bic.w	r3, r3, #6
 80194a6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80194a8:	7bfa      	ldrb	r2, [r7, #15]
 80194aa:	79fb      	ldrb	r3, [r7, #7]
 80194ac:	4313      	orrs	r3, r2
 80194ae:	b2db      	uxtb	r3, r3
 80194b0:	4619      	mov	r1, r3
 80194b2:	f640 1023 	movw	r0, #2339	; 0x923
 80194b6:	f7ff fdfb 	bl	80190b0 <SUBGRF_WriteRegister>
  }
}
 80194ba:	bf00      	nop
 80194bc:	3710      	adds	r7, #16
 80194be:	46bd      	mov	sp, r7
 80194c0:	bd80      	pop	{r7, pc}
	...

080194c4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80194c4:	b480      	push	{r7}
 80194c6:	b085      	sub	sp, #20
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d101      	bne.n	80194d6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80194d2:	231f      	movs	r3, #31
 80194d4:	e016      	b.n	8019504 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80194d6:	2300      	movs	r3, #0
 80194d8:	73fb      	strb	r3, [r7, #15]
 80194da:	e00f      	b.n	80194fc <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80194dc:	7bfb      	ldrb	r3, [r7, #15]
 80194de:	4a0c      	ldr	r2, [pc, #48]	; (8019510 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80194e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80194e4:	687a      	ldr	r2, [r7, #4]
 80194e6:	429a      	cmp	r2, r3
 80194e8:	d205      	bcs.n	80194f6 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 80194ea:	7bfb      	ldrb	r3, [r7, #15]
 80194ec:	4a08      	ldr	r2, [pc, #32]	; (8019510 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80194ee:	00db      	lsls	r3, r3, #3
 80194f0:	4413      	add	r3, r2
 80194f2:	791b      	ldrb	r3, [r3, #4]
 80194f4:	e006      	b.n	8019504 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80194f6:	7bfb      	ldrb	r3, [r7, #15]
 80194f8:	3301      	adds	r3, #1
 80194fa:	73fb      	strb	r3, [r7, #15]
 80194fc:	7bfb      	ldrb	r3, [r7, #15]
 80194fe:	2b15      	cmp	r3, #21
 8019500:	d9ec      	bls.n	80194dc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8019502:	e7fe      	b.n	8019502 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019504:	4618      	mov	r0, r3
 8019506:	3714      	adds	r7, #20
 8019508:	46bd      	mov	sp, r7
 801950a:	bc80      	pop	{r7}
 801950c:	4770      	bx	lr
 801950e:	bf00      	nop
 8019510:	0801bab0 	.word	0x0801bab0

08019514 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019514:	b580      	push	{r7, lr}
 8019516:	b08a      	sub	sp, #40	; 0x28
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
 801951c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801951e:	4b36      	ldr	r3, [pc, #216]	; (80195f8 <SUBGRF_GetCFO+0xe4>)
 8019520:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8019522:	f640 0007 	movw	r0, #2055	; 0x807
 8019526:	f7ff fdd7 	bl	80190d8 <SUBGRF_ReadRegister>
 801952a:	4603      	mov	r3, r0
 801952c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801952e:	7ffb      	ldrb	r3, [r7, #31]
 8019530:	08db      	lsrs	r3, r3, #3
 8019532:	b2db      	uxtb	r3, r3
 8019534:	f003 0303 	and.w	r3, r3, #3
 8019538:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801953c:	4413      	add	r3, r2
 801953e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8019542:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019544:	7ffb      	ldrb	r3, [r7, #31]
 8019546:	f003 0307 	and.w	r3, r3, #7
 801954a:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801954c:	7fba      	ldrb	r2, [r7, #30]
 801954e:	7f7b      	ldrb	r3, [r7, #29]
 8019550:	3b01      	subs	r3, #1
 8019552:	fa02 f303 	lsl.w	r3, r2, r3
 8019556:	461a      	mov	r2, r3
 8019558:	4b28      	ldr	r3, [pc, #160]	; (80195fc <SUBGRF_GetCFO+0xe8>)
 801955a:	fbb3 f3f2 	udiv	r3, r3, r2
 801955e:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019560:	69ba      	ldr	r2, [r7, #24]
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	fbb2 f3f3 	udiv	r3, r2, r3
 8019568:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801956a:	2301      	movs	r3, #1
 801956c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019574:	697a      	ldr	r2, [r7, #20]
 8019576:	fb02 f303 	mul.w	r3, r2, r3
 801957a:	2b07      	cmp	r3, #7
 801957c:	d802      	bhi.n	8019584 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 801957e:	2302      	movs	r3, #2
 8019580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8019584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019588:	697a      	ldr	r2, [r7, #20]
 801958a:	fb02 f303 	mul.w	r3, r2, r3
 801958e:	2b03      	cmp	r3, #3
 8019590:	d802      	bhi.n	8019598 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8019592:	2304      	movs	r3, #4
 8019594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019598:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801959c:	69bb      	ldr	r3, [r7, #24]
 801959e:	fb02 f303 	mul.w	r3, r2, r3
 80195a2:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 80195a4:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80195a8:	f7ff fd96 	bl	80190d8 <SUBGRF_ReadRegister>
 80195ac:	4603      	mov	r3, r0
 80195ae:	021b      	lsls	r3, r3, #8
 80195b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80195b4:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 80195b6:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80195ba:	f7ff fd8d 	bl	80190d8 <SUBGRF_ReadRegister>
 80195be:	4603      	mov	r3, r0
 80195c0:	461a      	mov	r2, r3
 80195c2:	6a3b      	ldr	r3, [r7, #32]
 80195c4:	4313      	orrs	r3, r2
 80195c6:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80195c8:	6a3b      	ldr	r3, [r7, #32]
 80195ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d005      	beq.n	80195de <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 80195d2:	6a3b      	ldr	r3, [r7, #32]
 80195d4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80195d8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80195dc:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80195de:	693b      	ldr	r3, [r7, #16]
 80195e0:	095b      	lsrs	r3, r3, #5
 80195e2:	6a3a      	ldr	r2, [r7, #32]
 80195e4:	fb02 f303 	mul.w	r3, r2, r3
 80195e8:	11da      	asrs	r2, r3, #7
 80195ea:	683b      	ldr	r3, [r7, #0]
 80195ec:	601a      	str	r2, [r3, #0]
}
 80195ee:	bf00      	nop
 80195f0:	3728      	adds	r7, #40	; 0x28
 80195f2:	46bd      	mov	sp, r7
 80195f4:	bd80      	pop	{r7, pc}
 80195f6:	bf00      	nop
 80195f8:	0c0a0804 	.word	0x0c0a0804
 80195fc:	01e84800 	.word	0x01e84800

08019600 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8019600:	b480      	push	{r7}
 8019602:	b087      	sub	sp, #28
 8019604:	af00      	add	r7, sp, #0
 8019606:	4603      	mov	r3, r0
 8019608:	60b9      	str	r1, [r7, #8]
 801960a:	607a      	str	r2, [r7, #4]
 801960c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801960e:	2300      	movs	r3, #0
 8019610:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8019612:	f04f 33ff 	mov.w	r3, #4294967295
 8019616:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019618:	697b      	ldr	r3, [r7, #20]
}
 801961a:	4618      	mov	r0, r3
 801961c:	371c      	adds	r7, #28
 801961e:	46bd      	mov	sp, r7
 8019620:	bc80      	pop	{r7}
 8019622:	4770      	bx	lr

08019624 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8019624:	b480      	push	{r7}
 8019626:	b087      	sub	sp, #28
 8019628:	af00      	add	r7, sp, #0
 801962a:	4603      	mov	r3, r0
 801962c:	60b9      	str	r1, [r7, #8]
 801962e:	607a      	str	r2, [r7, #4]
 8019630:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8019632:	2300      	movs	r3, #0
 8019634:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8019636:	f04f 33ff 	mov.w	r3, #4294967295
 801963a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801963c:	697b      	ldr	r3, [r7, #20]
}
 801963e:	4618      	mov	r0, r3
 8019640:	371c      	adds	r7, #28
 8019642:	46bd      	mov	sp, r7
 8019644:	bc80      	pop	{r7}
 8019646:	4770      	bx	lr

08019648 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8019648:	b480      	push	{r7}
 801964a:	b085      	sub	sp, #20
 801964c:	af00      	add	r7, sp, #0
 801964e:	60f8      	str	r0, [r7, #12]
 8019650:	60b9      	str	r1, [r7, #8]
 8019652:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8019654:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019658:	4618      	mov	r0, r3
 801965a:	3714      	adds	r7, #20
 801965c:	46bd      	mov	sp, r7
 801965e:	bc80      	pop	{r7}
 8019660:	4770      	bx	lr

08019662 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8019662:	b480      	push	{r7}
 8019664:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8019666:	bf00      	nop
 8019668:	46bd      	mov	sp, r7
 801966a:	bc80      	pop	{r7}
 801966c:	4770      	bx	lr

0801966e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801966e:	b480      	push	{r7}
 8019670:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8019672:	2300      	movs	r3, #0
#endif
}
 8019674:	4618      	mov	r0, r3
 8019676:	46bd      	mov	sp, r7
 8019678:	bc80      	pop	{r7}
 801967a:	4770      	bx	lr

0801967c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801967c:	b480      	push	{r7}
 801967e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8019680:	2300      	movs	r3, #0
#endif
}
 8019682:	4618      	mov	r0, r3
 8019684:	46bd      	mov	sp, r7
 8019686:	bc80      	pop	{r7}
 8019688:	4770      	bx	lr

0801968a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801968a:	b480      	push	{r7}
 801968c:	b083      	sub	sp, #12
 801968e:	af00      	add	r7, sp, #0
 8019690:	4603      	mov	r3, r0
 8019692:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019694:	bf00      	nop
 8019696:	370c      	adds	r7, #12
 8019698:	46bd      	mov	sp, r7
 801969a:	bc80      	pop	{r7}
 801969c:	4770      	bx	lr

0801969e <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801969e:	b480      	push	{r7}
 80196a0:	b087      	sub	sp, #28
 80196a2:	af00      	add	r7, sp, #0
 80196a4:	60f8      	str	r0, [r7, #12]
 80196a6:	460b      	mov	r3, r1
 80196a8:	607a      	str	r2, [r7, #4]
 80196aa:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 80196ac:	f04f 33ff 	mov.w	r3, #4294967295
 80196b0:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 80196b2:	697b      	ldr	r3, [r7, #20]
}
 80196b4:	4618      	mov	r0, r3
 80196b6:	371c      	adds	r7, #28
 80196b8:	46bd      	mov	sp, r7
 80196ba:	bc80      	pop	{r7}
 80196bc:	4770      	bx	lr

080196be <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 80196be:	b480      	push	{r7}
 80196c0:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 80196c2:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80196c6:	4618      	mov	r0, r3
 80196c8:	46bd      	mov	sp, r7
 80196ca:	bc80      	pop	{r7}
 80196cc:	4770      	bx	lr

080196ce <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 80196ce:	b480      	push	{r7}
 80196d0:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 80196d2:	bf00      	nop
 80196d4:	46bd      	mov	sp, r7
 80196d6:	bc80      	pop	{r7}
 80196d8:	4770      	bx	lr

080196da <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 80196da:	b480      	push	{r7}
 80196dc:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 80196de:	bf00      	nop
 80196e0:	46bd      	mov	sp, r7
 80196e2:	bc80      	pop	{r7}
 80196e4:	4770      	bx	lr

080196e6 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 80196e6:	b480      	push	{r7}
 80196e8:	b083      	sub	sp, #12
 80196ea:	af00      	add	r7, sp, #0
 80196ec:	4603      	mov	r3, r0
 80196ee:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 80196f0:	bf00      	nop
 80196f2:	370c      	adds	r7, #12
 80196f4:	46bd      	mov	sp, r7
 80196f6:	bc80      	pop	{r7}
 80196f8:	4770      	bx	lr
	...

080196fc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80196fc:	b480      	push	{r7}
 80196fe:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019700:	4b04      	ldr	r3, [pc, #16]	; (8019714 <UTIL_LPM_Init+0x18>)
 8019702:	2200      	movs	r2, #0
 8019704:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019706:	4b04      	ldr	r3, [pc, #16]	; (8019718 <UTIL_LPM_Init+0x1c>)
 8019708:	2200      	movs	r2, #0
 801970a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801970c:	bf00      	nop
 801970e:	46bd      	mov	sp, r7
 8019710:	bc80      	pop	{r7}
 8019712:	4770      	bx	lr
 8019714:	20000ef4 	.word	0x20000ef4
 8019718:	20000ef8 	.word	0x20000ef8

0801971c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801971c:	b480      	push	{r7}
 801971e:	b087      	sub	sp, #28
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
 8019724:	460b      	mov	r3, r1
 8019726:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019728:	f3ef 8310 	mrs	r3, PRIMASK
 801972c:	613b      	str	r3, [r7, #16]
  return(result);
 801972e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019730:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019732:	b672      	cpsid	i
}
 8019734:	bf00      	nop
  
  switch( state )
 8019736:	78fb      	ldrb	r3, [r7, #3]
 8019738:	2b00      	cmp	r3, #0
 801973a:	d008      	beq.n	801974e <UTIL_LPM_SetStopMode+0x32>
 801973c:	2b01      	cmp	r3, #1
 801973e:	d10e      	bne.n	801975e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019740:	4b0d      	ldr	r3, [pc, #52]	; (8019778 <UTIL_LPM_SetStopMode+0x5c>)
 8019742:	681a      	ldr	r2, [r3, #0]
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	4313      	orrs	r3, r2
 8019748:	4a0b      	ldr	r2, [pc, #44]	; (8019778 <UTIL_LPM_SetStopMode+0x5c>)
 801974a:	6013      	str	r3, [r2, #0]
      break;
 801974c:	e008      	b.n	8019760 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	43da      	mvns	r2, r3
 8019752:	4b09      	ldr	r3, [pc, #36]	; (8019778 <UTIL_LPM_SetStopMode+0x5c>)
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	4013      	ands	r3, r2
 8019758:	4a07      	ldr	r2, [pc, #28]	; (8019778 <UTIL_LPM_SetStopMode+0x5c>)
 801975a:	6013      	str	r3, [r2, #0]
      break;
 801975c:	e000      	b.n	8019760 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801975e:	bf00      	nop
 8019760:	697b      	ldr	r3, [r7, #20]
 8019762:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	f383 8810 	msr	PRIMASK, r3
}
 801976a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801976c:	bf00      	nop
 801976e:	371c      	adds	r7, #28
 8019770:	46bd      	mov	sp, r7
 8019772:	bc80      	pop	{r7}
 8019774:	4770      	bx	lr
 8019776:	bf00      	nop
 8019778:	20000ef4 	.word	0x20000ef4

0801977c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801977c:	b480      	push	{r7}
 801977e:	b087      	sub	sp, #28
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
 8019784:	460b      	mov	r3, r1
 8019786:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019788:	f3ef 8310 	mrs	r3, PRIMASK
 801978c:	613b      	str	r3, [r7, #16]
  return(result);
 801978e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019792:	b672      	cpsid	i
}
 8019794:	bf00      	nop
  
  switch(state)
 8019796:	78fb      	ldrb	r3, [r7, #3]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d008      	beq.n	80197ae <UTIL_LPM_SetOffMode+0x32>
 801979c:	2b01      	cmp	r3, #1
 801979e:	d10e      	bne.n	80197be <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80197a0:	4b0d      	ldr	r3, [pc, #52]	; (80197d8 <UTIL_LPM_SetOffMode+0x5c>)
 80197a2:	681a      	ldr	r2, [r3, #0]
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	4313      	orrs	r3, r2
 80197a8:	4a0b      	ldr	r2, [pc, #44]	; (80197d8 <UTIL_LPM_SetOffMode+0x5c>)
 80197aa:	6013      	str	r3, [r2, #0]
      break;
 80197ac:	e008      	b.n	80197c0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	43da      	mvns	r2, r3
 80197b2:	4b09      	ldr	r3, [pc, #36]	; (80197d8 <UTIL_LPM_SetOffMode+0x5c>)
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	4013      	ands	r3, r2
 80197b8:	4a07      	ldr	r2, [pc, #28]	; (80197d8 <UTIL_LPM_SetOffMode+0x5c>)
 80197ba:	6013      	str	r3, [r2, #0]
      break;
 80197bc:	e000      	b.n	80197c0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80197be:	bf00      	nop
 80197c0:	697b      	ldr	r3, [r7, #20]
 80197c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	f383 8810 	msr	PRIMASK, r3
}
 80197ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80197cc:	bf00      	nop
 80197ce:	371c      	adds	r7, #28
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bc80      	pop	{r7}
 80197d4:	4770      	bx	lr
 80197d6:	bf00      	nop
 80197d8:	20000ef8 	.word	0x20000ef8

080197dc <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 80197dc:	b480      	push	{r7}
 80197de:	b087      	sub	sp, #28
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	60f8      	str	r0, [r7, #12]
 80197e4:	60b9      	str	r1, [r7, #8]
 80197e6:	4613      	mov	r3, r2
 80197e8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 80197ee:	68bb      	ldr	r3, [r7, #8]
 80197f0:	613b      	str	r3, [r7, #16]

  while( size-- )
 80197f2:	e007      	b.n	8019804 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 80197f4:	693a      	ldr	r2, [r7, #16]
 80197f6:	1c53      	adds	r3, r2, #1
 80197f8:	613b      	str	r3, [r7, #16]
 80197fa:	697b      	ldr	r3, [r7, #20]
 80197fc:	1c59      	adds	r1, r3, #1
 80197fe:	6179      	str	r1, [r7, #20]
 8019800:	7812      	ldrb	r2, [r2, #0]
 8019802:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019804:	88fb      	ldrh	r3, [r7, #6]
 8019806:	1e5a      	subs	r2, r3, #1
 8019808:	80fa      	strh	r2, [r7, #6]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d1f2      	bne.n	80197f4 <UTIL_MEM_cpy_8+0x18>
    }
}
 801980e:	bf00      	nop
 8019810:	bf00      	nop
 8019812:	371c      	adds	r7, #28
 8019814:	46bd      	mov	sp, r7
 8019816:	bc80      	pop	{r7}
 8019818:	4770      	bx	lr

0801981a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801981a:	b480      	push	{r7}
 801981c:	b085      	sub	sp, #20
 801981e:	af00      	add	r7, sp, #0
 8019820:	6078      	str	r0, [r7, #4]
 8019822:	460b      	mov	r3, r1
 8019824:	70fb      	strb	r3, [r7, #3]
 8019826:	4613      	mov	r3, r2
 8019828:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801982e:	e004      	b.n	801983a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	1c5a      	adds	r2, r3, #1
 8019834:	60fa      	str	r2, [r7, #12]
 8019836:	78fa      	ldrb	r2, [r7, #3]
 8019838:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801983a:	883b      	ldrh	r3, [r7, #0]
 801983c:	1e5a      	subs	r2, r3, #1
 801983e:	803a      	strh	r2, [r7, #0]
 8019840:	2b00      	cmp	r3, #0
 8019842:	d1f5      	bne.n	8019830 <UTIL_MEM_set_8+0x16>
  }
}
 8019844:	bf00      	nop
 8019846:	bf00      	nop
 8019848:	3714      	adds	r7, #20
 801984a:	46bd      	mov	sp, r7
 801984c:	bc80      	pop	{r7}
 801984e:	4770      	bx	lr

08019850 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019850:	b082      	sub	sp, #8
 8019852:	b480      	push	{r7}
 8019854:	b087      	sub	sp, #28
 8019856:	af00      	add	r7, sp, #0
 8019858:	60f8      	str	r0, [r7, #12]
 801985a:	1d38      	adds	r0, r7, #4
 801985c:	e880 0006 	stmia.w	r0, {r1, r2}
 8019860:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019862:	2300      	movs	r3, #0
 8019864:	613b      	str	r3, [r7, #16]
 8019866:	2300      	movs	r3, #0
 8019868:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801986a:	687a      	ldr	r2, [r7, #4]
 801986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801986e:	4413      	add	r3, r2
 8019870:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019872:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019876:	b29a      	uxth	r2, r3
 8019878:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801987c:	b29b      	uxth	r3, r3
 801987e:	4413      	add	r3, r2
 8019880:	b29b      	uxth	r3, r3
 8019882:	b21b      	sxth	r3, r3
 8019884:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019886:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801988a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801988e:	db0a      	blt.n	80198a6 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019890:	693b      	ldr	r3, [r7, #16]
 8019892:	3301      	adds	r3, #1
 8019894:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019896:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801989a:	b29b      	uxth	r3, r3
 801989c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80198a0:	b29b      	uxth	r3, r3
 80198a2:	b21b      	sxth	r3, r3
 80198a4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	461a      	mov	r2, r3
 80198aa:	f107 0310 	add.w	r3, r7, #16
 80198ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80198b2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80198b6:	68f8      	ldr	r0, [r7, #12]
 80198b8:	371c      	adds	r7, #28
 80198ba:	46bd      	mov	sp, r7
 80198bc:	bc80      	pop	{r7}
 80198be:	b002      	add	sp, #8
 80198c0:	4770      	bx	lr

080198c2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80198c2:	b082      	sub	sp, #8
 80198c4:	b480      	push	{r7}
 80198c6:	b087      	sub	sp, #28
 80198c8:	af00      	add	r7, sp, #0
 80198ca:	60f8      	str	r0, [r7, #12]
 80198cc:	1d38      	adds	r0, r7, #4
 80198ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80198d2:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80198d4:	2300      	movs	r3, #0
 80198d6:	613b      	str	r3, [r7, #16]
 80198d8:	2300      	movs	r3, #0
 80198da:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 80198dc:	687a      	ldr	r2, [r7, #4]
 80198de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198e0:	1ad3      	subs	r3, r2, r3
 80198e2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80198e4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80198e8:	b29a      	uxth	r2, r3
 80198ea:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80198ee:	b29b      	uxth	r3, r3
 80198f0:	1ad3      	subs	r3, r2, r3
 80198f2:	b29b      	uxth	r3, r3
 80198f4:	b21b      	sxth	r3, r3
 80198f6:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 80198f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	da0a      	bge.n	8019916 <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019900:	693b      	ldr	r3, [r7, #16]
 8019902:	3b01      	subs	r3, #1
 8019904:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019906:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801990a:	b29b      	uxth	r3, r3
 801990c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8019910:	b29b      	uxth	r3, r3
 8019912:	b21b      	sxth	r3, r3
 8019914:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	461a      	mov	r2, r3
 801991a:	f107 0310 	add.w	r3, r7, #16
 801991e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019922:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019926:	68f8      	ldr	r0, [r7, #12]
 8019928:	371c      	adds	r7, #28
 801992a:	46bd      	mov	sp, r7
 801992c:	bc80      	pop	{r7}
 801992e:	b002      	add	sp, #8
 8019930:	4770      	bx	lr
	...

08019934 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019934:	b580      	push	{r7, lr}
 8019936:	b088      	sub	sp, #32
 8019938:	af02      	add	r7, sp, #8
 801993a:	463b      	mov	r3, r7
 801993c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019940:	2300      	movs	r3, #0
 8019942:	60bb      	str	r3, [r7, #8]
 8019944:	2300      	movs	r3, #0
 8019946:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019948:	4b10      	ldr	r3, [pc, #64]	; (801998c <SysTimeSet+0x58>)
 801994a:	691b      	ldr	r3, [r3, #16]
 801994c:	f107 0208 	add.w	r2, r7, #8
 8019950:	3204      	adds	r2, #4
 8019952:	4610      	mov	r0, r2
 8019954:	4798      	blx	r3
 8019956:	4603      	mov	r3, r0
 8019958:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801995a:	f107 0010 	add.w	r0, r7, #16
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	9300      	str	r3, [sp, #0]
 8019962:	68bb      	ldr	r3, [r7, #8]
 8019964:	463a      	mov	r2, r7
 8019966:	ca06      	ldmia	r2, {r1, r2}
 8019968:	f7ff ffab 	bl	80198c2 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801996c:	4b07      	ldr	r3, [pc, #28]	; (801998c <SysTimeSet+0x58>)
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	693a      	ldr	r2, [r7, #16]
 8019972:	4610      	mov	r0, r2
 8019974:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019976:	4b05      	ldr	r3, [pc, #20]	; (801998c <SysTimeSet+0x58>)
 8019978:	689b      	ldr	r3, [r3, #8]
 801997a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801997e:	4610      	mov	r0, r2
 8019980:	4798      	blx	r3
}
 8019982:	bf00      	nop
 8019984:	3718      	adds	r7, #24
 8019986:	46bd      	mov	sp, r7
 8019988:	bd80      	pop	{r7, pc}
 801998a:	bf00      	nop
 801998c:	0801b674 	.word	0x0801b674

08019990 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019990:	b580      	push	{r7, lr}
 8019992:	b08a      	sub	sp, #40	; 0x28
 8019994:	af02      	add	r7, sp, #8
 8019996:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019998:	2300      	movs	r3, #0
 801999a:	61bb      	str	r3, [r7, #24]
 801999c:	2300      	movs	r3, #0
 801999e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 80199a0:	2300      	movs	r3, #0
 80199a2:	613b      	str	r3, [r7, #16]
 80199a4:	2300      	movs	r3, #0
 80199a6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80199a8:	4b14      	ldr	r3, [pc, #80]	; (80199fc <SysTimeGet+0x6c>)
 80199aa:	691b      	ldr	r3, [r3, #16]
 80199ac:	f107 0218 	add.w	r2, r7, #24
 80199b0:	3204      	adds	r2, #4
 80199b2:	4610      	mov	r0, r2
 80199b4:	4798      	blx	r3
 80199b6:	4603      	mov	r3, r0
 80199b8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80199ba:	4b10      	ldr	r3, [pc, #64]	; (80199fc <SysTimeGet+0x6c>)
 80199bc:	68db      	ldr	r3, [r3, #12]
 80199be:	4798      	blx	r3
 80199c0:	4603      	mov	r3, r0
 80199c2:	b21b      	sxth	r3, r3
 80199c4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80199c6:	4b0d      	ldr	r3, [pc, #52]	; (80199fc <SysTimeGet+0x6c>)
 80199c8:	685b      	ldr	r3, [r3, #4]
 80199ca:	4798      	blx	r3
 80199cc:	4603      	mov	r3, r0
 80199ce:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80199d0:	f107 0010 	add.w	r0, r7, #16
 80199d4:	69fb      	ldr	r3, [r7, #28]
 80199d6:	9300      	str	r3, [sp, #0]
 80199d8:	69bb      	ldr	r3, [r7, #24]
 80199da:	f107 0208 	add.w	r2, r7, #8
 80199de:	ca06      	ldmia	r2, {r1, r2}
 80199e0:	f7ff ff36 	bl	8019850 <SysTimeAdd>

  return sysTime;
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	461a      	mov	r2, r3
 80199e8:	f107 0310 	add.w	r3, r7, #16
 80199ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80199f0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80199f4:	6878      	ldr	r0, [r7, #4]
 80199f6:	3720      	adds	r7, #32
 80199f8:	46bd      	mov	sp, r7
 80199fa:	bd80      	pop	{r7, pc}
 80199fc:	0801b674 	.word	0x0801b674

08019a00 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b084      	sub	sp, #16
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019a08:	2300      	movs	r3, #0
 8019a0a:	60bb      	str	r3, [r7, #8]
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019a10:	4b0a      	ldr	r3, [pc, #40]	; (8019a3c <SysTimeGetMcuTime+0x3c>)
 8019a12:	691b      	ldr	r3, [r3, #16]
 8019a14:	f107 0208 	add.w	r2, r7, #8
 8019a18:	3204      	adds	r2, #4
 8019a1a:	4610      	mov	r0, r2
 8019a1c:	4798      	blx	r3
 8019a1e:	4603      	mov	r3, r0
 8019a20:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	461a      	mov	r2, r3
 8019a26:	f107 0308 	add.w	r3, r7, #8
 8019a2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019a2e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019a32:	6878      	ldr	r0, [r7, #4]
 8019a34:	3710      	adds	r7, #16
 8019a36:	46bd      	mov	sp, r7
 8019a38:	bd80      	pop	{r7, pc}
 8019a3a:	bf00      	nop
 8019a3c:	0801b674 	.word	0x0801b674

08019a40 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b088      	sub	sp, #32
 8019a44:	af02      	add	r7, sp, #8
 8019a46:	463b      	mov	r3, r7
 8019a48:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019a4c:	4b0f      	ldr	r3, [pc, #60]	; (8019a8c <SysTimeToMs+0x4c>)
 8019a4e:	68db      	ldr	r3, [r3, #12]
 8019a50:	4798      	blx	r3
 8019a52:	4603      	mov	r3, r0
 8019a54:	b21b      	sxth	r3, r3
 8019a56:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019a58:	4b0c      	ldr	r3, [pc, #48]	; (8019a8c <SysTimeToMs+0x4c>)
 8019a5a:	685b      	ldr	r3, [r3, #4]
 8019a5c:	4798      	blx	r3
 8019a5e:	4603      	mov	r3, r0
 8019a60:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019a62:	f107 0008 	add.w	r0, r7, #8
 8019a66:	697b      	ldr	r3, [r7, #20]
 8019a68:	9300      	str	r3, [sp, #0]
 8019a6a:	693b      	ldr	r3, [r7, #16]
 8019a6c:	463a      	mov	r2, r7
 8019a6e:	ca06      	ldmia	r2, {r1, r2}
 8019a70:	f7ff ff27 	bl	80198c2 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019a74:	68bb      	ldr	r3, [r7, #8]
 8019a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019a7a:	fb02 f303 	mul.w	r3, r2, r3
 8019a7e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019a82:	4413      	add	r3, r2
}
 8019a84:	4618      	mov	r0, r3
 8019a86:	3718      	adds	r7, #24
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	bd80      	pop	{r7, pc}
 8019a8c:	0801b674 	.word	0x0801b674

08019a90 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b08a      	sub	sp, #40	; 0x28
 8019a94:	af02      	add	r7, sp, #8
 8019a96:	6078      	str	r0, [r7, #4]
 8019a98:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019a9a:	683b      	ldr	r3, [r7, #0]
 8019a9c:	4a19      	ldr	r2, [pc, #100]	; (8019b04 <SysTimeFromMs+0x74>)
 8019a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8019aa2:	099b      	lsrs	r3, r3, #6
 8019aa4:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019aa6:	69fb      	ldr	r3, [r7, #28]
 8019aa8:	617b      	str	r3, [r7, #20]
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	b29a      	uxth	r2, r3
 8019aae:	69fb      	ldr	r3, [r7, #28]
 8019ab0:	b29b      	uxth	r3, r3
 8019ab2:	4619      	mov	r1, r3
 8019ab4:	0149      	lsls	r1, r1, #5
 8019ab6:	1ac9      	subs	r1, r1, r3
 8019ab8:	0089      	lsls	r1, r1, #2
 8019aba:	440b      	add	r3, r1
 8019abc:	00db      	lsls	r3, r3, #3
 8019abe:	b29b      	uxth	r3, r3
 8019ac0:	1ad3      	subs	r3, r2, r3
 8019ac2:	b29b      	uxth	r3, r3
 8019ac4:	b21b      	sxth	r3, r3
 8019ac6:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019ac8:	f107 030c 	add.w	r3, r7, #12
 8019acc:	2200      	movs	r2, #0
 8019ace:	601a      	str	r2, [r3, #0]
 8019ad0:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019ad2:	4b0d      	ldr	r3, [pc, #52]	; (8019b08 <SysTimeFromMs+0x78>)
 8019ad4:	68db      	ldr	r3, [r3, #12]
 8019ad6:	4798      	blx	r3
 8019ad8:	4603      	mov	r3, r0
 8019ada:	b21b      	sxth	r3, r3
 8019adc:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019ade:	4b0a      	ldr	r3, [pc, #40]	; (8019b08 <SysTimeFromMs+0x78>)
 8019ae0:	685b      	ldr	r3, [r3, #4]
 8019ae2:	4798      	blx	r3
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019ae8:	6878      	ldr	r0, [r7, #4]
 8019aea:	693b      	ldr	r3, [r7, #16]
 8019aec:	9300      	str	r3, [sp, #0]
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	f107 0214 	add.w	r2, r7, #20
 8019af4:	ca06      	ldmia	r2, {r1, r2}
 8019af6:	f7ff feab 	bl	8019850 <SysTimeAdd>
}
 8019afa:	6878      	ldr	r0, [r7, #4]
 8019afc:	3720      	adds	r7, #32
 8019afe:	46bd      	mov	sp, r7
 8019b00:	bd80      	pop	{r7, pc}
 8019b02:	bf00      	nop
 8019b04:	10624dd3 	.word	0x10624dd3
 8019b08:	0801b674 	.word	0x0801b674

08019b0c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8019b0c:	b480      	push	{r7}
 8019b0e:	b085      	sub	sp, #20
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	6078      	str	r0, [r7, #4]
  int i = 0;
 8019b14:	2300      	movs	r3, #0
 8019b16:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8019b18:	e00e      	b.n	8019b38 <ee_skip_atoi+0x2c>
 8019b1a:	68fa      	ldr	r2, [r7, #12]
 8019b1c:	4613      	mov	r3, r2
 8019b1e:	009b      	lsls	r3, r3, #2
 8019b20:	4413      	add	r3, r2
 8019b22:	005b      	lsls	r3, r3, #1
 8019b24:	4618      	mov	r0, r3
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	1c59      	adds	r1, r3, #1
 8019b2c:	687a      	ldr	r2, [r7, #4]
 8019b2e:	6011      	str	r1, [r2, #0]
 8019b30:	781b      	ldrb	r3, [r3, #0]
 8019b32:	4403      	add	r3, r0
 8019b34:	3b30      	subs	r3, #48	; 0x30
 8019b36:	60fb      	str	r3, [r7, #12]
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	781b      	ldrb	r3, [r3, #0]
 8019b3e:	2b2f      	cmp	r3, #47	; 0x2f
 8019b40:	d904      	bls.n	8019b4c <ee_skip_atoi+0x40>
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	781b      	ldrb	r3, [r3, #0]
 8019b48:	2b39      	cmp	r3, #57	; 0x39
 8019b4a:	d9e6      	bls.n	8019b1a <ee_skip_atoi+0xe>
  return i;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
}
 8019b4e:	4618      	mov	r0, r3
 8019b50:	3714      	adds	r7, #20
 8019b52:	46bd      	mov	sp, r7
 8019b54:	bc80      	pop	{r7}
 8019b56:	4770      	bx	lr

08019b58 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8019b58:	b480      	push	{r7}
 8019b5a:	b099      	sub	sp, #100	; 0x64
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	60f8      	str	r0, [r7, #12]
 8019b60:	60b9      	str	r1, [r7, #8]
 8019b62:	607a      	str	r2, [r7, #4]
 8019b64:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019b66:	4b72      	ldr	r3, [pc, #456]	; (8019d30 <ee_number+0x1d8>)
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8019b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d002      	beq.n	8019b7c <ee_number+0x24>
 8019b76:	4b6f      	ldr	r3, [pc, #444]	; (8019d34 <ee_number+0x1dc>)
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8019b7c:	683b      	ldr	r3, [r7, #0]
 8019b7e:	2b01      	cmp	r3, #1
 8019b80:	dd02      	ble.n	8019b88 <ee_number+0x30>
 8019b82:	683b      	ldr	r3, [r7, #0]
 8019b84:	2b24      	cmp	r3, #36	; 0x24
 8019b86:	dd01      	ble.n	8019b8c <ee_number+0x34>
 8019b88:	2300      	movs	r3, #0
 8019b8a:	e0cc      	b.n	8019d26 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8019b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019b8e:	f003 0301 	and.w	r3, r3, #1
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d001      	beq.n	8019b9a <ee_number+0x42>
 8019b96:	2330      	movs	r3, #48	; 0x30
 8019b98:	e000      	b.n	8019b9c <ee_number+0x44>
 8019b9a:	2320      	movs	r3, #32
 8019b9c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8019ba0:	2300      	movs	r3, #0
 8019ba2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019ba8:	f003 0302 	and.w	r3, r3, #2
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d00b      	beq.n	8019bc8 <ee_number+0x70>
  {
    if (num < 0)
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	da08      	bge.n	8019bc8 <ee_number+0x70>
    {
      sign = '-';
 8019bb6:	232d      	movs	r3, #45	; 0x2d
 8019bb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	425b      	negs	r3, r3
 8019bc0:	607b      	str	r3, [r7, #4]
      size--;
 8019bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019bc4:	3b01      	subs	r3, #1
 8019bc6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8019bc8:	2300      	movs	r3, #0
 8019bca:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d120      	bne.n	8019c14 <ee_number+0xbc>
    tmp[i++] = '0';
 8019bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019bd4:	1c5a      	adds	r2, r3, #1
 8019bd6:	657a      	str	r2, [r7, #84]	; 0x54
 8019bd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8019bdc:	4413      	add	r3, r2
 8019bde:	2230      	movs	r2, #48	; 0x30
 8019be0:	f803 2c50 	strb.w	r2, [r3, #-80]
 8019be4:	e019      	b.n	8019c1a <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	683a      	ldr	r2, [r7, #0]
 8019bea:	fbb3 f1f2 	udiv	r1, r3, r2
 8019bee:	fb02 f201 	mul.w	r2, r2, r1
 8019bf2:	1a9b      	subs	r3, r3, r2
 8019bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019bf6:	441a      	add	r2, r3
 8019bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019bfa:	1c59      	adds	r1, r3, #1
 8019bfc:	6579      	str	r1, [r7, #84]	; 0x54
 8019bfe:	7812      	ldrb	r2, [r2, #0]
 8019c00:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019c04:	440b      	add	r3, r1
 8019c06:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8019c0a:	687a      	ldr	r2, [r7, #4]
 8019c0c:	683b      	ldr	r3, [r7, #0]
 8019c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c12:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d1e5      	bne.n	8019be6 <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 8019c1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c1e:	429a      	cmp	r2, r3
 8019c20:	dd01      	ble.n	8019c26 <ee_number+0xce>
 8019c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019c24:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019c26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c2a:	1ad3      	subs	r3, r2, r3
 8019c2c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8019c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019c30:	f003 0301 	and.w	r3, r3, #1
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d112      	bne.n	8019c5e <ee_number+0x106>
 8019c38:	e00c      	b.n	8019c54 <ee_number+0xfc>
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	1c5a      	adds	r2, r3, #1
 8019c3e:	60fa      	str	r2, [r7, #12]
 8019c40:	2220      	movs	r2, #32
 8019c42:	701a      	strb	r2, [r3, #0]
 8019c44:	68bb      	ldr	r3, [r7, #8]
 8019c46:	3b01      	subs	r3, #1
 8019c48:	60bb      	str	r3, [r7, #8]
 8019c4a:	68bb      	ldr	r3, [r7, #8]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d101      	bne.n	8019c54 <ee_number+0xfc>
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	e068      	b.n	8019d26 <ee_number+0x1ce>
 8019c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019c56:	1e5a      	subs	r2, r3, #1
 8019c58:	66ba      	str	r2, [r7, #104]	; 0x68
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	dced      	bgt.n	8019c3a <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 8019c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d01b      	beq.n	8019c9e <ee_number+0x146>
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	1c5a      	adds	r2, r3, #1
 8019c6a:	60fa      	str	r2, [r7, #12]
 8019c6c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019c70:	701a      	strb	r2, [r3, #0]
 8019c72:	68bb      	ldr	r3, [r7, #8]
 8019c74:	3b01      	subs	r3, #1
 8019c76:	60bb      	str	r3, [r7, #8]
 8019c78:	68bb      	ldr	r3, [r7, #8]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d10f      	bne.n	8019c9e <ee_number+0x146>
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	e051      	b.n	8019d26 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	1c5a      	adds	r2, r3, #1
 8019c86:	60fa      	str	r2, [r7, #12]
 8019c88:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019c8c:	701a      	strb	r2, [r3, #0]
 8019c8e:	68bb      	ldr	r3, [r7, #8]
 8019c90:	3b01      	subs	r3, #1
 8019c92:	60bb      	str	r3, [r7, #8]
 8019c94:	68bb      	ldr	r3, [r7, #8]
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d101      	bne.n	8019c9e <ee_number+0x146>
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	e043      	b.n	8019d26 <ee_number+0x1ce>
 8019c9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019ca0:	1e5a      	subs	r2, r3, #1
 8019ca2:	66ba      	str	r2, [r7, #104]	; 0x68
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	dcec      	bgt.n	8019c82 <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019ca8:	e00c      	b.n	8019cc4 <ee_number+0x16c>
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	1c5a      	adds	r2, r3, #1
 8019cae:	60fa      	str	r2, [r7, #12]
 8019cb0:	2230      	movs	r2, #48	; 0x30
 8019cb2:	701a      	strb	r2, [r3, #0]
 8019cb4:	68bb      	ldr	r3, [r7, #8]
 8019cb6:	3b01      	subs	r3, #1
 8019cb8:	60bb      	str	r3, [r7, #8]
 8019cba:	68bb      	ldr	r3, [r7, #8]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d101      	bne.n	8019cc4 <ee_number+0x16c>
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	e030      	b.n	8019d26 <ee_number+0x1ce>
 8019cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019cc6:	1e5a      	subs	r2, r3, #1
 8019cc8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019cca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019ccc:	429a      	cmp	r2, r3
 8019cce:	dbec      	blt.n	8019caa <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8019cd0:	e010      	b.n	8019cf4 <ee_number+0x19c>
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	1c5a      	adds	r2, r3, #1
 8019cd6:	60fa      	str	r2, [r7, #12]
 8019cd8:	f107 0110 	add.w	r1, r7, #16
 8019cdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019cde:	440a      	add	r2, r1
 8019ce0:	7812      	ldrb	r2, [r2, #0]
 8019ce2:	701a      	strb	r2, [r3, #0]
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	3b01      	subs	r3, #1
 8019ce8:	60bb      	str	r3, [r7, #8]
 8019cea:	68bb      	ldr	r3, [r7, #8]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d101      	bne.n	8019cf4 <ee_number+0x19c>
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	e018      	b.n	8019d26 <ee_number+0x1ce>
 8019cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019cf6:	1e5a      	subs	r2, r3, #1
 8019cf8:	657a      	str	r2, [r7, #84]	; 0x54
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	dce9      	bgt.n	8019cd2 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 8019cfe:	e00c      	b.n	8019d1a <ee_number+0x1c2>
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	1c5a      	adds	r2, r3, #1
 8019d04:	60fa      	str	r2, [r7, #12]
 8019d06:	2220      	movs	r2, #32
 8019d08:	701a      	strb	r2, [r3, #0]
 8019d0a:	68bb      	ldr	r3, [r7, #8]
 8019d0c:	3b01      	subs	r3, #1
 8019d0e:	60bb      	str	r3, [r7, #8]
 8019d10:	68bb      	ldr	r3, [r7, #8]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d101      	bne.n	8019d1a <ee_number+0x1c2>
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	e005      	b.n	8019d26 <ee_number+0x1ce>
 8019d1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019d1c:	1e5a      	subs	r2, r3, #1
 8019d1e:	66ba      	str	r2, [r7, #104]	; 0x68
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	dced      	bgt.n	8019d00 <ee_number+0x1a8>

  return str;
 8019d24:	68fb      	ldr	r3, [r7, #12]
}
 8019d26:	4618      	mov	r0, r3
 8019d28:	3764      	adds	r7, #100	; 0x64
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	bc80      	pop	{r7}
 8019d2e:	4770      	bx	lr
 8019d30:	20000124 	.word	0x20000124
 8019d34:	20000128 	.word	0x20000128

08019d38 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b092      	sub	sp, #72	; 0x48
 8019d3c:	af04      	add	r7, sp, #16
 8019d3e:	60f8      	str	r0, [r7, #12]
 8019d40:	60b9      	str	r1, [r7, #8]
 8019d42:	607a      	str	r2, [r7, #4]
 8019d44:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8019d46:	68bb      	ldr	r3, [r7, #8]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	dc01      	bgt.n	8019d50 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	e142      	b.n	8019fd6 <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d54:	e12a      	b.n	8019fac <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 8019d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	1ad2      	subs	r2, r2, r3
 8019d5c:	68bb      	ldr	r3, [r7, #8]
 8019d5e:	3b01      	subs	r3, #1
 8019d60:	429a      	cmp	r2, r3
 8019d62:	f280 8131 	bge.w	8019fc8 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	781b      	ldrb	r3, [r3, #0]
 8019d6a:	2b25      	cmp	r3, #37	; 0x25
 8019d6c:	d006      	beq.n	8019d7c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8019d6e:	687a      	ldr	r2, [r7, #4]
 8019d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d72:	1c59      	adds	r1, r3, #1
 8019d74:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019d76:	7812      	ldrb	r2, [r2, #0]
 8019d78:	701a      	strb	r2, [r3, #0]
      continue;
 8019d7a:	e114      	b.n	8019fa6 <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	3301      	adds	r3, #1
 8019d84:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	781b      	ldrb	r3, [r3, #0]
 8019d8a:	2b30      	cmp	r3, #48	; 0x30
 8019d8c:	d103      	bne.n	8019d96 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8019d8e:	6a3b      	ldr	r3, [r7, #32]
 8019d90:	f043 0301 	orr.w	r3, r3, #1
 8019d94:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 8019d96:	f04f 33ff 	mov.w	r3, #4294967295
 8019d9a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	781b      	ldrb	r3, [r3, #0]
 8019da0:	2b2f      	cmp	r3, #47	; 0x2f
 8019da2:	d908      	bls.n	8019db6 <tiny_vsnprintf_like+0x7e>
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	781b      	ldrb	r3, [r3, #0]
 8019da8:	2b39      	cmp	r3, #57	; 0x39
 8019daa:	d804      	bhi.n	8019db6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8019dac:	1d3b      	adds	r3, r7, #4
 8019dae:	4618      	mov	r0, r3
 8019db0:	f7ff feac 	bl	8019b0c <ee_skip_atoi>
 8019db4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 8019db6:	f04f 33ff 	mov.w	r3, #4294967295
 8019dba:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 8019dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8019dc0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 8019dc2:	230a      	movs	r3, #10
 8019dc4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	781b      	ldrb	r3, [r3, #0]
 8019dca:	3b58      	subs	r3, #88	; 0x58
 8019dcc:	2b20      	cmp	r3, #32
 8019dce:	f200 8094 	bhi.w	8019efa <tiny_vsnprintf_like+0x1c2>
 8019dd2:	a201      	add	r2, pc, #4	; (adr r2, 8019dd8 <tiny_vsnprintf_like+0xa0>)
 8019dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019dd8:	08019ee3 	.word	0x08019ee3
 8019ddc:	08019efb 	.word	0x08019efb
 8019de0:	08019efb 	.word	0x08019efb
 8019de4:	08019efb 	.word	0x08019efb
 8019de8:	08019efb 	.word	0x08019efb
 8019dec:	08019efb 	.word	0x08019efb
 8019df0:	08019efb 	.word	0x08019efb
 8019df4:	08019efb 	.word	0x08019efb
 8019df8:	08019efb 	.word	0x08019efb
 8019dfc:	08019efb 	.word	0x08019efb
 8019e00:	08019efb 	.word	0x08019efb
 8019e04:	08019e67 	.word	0x08019e67
 8019e08:	08019ef1 	.word	0x08019ef1
 8019e0c:	08019efb 	.word	0x08019efb
 8019e10:	08019efb 	.word	0x08019efb
 8019e14:	08019efb 	.word	0x08019efb
 8019e18:	08019efb 	.word	0x08019efb
 8019e1c:	08019ef1 	.word	0x08019ef1
 8019e20:	08019efb 	.word	0x08019efb
 8019e24:	08019efb 	.word	0x08019efb
 8019e28:	08019efb 	.word	0x08019efb
 8019e2c:	08019efb 	.word	0x08019efb
 8019e30:	08019efb 	.word	0x08019efb
 8019e34:	08019efb 	.word	0x08019efb
 8019e38:	08019efb 	.word	0x08019efb
 8019e3c:	08019efb 	.word	0x08019efb
 8019e40:	08019efb 	.word	0x08019efb
 8019e44:	08019e87 	.word	0x08019e87
 8019e48:	08019efb 	.word	0x08019efb
 8019e4c:	08019f47 	.word	0x08019f47
 8019e50:	08019efb 	.word	0x08019efb
 8019e54:	08019efb 	.word	0x08019efb
 8019e58:	08019eeb 	.word	0x08019eeb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8019e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e5e:	1c5a      	adds	r2, r3, #1
 8019e60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019e62:	2220      	movs	r2, #32
 8019e64:	701a      	strb	r2, [r3, #0]
 8019e66:	69fb      	ldr	r3, [r7, #28]
 8019e68:	3b01      	subs	r3, #1
 8019e6a:	61fb      	str	r3, [r7, #28]
 8019e6c:	69fb      	ldr	r3, [r7, #28]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	dcf4      	bgt.n	8019e5c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 8019e72:	683b      	ldr	r3, [r7, #0]
 8019e74:	1d1a      	adds	r2, r3, #4
 8019e76:	603a      	str	r2, [r7, #0]
 8019e78:	6819      	ldr	r1, [r3, #0]
 8019e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e7c:	1c5a      	adds	r2, r3, #1
 8019e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019e80:	b2ca      	uxtb	r2, r1
 8019e82:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8019e84:	e08f      	b.n	8019fa6 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 8019e86:	683b      	ldr	r3, [r7, #0]
 8019e88:	1d1a      	adds	r2, r3, #4
 8019e8a:	603a      	str	r2, [r7, #0]
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 8019e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d101      	bne.n	8019e9a <tiny_vsnprintf_like+0x162>
 8019e96:	4b52      	ldr	r3, [pc, #328]	; (8019fe0 <tiny_vsnprintf_like+0x2a8>)
 8019e98:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 8019e9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e9c:	f7e6 f96c 	bl	8000178 <strlen>
 8019ea0:	4603      	mov	r3, r0
 8019ea2:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8019ea4:	e004      	b.n	8019eb0 <tiny_vsnprintf_like+0x178>
 8019ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea8:	1c5a      	adds	r2, r3, #1
 8019eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019eac:	2220      	movs	r2, #32
 8019eae:	701a      	strb	r2, [r3, #0]
 8019eb0:	69fb      	ldr	r3, [r7, #28]
 8019eb2:	1e5a      	subs	r2, r3, #1
 8019eb4:	61fa      	str	r2, [r7, #28]
 8019eb6:	693a      	ldr	r2, [r7, #16]
 8019eb8:	429a      	cmp	r2, r3
 8019eba:	dbf4      	blt.n	8019ea6 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8019ebc:	2300      	movs	r3, #0
 8019ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8019ec0:	e00a      	b.n	8019ed8 <tiny_vsnprintf_like+0x1a0>
 8019ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ec4:	1c53      	adds	r3, r2, #1
 8019ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8019ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eca:	1c59      	adds	r1, r3, #1
 8019ecc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019ece:	7812      	ldrb	r2, [r2, #0]
 8019ed0:	701a      	strb	r2, [r3, #0]
 8019ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ed4:	3301      	adds	r3, #1
 8019ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8019ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019eda:	693b      	ldr	r3, [r7, #16]
 8019edc:	429a      	cmp	r2, r3
 8019ede:	dbf0      	blt.n	8019ec2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8019ee0:	e061      	b.n	8019fa6 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8019ee2:	6a3b      	ldr	r3, [r7, #32]
 8019ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ee8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 8019eea:	2310      	movs	r3, #16
 8019eec:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8019eee:	e02d      	b.n	8019f4c <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 8019ef0:	6a3b      	ldr	r3, [r7, #32]
 8019ef2:	f043 0302 	orr.w	r3, r3, #2
 8019ef6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8019ef8:	e025      	b.n	8019f46 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	781b      	ldrb	r3, [r3, #0]
 8019efe:	2b25      	cmp	r3, #37	; 0x25
 8019f00:	d004      	beq.n	8019f0c <tiny_vsnprintf_like+0x1d4>
 8019f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f04:	1c5a      	adds	r2, r3, #1
 8019f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019f08:	2225      	movs	r2, #37	; 0x25
 8019f0a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 8019f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	1ad2      	subs	r2, r2, r3
 8019f12:	68bb      	ldr	r3, [r7, #8]
 8019f14:	3b01      	subs	r3, #1
 8019f16:	429a      	cmp	r2, r3
 8019f18:	da17      	bge.n	8019f4a <tiny_vsnprintf_like+0x212>
        if (*fmt)
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	781b      	ldrb	r3, [r3, #0]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d006      	beq.n	8019f30 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 8019f22:	687a      	ldr	r2, [r7, #4]
 8019f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f26:	1c59      	adds	r1, r3, #1
 8019f28:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019f2a:	7812      	ldrb	r2, [r2, #0]
 8019f2c:	701a      	strb	r2, [r3, #0]
 8019f2e:	e002      	b.n	8019f36 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	3b01      	subs	r3, #1
 8019f34:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 8019f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	1ad2      	subs	r2, r2, r3
 8019f3c:	68bb      	ldr	r3, [r7, #8]
 8019f3e:	3b01      	subs	r3, #1
 8019f40:	429a      	cmp	r2, r3
 8019f42:	db2f      	blt.n	8019fa4 <tiny_vsnprintf_like+0x26c>
 8019f44:	e002      	b.n	8019f4c <tiny_vsnprintf_like+0x214>
        break;
 8019f46:	bf00      	nop
 8019f48:	e000      	b.n	8019f4c <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 8019f4a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8019f4c:	697b      	ldr	r3, [r7, #20]
 8019f4e:	2b6c      	cmp	r3, #108	; 0x6c
 8019f50:	d105      	bne.n	8019f5e <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 8019f52:	683b      	ldr	r3, [r7, #0]
 8019f54:	1d1a      	adds	r2, r3, #4
 8019f56:	603a      	str	r2, [r7, #0]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8019f5c:	e00f      	b.n	8019f7e <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 8019f5e:	6a3b      	ldr	r3, [r7, #32]
 8019f60:	f003 0302 	and.w	r3, r3, #2
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d005      	beq.n	8019f74 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 8019f68:	683b      	ldr	r3, [r7, #0]
 8019f6a:	1d1a      	adds	r2, r3, #4
 8019f6c:	603a      	str	r2, [r7, #0]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	637b      	str	r3, [r7, #52]	; 0x34
 8019f72:	e004      	b.n	8019f7e <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 8019f74:	683b      	ldr	r3, [r7, #0]
 8019f76:	1d1a      	adds	r2, r3, #4
 8019f78:	603a      	str	r2, [r7, #0]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8019f7e:	68bb      	ldr	r3, [r7, #8]
 8019f80:	1e5a      	subs	r2, r3, #1
 8019f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	1acb      	subs	r3, r1, r3
 8019f88:	1ad1      	subs	r1, r2, r3
 8019f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019f8c:	6a3b      	ldr	r3, [r7, #32]
 8019f8e:	9302      	str	r3, [sp, #8]
 8019f90:	69bb      	ldr	r3, [r7, #24]
 8019f92:	9301      	str	r3, [sp, #4]
 8019f94:	69fb      	ldr	r3, [r7, #28]
 8019f96:	9300      	str	r3, [sp, #0]
 8019f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019f9c:	f7ff fddc 	bl	8019b58 <ee_number>
 8019fa0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019fa2:	e000      	b.n	8019fa6 <tiny_vsnprintf_like+0x26e>
        continue;
 8019fa4:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	3301      	adds	r3, #1
 8019faa:	607b      	str	r3, [r7, #4]
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	781b      	ldrb	r3, [r3, #0]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	f47f aed0 	bne.w	8019d56 <tiny_vsnprintf_like+0x1e>
 8019fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	1ad2      	subs	r2, r2, r3
 8019fbc:	68bb      	ldr	r3, [r7, #8]
 8019fbe:	3b01      	subs	r3, #1
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	f6bf aec8 	bge.w	8019d56 <tiny_vsnprintf_like+0x1e>
 8019fc6:	e000      	b.n	8019fca <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 8019fc8:	bf00      	nop
  }

  *str = '\0';
 8019fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fcc:	2200      	movs	r2, #0
 8019fce:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8019fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fd2:	68fb      	ldr	r3, [r7, #12]
 8019fd4:	1ad3      	subs	r3, r2, r3
}
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	3738      	adds	r7, #56	; 0x38
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	bd80      	pop	{r7, pc}
 8019fde:	bf00      	nop
 8019fe0:	0801b5a0 	.word	0x0801b5a0

08019fe4 <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8019fe4:	b580      	push	{r7, lr}
 8019fe6:	b088      	sub	sp, #32
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	60f8      	str	r0, [r7, #12]
 8019fec:	60b9      	str	r1, [r7, #8]
 8019fee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8019ff4:	617b      	str	r3, [r7, #20]
  return(result);
 8019ff6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8019ff8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019ffa:	b672      	cpsid	i
}
 8019ffc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019ffe:	68f8      	ldr	r0, [r7, #12]
 801a000:	f000 f83e 	bl	801a080 <SEQ_BitPosition>
 801a004:	4603      	mov	r3, r0
 801a006:	4619      	mov	r1, r3
 801a008:	4a06      	ldr	r2, [pc, #24]	; (801a024 <UTIL_SEQ_RegTask+0x40>)
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a010:	69fb      	ldr	r3, [r7, #28]
 801a012:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a014:	69bb      	ldr	r3, [r7, #24]
 801a016:	f383 8810 	msr	PRIMASK, r3
}
 801a01a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a01c:	bf00      	nop
}
 801a01e:	3720      	adds	r7, #32
 801a020:	46bd      	mov	sp, r7
 801a022:	bd80      	pop	{r7, pc}
 801a024:	20000f00 	.word	0x20000f00

0801a028 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a028:	b480      	push	{r7}
 801a02a:	b087      	sub	sp, #28
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	6078      	str	r0, [r7, #4]
 801a030:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a032:	f3ef 8310 	mrs	r3, PRIMASK
 801a036:	60fb      	str	r3, [r7, #12]
  return(result);
 801a038:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a03a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a03c:	b672      	cpsid	i
}
 801a03e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a040:	4b0d      	ldr	r3, [pc, #52]	; (801a078 <UTIL_SEQ_SetTask+0x50>)
 801a042:	681a      	ldr	r2, [r3, #0]
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	4313      	orrs	r3, r2
 801a048:	4a0b      	ldr	r2, [pc, #44]	; (801a078 <UTIL_SEQ_SetTask+0x50>)
 801a04a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a04c:	4a0b      	ldr	r2, [pc, #44]	; (801a07c <UTIL_SEQ_SetTask+0x54>)
 801a04e:	683b      	ldr	r3, [r7, #0]
 801a050:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	431a      	orrs	r2, r3
 801a058:	4908      	ldr	r1, [pc, #32]	; (801a07c <UTIL_SEQ_SetTask+0x54>)
 801a05a:	683b      	ldr	r3, [r7, #0]
 801a05c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a060:	697b      	ldr	r3, [r7, #20]
 801a062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a064:	693b      	ldr	r3, [r7, #16]
 801a066:	f383 8810 	msr	PRIMASK, r3
}
 801a06a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a06c:	bf00      	nop
}
 801a06e:	371c      	adds	r7, #28
 801a070:	46bd      	mov	sp, r7
 801a072:	bc80      	pop	{r7}
 801a074:	4770      	bx	lr
 801a076:	bf00      	nop
 801a078:	20000efc 	.word	0x20000efc
 801a07c:	20000f80 	.word	0x20000f80

0801a080 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a080:	b480      	push	{r7}
 801a082:	b085      	sub	sp, #20
 801a084:	af00      	add	r7, sp, #0
 801a086:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801a088:	2300      	movs	r3, #0
 801a08a:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	0c1b      	lsrs	r3, r3, #16
 801a090:	041b      	lsls	r3, r3, #16
 801a092:	2b00      	cmp	r3, #0
 801a094:	d104      	bne.n	801a0a0 <SEQ_BitPosition+0x20>
 801a096:	2310      	movs	r3, #16
 801a098:	73fb      	strb	r3, [r7, #15]
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	041b      	lsls	r3, r3, #16
 801a09e:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d105      	bne.n	801a0b6 <SEQ_BitPosition+0x36>
 801a0aa:	7bfb      	ldrb	r3, [r7, #15]
 801a0ac:	3308      	adds	r3, #8
 801a0ae:	73fb      	strb	r3, [r7, #15]
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	021b      	lsls	r3, r3, #8
 801a0b4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d105      	bne.n	801a0cc <SEQ_BitPosition+0x4c>
 801a0c0:	7bfb      	ldrb	r3, [r7, #15]
 801a0c2:	3304      	adds	r3, #4
 801a0c4:	73fb      	strb	r3, [r7, #15]
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	011b      	lsls	r3, r3, #4
 801a0ca:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	0f1b      	lsrs	r3, r3, #28
 801a0d0:	4a06      	ldr	r2, [pc, #24]	; (801a0ec <SEQ_BitPosition+0x6c>)
 801a0d2:	5cd2      	ldrb	r2, [r2, r3]
 801a0d4:	7bfb      	ldrb	r3, [r7, #15]
 801a0d6:	4413      	add	r3, r2
 801a0d8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a0da:	7bfb      	ldrb	r3, [r7, #15]
 801a0dc:	f1c3 031f 	rsb	r3, r3, #31
 801a0e0:	b2db      	uxtb	r3, r3
}
 801a0e2:	4618      	mov	r0, r3
 801a0e4:	3714      	adds	r7, #20
 801a0e6:	46bd      	mov	sp, r7
 801a0e8:	bc80      	pop	{r7}
 801a0ea:	4770      	bx	lr
 801a0ec:	0801bb60 	.word	0x0801bb60

0801a0f0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a0f4:	4b04      	ldr	r3, [pc, #16]	; (801a108 <UTIL_TIMER_Init+0x18>)
 801a0f6:	2200      	movs	r2, #0
 801a0f8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a0fa:	4b04      	ldr	r3, [pc, #16]	; (801a10c <UTIL_TIMER_Init+0x1c>)
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	4798      	blx	r3
 801a100:	4603      	mov	r3, r0
}
 801a102:	4618      	mov	r0, r3
 801a104:	bd80      	pop	{r7, pc}
 801a106:	bf00      	nop
 801a108:	20000f90 	.word	0x20000f90
 801a10c:	0801b648 	.word	0x0801b648

0801a110 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a110:	b580      	push	{r7, lr}
 801a112:	b084      	sub	sp, #16
 801a114:	af00      	add	r7, sp, #0
 801a116:	60f8      	str	r0, [r7, #12]
 801a118:	60b9      	str	r1, [r7, #8]
 801a11a:	603b      	str	r3, [r7, #0]
 801a11c:	4613      	mov	r3, r2
 801a11e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	2b00      	cmp	r3, #0
 801a124:	d023      	beq.n	801a16e <UTIL_TIMER_Create+0x5e>
 801a126:	683b      	ldr	r3, [r7, #0]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d020      	beq.n	801a16e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	2200      	movs	r2, #0
 801a130:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a132:	4b11      	ldr	r3, [pc, #68]	; (801a178 <UTIL_TIMER_Create+0x68>)
 801a134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a136:	68b8      	ldr	r0, [r7, #8]
 801a138:	4798      	blx	r3
 801a13a:	4602      	mov	r2, r0
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	2200      	movs	r2, #0
 801a144:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	2200      	movs	r2, #0
 801a14a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	2200      	movs	r2, #0
 801a150:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	683a      	ldr	r2, [r7, #0]
 801a156:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	69ba      	ldr	r2, [r7, #24]
 801a15c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	79fa      	ldrb	r2, [r7, #7]
 801a162:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	2200      	movs	r2, #0
 801a168:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a16a:	2300      	movs	r3, #0
 801a16c:	e000      	b.n	801a170 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a16e:	2301      	movs	r3, #1
  }
}
 801a170:	4618      	mov	r0, r3
 801a172:	3710      	adds	r7, #16
 801a174:	46bd      	mov	sp, r7
 801a176:	bd80      	pop	{r7, pc}
 801a178:	0801b648 	.word	0x0801b648

0801a17c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b08a      	sub	sp, #40	; 0x28
 801a180:	af00      	add	r7, sp, #0
 801a182:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a184:	2300      	movs	r3, #0
 801a186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d056      	beq.n	801a23e <UTIL_TIMER_Start+0xc2>
 801a190:	6878      	ldr	r0, [r7, #4]
 801a192:	f000 f9a9 	bl	801a4e8 <TimerExists>
 801a196:	4603      	mov	r3, r0
 801a198:	f083 0301 	eor.w	r3, r3, #1
 801a19c:	b2db      	uxtb	r3, r3
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d04d      	beq.n	801a23e <UTIL_TIMER_Start+0xc2>
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	7a5b      	ldrb	r3, [r3, #9]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d149      	bne.n	801a23e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1aa:	f3ef 8310 	mrs	r3, PRIMASK
 801a1ae:	613b      	str	r3, [r7, #16]
  return(result);
 801a1b0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a1b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a1b4:	b672      	cpsid	i
}
 801a1b6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	685b      	ldr	r3, [r3, #4]
 801a1bc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a1be:	4b24      	ldr	r3, [pc, #144]	; (801a250 <UTIL_TIMER_Start+0xd4>)
 801a1c0:	6a1b      	ldr	r3, [r3, #32]
 801a1c2:	4798      	blx	r3
 801a1c4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a1c6:	6a3a      	ldr	r2, [r7, #32]
 801a1c8:	69bb      	ldr	r3, [r7, #24]
 801a1ca:	429a      	cmp	r2, r3
 801a1cc:	d201      	bcs.n	801a1d2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a1ce:	69bb      	ldr	r3, [r7, #24]
 801a1d0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	6a3a      	ldr	r2, [r7, #32]
 801a1d6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	2200      	movs	r2, #0
 801a1dc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	2201      	movs	r2, #1
 801a1e2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a1ea:	4b1a      	ldr	r3, [pc, #104]	; (801a254 <UTIL_TIMER_Start+0xd8>)
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d106      	bne.n	801a200 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a1f2:	4b17      	ldr	r3, [pc, #92]	; (801a250 <UTIL_TIMER_Start+0xd4>)
 801a1f4:	691b      	ldr	r3, [r3, #16]
 801a1f6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a1f8:	6878      	ldr	r0, [r7, #4]
 801a1fa:	f000 f9eb 	bl	801a5d4 <TimerInsertNewHeadTimer>
 801a1fe:	e017      	b.n	801a230 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a200:	4b13      	ldr	r3, [pc, #76]	; (801a250 <UTIL_TIMER_Start+0xd4>)
 801a202:	699b      	ldr	r3, [r3, #24]
 801a204:	4798      	blx	r3
 801a206:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	681a      	ldr	r2, [r3, #0]
 801a20c:	697b      	ldr	r3, [r7, #20]
 801a20e:	441a      	add	r2, r3
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681a      	ldr	r2, [r3, #0]
 801a218:	4b0e      	ldr	r3, [pc, #56]	; (801a254 <UTIL_TIMER_Start+0xd8>)
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	429a      	cmp	r2, r3
 801a220:	d203      	bcs.n	801a22a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a222:	6878      	ldr	r0, [r7, #4]
 801a224:	f000 f9d6 	bl	801a5d4 <TimerInsertNewHeadTimer>
 801a228:	e002      	b.n	801a230 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a22a:	6878      	ldr	r0, [r7, #4]
 801a22c:	f000 f9a2 	bl	801a574 <TimerInsertTimer>
 801a230:	69fb      	ldr	r3, [r7, #28]
 801a232:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a234:	68fb      	ldr	r3, [r7, #12]
 801a236:	f383 8810 	msr	PRIMASK, r3
}
 801a23a:	bf00      	nop
  {
 801a23c:	e002      	b.n	801a244 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a23e:	2301      	movs	r3, #1
 801a240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801a244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801a248:	4618      	mov	r0, r3
 801a24a:	3728      	adds	r7, #40	; 0x28
 801a24c:	46bd      	mov	sp, r7
 801a24e:	bd80      	pop	{r7, pc}
 801a250:	0801b648 	.word	0x0801b648
 801a254:	20000f90 	.word	0x20000f90

0801a258 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a258:	b580      	push	{r7, lr}
 801a25a:	b088      	sub	sp, #32
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a260:	2300      	movs	r3, #0
 801a262:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d05b      	beq.n	801a322 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a26a:	f3ef 8310 	mrs	r3, PRIMASK
 801a26e:	60fb      	str	r3, [r7, #12]
  return(result);
 801a270:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a274:	b672      	cpsid	i
}
 801a276:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a278:	4b2d      	ldr	r3, [pc, #180]	; (801a330 <UTIL_TIMER_Stop+0xd8>)
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a27e:	4b2c      	ldr	r3, [pc, #176]	; (801a330 <UTIL_TIMER_Stop+0xd8>)
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	2201      	movs	r2, #1
 801a288:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a28a:	4b29      	ldr	r3, [pc, #164]	; (801a330 <UTIL_TIMER_Stop+0xd8>)
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d041      	beq.n	801a316 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	2200      	movs	r2, #0
 801a296:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a298:	4b25      	ldr	r3, [pc, #148]	; (801a330 <UTIL_TIMER_Stop+0xd8>)
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	687a      	ldr	r2, [r7, #4]
 801a29e:	429a      	cmp	r2, r3
 801a2a0:	d134      	bne.n	801a30c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a2a2:	4b23      	ldr	r3, [pc, #140]	; (801a330 <UTIL_TIMER_Stop+0xd8>)
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	2200      	movs	r2, #0
 801a2a8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a2aa:	4b21      	ldr	r3, [pc, #132]	; (801a330 <UTIL_TIMER_Stop+0xd8>)
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	695b      	ldr	r3, [r3, #20]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d00a      	beq.n	801a2ca <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a2b4:	4b1e      	ldr	r3, [pc, #120]	; (801a330 <UTIL_TIMER_Stop+0xd8>)
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	695b      	ldr	r3, [r3, #20]
 801a2ba:	4a1d      	ldr	r2, [pc, #116]	; (801a330 <UTIL_TIMER_Stop+0xd8>)
 801a2bc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a2be:	4b1c      	ldr	r3, [pc, #112]	; (801a330 <UTIL_TIMER_Stop+0xd8>)
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	4618      	mov	r0, r3
 801a2c4:	f000 f92c 	bl	801a520 <TimerSetTimeout>
 801a2c8:	e023      	b.n	801a312 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a2ca:	4b1a      	ldr	r3, [pc, #104]	; (801a334 <UTIL_TIMER_Stop+0xdc>)
 801a2cc:	68db      	ldr	r3, [r3, #12]
 801a2ce:	4798      	blx	r3
            TimerListHead = NULL;
 801a2d0:	4b17      	ldr	r3, [pc, #92]	; (801a330 <UTIL_TIMER_Stop+0xd8>)
 801a2d2:	2200      	movs	r2, #0
 801a2d4:	601a      	str	r2, [r3, #0]
 801a2d6:	e01c      	b.n	801a312 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a2d8:	697a      	ldr	r2, [r7, #20]
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	429a      	cmp	r2, r3
 801a2de:	d110      	bne.n	801a302 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a2e0:	697b      	ldr	r3, [r7, #20]
 801a2e2:	695b      	ldr	r3, [r3, #20]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d006      	beq.n	801a2f6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a2e8:	697b      	ldr	r3, [r7, #20]
 801a2ea:	695b      	ldr	r3, [r3, #20]
 801a2ec:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a2ee:	69bb      	ldr	r3, [r7, #24]
 801a2f0:	697a      	ldr	r2, [r7, #20]
 801a2f2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a2f4:	e00d      	b.n	801a312 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a2fa:	69bb      	ldr	r3, [r7, #24]
 801a2fc:	697a      	ldr	r2, [r7, #20]
 801a2fe:	615a      	str	r2, [r3, #20]
            break;
 801a300:	e007      	b.n	801a312 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a302:	697b      	ldr	r3, [r7, #20]
 801a304:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a306:	697b      	ldr	r3, [r7, #20]
 801a308:	695b      	ldr	r3, [r3, #20]
 801a30a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a30c:	697b      	ldr	r3, [r7, #20]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d1e2      	bne.n	801a2d8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a312:	2300      	movs	r3, #0
 801a314:	77fb      	strb	r3, [r7, #31]
 801a316:	693b      	ldr	r3, [r7, #16]
 801a318:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a31a:	68bb      	ldr	r3, [r7, #8]
 801a31c:	f383 8810 	msr	PRIMASK, r3
}
 801a320:	e001      	b.n	801a326 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a322:	2301      	movs	r3, #1
 801a324:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a326:	7ffb      	ldrb	r3, [r7, #31]
}
 801a328:	4618      	mov	r0, r3
 801a32a:	3720      	adds	r7, #32
 801a32c:	46bd      	mov	sp, r7
 801a32e:	bd80      	pop	{r7, pc}
 801a330:	20000f90 	.word	0x20000f90
 801a334:	0801b648 	.word	0x0801b648

0801a338 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a338:	b580      	push	{r7, lr}
 801a33a:	b084      	sub	sp, #16
 801a33c:	af00      	add	r7, sp, #0
 801a33e:	6078      	str	r0, [r7, #4]
 801a340:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a342:	2300      	movs	r3, #0
 801a344:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d102      	bne.n	801a352 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a34c:	2301      	movs	r3, #1
 801a34e:	73fb      	strb	r3, [r7, #15]
 801a350:	e014      	b.n	801a37c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a352:	4b0d      	ldr	r3, [pc, #52]	; (801a388 <UTIL_TIMER_SetPeriod+0x50>)
 801a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a356:	6838      	ldr	r0, [r7, #0]
 801a358:	4798      	blx	r3
 801a35a:	4602      	mov	r2, r0
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a360:	6878      	ldr	r0, [r7, #4]
 801a362:	f000 f8c1 	bl	801a4e8 <TimerExists>
 801a366:	4603      	mov	r3, r0
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d007      	beq.n	801a37c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a36c:	6878      	ldr	r0, [r7, #4]
 801a36e:	f7ff ff73 	bl	801a258 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a372:	6878      	ldr	r0, [r7, #4]
 801a374:	f7ff ff02 	bl	801a17c <UTIL_TIMER_Start>
 801a378:	4603      	mov	r3, r0
 801a37a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a37c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a37e:	4618      	mov	r0, r3
 801a380:	3710      	adds	r7, #16
 801a382:	46bd      	mov	sp, r7
 801a384:	bd80      	pop	{r7, pc}
 801a386:	bf00      	nop
 801a388:	0801b648 	.word	0x0801b648

0801a38c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801a38c:	b590      	push	{r4, r7, lr}
 801a38e:	b089      	sub	sp, #36	; 0x24
 801a390:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a392:	f3ef 8310 	mrs	r3, PRIMASK
 801a396:	60bb      	str	r3, [r7, #8]
  return(result);
 801a398:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a39a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a39c:	b672      	cpsid	i
}
 801a39e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801a3a0:	4b38      	ldr	r3, [pc, #224]	; (801a484 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a3a2:	695b      	ldr	r3, [r3, #20]
 801a3a4:	4798      	blx	r3
 801a3a6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801a3a8:	4b36      	ldr	r3, [pc, #216]	; (801a484 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a3aa:	691b      	ldr	r3, [r3, #16]
 801a3ac:	4798      	blx	r3
 801a3ae:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801a3b0:	693a      	ldr	r2, [r7, #16]
 801a3b2:	697b      	ldr	r3, [r7, #20]
 801a3b4:	1ad3      	subs	r3, r2, r3
 801a3b6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801a3b8:	4b33      	ldr	r3, [pc, #204]	; (801a488 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d037      	beq.n	801a430 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801a3c0:	4b31      	ldr	r3, [pc, #196]	; (801a488 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801a3c6:	69fb      	ldr	r3, [r7, #28]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	68fa      	ldr	r2, [r7, #12]
 801a3cc:	429a      	cmp	r2, r3
 801a3ce:	d206      	bcs.n	801a3de <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801a3d0:	69fb      	ldr	r3, [r7, #28]
 801a3d2:	681a      	ldr	r2, [r3, #0]
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	1ad2      	subs	r2, r2, r3
 801a3d8:	69fb      	ldr	r3, [r7, #28]
 801a3da:	601a      	str	r2, [r3, #0]
 801a3dc:	e002      	b.n	801a3e4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801a3de:	69fb      	ldr	r3, [r7, #28]
 801a3e0:	2200      	movs	r2, #0
 801a3e2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801a3e4:	69fb      	ldr	r3, [r7, #28]
 801a3e6:	695b      	ldr	r3, [r3, #20]
 801a3e8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801a3ea:	69fb      	ldr	r3, [r7, #28]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d1ea      	bne.n	801a3c6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a3f0:	e01e      	b.n	801a430 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801a3f2:	4b25      	ldr	r3, [pc, #148]	; (801a488 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801a3f8:	4b23      	ldr	r3, [pc, #140]	; (801a488 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	695b      	ldr	r3, [r3, #20]
 801a3fe:	4a22      	ldr	r2, [pc, #136]	; (801a488 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a400:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801a402:	69fb      	ldr	r3, [r7, #28]
 801a404:	2200      	movs	r2, #0
 801a406:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801a408:	69fb      	ldr	r3, [r7, #28]
 801a40a:	2200      	movs	r2, #0
 801a40c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801a40e:	69fb      	ldr	r3, [r7, #28]
 801a410:	68db      	ldr	r3, [r3, #12]
 801a412:	69fa      	ldr	r2, [r7, #28]
 801a414:	6912      	ldr	r2, [r2, #16]
 801a416:	4610      	mov	r0, r2
 801a418:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801a41a:	69fb      	ldr	r3, [r7, #28]
 801a41c:	7adb      	ldrb	r3, [r3, #11]
 801a41e:	2b01      	cmp	r3, #1
 801a420:	d106      	bne.n	801a430 <UTIL_TIMER_IRQ_Handler+0xa4>
 801a422:	69fb      	ldr	r3, [r7, #28]
 801a424:	7a9b      	ldrb	r3, [r3, #10]
 801a426:	2b00      	cmp	r3, #0
 801a428:	d102      	bne.n	801a430 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801a42a:	69f8      	ldr	r0, [r7, #28]
 801a42c:	f7ff fea6 	bl	801a17c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a430:	4b15      	ldr	r3, [pc, #84]	; (801a488 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d00d      	beq.n	801a454 <UTIL_TIMER_IRQ_Handler+0xc8>
 801a438:	4b13      	ldr	r3, [pc, #76]	; (801a488 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d0d7      	beq.n	801a3f2 <UTIL_TIMER_IRQ_Handler+0x66>
 801a442:	4b11      	ldr	r3, [pc, #68]	; (801a488 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	681c      	ldr	r4, [r3, #0]
 801a448:	4b0e      	ldr	r3, [pc, #56]	; (801a484 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a44a:	699b      	ldr	r3, [r3, #24]
 801a44c:	4798      	blx	r3
 801a44e:	4603      	mov	r3, r0
 801a450:	429c      	cmp	r4, r3
 801a452:	d3ce      	bcc.n	801a3f2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801a454:	4b0c      	ldr	r3, [pc, #48]	; (801a488 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d009      	beq.n	801a470 <UTIL_TIMER_IRQ_Handler+0xe4>
 801a45c:	4b0a      	ldr	r3, [pc, #40]	; (801a488 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	7a1b      	ldrb	r3, [r3, #8]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d104      	bne.n	801a470 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801a466:	4b08      	ldr	r3, [pc, #32]	; (801a488 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	4618      	mov	r0, r3
 801a46c:	f000 f858 	bl	801a520 <TimerSetTimeout>
 801a470:	69bb      	ldr	r3, [r7, #24]
 801a472:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	f383 8810 	msr	PRIMASK, r3
}
 801a47a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801a47c:	bf00      	nop
 801a47e:	3724      	adds	r7, #36	; 0x24
 801a480:	46bd      	mov	sp, r7
 801a482:	bd90      	pop	{r4, r7, pc}
 801a484:	0801b648 	.word	0x0801b648
 801a488:	20000f90 	.word	0x20000f90

0801a48c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a48c:	b580      	push	{r7, lr}
 801a48e:	b082      	sub	sp, #8
 801a490:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a492:	4b06      	ldr	r3, [pc, #24]	; (801a4ac <UTIL_TIMER_GetCurrentTime+0x20>)
 801a494:	69db      	ldr	r3, [r3, #28]
 801a496:	4798      	blx	r3
 801a498:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a49a:	4b04      	ldr	r3, [pc, #16]	; (801a4ac <UTIL_TIMER_GetCurrentTime+0x20>)
 801a49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a49e:	6878      	ldr	r0, [r7, #4]
 801a4a0:	4798      	blx	r3
 801a4a2:	4603      	mov	r3, r0
}
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	3708      	adds	r7, #8
 801a4a8:	46bd      	mov	sp, r7
 801a4aa:	bd80      	pop	{r7, pc}
 801a4ac:	0801b648 	.word	0x0801b648

0801a4b0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	b084      	sub	sp, #16
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a4b8:	4b0a      	ldr	r3, [pc, #40]	; (801a4e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a4ba:	69db      	ldr	r3, [r3, #28]
 801a4bc:	4798      	blx	r3
 801a4be:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a4c0:	4b08      	ldr	r3, [pc, #32]	; (801a4e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4c4:	6878      	ldr	r0, [r7, #4]
 801a4c6:	4798      	blx	r3
 801a4c8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a4ca:	4b06      	ldr	r3, [pc, #24]	; (801a4e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4ce:	68f9      	ldr	r1, [r7, #12]
 801a4d0:	68ba      	ldr	r2, [r7, #8]
 801a4d2:	1a8a      	subs	r2, r1, r2
 801a4d4:	4610      	mov	r0, r2
 801a4d6:	4798      	blx	r3
 801a4d8:	4603      	mov	r3, r0
}
 801a4da:	4618      	mov	r0, r3
 801a4dc:	3710      	adds	r7, #16
 801a4de:	46bd      	mov	sp, r7
 801a4e0:	bd80      	pop	{r7, pc}
 801a4e2:	bf00      	nop
 801a4e4:	0801b648 	.word	0x0801b648

0801a4e8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a4e8:	b480      	push	{r7}
 801a4ea:	b085      	sub	sp, #20
 801a4ec:	af00      	add	r7, sp, #0
 801a4ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a4f0:	4b0a      	ldr	r3, [pc, #40]	; (801a51c <TimerExists+0x34>)
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a4f6:	e008      	b.n	801a50a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a4f8:	68fa      	ldr	r2, [r7, #12]
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	429a      	cmp	r2, r3
 801a4fe:	d101      	bne.n	801a504 <TimerExists+0x1c>
    {
      return true;
 801a500:	2301      	movs	r3, #1
 801a502:	e006      	b.n	801a512 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a504:	68fb      	ldr	r3, [r7, #12]
 801a506:	695b      	ldr	r3, [r3, #20]
 801a508:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d1f3      	bne.n	801a4f8 <TimerExists+0x10>
  }
  return false;
 801a510:	2300      	movs	r3, #0
}
 801a512:	4618      	mov	r0, r3
 801a514:	3714      	adds	r7, #20
 801a516:	46bd      	mov	sp, r7
 801a518:	bc80      	pop	{r7}
 801a51a:	4770      	bx	lr
 801a51c:	20000f90 	.word	0x20000f90

0801a520 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801a520:	b590      	push	{r4, r7, lr}
 801a522:	b085      	sub	sp, #20
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801a528:	4b11      	ldr	r3, [pc, #68]	; (801a570 <TimerSetTimeout+0x50>)
 801a52a:	6a1b      	ldr	r3, [r3, #32]
 801a52c:	4798      	blx	r3
 801a52e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	2201      	movs	r2, #1
 801a534:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	681c      	ldr	r4, [r3, #0]
 801a53a:	4b0d      	ldr	r3, [pc, #52]	; (801a570 <TimerSetTimeout+0x50>)
 801a53c:	699b      	ldr	r3, [r3, #24]
 801a53e:	4798      	blx	r3
 801a540:	4602      	mov	r2, r0
 801a542:	68fb      	ldr	r3, [r7, #12]
 801a544:	4413      	add	r3, r2
 801a546:	429c      	cmp	r4, r3
 801a548:	d207      	bcs.n	801a55a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801a54a:	4b09      	ldr	r3, [pc, #36]	; (801a570 <TimerSetTimeout+0x50>)
 801a54c:	699b      	ldr	r3, [r3, #24]
 801a54e:	4798      	blx	r3
 801a550:	4602      	mov	r2, r0
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	441a      	add	r2, r3
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801a55a:	4b05      	ldr	r3, [pc, #20]	; (801a570 <TimerSetTimeout+0x50>)
 801a55c:	689b      	ldr	r3, [r3, #8]
 801a55e:	687a      	ldr	r2, [r7, #4]
 801a560:	6812      	ldr	r2, [r2, #0]
 801a562:	4610      	mov	r0, r2
 801a564:	4798      	blx	r3
}
 801a566:	bf00      	nop
 801a568:	3714      	adds	r7, #20
 801a56a:	46bd      	mov	sp, r7
 801a56c:	bd90      	pop	{r4, r7, pc}
 801a56e:	bf00      	nop
 801a570:	0801b648 	.word	0x0801b648

0801a574 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801a574:	b480      	push	{r7}
 801a576:	b085      	sub	sp, #20
 801a578:	af00      	add	r7, sp, #0
 801a57a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a57c:	4b14      	ldr	r3, [pc, #80]	; (801a5d0 <TimerInsertTimer+0x5c>)
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801a582:	4b13      	ldr	r3, [pc, #76]	; (801a5d0 <TimerInsertTimer+0x5c>)
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	695b      	ldr	r3, [r3, #20]
 801a588:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801a58a:	e012      	b.n	801a5b2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	681a      	ldr	r2, [r3, #0]
 801a590:	68bb      	ldr	r3, [r7, #8]
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	429a      	cmp	r2, r3
 801a596:	d905      	bls.n	801a5a4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801a598:	68bb      	ldr	r3, [r7, #8]
 801a59a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801a59c:	68bb      	ldr	r3, [r7, #8]
 801a59e:	695b      	ldr	r3, [r3, #20]
 801a5a0:	60bb      	str	r3, [r7, #8]
 801a5a2:	e006      	b.n	801a5b2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	687a      	ldr	r2, [r7, #4]
 801a5a8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	68ba      	ldr	r2, [r7, #8]
 801a5ae:	615a      	str	r2, [r3, #20]
        return;
 801a5b0:	e009      	b.n	801a5c6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801a5b2:	68fb      	ldr	r3, [r7, #12]
 801a5b4:	695b      	ldr	r3, [r3, #20]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d1e8      	bne.n	801a58c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	687a      	ldr	r2, [r7, #4]
 801a5be:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	2200      	movs	r2, #0
 801a5c4:	615a      	str	r2, [r3, #20]
}
 801a5c6:	3714      	adds	r7, #20
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	bc80      	pop	{r7}
 801a5cc:	4770      	bx	lr
 801a5ce:	bf00      	nop
 801a5d0:	20000f90 	.word	0x20000f90

0801a5d4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801a5d4:	b580      	push	{r7, lr}
 801a5d6:	b084      	sub	sp, #16
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a5dc:	4b0b      	ldr	r3, [pc, #44]	; (801a60c <TimerInsertNewHeadTimer+0x38>)
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d002      	beq.n	801a5ee <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a5e8:	68fb      	ldr	r3, [r7, #12]
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	68fa      	ldr	r2, [r7, #12]
 801a5f2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a5f4:	4a05      	ldr	r2, [pc, #20]	; (801a60c <TimerInsertNewHeadTimer+0x38>)
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a5fa:	4b04      	ldr	r3, [pc, #16]	; (801a60c <TimerInsertNewHeadTimer+0x38>)
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	4618      	mov	r0, r3
 801a600:	f7ff ff8e 	bl	801a520 <TimerSetTimeout>
}
 801a604:	bf00      	nop
 801a606:	3710      	adds	r7, #16
 801a608:	46bd      	mov	sp, r7
 801a60a:	bd80      	pop	{r7, pc}
 801a60c:	20000f90 	.word	0x20000f90

0801a610 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801a610:	b580      	push	{r7, lr}
 801a612:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801a614:	2218      	movs	r2, #24
 801a616:	2100      	movs	r1, #0
 801a618:	4807      	ldr	r0, [pc, #28]	; (801a638 <UTIL_ADV_TRACE_Init+0x28>)
 801a61a:	f7ff f8fe 	bl	801981a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801a61e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a622:	2100      	movs	r1, #0
 801a624:	4805      	ldr	r0, [pc, #20]	; (801a63c <UTIL_ADV_TRACE_Init+0x2c>)
 801a626:	f7ff f8f8 	bl	801981a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801a62a:	4b05      	ldr	r3, [pc, #20]	; (801a640 <UTIL_ADV_TRACE_Init+0x30>)
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	4805      	ldr	r0, [pc, #20]	; (801a644 <UTIL_ADV_TRACE_Init+0x34>)
 801a630:	4798      	blx	r3
 801a632:	4603      	mov	r3, r0
}
 801a634:	4618      	mov	r0, r3
 801a636:	bd80      	pop	{r7, pc}
 801a638:	20000f94 	.word	0x20000f94
 801a63c:	20000fac 	.word	0x20000fac
 801a640:	0801b688 	.word	0x0801b688
 801a644:	0801a8b5 	.word	0x0801a8b5

0801a648 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801a648:	b480      	push	{r7}
 801a64a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a64c:	4b06      	ldr	r3, [pc, #24]	; (801a668 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a64e:	8a5a      	ldrh	r2, [r3, #18]
 801a650:	4b05      	ldr	r3, [pc, #20]	; (801a668 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a652:	8a1b      	ldrh	r3, [r3, #16]
 801a654:	429a      	cmp	r2, r3
 801a656:	d101      	bne.n	801a65c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801a658:	2301      	movs	r3, #1
 801a65a:	e000      	b.n	801a65e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801a65c:	2300      	movs	r3, #0
}
 801a65e:	4618      	mov	r0, r3
 801a660:	46bd      	mov	sp, r7
 801a662:	bc80      	pop	{r7}
 801a664:	4770      	bx	lr
 801a666:	bf00      	nop
 801a668:	20000f94 	.word	0x20000f94

0801a66c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801a66c:	b408      	push	{r3}
 801a66e:	b580      	push	{r7, lr}
 801a670:	b08d      	sub	sp, #52	; 0x34
 801a672:	af00      	add	r7, sp, #0
 801a674:	60f8      	str	r0, [r7, #12]
 801a676:	60b9      	str	r1, [r7, #8]
 801a678:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801a67a:	2300      	movs	r3, #0
 801a67c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801a67e:	2300      	movs	r3, #0
 801a680:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801a682:	4b38      	ldr	r3, [pc, #224]	; (801a764 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a684:	7a1b      	ldrb	r3, [r3, #8]
 801a686:	461a      	mov	r2, r3
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	4293      	cmp	r3, r2
 801a68c:	d902      	bls.n	801a694 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801a68e:	f06f 0304 	mvn.w	r3, #4
 801a692:	e05f      	b.n	801a754 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801a694:	4b33      	ldr	r3, [pc, #204]	; (801a764 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a696:	68da      	ldr	r2, [r3, #12]
 801a698:	68bb      	ldr	r3, [r7, #8]
 801a69a:	4013      	ands	r3, r2
 801a69c:	68ba      	ldr	r2, [r7, #8]
 801a69e:	429a      	cmp	r2, r3
 801a6a0:	d002      	beq.n	801a6a8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801a6a2:	f06f 0305 	mvn.w	r3, #5
 801a6a6:	e055      	b.n	801a754 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801a6a8:	4b2e      	ldr	r3, [pc, #184]	; (801a764 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a6aa:	685b      	ldr	r3, [r3, #4]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d00a      	beq.n	801a6c6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d007      	beq.n	801a6c6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801a6b6:	4b2b      	ldr	r3, [pc, #172]	; (801a764 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a6b8:	685b      	ldr	r3, [r3, #4]
 801a6ba:	f107 0116 	add.w	r1, r7, #22
 801a6be:	f107 0218 	add.w	r2, r7, #24
 801a6c2:	4610      	mov	r0, r2
 801a6c4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801a6c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a6ca:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a6d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a6d4:	4824      	ldr	r0, [pc, #144]	; (801a768 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a6d6:	f7ff fb2f 	bl	8019d38 <tiny_vsnprintf_like>
 801a6da:	4603      	mov	r3, r0
 801a6dc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801a6de:	f000 f9f3 	bl	801aac8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801a6e2:	8afa      	ldrh	r2, [r7, #22]
 801a6e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a6e6:	4413      	add	r3, r2
 801a6e8:	b29b      	uxth	r3, r3
 801a6ea:	f107 0214 	add.w	r2, r7, #20
 801a6ee:	4611      	mov	r1, r2
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	f000 f96b 	bl	801a9cc <TRACE_AllocateBufer>
 801a6f6:	4603      	mov	r3, r0
 801a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6fc:	d026      	beq.n	801a74c <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801a6fe:	2300      	movs	r3, #0
 801a700:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a702:	e00f      	b.n	801a724 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801a704:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a706:	8aba      	ldrh	r2, [r7, #20]
 801a708:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a70c:	440b      	add	r3, r1
 801a70e:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801a712:	4b16      	ldr	r3, [pc, #88]	; (801a76c <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a714:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801a716:	8abb      	ldrh	r3, [r7, #20]
 801a718:	3301      	adds	r3, #1
 801a71a:	b29b      	uxth	r3, r3
 801a71c:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801a71e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a720:	3301      	adds	r3, #1
 801a722:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a724:	8afb      	ldrh	r3, [r7, #22]
 801a726:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a728:	429a      	cmp	r2, r3
 801a72a:	d3eb      	bcc.n	801a704 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a72c:	8abb      	ldrh	r3, [r7, #20]
 801a72e:	461a      	mov	r2, r3
 801a730:	4b0e      	ldr	r3, [pc, #56]	; (801a76c <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a732:	18d0      	adds	r0, r2, r3
 801a734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a736:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a738:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a73c:	f7ff fafc 	bl	8019d38 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801a740:	f000 f9e0 	bl	801ab04 <TRACE_UnLock>

    return TRACE_Send();
 801a744:	f000 f832 	bl	801a7ac <TRACE_Send>
 801a748:	4603      	mov	r3, r0
 801a74a:	e003      	b.n	801a754 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801a74c:	f000 f9da 	bl	801ab04 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801a750:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801a754:	4618      	mov	r0, r3
 801a756:	3734      	adds	r7, #52	; 0x34
 801a758:	46bd      	mov	sp, r7
 801a75a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a75e:	b001      	add	sp, #4
 801a760:	4770      	bx	lr
 801a762:	bf00      	nop
 801a764:	20000f94 	.word	0x20000f94
 801a768:	200013ac 	.word	0x200013ac
 801a76c:	20000fac 	.word	0x20000fac

0801a770 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801a770:	b480      	push	{r7}
 801a772:	b083      	sub	sp, #12
 801a774:	af00      	add	r7, sp, #0
 801a776:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801a778:	4a03      	ldr	r2, [pc, #12]	; (801a788 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	6053      	str	r3, [r2, #4]
}
 801a77e:	bf00      	nop
 801a780:	370c      	adds	r7, #12
 801a782:	46bd      	mov	sp, r7
 801a784:	bc80      	pop	{r7}
 801a786:	4770      	bx	lr
 801a788:	20000f94 	.word	0x20000f94

0801a78c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801a78c:	b480      	push	{r7}
 801a78e:	b083      	sub	sp, #12
 801a790:	af00      	add	r7, sp, #0
 801a792:	4603      	mov	r3, r0
 801a794:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801a796:	4a04      	ldr	r2, [pc, #16]	; (801a7a8 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801a798:	79fb      	ldrb	r3, [r7, #7]
 801a79a:	7213      	strb	r3, [r2, #8]
}
 801a79c:	bf00      	nop
 801a79e:	370c      	adds	r7, #12
 801a7a0:	46bd      	mov	sp, r7
 801a7a2:	bc80      	pop	{r7}
 801a7a4:	4770      	bx	lr
 801a7a6:	bf00      	nop
 801a7a8:	20000f94 	.word	0x20000f94

0801a7ac <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801a7ac:	b580      	push	{r7, lr}
 801a7ae:	b088      	sub	sp, #32
 801a7b0:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801a7b2:	2300      	movs	r3, #0
 801a7b4:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7ba:	f3ef 8310 	mrs	r3, PRIMASK
 801a7be:	613b      	str	r3, [r7, #16]
  return(result);
 801a7c0:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a7c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7c4:	b672      	cpsid	i
}
 801a7c6:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801a7c8:	f000 f9ba 	bl	801ab40 <TRACE_IsLocked>
 801a7cc:	4603      	mov	r3, r0
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d15d      	bne.n	801a88e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801a7d2:	f000 f979 	bl	801aac8 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801a7d6:	4b34      	ldr	r3, [pc, #208]	; (801a8a8 <TRACE_Send+0xfc>)
 801a7d8:	8a1a      	ldrh	r2, [r3, #16]
 801a7da:	4b33      	ldr	r3, [pc, #204]	; (801a8a8 <TRACE_Send+0xfc>)
 801a7dc:	8a5b      	ldrh	r3, [r3, #18]
 801a7de:	429a      	cmp	r2, r3
 801a7e0:	d04d      	beq.n	801a87e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a7e2:	4b31      	ldr	r3, [pc, #196]	; (801a8a8 <TRACE_Send+0xfc>)
 801a7e4:	789b      	ldrb	r3, [r3, #2]
 801a7e6:	2b01      	cmp	r3, #1
 801a7e8:	d117      	bne.n	801a81a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801a7ea:	4b2f      	ldr	r3, [pc, #188]	; (801a8a8 <TRACE_Send+0xfc>)
 801a7ec:	881a      	ldrh	r2, [r3, #0]
 801a7ee:	4b2e      	ldr	r3, [pc, #184]	; (801a8a8 <TRACE_Send+0xfc>)
 801a7f0:	8a1b      	ldrh	r3, [r3, #16]
 801a7f2:	1ad3      	subs	r3, r2, r3
 801a7f4:	b29a      	uxth	r2, r3
 801a7f6:	4b2c      	ldr	r3, [pc, #176]	; (801a8a8 <TRACE_Send+0xfc>)
 801a7f8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a7fa:	4b2b      	ldr	r3, [pc, #172]	; (801a8a8 <TRACE_Send+0xfc>)
 801a7fc:	2202      	movs	r2, #2
 801a7fe:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a800:	4b29      	ldr	r3, [pc, #164]	; (801a8a8 <TRACE_Send+0xfc>)
 801a802:	2200      	movs	r2, #0
 801a804:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a806:	4b28      	ldr	r3, [pc, #160]	; (801a8a8 <TRACE_Send+0xfc>)
 801a808:	8a9b      	ldrh	r3, [r3, #20]
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d105      	bne.n	801a81a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a80e:	4b26      	ldr	r3, [pc, #152]	; (801a8a8 <TRACE_Send+0xfc>)
 801a810:	2200      	movs	r2, #0
 801a812:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a814:	4b24      	ldr	r3, [pc, #144]	; (801a8a8 <TRACE_Send+0xfc>)
 801a816:	2200      	movs	r2, #0
 801a818:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a81a:	4b23      	ldr	r3, [pc, #140]	; (801a8a8 <TRACE_Send+0xfc>)
 801a81c:	789b      	ldrb	r3, [r3, #2]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d115      	bne.n	801a84e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a822:	4b21      	ldr	r3, [pc, #132]	; (801a8a8 <TRACE_Send+0xfc>)
 801a824:	8a5a      	ldrh	r2, [r3, #18]
 801a826:	4b20      	ldr	r3, [pc, #128]	; (801a8a8 <TRACE_Send+0xfc>)
 801a828:	8a1b      	ldrh	r3, [r3, #16]
 801a82a:	429a      	cmp	r2, r3
 801a82c:	d908      	bls.n	801a840 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a82e:	4b1e      	ldr	r3, [pc, #120]	; (801a8a8 <TRACE_Send+0xfc>)
 801a830:	8a5a      	ldrh	r2, [r3, #18]
 801a832:	4b1d      	ldr	r3, [pc, #116]	; (801a8a8 <TRACE_Send+0xfc>)
 801a834:	8a1b      	ldrh	r3, [r3, #16]
 801a836:	1ad3      	subs	r3, r2, r3
 801a838:	b29a      	uxth	r2, r3
 801a83a:	4b1b      	ldr	r3, [pc, #108]	; (801a8a8 <TRACE_Send+0xfc>)
 801a83c:	829a      	strh	r2, [r3, #20]
 801a83e:	e006      	b.n	801a84e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a840:	4b19      	ldr	r3, [pc, #100]	; (801a8a8 <TRACE_Send+0xfc>)
 801a842:	8a1b      	ldrh	r3, [r3, #16]
 801a844:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a848:	b29a      	uxth	r2, r3
 801a84a:	4b17      	ldr	r3, [pc, #92]	; (801a8a8 <TRACE_Send+0xfc>)
 801a84c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a84e:	4b16      	ldr	r3, [pc, #88]	; (801a8a8 <TRACE_Send+0xfc>)
 801a850:	8a1b      	ldrh	r3, [r3, #16]
 801a852:	461a      	mov	r2, r3
 801a854:	4b15      	ldr	r3, [pc, #84]	; (801a8ac <TRACE_Send+0x100>)
 801a856:	4413      	add	r3, r2
 801a858:	61bb      	str	r3, [r7, #24]
 801a85a:	697b      	ldr	r3, [r7, #20]
 801a85c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	f383 8810 	msr	PRIMASK, r3
}
 801a864:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801a866:	f7e7 fb69 	bl	8001f3c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a86a:	4b11      	ldr	r3, [pc, #68]	; (801a8b0 <TRACE_Send+0x104>)
 801a86c:	68db      	ldr	r3, [r3, #12]
 801a86e:	4a0e      	ldr	r2, [pc, #56]	; (801a8a8 <TRACE_Send+0xfc>)
 801a870:	8a92      	ldrh	r2, [r2, #20]
 801a872:	4611      	mov	r1, r2
 801a874:	69b8      	ldr	r0, [r7, #24]
 801a876:	4798      	blx	r3
 801a878:	4603      	mov	r3, r0
 801a87a:	77fb      	strb	r3, [r7, #31]
 801a87c:	e00d      	b.n	801a89a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801a87e:	f000 f941 	bl	801ab04 <TRACE_UnLock>
 801a882:	697b      	ldr	r3, [r7, #20]
 801a884:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a886:	68bb      	ldr	r3, [r7, #8]
 801a888:	f383 8810 	msr	PRIMASK, r3
}
 801a88c:	e005      	b.n	801a89a <TRACE_Send+0xee>
 801a88e:	697b      	ldr	r3, [r7, #20]
 801a890:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	f383 8810 	msr	PRIMASK, r3
}
 801a898:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801a89a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a89e:	4618      	mov	r0, r3
 801a8a0:	3720      	adds	r7, #32
 801a8a2:	46bd      	mov	sp, r7
 801a8a4:	bd80      	pop	{r7, pc}
 801a8a6:	bf00      	nop
 801a8a8:	20000f94 	.word	0x20000f94
 801a8ac:	20000fac 	.word	0x20000fac
 801a8b0:	0801b688 	.word	0x0801b688

0801a8b4 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801a8b4:	b580      	push	{r7, lr}
 801a8b6:	b088      	sub	sp, #32
 801a8b8:	af00      	add	r7, sp, #0
 801a8ba:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801a8bc:	2300      	movs	r3, #0
 801a8be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a8c0:	f3ef 8310 	mrs	r3, PRIMASK
 801a8c4:	617b      	str	r3, [r7, #20]
  return(result);
 801a8c6:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a8c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8ca:	b672      	cpsid	i
}
 801a8cc:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801a8ce:	4b3c      	ldr	r3, [pc, #240]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a8d0:	789b      	ldrb	r3, [r3, #2]
 801a8d2:	2b02      	cmp	r3, #2
 801a8d4:	d106      	bne.n	801a8e4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a8d6:	4b3a      	ldr	r3, [pc, #232]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a8d8:	2200      	movs	r2, #0
 801a8da:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a8dc:	4b38      	ldr	r3, [pc, #224]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a8de:	2200      	movs	r2, #0
 801a8e0:	821a      	strh	r2, [r3, #16]
 801a8e2:	e00a      	b.n	801a8fa <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a8e4:	4b36      	ldr	r3, [pc, #216]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a8e6:	8a1a      	ldrh	r2, [r3, #16]
 801a8e8:	4b35      	ldr	r3, [pc, #212]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a8ea:	8a9b      	ldrh	r3, [r3, #20]
 801a8ec:	4413      	add	r3, r2
 801a8ee:	b29b      	uxth	r3, r3
 801a8f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a8f4:	b29a      	uxth	r2, r3
 801a8f6:	4b32      	ldr	r3, [pc, #200]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a8f8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801a8fa:	4b31      	ldr	r3, [pc, #196]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a8fc:	8a1a      	ldrh	r2, [r3, #16]
 801a8fe:	4b30      	ldr	r3, [pc, #192]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a900:	8a5b      	ldrh	r3, [r3, #18]
 801a902:	429a      	cmp	r2, r3
 801a904:	d04d      	beq.n	801a9a2 <TRACE_TxCpltCallback+0xee>
 801a906:	4b2e      	ldr	r3, [pc, #184]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a908:	8adb      	ldrh	r3, [r3, #22]
 801a90a:	2b01      	cmp	r3, #1
 801a90c:	d149      	bne.n	801a9a2 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a90e:	4b2c      	ldr	r3, [pc, #176]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a910:	789b      	ldrb	r3, [r3, #2]
 801a912:	2b01      	cmp	r3, #1
 801a914:	d117      	bne.n	801a946 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801a916:	4b2a      	ldr	r3, [pc, #168]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a918:	881a      	ldrh	r2, [r3, #0]
 801a91a:	4b29      	ldr	r3, [pc, #164]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a91c:	8a1b      	ldrh	r3, [r3, #16]
 801a91e:	1ad3      	subs	r3, r2, r3
 801a920:	b29a      	uxth	r2, r3
 801a922:	4b27      	ldr	r3, [pc, #156]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a924:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a926:	4b26      	ldr	r3, [pc, #152]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a928:	2202      	movs	r2, #2
 801a92a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a92c:	4b24      	ldr	r3, [pc, #144]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a92e:	2200      	movs	r2, #0
 801a930:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a932:	4b23      	ldr	r3, [pc, #140]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a934:	8a9b      	ldrh	r3, [r3, #20]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d105      	bne.n	801a946 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a93a:	4b21      	ldr	r3, [pc, #132]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a93c:	2200      	movs	r2, #0
 801a93e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a940:	4b1f      	ldr	r3, [pc, #124]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a942:	2200      	movs	r2, #0
 801a944:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a946:	4b1e      	ldr	r3, [pc, #120]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a948:	789b      	ldrb	r3, [r3, #2]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d115      	bne.n	801a97a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a94e:	4b1c      	ldr	r3, [pc, #112]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a950:	8a5a      	ldrh	r2, [r3, #18]
 801a952:	4b1b      	ldr	r3, [pc, #108]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a954:	8a1b      	ldrh	r3, [r3, #16]
 801a956:	429a      	cmp	r2, r3
 801a958:	d908      	bls.n	801a96c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a95a:	4b19      	ldr	r3, [pc, #100]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a95c:	8a5a      	ldrh	r2, [r3, #18]
 801a95e:	4b18      	ldr	r3, [pc, #96]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a960:	8a1b      	ldrh	r3, [r3, #16]
 801a962:	1ad3      	subs	r3, r2, r3
 801a964:	b29a      	uxth	r2, r3
 801a966:	4b16      	ldr	r3, [pc, #88]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a968:	829a      	strh	r2, [r3, #20]
 801a96a:	e006      	b.n	801a97a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a96c:	4b14      	ldr	r3, [pc, #80]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a96e:	8a1b      	ldrh	r3, [r3, #16]
 801a970:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a974:	b29a      	uxth	r2, r3
 801a976:	4b12      	ldr	r3, [pc, #72]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a978:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a97a:	4b11      	ldr	r3, [pc, #68]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a97c:	8a1b      	ldrh	r3, [r3, #16]
 801a97e:	461a      	mov	r2, r3
 801a980:	4b10      	ldr	r3, [pc, #64]	; (801a9c4 <TRACE_TxCpltCallback+0x110>)
 801a982:	4413      	add	r3, r2
 801a984:	61fb      	str	r3, [r7, #28]
 801a986:	69bb      	ldr	r3, [r7, #24]
 801a988:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a98a:	693b      	ldr	r3, [r7, #16]
 801a98c:	f383 8810 	msr	PRIMASK, r3
}
 801a990:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a992:	4b0d      	ldr	r3, [pc, #52]	; (801a9c8 <TRACE_TxCpltCallback+0x114>)
 801a994:	68db      	ldr	r3, [r3, #12]
 801a996:	4a0a      	ldr	r2, [pc, #40]	; (801a9c0 <TRACE_TxCpltCallback+0x10c>)
 801a998:	8a92      	ldrh	r2, [r2, #20]
 801a99a:	4611      	mov	r1, r2
 801a99c:	69f8      	ldr	r0, [r7, #28]
 801a99e:	4798      	blx	r3
 801a9a0:	e00a      	b.n	801a9b8 <TRACE_TxCpltCallback+0x104>
 801a9a2:	69bb      	ldr	r3, [r7, #24]
 801a9a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	f383 8810 	msr	PRIMASK, r3
}
 801a9ac:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801a9ae:	f7e7 facd 	bl	8001f4c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801a9b2:	f000 f8a7 	bl	801ab04 <TRACE_UnLock>
  }
}
 801a9b6:	bf00      	nop
 801a9b8:	bf00      	nop
 801a9ba:	3720      	adds	r7, #32
 801a9bc:	46bd      	mov	sp, r7
 801a9be:	bd80      	pop	{r7, pc}
 801a9c0:	20000f94 	.word	0x20000f94
 801a9c4:	20000fac 	.word	0x20000fac
 801a9c8:	0801b688 	.word	0x0801b688

0801a9cc <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801a9cc:	b480      	push	{r7}
 801a9ce:	b087      	sub	sp, #28
 801a9d0:	af00      	add	r7, sp, #0
 801a9d2:	4603      	mov	r3, r0
 801a9d4:	6039      	str	r1, [r7, #0]
 801a9d6:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801a9d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a9dc:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9de:	f3ef 8310 	mrs	r3, PRIMASK
 801a9e2:	60fb      	str	r3, [r7, #12]
  return(result);
 801a9e4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a9e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9e8:	b672      	cpsid	i
}
 801a9ea:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a9ec:	4b35      	ldr	r3, [pc, #212]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801a9ee:	8a5a      	ldrh	r2, [r3, #18]
 801a9f0:	4b34      	ldr	r3, [pc, #208]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801a9f2:	8a1b      	ldrh	r3, [r3, #16]
 801a9f4:	429a      	cmp	r2, r3
 801a9f6:	d11b      	bne.n	801aa30 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a9f8:	4b32      	ldr	r3, [pc, #200]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801a9fa:	8a5b      	ldrh	r3, [r3, #18]
 801a9fc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801aa00:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801aa02:	88fa      	ldrh	r2, [r7, #6]
 801aa04:	8afb      	ldrh	r3, [r7, #22]
 801aa06:	429a      	cmp	r2, r3
 801aa08:	d33a      	bcc.n	801aa80 <TRACE_AllocateBufer+0xb4>
 801aa0a:	4b2e      	ldr	r3, [pc, #184]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa0c:	8a1b      	ldrh	r3, [r3, #16]
 801aa0e:	88fa      	ldrh	r2, [r7, #6]
 801aa10:	429a      	cmp	r2, r3
 801aa12:	d235      	bcs.n	801aa80 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801aa14:	4b2b      	ldr	r3, [pc, #172]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa16:	2201      	movs	r2, #1
 801aa18:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801aa1a:	4b2a      	ldr	r3, [pc, #168]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa1c:	8a5a      	ldrh	r2, [r3, #18]
 801aa1e:	4b29      	ldr	r3, [pc, #164]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa20:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801aa22:	4b28      	ldr	r3, [pc, #160]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa24:	8a1b      	ldrh	r3, [r3, #16]
 801aa26:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801aa28:	4b26      	ldr	r3, [pc, #152]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa2a:	2200      	movs	r2, #0
 801aa2c:	825a      	strh	r2, [r3, #18]
 801aa2e:	e027      	b.n	801aa80 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801aa30:	4b24      	ldr	r3, [pc, #144]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa32:	8a5a      	ldrh	r2, [r3, #18]
 801aa34:	4b23      	ldr	r3, [pc, #140]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa36:	8a1b      	ldrh	r3, [r3, #16]
 801aa38:	429a      	cmp	r2, r3
 801aa3a:	d91b      	bls.n	801aa74 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801aa3c:	4b21      	ldr	r3, [pc, #132]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa3e:	8a5b      	ldrh	r3, [r3, #18]
 801aa40:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801aa44:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801aa46:	88fa      	ldrh	r2, [r7, #6]
 801aa48:	8afb      	ldrh	r3, [r7, #22]
 801aa4a:	429a      	cmp	r2, r3
 801aa4c:	d318      	bcc.n	801aa80 <TRACE_AllocateBufer+0xb4>
 801aa4e:	4b1d      	ldr	r3, [pc, #116]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa50:	8a1b      	ldrh	r3, [r3, #16]
 801aa52:	88fa      	ldrh	r2, [r7, #6]
 801aa54:	429a      	cmp	r2, r3
 801aa56:	d213      	bcs.n	801aa80 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801aa58:	4b1a      	ldr	r3, [pc, #104]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa5a:	2201      	movs	r2, #1
 801aa5c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801aa5e:	4b19      	ldr	r3, [pc, #100]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa60:	8a5a      	ldrh	r2, [r3, #18]
 801aa62:	4b18      	ldr	r3, [pc, #96]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa64:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801aa66:	4b17      	ldr	r3, [pc, #92]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa68:	8a1b      	ldrh	r3, [r3, #16]
 801aa6a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801aa6c:	4b15      	ldr	r3, [pc, #84]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa6e:	2200      	movs	r2, #0
 801aa70:	825a      	strh	r2, [r3, #18]
 801aa72:	e005      	b.n	801aa80 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801aa74:	4b13      	ldr	r3, [pc, #76]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa76:	8a1a      	ldrh	r2, [r3, #16]
 801aa78:	4b12      	ldr	r3, [pc, #72]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa7a:	8a5b      	ldrh	r3, [r3, #18]
 801aa7c:	1ad3      	subs	r3, r2, r3
 801aa7e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801aa80:	8afa      	ldrh	r2, [r7, #22]
 801aa82:	88fb      	ldrh	r3, [r7, #6]
 801aa84:	429a      	cmp	r2, r3
 801aa86:	d90f      	bls.n	801aaa8 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801aa88:	4b0e      	ldr	r3, [pc, #56]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa8a:	8a5a      	ldrh	r2, [r3, #18]
 801aa8c:	683b      	ldr	r3, [r7, #0]
 801aa8e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801aa90:	4b0c      	ldr	r3, [pc, #48]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aa92:	8a5a      	ldrh	r2, [r3, #18]
 801aa94:	88fb      	ldrh	r3, [r7, #6]
 801aa96:	4413      	add	r3, r2
 801aa98:	b29b      	uxth	r3, r3
 801aa9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801aa9e:	b29a      	uxth	r2, r3
 801aaa0:	4b08      	ldr	r3, [pc, #32]	; (801aac4 <TRACE_AllocateBufer+0xf8>)
 801aaa2:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	82bb      	strh	r3, [r7, #20]
 801aaa8:	693b      	ldr	r3, [r7, #16]
 801aaaa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aaac:	68bb      	ldr	r3, [r7, #8]
 801aaae:	f383 8810 	msr	PRIMASK, r3
}
 801aab2:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801aab4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801aab8:	4618      	mov	r0, r3
 801aaba:	371c      	adds	r7, #28
 801aabc:	46bd      	mov	sp, r7
 801aabe:	bc80      	pop	{r7}
 801aac0:	4770      	bx	lr
 801aac2:	bf00      	nop
 801aac4:	20000f94 	.word	0x20000f94

0801aac8 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801aac8:	b480      	push	{r7}
 801aaca:	b085      	sub	sp, #20
 801aacc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aace:	f3ef 8310 	mrs	r3, PRIMASK
 801aad2:	607b      	str	r3, [r7, #4]
  return(result);
 801aad4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801aad6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801aad8:	b672      	cpsid	i
}
 801aada:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801aadc:	4b08      	ldr	r3, [pc, #32]	; (801ab00 <TRACE_Lock+0x38>)
 801aade:	8adb      	ldrh	r3, [r3, #22]
 801aae0:	3301      	adds	r3, #1
 801aae2:	b29a      	uxth	r2, r3
 801aae4:	4b06      	ldr	r3, [pc, #24]	; (801ab00 <TRACE_Lock+0x38>)
 801aae6:	82da      	strh	r2, [r3, #22]
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aaec:	68bb      	ldr	r3, [r7, #8]
 801aaee:	f383 8810 	msr	PRIMASK, r3
}
 801aaf2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801aaf4:	bf00      	nop
 801aaf6:	3714      	adds	r7, #20
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	bc80      	pop	{r7}
 801aafc:	4770      	bx	lr
 801aafe:	bf00      	nop
 801ab00:	20000f94 	.word	0x20000f94

0801ab04 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801ab04:	b480      	push	{r7}
 801ab06:	b085      	sub	sp, #20
 801ab08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab0a:	f3ef 8310 	mrs	r3, PRIMASK
 801ab0e:	607b      	str	r3, [r7, #4]
  return(result);
 801ab10:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ab12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab14:	b672      	cpsid	i
}
 801ab16:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ab18:	4b08      	ldr	r3, [pc, #32]	; (801ab3c <TRACE_UnLock+0x38>)
 801ab1a:	8adb      	ldrh	r3, [r3, #22]
 801ab1c:	3b01      	subs	r3, #1
 801ab1e:	b29a      	uxth	r2, r3
 801ab20:	4b06      	ldr	r3, [pc, #24]	; (801ab3c <TRACE_UnLock+0x38>)
 801ab22:	82da      	strh	r2, [r3, #22]
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab28:	68bb      	ldr	r3, [r7, #8]
 801ab2a:	f383 8810 	msr	PRIMASK, r3
}
 801ab2e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ab30:	bf00      	nop
 801ab32:	3714      	adds	r7, #20
 801ab34:	46bd      	mov	sp, r7
 801ab36:	bc80      	pop	{r7}
 801ab38:	4770      	bx	lr
 801ab3a:	bf00      	nop
 801ab3c:	20000f94 	.word	0x20000f94

0801ab40 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ab40:	b480      	push	{r7}
 801ab42:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ab44:	4b05      	ldr	r3, [pc, #20]	; (801ab5c <TRACE_IsLocked+0x1c>)
 801ab46:	8adb      	ldrh	r3, [r3, #22]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	bf14      	ite	ne
 801ab4c:	2301      	movne	r3, #1
 801ab4e:	2300      	moveq	r3, #0
 801ab50:	b2db      	uxtb	r3, r3
}
 801ab52:	4618      	mov	r0, r3
 801ab54:	46bd      	mov	sp, r7
 801ab56:	bc80      	pop	{r7}
 801ab58:	4770      	bx	lr
 801ab5a:	bf00      	nop
 801ab5c:	20000f94 	.word	0x20000f94

0801ab60 <__libc_init_array>:
 801ab60:	b570      	push	{r4, r5, r6, lr}
 801ab62:	4d0d      	ldr	r5, [pc, #52]	; (801ab98 <__libc_init_array+0x38>)
 801ab64:	4c0d      	ldr	r4, [pc, #52]	; (801ab9c <__libc_init_array+0x3c>)
 801ab66:	1b64      	subs	r4, r4, r5
 801ab68:	10a4      	asrs	r4, r4, #2
 801ab6a:	2600      	movs	r6, #0
 801ab6c:	42a6      	cmp	r6, r4
 801ab6e:	d109      	bne.n	801ab84 <__libc_init_array+0x24>
 801ab70:	4d0b      	ldr	r5, [pc, #44]	; (801aba0 <__libc_init_array+0x40>)
 801ab72:	4c0c      	ldr	r4, [pc, #48]	; (801aba4 <__libc_init_array+0x44>)
 801ab74:	f000 f8a0 	bl	801acb8 <_init>
 801ab78:	1b64      	subs	r4, r4, r5
 801ab7a:	10a4      	asrs	r4, r4, #2
 801ab7c:	2600      	movs	r6, #0
 801ab7e:	42a6      	cmp	r6, r4
 801ab80:	d105      	bne.n	801ab8e <__libc_init_array+0x2e>
 801ab82:	bd70      	pop	{r4, r5, r6, pc}
 801ab84:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab88:	4798      	blx	r3
 801ab8a:	3601      	adds	r6, #1
 801ab8c:	e7ee      	b.n	801ab6c <__libc_init_array+0xc>
 801ab8e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab92:	4798      	blx	r3
 801ab94:	3601      	adds	r6, #1
 801ab96:	e7f2      	b.n	801ab7e <__libc_init_array+0x1e>
 801ab98:	0801bb78 	.word	0x0801bb78
 801ab9c:	0801bb78 	.word	0x0801bb78
 801aba0:	0801bb78 	.word	0x0801bb78
 801aba4:	0801bb7c 	.word	0x0801bb7c

0801aba8 <memset>:
 801aba8:	4402      	add	r2, r0
 801abaa:	4603      	mov	r3, r0
 801abac:	4293      	cmp	r3, r2
 801abae:	d100      	bne.n	801abb2 <memset+0xa>
 801abb0:	4770      	bx	lr
 801abb2:	f803 1b01 	strb.w	r1, [r3], #1
 801abb6:	e7f9      	b.n	801abac <memset+0x4>

0801abb8 <floor>:
 801abb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abbc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801abc0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801abc4:	2e13      	cmp	r6, #19
 801abc6:	4602      	mov	r2, r0
 801abc8:	460b      	mov	r3, r1
 801abca:	4607      	mov	r7, r0
 801abcc:	460c      	mov	r4, r1
 801abce:	4605      	mov	r5, r0
 801abd0:	dc34      	bgt.n	801ac3c <floor+0x84>
 801abd2:	2e00      	cmp	r6, #0
 801abd4:	da15      	bge.n	801ac02 <floor+0x4a>
 801abd6:	a334      	add	r3, pc, #208	; (adr r3, 801aca8 <floor+0xf0>)
 801abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abdc:	f7e5 fada 	bl	8000194 <__adddf3>
 801abe0:	2200      	movs	r2, #0
 801abe2:	2300      	movs	r3, #0
 801abe4:	f7e5 fd0a 	bl	80005fc <__aeabi_dcmpgt>
 801abe8:	b140      	cbz	r0, 801abfc <floor+0x44>
 801abea:	2c00      	cmp	r4, #0
 801abec:	da59      	bge.n	801aca2 <floor+0xea>
 801abee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801abf2:	ea57 0503 	orrs.w	r5, r7, r3
 801abf6:	d001      	beq.n	801abfc <floor+0x44>
 801abf8:	4c2d      	ldr	r4, [pc, #180]	; (801acb0 <floor+0xf8>)
 801abfa:	2500      	movs	r5, #0
 801abfc:	4623      	mov	r3, r4
 801abfe:	462f      	mov	r7, r5
 801ac00:	e025      	b.n	801ac4e <floor+0x96>
 801ac02:	4a2c      	ldr	r2, [pc, #176]	; (801acb4 <floor+0xfc>)
 801ac04:	fa42 f806 	asr.w	r8, r2, r6
 801ac08:	ea01 0208 	and.w	r2, r1, r8
 801ac0c:	4302      	orrs	r2, r0
 801ac0e:	d01e      	beq.n	801ac4e <floor+0x96>
 801ac10:	a325      	add	r3, pc, #148	; (adr r3, 801aca8 <floor+0xf0>)
 801ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac16:	f7e5 fabd 	bl	8000194 <__adddf3>
 801ac1a:	2200      	movs	r2, #0
 801ac1c:	2300      	movs	r3, #0
 801ac1e:	f7e5 fced 	bl	80005fc <__aeabi_dcmpgt>
 801ac22:	2800      	cmp	r0, #0
 801ac24:	d0ea      	beq.n	801abfc <floor+0x44>
 801ac26:	2c00      	cmp	r4, #0
 801ac28:	bfbe      	ittt	lt
 801ac2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ac2e:	fa43 f606 	asrlt.w	r6, r3, r6
 801ac32:	19a4      	addlt	r4, r4, r6
 801ac34:	ea24 0408 	bic.w	r4, r4, r8
 801ac38:	2500      	movs	r5, #0
 801ac3a:	e7df      	b.n	801abfc <floor+0x44>
 801ac3c:	2e33      	cmp	r6, #51	; 0x33
 801ac3e:	dd0a      	ble.n	801ac56 <floor+0x9e>
 801ac40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ac44:	d103      	bne.n	801ac4e <floor+0x96>
 801ac46:	f7e5 faa5 	bl	8000194 <__adddf3>
 801ac4a:	4607      	mov	r7, r0
 801ac4c:	460b      	mov	r3, r1
 801ac4e:	4638      	mov	r0, r7
 801ac50:	4619      	mov	r1, r3
 801ac52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac56:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801ac5a:	f04f 32ff 	mov.w	r2, #4294967295
 801ac5e:	fa22 f808 	lsr.w	r8, r2, r8
 801ac62:	ea18 0f00 	tst.w	r8, r0
 801ac66:	d0f2      	beq.n	801ac4e <floor+0x96>
 801ac68:	a30f      	add	r3, pc, #60	; (adr r3, 801aca8 <floor+0xf0>)
 801ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac6e:	f7e5 fa91 	bl	8000194 <__adddf3>
 801ac72:	2200      	movs	r2, #0
 801ac74:	2300      	movs	r3, #0
 801ac76:	f7e5 fcc1 	bl	80005fc <__aeabi_dcmpgt>
 801ac7a:	2800      	cmp	r0, #0
 801ac7c:	d0be      	beq.n	801abfc <floor+0x44>
 801ac7e:	2c00      	cmp	r4, #0
 801ac80:	da02      	bge.n	801ac88 <floor+0xd0>
 801ac82:	2e14      	cmp	r6, #20
 801ac84:	d103      	bne.n	801ac8e <floor+0xd6>
 801ac86:	3401      	adds	r4, #1
 801ac88:	ea25 0508 	bic.w	r5, r5, r8
 801ac8c:	e7b6      	b.n	801abfc <floor+0x44>
 801ac8e:	2301      	movs	r3, #1
 801ac90:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ac94:	fa03 f606 	lsl.w	r6, r3, r6
 801ac98:	4435      	add	r5, r6
 801ac9a:	42bd      	cmp	r5, r7
 801ac9c:	bf38      	it	cc
 801ac9e:	18e4      	addcc	r4, r4, r3
 801aca0:	e7f2      	b.n	801ac88 <floor+0xd0>
 801aca2:	2500      	movs	r5, #0
 801aca4:	462c      	mov	r4, r5
 801aca6:	e7a9      	b.n	801abfc <floor+0x44>
 801aca8:	8800759c 	.word	0x8800759c
 801acac:	7e37e43c 	.word	0x7e37e43c
 801acb0:	bff00000 	.word	0xbff00000
 801acb4:	000fffff 	.word	0x000fffff

0801acb8 <_init>:
 801acb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acba:	bf00      	nop
 801acbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801acbe:	bc08      	pop	{r3}
 801acc0:	469e      	mov	lr, r3
 801acc2:	4770      	bx	lr

0801acc4 <_fini>:
 801acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acc6:	bf00      	nop
 801acc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801acca:	bc08      	pop	{r3}
 801accc:	469e      	mov	lr, r3
 801acce:	4770      	bx	lr
