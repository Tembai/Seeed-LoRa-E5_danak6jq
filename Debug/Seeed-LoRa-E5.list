
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001afe8  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000efc  0801b120  0801b120  0002b120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c01c  0801c01c  00030134  2**0
                  CONTENTS
  4 .ARM          00000008  0801c01c  0801c01c  0002c01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c024  0801c024  00030134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c024  0801c024  0002c024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c028  0801c028  0002c028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0801c02c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001810  20000134  0801c160  00030134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001944  0801c160  00031944  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00065041  00000000  00000000  0003015e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bb20  00000000  00000000  0009519f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000036a8  00000000  00000000  000a0cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003280  00000000  00000000  000a4368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dc0  00000000  00000000  000a75e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000401fc  00000000  00000000  000d03a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd328  00000000  00000000  001105a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001dd8cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e174  00000000  00000000  001dd920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000134 	.word	0x20000134
 8000154:	00000000 	.word	0x00000000
 8000158:	0801b108 	.word	0x0801b108

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000138 	.word	0x20000138
 8000174:	0801b108 	.word	0x0801b108

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Sensor_Init>:
	return pressure;
}



void Sensor_Init(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0


		APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Init------------------------\r\n")
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <Sensor_Init+0x18>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f019 fe2e 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
		I2C_id();						//both of these work
 8000e60:	f000 f8bc 	bl	8000fdc <I2C_id>

	return;
 8000e64:	bf00      	nop
}
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	0801b120 	.word	0x0801b120

08000e6c <Sensor_Data>:


//uint16_t Sensor_Data(void){
float Sensor_Data(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af02      	add	r7, sp, #8


	APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data--------------------------\r\n");
 8000e72:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <Sensor_Data+0xec>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f019 fe1f 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>

	stmdev_ctx_t dev_ctx;

	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 8000e7e:	4b37      	ldr	r3, [pc, #220]	; (8000f5c <Sensor_Data+0xf0>)
 8000e80:	607b      	str	r3, [r7, #4]
	dev_ctx.read_reg = platform_read;
 8000e82:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <Sensor_Data+0xf4>)
 8000e84:	60bb      	str	r3, [r7, #8]
	dev_ctx.handle = &hi2c2;
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <Sensor_Data+0xf8>)
 8000e88:	60fb      	str	r3, [r7, #12]
//    platform_init();

    /* Wait sensor boot time */

//    platform_delay(BOOT_TIME);
	HAL_Delay(100);
 8000e8a:	2064      	movs	r0, #100	; 0x64
 8000e8c:	f001 f8ab 	bl	8001fe6 <HAL_Delay>

	uint8_t reg[3];
	reg[0]=0x1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	703b      	strb	r3, [r7, #0]
	reg[1]=0x1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	707b      	strb	r3, [r7, #1]
	reg[2]=0x1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	70bb      	strb	r3, [r7, #2]
//    platform_init();
//	uint8_t whoamI;
//
//    APP_LOG(TS_OFF, VLEVEL_M, "Who Am I:%x\r\n",whoamI);

		HAL_Delay(20);
 8000e9c:	2014      	movs	r0, #20
 8000e9e:	f001 f8a2 	bl	8001fe6 <HAL_Delay>

		I2C_id();
 8000ea2:	f000 f89b 	bl	8000fdc <I2C_id>





		HAL_Delay(20);
 8000ea6:	2014      	movs	r0, #20
 8000ea8:	f001 f89d 	bl	8001fe6 <HAL_Delay>
		/* Check device ID */
		whoamI = 0;
 8000eac:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <Sensor_Data+0xfc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
		lps22hh_device_id_get(&dev_ctx, &whoamI);
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	492c      	ldr	r1, [pc, #176]	; (8000f68 <Sensor_Data+0xfc>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fa3d 	bl	8001336 <lps22hh_device_id_get>
		if (whoamI!=0xB3){													// hardcoded default address LPS22HH
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <Sensor_Data+0xfc>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2bb3      	cmp	r3, #179	; 0xb3
 8000ec2:	d008      	beq.n	8000ed6 <Sensor_Data+0x6a>
			APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> WhoAmI gefaald: %x\r\n",whoamI);
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <Sensor_Data+0xfc>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <Sensor_Data+0x100>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f019 fdf3 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
		}

//		APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> WhoAmI: %x\r\n",whoamI);

		HAL_Delay(10);
 8000ed6:	200a      	movs	r0, #10
 8000ed8:	f001 f885 	bl	8001fe6 <HAL_Delay>

		/* Enable Block Data Update */
		  lps22hh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);			// BDU bit set
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f98b 	bl	80011fc <lps22hh_block_data_update_set>
		  /* Set Output Data Rate */
		  HAL_Delay(10);
 8000ee6:	200a      	movs	r0, #10
 8000ee8:	f001 f87d 	bl	8001fe6 <HAL_Delay>
		  lps22hh_data_rate_set(&dev_ctx, LPS22HH_POWER_DOWN);				// one-shot mode enabled
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f9a9 	bl	8001248 <lps22hh_data_rate_set>
//		lps22hh_low_power_set(&dev_ctx, PROPERTY_DISABLE);				// Low-current mode disabled
		  HAL_Delay(10);
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f001 f875 	bl	8001fe6 <HAL_Delay>


	    do {
//	    	HAL_Delay(1000);
//	    	lps22hh_one_shoot_trigger_set(&dev_ctx, PROPERTY_ENABLE);		// one-shot mode triggered
	    	one_shot_trigger();
 8000efc:	f000 f83e 	bl	8000f7c <one_shot_trigger>


//	    	ret =  platform_read(&hi2c2, LPS22HH_PRESS_OUT_XL, reg, 3);

	    	HAL_Delay(10);
 8000f00:	200a      	movs	r0, #10
 8000f02:	f001 f870 	bl	8001fe6 <HAL_Delay>
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <Sensor_Data+0x104>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]

			memset(&data_raw_pressure, 0x00, sizeof(int32_t));
			lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4918      	ldr	r1, [pc, #96]	; (8000f70 <Sensor_Data+0x104>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f9e7 	bl	80012e4 <lps22hh_pressure_raw_get>
//			APP_LOG(TS_OFF, VLEVEL_M, "raw pressure:%x\r\n", data_raw_pressure);
//			APP_LOG(TS_OFF, VLEVEL_M, "raw als decimaal:%d\r\n", data_raw_pressure);
			pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <Sensor_Data+0x104>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f95c 	bl	80011d8 <lps22hh_from_lsb_to_hpa>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <Sensor_Data+0x108>)
 8000f24:	6013      	str	r3, [r2, #0]
//			APP_LOG(TS_OFF, VLEVEL_M, "pressure [hPa]:%d\r\n", pressure_hPa);
//	      APP_LOG(TS_OFF, VLEVEL_M, "pressure [hPa]:%f\r\n", (float)(pressure_hPa));			// dit werkt dus niet ???
	    } while(0);

//	    uint16_t p_16;
		APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> (float)pressure_hPa: %4.4f\r\n",pressure_hPa);
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <Sensor_Data+0x108>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fa90 	bl	8000450 <__aeabi_f2d>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	e9cd 2300 	strd	r2, r3, [sp]
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <Sensor_Data+0x10c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f019 fdbc 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
//		APP_LOG(TS_OFF, VLEVEL_M, pressure_hPa);
//		p_16= (uint16_t)(pressure_hPa * 100 / 10);      /* in hPa / 10 */
//		APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> (uint16_t)pressure_hPa: %f\r\n");
//		APP_LOG(TS_OFF, VLEVEL_M, p_16);
		HAL_Delay(2500);
 8000f44:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000f48:	f001 f84d 	bl	8001fe6 <HAL_Delay>
	      */




	  return pressure_hPa;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <Sensor_Data+0x108>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
	  }
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	0801b148 	.word	0x0801b148
 8000f5c:	08001025 	.word	0x08001025
 8000f60:	080010fd 	.word	0x080010fd
 8000f64:	2000170c 	.word	0x2000170c
 8000f68:	20000158 	.word	0x20000158
 8000f6c:	0801b170 	.word	0x0801b170
 8000f70:	20000150 	.word	0x20000150
 8000f74:	20000154 	.word	0x20000154
 8000f78:	0801b194 	.word	0x0801b194

08000f7c <one_shot_trigger>:
    }

    return;
}

void one_shot_trigger(void){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef ret;
    uint8_t var[1];
  	static const uint8_t CTRL_REG2 = 0x11;				// register
    var[0]=0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	713b      	strb	r3, [r7, #4]

    ret=platform_read(&hi2c2, CTRL_REG2, var, 1);
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <one_shot_trigger+0x54>)
 8000f88:	7819      	ldrb	r1, [r3, #0]
 8000f8a:	1d3a      	adds	r2, r7, #4
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <one_shot_trigger+0x58>)
 8000f90:	f000 f8b4 	bl	80010fc <platform_read>
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10e      	bne.n	8000fbc <one_shot_trigger+0x40>
    {
    	var[0]=var[0] | (uint8_t) 1;
 8000f9e:	793b      	ldrb	r3, [r7, #4]
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	713b      	strb	r3, [r7, #4]
		ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <one_shot_trigger+0x54>)
 8000faa:	7819      	ldrb	r1, [r3, #0]
 8000fac:	1d3a      	adds	r2, r7, #4
 8000fae:	2301      	movs	r3, #1
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <one_shot_trigger+0x58>)
 8000fb2:	f000 f837 	bl	8001024 <platform_write>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
    else{
        APP_LOG(TS_OFF, VLEVEL_M, "one_shot_trigger();        failed\n");
    }


    return;
 8000fba:	e006      	b.n	8000fca <one_shot_trigger+0x4e>
        APP_LOG(TS_OFF, VLEVEL_M, "one_shot_trigger();        failed\n");
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <one_shot_trigger+0x5c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f019 fd7a 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
    return;
 8000fc8:	bf00      	nop
}
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	0801ba37 	.word	0x0801ba37
 8000fd4:	2000170c 	.word	0x2000170c
 8000fd8:	0801b210 	.word	0x0801b210

08000fdc <I2C_id>:


uint8_t I2C_id(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af02      	add	r7, sp, #8

  	static const uint8_t WhoAmI = 0x0F;				// register
    HAL_StatusTypeDef ret;
    ret=8;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	71fb      	strb	r3, [r7, #7]
    uint8_t var[1];
    var[0]=0x0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	713b      	strb	r3, [r7, #4]

//    ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
    ret=platform_read(&hi2c2, WhoAmI, var, 1);
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <I2C_id+0x3c>)
 8000fec:	7819      	ldrb	r1, [r3, #0]
 8000fee:	1d3a      	adds	r2, r7, #4
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	480a      	ldr	r0, [pc, #40]	; (800101c <I2C_id+0x40>)
 8000ff4:	f000 f882 	bl	80010fc <platform_read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]

	APP_LOG(TS_OFF, VLEVEL_M, "WhoAmI ID: 0x%X\n",var[0]);
 8000ffc:	793b      	ldrb	r3, [r7, #4]
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <I2C_id+0x44>)
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2002      	movs	r0, #2
 8001008:	f019 fd58 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
//    */
//
////    APP_LOG(TS_OFF, VLEVEL_M, "lengte van buf:%x\n",z);
//	APP_LOG(TS_OFF, VLEVEL_M, "id2: %X\n",buf[0]);

	 return var[0];
 800100c:	793b      	ldrb	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	0801ba38 	.word	0x0801ba38
 800101c:	2000170c 	.word	0x2000170c
 8001020:	0801b234 	.word	0x0801b234

08001024 <platform_write>:


static int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len){
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af02      	add	r7, sp, #8
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	461a      	mov	r2, r3
 8001030:	460b      	mov	r3, r1
 8001032:	72fb      	strb	r3, [r7, #11]
 8001034:	4613      	mov	r3, r2
 8001036:	813b      	strh	r3, [r7, #8]
 8001038:	466b      	mov	r3, sp
 800103a:	461d      	mov	r5, r3
//    if (len>0){
//		for (int i=0; i<len; i++){
//			message[i]=Bufp[i];
//		}
//    }
    uint8_t buffer[len+1];
 800103c:	893b      	ldrh	r3, [r7, #8]
 800103e:	1c5c      	adds	r4, r3, #1
 8001040:	1e63      	subs	r3, r4, #1
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	4623      	mov	r3, r4
 8001046:	4618      	mov	r0, r3
 8001048:	f04f 0100 	mov.w	r1, #0
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	00cb      	lsls	r3, r1, #3
 8001056:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800105a:	00c2      	lsls	r2, r0, #3
 800105c:	4623      	mov	r3, r4
 800105e:	4618      	mov	r0, r3
 8001060:	f04f 0100 	mov.w	r1, #0
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	00cb      	lsls	r3, r1, #3
 800106e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001072:	00c2      	lsls	r2, r0, #3
 8001074:	4623      	mov	r3, r4
 8001076:	3307      	adds	r3, #7
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	ebad 0d03 	sub.w	sp, sp, r3
 8001080:	ab02      	add	r3, sp, #8
 8001082:	3300      	adds	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
    if (len>0){
 8001086:	893b      	ldrh	r3, [r7, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <platform_write+0x90>
		for (int i=1;i<(len+1);i++){
 800108c:	2301      	movs	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	e00c      	b.n	80010ac <platform_write+0x88>
			buffer[i]=Bufp[i-1];
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b01      	subs	r3, #1
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	7819      	ldrb	r1, [r3, #0]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	4413      	add	r3, r2
 80010a2:	460a      	mov	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
		for (int i=1;i<(len+1);i++){
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	893b      	ldrh	r3, [r7, #8]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	ddee      	ble.n	8001092 <platform_write+0x6e>
			}}
	buffer[0]=Reg;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	7afa      	ldrb	r2, [r7, #11]
 80010b8:	701a      	strb	r2, [r3, #0]
//    	if(arg[x]){
//    		z++;
//    }
//    }

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, buffer, (len+1), 1000);
 80010ba:	23ba      	movs	r3, #186	; 0xba
 80010bc:	b299      	uxth	r1, r3
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	893b      	ldrh	r3, [r7, #8]
 80010c2:	3301      	adds	r3, #1
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ca:	9000      	str	r0, [sp, #0]
 80010cc:	4809      	ldr	r0, [pc, #36]	; (80010f4 <platform_write+0xd0>)
 80010ce:	f003 ff5d 	bl	8004f8c <HAL_I2C_Master_Transmit>
 80010d2:	4603      	mov	r3, r0
 80010d4:	74fb      	strb	r3, [r7, #19]

	if (ret){
 80010d6:	7cfb      	ldrb	r3, [r7, #19]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <platform_write+0xc4>
		  APP_LOG(TS_OFF, VLEVEL_M, "Er ging iets mis (write)!\n");
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <platform_write+0xd4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2002      	movs	r0, #2
 80010e4:	f019 fcea 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 80010e8:	7cfb      	ldrb	r3, [r7, #19]
 80010ea:	46ad      	mov	sp, r5
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bdb0      	pop	{r4, r5, r7, pc}
 80010f4:	2000170c 	.word	0x2000170c
 80010f8:	0801b248 	.word	0x0801b248

080010fc <platform_read>:



static int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af02      	add	r7, sp, #8
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	461a      	mov	r2, r3
 8001108:	460b      	mov	r3, r1
 800110a:	72fb      	strb	r3, [r7, #11]
 800110c:	4613      	mov	r3, r2
 800110e:	813b      	strh	r3, [r7, #8]
//int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){

    HAL_StatusTypeDef ret;
    uint8_t reg[1];
    reg[0]=Reg;
 8001110:	7afb      	ldrb	r3, [r7, #11]
 8001112:	753b      	strb	r3, [r7, #20]

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, reg, 1, 1000);
 8001114:	23ba      	movs	r3, #186	; 0xba
 8001116:	b299      	uxth	r1, r3
 8001118:	f107 0214 	add.w	r2, r7, #20
 800111c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <platform_read+0x74>)
 8001126:	f003 ff31 	bl	8004f8c <HAL_I2C_Master_Transmit>
 800112a:	4603      	mov	r3, r0
 800112c:	75fb      	strb	r3, [r7, #23]
	if(len>0 && !ret){
 800112e:	893b      	ldrh	r3, [r7, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00f      	beq.n	8001154 <platform_read+0x58>
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <platform_read+0x58>
		ret=HAL_I2C_Master_Receive(&hi2c2, addr_read, Bufp, len, 1000);
 800113a:	23bb      	movs	r3, #187	; 0xbb
 800113c:	b299      	uxth	r1, r3
 800113e:	893b      	ldrh	r3, [r7, #8]
 8001140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001144:	9200      	str	r2, [sp, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <platform_read+0x74>)
 800114a:	f004 f813 	bl	8005174 <HAL_I2C_Master_Receive>
 800114e:	4603      	mov	r3, r0
 8001150:	75fb      	strb	r3, [r7, #23]
 8001152:	e008      	b.n	8001166 <platform_read+0x6a>
	}
	else if(ret){
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <platform_read+0x6a>
	  APP_LOG(TS_OFF, VLEVEL_M, "Kan geen verbinding maken met de sensor (read)!\n");
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <platform_read+0x78>)
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2002      	movs	r0, #2
 8001162:	f019 fcab 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 8001166:	7dfb      	ldrb	r3, [r7, #23]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000170c 	.word	0x2000170c
 8001174:	0801b264 	.word	0x0801b264

08001178 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	461a      	mov	r2, r3
 8001184:	460b      	mov	r3, r1
 8001186:	72fb      	strb	r3, [r7, #11]
 8001188:	4613      	mov	r3, r2
 800118a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685c      	ldr	r4, [r3, #4]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6898      	ldr	r0, [r3, #8]
 8001194:	893b      	ldrh	r3, [r7, #8]
 8001196:	7af9      	ldrb	r1, [r7, #11]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	47a0      	blx	r4
 800119c:	6178      	str	r0, [r7, #20]

  return ret;
 800119e:	697b      	ldr	r3, [r7, #20]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd90      	pop	{r4, r7, pc}

080011a8 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	461a      	mov	r2, r3
 80011b4:	460b      	mov	r3, r1
 80011b6:	72fb      	strb	r3, [r7, #11]
 80011b8:	4613      	mov	r3, r2
 80011ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681c      	ldr	r4, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6898      	ldr	r0, [r3, #8]
 80011c4:	893b      	ldrh	r3, [r7, #8]
 80011c6:	7af9      	ldrb	r1, [r7, #11]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	47a0      	blx	r4
 80011cc:	6178      	str	r0, [r7, #20]

  return ret;
 80011ce:	697b      	ldr	r3, [r7, #20]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd90      	pop	{r4, r7, pc}

080011d8 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff faf3 	bl	80007cc <__aeabi_ui2f>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fbf9 	bl	80009e4 <__aeabi_fdiv>
 80011f2:	4603      	mov	r3, r0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001208:	f107 0208 	add.w	r2, r7, #8
 800120c:	2301      	movs	r3, #1
 800120e:	2110      	movs	r1, #16
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ffb1 	bl	8001178 <lps22hh_read_reg>
 8001216:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10f      	bne.n	800123e <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	7a3b      	ldrb	r3, [r7, #8]
 8001228:	f362 0341 	bfi	r3, r2, #1, #1
 800122c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800122e:	f107 0208 	add.w	r2, r7, #8
 8001232:	2301      	movs	r3, #1
 8001234:	2110      	movs	r1, #16
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffb6 	bl	80011a8 <lps22hh_write_reg>
 800123c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001254:	f107 0210 	add.w	r2, r7, #16
 8001258:	2301      	movs	r3, #1
 800125a:	2110      	movs	r1, #16
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff8b 	bl	8001178 <lps22hh_read_reg>
 8001262:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d107      	bne.n	800127a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800126a:	f107 020c 	add.w	r2, r7, #12
 800126e:	2301      	movs	r3, #1
 8001270:	2111      	movs	r1, #17
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff80 	bl	8001178 <lps22hh_read_reg>
 8001278:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10f      	bne.n	80012a0 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	b2da      	uxtb	r2, r3
 8001288:	7c3b      	ldrb	r3, [r7, #16]
 800128a:	f362 1306 	bfi	r3, r2, #4, #3
 800128e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001290:	f107 0210 	add.w	r2, r7, #16
 8001294:	2301      	movs	r3, #1
 8001296:	2110      	movs	r1, #16
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff85 	bl	80011a8 <lps22hh_write_reg>
 800129e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d119      	bne.n	80012da <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80012a6:	78fb      	ldrb	r3, [r7, #3]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	7b3b      	ldrb	r3, [r7, #12]
 80012b2:	f362 0341 	bfi	r3, r2, #1, #1
 80012b6:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	08db      	lsrs	r3, r3, #3
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	7b3b      	ldrb	r3, [r7, #12]
 80012c4:	f362 0300 	bfi	r3, r2, #0, #1
 80012c8:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80012ca:	f107 020c 	add.w	r2, r7, #12
 80012ce:	2301      	movs	r3, #1
 80012d0:	2111      	movs	r1, #17
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff68 	bl	80011a8 <lps22hh_write_reg>
 80012d8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80012da:	697b      	ldr	r3, [r7, #20]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80012ee:	f107 0208 	add.w	r2, r7, #8
 80012f2:	2303      	movs	r3, #3
 80012f4:	2128      	movs	r1, #40	; 0x28
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ff3e 	bl	8001178 <lps22hh_read_reg>
 80012fc:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80012fe:	7abb      	ldrb	r3, [r7, #10]
 8001300:	461a      	mov	r2, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	7a7a      	ldrb	r2, [r7, #9]
 800130e:	441a      	add	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	7a3a      	ldrb	r2, [r7, #8]
 800131c:	441a      	add	r2, r3
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	021a      	lsls	r2, r3, #8
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	601a      	str	r2, [r3, #0]

  return ret;
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8001340:	2301      	movs	r3, #1
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	210f      	movs	r1, #15
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ff16 	bl	8001178 <lps22hh_read_reg>
 800134c:	60f8      	str	r0, [r7, #12]

  return ret;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4313      	orrs	r3, r2
 800136e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800137c:	68fb      	ldr	r3, [r7, #12]
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001394:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	43db      	mvns	r3, r3
 800139a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800139e:	4013      	ands	r3, r2
 80013a0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <MX_ADC_Init+0x94>)
 80013b2:	4a24      	ldr	r2, [pc, #144]	; (8001444 <MX_ADC_Init+0x98>)
 80013b4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <MX_ADC_Init+0x94>)
 80013b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013bc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_ADC_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <MX_ADC_Init+0x94>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_ADC_Init+0x94>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_ADC_Init+0x94>)
 80013d2:	2204      	movs	r2, #4
 80013d4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_ADC_Init+0x94>)
 80013d8:	2200      	movs	r2, #0
 80013da:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_ADC_Init+0x94>)
 80013de:	2200      	movs	r2, #0
 80013e0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_ADC_Init+0x94>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_ADC_Init+0x94>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_ADC_Init+0x94>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_ADC_Init+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_ADC_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_ADC_Init+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <MX_ADC_Init+0x94>)
 800140c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001410:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_ADC_Init+0x94>)
 8001414:	2207      	movs	r2, #7
 8001416:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_ADC_Init+0x94>)
 800141a:	2207      	movs	r2, #7
 800141c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_ADC_Init+0x94>)
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_ADC_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_ADC_Init+0x94>)
 800142e:	f001 ff21 	bl	8003274 <HAL_ADC_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001438:	f000 faa2 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200016a8 	.word	0x200016a8
 8001444:	40012400 	.word	0x40012400

08001448 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a05      	ldr	r2, [pc, #20]	; (800146c <HAL_ADC_MspInit+0x24>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d103      	bne.n	8001462 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800145a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800145e:	f7ff ff7b 	bl	8001358 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40012400 	.word	0x40012400

08001470 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a05      	ldr	r2, [pc, #20]	; (8001494 <HAL_ADC_MspDeInit+0x24>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d103      	bne.n	800148a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001482:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001486:	f7ff ff7f 	bl	8001388 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40012400 	.word	0x40012400

08001498 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <SYS_InitMeasurement+0x14>)
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <SYS_InitMeasurement+0x18>)
 80014a0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	200016a8 	.word	0x200016a8
 80014b0:	40012400 	.word	0x40012400

080014b4 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80014c2:	f000 f871 	bl	80015a8 <SYS_GetBatteryLevel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80014ca:	4830      	ldr	r0, [pc, #192]	; (800158c <SYS_GetTemperatureLevel+0xd8>)
 80014cc:	f000 f8a0 	bl	8001610 <ADC_ReadChannels>
 80014d0:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80014d2:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <SYS_GetTemperatureLevel+0xdc>)
 80014d4:	881a      	ldrh	r2, [r3, #0]
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <SYS_GetTemperatureLevel+0xe0>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d026      	beq.n	800152c <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <SYS_GetTemperatureLevel+0xdc>)
 80014e0:	881a      	ldrh	r2, [r3, #0]
 80014e2:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <SYS_GetTemperatureLevel+0xe0>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d01c      	beq.n	8001524 <SYS_GetTemperatureLevel+0x70>
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	4a28      	ldr	r2, [pc, #160]	; (8001598 <SYS_GetTemperatureLevel+0xe4>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <SYS_GetTemperatureLevel+0xe0>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2264      	movs	r2, #100	; 0x64
 8001506:	fb02 f203 	mul.w	r2, r2, r3
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <SYS_GetTemperatureLevel+0xdc>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <SYS_GetTemperatureLevel+0xe0>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	1acb      	subs	r3, r1, r3
 8001516:	fb92 f3f3 	sdiv	r3, r2, r3
 800151a:	b29b      	uxth	r3, r3
 800151c:	331e      	adds	r3, #30
 800151e:	b29b      	uxth	r3, r3
 8001520:	b21b      	sxth	r3, r3
 8001522:	e001      	b.n	8001528 <SYS_GetTemperatureLevel+0x74>
 8001524:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001528:	81fb      	strh	r3, [r7, #14]
 800152a:	e01c      	b.n	8001566 <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	fb02 f203 	mul.w	r2, r2, r3
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <SYS_GetTemperatureLevel+0xe8>)
 8001536:	fba3 1302 	umull	r1, r3, r3, r2
 800153a:	1ad2      	subs	r2, r2, r3
 800153c:	0852      	lsrs	r2, r2, #1
 800153e:	4413      	add	r3, r2
 8001540:	0adb      	lsrs	r3, r3, #11
 8001542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800154e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001552:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <SYS_GetTemperatureLevel+0xec>)
 8001554:	fb82 1203 	smull	r1, r2, r2, r3
 8001558:	1292      	asrs	r2, r2, #10
 800155a:	17db      	asrs	r3, r3, #31
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b29b      	uxth	r3, r3
 8001560:	331e      	adds	r3, #30
 8001562:	b29b      	uxth	r3, r3
 8001564:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8001566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <SYS_GetTemperatureLevel+0xf0>)
 800156e:	2201      	movs	r2, #1
 8001570:	2100      	movs	r1, #0
 8001572:	2001      	movs	r0, #1
 8001574:	f019 faa2 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001578:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8001580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	b0001000 	.word	0xb0001000
 8001590:	1fff75c8 	.word	0x1fff75c8
 8001594:	1fff75a8 	.word	0x1fff75a8
 8001598:	09ee009f 	.word	0x09ee009f
 800159c:	00100101 	.word	0x00100101
 80015a0:	68db8bad 	.word	0x68db8bad
 80015a4:	0801b298 	.word	0x0801b298

080015a8 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015b6:	4813      	ldr	r0, [pc, #76]	; (8001604 <SYS_GetBatteryLevel+0x5c>)
 80015b8:	f000 f82a 	bl	8001610 <ADC_ReadChannels>
 80015bc:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	80fb      	strh	r3, [r7, #6]
 80015c8:	e016      	b.n	80015f8 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <SYS_GetBatteryLevel+0x60>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00b      	beq.n	80015ee <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <SYS_GetBatteryLevel+0x60>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	f640 43e4 	movw	r3, #3300	; 0xce4
 80015e0:	fb03 f202 	mul.w	r2, r3, r2
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	80fb      	strh	r3, [r7, #6]
 80015ec:	e004      	b.n	80015f8 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80015ee:	4a07      	ldr	r2, [pc, #28]	; (800160c <SYS_GetBatteryLevel+0x64>)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80015f8:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	b4002000 	.word	0xb4002000
 8001608:	1fff75aa 	.word	0x1fff75aa
 800160c:	004c08d8 	.word	0x004c08d8

08001610 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001628:	f7ff fec0 	bl	80013ac <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800162c:	481a      	ldr	r0, [pc, #104]	; (8001698 <ADC_ReadChannels+0x88>)
 800162e:	f002 fc07 	bl	8003e40 <HAL_ADCEx_Calibration_Start>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001638:	f000 f9a2 	bl	8001980 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4619      	mov	r1, r3
 800164e:	4812      	ldr	r0, [pc, #72]	; (8001698 <ADC_ReadChannels+0x88>)
 8001650:	f002 f96e 	bl	8003930 <HAL_ADC_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800165a:	f000 f991 	bl	8001980 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <ADC_ReadChannels+0x88>)
 8001660:	f002 f84a 	bl	80036f8 <HAL_ADC_Start>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800166a:	f000 f989 	bl	8001980 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800166e:	f04f 31ff 	mov.w	r1, #4294967295
 8001672:	4809      	ldr	r0, [pc, #36]	; (8001698 <ADC_ReadChannels+0x88>)
 8001674:	f002 f8b8 	bl	80037e8 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <ADC_ReadChannels+0x88>)
 800167a:	f002 f883 	bl	8003784 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <ADC_ReadChannels+0x88>)
 8001680:	f002 f949 	bl	8003916 <HAL_ADC_GetValue>
 8001684:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001686:	4804      	ldr	r0, [pc, #16]	; (8001698 <ADC_ReadChannels+0x88>)
 8001688:	f001 ffba 	bl	8003600 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800168c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200016a8 	.word	0x200016a8

0800169c <LL_AHB1_GRP1_EnableClock>:
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016c0:	68fb      	ldr	r3, [r7, #12]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016d0:	2004      	movs	r0, #4
 80016d2:	f7ff ffe3 	bl	800169c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	2001      	movs	r0, #1
 80016d8:	f7ff ffe0 	bl	800169c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2102      	movs	r1, #2
 80016e0:	200b      	movs	r0, #11
 80016e2:	f002 fd00 	bl	80040e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016e6:	200b      	movs	r0, #11
 80016e8:	f002 fd17 	bl	800411a <HAL_NVIC_EnableIRQ>

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <LL_AHB2_GRP1_EnableClock>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001714:	68fb      	ldr	r3, [r7, #12]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <LL_APB1_GRP1_EnableClock>:
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800172e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4313      	orrs	r3, r2
 8001736:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001744:	68fb      	ldr	r3, [r7, #12]
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_I2C2_Init+0x74>)
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <MX_I2C2_Init+0x78>)
 8001758:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <MX_I2C2_Init+0x74>)
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <MX_I2C2_Init+0x7c>)
 800175e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_I2C2_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <MX_I2C2_Init+0x74>)
 8001768:	2201      	movs	r2, #1
 800176a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <MX_I2C2_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_I2C2_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_I2C2_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_I2C2_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_I2C2_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800178a:	480e      	ldr	r0, [pc, #56]	; (80017c4 <MX_I2C2_Init+0x74>)
 800178c:	f003 fb6e 	bl	8004e6c <HAL_I2C_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001796:	f000 f8f3 	bl	8001980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800179a:	2100      	movs	r1, #0
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <MX_I2C2_Init+0x74>)
 800179e:	f003 ffcd 	bl	800573c <HAL_I2CEx_ConfigAnalogFilter>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017a8:	f000 f8ea 	bl	8001980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017ac:	2100      	movs	r1, #0
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_I2C2_Init+0x74>)
 80017b0:	f004 f80e 	bl	80057d0 <HAL_I2CEx_ConfigDigitalFilter>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017ba:	f000 f8e1 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000170c 	.word	0x2000170c
 80017c8:	40005800 	.word	0x40005800
 80017cc:	20303e5d 	.word	0x20303e5d

080017d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b096      	sub	sp, #88	; 0x58
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2238      	movs	r2, #56	; 0x38
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f019 fc01 	bl	801aff8 <memset>
  if(i2cHandle->Instance==I2C2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a21      	ldr	r2, [pc, #132]	; (8001880 <HAL_I2C_MspInit+0xb0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d13b      	bne.n	8001878 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001804:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4618      	mov	r0, r3
 8001810:	f005 fab6 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800181a:	f000 f8b1 	bl	8001980 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff ff66 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	2002      	movs	r0, #2
 8001826:	f7ff ff63 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800182a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800182e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001830:	2312      	movs	r3, #18
 8001832:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800183c:	2304      	movs	r3, #4
 800183e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001844:	4619      	mov	r1, r3
 8001846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184a:	f003 f899 	bl	8004980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800184e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001854:	2312      	movs	r3, #18
 8001856:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001860:	2304      	movs	r3, #4
 8001862:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <HAL_I2C_MspInit+0xb4>)
 800186c:	f003 f888 	bl	8004980 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001870:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001874:	f7ff ff54 	bl	8001720 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001878:	bf00      	nop
 800187a:	3758      	adds	r7, #88	; 0x58
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40005800 	.word	0x40005800
 8001884:	48000400 	.word	0x48000400

08001888 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001898:	f023 0218 	bic.w	r2, r3, #24
 800189c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b6:	f001 faf5 	bl	8002ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ba:	f000 f807 	bl	80018cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 80018be:	f008 fe63 	bl	800a588 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 80018c2:	f7ff ff45 	bl	8001750 <MX_I2C2_Init>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80018c6:	f008 fe67 	bl	800a598 <MX_LoRaWAN_Process>
 80018ca:	e7fc      	b.n	80018c6 <main+0x14>

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b09a      	sub	sp, #104	; 0x68
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	2248      	movs	r2, #72	; 0x48
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f019 fb8c 	bl	801aff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018f2:	f003 ffb9 	bl	8005868 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff ffc6 	bl	8001888 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <SystemClock_Config+0xb0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001904:	4a1d      	ldr	r2, [pc, #116]	; (800197c <SystemClock_Config+0xb0>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <SystemClock_Config+0xb0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001918:	2324      	movs	r3, #36	; 0x24
 800191a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800191c:	2381      	movs	r3, #129	; 0x81
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001920:	2301      	movs	r3, #1
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001924:	2300      	movs	r3, #0
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001928:	23b0      	movs	r3, #176	; 0xb0
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800192c:	2300      	movs	r3, #0
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	4618      	mov	r0, r3
 8001936:	f004 fae3 	bl	8005f00 <HAL_RCC_OscConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001940:	f000 f81e 	bl	8001980 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001944:	234f      	movs	r3, #79	; 0x4f
 8001946:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	2102      	movs	r1, #2
 8001962:	4618      	mov	r0, r3
 8001964:	f004 fe66 	bl	8006634 <HAL_RCC_ClockConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800196e:	f000 f807 	bl	8001980 <Error_Handler>
  }
}
 8001972:	bf00      	nop
 8001974:	3768      	adds	r7, #104	; 0x68
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	58000400 	.word	0x58000400

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	e7fe      	b.n	8001988 <Error_Handler+0x8>

0800198a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800198e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <LL_APB1_GRP1_EnableClock>:
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4313      	orrs	r3, r2
 80019c0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4013      	ands	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
	...

080019dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	; 0x30
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	222c      	movs	r2, #44	; 0x2c
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f019 fb05 	bl	801aff8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <MX_RTC_Init+0x9c>)
 80019f0:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <MX_RTC_Init+0xa0>)
 80019f2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <MX_RTC_Init+0x9c>)
 80019f6:	221f      	movs	r2, #31
 80019f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <MX_RTC_Init+0x9c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a12:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a22:	4815      	ldr	r0, [pc, #84]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a24:	f005 fac6 	bl	8006fb4 <HAL_RTC_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001a2e:	f7ff ffa7 	bl	8001980 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001a32:	4811      	ldr	r0, [pc, #68]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a34:	f005 fdb4 	bl	80075a0 <HAL_RTCEx_SetSSRU_IT>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001a3e:	f7ff ff9f 	bl	8001980 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001a4e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a52:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_RTC_Init+0x9c>)
 8001a62:	f005 fb21 	bl	80070a8 <HAL_RTC_SetAlarm_IT>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001a6c:	f7ff ff88 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3730      	adds	r7, #48	; 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20001758 	.word	0x20001758
 8001a7c:	40002800 	.word	0x40002800

08001a80 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b090      	sub	sp, #64	; 0x40
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	2238      	movs	r2, #56	; 0x38
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f019 fab1 	bl	801aff8 <memset>
  if(rtcHandle->Instance==RTC)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <HAL_RTC_MspInit+0x74>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d125      	bne.n	8001aec <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aac:	f107 0308 	add.w	r3, r7, #8
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f005 f965 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001abc:	f7ff ff60 	bl	8001980 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ac0:	f7ff ff63 	bl	800198a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ac4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ac8:	f7ff ff6f 	bl	80019aa <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f002 fb08 	bl	80040e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f002 fb1f 	bl	800411a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	202a      	movs	r0, #42	; 0x2a
 8001ae2:	f002 fb00 	bl	80040e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001ae6:	202a      	movs	r0, #42	; 0x2a
 8001ae8:	f002 fb17 	bl	800411a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001aec:	bf00      	nop
 8001aee:	3740      	adds	r7, #64	; 0x40
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40002800 	.word	0x40002800

08001af8 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	58000400 	.word	0x58000400

08001b10 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001b2c:	f001 f9da 	bl	8002ee4 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001b30:	f7ff ffe2 	bl	8001af8 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f003 ff29 	bl	800598c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001b42:	f001 f9dd 	bl	8002f00 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001b46:	f000 fefb 	bl	8002940 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001b52:	f001 f9c7 	bl	8002ee4 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001b56:	2101      	movs	r1, #1
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f003 fe93 	bl	8005884 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 8001b66:	f001 f9cb 	bl	8002f00 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <NMI_Handler+0x4>

08001b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <HardFault_Handler+0x4>

08001b86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <MemManage_Handler+0x4>

08001b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <BusFault_Handler+0x4>

08001b92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <UsageFault_Handler+0x4>

08001b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001bce:	f005 fd23 	bl	8007618 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20001758 	.word	0x20001758

08001bdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <DMA1_Channel1_IRQHandler+0x10>)
 8001be2:	f002 fd31 	bl	8004648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000179c 	.word	0x2000179c

08001bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <USART1_IRQHandler+0x10>)
 8001bf6:	f006 fb6f 	bl	80082d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200017fc 	.word	0x200017fc

08001c04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001c08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c0c:	f003 f916 	bl	8004e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <RTC_Alarm_IRQHandler+0x10>)
 8001c1a:	f005 fbad 	bl	8007378 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20001758 	.word	0x20001758

08001c28 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001c2e:	f006 f85b 	bl	8007ce8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20001790 	.word	0x20001790

08001c3c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_SUBGHZ_Init+0x20>)
 8001c72:	2208      	movs	r2, #8
 8001c74:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_SUBGHZ_Init+0x20>)
 8001c78:	f005 fdba 	bl	80077f0 <HAL_SUBGHZ_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001c82:	f7ff fe7d 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20001790 	.word	0x20001790

08001c90 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f7ff ffcf 	bl	8001c3c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2032      	movs	r0, #50	; 0x32
 8001ca4:	f002 fa1f 	bl	80040e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001ca8:	2032      	movs	r0, #50	; 0x32
 8001caa:	f002 fa36 	bl	800411a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001ce0:	4b02      	ldr	r3, [pc, #8]	; (8001cec <LL_FLASH_GetUDN+0x10>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	1fff7580 	.word	0x1fff7580

08001cf0 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <LL_FLASH_GetDeviceID+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	1fff7584 	.word	0x1fff7584

08001d08 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <LL_FLASH_GetSTCompanyID+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0a1b      	lsrs	r3, r3, #8
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	1fff7584 	.word	0x1fff7584

08001d20 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff ffc6 	bl	8001cb6 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001d2a:	f018 fc09 	bl	801a540 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 8001d2e:	f000 f97e 	bl	800202e <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001d32:	f000 f9ba 	bl	80020aa <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001d36:	f018 fe93 	bl	801aa60 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001d3a:	4809      	ldr	r0, [pc, #36]	; (8001d60 <SystemApp_Init+0x40>)
 8001d3c:	f018 ff40 	bl	801abc0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001d40:	2002      	movs	r0, #2
 8001d42:	f018 ff4b 	bl	801abdc <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001d46:	f7ff fba7 	bl	8001498 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001d4a:	f000 f9e1 	bl	8002110 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001d4e:	f017 fdd7 	bl	8019900 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001d52:	2101      	movs	r1, #1
 8001d54:	2001      	movs	r0, #1
 8001d56:	f017 fe13 	bl	8019980 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	08001f39 	.word	0x08001f39

08001d64 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001d68:	f017 fe3a 	bl	80199e0 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001d7a:	f7ff fc15 	bl	80015a8 <SYS_GetBatteryLevel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001d82:	88bb      	ldrh	r3, [r7, #4]
 8001d84:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d902      	bls.n	8001d92 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001d8c:	23fe      	movs	r3, #254	; 0xfe
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	e014      	b.n	8001dbc <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001d92:	88bb      	ldrh	r3, [r7, #4]
 8001d94:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001d98:	d202      	bcs.n	8001da0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	e00d      	b.n	8001dbc <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001da0:	88bb      	ldrh	r3, [r7, #4]
 8001da2:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001da6:	461a      	mov	r2, r3
 8001da8:	4613      	mov	r3, r2
 8001daa:	01db      	lsls	r3, r3, #7
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <GetBatteryLevel+0x68>)
 8001db4:	fba3 2302 	umull	r2, r3, r3, r2
 8001db8:	09db      	lsrs	r3, r3, #7
 8001dba:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <GetBatteryLevel+0x6c>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	f018 fe78 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	1b4e81b5 	.word	0x1b4e81b5
 8001ddc:	0801b2a4 	.word	0x0801b2a4

08001de0 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001dea:	f7ff fb63 	bl	80014b4 <SYS_GetTemperatureLevel>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	da00      	bge.n	8001df6 <GetTemperatureLevel+0x16>
 8001df4:	33ff      	adds	r3, #255	; 0xff
 8001df6:	121b      	asrs	r3, r3, #8
 8001df8:	b21b      	sxth	r3, r3
 8001dfa:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001e06:	b590      	push	{r4, r7, lr}
 8001e08:	b087      	sub	sp, #28
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001e12:	f7ff ff63 	bl	8001cdc <LL_FLASH_GetUDN>
 8001e16:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1e:	d138      	bne.n	8001e92 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001e20:	f001 f87c 	bl	8002f1c <HAL_GetUIDw0>
 8001e24:	4604      	mov	r4, r0
 8001e26:	f001 f88d 	bl	8002f44 <HAL_GetUIDw2>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4423      	add	r3, r4
 8001e2e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001e30:	f001 f87e 	bl	8002f30 <HAL_GetUIDw1>
 8001e34:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	0e1a      	lsrs	r2, r3, #24
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3307      	adds	r3, #7
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	0c1a      	lsrs	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3306      	adds	r3, #6
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	0a1a      	lsrs	r2, r3, #8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3305      	adds	r3, #5
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	0e1a      	lsrs	r2, r3, #24
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3303      	adds	r3, #3
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	0c1a      	lsrs	r2, r3, #16
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3302      	adds	r3, #2
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	0a1a      	lsrs	r2, r3, #8
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3301      	adds	r3, #1
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001e90:	e031      	b.n	8001ef6 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3307      	adds	r3, #7
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	0a1a      	lsrs	r2, r3, #8
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3306      	adds	r3, #6
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	0c1a      	lsrs	r2, r3, #16
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3305      	adds	r3, #5
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	0e1a      	lsrs	r2, r3, #24
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001ec0:	f7ff ff16 	bl	8001cf0 <LL_FLASH_GetDeviceID>
 8001ec4:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3303      	adds	r3, #3
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001ed0:	f7ff ff1a 	bl	8001d08 <LL_FLASH_GetSTCompanyID>
 8001ed4:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3302      	adds	r3, #2
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	0a1a      	lsrs	r2, r3, #8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	0c1b      	lsrs	r3, r3, #16
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd90      	pop	{r4, r7, pc}

08001efe <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001efe:	b590      	push	{r4, r7, lr}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001f08:	f7ff fee8 	bl	8001cdc <LL_FLASH_GetUDN>
 8001f0c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d10b      	bne.n	8001f2e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001f16:	f001 f801 	bl	8002f1c <HAL_GetUIDw0>
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	f001 f808 	bl	8002f30 <HAL_GetUIDw1>
 8001f20:	4603      	mov	r3, r0
 8001f22:	405c      	eors	r4, r3
 8001f24:	f001 f80e 	bl	8002f44 <HAL_GetUIDw2>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4063      	eors	r3, r4
 8001f2c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001f2e:	687b      	ldr	r3, [r7, #4]

}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd90      	pop	{r4, r7, pc}

08001f38 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	4618      	mov	r0, r3
 8001f48:	f017 fe5a 	bl	8019c00 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f52:	9200      	str	r2, [sp, #0]
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <TimestampNow+0x3c>)
 8001f56:	2110      	movs	r1, #16
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f81d 	bl	8001f98 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe f90a 	bl	8000178 <strlen>
 8001f64:	4603      	mov	r3, r0
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	0801b2b0 	.word	0x0801b2b0

08001f78 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f017 fcce 	bl	8019920 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2002      	movs	r0, #2
 8001f90:	f017 fcc6 	bl	8019920 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001f98:	b40c      	push	{r2, r3}
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001fa4:	f107 031c 	add.w	r3, r7, #28
 8001fa8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001faa:	6839      	ldr	r1, [r7, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f017 fff9 	bl	8019fa8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fc0:	b002      	add	sp, #8
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001fdc:	f000 f960 	bl	80022a0 <TIMER_IF_GetTimerValue>
 8001fe0:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 f9d5 	bl	80023a0 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <LL_AHB2_GRP1_EnableClock>:
{
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800200c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4313      	orrs	r3, r2
 8002014:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4013      	ands	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002022:	68fb      	ldr	r3, [r7, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 ) /* DEBUGGER_DISABLED */
  /* Put the debugger pin PA13 and P14 in analog for LowPower*/
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8002042:	2303      	movs	r3, #3
 8002044:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 800204a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800204e:	607b      	str	r3, [r7, #4]
  /* make sure clock is enabled before setting the pins with HAL_GPIO_Init() */
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff ffd4 	bl	8001ffe <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	4619      	mov	r1, r3
 800205a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205e:	f002 fc8f 	bl	8004980 <HAL_GPIO_Init>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 8002062:	2000      	movs	r0, #0
 8002064:	f000 f804 	bl	8002070 <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8002068:	bf00      	nop
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN DBG_ConfigForLpm_1 */

  /* USER CODE END DBG_ConfigForLpm_1 */

#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  enable_dbg = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d106      	bne.n	8002096 <DBG_ConfigForLpm+0x26>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 8002088:	f000 ff66 	bl	8002f58 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 800208c:	f000 ff70 	bl	8002f70 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8002090:	f000 ff7a 	bl	8002f88 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8002094:	e005      	b.n	80020a2 <DBG_ConfigForLpm+0x32>
    HAL_DBGMCU_DisableDBGSleepMode();
 8002096:	f000 ff65 	bl	8002f64 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 800209a:	f000 ff6f 	bl	8002f7c <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 800209e:	f000 ff79 	bl	8002f94 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
	...

080020b8 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <EnvSensors_Read+0x44>)
 80020c2:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <EnvSensors_Read+0x48>)
 80020c6:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <EnvSensors_Read+0x4c>)
 80020ca:	60fb      	str	r3, [r7, #12]
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  //===============================================================================================================================================
  PRESSURE_Value = (float)Sensor_Data();
 80020cc:	f7fe fece 	bl	8000e6c <Sensor_Data>
 80020d0:	60f8      	str	r0, [r7, #12]
//  APP_LOG(TS_OFF, VLEVEL_M, "sys_sensors.c->sensor_data.pressure:\r\n");
//  APP_LOG(TS_OFF, VLEVEL_M, sensor_data->pressure);
  //===============================================================================================================================================


  sensor_data->humidity    = HUMIDITY_Value;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <EnvSensors_Read+0x50>)
 80020e8:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <EnvSensors_Read+0x54>)
 80020ee:	611a      	str	r2, [r3, #16]

  return 0;
 80020f0:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	42480000 	.word	0x42480000
 8002100:	41900000 	.word	0x41900000
 8002104:	447a0000 	.word	0x447a0000
 8002108:	003e090d 	.word	0x003e090d
 800210c:	000503ab 	.word	0x000503ab

08002110 <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002114:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <TIMER_IF_Init+0x5c>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f083 0301 	eor.w	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01b      	beq.n	8002190 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <TIMER_IF_Init+0x60>)
 800215a:	f04f 32ff 	mov.w	r2, #4294967295
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002160:	f7ff fc3c 	bl	80019dc <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002164:	f000 f856 	bl	8002214 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800216c:	480c      	ldr	r0, [pc, #48]	; (80021a0 <TIMER_IF_Init+0x60>)
 800216e:	f005 f8a7 	bl	80072c0 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <TIMER_IF_Init+0x60>)
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800217a:	4809      	ldr	r0, [pc, #36]	; (80021a0 <TIMER_IF_Init+0x60>)
 800217c:	f005 f9de 	bl	800753c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002180:	2000      	movs	r0, #0
 8002182:	f000 f9cf 	bl	8002524 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002186:	f000 f85f 	bl	8002248 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <TIMER_IF_Init+0x5c>)
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002190:	79fb      	ldrb	r3, [r7, #7]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000159 	.word	0x20000159
 80021a0:	20001758 	.word	0x20001758

080021a4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08e      	sub	sp, #56	; 0x38
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	222c      	movs	r2, #44	; 0x2c
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f018 ff1c 	bl	801aff8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80021c0:	f000 f828 	bl	8002214 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <TIMER_IF_StartTimer+0x68>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80021dc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80021e0:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80021e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	2201      	movs	r2, #1
 80021ee:	4619      	mov	r1, r3
 80021f0:	4807      	ldr	r0, [pc, #28]	; (8002210 <TIMER_IF_StartTimer+0x6c>)
 80021f2:	f004 ff59 	bl	80070a8 <HAL_RTC_SetAlarm_IT>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80021fc:	f7ff fbc0 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002200:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002204:	4618      	mov	r0, r3
 8002206:	3738      	adds	r7, #56	; 0x38
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	2000015c 	.word	0x2000015c
 8002210:	20001758 	.word	0x20001758

08002214 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <TIMER_IF_StopTimer+0x2c>)
 8002220:	2201      	movs	r2, #1
 8002222:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002228:	4806      	ldr	r0, [pc, #24]	; (8002244 <TIMER_IF_StopTimer+0x30>)
 800222a:	f005 f849 	bl	80072c0 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <TIMER_IF_StopTimer+0x30>)
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002236:	79fb      	ldrb	r3, [r7, #7]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40002800 	.word	0x40002800
 8002244:	20001758 	.word	0x20001758

08002248 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 800224c:	f000 f98a 	bl	8002564 <GetTimerTicks>
 8002250:	4603      	mov	r3, r0
 8002252:	4a03      	ldr	r2, [pc, #12]	; (8002260 <TIMER_IF_SetTimerContext+0x18>)
 8002254:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002256:	4b02      	ldr	r3, [pc, #8]	; (8002260 <TIMER_IF_SetTimerContext+0x18>)
 8002258:	681b      	ldr	r3, [r3, #0]
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000015c 	.word	0x2000015c

08002264 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002268:	4b02      	ldr	r3, [pc, #8]	; (8002274 <TIMER_IF_GetTimerContext+0x10>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	2000015c 	.word	0x2000015c

08002278 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002282:	f000 f96f 	bl	8002564 <GetTimerTicks>
 8002286:	4602      	mov	r2, r0
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <TIMER_IF_GetTimerElapsedTime+0x24>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002290:	687b      	ldr	r3, [r7, #4]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000015c 	.word	0x2000015c

080022a0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <TIMER_IF_GetTimerValue+0x24>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80022b2:	f000 f957 	bl	8002564 <GetTimerTicks>
 80022b6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80022b8:	687b      	ldr	r3, [r7, #4]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000159 	.word	0x20000159

080022c8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80022d2:	2303      	movs	r3, #3
 80022d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80022d6:	687b      	ldr	r3, [r7, #4]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80022e2:	b5b0      	push	{r4, r5, r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	461a      	mov	r2, r3
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	0d95      	lsrs	r5, r2, #22
 80022f8:	0294      	lsls	r4, r2, #10
 80022fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	4620      	mov	r0, r4
 8002304:	4629      	mov	r1, r5
 8002306:	f7fe fc29 	bl	8000b5c <__aeabi_uldivmod>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4613      	mov	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bdb0      	pop	{r4, r5, r7, pc}

0800231c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800231c:	b4b0      	push	{r4, r5, r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4618      	mov	r0, r3
 800232c:	f04f 0100 	mov.w	r1, #0
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	f04f 0400 	mov.w	r4, #0
 8002338:	f04f 0500 	mov.w	r5, #0
 800233c:	015d      	lsls	r5, r3, #5
 800233e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002342:	0154      	lsls	r4, r2, #5
 8002344:	4622      	mov	r2, r4
 8002346:	462b      	mov	r3, r5
 8002348:	1a12      	subs	r2, r2, r0
 800234a:	eb63 0301 	sbc.w	r3, r3, r1
 800234e:	f04f 0400 	mov.w	r4, #0
 8002352:	f04f 0500 	mov.w	r5, #0
 8002356:	009d      	lsls	r5, r3, #2
 8002358:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800235c:	0094      	lsls	r4, r2, #2
 800235e:	4622      	mov	r2, r4
 8002360:	462b      	mov	r3, r5
 8002362:	1812      	adds	r2, r2, r0
 8002364:	eb41 0303 	adc.w	r3, r1, r3
 8002368:	f04f 0000 	mov.w	r0, #0
 800236c:	f04f 0100 	mov.w	r1, #0
 8002370:	00d9      	lsls	r1, r3, #3
 8002372:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002376:	00d0      	lsls	r0, r2, #3
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	0a82      	lsrs	r2, r0, #10
 800238a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800238e:	0a8b      	lsrs	r3, r1, #10
 8002390:	4613      	mov	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002394:	68fb      	ldr	r3, [r7, #12]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	bcb0      	pop	{r4, r5, r7}
 800239e:	4770      	bx	lr

080023a0 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff9a 	bl	80022e2 <TIMER_IF_Convert_ms2Tick>
 80023ae:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80023b0:	f000 f8d8 	bl	8002564 <GetTimerTicks>
 80023b4:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80023b6:	e000      	b.n	80023ba <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80023b8:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80023ba:	f000 f8d3 	bl	8002564 <GetTimerTicks>
 80023be:	4602      	mov	r2, r0
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d8f6      	bhi.n	80023b8 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80023ca:	bf00      	nop
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80023dc:	f018 f9fe 	bl	801a7dc <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80023f0:	f000 f8a8 	bl	8002544 <TIMER_IF_BkUp_Read_MSBticks>
 80023f4:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3301      	adds	r3, #1
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f892 	bl	8002524 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800240c:	b088      	sub	sp, #32
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002416:	f000 f8a5 	bl	8002564 <GetTimerTicks>
 800241a:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800241c:	f000 f892 	bl	8002544 <TIMER_IF_BkUp_Read_MSBticks>
 8002420:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	4618      	mov	r0, r3
 8002426:	f04f 0100 	mov.w	r1, #0
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	0003      	movs	r3, r0
 8002434:	2200      	movs	r2, #0
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	4608      	mov	r0, r1
 800243a:	f04f 0100 	mov.w	r1, #0
 800243e:	eb12 0800 	adds.w	r8, r2, r0
 8002442:	eb43 0901 	adc.w	r9, r3, r1
 8002446:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800244a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	0a82      	lsrs	r2, r0, #10
 8002458:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800245c:	0a8b      	lsrs	r3, r1, #10
 800245e:	4613      	mov	r3, r2
 8002460:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	461a      	mov	r2, r3
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800246e:	f04f 0100 	mov.w	r1, #0
 8002472:	ea02 0400 	and.w	r4, r2, r0
 8002476:	ea03 0501 	and.w	r5, r3, r1
 800247a:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff4b 	bl	800231c <TIMER_IF_Convert_Tick2ms>
 8002486:	4603      	mov	r3, r0
 8002488:	b29a      	uxth	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 800248e:	69fb      	ldr	r3, [r7, #28]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3720      	adds	r7, #32
 8002494:	46bd      	mov	sp, r7
 8002496:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800249c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	2100      	movs	r1, #0
 80024a8:	4803      	ldr	r0, [pc, #12]	; (80024b8 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80024aa:	f005 f8d9 	bl	8007660 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20001758 	.word	0x20001758

080024bc <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	2101      	movs	r1, #1
 80024c8:	4803      	ldr	r0, [pc, #12]	; (80024d8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80024ca:	f005 f8c9 	bl	8007660 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20001758 	.word	0x20001758

080024dc <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80024e6:	2100      	movs	r1, #0
 80024e8:	4804      	ldr	r0, [pc, #16]	; (80024fc <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80024ea:	f005 f8d1 	bl	8007690 <HAL_RTCEx_BKUPRead>
 80024ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80024f0:	687b      	ldr	r3, [r7, #4]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20001758 	.word	0x20001758

08002500 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800250a:	2101      	movs	r1, #1
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800250e:	f005 f8bf 	bl	8007690 <HAL_RTCEx_BKUPRead>
 8002512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002514:	687b      	ldr	r3, [r7, #4]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20001758 	.word	0x20001758

08002524 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	2102      	movs	r1, #2
 8002530:	4803      	ldr	r0, [pc, #12]	; (8002540 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002532:	f005 f895 	bl	8007660 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20001758 	.word	0x20001758

08002544 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800254a:	2102      	movs	r1, #2
 800254c:	4804      	ldr	r0, [pc, #16]	; (8002560 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800254e:	f005 f89f 	bl	8007690 <HAL_RTCEx_BKUPRead>
 8002552:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002554:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20001758 	.word	0x20001758

08002564 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8002568:	4803      	ldr	r0, [pc, #12]	; (8002578 <GetTimerTicks+0x14>)
 800256a:	f7ff fdde 	bl	800212a <LL_RTC_TIME_GetSubSecond>
 800256e:	4603      	mov	r3, r0
 8002570:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002572:	4618      	mov	r0, r3
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40002800 	.word	0x40002800

0800257c <LL_AHB2_GRP1_EnableClock>:
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800258a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4313      	orrs	r3, r2
 8002592:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002598:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4013      	ands	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025a0:	68fb      	ldr	r3, [r7, #12]
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <LL_APB2_GRP1_EnableClock>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80025b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80025c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4013      	ands	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025d0:	68fb      	ldr	r3, [r7, #12]
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <LL_APB2_GRP1_DisableClock>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80025e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025f2:	4013      	ands	r3, r2
 80025f4:	660b      	str	r3, [r1, #96]	; 0x60
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002604:	4b22      	ldr	r3, [pc, #136]	; (8002690 <MX_USART1_UART_Init+0x90>)
 8002606:	4a23      	ldr	r2, [pc, #140]	; (8002694 <MX_USART1_UART_Init+0x94>)
 8002608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <MX_USART1_UART_Init+0x90>)
 800260c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002612:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <MX_USART1_UART_Init+0x90>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <MX_USART1_UART_Init+0x90>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <MX_USART1_UART_Init+0x90>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <MX_USART1_UART_Init+0x90>)
 8002626:	220c      	movs	r2, #12
 8002628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <MX_USART1_UART_Init+0x90>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002630:	4b17      	ldr	r3, [pc, #92]	; (8002690 <MX_USART1_UART_Init+0x90>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <MX_USART1_UART_Init+0x90>)
 8002638:	2200      	movs	r2, #0
 800263a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <MX_USART1_UART_Init+0x90>)
 800263e:	2200      	movs	r2, #0
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <MX_USART1_UART_Init+0x90>)
 8002644:	2200      	movs	r2, #0
 8002646:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002648:	4811      	ldr	r0, [pc, #68]	; (8002690 <MX_USART1_UART_Init+0x90>)
 800264a:	f005 fd0c 	bl	8008066 <HAL_UART_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002654:	f7ff f994 	bl	8001980 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002658:	2100      	movs	r1, #0
 800265a:	480d      	ldr	r0, [pc, #52]	; (8002690 <MX_USART1_UART_Init+0x90>)
 800265c:	f007 fd39 	bl	800a0d2 <HAL_UARTEx_SetTxFifoThreshold>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002666:	f7ff f98b 	bl	8001980 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800266a:	2100      	movs	r1, #0
 800266c:	4808      	ldr	r0, [pc, #32]	; (8002690 <MX_USART1_UART_Init+0x90>)
 800266e:	f007 fd6e 	bl	800a14e <HAL_UARTEx_SetRxFifoThreshold>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002678:	f7ff f982 	bl	8001980 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800267c:	4804      	ldr	r0, [pc, #16]	; (8002690 <MX_USART1_UART_Init+0x90>)
 800267e:	f007 fced 	bl	800a05c <HAL_UARTEx_EnableFifoMode>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002688:	f7ff f97a 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200017fc 	.word	0x200017fc
 8002694:	40013800 	.word	0x40013800

08002698 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b096      	sub	sp, #88	; 0x58
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	2238      	movs	r2, #56	; 0x38
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f018 fc9d 	bl	801aff8 <memset>
  if(uartHandle->Instance==USART1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <HAL_UART_MspInit+0xe8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d156      	bne.n	8002776 <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026c8:	2301      	movs	r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026cc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80026d0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d2:	f107 030c 	add.w	r3, r7, #12
 80026d6:	4618      	mov	r0, r3
 80026d8:	f004 fb52 	bl	8006d80 <HAL_RCCEx_PeriphCLKConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80026e2:	f7ff f94d 	bl	8001980 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026ea:	f7ff ff5f 	bl	80025ac <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	2002      	movs	r0, #2
 80026f0:	f7ff ff44 	bl	800257c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80026f4:	23c0      	movs	r3, #192	; 0xc0
 80026f6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002704:	2307      	movs	r3, #7
 8002706:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002708:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800270c:	4619      	mov	r1, r3
 800270e:	481d      	ldr	r0, [pc, #116]	; (8002784 <HAL_UART_MspInit+0xec>)
 8002710:	f002 f936 	bl	8004980 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_UART_MspInit+0xf0>)
 8002716:	4a1d      	ldr	r2, [pc, #116]	; (800278c <HAL_UART_MspInit+0xf4>)
 8002718:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_UART_MspInit+0xf0>)
 800271c:	2212      	movs	r2, #18
 800271e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_UART_MspInit+0xf0>)
 8002722:	2210      	movs	r2, #16
 8002724:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002726:	4b18      	ldr	r3, [pc, #96]	; (8002788 <HAL_UART_MspInit+0xf0>)
 8002728:	2200      	movs	r2, #0
 800272a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <HAL_UART_MspInit+0xf0>)
 800272e:	2280      	movs	r2, #128	; 0x80
 8002730:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_UART_MspInit+0xf0>)
 8002734:	2200      	movs	r2, #0
 8002736:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_UART_MspInit+0xf0>)
 800273a:	2200      	movs	r2, #0
 800273c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_UART_MspInit+0xf0>)
 8002740:	2200      	movs	r2, #0
 8002742:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002744:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_UART_MspInit+0xf0>)
 8002746:	2200      	movs	r2, #0
 8002748:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800274a:	480f      	ldr	r0, [pc, #60]	; (8002788 <HAL_UART_MspInit+0xf0>)
 800274c:	f001 fd02 	bl	8004154 <HAL_DMA_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002756:	f7ff f913 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <HAL_UART_MspInit+0xf0>)
 800275e:	679a      	str	r2, [r3, #120]	; 0x78
 8002760:	4a09      	ldr	r2, [pc, #36]	; (8002788 <HAL_UART_MspInit+0xf0>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2102      	movs	r1, #2
 800276a:	2024      	movs	r0, #36	; 0x24
 800276c:	f001 fcbb 	bl	80040e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002770:	2024      	movs	r0, #36	; 0x24
 8002772:	f001 fcd2 	bl	800411a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002776:	bf00      	nop
 8002778:	3758      	adds	r7, #88	; 0x58
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40013800 	.word	0x40013800
 8002784:	48000400 	.word	0x48000400
 8002788:	2000179c 	.word	0x2000179c
 800278c:	40020008 	.word	0x40020008

08002790 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <HAL_UART_MspDeInit+0x3c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d10f      	bne.n	80027c2 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80027a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027a6:	f7ff ff19 	bl	80025dc <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80027aa:	21c0      	movs	r1, #192	; 0xc0
 80027ac:	4808      	ldr	r0, [pc, #32]	; (80027d0 <HAL_UART_MspDeInit+0x40>)
 80027ae:	f002 fa47 	bl	8004c40 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 fd74 	bl	80042a4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80027bc:	2024      	movs	r0, #36	; 0x24
 80027be:	f001 fcba 	bl	8004136 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40013800 	.word	0x40013800
 80027d0:	48000400 	.word	0x48000400

080027d4 <LL_APB2_GRP1_ForceReset>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80027dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	640b      	str	r3, [r1, #64]	; 0x40
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <LL_APB2_GRP1_ReleaseReset>:
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80027fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	43db      	mvns	r3, r3
 8002808:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800280c:	4013      	ands	r3, r2
 800280e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
	...

0800281c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <LL_EXTI_EnableIT_0_31+0x24>)
 8002826:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800282a:	4905      	ldr	r1, [pc, #20]	; (8002840 <LL_EXTI_EnableIT_0_31+0x24>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	58000800 	.word	0x58000800

08002844 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800284c:	4a07      	ldr	r2, [pc, #28]	; (800286c <vcom_Init+0x28>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002852:	f7fe ff3b 	bl	80016cc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002856:	f7ff fed3 	bl	8002600 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800285a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800285e:	f7ff ffdd 	bl	800281c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002862:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000160 	.word	0x20000160

08002870 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002874:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002878:	f7ff ffac 	bl	80027d4 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 800287c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002880:	f7ff ffb9 	bl	80027f6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002884:	4804      	ldr	r0, [pc, #16]	; (8002898 <vcom_DeInit+0x28>)
 8002886:	f7ff ff83 	bl	8002790 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800288a:	200f      	movs	r0, #15
 800288c:	f001 fc53 	bl	8004136 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002890:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002892:	4618      	mov	r0, r3
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200017fc 	.word	0x200017fc

0800289c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80028a8:	887b      	ldrh	r3, [r7, #2]
 80028aa:	461a      	mov	r2, r3
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4804      	ldr	r0, [pc, #16]	; (80028c0 <vcom_Trace_DMA+0x24>)
 80028b0:	f005 fc80 	bl	80081b4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80028b4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200017fc 	.word	0x200017fc

080028c4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80028cc:	4a19      	ldr	r2, [pc, #100]	; (8002934 <vcom_ReceiveInit+0x70>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80028d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028d6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80028d8:	f107 0308 	add.w	r3, r7, #8
 80028dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028e0:	4815      	ldr	r0, [pc, #84]	; (8002938 <vcom_ReceiveInit+0x74>)
 80028e2:	f007 fb2e 	bl	8009f42 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80028e6:	bf00      	nop
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <vcom_ReceiveInit+0x74>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f6:	d0f7      	beq.n	80028e8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80028f8:	bf00      	nop
 80028fa:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <vcom_ReceiveInit+0x74>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002908:	d1f7      	bne.n	80028fa <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <vcom_ReceiveInit+0x74>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <vcom_ReceiveInit+0x74>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002918:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800291a:	4807      	ldr	r0, [pc, #28]	; (8002938 <vcom_ReceiveInit+0x74>)
 800291c:	f007 fb6c 	bl	8009ff8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002920:	2201      	movs	r2, #1
 8002922:	4906      	ldr	r1, [pc, #24]	; (800293c <vcom_ReceiveInit+0x78>)
 8002924:	4804      	ldr	r0, [pc, #16]	; (8002938 <vcom_ReceiveInit+0x74>)
 8002926:	f005 fbef 	bl	8008108 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800292a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000164 	.word	0x20000164
 8002938:	200017fc 	.word	0x200017fc
 800293c:	2000188c 	.word	0x2000188c

08002940 <vcom_Resume>:

void vcom_Resume(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002944:	4808      	ldr	r0, [pc, #32]	; (8002968 <vcom_Resume+0x28>)
 8002946:	f005 fb8e 	bl	8008066 <HAL_UART_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002950:	f7ff f816 	bl	8001980 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002954:	4805      	ldr	r0, [pc, #20]	; (800296c <vcom_Resume+0x2c>)
 8002956:	f001 fbfd 	bl	8004154 <HAL_DMA_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002960:	f7ff f80e 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}
 8002968:	200017fc 	.word	0x200017fc
 800296c:	2000179c 	.word	0x2000179c

08002970 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_UART_TxCpltCallback+0x18>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2000      	movs	r0, #0
 800297e:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000160 	.word	0x20000160

0800298c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_UART_RxCpltCallback+0x38>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_UART_RxCpltCallback+0x26>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d105      	bne.n	80029b2 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <HAL_UART_RxCpltCallback+0x38>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	2101      	movs	r1, #1
 80029ae:	4806      	ldr	r0, [pc, #24]	; (80029c8 <HAL_UART_RxCpltCallback+0x3c>)
 80029b0:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 80029b2:	2201      	movs	r2, #1
 80029b4:	4904      	ldr	r1, [pc, #16]	; (80029c8 <HAL_UART_RxCpltCallback+0x3c>)
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f005 fba6 	bl	8008108 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000164 	.word	0x20000164
 80029c8:	2000188c 	.word	0x2000188c

080029cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029cc:	480d      	ldr	r0, [pc, #52]	; (8002a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029d0:	f7ff fba5 	bl	800211e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029d4:	480c      	ldr	r0, [pc, #48]	; (8002a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80029d6:	490d      	ldr	r1, [pc, #52]	; (8002a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80029d8:	4a0d      	ldr	r2, [pc, #52]	; (8002a10 <LoopForever+0xe>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029dc:	e002      	b.n	80029e4 <LoopCopyDataInit>

080029de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029e2:	3304      	adds	r3, #4

080029e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e8:	d3f9      	bcc.n	80029de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029ec:	4c0a      	ldr	r4, [pc, #40]	; (8002a18 <LoopForever+0x16>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f0:	e001      	b.n	80029f6 <LoopFillZerobss>

080029f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f4:	3204      	adds	r2, #4

080029f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f8:	d3fb      	bcc.n	80029f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029fa:	f018 fad9 	bl	801afb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029fe:	f7fe ff58 	bl	80018b2 <main>

08002a02 <LoopForever>:

LoopForever:
    b LoopForever
 8002a02:	e7fe      	b.n	8002a02 <LoopForever>
  ldr   r0, =_estack
 8002a04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a0c:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002a10:	0801c02c 	.word	0x0801c02c
  ldr r2, =_sbss
 8002a14:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8002a18:	20001944 	.word	0x20001944

08002a1c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a1c:	e7fe      	b.n	8002a1c <ADC_IRQHandler>

08002a1e <LL_AHB2_GRP1_EnableClock>:
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a42:	68fb      	ldr	r3, [r7, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
	...

08002a50 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <BSP_LED_Init+0x80>)
 8002a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e024      	b.n	8002ac8 <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f7ff ffcd 	bl	8002a1e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <BSP_LED_Init+0x80>)
 8002a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a8c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a96:	2302      	movs	r3, #2
 8002a98:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ad4 <BSP_LED_Init+0x84>)
 8002a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa2:	f107 020c 	add.w	r2, r7, #12
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 ff69 	bl	8004980 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	4a08      	ldr	r2, [pc, #32]	; (8002ad4 <BSP_LED_Init+0x84>)
 8002ab2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <BSP_LED_Init+0x80>)
 8002aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f002 f98b 	bl	8004ddc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3720      	adds	r7, #32
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	0801bb44 	.word	0x0801bb44
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <BSP_LED_On+0x40>)
 8002ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e00c      	b.n	8002b10 <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <BSP_LED_On+0x44>)
 8002afa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <BSP_LED_On+0x40>)
 8002b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b06:	2200      	movs	r2, #0
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f002 f967 	bl	8004ddc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	0801bb44 	.word	0x0801bb44
 8002b1c:	20000004 	.word	0x20000004

08002b20 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <BSP_LED_Off+0x40>)
 8002b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e00c      	b.n	8002b58 <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <BSP_LED_Off+0x44>)
 8002b42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <BSP_LED_Off+0x40>)
 8002b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4619      	mov	r1, r3
 8002b52:	f002 f943 	bl	8004ddc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	0801bb44 	.word	0x0801bb44
 8002b64:	20000004 	.word	0x20000004

08002b68 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <BSP_LED_Toggle+0x40>)
 8002b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e00c      	b.n	8002ba0 <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	4a08      	ldr	r2, [pc, #32]	; (8002bac <BSP_LED_Toggle+0x44>)
 8002b8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	4905      	ldr	r1, [pc, #20]	; (8002ba8 <BSP_LED_Toggle+0x40>)
 8002b92:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002b96:	4619      	mov	r1, r3
 8002b98:	4610      	mov	r0, r2
 8002b9a:	f002 f936 	bl	8004e0a <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	0801bb44 	.word	0x0801bb44
 8002bac:	20000004 	.word	0x20000004

08002bb0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	460a      	mov	r2, r1
 8002bba:	71fb      	strb	r3, [r7, #7]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	4a30      	ldr	r2, [pc, #192]	; (8002c94 <BSP_PB_Init+0xe4>)
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e055      	b.n	8002c8c <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <BSP_PB_Init+0x3c>
 8002be6:	2002      	movs	r0, #2
 8002be8:	f7ff ff19 	bl	8002a1e <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	4a2a      	ldr	r2, [pc, #168]	; (8002c98 <BSP_PB_Init+0xe8>)
 8002bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bf4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002bfe:	79bb      	ldrb	r3, [r7, #6]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10c      	bne.n	8002c1e <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <BSP_PB_Init+0xec>)
 8002c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c10:	f107 020c 	add.w	r2, r7, #12
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 feb2 	bl	8004980 <HAL_GPIO_Init>
 8002c1c:	e035      	b.n	8002c8a <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002c1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002c22:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <BSP_PB_Init+0xec>)
 8002c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2c:	f107 020c 	add.w	r2, r7, #12
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 fea4 	bl	8004980 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <BSP_PB_Init+0xf0>)
 8002c3e:	441a      	add	r2, r3
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	4918      	ldr	r1, [pc, #96]	; (8002ca4 <BSP_PB_Init+0xf4>)
 8002c44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f001 fe85 	bl	800495a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <BSP_PB_Init+0xf0>)
 8002c56:	1898      	adds	r0, r3, r2
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <BSP_PB_Init+0xe4>)
 8002c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c60:	461a      	mov	r2, r3
 8002c62:	2100      	movs	r1, #0
 8002c64:	f001 fe60 	bl	8004928 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <BSP_PB_Init+0xf8>)
 8002c6c:	56d0      	ldrsb	r0, [r2, r3]
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	4a0e      	ldr	r2, [pc, #56]	; (8002cac <BSP_PB_Init+0xfc>)
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	2200      	movs	r2, #0
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f001 fa34 	bl	80040e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <BSP_PB_Init+0xf8>)
 8002c82:	56d3      	ldrsb	r3, [r2, r3]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 fa48 	bl	800411a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	2000001c 	.word	0x2000001c
 8002c98:	0801bb4c 	.word	0x0801bb4c
 8002c9c:	20000010 	.word	0x20000010
 8002ca0:	20001890 	.word	0x20001890
 8002ca4:	0801bb58 	.word	0x0801bb58
 8002ca8:	0801bb54 	.word	0x0801bb54
 8002cac:	20000028 	.word	0x20000028

08002cb0 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f7ff fff1 	bl	8002cb0 <BSP_PB_Callback>
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002cea:	2301      	movs	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfe:	f001 fe3f 	bl	8004980 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002d02:	2320      	movs	r3, #32
 8002d04:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d0e:	f001 fe37 	bl	8004980 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002d12:	2200      	movs	r2, #0
 8002d14:	2120      	movs	r1, #32
 8002d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1a:	f002 f85f 	bl	8004ddc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2110      	movs	r1, #16
 8002d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d26:	f002 f859 	bl	8004ddc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d83f      	bhi.n	8002dc4 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002d44:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002d5d 	.word	0x08002d5d
 8002d50:	08002d77 	.word	0x08002d77
 8002d54:	08002d91 	.word	0x08002d91
 8002d58:	08002dab 	.word	0x08002dab
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2110      	movs	r1, #16
 8002d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d64:	f002 f83a 	bl	8004ddc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2120      	movs	r1, #32
 8002d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d70:	f002 f834 	bl	8004ddc <HAL_GPIO_WritePin>
      break;      
 8002d74:	e027      	b.n	8002dc6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002d76:	2201      	movs	r2, #1
 8002d78:	2110      	movs	r1, #16
 8002d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d7e:	f002 f82d 	bl	8004ddc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002d82:	2200      	movs	r2, #0
 8002d84:	2120      	movs	r1, #32
 8002d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d8a:	f002 f827 	bl	8004ddc <HAL_GPIO_WritePin>
      break;
 8002d8e:	e01a      	b.n	8002dc6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002d90:	2201      	movs	r2, #1
 8002d92:	2110      	movs	r1, #16
 8002d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d98:	f002 f820 	bl	8004ddc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2120      	movs	r1, #32
 8002da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da4:	f002 f81a 	bl	8004ddc <HAL_GPIO_WritePin>
      break;
 8002da8:	e00d      	b.n	8002dc6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002daa:	2200      	movs	r2, #0
 8002dac:	2110      	movs	r1, #16
 8002dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db2:	f002 f813 	bl	8004ddc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002db6:	2201      	movs	r2, #1
 8002db8:	2120      	movs	r1, #32
 8002dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dbe:	f002 f80d 	bl	8004ddc <HAL_GPIO_WritePin>
      break;
 8002dc2:	e000      	b.n	8002dc6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002dc4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002dd4:	2302      	movs	r3, #2
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002df0:	2301      	movs	r3, #1
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
	...

08002dfc <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4a03      	ldr	r2, [pc, #12]	; (8002e14 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6053      	str	r3, [r2, #4]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	e0042000 	.word	0xe0042000

08002e18 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a03      	ldr	r2, [pc, #12]	; (8002e30 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	6053      	str	r3, [r2, #4]
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	e0042000 	.word	0xe0042000

08002e34 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a03      	ldr	r2, [pc, #12]	; (8002e4c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002e3e:	f043 0302 	orr.w	r3, r3, #2
 8002e42:	6053      	str	r3, [r2, #4]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	e0042000 	.word	0xe0042000

08002e50 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002e54:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a03      	ldr	r2, [pc, #12]	; (8002e68 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002e5a:	f023 0302 	bic.w	r3, r3, #2
 8002e5e:	6053      	str	r3, [r2, #4]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	e0042000 	.word	0xe0042000

08002e6c <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a03      	ldr	r2, [pc, #12]	; (8002e84 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	6053      	str	r3, [r2, #4]
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	e0042000 	.word	0xe0042000

08002e88 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a03      	ldr	r2, [pc, #12]	; (8002ea0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002e92:	f023 0304 	bic.w	r3, r3, #4
 8002e96:	6053      	str	r3, [r2, #4]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	e0042000 	.word	0xe0042000

08002ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eae:	2003      	movs	r0, #3
 8002eb0:	f001 f90e 	bl	80040d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002eb4:	f003 fd82 	bl	80069bc <HAL_RCC_GetHCLKFreq>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <HAL_Init+0x3c>)
 8002ebc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ebe:	200f      	movs	r0, #15
 8002ec0:	f7ff f880 	bl	8001fc4 <HAL_InitTick>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	71fb      	strb	r3, [r7, #7]
 8002ece:	e001      	b.n	8002ed4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ed0:	f7fe fe4d 	bl	8001b6e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000000 	.word	0x20000000

08002ee4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <HAL_SuspendTick+0x18>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a03      	ldr	r2, [pc, #12]	; (8002efc <HAL_SuspendTick+0x18>)
 8002eee:	f023 0302 	bic.w	r3, r3, #2
 8002ef2:	6013      	str	r3, [r2, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	e000e010 	.word	0xe000e010

08002f00 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <HAL_ResumeTick+0x18>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a03      	ldr	r2, [pc, #12]	; (8002f18 <HAL_ResumeTick+0x18>)
 8002f0a:	f043 0302 	orr.w	r3, r3, #2
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	e000e010 	.word	0xe000e010

08002f1c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002f20:	4b02      	ldr	r3, [pc, #8]	; (8002f2c <HAL_GetUIDw0+0x10>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	1fff7590 	.word	0x1fff7590

08002f30 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <HAL_GetUIDw1+0x10>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	1fff7594 	.word	0x1fff7594

08002f44 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002f48:	4b02      	ldr	r3, [pc, #8]	; (8002f54 <HAL_GetUIDw2+0x10>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	1fff7598 	.word	0x1fff7598

08002f58 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002f5c:	f7ff ff4e 	bl	8002dfc <LL_DBGMCU_EnableDBGSleepMode>
}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002f68:	f7ff ff56 	bl	8002e18 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002f74:	f7ff ff5e 	bl	8002e34 <LL_DBGMCU_EnableDBGStopMode>
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002f80:	f7ff ff66 	bl	8002e50 <LL_DBGMCU_DisableDBGStopMode>
}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002f8c:	f7ff ff6e 	bl	8002e6c <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002f90:	bf00      	nop
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002f98:	f7ff ff76 	bl	8002e88 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	601a      	str	r2, [r3, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2107      	movs	r1, #7
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	431a      	orrs	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	210f      	movs	r1, #15
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	401a      	ands	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0e9b      	lsrs	r3, r3, #26
 8003062:	f003 010f 	and.w	r1, r3, #15
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	431a      	orrs	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	629a      	str	r2, [r3, #40]	; 0x28
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80030b8:	43db      	mvns	r3, r3
 80030ba:	401a      	ands	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	43db      	mvns	r3, r3
 80030e0:	401a      	ands	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	0219      	lsls	r1, r3, #8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	400b      	ands	r3, r1
 80030ea:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80030ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030f2:	431a      	orrs	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003112:	f023 0317 	bic.w	r3, r3, #23
 8003116:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003138:	f023 0317 	bic.w	r3, r3, #23
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6093      	str	r3, [r2, #8]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800315e:	d101      	bne.n	8003164 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003180:	f023 0317 	bic.w	r3, r3, #23
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031a6:	f023 0317 	bic.w	r3, r3, #23
 80031aa:	f043 0202 	orr.w	r2, r3, #2
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <LL_ADC_IsEnabled+0x18>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <LL_ADC_IsEnabled+0x1a>
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d101      	bne.n	80031f8 <LL_ADC_IsDisableOngoing+0x18>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <LL_ADC_IsDisableOngoing+0x1a>
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003214:	f023 0317 	bic.w	r3, r3, #23
 8003218:	f043 0204 	orr.w	r2, r3, #4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800323a:	f023 0317 	bic.w	r3, r3, #23
 800323e:	f043 0210 	orr.w	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b04      	cmp	r3, #4
 8003262:	d101      	bne.n	8003268 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003288:	2300      	movs	r3, #0
 800328a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1ae      	b.n	80035f4 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d109      	bne.n	80032b8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7fe f8cf 	bl	8001448 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff44 	bl	800314a <LL_ADC_IsInternalRegulatorEnabled>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d115      	bne.n	80032f4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff18 	bl	8003102 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032d2:	4b9b      	ldr	r3, [pc, #620]	; (8003540 <HAL_ADC_Init+0x2cc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	4a9a      	ldr	r2, [pc, #616]	; (8003544 <HAL_ADC_Init+0x2d0>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	3301      	adds	r3, #1
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032e6:	e002      	b.n	80032ee <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f9      	bne.n	80032e8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff26 	bl	800314a <LL_ADC_IsInternalRegulatorEnabled>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	f043 0210 	orr.w	r2, r3, #16
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	f043 0201 	orr.w	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff93 	bl	8003250 <LL_ADC_REG_IsConversionOngoing>
 800332a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	f040 8154 	bne.w	80035e2 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	f040 8150 	bne.w	80035e2 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800334a:	f043 0202 	orr.w	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff30 	bl	80031bc <LL_ADC_IsEnabled>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d14f      	bne.n	8003402 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f023 0118 	bic.w	r1, r3, #24
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003384:	4313      	orrs	r3, r2
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003392:	2b01      	cmp	r3, #1
 8003394:	d111      	bne.n	80033ba <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80033a2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80033a8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80033ae:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	4b61      	ldr	r3, [pc, #388]	; (8003548 <HAL_ADC_Init+0x2d4>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	6979      	ldr	r1, [r7, #20]
 80033ca:	430b      	orrs	r3, r1
 80033cc:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033d6:	d014      	beq.n	8003402 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e0:	d00f      	beq.n	8003402 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80033e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ea:	d00a      	beq.n	8003402 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80033ec:	4b57      	ldr	r3, [pc, #348]	; (800354c <HAL_ADC_Init+0x2d8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033fc:	4953      	ldr	r1, [pc, #332]	; (800354c <HAL_ADC_Init+0x2d8>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7e1b      	ldrb	r3, [r3, #24]
 8003406:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	7e5b      	ldrb	r3, [r3, #25]
 800340c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800340e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7e9b      	ldrb	r3, [r3, #26]
 8003414:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003416:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800341c:	2a00      	cmp	r2, #0
 800341e:	d002      	beq.n	8003426 <HAL_ADC_Init+0x1b2>
 8003420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003424:	e000      	b.n	8003428 <HAL_ADC_Init+0x1b4>
 8003426:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003428:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800342e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	da04      	bge.n	8003442 <HAL_ADC_Init+0x1ce>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003440:	e001      	b.n	8003446 <HAL_ADC_Init+0x1d2>
 8003442:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8003446:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800344e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003450:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d114      	bne.n	800348c <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7e9b      	ldrb	r3, [r3, #26]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d104      	bne.n	8003474 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	e00b      	b.n	800348c <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	f043 0220 	orr.w	r2, r3, #32
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f043 0201 	orr.w	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	2b00      	cmp	r3, #0
 8003492:	d009      	beq.n	80034a8 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80034a0:	4313      	orrs	r3, r2
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80034b2:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	69b9      	ldr	r1, [r7, #24]
 80034bc:	430b      	orrs	r3, r1
 80034be:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	4b22      	ldr	r3, [pc, #136]	; (8003550 <HAL_ADC_Init+0x2dc>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034dc:	461a      	mov	r2, r3
 80034de:	2100      	movs	r1, #0
 80034e0:	f7ff fd7d 	bl	8002fde <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	461a      	mov	r2, r3
 80034ee:	4919      	ldr	r1, [pc, #100]	; (8003554 <HAL_ADC_Init+0x2e0>)
 80034f0:	f7ff fd75 	bl	8002fde <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d108      	bne.n	800350e <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f062 020f 	orn	r2, r2, #15
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
 800350c:	e044      	b.n	8003598 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003516:	d13f      	bne.n	8003598 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	e00c      	b.n	8003538 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	2b0f      	cmp	r3, #15
 8003530:	d012      	beq.n	8003558 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	3301      	adds	r3, #1
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b07      	cmp	r3, #7
 800353c:	d9ef      	bls.n	800351e <HAL_ADC_Init+0x2aa>
 800353e:	e00c      	b.n	800355a <HAL_ADC_Init+0x2e6>
 8003540:	20000000 	.word	0x20000000
 8003544:	053e2d63 	.word	0x053e2d63
 8003548:	1ffffc02 	.word	0x1ffffc02
 800354c:	40012708 	.word	0x40012708
 8003550:	dffffc02 	.word	0xdffffc02
 8003554:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8003558:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d108      	bne.n	8003572 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f062 020f 	orn	r2, r2, #15
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
 8003570:	e012      	b.n	8003598 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	3b01      	subs	r3, #1
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	f003 031c 	and.w	r3, r3, #28
 8003584:	f06f 020f 	mvn.w	r2, #15
 8003588:	fa02 f103 	lsl.w	r1, r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	4b17      	ldr	r3, [pc, #92]	; (80035fc <HAL_ADC_Init+0x388>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d10b      	bne.n	80035c0 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80035be:	e018      	b.n	80035f2 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	f023 0312 	bic.w	r3, r3, #18
 80035c8:	f043 0210 	orr.w	r2, r3, #16
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80035e0:	e007      	b.n	80035f2 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	f043 0210 	orr.w	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80035f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	833fffe7 	.word	0x833fffe7

08003600 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e06a      	b.n	80036e8 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	f043 0202 	orr.w	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fabe 	bl	8003ba0 <ADC_ConversionStop>
 8003624:	4603      	mov	r3, r0
 8003626:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fb82 	bl	8003d38 <ADC_Disable>
 8003634:	4603      	mov	r3, r0
 8003636:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fd6d 	bl	8003128 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800365c:	f023 0303 	bic.w	r3, r3, #3
 8003660:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f240 329f 	movw	r2, #927	; 0x39f
 800366a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68d9      	ldr	r1, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <HAL_ADC_DeInit+0xf0>)
 8003678:	400b      	ands	r3, r1
 800367a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800368a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0207 	bic.w	r2, r2, #7
 800369a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a1a      	ldr	r2, [r3, #32]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80036aa:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2200      	movs	r2, #0
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <HAL_ADC_DeInit+0xf4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a0d      	ldr	r2, [pc, #52]	; (80036f4 <HAL_ADC_DeInit+0xf4>)
 80036c0:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80036c4:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd fed2 	bl	8001470 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	833e0200 	.word	0x833e0200
 80036f4:	40012708 	.word	0x40012708

080036f8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fda3 	bl	8003250 <LL_ADC_REG_IsConversionOngoing>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d132      	bne.n	8003776 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_ADC_Start+0x26>
 800371a:	2302      	movs	r3, #2
 800371c:	e02e      	b.n	800377c <HAL_ADC_Start+0x84>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa80 	bl	8003c2c <ADC_Enable>
 800372c:	4603      	mov	r3, r0
 800372e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11a      	bne.n	800376c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	221c      	movs	r2, #28
 8003756:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fd4d 	bl	8003204 <LL_ADC_REG_StartConversion>
 800376a:	e006      	b.n	800377a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003774:	e001      	b.n	800377a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003776:	2302      	movs	r3, #2
 8003778:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800377a:	7bfb      	ldrb	r3, [r7, #15]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_ADC_Stop+0x16>
 8003796:	2302      	movs	r3, #2
 8003798:	e022      	b.n	80037e0 <HAL_ADC_Stop+0x5c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f9fc 	bl	8003ba0 <ADC_ConversionStop>
 80037a8:	4603      	mov	r3, r0
 80037aa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d111      	bne.n	80037d6 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fac0 	bl	8003d38 <ADC_Disable>
 80037b8:	4603      	mov	r3, r0
 80037ba:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	f043 0201 	orr.w	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d102      	bne.n	8003800 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80037fa:	2308      	movs	r3, #8
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	e010      	b.n	8003822 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d007      	beq.n	800381e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	f043 0220 	orr.w	r2, r3, #32
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e077      	b.n	800390e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800381e:	2304      	movs	r3, #4
 8003820:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003822:	f7fe fbd9 	bl	8001fd8 <HAL_GetTick>
 8003826:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003828:	e021      	b.n	800386e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d01d      	beq.n	800386e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003832:	f7fe fbd1 	bl	8001fd8 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <HAL_ADC_PollForConversion+0x60>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d112      	bne.n	800386e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e04f      	b.n	800390e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0d6      	beq.n	800382a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fbc4 	bl	800301a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d031      	beq.n	80038fc <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7e9b      	ldrb	r3, [r3, #26]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d12d      	bne.n	80038fc <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d126      	bne.n	80038fc <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fccc 	bl	8003250 <LL_ADC_REG_IsConversionOngoing>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d112      	bne.n	80038e4 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 020c 	bic.w	r2, r2, #12
 80038cc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	659a      	str	r2, [r3, #88]	; 0x58
 80038e2:	e00b      	b.n	80038fc <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	f043 0201 	orr.w	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	7e1b      	ldrb	r3, [r3, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d103      	bne.n	800390c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	220c      	movs	r2, #12
 800390a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
	...

08003930 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x28>
 8003954:	2302      	movs	r3, #2
 8003956:	e110      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x24a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fc73 	bl	8003250 <LL_ADC_REG_IsConversionOngoing>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	f040 80f7 	bne.w	8003b60 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b02      	cmp	r3, #2
 8003978:	f000 80b1 	beq.w	8003ade <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003984:	d004      	beq.n	8003990 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800398a:	4a7e      	ldr	r2, [pc, #504]	; (8003b84 <HAL_ADC_ConfigChannel+0x254>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d108      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f7ff fb70 	bl	8003080 <LL_ADC_REG_SetSequencerChAdd>
 80039a0:	e041      	b.n	8003a26 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	210f      	movs	r1, #15
 80039b0:	fa01 f303 	lsl.w	r3, r1, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	401a      	ands	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0xa0>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	0e9b      	lsrs	r3, r3, #26
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	e011      	b.n	80039f4 <HAL_ADC_ConfigChannel+0xc4>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80039e8:	2320      	movs	r3, #32
 80039ea:	e003      	b.n	80039f4 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	6839      	ldr	r1, [r7, #0]
 80039f6:	6849      	ldr	r1, [r1, #4]
 80039f8:	f001 011f 	and.w	r1, r1, #31
 80039fc:	408b      	lsls	r3, r1
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d808      	bhi.n	8003a26 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	f7ff fb0c 	bl	800303e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6819      	ldr	r1, [r3, #0]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	461a      	mov	r2, r3
 8003a34:	f7ff fb49 	bl	80030ca <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f280 8097 	bge.w	8003b70 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a42:	4851      	ldr	r0, [pc, #324]	; (8003b88 <HAL_ADC_ConfigChannel+0x258>)
 8003a44:	f7ff fabe 	bl	8002fc4 <LL_ADC_GetCommonPathInternalCh>
 8003a48:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4f      	ldr	r2, [pc, #316]	; (8003b8c <HAL_ADC_ConfigChannel+0x25c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d120      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d11b      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a64:	4619      	mov	r1, r3
 8003a66:	4848      	ldr	r0, [pc, #288]	; (8003b88 <HAL_ADC_ConfigChannel+0x258>)
 8003a68:	f7ff fa9a 	bl	8002fa0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a6c:	4b48      	ldr	r3, [pc, #288]	; (8003b90 <HAL_ADC_ConfigChannel+0x260>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	4a48      	ldr	r2, [pc, #288]	; (8003b94 <HAL_ADC_ConfigChannel+0x264>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a86:	e002      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f9      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a94:	e06c      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a3f      	ldr	r2, [pc, #252]	; (8003b98 <HAL_ADC_ConfigChannel+0x268>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d10c      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x18a>
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d107      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4835      	ldr	r0, [pc, #212]	; (8003b88 <HAL_ADC_ConfigChannel+0x258>)
 8003ab4:	f7ff fa74 	bl	8002fa0 <LL_ADC_SetCommonPathInternalCh>
 8003ab8:	e05a      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a37      	ldr	r2, [pc, #220]	; (8003b9c <HAL_ADC_ConfigChannel+0x26c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d155      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d150      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	482c      	ldr	r0, [pc, #176]	; (8003b88 <HAL_ADC_ConfigChannel+0x258>)
 8003ad8:	f7ff fa62 	bl	8002fa0 <LL_ADC_SetCommonPathInternalCh>
 8003adc:	e048      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ae6:	d004      	beq.n	8003af2 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003aec:	4a25      	ldr	r2, [pc, #148]	; (8003b84 <HAL_ADC_ConfigChannel+0x254>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d107      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4619      	mov	r1, r3
 8003afc:	4610      	mov	r0, r2
 8003afe:	f7ff fad1 	bl	80030a4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	da32      	bge.n	8003b70 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b0a:	481f      	ldr	r0, [pc, #124]	; (8003b88 <HAL_ADC_ConfigChannel+0x258>)
 8003b0c:	f7ff fa5a 	bl	8002fc4 <LL_ADC_GetCommonPathInternalCh>
 8003b10:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <HAL_ADC_ConfigChannel+0x25c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d107      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b22:	4619      	mov	r1, r3
 8003b24:	4818      	ldr	r0, [pc, #96]	; (8003b88 <HAL_ADC_ConfigChannel+0x258>)
 8003b26:	f7ff fa3b 	bl	8002fa0 <LL_ADC_SetCommonPathInternalCh>
 8003b2a:	e021      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a19      	ldr	r2, [pc, #100]	; (8003b98 <HAL_ADC_ConfigChannel+0x268>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d107      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4812      	ldr	r0, [pc, #72]	; (8003b88 <HAL_ADC_ConfigChannel+0x258>)
 8003b40:	f7ff fa2e 	bl	8002fa0 <LL_ADC_SetCommonPathInternalCh>
 8003b44:	e014      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a14      	ldr	r2, [pc, #80]	; (8003b9c <HAL_ADC_ConfigChannel+0x26c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10f      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b56:	4619      	mov	r1, r3
 8003b58:	480b      	ldr	r0, [pc, #44]	; (8003b88 <HAL_ADC_ConfigChannel+0x258>)
 8003b5a:	f7ff fa21 	bl	8002fa0 <LL_ADC_SetCommonPathInternalCh>
 8003b5e:	e007      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	80000004 	.word	0x80000004
 8003b88:	40012708 	.word	0x40012708
 8003b8c:	b0001000 	.word	0xb0001000
 8003b90:	20000000 	.word	0x20000000
 8003b94:	053e2d63 	.word	0x053e2d63
 8003b98:	b8004000 	.word	0xb8004000
 8003b9c:	b4002000 	.word	0xb4002000

08003ba0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fb4f 	bl	8003250 <LL_ADC_REG_IsConversionOngoing>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d033      	beq.n	8003c20 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fb0f 	bl	80031e0 <LL_ADC_IsDisableOngoing>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d104      	bne.n	8003bd2 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fb2c 	bl	800322a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bd2:	f7fe fa01 	bl	8001fd8 <HAL_GetTick>
 8003bd6:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003bd8:	e01b      	b.n	8003c12 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003bda:	f7fe f9fd 	bl	8001fd8 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d914      	bls.n	8003c12 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f043 0210 	orr.w	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e007      	b.n	8003c22 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1dc      	bne.n	8003bda <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fabd 	bl	80031bc <LL_ADC_IsEnabled>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d169      	bne.n	8003d1c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <ADC_Enable+0xfc>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	f043 0210 	orr.w	r2, r3, #16
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e055      	b.n	8003d1e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fa7a 	bl	8003170 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c7c:	482b      	ldr	r0, [pc, #172]	; (8003d2c <ADC_Enable+0x100>)
 8003c7e:	f7ff f9a1 	bl	8002fc4 <LL_ADC_GetCommonPathInternalCh>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00f      	beq.n	8003cac <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c8c:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <ADC_Enable+0x104>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <ADC_Enable+0x108>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c9e:	e002      	b.n	8003ca6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1f9      	bne.n	8003ca0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7e5b      	ldrb	r3, [r3, #25]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d033      	beq.n	8003d1c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003cb4:	f7fe f990 	bl	8001fd8 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cba:	e028      	b.n	8003d0e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fa7b 	bl	80031bc <LL_ADC_IsEnabled>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d104      	bne.n	8003cd6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fa4d 	bl	8003170 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cd6:	f7fe f97f 	bl	8001fd8 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d914      	bls.n	8003d0e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d00d      	beq.n	8003d0e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	f043 0210 	orr.w	r2, r3, #16
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	f043 0201 	orr.w	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e007      	b.n	8003d1e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d1cf      	bne.n	8003cbc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	80000017 	.word	0x80000017
 8003d2c:	40012708 	.word	0x40012708
 8003d30:	20000000 	.word	0x20000000
 8003d34:	053e2d63 	.word	0x053e2d63

08003d38 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fa4b 	bl	80031e0 <LL_ADC_IsDisableOngoing>
 8003d4a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fa33 	bl	80031bc <LL_ADC_IsEnabled>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d047      	beq.n	8003dec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d144      	bne.n	8003dec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0305 	and.w	r3, r3, #5
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d10c      	bne.n	8003d8a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fa0e 	bl	8003196 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2203      	movs	r2, #3
 8003d80:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d82:	f7fe f929 	bl	8001fd8 <HAL_GetTick>
 8003d86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d88:	e029      	b.n	8003dde <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8e:	f043 0210 	orr.w	r2, r3, #16
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	f043 0201 	orr.w	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e023      	b.n	8003dee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003da6:	f7fe f917 	bl	8001fd8 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d914      	bls.n	8003dde <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	f043 0210 	orr.w	r2, r3, #16
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	f043 0201 	orr.w	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e007      	b.n	8003dee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1dc      	bne.n	8003da6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <LL_ADC_IsEnabled>:
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <LL_ADC_IsEnabled+0x18>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <LL_ADC_IsEnabled+0x1a>
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <LL_ADC_IsCalibrationOnGoing>:
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e2e:	d101      	bne.n	8003e34 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_ADCEx_Calibration_Start+0x1a>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e068      	b.n	8003f2c <HAL_ADCEx_Calibration_Start+0xec>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff ff68 	bl	8003d38 <ADC_Disable>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ffc0 	bl	8003df6 <LL_ADC_IsEnabled>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d14c      	bne.n	8003f16 <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e84:	f043 0202 	orr.w	r2, r3, #2
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0203 	bic.w	r2, r2, #3
 8003ea6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003eb6:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003eb8:	e014      	b.n	8003ee4 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003ec6:	d30d      	bcc.n	8003ee4 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	f023 0312 	bic.w	r3, r3, #18
 8003ed0:	f043 0210 	orr.w	r2, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e023      	b.n	8003f2c <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff96 	bl	8003e1a <LL_ADC_IsCalibrationOnGoing>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e2      	bne.n	8003eba <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68d9      	ldr	r1, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	f023 0303 	bic.w	r3, r3, #3
 8003f0c:	f043 0201 	orr.w	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	659a      	str	r2, [r3, #88]	; 0x58
 8003f14:	e005      	b.n	8003f22 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	f043 0210 	orr.w	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f44:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <__NVIC_SetPriorityGrouping+0x44>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f50:	4013      	ands	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f66:	4a04      	ldr	r2, [pc, #16]	; (8003f78 <__NVIC_SetPriorityGrouping+0x44>)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	60d3      	str	r3, [r2, #12]
}
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f80:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <__NVIC_GetPriorityGrouping+0x18>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	f003 0307 	and.w	r3, r3, #7
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	db0b      	blt.n	8003fc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	f003 021f 	and.w	r2, r3, #31
 8003fb0:	4906      	ldr	r1, [pc, #24]	; (8003fcc <__NVIC_EnableIRQ+0x34>)
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2001      	movs	r0, #1
 8003fba:	fa00 f202 	lsl.w	r2, r0, r2
 8003fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr
 8003fcc:	e000e100 	.word	0xe000e100

08003fd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	db12      	blt.n	8004008 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	f003 021f 	and.w	r2, r3, #31
 8003fe8:	490a      	ldr	r1, [pc, #40]	; (8004014 <__NVIC_DisableIRQ+0x44>)
 8003fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ff6:	3320      	adds	r3, #32
 8003ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ffc:	f3bf 8f4f 	dsb	sy
}
 8004000:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004002:	f3bf 8f6f 	isb	sy
}
 8004006:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	e000e100 	.word	0xe000e100

08004018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	6039      	str	r1, [r7, #0]
 8004022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004028:	2b00      	cmp	r3, #0
 800402a:	db0a      	blt.n	8004042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	b2da      	uxtb	r2, r3
 8004030:	490c      	ldr	r1, [pc, #48]	; (8004064 <__NVIC_SetPriority+0x4c>)
 8004032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004036:	0112      	lsls	r2, r2, #4
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	440b      	add	r3, r1
 800403c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004040:	e00a      	b.n	8004058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4908      	ldr	r1, [pc, #32]	; (8004068 <__NVIC_SetPriority+0x50>)
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	3b04      	subs	r3, #4
 8004050:	0112      	lsls	r2, r2, #4
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	440b      	add	r3, r1
 8004056:	761a      	strb	r2, [r3, #24]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	e000e100 	.word	0xe000e100
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800406c:	b480      	push	{r7}
 800406e:	b089      	sub	sp, #36	; 0x24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f1c3 0307 	rsb	r3, r3, #7
 8004086:	2b04      	cmp	r3, #4
 8004088:	bf28      	it	cs
 800408a:	2304      	movcs	r3, #4
 800408c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	3304      	adds	r3, #4
 8004092:	2b06      	cmp	r3, #6
 8004094:	d902      	bls.n	800409c <NVIC_EncodePriority+0x30>
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	3b03      	subs	r3, #3
 800409a:	e000      	b.n	800409e <NVIC_EncodePriority+0x32>
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a0:	f04f 32ff 	mov.w	r2, #4294967295
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43da      	mvns	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	401a      	ands	r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040b4:	f04f 31ff 	mov.w	r1, #4294967295
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	fa01 f303 	lsl.w	r3, r1, r3
 80040be:	43d9      	mvns	r1, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c4:	4313      	orrs	r3, r2
         );
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3724      	adds	r7, #36	; 0x24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff2b 	bl	8003f34 <__NVIC_SetPriorityGrouping>
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b086      	sub	sp, #24
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	4603      	mov	r3, r0
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040f4:	f7ff ff42 	bl	8003f7c <__NVIC_GetPriorityGrouping>
 80040f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	6978      	ldr	r0, [r7, #20]
 8004100:	f7ff ffb4 	bl	800406c <NVIC_EncodePriority>
 8004104:	4602      	mov	r2, r0
 8004106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800410a:	4611      	mov	r1, r2
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff ff83 	bl	8004018 <__NVIC_SetPriority>
}
 8004112:	bf00      	nop
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	4603      	mov	r3, r0
 8004122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ff35 	bl	8003f98 <__NVIC_EnableIRQ>
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	4603      	mov	r3, r0
 800413e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff ff43 	bl	8003fd0 <__NVIC_DisableIRQ>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e08e      	b.n	8004284 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_DMA_Init+0x138>)
 800416e:	429a      	cmp	r2, r3
 8004170:	d80f      	bhi.n	8004192 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	4b45      	ldr	r3, [pc, #276]	; (8004290 <HAL_DMA_Init+0x13c>)
 800417a:	4413      	add	r3, r2
 800417c:	4a45      	ldr	r2, [pc, #276]	; (8004294 <HAL_DMA_Init+0x140>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	009a      	lsls	r2, r3, #2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a42      	ldr	r2, [pc, #264]	; (8004298 <HAL_DMA_Init+0x144>)
 800418e:	641a      	str	r2, [r3, #64]	; 0x40
 8004190:	e00e      	b.n	80041b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	4b40      	ldr	r3, [pc, #256]	; (800429c <HAL_DMA_Init+0x148>)
 800419a:	4413      	add	r3, r2
 800419c:	4a3d      	ldr	r2, [pc, #244]	; (8004294 <HAL_DMA_Init+0x140>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	009a      	lsls	r2, r3, #2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a3c      	ldr	r2, [pc, #240]	; (80042a0 <HAL_DMA_Init+0x14c>)
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6819      	ldr	r1, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fb24 	bl	8004850 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004210:	d102      	bne.n	8004218 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004220:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004224:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800422e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d010      	beq.n	800425a <HAL_DMA_Init+0x106>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b04      	cmp	r3, #4
 800423e:	d80c      	bhi.n	800425a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fb4d 	bl	80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	e008      	b.n	800426c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40020407 	.word	0x40020407
 8004290:	bffdfff8 	.word	0xbffdfff8
 8004294:	cccccccd 	.word	0xcccccccd
 8004298:	40020000 	.word	0x40020000
 800429c:	bffdfbf8 	.word	0xbffdfbf8
 80042a0:	40020400 	.word	0x40020400

080042a4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e07b      	b.n	80043ae <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0201 	bic.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	4b3a      	ldr	r3, [pc, #232]	; (80043b8 <HAL_DMA_DeInit+0x114>)
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d80f      	bhi.n	80042f2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	4b38      	ldr	r3, [pc, #224]	; (80043bc <HAL_DMA_DeInit+0x118>)
 80042da:	4413      	add	r3, r2
 80042dc:	4a38      	ldr	r2, [pc, #224]	; (80043c0 <HAL_DMA_DeInit+0x11c>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	091b      	lsrs	r3, r3, #4
 80042e4:	009a      	lsls	r2, r3, #2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a35      	ldr	r2, [pc, #212]	; (80043c4 <HAL_DMA_DeInit+0x120>)
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40
 80042f0:	e00e      	b.n	8004310 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	4b33      	ldr	r3, [pc, #204]	; (80043c8 <HAL_DMA_DeInit+0x124>)
 80042fa:	4413      	add	r3, r2
 80042fc:	4a30      	ldr	r2, [pc, #192]	; (80043c0 <HAL_DMA_DeInit+0x11c>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	009a      	lsls	r2, r3, #2
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2f      	ldr	r2, [pc, #188]	; (80043cc <HAL_DMA_DeInit+0x128>)
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431c:	f003 021c 	and.w	r2, r3, #28
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	2101      	movs	r1, #1
 8004326:	fa01 f202 	lsl.w	r2, r1, r2
 800432a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fa8f 	bl	8004850 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004342:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00f      	beq.n	800436c <HAL_DMA_DeInit+0xc8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b04      	cmp	r3, #4
 8004352:	d80b      	bhi.n	800436c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fac3 	bl	80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800436a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40020407 	.word	0x40020407
 80043bc:	bffdfff8 	.word	0xbffdfff8
 80043c0:	cccccccd 	.word	0xcccccccd
 80043c4:	40020000 	.word	0x40020000
 80043c8:	bffdfbf8 	.word	0xbffdfbf8
 80043cc:	40020400 	.word	0x40020400

080043d0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_DMA_Start_IT+0x20>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e069      	b.n	80044c4 <HAL_DMA_Start_IT+0xf4>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d155      	bne.n	80044b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0201 	bic.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f9d3 	bl	80047d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 020e 	orr.w	r2, r2, #14
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e00f      	b.n	8004468 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0204 	bic.w	r2, r2, #4
 8004456:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 020a 	orr.w	r2, r2, #10
 8004466:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004484:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800449c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0201 	orr.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e008      	b.n	80044c2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2280      	movs	r2, #128	; 0x80
 80044b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e04f      	b.n	800457e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d008      	beq.n	80044fc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2204      	movs	r2, #4
 80044ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e040      	b.n	800457e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 020e 	bic.w	r2, r2, #14
 800450a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	f003 021c 	and.w	r2, r3, #28
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	2101      	movs	r1, #1
 800453a:	fa01 f202 	lsl.w	r2, r1, r2
 800453e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004548:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00c      	beq.n	800456c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004560:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800456a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d005      	beq.n	80045ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2204      	movs	r2, #4
 80045a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
 80045aa:	e047      	b.n	800463c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 020e 	bic.w	r2, r2, #14
 80045ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e0:	f003 021c 	and.w	r2, r3, #28
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	2101      	movs	r1, #1
 80045ea:	fa01 f202 	lsl.w	r2, r1, r2
 80045ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00c      	beq.n	800461c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004610:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800461a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	4798      	blx	r3
    }
  }
  return status;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	f003 031c 	and.w	r3, r3, #28
 8004668:	2204      	movs	r2, #4
 800466a:	409a      	lsls	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d027      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x7c>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d022      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0204 	bic.w	r2, r2, #4
 800469a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a0:	f003 021c 	and.w	r2, r3, #28
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	2104      	movs	r1, #4
 80046aa:	fa01 f202 	lsl.w	r2, r1, r2
 80046ae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8081 	beq.w	80047bc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80046c2:	e07b      	b.n	80047bc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	f003 031c 	and.w	r3, r3, #28
 80046cc:	2202      	movs	r2, #2
 80046ce:	409a      	lsls	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d03d      	beq.n	8004754 <HAL_DMA_IRQHandler+0x10c>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d038      	beq.n	8004754 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 020a 	bic.w	r2, r2, #10
 80046fe:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <HAL_DMA_IRQHandler+0x180>)
 8004710:	429a      	cmp	r2, r3
 8004712:	d909      	bls.n	8004728 <HAL_DMA_IRQHandler+0xe0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004718:	f003 031c 	and.w	r3, r3, #28
 800471c:	4a2b      	ldr	r2, [pc, #172]	; (80047cc <HAL_DMA_IRQHandler+0x184>)
 800471e:	2102      	movs	r1, #2
 8004720:	fa01 f303 	lsl.w	r3, r1, r3
 8004724:	6053      	str	r3, [r2, #4]
 8004726:	e008      	b.n	800473a <HAL_DMA_IRQHandler+0xf2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	f003 031c 	and.w	r3, r3, #28
 8004730:	4a27      	ldr	r2, [pc, #156]	; (80047d0 <HAL_DMA_IRQHandler+0x188>)
 8004732:	2102      	movs	r1, #2
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d038      	beq.n	80047bc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004752:	e033      	b.n	80047bc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	f003 031c 	and.w	r3, r3, #28
 800475c:	2208      	movs	r2, #8
 800475e:	409a      	lsls	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d02a      	beq.n	80047be <HAL_DMA_IRQHandler+0x176>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d025      	beq.n	80047be <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 020e 	bic.w	r2, r2, #14
 8004780:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f003 021c 	and.w	r2, r3, #28
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	2101      	movs	r1, #1
 8004790:	fa01 f202 	lsl.w	r2, r1, r2
 8004794:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
}
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40020080 	.word	0x40020080
 80047cc:	40020400 	.word	0x40020400
 80047d0:	40020000 	.word	0x40020000

080047d4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f003 021c 	and.w	r2, r3, #28
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2101      	movs	r1, #1
 800480c:	fa01 f202 	lsl.w	r2, r1, r2
 8004810:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b10      	cmp	r3, #16
 8004820:	d108      	bne.n	8004834 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004832:	e007      	b.n	8004844 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
	...

08004850 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	4b1c      	ldr	r3, [pc, #112]	; (80048d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d813      	bhi.n	800488c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004870:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	3b08      	subs	r3, #8
 8004880:	4a14      	ldr	r2, [pc, #80]	; (80048d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	e011      	b.n	80048b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004890:	089b      	lsrs	r3, r3, #2
 8004892:	009a      	lsls	r2, r3, #2
 8004894:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004896:	4413      	add	r3, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	3b08      	subs	r3, #8
 80048a4:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	091b      	lsrs	r3, r3, #4
 80048ac:	3307      	adds	r3, #7
 80048ae:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80048b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	2201      	movs	r2, #1
 80048be:	409a      	lsls	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048c4:	bf00      	nop
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40020407 	.word	0x40020407
 80048d4:	cccccccd 	.word	0xcccccccd
 80048d8:	4002081c 	.word	0x4002081c
 80048dc:	40020880 	.word	0x40020880

080048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048f0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	461a      	mov	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a08      	ldr	r2, [pc, #32]	; (8004924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004904:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3b01      	subs	r3, #1
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	2201      	movs	r2, #1
 8004910:	409a      	lsls	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	1000823f 	.word	0x1000823f
 8004924:	40020940 	.word	0x40020940

08004928 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	460b      	mov	r3, r1
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800493a:	7afb      	ldrb	r3, [r7, #11]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	605a      	str	r2, [r3, #4]
      break;
 8004946:	e002      	b.n	800494e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	75fb      	strb	r3, [r7, #23]
      break;
 800494c:	bf00      	nop
  }

  return status;
 800494e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004950:	4618      	mov	r0, r3
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e003      	b.n	8004976 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004974:	2300      	movs	r3, #0
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr

08004980 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800498e:	e140      	b.n	8004c12 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	2101      	movs	r1, #1
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	fa01 f303 	lsl.w	r3, r1, r3
 800499c:	4013      	ands	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8132 	beq.w	8004c0c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d005      	beq.n	80049c0 <HAL_GPIO_Init+0x40>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d130      	bne.n	8004a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	2203      	movs	r2, #3
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	43db      	mvns	r3, r3
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4013      	ands	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049f6:	2201      	movs	r2, #1
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43db      	mvns	r3, r3
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4013      	ands	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	091b      	lsrs	r3, r3, #4
 8004a0c:	f003 0201 	and.w	r2, r3, #1
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d017      	beq.n	8004a5e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	2203      	movs	r2, #3
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4013      	ands	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d123      	bne.n	8004ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	08da      	lsrs	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3208      	adds	r2, #8
 8004a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	220f      	movs	r2, #15
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43db      	mvns	r3, r3
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	08da      	lsrs	r2, r3, #3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3208      	adds	r2, #8
 8004aac:	6939      	ldr	r1, [r7, #16]
 8004aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	2203      	movs	r2, #3
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f003 0203 	and.w	r2, r3, #3
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 808c 	beq.w	8004c0c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004af4:	4a4e      	ldr	r2, [pc, #312]	; (8004c30 <HAL_GPIO_Init+0x2b0>)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	3302      	adds	r3, #2
 8004afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	2207      	movs	r2, #7
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4013      	ands	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b1e:	d00d      	beq.n	8004b3c <HAL_GPIO_Init+0x1bc>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a44      	ldr	r2, [pc, #272]	; (8004c34 <HAL_GPIO_Init+0x2b4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <HAL_GPIO_Init+0x1b8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a43      	ldr	r2, [pc, #268]	; (8004c38 <HAL_GPIO_Init+0x2b8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d101      	bne.n	8004b34 <HAL_GPIO_Init+0x1b4>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e004      	b.n	8004b3e <HAL_GPIO_Init+0x1be>
 8004b34:	2307      	movs	r3, #7
 8004b36:	e002      	b.n	8004b3e <HAL_GPIO_Init+0x1be>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <HAL_GPIO_Init+0x1be>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	f002 0203 	and.w	r2, r2, #3
 8004b44:	0092      	lsls	r2, r2, #2
 8004b46:	4093      	lsls	r3, r2
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b4e:	4938      	ldr	r1, [pc, #224]	; (8004c30 <HAL_GPIO_Init+0x2b0>)
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	3302      	adds	r3, #2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004b5c:	4b37      	ldr	r3, [pc, #220]	; (8004c3c <HAL_GPIO_Init+0x2bc>)
 8004b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b62:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	43db      	mvns	r3, r3
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004b82:	4a2e      	ldr	r2, [pc, #184]	; (8004c3c <HAL_GPIO_Init+0x2bc>)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004b8a:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <HAL_GPIO_Init+0x2bc>)
 8004b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b90:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	43db      	mvns	r3, r3
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004bb0:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <HAL_GPIO_Init+0x2bc>)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bb8:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <HAL_GPIO_Init+0x2bc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bdc:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <HAL_GPIO_Init+0x2bc>)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004be2:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <HAL_GPIO_Init+0x2bc>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	43db      	mvns	r3, r3
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c06:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <HAL_GPIO_Init+0x2bc>)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f47f aeb7 	bne.w	8004990 <HAL_GPIO_Init+0x10>
  }
}
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40010000 	.word	0x40010000
 8004c34:	48000400 	.word	0x48000400
 8004c38:	48000800 	.word	0x48000800
 8004c3c:	58000800 	.word	0x58000800

08004c40 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004c4e:	e0af      	b.n	8004db0 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004c50:	2201      	movs	r2, #1
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 80a2 	beq.w	8004daa <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004c66:	4a59      	ldr	r2, [pc, #356]	; (8004dcc <HAL_GPIO_DeInit+0x18c>)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	089b      	lsrs	r3, r3, #2
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c72:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	2207      	movs	r2, #7
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4013      	ands	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c8e:	d00d      	beq.n	8004cac <HAL_GPIO_DeInit+0x6c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a4f      	ldr	r2, [pc, #316]	; (8004dd0 <HAL_GPIO_DeInit+0x190>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <HAL_GPIO_DeInit+0x68>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a4e      	ldr	r2, [pc, #312]	; (8004dd4 <HAL_GPIO_DeInit+0x194>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d101      	bne.n	8004ca4 <HAL_GPIO_DeInit+0x64>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e004      	b.n	8004cae <HAL_GPIO_DeInit+0x6e>
 8004ca4:	2307      	movs	r3, #7
 8004ca6:	e002      	b.n	8004cae <HAL_GPIO_DeInit+0x6e>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <HAL_GPIO_DeInit+0x6e>
 8004cac:	2300      	movs	r3, #0
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	f002 0203 	and.w	r2, r2, #3
 8004cb4:	0092      	lsls	r2, r2, #2
 8004cb6:	4093      	lsls	r3, r2
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d136      	bne.n	8004d2c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004cbe:	4b46      	ldr	r3, [pc, #280]	; (8004dd8 <HAL_GPIO_DeInit+0x198>)
 8004cc0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	4943      	ldr	r1, [pc, #268]	; (8004dd8 <HAL_GPIO_DeInit+0x198>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004cd0:	4b41      	ldr	r3, [pc, #260]	; (8004dd8 <HAL_GPIO_DeInit+0x198>)
 8004cd2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	493f      	ldr	r1, [pc, #252]	; (8004dd8 <HAL_GPIO_DeInit+0x198>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004ce2:	4b3d      	ldr	r3, [pc, #244]	; (8004dd8 <HAL_GPIO_DeInit+0x198>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	493b      	ldr	r1, [pc, #236]	; (8004dd8 <HAL_GPIO_DeInit+0x198>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004cf0:	4b39      	ldr	r3, [pc, #228]	; (8004dd8 <HAL_GPIO_DeInit+0x198>)
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	4937      	ldr	r1, [pc, #220]	; (8004dd8 <HAL_GPIO_DeInit+0x198>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	2207      	movs	r2, #7
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004d0e:	4a2f      	ldr	r2, [pc, #188]	; (8004dcc <HAL_GPIO_DeInit+0x18c>)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	3302      	adds	r3, #2
 8004d16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	43da      	mvns	r2, r3
 8004d1e:	482b      	ldr	r0, [pc, #172]	; (8004dcc <HAL_GPIO_DeInit+0x18c>)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	400a      	ands	r2, r1
 8004d26:	3302      	adds	r3, #2
 8004d28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	2103      	movs	r1, #3
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	08da      	lsrs	r2, r3, #3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3208      	adds	r2, #8
 8004d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	220f      	movs	r2, #15
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	08d2      	lsrs	r2, r2, #3
 8004d60:	4019      	ands	r1, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3208      	adds	r2, #8
 8004d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	2103      	movs	r1, #3
 8004d74:	fa01 f303 	lsl.w	r3, r1, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	401a      	ands	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	2101      	movs	r1, #1
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	401a      	ands	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	2103      	movs	r1, #3
 8004d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004da2:	43db      	mvns	r3, r3
 8004da4:	401a      	ands	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	3301      	adds	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f47f af49 	bne.w	8004c50 <HAL_GPIO_DeInit+0x10>
  }
}
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40010000 	.word	0x40010000
 8004dd0:	48000400 	.word	0x48000400
 8004dd4:	48000800 	.word	0x48000800
 8004dd8:	58000800 	.word	0x58000800

08004ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	807b      	strh	r3, [r7, #2]
 8004de8:	4613      	mov	r3, r2
 8004dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dec:	787b      	ldrb	r3, [r7, #1]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004df2:	887a      	ldrh	r2, [r7, #2]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004df8:	e002      	b.n	8004e00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	460b      	mov	r3, r1
 8004e14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e1c:	887a      	ldrh	r2, [r7, #2]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4013      	ands	r3, r2
 8004e22:	041a      	lsls	r2, r3, #16
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	43d9      	mvns	r1, r3
 8004e28:	887b      	ldrh	r3, [r7, #2]
 8004e2a:	400b      	ands	r3, r1
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	619a      	str	r2, [r3, #24]
}
 8004e32:	bf00      	nop
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d006      	beq.n	8004e60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e52:	4a05      	ldr	r2, [pc, #20]	; (8004e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f005 fc68 	bl	800a730 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e60:	bf00      	nop
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	58000800 	.word	0x58000800

08004e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e081      	b.n	8004f82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc fc9c 	bl	80017d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2224      	movs	r2, #36	; 0x24
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ebc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ecc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d107      	bne.n	8004ee6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	e006      	b.n	8004ef4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ef2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d104      	bne.n	8004f06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69d9      	ldr	r1, [r3, #28]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1a      	ldr	r2, [r3, #32]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	461a      	mov	r2, r3
 8004f98:	460b      	mov	r3, r1
 8004f9a:	817b      	strh	r3, [r7, #10]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	f040 80da 	bne.w	8005162 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_I2C_Master_Transmit+0x30>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e0d3      	b.n	8005164 <HAL_I2C_Master_Transmit+0x1d8>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fc4:	f7fd f808 	bl	8001fd8 <HAL_GetTick>
 8004fc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2319      	movs	r3, #25
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f9e5 	bl	80053a6 <I2C_WaitOnFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0be      	b.n	8005164 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2221      	movs	r2, #33	; 0x21
 8004fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2210      	movs	r2, #16
 8004ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	893a      	ldrh	r2, [r7, #8]
 8005006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	2bff      	cmp	r3, #255	; 0xff
 8005016:	d90e      	bls.n	8005036 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	22ff      	movs	r2, #255	; 0xff
 800501c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	b2da      	uxtb	r2, r3
 8005024:	8979      	ldrh	r1, [r7, #10]
 8005026:	4b51      	ldr	r3, [pc, #324]	; (800516c <HAL_I2C_Master_Transmit+0x1e0>)
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fb58 	bl	80056e4 <I2C_TransferConfig>
 8005034:	e06c      	b.n	8005110 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005044:	b2da      	uxtb	r2, r3
 8005046:	8979      	ldrh	r1, [r7, #10]
 8005048:	4b48      	ldr	r3, [pc, #288]	; (800516c <HAL_I2C_Master_Transmit+0x1e0>)
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 fb47 	bl	80056e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005056:	e05b      	b.n	8005110 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	6a39      	ldr	r1, [r7, #32]
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f9e2 	bl	8005426 <I2C_WaitOnTXISFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e07b      	b.n	8005164 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	781a      	ldrb	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d034      	beq.n	8005110 <HAL_I2C_Master_Transmit+0x184>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d130      	bne.n	8005110 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	2200      	movs	r2, #0
 80050b6:	2180      	movs	r1, #128	; 0x80
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f974 	bl	80053a6 <I2C_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e04d      	b.n	8005164 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2bff      	cmp	r3, #255	; 0xff
 80050d0:	d90e      	bls.n	80050f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	22ff      	movs	r2, #255	; 0xff
 80050d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	8979      	ldrh	r1, [r7, #10]
 80050e0:	2300      	movs	r3, #0
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fafb 	bl	80056e4 <I2C_TransferConfig>
 80050ee:	e00f      	b.n	8005110 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	8979      	ldrh	r1, [r7, #10]
 8005102:	2300      	movs	r3, #0
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 faea 	bl	80056e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d19e      	bne.n	8005058 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	6a39      	ldr	r1, [r7, #32]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f9c1 	bl	80054a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e01a      	b.n	8005164 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2220      	movs	r2, #32
 8005134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6859      	ldr	r1, [r3, #4]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_I2C_Master_Transmit+0x1e4>)
 8005142:	400b      	ands	r3, r1
 8005144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	e000      	b.n	8005164 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
  }
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	80002000 	.word	0x80002000
 8005170:	fe00e800 	.word	0xfe00e800

08005174 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af02      	add	r7, sp, #8
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	461a      	mov	r2, r3
 8005180:	460b      	mov	r3, r1
 8005182:	817b      	strh	r3, [r7, #10]
 8005184:	4613      	mov	r3, r2
 8005186:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b20      	cmp	r3, #32
 8005192:	f040 80db 	bne.w	800534c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_I2C_Master_Receive+0x30>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e0d4      	b.n	800534e <HAL_I2C_Master_Receive+0x1da>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051ac:	f7fc ff14 	bl	8001fd8 <HAL_GetTick>
 80051b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	2319      	movs	r3, #25
 80051b8:	2201      	movs	r2, #1
 80051ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f8f1 	bl	80053a6 <I2C_WaitOnFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e0bf      	b.n	800534e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2222      	movs	r2, #34	; 0x22
 80051d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2210      	movs	r2, #16
 80051da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	893a      	ldrh	r2, [r7, #8]
 80051ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2bff      	cmp	r3, #255	; 0xff
 80051fe:	d90e      	bls.n	800521e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	22ff      	movs	r2, #255	; 0xff
 8005204:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	b2da      	uxtb	r2, r3
 800520c:	8979      	ldrh	r1, [r7, #10]
 800520e:	4b52      	ldr	r3, [pc, #328]	; (8005358 <HAL_I2C_Master_Receive+0x1e4>)
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fa64 	bl	80056e4 <I2C_TransferConfig>
 800521c:	e06d      	b.n	80052fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522c:	b2da      	uxtb	r2, r3
 800522e:	8979      	ldrh	r1, [r7, #10]
 8005230:	4b49      	ldr	r3, [pc, #292]	; (8005358 <HAL_I2C_Master_Receive+0x1e4>)
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 fa53 	bl	80056e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800523e:	e05c      	b.n	80052fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	6a39      	ldr	r1, [r7, #32]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f96b 	bl	8005520 <I2C_WaitOnRXNEFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e07c      	b.n	800534e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d034      	beq.n	80052fa <HAL_I2C_Master_Receive+0x186>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005294:	2b00      	cmp	r3, #0
 8005296:	d130      	bne.n	80052fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	2200      	movs	r2, #0
 80052a0:	2180      	movs	r1, #128	; 0x80
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f87f 	bl	80053a6 <I2C_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e04d      	b.n	800534e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2bff      	cmp	r3, #255	; 0xff
 80052ba:	d90e      	bls.n	80052da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	22ff      	movs	r2, #255	; 0xff
 80052c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	8979      	ldrh	r1, [r7, #10]
 80052ca:	2300      	movs	r3, #0
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fa06 	bl	80056e4 <I2C_TransferConfig>
 80052d8:	e00f      	b.n	80052fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	8979      	ldrh	r1, [r7, #10]
 80052ec:	2300      	movs	r3, #0
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f9f5 	bl	80056e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d19d      	bne.n	8005240 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	6a39      	ldr	r1, [r7, #32]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f8cc 	bl	80054a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e01a      	b.n	800534e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2220      	movs	r2, #32
 800531e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b0c      	ldr	r3, [pc, #48]	; (800535c <HAL_I2C_Master_Receive+0x1e8>)
 800532c:	400b      	ands	r3, r1
 800532e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e000      	b.n	800534e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800534c:	2302      	movs	r3, #2
  }
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	80002400 	.word	0x80002400
 800535c:	fe00e800 	.word	0xfe00e800

08005360 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b02      	cmp	r3, #2
 8005374:	d103      	bne.n	800537e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2200      	movs	r2, #0
 800537c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d007      	beq.n	800539c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	619a      	str	r2, [r3, #24]
  }
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr

080053a6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	4613      	mov	r3, r2
 80053b4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b6:	e022      	b.n	80053fe <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d01e      	beq.n	80053fe <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c0:	f7fc fe0a 	bl	8001fd8 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d302      	bcc.n	80053d6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d113      	bne.n	80053fe <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e00f      	b.n	800541e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699a      	ldr	r2, [r3, #24]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	bf0c      	ite	eq
 800540e:	2301      	moveq	r3, #1
 8005410:	2300      	movne	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	429a      	cmp	r2, r3
 800541a:	d0cd      	beq.n	80053b8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005432:	e02c      	b.n	800548e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f8dd 	bl	80055f8 <I2C_IsAcknowledgeFailed>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e02a      	b.n	800549e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d01e      	beq.n	800548e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005450:	f7fc fdc2 	bl	8001fd8 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	429a      	cmp	r2, r3
 800545e:	d302      	bcc.n	8005466 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d113      	bne.n	800548e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546a:	f043 0220 	orr.w	r2, r3, #32
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e007      	b.n	800549e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b02      	cmp	r3, #2
 800549a:	d1cb      	bne.n	8005434 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054b2:	e028      	b.n	8005506 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f89d 	bl	80055f8 <I2C_IsAcknowledgeFailed>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e026      	b.n	8005516 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c8:	f7fc fd86 	bl	8001fd8 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d113      	bne.n	8005506 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	f043 0220 	orr.w	r2, r3, #32
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e007      	b.n	8005516 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b20      	cmp	r3, #32
 8005512:	d1cf      	bne.n	80054b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800552c:	e055      	b.n	80055da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f860 	bl	80055f8 <I2C_IsAcknowledgeFailed>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e053      	b.n	80055ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b20      	cmp	r3, #32
 800554e:	d129      	bne.n	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b04      	cmp	r3, #4
 800555c:	d105      	bne.n	800556a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	e03f      	b.n	80055ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2220      	movs	r2, #32
 8005570:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6859      	ldr	r1, [r3, #4]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b1d      	ldr	r3, [pc, #116]	; (80055f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800557e:	400b      	ands	r3, r1
 8005580:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e022      	b.n	80055ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a4:	f7fc fd18 	bl	8001fd8 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d302      	bcc.n	80055ba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	f043 0220 	orr.w	r2, r3, #32
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e007      	b.n	80055ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d1a2      	bne.n	800552e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	fe00e800 	.word	0xfe00e800

080055f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	2b10      	cmp	r3, #16
 8005610:	d161      	bne.n	80056d6 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005620:	d02b      	beq.n	800567a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005630:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005632:	e022      	b.n	800567a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d01e      	beq.n	800567a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563c:	f7fc fccc 	bl	8001fd8 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	d302      	bcc.n	8005652 <I2C_IsAcknowledgeFailed+0x5a>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d113      	bne.n	800567a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005656:	f043 0220 	orr.w	r2, r3, #32
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e02e      	b.n	80056d8 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b20      	cmp	r3, #32
 8005686:	d1d5      	bne.n	8005634 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2210      	movs	r2, #16
 800568e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2220      	movs	r2, #32
 8005696:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7ff fe61 	bl	8005360 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6859      	ldr	r1, [r3, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <I2C_IsAcknowledgeFailed+0xe8>)
 80056aa:	400b      	ands	r3, r1
 80056ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b2:	f043 0204 	orr.w	r2, r3, #4
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	fe00e800 	.word	0xfe00e800

080056e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	607b      	str	r3, [r7, #4]
 80056ee:	460b      	mov	r3, r1
 80056f0:	817b      	strh	r3, [r7, #10]
 80056f2:	4613      	mov	r3, r2
 80056f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	0d5b      	lsrs	r3, r3, #21
 8005700:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <I2C_TransferConfig+0x54>)
 8005706:	430b      	orrs	r3, r1
 8005708:	43db      	mvns	r3, r3
 800570a:	ea02 0103 	and.w	r1, r2, r3
 800570e:	897b      	ldrh	r3, [r7, #10]
 8005710:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005714:	7a7b      	ldrb	r3, [r7, #9]
 8005716:	041b      	lsls	r3, r3, #16
 8005718:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	431a      	orrs	r2, r3
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	431a      	orrs	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr
 8005738:	03ff63ff 	.word	0x03ff63ff

0800573c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b20      	cmp	r3, #32
 8005750:	d138      	bne.n	80057c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800575c:	2302      	movs	r3, #2
 800575e:	e032      	b.n	80057c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2224      	movs	r2, #36	; 0x24
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0201 	bic.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800578e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6819      	ldr	r1, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e000      	b.n	80057c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
  }
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d139      	bne.n	800585a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e033      	b.n	800585c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2224      	movs	r2, #36	; 0x24
 8005800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005822:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0201 	orr.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	e000      	b.n	800585c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800585a:	2302      	movs	r3, #2
  }
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr
	...

08005868 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800586c:	4b04      	ldr	r3, [pc, #16]	; (8005880 <HAL_PWR_EnableBkUpAccess+0x18>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a03      	ldr	r2, [pc, #12]	; (8005880 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005876:	6013      	str	r3, [r2, #0]
}
 8005878:	bf00      	nop
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr
 8005880:	58000400 	.word	0x58000400

08005884 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10c      	bne.n	80058b0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005896:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800589e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a2:	d10d      	bne.n	80058c0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80058a4:	f000 f83c 	bl	8005920 <HAL_PWREx_DisableLowPowerRunMode>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d008      	beq.n	80058c0 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80058ae:	e015      	b.n	80058dc <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <HAL_PWR_EnterSLEEPMode+0x60>)
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80058bc:	f000 f822 	bl	8005904 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80058c0:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	4a08      	ldr	r2, [pc, #32]	; (80058e8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80058c6:	f023 0304 	bic.w	r3, r3, #4
 80058ca:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80058d2:	bf30      	wfi
 80058d4:	e002      	b.n	80058dc <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80058d6:	bf40      	sev
    __WFE();
 80058d8:	bf20      	wfe
    __WFE();
 80058da:	bf20      	wfe
  }
}
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	58000400 	.word	0x58000400
 80058e8:	e000ed00 	.word	0xe000ed00

080058ec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80058f0:	4b03      	ldr	r3, [pc, #12]	; (8005900 <HAL_PWREx_GetVoltageRange+0x14>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr
 8005900:	58000400 	.word	0x58000400

08005904 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005908:	4b04      	ldr	r3, [pc, #16]	; (800591c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a03      	ldr	r2, [pc, #12]	; (800591c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800590e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005912:	6013      	str	r3, [r2, #0]
}
 8005914:	bf00      	nop
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr
 800591c:	58000400 	.word	0x58000400

08005920 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005926:	4b16      	ldr	r3, [pc, #88]	; (8005980 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a15      	ldr	r2, [pc, #84]	; (8005980 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800592c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005930:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005932:	4b14      	ldr	r3, [pc, #80]	; (8005984 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2232      	movs	r2, #50	; 0x32
 8005938:	fb02 f303 	mul.w	r3, r2, r3
 800593c:	4a12      	ldr	r2, [pc, #72]	; (8005988 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	0c9b      	lsrs	r3, r3, #18
 8005944:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005946:	e002      	b.n	800594e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3b01      	subs	r3, #1
 800594c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800594e:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800595a:	d102      	bne.n	8005962 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f2      	bne.n	8005948 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005962:	4b07      	ldr	r3, [pc, #28]	; (8005980 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800596a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596e:	d101      	bne.n	8005974 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e000      	b.n	8005976 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr
 8005980:	58000400 	.word	0x58000400
 8005984:	20000000 	.word	0x20000000
 8005988:	431bde83 	.word	0x431bde83

0800598c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005996:	4b10      	ldr	r3, [pc, #64]	; (80059d8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f023 0307 	bic.w	r3, r3, #7
 800599e:	4a0e      	ldr	r2, [pc, #56]	; (80059d8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80059a0:	f043 0302 	orr.w	r3, r3, #2
 80059a4:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80059a6:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	4a0c      	ldr	r2, [pc, #48]	; (80059dc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80059ac:	f043 0304 	orr.w	r3, r3, #4
 80059b0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80059b8:	bf30      	wfi
 80059ba:	e002      	b.n	80059c2 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80059bc:	bf40      	sev
    __WFE();
 80059be:	bf20      	wfe
    __WFE();
 80059c0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80059c2:	4b06      	ldr	r3, [pc, #24]	; (80059dc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	4a05      	ldr	r2, [pc, #20]	; (80059dc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80059c8:	f023 0304 	bic.w	r3, r3, #4
 80059cc:	6113      	str	r3, [r2, #16]
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr
 80059d8:	58000400 	.word	0x58000400
 80059dc:	e000ed00 	.word	0xe000ed00

080059e0 <LL_PWR_IsEnabledBkUpAccess>:
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80059e4:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f0:	d101      	bne.n	80059f6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr
 8005a00:	58000400 	.word	0x58000400

08005a04 <LL_RCC_HSE_EnableTcxo>:
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a16:	6013      	str	r3, [r2, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr

08005a20 <LL_RCC_HSE_DisableTcxo>:
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a32:	6013      	str	r3, [r2, #0]
}
 8005a34:	bf00      	nop
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr

08005a3c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a4e:	d101      	bne.n	8005a54 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr

08005a5e <LL_RCC_HSE_Enable>:
{
 8005a5e:	b480      	push	{r7}
 8005a60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a70:	6013      	str	r3, [r2, #0]
}
 8005a72:	bf00      	nop
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr

08005a7a <LL_RCC_HSE_Disable>:
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8c:	6013      	str	r3, [r2, #0]
}
 8005a8e:	bf00      	nop
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr

08005a96 <LL_RCC_HSE_IsReady>:
{
 8005a96:	b480      	push	{r7}
 8005a98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aa8:	d101      	bne.n	8005aae <LL_RCC_HSE_IsReady+0x18>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <LL_RCC_HSE_IsReady+0x1a>
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <LL_RCC_HSI_Enable>:
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aca:	6013      	str	r3, [r2, #0]
}
 8005acc:	bf00      	nop
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <LL_RCC_HSI_Disable>:
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae6:	6013      	str	r3, [r2, #0]
}
 8005ae8:	bf00      	nop
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr

08005af0 <LL_RCC_HSI_IsReady>:
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b02:	d101      	bne.n	8005b08 <LL_RCC_HSI_IsReady+0x18>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <LL_RCC_HSI_IsReady+0x1a>
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	061b      	lsls	r3, r3, #24
 8005b28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	604b      	str	r3, [r1, #4]
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr

08005b3a <LL_RCC_LSE_IsReady>:
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d101      	bne.n	8005b52 <LL_RCC_LSE_IsReady+0x18>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <LL_RCC_LSE_IsReady+0x1a>
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr

08005b5c <LL_RCC_LSI_Enable>:
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b6c:	f043 0301 	orr.w	r3, r3, #1
 8005b70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <LL_RCC_LSI_Disable>:
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b8c:	f023 0301 	bic.w	r3, r3, #1
 8005b90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <LL_RCC_LSI_IsReady>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d101      	bne.n	8005bb4 <LL_RCC_LSI_IsReady+0x18>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <LL_RCC_LSI_IsReady+0x1a>
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <LL_RCC_MSI_Enable>:
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6013      	str	r3, [r2, #0]
}
 8005bd2:	bf00      	nop
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <LL_RCC_MSI_Disable>:
{
 8005bda:	b480      	push	{r7}
 8005bdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	6013      	str	r3, [r2, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr

08005bf6 <LL_RCC_MSI_IsReady>:
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d101      	bne.n	8005c0c <LL_RCC_MSI_IsReady+0x16>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <LL_RCC_MSI_IsReady+0x18>
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr

08005c16 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005c16:	b480      	push	{r7}
 8005c18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d101      	bne.n	8005c2c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e000      	b.n	8005c2e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr

08005c36 <LL_RCC_MSI_GetRange>:
{
 8005c36:	b480      	push	{r7}
 8005c38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr

08005c4c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr

08005c64 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	604b      	str	r3, [r1, #4]
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <LL_RCC_SetSysClkSource>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f023 0203 	bic.w	r2, r3, #3
 8005c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	608b      	str	r3, [r1, #8]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr

08005cb2 <LL_RCC_GetSysClkSource>:
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 030c 	and.w	r3, r3, #12
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <LL_RCC_SetAHBPrescaler>:
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	608b      	str	r3, [r1, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <LL_RCC_SetAHB3Prescaler>:
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005cfe:	f023 020f 	bic.w	r2, r3, #15
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	091b      	lsrs	r3, r3, #4
 8005d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bc80      	pop	{r7}
 8005d18:	4770      	bx	lr

08005d1a <LL_RCC_SetAPB1Prescaler>:
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	608b      	str	r3, [r1, #8]
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr

08005d40 <LL_RCC_SetAPB2Prescaler>:
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	608b      	str	r3, [r1, #8]
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr

08005d66 <LL_RCC_GetAHBPrescaler>:
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr

08005d7c <LL_RCC_GetAHB3Prescaler>:
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d88:	011b      	lsls	r3, r3, #4
 8005d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bc80      	pop	{r7}
 8005d94:	4770      	bx	lr

08005d96 <LL_RCC_GetAPB1Prescaler>:
{
 8005d96:	b480      	push	{r7}
 8005d98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr

08005dac <LL_RCC_GetAPB2Prescaler>:
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bc80      	pop	{r7}
 8005dc0:	4770      	bx	lr

08005dc2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dd4:	6013      	str	r3, [r2, #0]
}
 8005dd6:	bf00      	nop
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr

08005dde <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005dde:	b480      	push	{r7}
 8005de0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005df0:	6013      	str	r3, [r2, #0]
}
 8005df2:	bf00      	nop
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr

08005dfa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e0c:	d101      	bne.n	8005e12 <LL_RCC_PLL_IsReady+0x18>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <LL_RCC_PLL_IsReady+0x1a>
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	0a1b      	lsrs	r3, r3, #8
 8005e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr

08005e34 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr

08005e4a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr

08005e60 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0303 	and.w	r3, r3, #3
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bc80      	pop	{r7}
 8005e74:	4770      	bx	lr

08005e76 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005e76:	b480      	push	{r7}
 8005e78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e88:	d101      	bne.n	8005e8e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eac:	d101      	bne.n	8005eb2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr

08005ebc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ece:	d101      	bne.n	8005ed4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e000      	b.n	8005ed6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr

08005ede <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ef0:	d101      	bne.n	8005ef6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bc80      	pop	{r7}
 8005efe:	4770      	bx	lr

08005f00 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e38a      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f12:	f7ff fece 	bl	8005cb2 <LL_RCC_GetSysClkSource>
 8005f16:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f18:	f7ff ffa2 	bl	8005e60 <LL_RCC_PLL_GetMainSource>
 8005f1c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 80c9 	beq.w	80060be <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <HAL_RCC_OscConfig+0x3e>
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	2b0c      	cmp	r3, #12
 8005f36:	d17b      	bne.n	8006030 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d178      	bne.n	8006030 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f3e:	f7ff fe5a 	bl	8005bf6 <LL_RCC_MSI_IsReady>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_RCC_OscConfig+0x54>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e369      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d005      	beq.n	8005f72 <HAL_RCC_OscConfig+0x72>
 8005f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f70:	e006      	b.n	8005f80 <HAL_RCC_OscConfig+0x80>
 8005f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d222      	bcs.n	8005fca <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fd4f 	bl	8006a2c <RCC_SetFlashLatencyFromMSIRange>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e347      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fa2:	f043 0308 	orr.w	r3, r3, #8
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff fe4e 	bl	8005c64 <LL_RCC_MSI_SetCalibTrimming>
 8005fc8:	e021      	b.n	800600e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fd4:	f043 0308 	orr.w	r3, r3, #8
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fec:	4313      	orrs	r3, r2
 8005fee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff fe35 	bl	8005c64 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fd14 	bl	8006a2c <RCC_SetFlashLatencyFromMSIRange>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e30c      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800600e:	f000 fcd5 	bl	80069bc <HAL_RCC_GetHCLKFreq>
 8006012:	4603      	mov	r3, r0
 8006014:	4ab4      	ldr	r2, [pc, #720]	; (80062e8 <HAL_RCC_OscConfig+0x3e8>)
 8006016:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006018:	4bb4      	ldr	r3, [pc, #720]	; (80062ec <HAL_RCC_OscConfig+0x3ec>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f7fb ffd1 	bl	8001fc4 <HAL_InitTick>
 8006022:	4603      	mov	r3, r0
 8006024:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006026:	7cfb      	ldrb	r3, [r7, #19]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d047      	beq.n	80060bc <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800602c:	7cfb      	ldrb	r3, [r7, #19]
 800602e:	e2fb      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d02c      	beq.n	8006092 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006038:	f7ff fdc1 	bl	8005bbe <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800603c:	f7fb ffcc 	bl	8001fd8 <HAL_GetTick>
 8006040:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006044:	f7fb ffc8 	bl	8001fd8 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e2e8      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006056:	f7ff fdce 	bl	8005bf6 <LL_RCC_MSI_IsReady>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0f1      	beq.n	8006044 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800606a:	f043 0308 	orr.w	r3, r3, #8
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006082:	4313      	orrs	r3, r2
 8006084:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff fdea 	bl	8005c64 <LL_RCC_MSI_SetCalibTrimming>
 8006090:	e015      	b.n	80060be <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006092:	f7ff fda2 	bl	8005bda <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006096:	f7fb ff9f 	bl	8001fd8 <HAL_GetTick>
 800609a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800609e:	f7fb ff9b 	bl	8001fd8 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e2bb      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80060b0:	f7ff fda1 	bl	8005bf6 <LL_RCC_MSI_IsReady>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1f1      	bne.n	800609e <HAL_RCC_OscConfig+0x19e>
 80060ba:	e000      	b.n	80060be <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060bc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d05f      	beq.n	800618a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d005      	beq.n	80060dc <HAL_RCC_OscConfig+0x1dc>
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2b0c      	cmp	r3, #12
 80060d4:	d10d      	bne.n	80060f2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d10a      	bne.n	80060f2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060dc:	f7ff fcdb 	bl	8005a96 <LL_RCC_HSE_IsReady>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d050      	beq.n	8006188 <HAL_RCC_OscConfig+0x288>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d14c      	bne.n	8006188 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e29a      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80060f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006104:	4313      	orrs	r3, r2
 8006106:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006110:	d102      	bne.n	8006118 <HAL_RCC_OscConfig+0x218>
 8006112:	f7ff fca4 	bl	8005a5e <LL_RCC_HSE_Enable>
 8006116:	e00d      	b.n	8006134 <HAL_RCC_OscConfig+0x234>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006120:	d104      	bne.n	800612c <HAL_RCC_OscConfig+0x22c>
 8006122:	f7ff fc6f 	bl	8005a04 <LL_RCC_HSE_EnableTcxo>
 8006126:	f7ff fc9a 	bl	8005a5e <LL_RCC_HSE_Enable>
 800612a:	e003      	b.n	8006134 <HAL_RCC_OscConfig+0x234>
 800612c:	f7ff fca5 	bl	8005a7a <LL_RCC_HSE_Disable>
 8006130:	f7ff fc76 	bl	8005a20 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d012      	beq.n	8006162 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613c:	f7fb ff4c 	bl	8001fd8 <HAL_GetTick>
 8006140:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006144:	f7fb ff48 	bl	8001fd8 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b64      	cmp	r3, #100	; 0x64
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e268      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006156:	f7ff fc9e 	bl	8005a96 <LL_RCC_HSE_IsReady>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0f1      	beq.n	8006144 <HAL_RCC_OscConfig+0x244>
 8006160:	e013      	b.n	800618a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006162:	f7fb ff39 	bl	8001fd8 <HAL_GetTick>
 8006166:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800616a:	f7fb ff35 	bl	8001fd8 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b64      	cmp	r3, #100	; 0x64
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e255      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 800617c:	f7ff fc8b 	bl	8005a96 <LL_RCC_HSE_IsReady>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f1      	bne.n	800616a <HAL_RCC_OscConfig+0x26a>
 8006186:	e000      	b.n	800618a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006188:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d04b      	beq.n	800622e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	2b04      	cmp	r3, #4
 800619a:	d005      	beq.n	80061a8 <HAL_RCC_OscConfig+0x2a8>
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	2b0c      	cmp	r3, #12
 80061a0:	d113      	bne.n	80061ca <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d110      	bne.n	80061ca <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061a8:	f7ff fca2 	bl	8005af0 <LL_RCC_HSI_IsReady>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_RCC_OscConfig+0x2be>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e234      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff fca5 	bl	8005b12 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061c8:	e031      	b.n	800622e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d019      	beq.n	8006206 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061d2:	f7ff fc71 	bl	8005ab8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d6:	f7fb feff 	bl	8001fd8 <HAL_GetTick>
 80061da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061de:	f7fb fefb 	bl	8001fd8 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e21b      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 80061f0:	f7ff fc7e 	bl	8005af0 <LL_RCC_HSI_IsReady>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0f1      	beq.n	80061de <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff fc87 	bl	8005b12 <LL_RCC_HSI_SetCalibTrimming>
 8006204:	e013      	b.n	800622e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006206:	f7ff fc65 	bl	8005ad4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620a:	f7fb fee5 	bl	8001fd8 <HAL_GetTick>
 800620e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006210:	e008      	b.n	8006224 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006212:	f7fb fee1 	bl	8001fd8 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d901      	bls.n	8006224 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e201      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006224:	f7ff fc64 	bl	8005af0 <LL_RCC_HSI_IsReady>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1f1      	bne.n	8006212 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d06e      	beq.n	8006318 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d056      	beq.n	80062f0 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8006242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800624a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	429a      	cmp	r2, r3
 8006258:	d031      	beq.n	80062be <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d006      	beq.n	8006272 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e1da      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d013      	beq.n	80062a4 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 800627c:	f7ff fc7e 	bl	8005b7c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006280:	f7fb feaa 	bl	8001fd8 <HAL_GetTick>
 8006284:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006288:	f7fb fea6 	bl	8001fd8 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b11      	cmp	r3, #17
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e1c6      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 800629a:	f7ff fc7f 	bl	8005b9c <LL_RCC_LSI_IsReady>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1f1      	bne.n	8006288 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80062a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ac:	f023 0210 	bic.w	r2, r3, #16
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062be:	f7ff fc4d 	bl	8005b5c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c2:	f7fb fe89 	bl	8001fd8 <HAL_GetTick>
 80062c6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80062c8:	e008      	b.n	80062dc <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062ca:	f7fb fe85 	bl	8001fd8 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b11      	cmp	r3, #17
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e1a5      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80062dc:	f7ff fc5e 	bl	8005b9c <LL_RCC_LSI_IsReady>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f1      	beq.n	80062ca <HAL_RCC_OscConfig+0x3ca>
 80062e6:	e017      	b.n	8006318 <HAL_RCC_OscConfig+0x418>
 80062e8:	20000000 	.word	0x20000000
 80062ec:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062f0:	f7ff fc44 	bl	8005b7c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f4:	f7fb fe70 	bl	8001fd8 <HAL_GetTick>
 80062f8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062fc:	f7fb fe6c 	bl	8001fd8 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b11      	cmp	r3, #17
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e18c      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 800630e:	f7ff fc45 	bl	8005b9c <LL_RCC_LSI_IsReady>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1f1      	bne.n	80062fc <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 80d8 	beq.w	80064d6 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006326:	f7ff fb5b 	bl	80059e0 <LL_PWR_IsEnabledBkUpAccess>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d113      	bne.n	8006358 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006330:	f7ff fa9a 	bl	8005868 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006334:	f7fb fe50 	bl	8001fd8 <HAL_GetTick>
 8006338:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800633c:	f7fb fe4c 	bl	8001fd8 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e16c      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800634e:	f7ff fb47 	bl	80059e0 <LL_PWR_IsEnabledBkUpAccess>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0f1      	beq.n	800633c <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d07b      	beq.n	8006458 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b85      	cmp	r3, #133	; 0x85
 8006366:	d003      	beq.n	8006370 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b05      	cmp	r3, #5
 800636e:	d109      	bne.n	8006384 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800637c:	f043 0304 	orr.w	r3, r3, #4
 8006380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006384:	f7fb fe28 	bl	8001fd8 <HAL_GetTick>
 8006388:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800638a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800639e:	e00a      	b.n	80063b6 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a0:	f7fb fe1a 	bl	8001fd8 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e138      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80063b6:	f7ff fbc0 	bl	8005b3a <LL_RCC_LSE_IsReady>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0ef      	beq.n	80063a0 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	2b81      	cmp	r3, #129	; 0x81
 80063c6:	d003      	beq.n	80063d0 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	2b85      	cmp	r3, #133	; 0x85
 80063ce:	d121      	bne.n	8006414 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d0:	f7fb fe02 	bl	8001fd8 <HAL_GetTick>
 80063d4:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80063d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80063ea:	e00a      	b.n	8006402 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ec:	f7fb fdf4 	bl	8001fd8 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e112      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0ec      	beq.n	80063ec <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006412:	e060      	b.n	80064d6 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fb fde0 	bl	8001fd8 <HAL_GetTick>
 8006418:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800641a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800642a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800642e:	e00a      	b.n	8006446 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006430:	f7fb fdd2 	bl	8001fd8 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	f241 3288 	movw	r2, #5000	; 0x1388
 800643e:	4293      	cmp	r3, r2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e0f0      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1ec      	bne.n	8006430 <HAL_RCC_OscConfig+0x530>
 8006456:	e03e      	b.n	80064d6 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006458:	f7fb fdbe 	bl	8001fd8 <HAL_GetTick>
 800645c:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800645e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800646a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800646e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006472:	e00a      	b.n	800648a <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006474:	f7fb fdb0 	bl	8001fd8 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006482:	4293      	cmp	r3, r2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e0ce      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800648a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1ec      	bne.n	8006474 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800649a:	f7fb fd9d 	bl	8001fd8 <HAL_GetTick>
 800649e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80064b4:	e00a      	b.n	80064cc <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b6:	f7fb fd8f 	bl	8001fd8 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e0ad      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80064cc:	f7ff fb35 	bl	8005b3a <LL_RCC_LSE_IsReady>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1ef      	bne.n	80064b6 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 80a3 	beq.w	8006626 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	2b0c      	cmp	r3, #12
 80064e4:	d076      	beq.n	80065d4 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d14b      	bne.n	8006586 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ee:	f7ff fc76 	bl	8005dde <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f2:	f7fb fd71 	bl	8001fd8 <HAL_GetTick>
 80064f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064fa:	f7fb fd6d 	bl	8001fd8 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b0a      	cmp	r3, #10
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e08d      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 800650c:	f7ff fc75 	bl	8005dfa <LL_RCC_PLL_IsReady>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f1      	bne.n	80064fa <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	4b44      	ldr	r3, [pc, #272]	; (8006630 <HAL_RCC_OscConfig+0x730>)
 800651e:	4013      	ands	r3, r2
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006528:	4311      	orrs	r1, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800652e:	0212      	lsls	r2, r2, #8
 8006530:	4311      	orrs	r1, r2
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006536:	4311      	orrs	r1, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800653c:	4311      	orrs	r1, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006542:	430a      	orrs	r2, r1
 8006544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006548:	4313      	orrs	r3, r2
 800654a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800654c:	f7ff fc39 	bl	8005dc2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800655a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800655e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006560:	f7fb fd3a 	bl	8001fd8 <HAL_GetTick>
 8006564:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006568:	f7fb fd36 	bl	8001fd8 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b0a      	cmp	r3, #10
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e056      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 800657a:	f7ff fc3e 	bl	8005dfa <LL_RCC_PLL_IsReady>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0f1      	beq.n	8006568 <HAL_RCC_OscConfig+0x668>
 8006584:	e04f      	b.n	8006626 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006586:	f7ff fc2a 	bl	8005dde <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800658a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006594:	f023 0303 	bic.w	r3, r3, #3
 8006598:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800659a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065a4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80065a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ac:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ae:	f7fb fd13 	bl	8001fd8 <HAL_GetTick>
 80065b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80065b4:	e008      	b.n	80065c8 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065b6:	f7fb fd0f 	bl	8001fd8 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b0a      	cmp	r3, #10
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e02f      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80065c8:	f7ff fc17 	bl	8005dfa <LL_RCC_PLL_IsReady>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f1      	bne.n	80065b6 <HAL_RCC_OscConfig+0x6b6>
 80065d2:	e028      	b.n	8006626 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e023      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f003 0203 	and.w	r2, r3, #3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d115      	bne.n	8006622 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	429a      	cmp	r2, r3
 8006602:	d10e      	bne.n	8006622 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	429a      	cmp	r2, r3
 8006612:	d106      	bne.n	8006622 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	429a      	cmp	r2, r3
 8006620:	d001      	beq.n	8006626 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e000      	b.n	8006628 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3720      	adds	r7, #32
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	11c1808c 	.word	0x11c1808c

08006634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e10f      	b.n	8006868 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006648:	4b89      	ldr	r3, [pc, #548]	; (8006870 <HAL_RCC_ClockConfig+0x23c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d91b      	bls.n	800668e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006656:	4b86      	ldr	r3, [pc, #536]	; (8006870 <HAL_RCC_ClockConfig+0x23c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f023 0207 	bic.w	r2, r3, #7
 800665e:	4984      	ldr	r1, [pc, #528]	; (8006870 <HAL_RCC_ClockConfig+0x23c>)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	4313      	orrs	r3, r2
 8006664:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006666:	f7fb fcb7 	bl	8001fd8 <HAL_GetTick>
 800666a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800666c:	e008      	b.n	8006680 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800666e:	f7fb fcb3 	bl	8001fd8 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e0f3      	b.n	8006868 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006680:	4b7b      	ldr	r3, [pc, #492]	; (8006870 <HAL_RCC_ClockConfig+0x23c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d1ef      	bne.n	800666e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d016      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff fb12 	bl	8005cc8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066a4:	f7fb fc98 	bl	8001fd8 <HAL_GetTick>
 80066a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80066aa:	e008      	b.n	80066be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066ac:	f7fb fc94 	bl	8001fd8 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e0d4      	b.n	8006868 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80066be:	f7ff fbda 	bl	8005e76 <LL_RCC_IsActiveFlag_HPRE>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0f1      	beq.n	80066ac <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d016      	beq.n	8006702 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff fb08 	bl	8005cee <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066de:	f7fb fc7b 	bl	8001fd8 <HAL_GetTick>
 80066e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80066e4:	e008      	b.n	80066f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066e6:	f7fb fc77 	bl	8001fd8 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e0b7      	b.n	8006868 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80066f8:	f7ff fbce 	bl	8005e98 <LL_RCC_IsActiveFlag_SHDHPRE>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0f1      	beq.n	80066e6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	d016      	beq.n	800673c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff fb01 	bl	8005d1a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006718:	f7fb fc5e 	bl	8001fd8 <HAL_GetTick>
 800671c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800671e:	e008      	b.n	8006732 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006720:	f7fb fc5a 	bl	8001fd8 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e09a      	b.n	8006868 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006732:	f7ff fbc3 	bl	8005ebc <LL_RCC_IsActiveFlag_PPRE1>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0f1      	beq.n	8006720 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d017      	beq.n	8006778 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff faf6 	bl	8005d40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006754:	f7fb fc40 	bl	8001fd8 <HAL_GetTick>
 8006758:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800675a:	e008      	b.n	800676e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800675c:	f7fb fc3c 	bl	8001fd8 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e07c      	b.n	8006868 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800676e:	f7ff fbb6 	bl	8005ede <LL_RCC_IsActiveFlag_PPRE2>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0f1      	beq.n	800675c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d043      	beq.n	800680c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d106      	bne.n	800679a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800678c:	f7ff f983 	bl	8005a96 <LL_RCC_HSE_IsReady>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d11e      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e066      	b.n	8006868 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d106      	bne.n	80067b0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80067a2:	f7ff fb2a 	bl	8005dfa <LL_RCC_PLL_IsReady>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d113      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e05b      	b.n	8006868 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80067b8:	f7ff fa1d 	bl	8005bf6 <LL_RCC_MSI_IsReady>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d108      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e050      	b.n	8006868 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80067c6:	f7ff f993 	bl	8005af0 <LL_RCC_HSI_IsReady>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e049      	b.n	8006868 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff fa57 	bl	8005c8c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067de:	f7fb fbfb 	bl	8001fd8 <HAL_GetTick>
 80067e2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e4:	e00a      	b.n	80067fc <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e6:	f7fb fbf7 	bl	8001fd8 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e035      	b.n	8006868 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fc:	f7ff fa59 	bl	8005cb2 <LL_RCC_GetSysClkSource>
 8006800:	4602      	mov	r2, r0
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	429a      	cmp	r2, r3
 800680a:	d1ec      	bne.n	80067e6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800680c:	4b18      	ldr	r3, [pc, #96]	; (8006870 <HAL_RCC_ClockConfig+0x23c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d21b      	bcs.n	8006852 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681a:	4b15      	ldr	r3, [pc, #84]	; (8006870 <HAL_RCC_ClockConfig+0x23c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f023 0207 	bic.w	r2, r3, #7
 8006822:	4913      	ldr	r1, [pc, #76]	; (8006870 <HAL_RCC_ClockConfig+0x23c>)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	4313      	orrs	r3, r2
 8006828:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800682a:	f7fb fbd5 	bl	8001fd8 <HAL_GetTick>
 800682e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006830:	e008      	b.n	8006844 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006832:	f7fb fbd1 	bl	8001fd8 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e011      	b.n	8006868 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006844:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <HAL_RCC_ClockConfig+0x23c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d1ef      	bne.n	8006832 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006852:	f000 f8b3 	bl	80069bc <HAL_RCC_GetHCLKFreq>
 8006856:	4603      	mov	r3, r0
 8006858:	4a06      	ldr	r2, [pc, #24]	; (8006874 <HAL_RCC_ClockConfig+0x240>)
 800685a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800685c:	4b06      	ldr	r3, [pc, #24]	; (8006878 <HAL_RCC_ClockConfig+0x244>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f7fb fbaf 	bl	8001fc4 <HAL_InitTick>
 8006866:	4603      	mov	r3, r0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	58004000 	.word	0x58004000
 8006874:	20000000 	.word	0x20000000
 8006878:	20000034 	.word	0x20000034

0800687c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800687c:	b590      	push	{r4, r7, lr}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800688a:	f7ff fa12 	bl	8005cb2 <LL_RCC_GetSysClkSource>
 800688e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006890:	f7ff fae6 	bl	8005e60 <LL_RCC_PLL_GetMainSource>
 8006894:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <HAL_RCC_GetSysClockFreq+0x2c>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b0c      	cmp	r3, #12
 80068a0:	d139      	bne.n	8006916 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d136      	bne.n	8006916 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80068a8:	f7ff f9b5 	bl	8005c16 <LL_RCC_MSI_IsEnabledRangeSelect>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d115      	bne.n	80068de <HAL_RCC_GetSysClockFreq+0x62>
 80068b2:	f7ff f9b0 	bl	8005c16 <LL_RCC_MSI_IsEnabledRangeSelect>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d106      	bne.n	80068ca <HAL_RCC_GetSysClockFreq+0x4e>
 80068bc:	f7ff f9bb 	bl	8005c36 <LL_RCC_MSI_GetRange>
 80068c0:	4603      	mov	r3, r0
 80068c2:	0a1b      	lsrs	r3, r3, #8
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	e005      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x5a>
 80068ca:	f7ff f9bf 	bl	8005c4c <LL_RCC_MSI_GetRangeAfterStandby>
 80068ce:	4603      	mov	r3, r0
 80068d0:	0a1b      	lsrs	r3, r3, #8
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	4a36      	ldr	r2, [pc, #216]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x134>)
 80068d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068dc:	e014      	b.n	8006908 <HAL_RCC_GetSysClockFreq+0x8c>
 80068de:	f7ff f99a 	bl	8005c16 <LL_RCC_MSI_IsEnabledRangeSelect>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d106      	bne.n	80068f6 <HAL_RCC_GetSysClockFreq+0x7a>
 80068e8:	f7ff f9a5 	bl	8005c36 <LL_RCC_MSI_GetRange>
 80068ec:	4603      	mov	r3, r0
 80068ee:	091b      	lsrs	r3, r3, #4
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	e005      	b.n	8006902 <HAL_RCC_GetSysClockFreq+0x86>
 80068f6:	f7ff f9a9 	bl	8005c4c <LL_RCC_MSI_GetRangeAfterStandby>
 80068fa:	4603      	mov	r3, r0
 80068fc:	091b      	lsrs	r3, r3, #4
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	4a2b      	ldr	r2, [pc, #172]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x134>)
 8006904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006908:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d115      	bne.n	800693c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006914:	e012      	b.n	800693c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b04      	cmp	r3, #4
 800691a:	d102      	bne.n	8006922 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800691c:	4b25      	ldr	r3, [pc, #148]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	e00c      	b.n	800693c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d109      	bne.n	800693c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006928:	f7ff f888 	bl	8005a3c <LL_RCC_HSE_IsEnabledDiv2>
 800692c:	4603      	mov	r3, r0
 800692e:	2b01      	cmp	r3, #1
 8006930:	d102      	bne.n	8006938 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006932:	4b20      	ldr	r3, [pc, #128]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x138>)
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	e001      	b.n	800693c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006938:	4b1f      	ldr	r3, [pc, #124]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800693a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800693c:	f7ff f9b9 	bl	8005cb2 <LL_RCC_GetSysClkSource>
 8006940:	4603      	mov	r3, r0
 8006942:	2b0c      	cmp	r3, #12
 8006944:	d12f      	bne.n	80069a6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006946:	f7ff fa8b 	bl	8005e60 <LL_RCC_PLL_GetMainSource>
 800694a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d003      	beq.n	800695a <HAL_RCC_GetSysClockFreq+0xde>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b03      	cmp	r3, #3
 8006956:	d003      	beq.n	8006960 <HAL_RCC_GetSysClockFreq+0xe4>
 8006958:	e00d      	b.n	8006976 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800695a:	4b16      	ldr	r3, [pc, #88]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800695c:	60fb      	str	r3, [r7, #12]
        break;
 800695e:	e00d      	b.n	800697c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006960:	f7ff f86c 	bl	8005a3c <LL_RCC_HSE_IsEnabledDiv2>
 8006964:	4603      	mov	r3, r0
 8006966:	2b01      	cmp	r3, #1
 8006968:	d102      	bne.n	8006970 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800696a:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800696c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800696e:	e005      	b.n	800697c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006970:	4b11      	ldr	r3, [pc, #68]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006972:	60fb      	str	r3, [r7, #12]
        break;
 8006974:	e002      	b.n	800697c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	60fb      	str	r3, [r7, #12]
        break;
 800697a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800697c:	f7ff fa4e 	bl	8005e1c <LL_RCC_PLL_GetN>
 8006980:	4602      	mov	r2, r0
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	fb03 f402 	mul.w	r4, r3, r2
 8006988:	f7ff fa5f 	bl	8005e4a <LL_RCC_PLL_GetDivider>
 800698c:	4603      	mov	r3, r0
 800698e:	091b      	lsrs	r3, r3, #4
 8006990:	3301      	adds	r3, #1
 8006992:	fbb4 f4f3 	udiv	r4, r4, r3
 8006996:	f7ff fa4d 	bl	8005e34 <LL_RCC_PLL_GetR>
 800699a:	4603      	mov	r3, r0
 800699c:	0f5b      	lsrs	r3, r3, #29
 800699e:	3301      	adds	r3, #1
 80069a0:	fbb4 f3f3 	udiv	r3, r4, r3
 80069a4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80069a6:	697b      	ldr	r3, [r7, #20]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd90      	pop	{r4, r7, pc}
 80069b0:	0801bab4 	.word	0x0801bab4
 80069b4:	00f42400 	.word	0x00f42400
 80069b8:	01e84800 	.word	0x01e84800

080069bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069bc:	b598      	push	{r3, r4, r7, lr}
 80069be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80069c0:	f7ff ff5c 	bl	800687c <HAL_RCC_GetSysClockFreq>
 80069c4:	4604      	mov	r4, r0
 80069c6:	f7ff f9ce 	bl	8005d66 <LL_RCC_GetAHBPrescaler>
 80069ca:	4603      	mov	r3, r0
 80069cc:	091b      	lsrs	r3, r3, #4
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	4a03      	ldr	r2, [pc, #12]	; (80069e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80069d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80069dc:	4618      	mov	r0, r3
 80069de:	bd98      	pop	{r3, r4, r7, pc}
 80069e0:	0801ba54 	.word	0x0801ba54

080069e4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069e4:	b598      	push	{r3, r4, r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80069e8:	f7ff ffe8 	bl	80069bc <HAL_RCC_GetHCLKFreq>
 80069ec:	4604      	mov	r4, r0
 80069ee:	f7ff f9d2 	bl	8005d96 <LL_RCC_GetAPB1Prescaler>
 80069f2:	4603      	mov	r3, r0
 80069f4:	0a1b      	lsrs	r3, r3, #8
 80069f6:	4a03      	ldr	r2, [pc, #12]	; (8006a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	bd98      	pop	{r3, r4, r7, pc}
 8006a04:	0801ba94 	.word	0x0801ba94

08006a08 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a08:	b598      	push	{r3, r4, r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006a0c:	f7ff ffd6 	bl	80069bc <HAL_RCC_GetHCLKFreq>
 8006a10:	4604      	mov	r4, r0
 8006a12:	f7ff f9cb 	bl	8005dac <LL_RCC_GetAPB2Prescaler>
 8006a16:	4603      	mov	r3, r0
 8006a18:	0adb      	lsrs	r3, r3, #11
 8006a1a:	4a03      	ldr	r2, [pc, #12]	; (8006a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a20:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	bd98      	pop	{r3, r4, r7, pc}
 8006a28:	0801ba94 	.word	0x0801ba94

08006a2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006a2c:	b590      	push	{r4, r7, lr}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	091b      	lsrs	r3, r3, #4
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	4a10      	ldr	r2, [pc, #64]	; (8006a80 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a42:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006a44:	f7ff f99a 	bl	8005d7c <LL_RCC_GetAHB3Prescaler>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	091b      	lsrs	r3, r3, #4
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	4a0c      	ldr	r2, [pc, #48]	; (8006a84 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	4a09      	ldr	r2, [pc, #36]	; (8006a88 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	0c9c      	lsrs	r4, r3, #18
 8006a68:	f7fe ff40 	bl	80058ec <HAL_PWREx_GetVoltageRange>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	4619      	mov	r1, r3
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 f80b 	bl	8006a8c <RCC_SetFlashLatency>
 8006a76:	4603      	mov	r3, r0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd90      	pop	{r4, r7, pc}
 8006a80:	0801bab4 	.word	0x0801bab4
 8006a84:	0801ba54 	.word	0x0801ba54
 8006a88:	431bde83 	.word	0x431bde83

08006a8c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08e      	sub	sp, #56	; 0x38
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006a96:	4a3c      	ldr	r2, [pc, #240]	; (8006b88 <RCC_SetFlashLatency+0xfc>)
 8006a98:	f107 0320 	add.w	r3, r7, #32
 8006a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006aa0:	6018      	str	r0, [r3, #0]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006aa6:	4a39      	ldr	r2, [pc, #228]	; (8006b8c <RCC_SetFlashLatency+0x100>)
 8006aa8:	f107 0318 	add.w	r3, r7, #24
 8006aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ab0:	6018      	str	r0, [r3, #0]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006ab6:	4a36      	ldr	r2, [pc, #216]	; (8006b90 <RCC_SetFlashLatency+0x104>)
 8006ab8:	f107 030c 	add.w	r3, r7, #12
 8006abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8006abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006acc:	d11d      	bne.n	8006b0a <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006ace:	2300      	movs	r3, #0
 8006ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ad2:	e016      	b.n	8006b02 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006adc:	4413      	add	r3, r2
 8006ade:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d808      	bhi.n	8006afc <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006af2:	4413      	add	r3, r2
 8006af4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006af8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006afa:	e023      	b.n	8006b44 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	3301      	adds	r3, #1
 8006b00:	633b      	str	r3, [r7, #48]	; 0x30
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d9e5      	bls.n	8006ad4 <RCC_SetFlashLatency+0x48>
 8006b08:	e01c      	b.n	8006b44 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b0e:	e016      	b.n	8006b3e <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006b18:	4413      	add	r3, r2
 8006b1a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d808      	bhi.n	8006b38 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006b2e:	4413      	add	r3, r2
 8006b30:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b36:	e005      	b.n	8006b44 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d9e5      	bls.n	8006b10 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006b44:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <RCC_SetFlashLatency+0x108>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f023 0207 	bic.w	r2, r3, #7
 8006b4c:	4911      	ldr	r1, [pc, #68]	; (8006b94 <RCC_SetFlashLatency+0x108>)
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b50:	4313      	orrs	r3, r2
 8006b52:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b54:	f7fb fa40 	bl	8001fd8 <HAL_GetTick>
 8006b58:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006b5a:	e008      	b.n	8006b6e <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006b5c:	f7fb fa3c 	bl	8001fd8 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e007      	b.n	8006b7e <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006b6e:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <RCC_SetFlashLatency+0x108>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d1ef      	bne.n	8006b5c <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3738      	adds	r7, #56	; 0x38
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	0801b2bc 	.word	0x0801b2bc
 8006b8c:	0801b2c4 	.word	0x0801b2c4
 8006b90:	0801b2cc 	.word	0x0801b2cc
 8006b94:	58004000 	.word	0x58004000

08006b98 <LL_RCC_LSE_IsReady>:
{
 8006b98:	b480      	push	{r7}
 8006b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d101      	bne.n	8006bb0 <LL_RCC_LSE_IsReady+0x18>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <LL_RCC_LSE_IsReady+0x1a>
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr

08006bba <LL_RCC_SetUSARTClockSource>:
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	0c1b      	lsrs	r3, r3, #16
 8006bce:	43db      	mvns	r3, r3
 8006bd0:	401a      	ands	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr

08006bea <LL_RCC_SetI2SClockSource>:
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr

08006c14 <LL_RCC_SetLPUARTClockSource>:
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr

08006c3e <LL_RCC_SetI2CClockSource>:
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006c56:	43db      	mvns	r3, r3
 8006c58:	401a      	ands	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c66:	4313      	orrs	r3, r2
 8006c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bc80      	pop	{r7}
 8006c74:	4770      	bx	lr

08006c76 <LL_RCC_SetLPTIMClockSource>:
{
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	0c1b      	lsrs	r3, r3, #16
 8006c8a:	041b      	lsls	r3, r3, #16
 8006c8c:	43db      	mvns	r3, r3
 8006c8e:	401a      	ands	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	041b      	lsls	r3, r3, #16
 8006c94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr

08006ca8 <LL_RCC_SetRNGClockSource>:
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr

08006cd2 <LL_RCC_SetADCClockSource>:
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <LL_RCC_SetRTCClockSource>:
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr

08006d26 <LL_RCC_GetRTCClockSource>:
{
 8006d26:	b480      	push	{r7}
 8006d28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bc80      	pop	{r7}
 8006d3c:	4770      	bx	lr

08006d3e <LL_RCC_ForceBackupDomainReset>:
{
 8006d3e:	b480      	push	{r7}
 8006d40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006d56:	bf00      	nop
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr

08006d5e <LL_RCC_ReleaseBackupDomainReset>:
{
 8006d5e:	b480      	push	{r7}
 8006d60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006d76:	bf00      	nop
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr
	...

08006d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006d90:	2300      	movs	r3, #0
 8006d92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d058      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006da0:	f7fe fd62 	bl	8005868 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006da4:	f7fb f918 	bl	8001fd8 <HAL_GetTick>
 8006da8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006daa:	e009      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dac:	f7fb f914 	bl	8001fd8 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d902      	bls.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	74fb      	strb	r3, [r7, #19]
        break;
 8006dbe:	e006      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006dc0:	4b7b      	ldr	r3, [pc, #492]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dcc:	d1ee      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006dce:	7cfb      	ldrb	r3, [r7, #19]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d13c      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006dd4:	f7ff ffa7 	bl	8006d26 <LL_RCC_GetRTCClockSource>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d00f      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dee:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006df0:	f7ff ffa5 	bl	8006d3e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006df4:	f7ff ffb3 	bl	8006d5e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006df8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d014      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fb f8e4 	bl	8001fd8 <HAL_GetTick>
 8006e10:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006e12:	e00b      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e14:	f7fb f8e0 	bl	8001fd8 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d902      	bls.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	74fb      	strb	r3, [r7, #19]
            break;
 8006e2a:	e004      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006e2c:	f7ff feb4 	bl	8006b98 <LL_RCC_LSE_IsReady>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d1ee      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006e36:	7cfb      	ldrb	r3, [r7, #19]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d105      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ff5b 	bl	8006cfc <LL_RCC_SetRTCClockSource>
 8006e46:	e004      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e48:	7cfb      	ldrb	r3, [r7, #19]
 8006e4a:	74bb      	strb	r3, [r7, #18]
 8006e4c:	e001      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4e:	7cfb      	ldrb	r3, [r7, #19]
 8006e50:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d004      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7ff fea9 	bl	8006bba <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d004      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7ff fe9e 	bl	8006bba <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff fec0 	bl	8006c14 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d004      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7ff fee6 	bl	8006c76 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d004      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff fedb 	bl	8006c76 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff fed0 	bl	8006c76 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff fea9 	bl	8006c3e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff fe9e 	bl	8006c3e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff fe93 	bl	8006c3e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0310 	and.w	r3, r3, #16
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d011      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fe5e 	bl	8006bea <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f36:	d107      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d010      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff fea5 	bl	8006ca8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d107      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f74:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d011      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff fea3 	bl	8006cd2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f94:	d107      	bne.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006fa6:	7cbb      	ldrb	r3, [r7, #18]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	58000400 	.word	0x58000400

08006fb4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d068      	beq.n	8007098 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fa fd50 	bl	8001a80 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fe8:	4b2e      	ldr	r3, [pc, #184]	; (80070a4 <HAL_RTC_Init+0xf0>)
 8006fea:	22ca      	movs	r2, #202	; 0xca
 8006fec:	625a      	str	r2, [r3, #36]	; 0x24
 8006fee:	4b2d      	ldr	r3, [pc, #180]	; (80070a4 <HAL_RTC_Init+0xf0>)
 8006ff0:	2253      	movs	r2, #83	; 0x53
 8006ff2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fa0f 	bl	8007418 <RTC_EnterInitMode>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d13f      	bne.n	8007084 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007004:	4b27      	ldr	r3, [pc, #156]	; (80070a4 <HAL_RTC_Init+0xf0>)
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	4a26      	ldr	r2, [pc, #152]	; (80070a4 <HAL_RTC_Init+0xf0>)
 800700a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800700e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007012:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007014:	4b23      	ldr	r3, [pc, #140]	; (80070a4 <HAL_RTC_Init+0xf0>)
 8007016:	699a      	ldr	r2, [r3, #24]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6859      	ldr	r1, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	4319      	orrs	r1, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	430b      	orrs	r3, r1
 8007028:	491e      	ldr	r1, [pc, #120]	; (80070a4 <HAL_RTC_Init+0xf0>)
 800702a:	4313      	orrs	r3, r2
 800702c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	041b      	lsls	r3, r3, #16
 8007038:	491a      	ldr	r1, [pc, #104]	; (80070a4 <HAL_RTC_Init+0xf0>)
 800703a:	4313      	orrs	r3, r2
 800703c:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800703e:	4b19      	ldr	r3, [pc, #100]	; (80070a4 <HAL_RTC_Init+0xf0>)
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704e:	430b      	orrs	r3, r1
 8007050:	4914      	ldr	r1, [pc, #80]	; (80070a4 <HAL_RTC_Init+0xf0>)
 8007052:	4313      	orrs	r3, r2
 8007054:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fa12 	bl	8007480 <RTC_ExitInitMode>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10e      	bne.n	8007084 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8007066:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <HAL_RTC_Init+0xf0>)
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a19      	ldr	r1, [r3, #32]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	4319      	orrs	r1, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	430b      	orrs	r3, r1
 800707e:	4909      	ldr	r1, [pc, #36]	; (80070a4 <HAL_RTC_Init+0xf0>)
 8007080:	4313      	orrs	r3, r2
 8007082:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007084:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <HAL_RTC_Init+0xf0>)
 8007086:	22ff      	movs	r2, #255	; 0xff
 8007088:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d103      	bne.n	8007098 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40002800 	.word	0x40002800

080070a8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80070a8:	b590      	push	{r4, r7, lr}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_RTC_SetAlarm_IT+0x1e>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e0f3      	b.n	80072ae <HAL_RTC_SetAlarm_IT+0x206>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2202      	movs	r2, #2
 80070d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80070d6:	4b78      	ldr	r3, [pc, #480]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070de:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e6:	d06a      	beq.n	80071be <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d13a      	bne.n	8007164 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80070ee:	4b72      	ldr	r3, [pc, #456]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d102      	bne.n	8007100 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2200      	movs	r2, #0
 80070fe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f000 f9f5 	bl	80074fc <RTC_ByteToBcd2>
 8007112:	4603      	mov	r3, r0
 8007114:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	785b      	ldrb	r3, [r3, #1]
 800711a:	4618      	mov	r0, r3
 800711c:	f000 f9ee 	bl	80074fc <RTC_ByteToBcd2>
 8007120:	4603      	mov	r3, r0
 8007122:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007124:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	789b      	ldrb	r3, [r3, #2]
 800712a:	4618      	mov	r0, r3
 800712c:	f000 f9e6 	bl	80074fc <RTC_ByteToBcd2>
 8007130:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007132:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	78db      	ldrb	r3, [r3, #3]
 800713a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800713c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f9d8 	bl	80074fc <RTC_ByteToBcd2>
 800714c:	4603      	mov	r3, r0
 800714e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007150:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007158:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800715e:	4313      	orrs	r3, r2
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	e02c      	b.n	80071be <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800716c:	d00d      	beq.n	800718a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007176:	d008      	beq.n	800718a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007178:	4b4f      	ldr	r3, [pc, #316]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d102      	bne.n	800718a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007196:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800719c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	78db      	ldrb	r3, [r3, #3]
 80071a2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80071a4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071ac:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80071ae:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80071b4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071be:	4b3e      	ldr	r3, [pc, #248]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 80071c0:	22ca      	movs	r2, #202	; 0xca
 80071c2:	625a      	str	r2, [r3, #36]	; 0x24
 80071c4:	4b3c      	ldr	r3, [pc, #240]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 80071c6:	2253      	movs	r2, #83	; 0x53
 80071c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d2:	d12c      	bne.n	800722e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80071d4:	4b38      	ldr	r3, [pc, #224]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	4a37      	ldr	r2, [pc, #220]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 80071da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80071de:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80071e0:	4b35      	ldr	r3, [pc, #212]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 80071e2:	2201      	movs	r2, #1
 80071e4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ec:	d107      	bne.n	80071fe <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	699a      	ldr	r2, [r3, #24]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	4930      	ldr	r1, [pc, #192]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	644b      	str	r3, [r1, #68]	; 0x44
 80071fc:	e006      	b.n	800720c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80071fe:	4a2e      	ldr	r2, [pc, #184]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007204:	4a2c      	ldr	r2, [pc, #176]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800720c:	4a2a      	ldr	r2, [pc, #168]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	f043 0201 	orr.w	r2, r3, #1
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007220:	4b25      	ldr	r3, [pc, #148]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	4a24      	ldr	r2, [pc, #144]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007226:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800722a:	6193      	str	r3, [r2, #24]
 800722c:	e02b      	b.n	8007286 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800722e:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	4a21      	ldr	r2, [pc, #132]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007234:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8007238:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800723a:	4b1f      	ldr	r3, [pc, #124]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 800723c:	2202      	movs	r2, #2
 800723e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007246:	d107      	bne.n	8007258 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	699a      	ldr	r2, [r3, #24]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	4919      	ldr	r1, [pc, #100]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007252:	4313      	orrs	r3, r2
 8007254:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007256:	e006      	b.n	8007266 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007258:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800725e:	4a16      	ldr	r2, [pc, #88]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007266:	4a14      	ldr	r2, [pc, #80]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	f043 0202 	orr.w	r2, r3, #2
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800727a:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	4a0e      	ldr	r2, [pc, #56]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007280:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8007284:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007286:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <HAL_RTC_SetAlarm_IT+0x214>)
 8007288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800728c:	4a0b      	ldr	r2, [pc, #44]	; (80072bc <HAL_RTC_SetAlarm_IT+0x214>)
 800728e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007292:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <HAL_RTC_SetAlarm_IT+0x210>)
 8007298:	22ff      	movs	r2, #255	; 0xff
 800729a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd90      	pop	{r4, r7, pc}
 80072b6:	bf00      	nop
 80072b8:	40002800 	.word	0x40002800
 80072bc:	58000800 	.word	0x58000800

080072c0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_RTC_DeactivateAlarm+0x18>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e048      	b.n	800736a <HAL_RTC_DeactivateAlarm+0xaa>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072e8:	4b22      	ldr	r3, [pc, #136]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 80072ea:	22ca      	movs	r2, #202	; 0xca
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24
 80072ee:	4b21      	ldr	r3, [pc, #132]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 80072f0:	2253      	movs	r2, #83	; 0x53
 80072f2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fa:	d115      	bne.n	8007328 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80072fc:	4b1d      	ldr	r3, [pc, #116]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	4a1c      	ldr	r2, [pc, #112]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007302:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007306:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007308:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 800730a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730c:	4a19      	ldr	r2, [pc, #100]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 800730e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007312:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007318:	f023 0201 	bic.w	r2, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007320:	4b14      	ldr	r3, [pc, #80]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007322:	2201      	movs	r2, #1
 8007324:	65da      	str	r2, [r3, #92]	; 0x5c
 8007326:	e014      	b.n	8007352 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007328:	4b12      	ldr	r3, [pc, #72]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	4a11      	ldr	r2, [pc, #68]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 800732e:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8007332:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007334:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007338:	4a0e      	ldr	r2, [pc, #56]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 800733a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800733e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	f023 0202 	bic.w	r2, r3, #2
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800734c:	4b09      	ldr	r3, [pc, #36]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 800734e:	2202      	movs	r2, #2
 8007350:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007352:	4b08      	ldr	r3, [pc, #32]	; (8007374 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007354:	22ff      	movs	r2, #255	; 0xff
 8007356:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr
 8007374:	40002800 	.word	0x40002800

08007378 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007380:	4b11      	ldr	r3, [pc, #68]	; (80073c8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007382:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	4013      	ands	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007396:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007398:	2201      	movs	r2, #1
 800739a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7fb f819 	bl	80023d4 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d005      	beq.n	80073b8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80073ae:	2202      	movs	r2, #2
 80073b0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f94a 	bl	800764c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80073c0:	bf00      	nop
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	40002800 	.word	0x40002800

080073cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80073d4:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <HAL_RTC_WaitForSynchro+0x48>)
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	4a0e      	ldr	r2, [pc, #56]	; (8007414 <HAL_RTC_WaitForSynchro+0x48>)
 80073da:	f023 0320 	bic.w	r3, r3, #32
 80073de:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80073e0:	f7fa fdfa 	bl	8001fd8 <HAL_GetTick>
 80073e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80073e6:	e009      	b.n	80073fc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073e8:	f7fa fdf6 	bl	8001fd8 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073f6:	d901      	bls.n	80073fc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e006      	b.n	800740a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <HAL_RTC_WaitForSynchro+0x48>)
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f003 0320 	and.w	r3, r3, #32
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0ef      	beq.n	80073e8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40002800 	.word	0x40002800

08007418 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007424:	4b15      	ldr	r3, [pc, #84]	; (800747c <RTC_EnterInitMode+0x64>)
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742c:	2b00      	cmp	r3, #0
 800742e:	d120      	bne.n	8007472 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007430:	4b12      	ldr	r3, [pc, #72]	; (800747c <RTC_EnterInitMode+0x64>)
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	4a11      	ldr	r2, [pc, #68]	; (800747c <RTC_EnterInitMode+0x64>)
 8007436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800743a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800743c:	f7fa fdcc 	bl	8001fd8 <HAL_GetTick>
 8007440:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007442:	e00d      	b.n	8007460 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007444:	f7fa fdc8 	bl	8001fd8 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007452:	d905      	bls.n	8007460 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2203      	movs	r2, #3
 800745c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007460:	4b06      	ldr	r3, [pc, #24]	; (800747c <RTC_EnterInitMode+0x64>)
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <RTC_EnterInitMode+0x5a>
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	2b03      	cmp	r3, #3
 8007470:	d1e8      	bne.n	8007444 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	40002800 	.word	0x40002800

08007480 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800748c:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <RTC_ExitInitMode+0x78>)
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	4a19      	ldr	r2, [pc, #100]	; (80074f8 <RTC_ExitInitMode+0x78>)
 8007492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007496:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007498:	4b17      	ldr	r3, [pc, #92]	; (80074f8 <RTC_ExitInitMode+0x78>)
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10c      	bne.n	80074be <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff ff91 	bl	80073cc <HAL_RTC_WaitForSynchro>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d01e      	beq.n	80074ee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2203      	movs	r2, #3
 80074b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	73fb      	strb	r3, [r7, #15]
 80074bc:	e017      	b.n	80074ee <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80074be:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <RTC_ExitInitMode+0x78>)
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	4a0d      	ldr	r2, [pc, #52]	; (80074f8 <RTC_ExitInitMode+0x78>)
 80074c4:	f023 0320 	bic.w	r3, r3, #32
 80074c8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff ff7e 	bl	80073cc <HAL_RTC_WaitForSynchro>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2203      	movs	r2, #3
 80074da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80074e2:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <RTC_ExitInitMode+0x78>)
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	4a04      	ldr	r2, [pc, #16]	; (80074f8 <RTC_ExitInitMode+0x78>)
 80074e8:	f043 0320 	orr.w	r3, r3, #32
 80074ec:	6193      	str	r3, [r2, #24]
  }

  return status;
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40002800 	.word	0x40002800

080074fc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	4603      	mov	r3, r0
 8007504:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800750e:	e005      	b.n	800751c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3301      	adds	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007516:	7afb      	ldrb	r3, [r7, #11]
 8007518:	3b0a      	subs	r3, #10
 800751a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800751c:	7afb      	ldrb	r3, [r7, #11]
 800751e:	2b09      	cmp	r3, #9
 8007520:	d8f6      	bhi.n	8007510 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	b2da      	uxtb	r2, r3
 800752a:	7afb      	ldrb	r3, [r7, #11]
 800752c:	4313      	orrs	r3, r2
 800752e:	b2db      	uxtb	r3, r3
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr
	...

0800753c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <HAL_RTCEx_EnableBypassShadow+0x16>
 800754e:	2302      	movs	r3, #2
 8007550:	e01f      	b.n	8007592 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2202      	movs	r2, #2
 800755e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007562:	4b0e      	ldr	r3, [pc, #56]	; (800759c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007564:	22ca      	movs	r2, #202	; 0xca
 8007566:	625a      	str	r2, [r3, #36]	; 0x24
 8007568:	4b0c      	ldr	r3, [pc, #48]	; (800759c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800756a:	2253      	movs	r2, #83	; 0x53
 800756c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800756e:	4b0b      	ldr	r3, [pc, #44]	; (800759c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	4a0a      	ldr	r2, [pc, #40]	; (800759c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007574:	f043 0320 	orr.w	r3, r3, #32
 8007578:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800757a:	4b08      	ldr	r3, [pc, #32]	; (800759c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800757c:	22ff      	movs	r2, #255	; 0xff
 800757e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	bc80      	pop	{r7}
 800759a:	4770      	bx	lr
 800759c:	40002800 	.word	0x40002800

080075a0 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <HAL_RTCEx_SetSSRU_IT+0x16>
 80075b2:	2302      	movs	r3, #2
 80075b4:	e027      	b.n	8007606 <HAL_RTCEx_SetSSRU_IT+0x66>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075c6:	4b12      	ldr	r3, [pc, #72]	; (8007610 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80075c8:	22ca      	movs	r2, #202	; 0xca
 80075ca:	625a      	str	r2, [r3, #36]	; 0x24
 80075cc:	4b10      	ldr	r3, [pc, #64]	; (8007610 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80075ce:	2253      	movs	r2, #83	; 0x53
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80075d2:	4b0f      	ldr	r3, [pc, #60]	; (8007610 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	4a0e      	ldr	r2, [pc, #56]	; (8007610 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80075d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075dc:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80075de:	4b0d      	ldr	r3, [pc, #52]	; (8007614 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80075e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075e4:	4a0b      	ldr	r2, [pc, #44]	; (8007614 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80075e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ee:	4b08      	ldr	r3, [pc, #32]	; (8007610 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80075f0:	22ff      	movs	r2, #255	; 0xff
 80075f2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	bc80      	pop	{r7}
 800760e:	4770      	bx	lr
 8007610:	40002800 	.word	0x40002800
 8007614:	58000800 	.word	0x58000800

08007618 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007620:	4b09      	ldr	r3, [pc, #36]	; (8007648 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800762c:	4b06      	ldr	r3, [pc, #24]	; (8007648 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800762e:	2240      	movs	r2, #64	; 0x40
 8007630:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fa fed8 	bl	80023e8 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40002800 	.word	0x40002800

0800764c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr
	...

08007660 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800766c:	4b07      	ldr	r3, [pc, #28]	; (800768c <HAL_RTCEx_BKUPWrite+0x2c>)
 800766e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4413      	add	r3, r2
 8007678:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	601a      	str	r2, [r3, #0]
}
 8007680:	bf00      	nop
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	bc80      	pop	{r7}
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	4000b100 	.word	0x4000b100

08007690 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800769a:	4b07      	ldr	r3, [pc, #28]	; (80076b8 <HAL_RTCEx_BKUPRead+0x28>)
 800769c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	4000b100 	.word	0x4000b100

080076bc <LL_PWR_SetRadioBusyTrigger>:
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80076c4:	4b06      	ldr	r3, [pc, #24]	; (80076e0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076cc:	4904      	ldr	r1, [pc, #16]	; (80076e0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	608b      	str	r3, [r1, #8]
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	bc80      	pop	{r7}
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	58000400 	.word	0x58000400

080076e4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80076ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ee:	4a04      	ldr	r2, [pc, #16]	; (8007700 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80076f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80076f8:	bf00      	nop
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bc80      	pop	{r7}
 80076fe:	4770      	bx	lr
 8007700:	58000400 	.word	0x58000400

08007704 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007708:	4b05      	ldr	r3, [pc, #20]	; (8007720 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800770a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770e:	4a04      	ldr	r2, [pc, #16]	; (8007720 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007710:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007718:	bf00      	nop
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr
 8007720:	58000400 	.word	0x58000400

08007724 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007728:	4b03      	ldr	r3, [pc, #12]	; (8007738 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800772a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800772e:	619a      	str	r2, [r3, #24]
}
 8007730:	bf00      	nop
 8007732:	46bd      	mov	sp, r7
 8007734:	bc80      	pop	{r7}
 8007736:	4770      	bx	lr
 8007738:	58000400 	.word	0x58000400

0800773c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007740:	4b06      	ldr	r3, [pc, #24]	; (800775c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b02      	cmp	r3, #2
 800774a:	d101      	bne.n	8007750 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800774c:	2301      	movs	r3, #1
 800774e:	e000      	b.n	8007752 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	46bd      	mov	sp, r7
 8007756:	bc80      	pop	{r7}
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	58000400 	.word	0x58000400

08007760 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007764:	4b06      	ldr	r3, [pc, #24]	; (8007780 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b04      	cmp	r3, #4
 800776e:	d101      	bne.n	8007774 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007770:	2301      	movs	r3, #1
 8007772:	e000      	b.n	8007776 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	46bd      	mov	sp, r7
 800777a:	bc80      	pop	{r7}
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	58000400 	.word	0x58000400

08007784 <LL_RCC_RF_DisableReset>:
{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800778c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007794:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007798:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800779c:	bf00      	nop
 800779e:	46bd      	mov	sp, r7
 80077a0:	bc80      	pop	{r7}
 80077a2:	4770      	bx	lr

080077a4 <LL_RCC_IsRFUnderReset>:
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80077a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077b8:	d101      	bne.n	80077be <LL_RCC_IsRFUnderReset+0x1a>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <LL_RCC_IsRFUnderReset+0x1c>
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr

080077c8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <LL_EXTI_EnableIT_32_63+0x24>)
 80077d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80077d6:	4905      	ldr	r1, [pc, #20]	; (80077ec <LL_EXTI_EnableIT_32_63+0x24>)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4313      	orrs	r3, r2
 80077dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bc80      	pop	{r7}
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	58000800 	.word	0x58000800

080077f0 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d103      	bne.n	8007806 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	73fb      	strb	r3, [r7, #15]
    return status;
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	e04b      	b.n	800789e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	799b      	ldrb	r3, [r3, #6]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	d105      	bne.n	8007820 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7fa fa38 	bl	8001c90 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8007826:	f7ff ffad 	bl	8007784 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800782a:	4b1f      	ldr	r3, [pc, #124]	; (80078a8 <HAL_SUBGHZ_Init+0xb8>)
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	4613      	mov	r3, r2
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	1a9b      	subs	r3, r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	0cdb      	lsrs	r3, r3, #19
 8007838:	2264      	movs	r2, #100	; 0x64
 800783a:	fb02 f303 	mul.w	r3, r2, r3
 800783e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d105      	bne.n	8007852 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	609a      	str	r2, [r3, #8]
      break;
 8007850:	e007      	b.n	8007862 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	3b01      	subs	r3, #1
 8007856:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007858:	f7ff ffa4 	bl	80077a4 <LL_RCC_IsRFUnderReset>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1ee      	bne.n	8007840 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8007862:	f7ff ff3f 	bl	80076e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007866:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800786a:	f7ff ffad 	bl	80077c8 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800786e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007872:	f7ff ff23 	bl	80076bc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007876:	f7ff ff55 	bl	8007724 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10a      	bne.n	8007896 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4618      	mov	r0, r3
 8007886:	f000 faad 	bl	8007de4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	719a      	strb	r2, [r3, #6]

  return status;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20000000 	.word	0x20000000

080078ac <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	607a      	str	r2, [r7, #4]
 80078b6:	461a      	mov	r2, r3
 80078b8:	460b      	mov	r3, r1
 80078ba:	817b      	strh	r3, [r7, #10]
 80078bc:	4613      	mov	r3, r2
 80078be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	799b      	ldrb	r3, [r3, #6]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d14a      	bne.n	8007960 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	795b      	ldrb	r3, [r3, #5]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d101      	bne.n	80078d6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80078d2:	2302      	movs	r3, #2
 80078d4:	e045      	b.n	8007962 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2201      	movs	r2, #1
 80078da:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2202      	movs	r2, #2
 80078e0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 fb4c 	bl	8007f80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078e8:	f7ff ff0c 	bl	8007704 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80078ec:	210d      	movs	r1, #13
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fa98 	bl	8007e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80078f4:	897b      	ldrh	r3, [r7, #10]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	4619      	mov	r1, r3
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fa90 	bl	8007e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007904:	897b      	ldrh	r3, [r7, #10]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	4619      	mov	r1, r3
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 fa8a 	bl	8007e24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007910:	2300      	movs	r3, #0
 8007912:	82bb      	strh	r3, [r7, #20]
 8007914:	e00a      	b.n	800792c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007916:	8abb      	ldrh	r3, [r7, #20]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	4413      	add	r3, r2
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	4619      	mov	r1, r3
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 fa7f 	bl	8007e24 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007926:	8abb      	ldrh	r3, [r7, #20]
 8007928:	3301      	adds	r3, #1
 800792a:	82bb      	strh	r3, [r7, #20]
 800792c:	8aba      	ldrh	r2, [r7, #20]
 800792e:	893b      	ldrh	r3, [r7, #8]
 8007930:	429a      	cmp	r2, r3
 8007932:	d3f0      	bcc.n	8007916 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007934:	f7ff fed6 	bl	80076e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 fb45 	bl	8007fc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	75fb      	strb	r3, [r7, #23]
 800794a:	e001      	b.n	8007950 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2201      	movs	r2, #1
 8007954:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	715a      	strb	r2, [r3, #5]

    return status;
 800795c:	7dfb      	ldrb	r3, [r7, #23]
 800795e:	e000      	b.n	8007962 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007960:	2302      	movs	r3, #2
  }
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b088      	sub	sp, #32
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	461a      	mov	r2, r3
 8007976:	460b      	mov	r3, r1
 8007978:	817b      	strh	r3, [r7, #10]
 800797a:	4613      	mov	r3, r2
 800797c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	799b      	ldrb	r3, [r3, #6]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b01      	cmp	r3, #1
 800798a:	d14a      	bne.n	8007a22 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	795b      	ldrb	r3, [r3, #5]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007994:	2302      	movs	r3, #2
 8007996:	e045      	b.n	8007a24 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 faee 	bl	8007f80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80079a4:	f7ff feae 	bl	8007704 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80079a8:	211d      	movs	r1, #29
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 fa3a 	bl	8007e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80079b0:	897b      	ldrh	r3, [r7, #10]
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	4619      	mov	r1, r3
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 fa32 	bl	8007e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80079c0:	897b      	ldrh	r3, [r7, #10]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	4619      	mov	r1, r3
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fa2c 	bl	8007e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80079cc:	2100      	movs	r1, #0
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 fa28 	bl	8007e24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80079d4:	2300      	movs	r3, #0
 80079d6:	82fb      	strh	r3, [r7, #22]
 80079d8:	e009      	b.n	80079ee <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80079da:	69b9      	ldr	r1, [r7, #24]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 fa77 	bl	8007ed0 <SUBGHZSPI_Receive>
      pData++;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	3301      	adds	r3, #1
 80079e6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80079e8:	8afb      	ldrh	r3, [r7, #22]
 80079ea:	3301      	adds	r3, #1
 80079ec:	82fb      	strh	r3, [r7, #22]
 80079ee:	8afa      	ldrh	r2, [r7, #22]
 80079f0:	893b      	ldrh	r3, [r7, #8]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d3f1      	bcc.n	80079da <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80079f6:	f7ff fe75 	bl	80076e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 fae4 	bl	8007fc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	77fb      	strb	r3, [r7, #31]
 8007a0c:	e001      	b.n	8007a12 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2201      	movs	r2, #1
 8007a16:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	715a      	strb	r2, [r3, #5]

    return status;
 8007a1e:	7ffb      	ldrb	r3, [r7, #31]
 8007a20:	e000      	b.n	8007a24 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007a22:	2302      	movs	r3, #2
  }
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	607a      	str	r2, [r7, #4]
 8007a36:	461a      	mov	r2, r3
 8007a38:	460b      	mov	r3, r1
 8007a3a:	72fb      	strb	r3, [r7, #11]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	799b      	ldrb	r3, [r3, #6]
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d14a      	bne.n	8007ae0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	795b      	ldrb	r3, [r3, #5]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d101      	bne.n	8007a56 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007a52:	2302      	movs	r3, #2
 8007a54:	e045      	b.n	8007ae2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 fa8f 	bl	8007f80 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007a62:	7afb      	ldrb	r3, [r7, #11]
 8007a64:	2b84      	cmp	r3, #132	; 0x84
 8007a66:	d002      	beq.n	8007a6e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007a68:	7afb      	ldrb	r3, [r7, #11]
 8007a6a:	2b94      	cmp	r3, #148	; 0x94
 8007a6c:	d103      	bne.n	8007a76 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2201      	movs	r2, #1
 8007a72:	711a      	strb	r2, [r3, #4]
 8007a74:	e002      	b.n	8007a7c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a7c:	f7ff fe42 	bl	8007704 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007a80:	7afb      	ldrb	r3, [r7, #11]
 8007a82:	4619      	mov	r1, r3
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 f9cd 	bl	8007e24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	82bb      	strh	r3, [r7, #20]
 8007a8e:	e00a      	b.n	8007aa6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007a90:	8abb      	ldrh	r3, [r7, #20]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	4413      	add	r3, r2
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 f9c2 	bl	8007e24 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007aa0:	8abb      	ldrh	r3, [r7, #20]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	82bb      	strh	r3, [r7, #20]
 8007aa6:	8aba      	ldrh	r2, [r7, #20]
 8007aa8:	893b      	ldrh	r3, [r7, #8]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d3f0      	bcc.n	8007a90 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007aae:	f7ff fe19 	bl	80076e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007ab2:	7afb      	ldrb	r3, [r7, #11]
 8007ab4:	2b84      	cmp	r3, #132	; 0x84
 8007ab6:	d002      	beq.n	8007abe <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 fa85 	bl	8007fc8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	75fb      	strb	r3, [r7, #23]
 8007aca:	e001      	b.n	8007ad0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	715a      	strb	r2, [r3, #5]

    return status;
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	e000      	b.n	8007ae2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007ae0:	2302      	movs	r3, #2
  }
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b088      	sub	sp, #32
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	461a      	mov	r2, r3
 8007af6:	460b      	mov	r3, r1
 8007af8:	72fb      	strb	r3, [r7, #11]
 8007afa:	4613      	mov	r3, r2
 8007afc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	799b      	ldrb	r3, [r3, #6]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d13d      	bne.n	8007b88 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	795b      	ldrb	r3, [r3, #5]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d101      	bne.n	8007b18 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007b14:	2302      	movs	r3, #2
 8007b16:	e038      	b.n	8007b8a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 fa2e 	bl	8007f80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007b24:	f7ff fdee 	bl	8007704 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007b28:	7afb      	ldrb	r3, [r7, #11]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 f979 	bl	8007e24 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007b32:	2100      	movs	r1, #0
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f975 	bl	8007e24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	82fb      	strh	r3, [r7, #22]
 8007b3e:	e009      	b.n	8007b54 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007b40:	69b9      	ldr	r1, [r7, #24]
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f9c4 	bl	8007ed0 <SUBGHZSPI_Receive>
      pData++;
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007b4e:	8afb      	ldrh	r3, [r7, #22]
 8007b50:	3301      	adds	r3, #1
 8007b52:	82fb      	strh	r3, [r7, #22]
 8007b54:	8afa      	ldrh	r2, [r7, #22]
 8007b56:	893b      	ldrh	r3, [r7, #8]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d3f1      	bcc.n	8007b40 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b5c:	f7ff fdc2 	bl	80076e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fa31 	bl	8007fc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	77fb      	strb	r3, [r7, #31]
 8007b72:	e001      	b.n	8007b78 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	715a      	strb	r2, [r3, #5]

    return status;
 8007b84:	7ffb      	ldrb	r3, [r7, #31]
 8007b86:	e000      	b.n	8007b8a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007b88:	2302      	movs	r3, #2
  }
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3720      	adds	r7, #32
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b086      	sub	sp, #24
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	72fb      	strb	r3, [r7, #11]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	799b      	ldrb	r3, [r3, #6]
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d13e      	bne.n	8007c2e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	795b      	ldrb	r3, [r3, #5]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d101      	bne.n	8007bbc <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e039      	b.n	8007c30 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 f9dc 	bl	8007f80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007bc8:	f7ff fd9c 	bl	8007704 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007bcc:	210e      	movs	r1, #14
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 f928 	bl	8007e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f923 	bl	8007e24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007bde:	2300      	movs	r3, #0
 8007be0:	82bb      	strh	r3, [r7, #20]
 8007be2:	e00a      	b.n	8007bfa <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007be4:	8abb      	ldrh	r3, [r7, #20]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4413      	add	r3, r2
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	4619      	mov	r1, r3
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 f918 	bl	8007e24 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007bf4:	8abb      	ldrh	r3, [r7, #20]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	82bb      	strh	r3, [r7, #20]
 8007bfa:	8aba      	ldrh	r2, [r7, #20]
 8007bfc:	893b      	ldrh	r3, [r7, #8]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d3f0      	bcc.n	8007be4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007c02:	f7ff fd6f 	bl	80076e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 f9de 	bl	8007fc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	75fb      	strb	r3, [r7, #23]
 8007c18:	e001      	b.n	8007c1e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	715a      	strb	r2, [r3, #5]

    return status;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	e000      	b.n	8007c30 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007c2e:	2302      	movs	r3, #2
  }
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	461a      	mov	r2, r3
 8007c44:	460b      	mov	r3, r1
 8007c46:	72fb      	strb	r3, [r7, #11]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	799b      	ldrb	r3, [r3, #6]
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d141      	bne.n	8007cde <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	795b      	ldrb	r3, [r3, #5]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e03c      	b.n	8007ce0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 f987 	bl	8007f80 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007c72:	f7ff fd47 	bl	8007704 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007c76:	211e      	movs	r1, #30
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 f8d3 	bl	8007e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	4619      	mov	r1, r3
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 f8ce 	bl	8007e24 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007c88:	2100      	movs	r1, #0
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 f8ca 	bl	8007e24 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007c90:	2300      	movs	r3, #0
 8007c92:	82fb      	strh	r3, [r7, #22]
 8007c94:	e009      	b.n	8007caa <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007c96:	69b9      	ldr	r1, [r7, #24]
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f919 	bl	8007ed0 <SUBGHZSPI_Receive>
      pData++;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007ca4:	8afb      	ldrh	r3, [r7, #22]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	82fb      	strh	r3, [r7, #22]
 8007caa:	8afa      	ldrh	r2, [r7, #22]
 8007cac:	893b      	ldrh	r3, [r7, #8]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d3f1      	bcc.n	8007c96 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007cb2:	f7ff fd17 	bl	80076e4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f986 	bl	8007fc8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	77fb      	strb	r3, [r7, #31]
 8007cc8:	e001      	b.n	8007cce <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	715a      	strb	r2, [r3, #5]

    return status;
 8007cda:	7ffb      	ldrb	r3, [r7, #31]
 8007cdc:	e000      	b.n	8007ce0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007cde:	2302      	movs	r3, #2
  }
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3720      	adds	r7, #32
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8007cf4:	f107 020c 	add.w	r2, r7, #12
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	2112      	movs	r1, #18
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff fef4 	bl	8007aea <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8007d02:	7b3b      	ldrb	r3, [r7, #12]
 8007d04:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8007d06:	89fb      	ldrh	r3, [r7, #14]
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	b21a      	sxth	r2, r3
 8007d0c:	7b7b      	ldrb	r3, [r7, #13]
 8007d0e:	b21b      	sxth	r3, r3
 8007d10:	4313      	orrs	r3, r2
 8007d12:	b21b      	sxth	r3, r3
 8007d14:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007d16:	89fb      	ldrh	r3, [r7, #14]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f011 fc1f 	bl	8019564 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007d26:	89fb      	ldrh	r3, [r7, #14]
 8007d28:	085b      	lsrs	r3, r3, #1
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f011 fc24 	bl	8019580 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007d38:	89fb      	ldrh	r3, [r7, #14]
 8007d3a:	089b      	lsrs	r3, r3, #2
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f011 fc73 	bl	8019630 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007d4a:	89fb      	ldrh	r3, [r7, #14]
 8007d4c:	08db      	lsrs	r3, r3, #3
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f011 fc78 	bl	801964c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007d5c:	89fb      	ldrh	r3, [r7, #14]
 8007d5e:	091b      	lsrs	r3, r3, #4
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f011 fc7d 	bl	8019668 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007d6e:	89fb      	ldrh	r3, [r7, #14]
 8007d70:	095b      	lsrs	r3, r3, #5
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f011 fc4a 	bl	8019614 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007d80:	89fb      	ldrh	r3, [r7, #14]
 8007d82:	099b      	lsrs	r3, r3, #6
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f011 fc05 	bl	801959c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007d92:	89fb      	ldrh	r3, [r7, #14]
 8007d94:	09db      	lsrs	r3, r3, #7
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00e      	beq.n	8007dbc <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007d9e:	89fb      	ldrh	r3, [r7, #14]
 8007da0:	0a1b      	lsrs	r3, r3, #8
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d004      	beq.n	8007db4 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007daa:	2101      	movs	r1, #1
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f011 fc03 	bl	80195b8 <HAL_SUBGHZ_CADStatusCallback>
 8007db2:	e003      	b.n	8007dbc <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007db4:	2100      	movs	r1, #0
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f011 fbfe 	bl	80195b8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007dbc:	89fb      	ldrh	r3, [r7, #14]
 8007dbe:	0a5b      	lsrs	r3, r3, #9
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f011 fc13 	bl	80195f4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007dce:	f107 020c 	add.w	r2, r7, #12
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	2102      	movs	r1, #2
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff fe28 	bl	8007a2c <HAL_SUBGHZ_ExecSetCmd>
}
 8007ddc:	bf00      	nop
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007dec:	4b0c      	ldr	r3, [pc, #48]	; (8007e20 <SUBGHZSPI_Init+0x3c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a0b      	ldr	r2, [pc, #44]	; (8007e20 <SUBGHZSPI_Init+0x3c>)
 8007df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007df6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007df8:	4a09      	ldr	r2, [pc, #36]	; (8007e20 <SUBGHZSPI_Init+0x3c>)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007e00:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007e02:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <SUBGHZSPI_Init+0x3c>)
 8007e04:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007e08:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <SUBGHZSPI_Init+0x3c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a04      	ldr	r2, [pc, #16]	; (8007e20 <SUBGHZSPI_Init+0x3c>)
 8007e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e14:	6013      	str	r3, [r2, #0]
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bc80      	pop	{r7}
 8007e1e:	4770      	bx	lr
 8007e20:	58010000 	.word	0x58010000

08007e24 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007e34:	4b23      	ldr	r3, [pc, #140]	; (8007ec4 <SUBGHZSPI_Transmit+0xa0>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	1a9b      	subs	r3, r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	0cdb      	lsrs	r3, r3, #19
 8007e42:	2264      	movs	r2, #100	; 0x64
 8007e44:	fb02 f303 	mul.w	r3, r2, r3
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d105      	bne.n	8007e5c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	609a      	str	r2, [r3, #8]
      break;
 8007e5a:	e008      	b.n	8007e6e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007e62:	4b19      	ldr	r3, [pc, #100]	; (8007ec8 <SUBGHZSPI_Transmit+0xa4>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d1ed      	bne.n	8007e4a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007e6e:	4b17      	ldr	r3, [pc, #92]	; (8007ecc <SUBGHZSPI_Transmit+0xa8>)
 8007e70:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	78fa      	ldrb	r2, [r7, #3]
 8007e76:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007e78:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <SUBGHZSPI_Transmit+0xa0>)
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	1a9b      	subs	r3, r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	0cdb      	lsrs	r3, r3, #19
 8007e86:	2264      	movs	r2, #100	; 0x64
 8007e88:	fb02 f303 	mul.w	r3, r2, r3
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d105      	bne.n	8007ea0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	609a      	str	r2, [r3, #8]
      break;
 8007e9e:	e008      	b.n	8007eb2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007ea6:	4b08      	ldr	r3, [pc, #32]	; (8007ec8 <SUBGHZSPI_Transmit+0xa4>)
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d1ed      	bne.n	8007e8e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <SUBGHZSPI_Transmit+0xa4>)
 8007eb4:	68db      	ldr	r3, [r3, #12]

  return status;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	371c      	adds	r7, #28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bc80      	pop	{r7}
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20000000 	.word	0x20000000
 8007ec8:	58010000 	.word	0x58010000
 8007ecc:	5801000c 	.word	0x5801000c

08007ed0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007ede:	4b25      	ldr	r3, [pc, #148]	; (8007f74 <SUBGHZSPI_Receive+0xa4>)
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	1a9b      	subs	r3, r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	0cdb      	lsrs	r3, r3, #19
 8007eec:	2264      	movs	r2, #100	; 0x64
 8007eee:	fb02 f303 	mul.w	r3, r2, r3
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d105      	bne.n	8007f06 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	609a      	str	r2, [r3, #8]
      break;
 8007f04:	e008      	b.n	8007f18 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007f0c:	4b1a      	ldr	r3, [pc, #104]	; (8007f78 <SUBGHZSPI_Receive+0xa8>)
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d1ed      	bne.n	8007ef4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007f18:	4b18      	ldr	r3, [pc, #96]	; (8007f7c <SUBGHZSPI_Receive+0xac>)
 8007f1a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	22ff      	movs	r2, #255	; 0xff
 8007f20:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007f22:	4b14      	ldr	r3, [pc, #80]	; (8007f74 <SUBGHZSPI_Receive+0xa4>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	4613      	mov	r3, r2
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	0cdb      	lsrs	r3, r3, #19
 8007f30:	2264      	movs	r2, #100	; 0x64
 8007f32:	fb02 f303 	mul.w	r3, r2, r3
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d105      	bne.n	8007f4a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	609a      	str	r2, [r3, #8]
      break;
 8007f48:	e008      	b.n	8007f5c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007f50:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <SUBGHZSPI_Receive+0xa8>)
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d1ed      	bne.n	8007f38 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007f5c:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <SUBGHZSPI_Receive+0xa8>)
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	701a      	strb	r2, [r3, #0]

  return status;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	371c      	adds	r7, #28
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	20000000 	.word	0x20000000
 8007f78:	58010000 	.word	0x58010000
 8007f7c:	5801000c 	.word	0x5801000c

08007f80 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	791b      	ldrb	r3, [r3, #4]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d111      	bne.n	8007fb4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007f90:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <SUBGHZ_CheckDeviceReady+0x44>)
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	4613      	mov	r3, r2
 8007f96:	005b      	lsls	r3, r3, #1
 8007f98:	4413      	add	r3, r2
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	0c1b      	lsrs	r3, r3, #16
 8007f9e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007fa0:	f7ff fbb0 	bl	8007704 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1f9      	bne.n	8007fa4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007fb0:	f7ff fb98 	bl	80076e4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f807 	bl	8007fc8 <SUBGHZ_WaitOnBusy>
 8007fba:	4603      	mov	r3, r0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20000000 	.word	0x20000000

08007fc8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007fd4:	4b12      	ldr	r3, [pc, #72]	; (8008020 <SUBGHZ_WaitOnBusy+0x58>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	4413      	add	r3, r2
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	0d1b      	lsrs	r3, r3, #20
 8007fe2:	2264      	movs	r2, #100	; 0x64
 8007fe4:	fb02 f303 	mul.w	r3, r2, r3
 8007fe8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007fea:	f7ff fbb9 	bl	8007760 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007fee:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d105      	bne.n	8008002 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	609a      	str	r2, [r3, #8]
      break;
 8008000:	e009      	b.n	8008016 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3b01      	subs	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008008:	f7ff fb98 	bl	800773c <LL_PWR_IsActiveFlag_RFBUSYS>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	4013      	ands	r3, r2
 8008012:	2b01      	cmp	r3, #1
 8008014:	d0e9      	beq.n	8007fea <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008016:	7dfb      	ldrb	r3, [r7, #23]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	20000000 	.word	0x20000000

08008024 <LL_RCC_GetUSARTClockSource>:
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800802c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008030:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	401a      	ands	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	041b      	lsls	r3, r3, #16
 800803c:	4313      	orrs	r3, r2
}
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr

08008048 <LL_RCC_GetLPUARTClockSource>:
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008054:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4013      	ands	r3, r2
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	bc80      	pop	{r7}
 8008064:	4770      	bx	lr

08008066 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b082      	sub	sp, #8
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e042      	b.n	80080fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800807e:	2b00      	cmp	r3, #0
 8008080:	d106      	bne.n	8008090 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7fa fb04 	bl	8002698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2224      	movs	r2, #36	; 0x24
 8008094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0201 	bic.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fc4b 	bl	8008944 <UART_SetConfig>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d101      	bne.n	80080b8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e022      	b.n	80080fe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fe8f 	bl	8008de4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f042 0201 	orr.w	r2, r2, #1
 80080f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 ff15 	bl	8008f26 <UART_CheckIdleState>
 80080fc:	4603      	mov	r3, r0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b08a      	sub	sp, #40	; 0x28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	4613      	mov	r3, r2
 8008114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811c:	2b20      	cmp	r3, #32
 800811e:	d142      	bne.n	80081a6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <HAL_UART_Receive_IT+0x24>
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e03b      	b.n	80081a8 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008136:	2b01      	cmp	r3, #1
 8008138:	d101      	bne.n	800813e <HAL_UART_Receive_IT+0x36>
 800813a:	2302      	movs	r3, #2
 800813c:	e034      	b.n	80081a8 <HAL_UART_Receive_IT+0xa0>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a17      	ldr	r2, [pc, #92]	; (80081b0 <HAL_UART_Receive_IT+0xa8>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d01f      	beq.n	8008196 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d018      	beq.n	8008196 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	613b      	str	r3, [r7, #16]
   return(result);
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	623b      	str	r3, [r7, #32]
 8008184:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	69f9      	ldr	r1, [r7, #28]
 8008188:	6a3a      	ldr	r2, [r7, #32]
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e6      	bne.n	8008164 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008196:	88fb      	ldrh	r3, [r7, #6]
 8008198:	461a      	mov	r2, r3
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 ffd5 	bl	800914c <UART_Start_Receive_IT>
 80081a2:	4603      	mov	r3, r0
 80081a4:	e000      	b.n	80081a8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80081a6:	2302      	movs	r3, #2
  }
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3728      	adds	r7, #40	; 0x28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	40008000 	.word	0x40008000

080081b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08a      	sub	sp, #40	; 0x28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	4613      	mov	r3, r2
 80081c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081c8:	2b20      	cmp	r3, #32
 80081ca:	d17a      	bne.n	80082c2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <HAL_UART_Transmit_DMA+0x24>
 80081d2:	88fb      	ldrh	r3, [r7, #6]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e073      	b.n	80082c4 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <HAL_UART_Transmit_DMA+0x36>
 80081e6:	2302      	movs	r3, #2
 80081e8:	e06c      	b.n	80082c4 <HAL_UART_Transmit_DMA+0x110>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	88fa      	ldrh	r2, [r7, #6]
 80081fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	88fa      	ldrh	r2, [r7, #6]
 8008204:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2221      	movs	r2, #33	; 0x21
 8008214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800821c:	2b00      	cmp	r3, #0
 800821e:	d02c      	beq.n	800827a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008224:	4a29      	ldr	r2, [pc, #164]	; (80082cc <HAL_UART_Transmit_DMA+0x118>)
 8008226:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800822c:	4a28      	ldr	r2, [pc, #160]	; (80082d0 <HAL_UART_Transmit_DMA+0x11c>)
 800822e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008234:	4a27      	ldr	r2, [pc, #156]	; (80082d4 <HAL_UART_Transmit_DMA+0x120>)
 8008236:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800823c:	2200      	movs	r2, #0
 800823e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008248:	4619      	mov	r1, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3328      	adds	r3, #40	; 0x28
 8008250:	461a      	mov	r2, r3
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	f7fc f8bc 	bl	80043d0 <HAL_DMA_Start_IT>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00d      	beq.n	800827a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2210      	movs	r2, #16
 8008262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2220      	movs	r2, #32
 8008272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e024      	b.n	80082c4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2240      	movs	r2, #64	; 0x40
 8008280:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3308      	adds	r3, #8
 8008290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	613b      	str	r3, [r7, #16]
   return(result);
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a0:	627b      	str	r3, [r7, #36]	; 0x24
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3308      	adds	r3, #8
 80082a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082aa:	623a      	str	r2, [r7, #32]
 80082ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	69f9      	ldr	r1, [r7, #28]
 80082b0:	6a3a      	ldr	r2, [r7, #32]
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e5      	bne.n	800828a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	e000      	b.n	80082c4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80082c2:	2302      	movs	r3, #2
  }
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3728      	adds	r7, #40	; 0x28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	0800949b 	.word	0x0800949b
 80082d0:	08009535 	.word	0x08009535
 80082d4:	08009551 	.word	0x08009551

080082d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b0ba      	sub	sp, #232	; 0xe8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008302:	f640 030f 	movw	r3, #2063	; 0x80f
 8008306:	4013      	ands	r3, r2
 8008308:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800830c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008310:	2b00      	cmp	r3, #0
 8008312:	d11b      	bne.n	800834c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008318:	f003 0320 	and.w	r3, r3, #32
 800831c:	2b00      	cmp	r3, #0
 800831e:	d015      	beq.n	800834c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008324:	f003 0320 	and.w	r3, r3, #32
 8008328:	2b00      	cmp	r3, #0
 800832a:	d105      	bne.n	8008338 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800832c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d009      	beq.n	800834c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 82d6 	beq.w	80088ee <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
      }
      return;
 800834a:	e2d0      	b.n	80088ee <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800834c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 811f 	beq.w	8008594 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008356:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800835a:	4b8b      	ldr	r3, [pc, #556]	; (8008588 <HAL_UART_IRQHandler+0x2b0>)
 800835c:	4013      	ands	r3, r2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008366:	4b89      	ldr	r3, [pc, #548]	; (800858c <HAL_UART_IRQHandler+0x2b4>)
 8008368:	4013      	ands	r3, r2
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 8112 	beq.w	8008594 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d011      	beq.n	80083a0 <HAL_UART_IRQHandler+0xc8>
 800837c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2201      	movs	r2, #1
 800838e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008396:	f043 0201 	orr.w	r2, r3, #1
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d011      	beq.n	80083d0 <HAL_UART_IRQHandler+0xf8>
 80083ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2202      	movs	r2, #2
 80083be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083c6:	f043 0204 	orr.w	r2, r3, #4
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d011      	beq.n	8008400 <HAL_UART_IRQHandler+0x128>
 80083dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2204      	movs	r2, #4
 80083ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f6:	f043 0202 	orr.w	r2, r3, #2
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b00      	cmp	r3, #0
 800840a:	d017      	beq.n	800843c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800840c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008410:	f003 0320 	and.w	r3, r3, #32
 8008414:	2b00      	cmp	r3, #0
 8008416:	d105      	bne.n	8008424 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008418:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800841c:	4b5a      	ldr	r3, [pc, #360]	; (8008588 <HAL_UART_IRQHandler+0x2b0>)
 800841e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2208      	movs	r2, #8
 800842a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008432:	f043 0208 	orr.w	r2, r3, #8
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800843c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008444:	2b00      	cmp	r3, #0
 8008446:	d012      	beq.n	800846e <HAL_UART_IRQHandler+0x196>
 8008448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800844c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00c      	beq.n	800846e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800845c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008464:	f043 0220 	orr.w	r2, r3, #32
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 823c 	beq.w	80088f2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800847a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847e:	f003 0320 	and.w	r3, r3, #32
 8008482:	2b00      	cmp	r3, #0
 8008484:	d013      	beq.n	80084ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d105      	bne.n	800849e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d007      	beq.n	80084ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d005      	beq.n	80084d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d04f      	beq.n	8008572 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 ff7c 	bl	80093d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e2:	2b40      	cmp	r3, #64	; 0x40
 80084e4:	d141      	bne.n	800856a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3308      	adds	r3, #8
 80084ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80084fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008512:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800851e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800852a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1d9      	bne.n	80084e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d013      	beq.n	8008562 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800853e:	4a14      	ldr	r2, [pc, #80]	; (8008590 <HAL_UART_IRQHandler+0x2b8>)
 8008540:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008546:	4618      	mov	r0, r3
 8008548:	f7fc f81e 	bl	8004588 <HAL_DMA_Abort_IT>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d017      	beq.n	8008582 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800855c:	4610      	mov	r0, r2
 800855e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008560:	e00f      	b.n	8008582 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f9d9 	bl	800891a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008568:	e00b      	b.n	8008582 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f9d5 	bl	800891a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008570:	e007      	b.n	8008582 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f9d1 	bl	800891a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008580:	e1b7      	b.n	80088f2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008582:	bf00      	nop
    return;
 8008584:	e1b5      	b.n	80088f2 <HAL_UART_IRQHandler+0x61a>
 8008586:	bf00      	nop
 8008588:	10000001 	.word	0x10000001
 800858c:	04000120 	.word	0x04000120
 8008590:	080095d1 	.word	0x080095d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008598:	2b01      	cmp	r3, #1
 800859a:	f040 814a 	bne.w	8008832 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800859e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a2:	f003 0310 	and.w	r3, r3, #16
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 8143 	beq.w	8008832 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80085ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b0:	f003 0310 	and.w	r3, r3, #16
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 813c 	beq.w	8008832 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2210      	movs	r2, #16
 80085c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085cc:	2b40      	cmp	r3, #64	; 0x40
 80085ce:	f040 80b5 	bne.w	800873c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80085de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 8187 	beq.w	80088f6 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085f2:	429a      	cmp	r2, r3
 80085f4:	f080 817f 	bcs.w	80088f6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b00      	cmp	r3, #0
 8008610:	f040 8086 	bne.w	8008720 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800862c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	461a      	mov	r2, r3
 800863a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800863e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008642:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800864a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1da      	bne.n	8008614 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3308      	adds	r3, #8
 8008664:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800866e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3308      	adds	r3, #8
 800867e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008682:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008686:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800868a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e1      	bne.n	800865e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3308      	adds	r3, #8
 80086a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80086aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3308      	adds	r3, #8
 80086ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80086c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80086cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e3      	bne.n	800869a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086f0:	f023 0310 	bic.w	r3, r3, #16
 80086f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	461a      	mov	r2, r3
 80086fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008702:	65bb      	str	r3, [r7, #88]	; 0x58
 8008704:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e4      	bne.n	80086e0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800871a:	4618      	mov	r0, r3
 800871c:	f7fb fed6 	bl	80044cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800872c:	b29b      	uxth	r3, r3
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	b29b      	uxth	r3, r3
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f8f9 	bl	800892c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800873a:	e0dc      	b.n	80088f6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008748:	b29b      	uxth	r3, r3
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008756:	b29b      	uxth	r3, r3
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 80ce 	beq.w	80088fa <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800875e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 80c9 	beq.w	80088fa <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800877c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	461a      	mov	r2, r3
 8008786:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800878a:	647b      	str	r3, [r7, #68]	; 0x44
 800878c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e4      	bne.n	8008768 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3308      	adds	r3, #8
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	e853 3f00 	ldrex	r3, [r3]
 80087ac:	623b      	str	r3, [r7, #32]
   return(result);
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087b4:	f023 0301 	bic.w	r3, r3, #1
 80087b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3308      	adds	r3, #8
 80087c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087c6:	633a      	str	r2, [r7, #48]	; 0x30
 80087c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e1      	bne.n	800879e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2220      	movs	r2, #32
 80087de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	e853 3f00 	ldrex	r3, [r3]
 80087fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0310 	bic.w	r3, r3, #16
 8008802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008810:	61fb      	str	r3, [r7, #28]
 8008812:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008814:	69b9      	ldr	r1, [r7, #24]
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	e841 2300 	strex	r3, r2, [r1]
 800881c:	617b      	str	r3, [r7, #20]
   return(result);
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e4      	bne.n	80087ee <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f87e 	bl	800892c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008830:	e063      	b.n	80088fa <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00e      	beq.n	800885c <HAL_UART_IRQHandler+0x584>
 800883e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d008      	beq.n	800885c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008852:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f001 fb59 	bl	8009f0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800885a:	e051      	b.n	8008900 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800885c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008864:	2b00      	cmp	r3, #0
 8008866:	d014      	beq.n	8008892 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800886c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008870:	2b00      	cmp	r3, #0
 8008872:	d105      	bne.n	8008880 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d008      	beq.n	8008892 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008884:	2b00      	cmp	r3, #0
 8008886:	d03a      	beq.n	80088fe <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	4798      	blx	r3
    }
    return;
 8008890:	e035      	b.n	80088fe <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	d009      	beq.n	80088b2 <HAL_UART_IRQHandler+0x5da>
 800889e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d003      	beq.n	80088b2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fea6 	bl	80095fc <UART_EndTransmit_IT>
    return;
 80088b0:	e026      	b.n	8008900 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d009      	beq.n	80088d2 <HAL_UART_IRQHandler+0x5fa>
 80088be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f001 fb30 	bl	8009f30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088d0:	e016      	b.n	8008900 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80088d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d010      	beq.n	8008900 <HAL_UART_IRQHandler+0x628>
 80088de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	da0c      	bge.n	8008900 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 fb19 	bl	8009f1e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088ec:	e008      	b.n	8008900 <HAL_UART_IRQHandler+0x628>
      return;
 80088ee:	bf00      	nop
 80088f0:	e006      	b.n	8008900 <HAL_UART_IRQHandler+0x628>
    return;
 80088f2:	bf00      	nop
 80088f4:	e004      	b.n	8008900 <HAL_UART_IRQHandler+0x628>
      return;
 80088f6:	bf00      	nop
 80088f8:	e002      	b.n	8008900 <HAL_UART_IRQHandler+0x628>
      return;
 80088fa:	bf00      	nop
 80088fc:	e000      	b.n	8008900 <HAL_UART_IRQHandler+0x628>
    return;
 80088fe:	bf00      	nop
  }
}
 8008900:	37e8      	adds	r7, #232	; 0xe8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop

08008908 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	bc80      	pop	{r7}
 8008918:	4770      	bx	lr

0800891a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008922:	bf00      	nop
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	bc80      	pop	{r7}
 800892a:	4770      	bx	lr

0800892c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	bc80      	pop	{r7}
 8008940:	4770      	bx	lr
	...

08008944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008944:	b5b0      	push	{r4, r5, r7, lr}
 8008946:	b088      	sub	sp, #32
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	431a      	orrs	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	431a      	orrs	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	4313      	orrs	r3, r2
 8008966:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	4bab      	ldr	r3, [pc, #684]	; (8008c1c <UART_SetConfig+0x2d8>)
 8008970:	4013      	ands	r3, r2
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	6812      	ldr	r2, [r2, #0]
 8008976:	69f9      	ldr	r1, [r7, #28]
 8008978:	430b      	orrs	r3, r1
 800897a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4aa0      	ldr	r2, [pc, #640]	; (8008c20 <UART_SetConfig+0x2dc>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d004      	beq.n	80089ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80089b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	6812      	ldr	r2, [r2, #0]
 80089be:	69f9      	ldr	r1, [r7, #28]
 80089c0:	430b      	orrs	r3, r1
 80089c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	f023 010f 	bic.w	r1, r3, #15
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a91      	ldr	r2, [pc, #580]	; (8008c24 <UART_SetConfig+0x2e0>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d122      	bne.n	8008a2a <UART_SetConfig+0xe6>
 80089e4:	2003      	movs	r0, #3
 80089e6:	f7ff fb1d 	bl	8008024 <LL_RCC_GetUSARTClockSource>
 80089ea:	4603      	mov	r3, r0
 80089ec:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d817      	bhi.n	8008a24 <UART_SetConfig+0xe0>
 80089f4:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <UART_SetConfig+0xb8>)
 80089f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fa:	bf00      	nop
 80089fc:	08008a0d 	.word	0x08008a0d
 8008a00:	08008a19 	.word	0x08008a19
 8008a04:	08008a13 	.word	0x08008a13
 8008a08:	08008a1f 	.word	0x08008a1f
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	76fb      	strb	r3, [r7, #27]
 8008a10:	e072      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008a12:	2302      	movs	r3, #2
 8008a14:	76fb      	strb	r3, [r7, #27]
 8008a16:	e06f      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008a18:	2304      	movs	r3, #4
 8008a1a:	76fb      	strb	r3, [r7, #27]
 8008a1c:	e06c      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008a1e:	2308      	movs	r3, #8
 8008a20:	76fb      	strb	r3, [r7, #27]
 8008a22:	e069      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008a24:	2310      	movs	r3, #16
 8008a26:	76fb      	strb	r3, [r7, #27]
 8008a28:	e066      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a7e      	ldr	r2, [pc, #504]	; (8008c28 <UART_SetConfig+0x2e4>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d134      	bne.n	8008a9e <UART_SetConfig+0x15a>
 8008a34:	200c      	movs	r0, #12
 8008a36:	f7ff faf5 	bl	8008024 <LL_RCC_GetUSARTClockSource>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008a40:	2b0c      	cmp	r3, #12
 8008a42:	d829      	bhi.n	8008a98 <UART_SetConfig+0x154>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <UART_SetConfig+0x108>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008a81 	.word	0x08008a81
 8008a50:	08008a99 	.word	0x08008a99
 8008a54:	08008a99 	.word	0x08008a99
 8008a58:	08008a99 	.word	0x08008a99
 8008a5c:	08008a8d 	.word	0x08008a8d
 8008a60:	08008a99 	.word	0x08008a99
 8008a64:	08008a99 	.word	0x08008a99
 8008a68:	08008a99 	.word	0x08008a99
 8008a6c:	08008a87 	.word	0x08008a87
 8008a70:	08008a99 	.word	0x08008a99
 8008a74:	08008a99 	.word	0x08008a99
 8008a78:	08008a99 	.word	0x08008a99
 8008a7c:	08008a93 	.word	0x08008a93
 8008a80:	2300      	movs	r3, #0
 8008a82:	76fb      	strb	r3, [r7, #27]
 8008a84:	e038      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008a86:	2302      	movs	r3, #2
 8008a88:	76fb      	strb	r3, [r7, #27]
 8008a8a:	e035      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008a8c:	2304      	movs	r3, #4
 8008a8e:	76fb      	strb	r3, [r7, #27]
 8008a90:	e032      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008a92:	2308      	movs	r3, #8
 8008a94:	76fb      	strb	r3, [r7, #27]
 8008a96:	e02f      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008a98:	2310      	movs	r3, #16
 8008a9a:	76fb      	strb	r3, [r7, #27]
 8008a9c:	e02c      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a5f      	ldr	r2, [pc, #380]	; (8008c20 <UART_SetConfig+0x2dc>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d125      	bne.n	8008af4 <UART_SetConfig+0x1b0>
 8008aa8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008aac:	f7ff facc 	bl	8008048 <LL_RCC_GetLPUARTClockSource>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ab6:	d017      	beq.n	8008ae8 <UART_SetConfig+0x1a4>
 8008ab8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008abc:	d817      	bhi.n	8008aee <UART_SetConfig+0x1aa>
 8008abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ac2:	d00b      	beq.n	8008adc <UART_SetConfig+0x198>
 8008ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ac8:	d811      	bhi.n	8008aee <UART_SetConfig+0x1aa>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <UART_SetConfig+0x192>
 8008ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ad2:	d006      	beq.n	8008ae2 <UART_SetConfig+0x19e>
 8008ad4:	e00b      	b.n	8008aee <UART_SetConfig+0x1aa>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	76fb      	strb	r3, [r7, #27]
 8008ada:	e00d      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008adc:	2302      	movs	r3, #2
 8008ade:	76fb      	strb	r3, [r7, #27]
 8008ae0:	e00a      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008ae2:	2304      	movs	r3, #4
 8008ae4:	76fb      	strb	r3, [r7, #27]
 8008ae6:	e007      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008ae8:	2308      	movs	r3, #8
 8008aea:	76fb      	strb	r3, [r7, #27]
 8008aec:	e004      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008aee:	2310      	movs	r3, #16
 8008af0:	76fb      	strb	r3, [r7, #27]
 8008af2:	e001      	b.n	8008af8 <UART_SetConfig+0x1b4>
 8008af4:	2310      	movs	r3, #16
 8008af6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a48      	ldr	r2, [pc, #288]	; (8008c20 <UART_SetConfig+0x2dc>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	f040 8098 	bne.w	8008c34 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b04:	7efb      	ldrb	r3, [r7, #27]
 8008b06:	2b08      	cmp	r3, #8
 8008b08:	d823      	bhi.n	8008b52 <UART_SetConfig+0x20e>
 8008b0a:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <UART_SetConfig+0x1cc>)
 8008b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b10:	08008b35 	.word	0x08008b35
 8008b14:	08008b53 	.word	0x08008b53
 8008b18:	08008b3d 	.word	0x08008b3d
 8008b1c:	08008b53 	.word	0x08008b53
 8008b20:	08008b43 	.word	0x08008b43
 8008b24:	08008b53 	.word	0x08008b53
 8008b28:	08008b53 	.word	0x08008b53
 8008b2c:	08008b53 	.word	0x08008b53
 8008b30:	08008b4b 	.word	0x08008b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b34:	f7fd ff56 	bl	80069e4 <HAL_RCC_GetPCLK1Freq>
 8008b38:	6178      	str	r0, [r7, #20]
        break;
 8008b3a:	e00f      	b.n	8008b5c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b3c:	4b3b      	ldr	r3, [pc, #236]	; (8008c2c <UART_SetConfig+0x2e8>)
 8008b3e:	617b      	str	r3, [r7, #20]
        break;
 8008b40:	e00c      	b.n	8008b5c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b42:	f7fd fe9b 	bl	800687c <HAL_RCC_GetSysClockFreq>
 8008b46:	6178      	str	r0, [r7, #20]
        break;
 8008b48:	e008      	b.n	8008b5c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b4e:	617b      	str	r3, [r7, #20]
        break;
 8008b50:	e004      	b.n	8008b5c <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	76bb      	strb	r3, [r7, #26]
        break;
 8008b5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 8128 	beq.w	8008db4 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	4a31      	ldr	r2, [pc, #196]	; (8008c30 <UART_SetConfig+0x2ec>)
 8008b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b76:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	4413      	add	r3, r2
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d305      	bcc.n	8008b94 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d902      	bls.n	8008b9a <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	76bb      	strb	r3, [r7, #26]
 8008b98:	e10c      	b.n	8008db4 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f04f 0100 	mov.w	r1, #0
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	4a22      	ldr	r2, [pc, #136]	; (8008c30 <UART_SetConfig+0x2ec>)
 8008ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	f04f 0300 	mov.w	r3, #0
 8008bb2:	f7f7 ffd3 	bl	8000b5c <__aeabi_uldivmod>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4610      	mov	r0, r2
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	f04f 0200 	mov.w	r2, #0
 8008bc2:	f04f 0300 	mov.w	r3, #0
 8008bc6:	020b      	lsls	r3, r1, #8
 8008bc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008bcc:	0202      	lsls	r2, r0, #8
 8008bce:	6879      	ldr	r1, [r7, #4]
 8008bd0:	6849      	ldr	r1, [r1, #4]
 8008bd2:	0849      	lsrs	r1, r1, #1
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	f04f 0100 	mov.w	r1, #0
 8008bda:	1814      	adds	r4, r2, r0
 8008bdc:	eb43 0501 	adc.w	r5, r3, r1
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	461a      	mov	r2, r3
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	4620      	mov	r0, r4
 8008bec:	4629      	mov	r1, r5
 8008bee:	f7f7 ffb5 	bl	8000b5c <__aeabi_uldivmod>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c00:	d308      	bcc.n	8008c14 <UART_SetConfig+0x2d0>
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c08:	d204      	bcs.n	8008c14 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	60da      	str	r2, [r3, #12]
 8008c12:	e0cf      	b.n	8008db4 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	76bb      	strb	r3, [r7, #26]
 8008c18:	e0cc      	b.n	8008db4 <UART_SetConfig+0x470>
 8008c1a:	bf00      	nop
 8008c1c:	cfff69f3 	.word	0xcfff69f3
 8008c20:	40008000 	.word	0x40008000
 8008c24:	40013800 	.word	0x40013800
 8008c28:	40004400 	.word	0x40004400
 8008c2c:	00f42400 	.word	0x00f42400
 8008c30:	0801bb64 	.word	0x0801bb64
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c3c:	d165      	bne.n	8008d0a <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8008c3e:	7efb      	ldrb	r3, [r7, #27]
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d828      	bhi.n	8008c96 <UART_SetConfig+0x352>
 8008c44:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <UART_SetConfig+0x308>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c71 	.word	0x08008c71
 8008c50:	08008c79 	.word	0x08008c79
 8008c54:	08008c81 	.word	0x08008c81
 8008c58:	08008c97 	.word	0x08008c97
 8008c5c:	08008c87 	.word	0x08008c87
 8008c60:	08008c97 	.word	0x08008c97
 8008c64:	08008c97 	.word	0x08008c97
 8008c68:	08008c97 	.word	0x08008c97
 8008c6c:	08008c8f 	.word	0x08008c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c70:	f7fd feb8 	bl	80069e4 <HAL_RCC_GetPCLK1Freq>
 8008c74:	6178      	str	r0, [r7, #20]
        break;
 8008c76:	e013      	b.n	8008ca0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c78:	f7fd fec6 	bl	8006a08 <HAL_RCC_GetPCLK2Freq>
 8008c7c:	6178      	str	r0, [r7, #20]
        break;
 8008c7e:	e00f      	b.n	8008ca0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c80:	4b56      	ldr	r3, [pc, #344]	; (8008ddc <UART_SetConfig+0x498>)
 8008c82:	617b      	str	r3, [r7, #20]
        break;
 8008c84:	e00c      	b.n	8008ca0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c86:	f7fd fdf9 	bl	800687c <HAL_RCC_GetSysClockFreq>
 8008c8a:	6178      	str	r0, [r7, #20]
        break;
 8008c8c:	e008      	b.n	8008ca0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c92:	617b      	str	r3, [r7, #20]
        break;
 8008c94:	e004      	b.n	8008ca0 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	76bb      	strb	r3, [r7, #26]
        break;
 8008c9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 8086 	beq.w	8008db4 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	4a4c      	ldr	r2, [pc, #304]	; (8008de0 <UART_SetConfig+0x49c>)
 8008cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cba:	005a      	lsls	r2, r3, #1
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	441a      	add	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	2b0f      	cmp	r3, #15
 8008cd4:	d916      	bls.n	8008d04 <UART_SetConfig+0x3c0>
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cdc:	d212      	bcs.n	8008d04 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	f023 030f 	bic.w	r3, r3, #15
 8008ce6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	085b      	lsrs	r3, r3, #1
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	f003 0307 	and.w	r3, r3, #7
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	89fb      	ldrh	r3, [r7, #14]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	89fa      	ldrh	r2, [r7, #14]
 8008d00:	60da      	str	r2, [r3, #12]
 8008d02:	e057      	b.n	8008db4 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	76bb      	strb	r3, [r7, #26]
 8008d08:	e054      	b.n	8008db4 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d0a:	7efb      	ldrb	r3, [r7, #27]
 8008d0c:	2b08      	cmp	r3, #8
 8008d0e:	d828      	bhi.n	8008d62 <UART_SetConfig+0x41e>
 8008d10:	a201      	add	r2, pc, #4	; (adr r2, 8008d18 <UART_SetConfig+0x3d4>)
 8008d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d16:	bf00      	nop
 8008d18:	08008d3d 	.word	0x08008d3d
 8008d1c:	08008d45 	.word	0x08008d45
 8008d20:	08008d4d 	.word	0x08008d4d
 8008d24:	08008d63 	.word	0x08008d63
 8008d28:	08008d53 	.word	0x08008d53
 8008d2c:	08008d63 	.word	0x08008d63
 8008d30:	08008d63 	.word	0x08008d63
 8008d34:	08008d63 	.word	0x08008d63
 8008d38:	08008d5b 	.word	0x08008d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d3c:	f7fd fe52 	bl	80069e4 <HAL_RCC_GetPCLK1Freq>
 8008d40:	6178      	str	r0, [r7, #20]
        break;
 8008d42:	e013      	b.n	8008d6c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d44:	f7fd fe60 	bl	8006a08 <HAL_RCC_GetPCLK2Freq>
 8008d48:	6178      	str	r0, [r7, #20]
        break;
 8008d4a:	e00f      	b.n	8008d6c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d4c:	4b23      	ldr	r3, [pc, #140]	; (8008ddc <UART_SetConfig+0x498>)
 8008d4e:	617b      	str	r3, [r7, #20]
        break;
 8008d50:	e00c      	b.n	8008d6c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d52:	f7fd fd93 	bl	800687c <HAL_RCC_GetSysClockFreq>
 8008d56:	6178      	str	r0, [r7, #20]
        break;
 8008d58:	e008      	b.n	8008d6c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d5e:	617b      	str	r3, [r7, #20]
        break;
 8008d60:	e004      	b.n	8008d6c <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	76bb      	strb	r3, [r7, #26]
        break;
 8008d6a:	bf00      	nop
    }

    if (pclk != 0U)
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d020      	beq.n	8008db4 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	4a1a      	ldr	r2, [pc, #104]	; (8008de0 <UART_SetConfig+0x49c>)
 8008d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	085b      	lsrs	r3, r3, #1
 8008d8a:	441a      	add	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	2b0f      	cmp	r3, #15
 8008d9c:	d908      	bls.n	8008db0 <UART_SetConfig+0x46c>
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da4:	d204      	bcs.n	8008db0 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	60da      	str	r2, [r3, #12]
 8008dae:	e001      	b.n	8008db4 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008dd0:	7ebb      	ldrb	r3, [r7, #26]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3720      	adds	r7, #32
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	00f42400 	.word	0x00f42400
 8008de0:	0801bb64 	.word	0x0801bb64

08008de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00a      	beq.n	8008e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00a      	beq.n	8008e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	f003 0308 	and.w	r3, r3, #8
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00a      	beq.n	8008e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9a:	f003 0320 	and.w	r3, r3, #32
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d01a      	beq.n	8008efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ee2:	d10a      	bne.n	8008efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00a      	beq.n	8008f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	605a      	str	r2, [r3, #4]
  }
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bc80      	pop	{r7}
 8008f24:	4770      	bx	lr

08008f26 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b086      	sub	sp, #24
 8008f2a:	af02      	add	r7, sp, #8
 8008f2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f36:	f7f9 f84f 	bl	8001fd8 <HAL_GetTick>
 8008f3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b08      	cmp	r3, #8
 8008f48:	d10e      	bne.n	8008f68 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f82f 	bl	8008fbc <UART_WaitOnFlagUntilTimeout>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e025      	b.n	8008fb4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b04      	cmp	r3, #4
 8008f74:	d10e      	bne.n	8008f94 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f819 	bl	8008fbc <UART_WaitOnFlagUntilTimeout>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e00f      	b.n	8008fb4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2220      	movs	r2, #32
 8008f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b09c      	sub	sp, #112	; 0x70
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fcc:	e0a9      	b.n	8009122 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd4:	f000 80a5 	beq.w	8009122 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fd8:	f7f8 fffe 	bl	8001fd8 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d302      	bcc.n	8008fee <UART_WaitOnFlagUntilTimeout+0x32>
 8008fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d140      	bne.n	8009070 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ffe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009002:	667b      	str	r3, [r7, #100]	; 0x64
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	461a      	mov	r2, r3
 800900a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800900c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800900e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009010:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009012:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009014:	e841 2300 	strex	r3, r2, [r1]
 8009018:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800901a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e6      	bne.n	8008fee <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3308      	adds	r3, #8
 8009026:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800902a:	e853 3f00 	ldrex	r3, [r3]
 800902e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	f023 0301 	bic.w	r3, r3, #1
 8009036:	663b      	str	r3, [r7, #96]	; 0x60
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3308      	adds	r3, #8
 800903e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009040:	64ba      	str	r2, [r7, #72]	; 0x48
 8009042:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009048:	e841 2300 	strex	r3, r2, [r1]
 800904c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800904e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e5      	bne.n	8009020 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2220      	movs	r2, #32
 8009058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2220      	movs	r2, #32
 8009060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e069      	b.n	8009144 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0304 	and.w	r3, r3, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	d051      	beq.n	8009122 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800908c:	d149      	bne.n	8009122 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009096:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090b6:	637b      	str	r3, [r7, #52]	; 0x34
 80090b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e6      	bne.n	8009098 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3308      	adds	r3, #8
 80090d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	613b      	str	r3, [r7, #16]
   return(result);
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f023 0301 	bic.w	r3, r3, #1
 80090e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3308      	adds	r3, #8
 80090e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090ea:	623a      	str	r2, [r7, #32]
 80090ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	69f9      	ldr	r1, [r7, #28]
 80090f0:	6a3a      	ldr	r2, [r7, #32]
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e5      	bne.n	80090ca <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2220      	movs	r2, #32
 8009102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2220      	movs	r2, #32
 800910a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2220      	movs	r2, #32
 8009112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e010      	b.n	8009144 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	69da      	ldr	r2, [r3, #28]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4013      	ands	r3, r2
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	429a      	cmp	r2, r3
 8009130:	bf0c      	ite	eq
 8009132:	2301      	moveq	r3, #1
 8009134:	2300      	movne	r3, #0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	461a      	mov	r2, r3
 800913a:	79fb      	ldrb	r3, [r7, #7]
 800913c:	429a      	cmp	r2, r3
 800913e:	f43f af46 	beq.w	8008fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3770      	adds	r7, #112	; 0x70
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800914c:	b480      	push	{r7}
 800914e:	b09d      	sub	sp, #116	; 0x74
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	4613      	mov	r3, r2
 8009158:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	88fa      	ldrh	r2, [r7, #6]
 8009164:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	88fa      	ldrh	r2, [r7, #6]
 800916c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800917e:	d10e      	bne.n	800919e <UART_Start_Receive_IT+0x52>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d105      	bne.n	8009194 <UART_Start_Receive_IT+0x48>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800918e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009192:	e02d      	b.n	80091f0 <UART_Start_Receive_IT+0xa4>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	22ff      	movs	r2, #255	; 0xff
 8009198:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800919c:	e028      	b.n	80091f0 <UART_Start_Receive_IT+0xa4>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10d      	bne.n	80091c2 <UART_Start_Receive_IT+0x76>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d104      	bne.n	80091b8 <UART_Start_Receive_IT+0x6c>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	22ff      	movs	r2, #255	; 0xff
 80091b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091b6:	e01b      	b.n	80091f0 <UART_Start_Receive_IT+0xa4>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	227f      	movs	r2, #127	; 0x7f
 80091bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091c0:	e016      	b.n	80091f0 <UART_Start_Receive_IT+0xa4>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091ca:	d10d      	bne.n	80091e8 <UART_Start_Receive_IT+0x9c>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <UART_Start_Receive_IT+0x92>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	227f      	movs	r2, #127	; 0x7f
 80091d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091dc:	e008      	b.n	80091f0 <UART_Start_Receive_IT+0xa4>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	223f      	movs	r2, #63	; 0x3f
 80091e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80091e6:	e003      	b.n	80091f0 <UART_Start_Receive_IT+0xa4>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2222      	movs	r2, #34	; 0x22
 80091fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3308      	adds	r3, #8
 8009206:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009212:	f043 0301 	orr.w	r3, r3, #1
 8009216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3308      	adds	r3, #8
 800921e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009220:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009222:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009226:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800922e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e5      	bne.n	8009200 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800923c:	d14d      	bne.n	80092da <UART_Start_Receive_IT+0x18e>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009244:	88fa      	ldrh	r2, [r7, #6]
 8009246:	429a      	cmp	r2, r3
 8009248:	d347      	bcc.n	80092da <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009252:	d107      	bne.n	8009264 <UART_Start_Receive_IT+0x118>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d103      	bne.n	8009264 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4a38      	ldr	r2, [pc, #224]	; (8009340 <UART_Start_Receive_IT+0x1f4>)
 8009260:	671a      	str	r2, [r3, #112]	; 0x70
 8009262:	e002      	b.n	800926a <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4a37      	ldr	r2, [pc, #220]	; (8009344 <UART_Start_Receive_IT+0x1f8>)
 8009268:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927a:	e853 3f00 	ldrex	r3, [r3]
 800927e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009286:	66bb      	str	r3, [r7, #104]	; 0x68
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	461a      	mov	r2, r3
 800928e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009290:	64bb      	str	r3, [r7, #72]	; 0x48
 8009292:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800929e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e6      	bne.n	8009272 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3308      	adds	r3, #8
 80092aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ba:	667b      	str	r3, [r7, #100]	; 0x64
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3308      	adds	r3, #8
 80092c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80092c4:	637a      	str	r2, [r7, #52]	; 0x34
 80092c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e5      	bne.n	80092a4 <UART_Start_Receive_IT+0x158>
 80092d8:	e02c      	b.n	8009334 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092e2:	d107      	bne.n	80092f4 <UART_Start_Receive_IT+0x1a8>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d103      	bne.n	80092f4 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4a16      	ldr	r2, [pc, #88]	; (8009348 <UART_Start_Receive_IT+0x1fc>)
 80092f0:	671a      	str	r2, [r3, #112]	; 0x70
 80092f2:	e002      	b.n	80092fa <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4a15      	ldr	r2, [pc, #84]	; (800934c <UART_Start_Receive_IT+0x200>)
 80092f8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	613b      	str	r3, [r7, #16]
   return(result);
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009316:	663b      	str	r3, [r7, #96]	; 0x60
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	461a      	mov	r2, r3
 800931e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009320:	623b      	str	r3, [r7, #32]
 8009322:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	69f9      	ldr	r1, [r7, #28]
 8009326:	6a3a      	ldr	r2, [r7, #32]
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	61bb      	str	r3, [r7, #24]
   return(result);
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e6      	bne.n	8009302 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3774      	adds	r7, #116	; 0x74
 800933a:	46bd      	mov	sp, r7
 800933c:	bc80      	pop	{r7}
 800933e:	4770      	bx	lr
 8009340:	08009c0d 	.word	0x08009c0d
 8009344:	08009915 	.word	0x08009915
 8009348:	080097b3 	.word	0x080097b3
 800934c:	08009653 	.word	0x08009653

08009350 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009350:	b480      	push	{r7}
 8009352:	b08f      	sub	sp, #60	; 0x3c
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	e853 3f00 	ldrex	r3, [r3]
 8009364:	61fb      	str	r3, [r7, #28]
   return(result);
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800936c:	637b      	str	r3, [r7, #52]	; 0x34
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009378:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800937c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800937e:	e841 2300 	strex	r3, r2, [r1]
 8009382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1e6      	bne.n	8009358 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3308      	adds	r3, #8
 8009390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	e853 3f00 	ldrex	r3, [r3]
 8009398:	60bb      	str	r3, [r7, #8]
   return(result);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80093a0:	633b      	str	r3, [r7, #48]	; 0x30
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3308      	adds	r3, #8
 80093a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093aa:	61ba      	str	r2, [r7, #24]
 80093ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ae:	6979      	ldr	r1, [r7, #20]
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	e841 2300 	strex	r3, r2, [r1]
 80093b6:	613b      	str	r3, [r7, #16]
   return(result);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1e5      	bne.n	800938a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2220      	movs	r2, #32
 80093c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80093c6:	bf00      	nop
 80093c8:	373c      	adds	r7, #60	; 0x3c
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bc80      	pop	{r7}
 80093ce:	4770      	bx	lr

080093d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b095      	sub	sp, #84	; 0x54
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e0:	e853 3f00 	ldrex	r3, [r3]
 80093e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	461a      	mov	r2, r3
 80093f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f6:	643b      	str	r3, [r7, #64]	; 0x40
 80093f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093fe:	e841 2300 	strex	r3, r2, [r1]
 8009402:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1e6      	bne.n	80093d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3308      	adds	r3, #8
 8009410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	e853 3f00 	ldrex	r3, [r3]
 8009418:	61fb      	str	r3, [r7, #28]
   return(result);
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009420:	f023 0301 	bic.w	r3, r3, #1
 8009424:	64bb      	str	r3, [r7, #72]	; 0x48
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3308      	adds	r3, #8
 800942c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800942e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e3      	bne.n	800940a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009446:	2b01      	cmp	r3, #1
 8009448:	d118      	bne.n	800947c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	60bb      	str	r3, [r7, #8]
   return(result);
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f023 0310 	bic.w	r3, r3, #16
 800945e:	647b      	str	r3, [r7, #68]	; 0x44
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	461a      	mov	r2, r3
 8009466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009468:	61bb      	str	r3, [r7, #24]
 800946a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	6979      	ldr	r1, [r7, #20]
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	e841 2300 	strex	r3, r2, [r1]
 8009474:	613b      	str	r3, [r7, #16]
   return(result);
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e6      	bne.n	800944a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2220      	movs	r2, #32
 8009480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009490:	bf00      	nop
 8009492:	3754      	adds	r7, #84	; 0x54
 8009494:	46bd      	mov	sp, r7
 8009496:	bc80      	pop	{r7}
 8009498:	4770      	bx	lr

0800949a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b090      	sub	sp, #64	; 0x40
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0320 	and.w	r3, r3, #32
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d137      	bne.n	8009526 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80094b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b8:	2200      	movs	r2, #0
 80094ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3308      	adds	r3, #8
 80094c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	623b      	str	r3, [r7, #32]
   return(result);
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80094d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3308      	adds	r3, #8
 80094dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094de:	633a      	str	r2, [r7, #48]	; 0x30
 80094e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e5      	bne.n	80094be <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009506:	637b      	str	r3, [r7, #52]	; 0x34
 8009508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	461a      	mov	r2, r3
 800950e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009510:	61fb      	str	r3, [r7, #28]
 8009512:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	69b9      	ldr	r1, [r7, #24]
 8009516:	69fa      	ldr	r2, [r7, #28]
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	617b      	str	r3, [r7, #20]
   return(result);
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e6      	bne.n	80094f2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009524:	e002      	b.n	800952c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009526:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009528:	f7f9 fa22 	bl	8002970 <HAL_UART_TxCpltCallback>
}
 800952c:	bf00      	nop
 800952e:	3740      	adds	r7, #64	; 0x40
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009540:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff f9e0 	bl	8008908 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009548:	bf00      	nop
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009564:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800956c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009578:	2b80      	cmp	r3, #128	; 0x80
 800957a:	d109      	bne.n	8009590 <UART_DMAError+0x40>
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	2b21      	cmp	r3, #33	; 0x21
 8009580:	d106      	bne.n	8009590 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2200      	movs	r2, #0
 8009586:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800958a:	6978      	ldr	r0, [r7, #20]
 800958c:	f7ff fee0 	bl	8009350 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959a:	2b40      	cmp	r3, #64	; 0x40
 800959c:	d109      	bne.n	80095b2 <UART_DMAError+0x62>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2b22      	cmp	r3, #34	; 0x22
 80095a2:	d106      	bne.n	80095b2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80095ac:	6978      	ldr	r0, [r7, #20]
 80095ae:	f7ff ff0f 	bl	80093d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095b8:	f043 0210 	orr.w	r2, r3, #16
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095c2:	6978      	ldr	r0, [r7, #20]
 80095c4:	f7ff f9a9 	bl	800891a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095c8:	bf00      	nop
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f7ff f993 	bl	800891a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095f4:	bf00      	nop
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	60bb      	str	r3, [r7, #8]
   return(result);
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009618:	61fb      	str	r3, [r7, #28]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	61bb      	str	r3, [r7, #24]
 8009624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6979      	ldr	r1, [r7, #20]
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	613b      	str	r3, [r7, #16]
   return(result);
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e6      	bne.n	8009604 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2220      	movs	r2, #32
 800963a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7f9 f993 	bl	8002970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800964a:	bf00      	nop
 800964c:	3720      	adds	r7, #32
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b096      	sub	sp, #88	; 0x58
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009660:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800966a:	2b22      	cmp	r3, #34	; 0x22
 800966c:	f040 8095 	bne.w	800979a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800967a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800967e:	b2d9      	uxtb	r1, r3
 8009680:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009684:	b2da      	uxtb	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800968a:	400a      	ands	r2, r1
 800968c:	b2d2      	uxtb	r2, r2
 800968e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	3b01      	subs	r3, #1
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d178      	bne.n	80097aa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096cc:	653b      	str	r3, [r7, #80]	; 0x50
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	461a      	mov	r2, r3
 80096d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096d6:	647b      	str	r3, [r7, #68]	; 0x44
 80096d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e6      	bne.n	80096b8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3308      	adds	r3, #8
 80096f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	623b      	str	r3, [r7, #32]
   return(result);
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	f023 0301 	bic.w	r3, r3, #1
 8009700:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3308      	adds	r3, #8
 8009708:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800970a:	633a      	str	r2, [r7, #48]	; 0x30
 800970c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009712:	e841 2300 	strex	r3, r2, [r1]
 8009716:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1e5      	bne.n	80096ea <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2220      	movs	r2, #32
 8009722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009730:	2b01      	cmp	r3, #1
 8009732:	d12e      	bne.n	8009792 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	e853 3f00 	ldrex	r3, [r3]
 8009746:	60fb      	str	r3, [r7, #12]
   return(result);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0310 	bic.w	r3, r3, #16
 800974e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	461a      	mov	r2, r3
 8009756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009758:	61fb      	str	r3, [r7, #28]
 800975a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975c:	69b9      	ldr	r1, [r7, #24]
 800975e:	69fa      	ldr	r2, [r7, #28]
 8009760:	e841 2300 	strex	r3, r2, [r1]
 8009764:	617b      	str	r3, [r7, #20]
   return(result);
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1e6      	bne.n	800973a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	f003 0310 	and.w	r3, r3, #16
 8009776:	2b10      	cmp	r3, #16
 8009778:	d103      	bne.n	8009782 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2210      	movs	r2, #16
 8009780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7ff f8ce 	bl	800892c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009790:	e00b      	b.n	80097aa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7f9 f8fa 	bl	800298c <HAL_UART_RxCpltCallback>
}
 8009798:	e007      	b.n	80097aa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	699a      	ldr	r2, [r3, #24]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0208 	orr.w	r2, r2, #8
 80097a8:	619a      	str	r2, [r3, #24]
}
 80097aa:	bf00      	nop
 80097ac:	3758      	adds	r7, #88	; 0x58
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b096      	sub	sp, #88	; 0x58
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ca:	2b22      	cmp	r3, #34	; 0x22
 80097cc:	f040 8095 	bne.w	80098fa <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80097e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80097e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80097e8:	4013      	ands	r3, r2
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f4:	1c9a      	adds	r2, r3, #2
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009800:	b29b      	uxth	r3, r3
 8009802:	3b01      	subs	r3, #1
 8009804:	b29a      	uxth	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009812:	b29b      	uxth	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	d178      	bne.n	800990a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800982c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	461a      	mov	r2, r3
 8009834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009836:	643b      	str	r3, [r7, #64]	; 0x40
 8009838:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800983c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e6      	bne.n	8009818 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	61fb      	str	r3, [r7, #28]
   return(result);
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	f023 0301 	bic.w	r3, r3, #1
 8009860:	64bb      	str	r3, [r7, #72]	; 0x48
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3308      	adds	r3, #8
 8009868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800986a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800986c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e5      	bne.n	800984a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2220      	movs	r2, #32
 8009882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009890:	2b01      	cmp	r3, #1
 8009892:	d12e      	bne.n	80098f2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	e853 3f00 	ldrex	r3, [r3]
 80098a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f023 0310 	bic.w	r3, r3, #16
 80098ae:	647b      	str	r3, [r7, #68]	; 0x44
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	461a      	mov	r2, r3
 80098b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098b8:	61bb      	str	r3, [r7, #24]
 80098ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	6979      	ldr	r1, [r7, #20]
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	613b      	str	r3, [r7, #16]
   return(result);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e6      	bne.n	800989a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	f003 0310 	and.w	r3, r3, #16
 80098d6:	2b10      	cmp	r3, #16
 80098d8:	d103      	bne.n	80098e2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2210      	movs	r2, #16
 80098e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff f81e 	bl	800892c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098f0:	e00b      	b.n	800990a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7f9 f84a 	bl	800298c <HAL_UART_RxCpltCallback>
}
 80098f8:	e007      	b.n	800990a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	699a      	ldr	r2, [r3, #24]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f042 0208 	orr.w	r2, r2, #8
 8009908:	619a      	str	r2, [r3, #24]
}
 800990a:	bf00      	nop
 800990c:	3758      	adds	r7, #88	; 0x58
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b0a6      	sub	sp, #152	; 0x98
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009922:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800994a:	2b22      	cmp	r3, #34	; 0x22
 800994c:	f040 814f 	bne.w	8009bee <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009956:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800995a:	e0f6      	b.n	8009b4a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009966:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800996a:	b2d9      	uxtb	r1, r3
 800996c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009970:	b2da      	uxtb	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009976:	400a      	ands	r2, r1
 8009978:	b2d2      	uxtb	r2, r2
 800997a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800998c:	b29b      	uxth	r3, r3
 800998e:	3b01      	subs	r3, #1
 8009990:	b29a      	uxth	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	69db      	ldr	r3, [r3, #28]
 800999e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80099a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099a6:	f003 0307 	and.w	r3, r3, #7
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d053      	beq.n	8009a56 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d011      	beq.n	80099de <UART_RxISR_8BIT_FIFOEN+0xca>
 80099ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00b      	beq.n	80099de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2201      	movs	r2, #1
 80099cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099d4:	f043 0201 	orr.w	r2, r3, #1
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099e2:	f003 0302 	and.w	r3, r3, #2
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d011      	beq.n	8009a0e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80099ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2202      	movs	r2, #2
 80099fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a04:	f043 0204 	orr.w	r2, r3, #4
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a12:	f003 0304 	and.w	r3, r3, #4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d011      	beq.n	8009a3e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00b      	beq.n	8009a3e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2204      	movs	r2, #4
 8009a2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a34:	f043 0202 	orr.w	r2, r3, #2
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d006      	beq.n	8009a56 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7fe ff66 	bl	800891a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d173      	bne.n	8009b4a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a6a:	e853 3f00 	ldrex	r3, [r3]
 8009a6e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009a70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a86:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009a8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a8c:	e841 2300 	strex	r3, r2, [r1]
 8009a90:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e4      	bne.n	8009a62 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3308      	adds	r3, #8
 8009a9e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aa2:	e853 3f00 	ldrex	r3, [r3]
 8009aa6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aae:	f023 0301 	bic.w	r3, r3, #1
 8009ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3308      	adds	r3, #8
 8009aba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009abc:	657a      	str	r2, [r7, #84]	; 0x54
 8009abe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ac2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ac4:	e841 2300 	strex	r3, r2, [r1]
 8009ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e3      	bne.n	8009a98 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2220      	movs	r2, #32
 8009ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d12e      	bne.n	8009b44 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af4:	e853 3f00 	ldrex	r3, [r3]
 8009af8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afc:	f023 0310 	bic.w	r3, r3, #16
 8009b00:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8009b0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b12:	e841 2300 	strex	r3, r2, [r1]
 8009b16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1e6      	bne.n	8009aec <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	69db      	ldr	r3, [r3, #28]
 8009b24:	f003 0310 	and.w	r3, r3, #16
 8009b28:	2b10      	cmp	r3, #16
 8009b2a:	d103      	bne.n	8009b34 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2210      	movs	r2, #16
 8009b32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7fe fef5 	bl	800892c <HAL_UARTEx_RxEventCallback>
 8009b42:	e002      	b.n	8009b4a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7f8 ff21 	bl	800298c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d006      	beq.n	8009b60 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f47f aefe 	bne.w	800995c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b66:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b6a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d045      	beq.n	8009bfe <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d23e      	bcs.n	8009bfe <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	3308      	adds	r3, #8
 8009b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	e853 3f00 	ldrex	r3, [r3]
 8009b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b96:	673b      	str	r3, [r7, #112]	; 0x70
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3308      	adds	r3, #8
 8009b9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009ba0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ba8:	e841 2300 	strex	r3, r2, [r1]
 8009bac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e5      	bne.n	8009b80 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a14      	ldr	r2, [pc, #80]	; (8009c08 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009bb8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	e853 3f00 	ldrex	r3, [r3]
 8009bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	f043 0320 	orr.w	r3, r3, #32
 8009bce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd8:	61bb      	str	r3, [r7, #24]
 8009bda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bdc:	6979      	ldr	r1, [r7, #20]
 8009bde:	69ba      	ldr	r2, [r7, #24]
 8009be0:	e841 2300 	strex	r3, r2, [r1]
 8009be4:	613b      	str	r3, [r7, #16]
   return(result);
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1e6      	bne.n	8009bba <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bec:	e007      	b.n	8009bfe <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	699a      	ldr	r2, [r3, #24]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f042 0208 	orr.w	r2, r2, #8
 8009bfc:	619a      	str	r2, [r3, #24]
}
 8009bfe:	bf00      	nop
 8009c00:	3798      	adds	r7, #152	; 0x98
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	08009653 	.word	0x08009653

08009c0c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b0a8      	sub	sp, #160	; 0xa0
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c1a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c42:	2b22      	cmp	r3, #34	; 0x22
 8009c44:	f040 8153 	bne.w	8009eee <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c4e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c52:	e0fa      	b.n	8009e4a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009c66:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009c6a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009c6e:	4013      	ands	r3, r2
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7c:	1c9a      	adds	r2, r3, #2
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	69db      	ldr	r3, [r3, #28]
 8009c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d053      	beq.n	8009d52 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009caa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d011      	beq.n	8009cda <UART_RxISR_16BIT_FIFOEN+0xce>
 8009cb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00b      	beq.n	8009cda <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cd0:	f043 0201 	orr.w	r2, r3, #1
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cde:	f003 0302 	and.w	r3, r3, #2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d011      	beq.n	8009d0a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00b      	beq.n	8009d0a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d00:	f043 0204 	orr.w	r2, r3, #4
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d0e:	f003 0304 	and.w	r3, r3, #4
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d011      	beq.n	8009d3a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00b      	beq.n	8009d3a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2204      	movs	r2, #4
 8009d28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d30:	f043 0202 	orr.w	r2, r3, #2
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d006      	beq.n	8009d52 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7fe fde8 	bl	800891a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d175      	bne.n	8009e4a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d66:	e853 3f00 	ldrex	r3, [r3]
 8009d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d82:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d88:	e841 2300 	strex	r3, r2, [r1]
 8009d8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e4      	bne.n	8009d5e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3308      	adds	r3, #8
 8009d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009daa:	f023 0301 	bic.w	r3, r3, #1
 8009dae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3308      	adds	r3, #8
 8009db8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009dbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8009dbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dc4:	e841 2300 	strex	r3, r2, [r1]
 8009dc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1e1      	bne.n	8009d94 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2220      	movs	r2, #32
 8009dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d12e      	bne.n	8009e44 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfc:	f023 0310 	bic.w	r3, r3, #16
 8009e00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8009e0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e12:	e841 2300 	strex	r3, r2, [r1]
 8009e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1e6      	bne.n	8009dec <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	69db      	ldr	r3, [r3, #28]
 8009e24:	f003 0310 	and.w	r3, r3, #16
 8009e28:	2b10      	cmp	r3, #16
 8009e2a:	d103      	bne.n	8009e34 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2210      	movs	r2, #16
 8009e32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f7fe fd75 	bl	800892c <HAL_UARTEx_RxEventCallback>
 8009e42:	e002      	b.n	8009e4a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7f8 fda1 	bl	800298c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e4a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d006      	beq.n	8009e60 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009e52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e56:	f003 0320 	and.w	r3, r3, #32
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f47f aefa 	bne.w	8009c54 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e66:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e6a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d045      	beq.n	8009efe <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e78:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d23e      	bcs.n	8009efe <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3308      	adds	r3, #8
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	e853 3f00 	ldrex	r3, [r3]
 8009e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e96:	677b      	str	r3, [r7, #116]	; 0x74
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009ea0:	633a      	str	r2, [r7, #48]	; 0x30
 8009ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ea8:	e841 2300 	strex	r3, r2, [r1]
 8009eac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e5      	bne.n	8009e80 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a14      	ldr	r2, [pc, #80]	; (8009f08 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009eb8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	e853 3f00 	ldrex	r3, [r3]
 8009ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f043 0320 	orr.w	r3, r3, #32
 8009ece:	673b      	str	r3, [r7, #112]	; 0x70
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ed8:	61fb      	str	r3, [r7, #28]
 8009eda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009edc:	69b9      	ldr	r1, [r7, #24]
 8009ede:	69fa      	ldr	r2, [r7, #28]
 8009ee0:	e841 2300 	strex	r3, r2, [r1]
 8009ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1e6      	bne.n	8009eba <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009eec:	e007      	b.n	8009efe <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	699a      	ldr	r2, [r3, #24]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f042 0208 	orr.w	r2, r2, #8
 8009efc:	619a      	str	r2, [r3, #24]
}
 8009efe:	bf00      	nop
 8009f00:	37a0      	adds	r7, #160	; 0xa0
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	080097b3 	.word	0x080097b3

08009f0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bc80      	pop	{r7}
 8009f1c:	4770      	bx	lr

08009f1e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b083      	sub	sp, #12
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f26:	bf00      	nop
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bc80      	pop	{r7}
 8009f2e:	4770      	bx	lr

08009f30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bc80      	pop	{r7}
 8009f40:	4770      	bx	lr

08009f42 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b088      	sub	sp, #32
 8009f46:	af02      	add	r7, sp, #8
 8009f48:	60f8      	str	r0, [r7, #12]
 8009f4a:	1d3b      	adds	r3, r7, #4
 8009f4c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d101      	bne.n	8009f62 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009f5e:	2302      	movs	r3, #2
 8009f60:	e046      	b.n	8009ff0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2224      	movs	r2, #36	; 0x24
 8009f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f022 0201 	bic.w	r2, r2, #1
 8009f80:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	430a      	orrs	r2, r1
 8009f94:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d105      	bne.n	8009fa8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009f9c:	1d3b      	adds	r3, r7, #4
 8009f9e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 f911 	bl	800a1ca <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f042 0201 	orr.w	r2, r2, #1
 8009fb6:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fb8:	f7f8 f80e 	bl	8001fd8 <HAL_GetTick>
 8009fbc:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f7fe fff5 	bl	8008fbc <UART_WaitOnFlagUntilTimeout>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	75fb      	strb	r3, [r7, #23]
 8009fdc:	e003      	b.n	8009fe6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2220      	movs	r2, #32
 8009fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b089      	sub	sp, #36	; 0x24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a006:	2b01      	cmp	r3, #1
 800a008:	d101      	bne.n	800a00e <HAL_UARTEx_EnableStopMode+0x16>
 800a00a:	2302      	movs	r3, #2
 800a00c:	e021      	b.n	800a052 <HAL_UARTEx_EnableStopMode+0x5a>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	e853 3f00 	ldrex	r3, [r3]
 800a022:	60bb      	str	r3, [r7, #8]
   return(result);
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	f043 0302 	orr.w	r3, r3, #2
 800a02a:	61fb      	str	r3, [r7, #28]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	461a      	mov	r2, r3
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	61bb      	str	r3, [r7, #24]
 800a036:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a038:	6979      	ldr	r1, [r7, #20]
 800a03a:	69ba      	ldr	r2, [r7, #24]
 800a03c:	e841 2300 	strex	r3, r2, [r1]
 800a040:	613b      	str	r3, [r7, #16]
   return(result);
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e6      	bne.n	800a016 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3724      	adds	r7, #36	; 0x24
 800a056:	46bd      	mov	sp, r7
 800a058:	bc80      	pop	{r7}
 800a05a:	4770      	bx	lr

0800a05c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d101      	bne.n	800a072 <HAL_UARTEx_EnableFifoMode+0x16>
 800a06e:	2302      	movs	r3, #2
 800a070:	e02b      	b.n	800a0ca <HAL_UARTEx_EnableFifoMode+0x6e>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2224      	movs	r2, #36	; 0x24
 800a07e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f022 0201 	bic.w	r2, r2, #1
 800a098:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a0a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f8ac 	bl	800a210 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2220      	movs	r2, #32
 800a0bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d101      	bne.n	800a0ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	e02d      	b.n	800a146 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2224      	movs	r2, #36	; 0x24
 800a0f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f022 0201 	bic.w	r2, r2, #1
 800a110:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	430a      	orrs	r2, r1
 800a124:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f872 	bl	800a210 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2220      	movs	r2, #32
 800a138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d101      	bne.n	800a166 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a162:	2302      	movs	r3, #2
 800a164:	e02d      	b.n	800a1c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2201      	movs	r2, #1
 800a16a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2224      	movs	r2, #36	; 0x24
 800a172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f022 0201 	bic.w	r2, r2, #1
 800a18c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f834 	bl	800a210 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b085      	sub	sp, #20
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	60f8      	str	r0, [r7, #12]
 800a1d2:	1d3b      	adds	r3, r7, #4
 800a1d4:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f023 0210 	bic.w	r2, r3, #16
 800a1e2:	893b      	ldrh	r3, [r7, #8]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	430a      	orrs	r2, r1
 800a1ec:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a1f8:	7abb      	ldrb	r3, [r7, #10]
 800a1fa:	061a      	lsls	r2, r3, #24
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	430a      	orrs	r2, r1
 800a202:	605a      	str	r2, [r3, #4]
}
 800a204:	bf00      	nop
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	bc80      	pop	{r7}
 800a20c:	4770      	bx	lr
	...

0800a210 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d108      	bne.n	800a232 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a230:	e031      	b.n	800a296 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a232:	2308      	movs	r3, #8
 800a234:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a236:	2308      	movs	r3, #8
 800a238:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	0e5b      	lsrs	r3, r3, #25
 800a242:	b2db      	uxtb	r3, r3
 800a244:	f003 0307 	and.w	r3, r3, #7
 800a248:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	0f5b      	lsrs	r3, r3, #29
 800a252:	b2db      	uxtb	r3, r3
 800a254:	f003 0307 	and.w	r3, r3, #7
 800a258:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a25a:	7bbb      	ldrb	r3, [r7, #14]
 800a25c:	7b3a      	ldrb	r2, [r7, #12]
 800a25e:	4910      	ldr	r1, [pc, #64]	; (800a2a0 <UARTEx_SetNbDataToProcess+0x90>)
 800a260:	5c8a      	ldrb	r2, [r1, r2]
 800a262:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a266:	7b3a      	ldrb	r2, [r7, #12]
 800a268:	490e      	ldr	r1, [pc, #56]	; (800a2a4 <UARTEx_SetNbDataToProcess+0x94>)
 800a26a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a26c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a270:	b29a      	uxth	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a278:	7bfb      	ldrb	r3, [r7, #15]
 800a27a:	7b7a      	ldrb	r2, [r7, #13]
 800a27c:	4908      	ldr	r1, [pc, #32]	; (800a2a0 <UARTEx_SetNbDataToProcess+0x90>)
 800a27e:	5c8a      	ldrb	r2, [r1, r2]
 800a280:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a284:	7b7a      	ldrb	r2, [r7, #13]
 800a286:	4907      	ldr	r1, [pc, #28]	; (800a2a4 <UARTEx_SetNbDataToProcess+0x94>)
 800a288:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a28a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a28e:	b29a      	uxth	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a296:	bf00      	nop
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bc80      	pop	{r7}
 800a29e:	4770      	bx	lr
 800a2a0:	0801bb7c 	.word	0x0801bb7c
 800a2a4:	0801bb84 	.word	0x0801bb84

0800a2a8 <CayenneLppReset>:

  /* USER CODE END CayenneLppCursor */
}

void CayenneLppReset(void)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	af00      	add	r7, sp, #0
  CayenneLppCursor = 0;
 800a2ac:	4b03      	ldr	r3, [pc, #12]	; (800a2bc <CayenneLppReset+0x14>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN CayenneLppReset */

  /* USER CODE END CayenneLppReset */
}
 800a2b2:	bf00      	nop
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bc80      	pop	{r7}
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	2000025a 	.word	0x2000025a

0800a2c0 <CayenneLppGetSize>:

uint8_t CayenneLppGetSize(void)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CayenneLppGetSize */

  /* USER CODE END CayenneLppGetSize */
  return CayenneLppCursor;
 800a2c4:	4b02      	ldr	r3, [pc, #8]	; (800a2d0 <CayenneLppGetSize+0x10>)
 800a2c6:	781b      	ldrb	r3, [r3, #0]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bc80      	pop	{r7}
 800a2ce:	4770      	bx	lr
 800a2d0:	2000025a 	.word	0x2000025a

0800a2d4 <CayenneLppCopy>:
  /* USER CODE END CayenneLppGetBuffer */
  return CayenneLppBuffer;
}

uint8_t CayenneLppCopy(uint8_t *dst)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CayenneLppCopy_1 */

  /* USER CODE END CayenneLppCopy_1 */
  UTIL_MEM_cpy_8(dst, CayenneLppBuffer, CayenneLppCursor);
 800a2dc:	4b06      	ldr	r3, [pc, #24]	; (800a2f8 <CayenneLppCopy+0x24>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4905      	ldr	r1, [pc, #20]	; (800a2fc <CayenneLppCopy+0x28>)
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f00f fbb0 	bl	8019a4c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN CayenneLppCopy_2 */

  /* USER CODE END CayenneLppCopy_2 */
  return CayenneLppCursor;
 800a2ec:	4b02      	ldr	r3, [pc, #8]	; (800a2f8 <CayenneLppCopy+0x24>)
 800a2ee:	781b      	ldrb	r3, [r3, #0]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	2000025a 	.word	0x2000025a
 800a2fc:	20000168 	.word	0x20000168

0800a300 <CayenneLppAddDigitalInput>:

uint8_t CayenneLppAddDigitalInput(uint8_t channel, uint8_t value)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	4603      	mov	r3, r0
 800a308:	460a      	mov	r2, r1
 800a30a:	71fb      	strb	r3, [r7, #7]
 800a30c:	4613      	mov	r3, r2
 800a30e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_1 */

  /* USER CODE END CayenneLppAddDigitalInput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_INPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a310:	4b15      	ldr	r3, [pc, #84]	; (800a368 <CayenneLppAddDigitalInput+0x68>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	2bef      	cmp	r3, #239	; 0xef
 800a316:	d901      	bls.n	800a31c <CayenneLppAddDigitalInput+0x1c>
  {
    return 0;
 800a318:	2300      	movs	r3, #0
 800a31a:	e01f      	b.n	800a35c <CayenneLppAddDigitalInput+0x5c>
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a31c:	4b12      	ldr	r3, [pc, #72]	; (800a368 <CayenneLppAddDigitalInput+0x68>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	b2d1      	uxtb	r1, r2
 800a324:	4a10      	ldr	r2, [pc, #64]	; (800a368 <CayenneLppAddDigitalInput+0x68>)
 800a326:	7011      	strb	r1, [r2, #0]
 800a328:	4619      	mov	r1, r3
 800a32a:	4a10      	ldr	r2, [pc, #64]	; (800a36c <CayenneLppAddDigitalInput+0x6c>)
 800a32c:	79fb      	ldrb	r3, [r7, #7]
 800a32e:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_INPUT;
 800a330:	4b0d      	ldr	r3, [pc, #52]	; (800a368 <CayenneLppAddDigitalInput+0x68>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	b2d1      	uxtb	r1, r2
 800a338:	4a0b      	ldr	r2, [pc, #44]	; (800a368 <CayenneLppAddDigitalInput+0x68>)
 800a33a:	7011      	strb	r1, [r2, #0]
 800a33c:	461a      	mov	r2, r3
 800a33e:	4b0b      	ldr	r3, [pc, #44]	; (800a36c <CayenneLppAddDigitalInput+0x6c>)
 800a340:	2100      	movs	r1, #0
 800a342:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 800a344:	4b08      	ldr	r3, [pc, #32]	; (800a368 <CayenneLppAddDigitalInput+0x68>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	b2d1      	uxtb	r1, r2
 800a34c:	4a06      	ldr	r2, [pc, #24]	; (800a368 <CayenneLppAddDigitalInput+0x68>)
 800a34e:	7011      	strb	r1, [r2, #0]
 800a350:	4619      	mov	r1, r3
 800a352:	4a06      	ldr	r2, [pc, #24]	; (800a36c <CayenneLppAddDigitalInput+0x6c>)
 800a354:	79bb      	ldrb	r3, [r7, #6]
 800a356:	5453      	strb	r3, [r2, r1]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_2 */

  /* USER CODE END CayenneLppAddDigitalInput_2 */
  return CayenneLppCursor;
 800a358:	4b03      	ldr	r3, [pc, #12]	; (800a368 <CayenneLppAddDigitalInput+0x68>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	bc80      	pop	{r7}
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	2000025a 	.word	0x2000025a
 800a36c:	20000168 	.word	0x20000168

0800a370 <CayenneLppAddDigitalOutput>:

uint8_t CayenneLppAddDigitalOutput(uint8_t channel, uint8_t value)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	460a      	mov	r2, r1
 800a37a:	71fb      	strb	r3, [r7, #7]
 800a37c:	4613      	mov	r3, r2
 800a37e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_1 */

  /* USER CODE END CayenneLppAddDigitalOutput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_OUTPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a380:	4b15      	ldr	r3, [pc, #84]	; (800a3d8 <CayenneLppAddDigitalOutput+0x68>)
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	2bef      	cmp	r3, #239	; 0xef
 800a386:	d901      	bls.n	800a38c <CayenneLppAddDigitalOutput+0x1c>
  {
    return 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	e01f      	b.n	800a3cc <CayenneLppAddDigitalOutput+0x5c>
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a38c:	4b12      	ldr	r3, [pc, #72]	; (800a3d8 <CayenneLppAddDigitalOutput+0x68>)
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	b2d1      	uxtb	r1, r2
 800a394:	4a10      	ldr	r2, [pc, #64]	; (800a3d8 <CayenneLppAddDigitalOutput+0x68>)
 800a396:	7011      	strb	r1, [r2, #0]
 800a398:	4619      	mov	r1, r3
 800a39a:	4a10      	ldr	r2, [pc, #64]	; (800a3dc <CayenneLppAddDigitalOutput+0x6c>)
 800a39c:	79fb      	ldrb	r3, [r7, #7]
 800a39e:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_OUTPUT;
 800a3a0:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <CayenneLppAddDigitalOutput+0x68>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	1c5a      	adds	r2, r3, #1
 800a3a6:	b2d1      	uxtb	r1, r2
 800a3a8:	4a0b      	ldr	r2, [pc, #44]	; (800a3d8 <CayenneLppAddDigitalOutput+0x68>)
 800a3aa:	7011      	strb	r1, [r2, #0]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <CayenneLppAddDigitalOutput+0x6c>)
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 800a3b4:	4b08      	ldr	r3, [pc, #32]	; (800a3d8 <CayenneLppAddDigitalOutput+0x68>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	1c5a      	adds	r2, r3, #1
 800a3ba:	b2d1      	uxtb	r1, r2
 800a3bc:	4a06      	ldr	r2, [pc, #24]	; (800a3d8 <CayenneLppAddDigitalOutput+0x68>)
 800a3be:	7011      	strb	r1, [r2, #0]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4a06      	ldr	r2, [pc, #24]	; (800a3dc <CayenneLppAddDigitalOutput+0x6c>)
 800a3c4:	79bb      	ldrb	r3, [r7, #6]
 800a3c6:	5453      	strb	r3, [r2, r1]
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_2 */

  /* USER CODE END CayenneLppAddDigitalOutput_2 */
  return CayenneLppCursor;
 800a3c8:	4b03      	ldr	r3, [pc, #12]	; (800a3d8 <CayenneLppAddDigitalOutput+0x68>)
 800a3ca:	781b      	ldrb	r3, [r3, #0]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bc80      	pop	{r7}
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	2000025a 	.word	0x2000025a
 800a3dc:	20000168 	.word	0x20000168

0800a3e0 <CayenneLppAddTemperature>:
  /* USER CODE END CayenneLppAddPresence_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddTemperature(uint8_t channel, int16_t celsius)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	460a      	mov	r2, r1
 800a3ea:	71fb      	strb	r3, [r7, #7]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN CayenneLppAddTemperature_1 */

  /* USER CODE END CayenneLppAddTemperature_1 */
  if ((CayenneLppCursor + LPP_TEMPERATURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a3f0:	4b20      	ldr	r3, [pc, #128]	; (800a474 <CayenneLppAddTemperature+0x94>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2bee      	cmp	r3, #238	; 0xee
 800a3f6:	d901      	bls.n	800a3fc <CayenneLppAddTemperature+0x1c>
  {
    return 0;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e035      	b.n	800a468 <CayenneLppAddTemperature+0x88>
  }
  int16_t val = celsius * 10;
 800a3fc:	88bb      	ldrh	r3, [r7, #4]
 800a3fe:	461a      	mov	r2, r3
 800a400:	0092      	lsls	r2, r2, #2
 800a402:	4413      	add	r3, r2
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	b29b      	uxth	r3, r3
 800a408:	81fb      	strh	r3, [r7, #14]
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a40a:	4b1a      	ldr	r3, [pc, #104]	; (800a474 <CayenneLppAddTemperature+0x94>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	1c5a      	adds	r2, r3, #1
 800a410:	b2d1      	uxtb	r1, r2
 800a412:	4a18      	ldr	r2, [pc, #96]	; (800a474 <CayenneLppAddTemperature+0x94>)
 800a414:	7011      	strb	r1, [r2, #0]
 800a416:	4619      	mov	r1, r3
 800a418:	4a17      	ldr	r2, [pc, #92]	; (800a478 <CayenneLppAddTemperature+0x98>)
 800a41a:	79fb      	ldrb	r3, [r7, #7]
 800a41c:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_TEMPERATURE;
 800a41e:	4b15      	ldr	r3, [pc, #84]	; (800a474 <CayenneLppAddTemperature+0x94>)
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	1c5a      	adds	r2, r3, #1
 800a424:	b2d1      	uxtb	r1, r2
 800a426:	4a13      	ldr	r2, [pc, #76]	; (800a474 <CayenneLppAddTemperature+0x94>)
 800a428:	7011      	strb	r1, [r2, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	4b12      	ldr	r3, [pc, #72]	; (800a478 <CayenneLppAddTemperature+0x98>)
 800a42e:	2167      	movs	r1, #103	; 0x67
 800a430:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 800a432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a436:	121b      	asrs	r3, r3, #8
 800a438:	b219      	sxth	r1, r3
 800a43a:	4b0e      	ldr	r3, [pc, #56]	; (800a474 <CayenneLppAddTemperature+0x94>)
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	b2d0      	uxtb	r0, r2
 800a442:	4a0c      	ldr	r2, [pc, #48]	; (800a474 <CayenneLppAddTemperature+0x94>)
 800a444:	7010      	strb	r0, [r2, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	b2c9      	uxtb	r1, r1
 800a44a:	4b0b      	ldr	r3, [pc, #44]	; (800a478 <CayenneLppAddTemperature+0x98>)
 800a44c:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 800a44e:	4b09      	ldr	r3, [pc, #36]	; (800a474 <CayenneLppAddTemperature+0x94>)
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	1c5a      	adds	r2, r3, #1
 800a454:	b2d1      	uxtb	r1, r2
 800a456:	4a07      	ldr	r2, [pc, #28]	; (800a474 <CayenneLppAddTemperature+0x94>)
 800a458:	7011      	strb	r1, [r2, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	89fb      	ldrh	r3, [r7, #14]
 800a45e:	b2d9      	uxtb	r1, r3
 800a460:	4b05      	ldr	r3, [pc, #20]	; (800a478 <CayenneLppAddTemperature+0x98>)
 800a462:	5499      	strb	r1, [r3, r2]
  /* USER CODE BEGIN CayenneLppAddTemperature_2 */

  /* USER CODE END CayenneLppAddTemperature_2 */
  return CayenneLppCursor;
 800a464:	4b03      	ldr	r3, [pc, #12]	; (800a474 <CayenneLppAddTemperature+0x94>)
 800a466:	781b      	ldrb	r3, [r3, #0]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bc80      	pop	{r7}
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	2000025a 	.word	0x2000025a
 800a478:	20000168 	.word	0x20000168

0800a47c <CayenneLppAddRelativeHumidity>:

uint8_t CayenneLppAddRelativeHumidity(uint8_t channel, uint16_t rh)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	460a      	mov	r2, r1
 800a486:	71fb      	strb	r3, [r7, #7]
 800a488:	4613      	mov	r3, r2
 800a48a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN CayenneLppAddRelativeHumidity_1 */

  /* USER CODE END CayenneLppAddRelativeHumidity_1 */
  if ((CayenneLppCursor + LPP_RELATIVE_HUMIDITY_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a48c:	4b16      	ldr	r3, [pc, #88]	; (800a4e8 <CayenneLppAddRelativeHumidity+0x6c>)
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2bef      	cmp	r3, #239	; 0xef
 800a492:	d901      	bls.n	800a498 <CayenneLppAddRelativeHumidity+0x1c>
  {
    return 0;
 800a494:	2300      	movs	r3, #0
 800a496:	e022      	b.n	800a4de <CayenneLppAddRelativeHumidity+0x62>
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a498:	4b13      	ldr	r3, [pc, #76]	; (800a4e8 <CayenneLppAddRelativeHumidity+0x6c>)
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	b2d1      	uxtb	r1, r2
 800a4a0:	4a11      	ldr	r2, [pc, #68]	; (800a4e8 <CayenneLppAddRelativeHumidity+0x6c>)
 800a4a2:	7011      	strb	r1, [r2, #0]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4a11      	ldr	r2, [pc, #68]	; (800a4ec <CayenneLppAddRelativeHumidity+0x70>)
 800a4a8:	79fb      	ldrb	r3, [r7, #7]
 800a4aa:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_RELATIVE_HUMIDITY;
 800a4ac:	4b0e      	ldr	r3, [pc, #56]	; (800a4e8 <CayenneLppAddRelativeHumidity+0x6c>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	b2d1      	uxtb	r1, r2
 800a4b4:	4a0c      	ldr	r2, [pc, #48]	; (800a4e8 <CayenneLppAddRelativeHumidity+0x6c>)
 800a4b6:	7011      	strb	r1, [r2, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4b0c      	ldr	r3, [pc, #48]	; (800a4ec <CayenneLppAddRelativeHumidity+0x70>)
 800a4bc:	2168      	movs	r1, #104	; 0x68
 800a4be:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = rh * 2;
 800a4c0:	88bb      	ldrh	r3, [r7, #4]
 800a4c2:	b2da      	uxtb	r2, r3
 800a4c4:	4b08      	ldr	r3, [pc, #32]	; (800a4e8 <CayenneLppAddRelativeHumidity+0x6c>)
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	1c59      	adds	r1, r3, #1
 800a4ca:	b2c8      	uxtb	r0, r1
 800a4cc:	4906      	ldr	r1, [pc, #24]	; (800a4e8 <CayenneLppAddRelativeHumidity+0x6c>)
 800a4ce:	7008      	strb	r0, [r1, #0]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	0053      	lsls	r3, r2, #1
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <CayenneLppAddRelativeHumidity+0x70>)
 800a4d8:	545a      	strb	r2, [r3, r1]
  /* USER CODE BEGIN CayenneLppAddRelativeHumidity_2 */

  /* USER CODE END CayenneLppAddRelativeHumidity_2 */
  return CayenneLppCursor;
 800a4da:	4b03      	ldr	r3, [pc, #12]	; (800a4e8 <CayenneLppAddRelativeHumidity+0x6c>)
 800a4dc:	781b      	ldrb	r3, [r3, #0]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bc80      	pop	{r7}
 800a4e6:	4770      	bx	lr
 800a4e8:	2000025a 	.word	0x2000025a
 800a4ec:	20000168 	.word	0x20000168

0800a4f0 <CayenneLppAddBarometricPressure>:
  /* USER CODE END CayenneLppAddAccelerometer_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddBarometricPressure(uint8_t channel, uint16_t hpa)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	460a      	mov	r2, r1
 800a4fa:	71fb      	strb	r3, [r7, #7]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_1 */

  /* USER CODE END CayenneLppAddBarometricPressure_1 */
  if ((CayenneLppCursor + LPP_BAROMETRIC_PRESSURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a500:	4b1f      	ldr	r3, [pc, #124]	; (800a580 <CayenneLppAddBarometricPressure+0x90>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	2bee      	cmp	r3, #238	; 0xee
 800a506:	d901      	bls.n	800a50c <CayenneLppAddBarometricPressure+0x1c>
  {
    return 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	e033      	b.n	800a574 <CayenneLppAddBarometricPressure+0x84>
  }
  hpa *= 10;
 800a50c:	88bb      	ldrh	r3, [r7, #4]
 800a50e:	461a      	mov	r2, r3
 800a510:	0092      	lsls	r2, r2, #2
 800a512:	4413      	add	r3, r2
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	80bb      	strh	r3, [r7, #4]

  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a518:	4b19      	ldr	r3, [pc, #100]	; (800a580 <CayenneLppAddBarometricPressure+0x90>)
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	b2d1      	uxtb	r1, r2
 800a520:	4a17      	ldr	r2, [pc, #92]	; (800a580 <CayenneLppAddBarometricPressure+0x90>)
 800a522:	7011      	strb	r1, [r2, #0]
 800a524:	4619      	mov	r1, r3
 800a526:	4a17      	ldr	r2, [pc, #92]	; (800a584 <CayenneLppAddBarometricPressure+0x94>)
 800a528:	79fb      	ldrb	r3, [r7, #7]
 800a52a:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_BAROMETRIC_PRESSURE;
 800a52c:	4b14      	ldr	r3, [pc, #80]	; (800a580 <CayenneLppAddBarometricPressure+0x90>)
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	1c5a      	adds	r2, r3, #1
 800a532:	b2d1      	uxtb	r1, r2
 800a534:	4a12      	ldr	r2, [pc, #72]	; (800a580 <CayenneLppAddBarometricPressure+0x90>)
 800a536:	7011      	strb	r1, [r2, #0]
 800a538:	461a      	mov	r2, r3
 800a53a:	4b12      	ldr	r3, [pc, #72]	; (800a584 <CayenneLppAddBarometricPressure+0x94>)
 800a53c:	2173      	movs	r1, #115	; 0x73
 800a53e:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = hpa >> 8;
 800a540:	88bb      	ldrh	r3, [r7, #4]
 800a542:	0a1b      	lsrs	r3, r3, #8
 800a544:	b299      	uxth	r1, r3
 800a546:	4b0e      	ldr	r3, [pc, #56]	; (800a580 <CayenneLppAddBarometricPressure+0x90>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	b2d0      	uxtb	r0, r2
 800a54e:	4a0c      	ldr	r2, [pc, #48]	; (800a580 <CayenneLppAddBarometricPressure+0x90>)
 800a550:	7010      	strb	r0, [r2, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	b2c9      	uxtb	r1, r1
 800a556:	4b0b      	ldr	r3, [pc, #44]	; (800a584 <CayenneLppAddBarometricPressure+0x94>)
 800a558:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = hpa;
 800a55a:	4b09      	ldr	r3, [pc, #36]	; (800a580 <CayenneLppAddBarometricPressure+0x90>)
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	b2d1      	uxtb	r1, r2
 800a562:	4a07      	ldr	r2, [pc, #28]	; (800a580 <CayenneLppAddBarometricPressure+0x90>)
 800a564:	7011      	strb	r1, [r2, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	88bb      	ldrh	r3, [r7, #4]
 800a56a:	b2d9      	uxtb	r1, r3
 800a56c:	4b05      	ldr	r3, [pc, #20]	; (800a584 <CayenneLppAddBarometricPressure+0x94>)
 800a56e:	5499      	strb	r1, [r3, r2]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_2 */

  /* USER CODE END CayenneLppAddBarometricPressure_2 */
  return CayenneLppCursor;
 800a570:	4b03      	ldr	r3, [pc, #12]	; (800a580 <CayenneLppAddBarometricPressure+0x90>)
 800a572:	781b      	ldrb	r3, [r3, #0]
}
 800a574:	4618      	mov	r0, r3
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	bc80      	pop	{r7}
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	2000025a 	.word	0x2000025a
 800a584:	20000168 	.word	0x20000168

0800a588 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a58c:	f7f7 fbc8 	bl	8001d20 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a590:	f000 f80a 	bl	800a5a8 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a594:	bf00      	nop
 800a596:	bd80      	pop	{r7, pc}

0800a598 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a59c:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a0:	f00f fe58 	bl	801a254 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a5a4:	bf00      	nop
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	f7f8 fa4e 	bl	8002a50 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800a5b4:	2001      	movs	r0, #1
 800a5b6:	f7f8 fa4b 	bl	8002a50 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800a5ba:	2002      	movs	r0, #2
 800a5bc:	f7f8 fa48 	bl	8002a50 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800a5c0:	2101      	movs	r1, #1
 800a5c2:	2001      	movs	r0, #1
 800a5c4:	f7f8 faf4 	bl	8002bb0 <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9302      	str	r3, [sp, #8]
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	9301      	str	r3, [sp, #4]
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	4b43      	ldr	r3, [pc, #268]	; (800a6e4 <LoRaWAN_Init+0x13c>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	2100      	movs	r1, #0
 800a5da:	2002      	movs	r0, #2
 800a5dc:	f010 fa6e 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	9302      	str	r3, [sp, #8]
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	9301      	str	r3, [sp, #4]
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	4b3e      	ldr	r3, [pc, #248]	; (800a6e8 <LoRaWAN_Init+0x140>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	2002      	movs	r0, #2
 800a5f4:	f010 fa62 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	9302      	str	r3, [sp, #8]
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	2301      	movs	r3, #1
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	4b39      	ldr	r3, [pc, #228]	; (800a6ec <LoRaWAN_Init+0x144>)
 800a606:	2200      	movs	r2, #0
 800a608:	2100      	movs	r1, #0
 800a60a:	2002      	movs	r0, #2
 800a60c:	f010 fa56 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a610:	2300      	movs	r3, #0
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	4b36      	ldr	r3, [pc, #216]	; (800a6f0 <LoRaWAN_Init+0x148>)
 800a616:	2200      	movs	r2, #0
 800a618:	f04f 31ff 	mov.w	r1, #4294967295
 800a61c:	4835      	ldr	r0, [pc, #212]	; (800a6f4 <LoRaWAN_Init+0x14c>)
 800a61e:	f00f ff9f 	bl	801a560 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a622:	2300      	movs	r3, #0
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	4b34      	ldr	r3, [pc, #208]	; (800a6f8 <LoRaWAN_Init+0x150>)
 800a628:	2200      	movs	r2, #0
 800a62a:	f04f 31ff 	mov.w	r1, #4294967295
 800a62e:	4833      	ldr	r0, [pc, #204]	; (800a6fc <LoRaWAN_Init+0x154>)
 800a630:	f00f ff96 	bl	801a560 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a634:	2300      	movs	r3, #0
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	4b31      	ldr	r3, [pc, #196]	; (800a700 <LoRaWAN_Init+0x158>)
 800a63a:	2201      	movs	r2, #1
 800a63c:	f04f 31ff 	mov.w	r1, #4294967295
 800a640:	4830      	ldr	r0, [pc, #192]	; (800a704 <LoRaWAN_Init+0x15c>)
 800a642:	f00f ff8d 	bl	801a560 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800a646:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a64a:	482a      	ldr	r0, [pc, #168]	; (800a6f4 <LoRaWAN_Init+0x14c>)
 800a64c:	f010 f89c 	bl	801a788 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800a650:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a654:	4829      	ldr	r0, [pc, #164]	; (800a6fc <LoRaWAN_Init+0x154>)
 800a656:	f010 f897 	bl	801a788 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 800a65a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a65e:	4829      	ldr	r0, [pc, #164]	; (800a704 <LoRaWAN_Init+0x15c>)
 800a660:	f010 f892 	bl	801a788 <UTIL_TIMER_SetPeriod>

//================================================================================================================================


  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieInit), UTIL_SEQ_RFU, Sensor_Init);
 800a664:	4a28      	ldr	r2, [pc, #160]	; (800a708 <LoRaWAN_Init+0x160>)
 800a666:	2100      	movs	r1, #0
 800a668:	2004      	movs	r0, #4
 800a66a:	f00f fed7 	bl	801a41c <UTIL_SEQ_RegTask>
//  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieData), UTIL_SEQ_RFU, Sensor_Data);
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
 800a66e:	2100      	movs	r1, #0
 800a670:	2004      	movs	r0, #4
 800a672:	f00f fef5 	bl	801a460 <UTIL_SEQ_SetTask>



  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a676:	4a25      	ldr	r2, [pc, #148]	; (800a70c <LoRaWAN_Init+0x164>)
 800a678:	2100      	movs	r1, #0
 800a67a:	2001      	movs	r0, #1
 800a67c:	f00f fece 	bl	801a41c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a680:	4a23      	ldr	r2, [pc, #140]	; (800a710 <LoRaWAN_Init+0x168>)
 800a682:	2100      	movs	r1, #0
 800a684:	2002      	movs	r0, #2
 800a686:	f00f fec9 	bl	801a41c <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a68a:	f000 faa3 	bl	800abd4 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800a68e:	4821      	ldr	r0, [pc, #132]	; (800a714 <LoRaWAN_Init+0x16c>)
 800a690:	f001 ff06 	bl	800c4a0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a694:	4820      	ldr	r0, [pc, #128]	; (800a718 <LoRaWAN_Init+0x170>)
 800a696:	f001 ff4f 	bl	800c538 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a69a:	481a      	ldr	r0, [pc, #104]	; (800a704 <LoRaWAN_Init+0x15c>)
 800a69c:	f00f ff96 	bl	801a5cc <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 800a6a0:	4b1e      	ldr	r3, [pc, #120]	; (800a71c <LoRaWAN_Init+0x174>)
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f002 f87d 	bl	800c7a4 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a6aa:	4b1d      	ldr	r3, [pc, #116]	; (800a720 <LoRaWAN_Init+0x178>)
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d110      	bne.n	800a6d4 <LoRaWAN_Init+0x12c>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	4b1b      	ldr	r3, [pc, #108]	; (800a724 <LoRaWAN_Init+0x17c>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f04f 31ff 	mov.w	r1, #4294967295
 800a6be:	481a      	ldr	r0, [pc, #104]	; (800a728 <LoRaWAN_Init+0x180>)
 800a6c0:	f00f ff4e 	bl	801a560 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800a6c4:	4919      	ldr	r1, [pc, #100]	; (800a72c <LoRaWAN_Init+0x184>)
 800a6c6:	4818      	ldr	r0, [pc, #96]	; (800a728 <LoRaWAN_Init+0x180>)
 800a6c8:	f010 f85e 	bl	801a788 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a6cc:	4816      	ldr	r0, [pc, #88]	; (800a728 <LoRaWAN_Init+0x180>)
 800a6ce:	f00f ff7d 	bl	801a5cc <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a6d2:	e003      	b.n	800a6dc <LoRaWAN_Init+0x134>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800a6d4:	2101      	movs	r1, #1
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	f7f8 fa6a 	bl	8002bb0 <BSP_PB_Init>
}
 800a6dc:	bf00      	nop
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	0801b2d8 	.word	0x0801b2d8
 800a6e8:	0801b2f8 	.word	0x0801b2f8
 800a6ec:	0801b318 	.word	0x0801b318
 800a6f0:	0800aa45 	.word	0x0800aa45
 800a6f4:	20000368 	.word	0x20000368
 800a6f8:	0800aa5b 	.word	0x0800aa5b
 800a6fc:	20000380 	.word	0x20000380
 800a700:	0800aa71 	.word	0x0800aa71
 800a704:	20000398 	.word	0x20000398
 800a708:	08000e51 	.word	0x08000e51
 800a70c:	0800c791 	.word	0x0800c791
 800a710:	0800a8a9 	.word	0x0800a8a9
 800a714:	2000003c 	.word	0x2000003c
 800a718:	20000070 	.word	0x20000070
 800a71c:	20000038 	.word	0x20000038
 800a720:	2000025b 	.word	0x2000025b
 800a724:	0800aa21 	.word	0x0800aa21
 800a728:	2000025c 	.word	0x2000025c
 800a72c:	000dbba0 	.word	0x000dbba0

0800a730 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	4603      	mov	r3, r0
 800a738:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a73a:	88fb      	ldrh	r3, [r7, #6]
 800a73c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a740:	d007      	beq.n	800a752 <HAL_GPIO_EXTI_Callback+0x22>
 800a742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a746:	dc09      	bgt.n	800a75c <HAL_GPIO_EXTI_Callback+0x2c>
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d009      	beq.n	800a760 <HAL_GPIO_EXTI_Callback+0x30>
 800a74c:	2b40      	cmp	r3, #64	; 0x40
 800a74e:	d009      	beq.n	800a764 <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 800a750:	e004      	b.n	800a75c <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a752:	2100      	movs	r1, #0
 800a754:	2002      	movs	r0, #2
 800a756:	f00f fe83 	bl	801a460 <UTIL_SEQ_SetTask>
      break;
 800a75a:	e004      	b.n	800a766 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a75c:	bf00      	nop
 800a75e:	e002      	b.n	800a766 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a760:	bf00      	nop
 800a762:	e000      	b.n	800a766 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a764:	bf00      	nop
  }
}
 800a766:	bf00      	nop
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
	...

0800a770 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a770:	b5b0      	push	{r4, r5, r7, lr}
 800a772:	b088      	sub	sp, #32
 800a774:	af06      	add	r7, sp, #24
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d102      	bne.n	800a786 <OnRxData+0x16>
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d078      	beq.n	800a878 <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 800a786:	2000      	movs	r0, #0
 800a788:	f7f8 f9a6 	bl	8002ad8 <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 800a78c:	483f      	ldr	r0, [pc, #252]	; (800a88c <OnRxData+0x11c>)
 800a78e:	f00f ff1d 	bl	801a5cc <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800a792:	4b3f      	ldr	r3, [pc, #252]	; (800a890 <OnRxData+0x120>)
 800a794:	2200      	movs	r2, #0
 800a796:	2100      	movs	r1, #0
 800a798:	2002      	movs	r0, #2
 800a79a:	f010 f98f 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	4a3a      	ldr	r2, [pc, #232]	; (800a894 <OnRxData+0x124>)
 800a7ac:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a7b0:	6879      	ldr	r1, [r7, #4]
 800a7b2:	7809      	ldrb	r1, [r1, #0]
 800a7b4:	4608      	mov	r0, r1
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800a7bc:	460c      	mov	r4, r1
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800a7c4:	460d      	mov	r5, r1
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800a7cc:	9105      	str	r1, [sp, #20]
 800a7ce:	9504      	str	r5, [sp, #16]
 800a7d0:	9403      	str	r4, [sp, #12]
 800a7d2:	9002      	str	r0, [sp, #8]
 800a7d4:	9201      	str	r2, [sp, #4]
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	4b2f      	ldr	r3, [pc, #188]	; (800a898 <OnRxData+0x128>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	2100      	movs	r1, #0
 800a7de:	2003      	movs	r0, #3
 800a7e0:	f010 f96c 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d021      	beq.n	800a830 <OnRxData+0xc0>
 800a7ec:	2b03      	cmp	r3, #3
 800a7ee:	d145      	bne.n	800a87c <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	785b      	ldrb	r3, [r3, #1]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d117      	bne.n	800a828 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d00e      	beq.n	800a820 <OnRxData+0xb0>
 800a802:	2b02      	cmp	r3, #2
 800a804:	dc12      	bgt.n	800a82c <OnRxData+0xbc>
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <OnRxData+0xa0>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d004      	beq.n	800a818 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800a80e:	e00d      	b.n	800a82c <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 800a810:	2000      	movs	r0, #0
 800a812:	f002 f929 	bl	800ca68 <LmHandlerRequestClass>
              break;
 800a816:	e00a      	b.n	800a82e <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 800a818:	2001      	movs	r0, #1
 800a81a:	f002 f925 	bl	800ca68 <LmHandlerRequestClass>
              break;
 800a81e:	e006      	b.n	800a82e <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 800a820:	2002      	movs	r0, #2
 800a822:	f002 f921 	bl	800ca68 <LmHandlerRequestClass>
              break;
 800a826:	e002      	b.n	800a82e <OnRxData+0xbe>
          }
        }
 800a828:	bf00      	nop
 800a82a:	e02a      	b.n	800a882 <OnRxData+0x112>
              break;
 800a82c:	bf00      	nop
        break;
 800a82e:	e028      	b.n	800a882 <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	785b      	ldrb	r3, [r3, #1]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d123      	bne.n	800a880 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	b2da      	uxtb	r2, r3
 800a844:	4b15      	ldr	r3, [pc, #84]	; (800a89c <OnRxData+0x12c>)
 800a846:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a848:	4b14      	ldr	r3, [pc, #80]	; (800a89c <OnRxData+0x12c>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d109      	bne.n	800a864 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800a850:	4b13      	ldr	r3, [pc, #76]	; (800a8a0 <OnRxData+0x130>)
 800a852:	2200      	movs	r2, #0
 800a854:	2100      	movs	r1, #0
 800a856:	2003      	movs	r0, #3
 800a858:	f010 f930 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 800a85c:	2002      	movs	r0, #2
 800a85e:	f7f8 f95f 	bl	8002b20 <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 800a862:	e00d      	b.n	800a880 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a864:	4b0f      	ldr	r3, [pc, #60]	; (800a8a4 <OnRxData+0x134>)
 800a866:	2200      	movs	r2, #0
 800a868:	2100      	movs	r1, #0
 800a86a:	2003      	movs	r0, #3
 800a86c:	f010 f926 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 800a870:	2002      	movs	r0, #2
 800a872:	f7f8 f931 	bl	8002ad8 <BSP_LED_On>
        break;
 800a876:	e003      	b.n	800a880 <OnRxData+0x110>

      default:

        break;
    }
  }
 800a878:	bf00      	nop
 800a87a:	e002      	b.n	800a882 <OnRxData+0x112>
        break;
 800a87c:	bf00      	nop
 800a87e:	e000      	b.n	800a882 <OnRxData+0x112>
        break;
 800a880:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a882:	bf00      	nop
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bdb0      	pop	{r4, r5, r7, pc}
 800a88a:	bf00      	nop
 800a88c:	20000380 	.word	0x20000380
 800a890:	0801b338 	.word	0x0801b338
 800a894:	20000088 	.word	0x20000088
 800a898:	0801b36c 	.word	0x0801b36c
 800a89c:	20000366 	.word	0x20000366
 800a8a0:	0801b3b4 	.word	0x0801b3b4
 800a8a4:	0801b3c0 	.word	0x0801b3c0

0800a8a8 <SendTxData>:

static void SendTxData(void)
{
 800a8a8:	b590      	push	{r4, r7, lr}
 800a8aa:	b08d      	sub	sp, #52	; 0x34
 800a8ac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t pressure_dec = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t temperature = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	847b      	strh	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

//=============================================================================================
//  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
//=============================================================================================

  EnvSensors_Read(&sensor_data);
 800a8c4:	f107 0308 	add.w	r3, r7, #8
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7f7 fbf5 	bl	80020b8 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 800a8ce:	f7f6 fdf1 	bl	80014b4 <SYS_GetTemperatureLevel>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	121b      	asrs	r3, r3, #8
 800a8d6:	847b      	strh	r3, [r7, #34]	; 0x22
//  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
  pressure    = (uint16_t)(sensor_data.pressure);      /* in hPa / 10 */
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7f6 f91e 	bl	8000b1c <__aeabi_f2uiz>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	84fb      	strh	r3, [r7, #38]	; 0x26
  pressure_dec    = (uint16_t)(sensor_data.pressure * 1000);      /* in hPa / 10 */
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	4947      	ldr	r1, [pc, #284]	; (800aa04 <SendTxData+0x15c>)
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7f5 ffc7 	bl	800087c <__aeabi_fmul>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7f6 f913 	bl	8000b1c <__aeabi_f2uiz>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	84bb      	strh	r3, [r7, #36]	; 0x24
//  pressure = (uint16_t) Sensor_Data();

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a8fa:	4b43      	ldr	r3, [pc, #268]	; (800aa08 <SendTxData+0x160>)
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	701a      	strb	r2, [r3, #0]

#ifdef CAYENNE_LPP
  CayenneLppReset();
 800a900:	f7ff fcd2 	bl	800a2a8 <CayenneLppReset>
  CayenneLppAddBarometricPressure(channel++, pressure);
 800a904:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a908:	1c5a      	adds	r2, r3, #1
 800a90a:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 800a90e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a910:	4611      	mov	r1, r2
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff fdec 	bl	800a4f0 <CayenneLppAddBarometricPressure>
  CayenneLppAddTemperature(channel++, temperature);
 800a918:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a91c:	1c5a      	adds	r2, r3, #1
 800a91e:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 800a922:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800a926:	4611      	mov	r1, r2
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff fd59 	bl	800a3e0 <CayenneLppAddTemperature>
  CayenneLppAddRelativeHumidity(channel++, (uint16_t)(sensor_data.humidity));
 800a92e:	f897 4021 	ldrb.w	r4, [r7, #33]	; 0x21
 800a932:	1c63      	adds	r3, r4, #1
 800a934:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7f6 f8ee 	bl	8000b1c <__aeabi_f2uiz>
 800a940:	4603      	mov	r3, r0
 800a942:	b29b      	uxth	r3, r3
 800a944:	4619      	mov	r1, r3
 800a946:	4620      	mov	r0, r4
 800a948:	f7ff fd98 	bl	800a47c <CayenneLppAddRelativeHumidity>

  if ((LmHandlerParams.ActiveRegion != LORAMAC_REGION_US915) && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AU915)
 800a94c:	4b2f      	ldr	r3, [pc, #188]	; (800aa0c <SendTxData+0x164>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2b08      	cmp	r3, #8
 800a952:	d028      	beq.n	800a9a6 <SendTxData+0xfe>
 800a954:	4b2d      	ldr	r3, [pc, #180]	; (800aa0c <SendTxData+0x164>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d024      	beq.n	800a9a6 <SendTxData+0xfe>
      && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AS923))
 800a95c:	4b2b      	ldr	r3, [pc, #172]	; (800aa0c <SendTxData+0x164>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d020      	beq.n	800a9a6 <SendTxData+0xfe>
  {
    CayenneLppAddDigitalInput(channel++, GetBatteryLevel());
 800a964:	f897 4021 	ldrb.w	r4, [r7, #33]	; 0x21
 800a968:	1c63      	adds	r3, r4, #1
 800a96a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800a96e:	f7f7 f9ff 	bl	8001d70 <GetBatteryLevel>
 800a972:	4603      	mov	r3, r0
 800a974:	4619      	mov	r1, r3
 800a976:	4620      	mov	r0, r4
 800a978:	f7ff fcc2 	bl	800a300 <CayenneLppAddDigitalInput>
    CayenneLppAddBarometricPressure(channel++, pressure_dec);
 800a97c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a980:	1c5a      	adds	r2, r3, #1
 800a982:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 800a986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a988:	4611      	mov	r1, r2
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7ff fdb0 	bl	800a4f0 <CayenneLppAddBarometricPressure>
    CayenneLppAddDigitalOutput(channel++, AppLedStateOn);
 800a990:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 800a99a:	4a1d      	ldr	r2, [pc, #116]	; (800aa10 <SendTxData+0x168>)
 800a99c:	7812      	ldrb	r2, [r2, #0]
 800a99e:	4611      	mov	r1, r2
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7ff fce5 	bl	800a370 <CayenneLppAddDigitalOutput>
  }

  CayenneLppCopy(AppData.Buffer);
 800a9a6:	4b18      	ldr	r3, [pc, #96]	; (800aa08 <SendTxData+0x160>)
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7ff fc92 	bl	800a2d4 <CayenneLppCopy>
  AppData.BufferSize = CayenneLppGetSize();
 800a9b0:	f7ff fc86 	bl	800a2c0 <CayenneLppGetSize>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	4b13      	ldr	r3, [pc, #76]	; (800aa08 <SendTxData+0x160>)
 800a9ba:	705a      	strb	r2, [r3, #1]
  }

  AppData.BufferSize = i;
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a9bc:	1d3a      	adds	r2, r7, #4
 800a9be:	2300      	movs	r3, #0
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	4811      	ldr	r0, [pc, #68]	; (800aa08 <SendTxData+0x160>)
 800a9c4:	f001 ff64 	bl	800c890 <LmHandlerSend>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d106      	bne.n	800a9dc <SendTxData+0x134>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a9ce:	4b11      	ldr	r3, [pc, #68]	; (800aa14 <SendTxData+0x16c>)
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	2001      	movs	r0, #1
 800a9d6:	f010 f871 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800a9da:	e00e      	b.n	800a9fa <SendTxData+0x152>
  else if (nextTxIn > 0)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00b      	beq.n	800a9fa <SendTxData+0x152>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a0c      	ldr	r2, [pc, #48]	; (800aa18 <SendTxData+0x170>)
 800a9e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ea:	099b      	lsrs	r3, r3, #6
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	4b0b      	ldr	r3, [pc, #44]	; (800aa1c <SendTxData+0x174>)
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	2001      	movs	r0, #1
 800a9f6:	f010 f861 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
}
 800a9fa:	bf00      	nop
 800a9fc:	372c      	adds	r7, #44	; 0x2c
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd90      	pop	{r4, r7, pc}
 800aa02:	bf00      	nop
 800aa04:	447a0000 	.word	0x447a0000
 800aa08:	20000080 	.word	0x20000080
 800aa0c:	20000070 	.word	0x20000070
 800aa10:	20000366 	.word	0x20000366
 800aa14:	0801b3cc 	.word	0x0801b3cc
 800aa18:	10624dd3 	.word	0x10624dd3
 800aa1c:	0801b3dc 	.word	0x0801b3dc

0800aa20 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
//	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
	//=============================================================================================


  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800aa28:	2100      	movs	r1, #0
 800aa2a:	2002      	movs	r0, #2
 800aa2c:	f00f fd18 	bl	801a460 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800aa30:	4803      	ldr	r0, [pc, #12]	; (800aa40 <OnTxTimerEvent+0x20>)
 800aa32:	f00f fdcb 	bl	801a5cc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800aa36:	bf00      	nop
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	2000025c 	.word	0x2000025c

0800aa44 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 800aa4c:	2001      	movs	r0, #1
 800aa4e:	f7f8 f867 	bl	8002b20 <BSP_LED_Off>
}
 800aa52:	bf00      	nop
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 800aa62:	2000      	movs	r0, #0
 800aa64:	f7f8 f85c 	bl	8002b20 <BSP_LED_Off>
}
 800aa68:	bf00      	nop
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 800aa78:	2002      	movs	r0, #2
 800aa7a:	f7f8 f875 	bl	8002b68 <BSP_LED_Toggle>
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
	...

0800aa88 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af04      	add	r7, sp, #16
 800aa8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d044      	beq.n	800ab20 <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d040      	beq.n	800ab20 <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 800aa9e:	2001      	movs	r0, #1
 800aaa0:	f7f8 f81a 	bl	8002ad8 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 800aaa4:	4820      	ldr	r0, [pc, #128]	; (800ab28 <OnTxData+0xa0>)
 800aaa6:	f00f fd91 	bl	801a5cc <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800aaaa:	4b20      	ldr	r3, [pc, #128]	; (800ab2c <OnTxData+0xa4>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	2100      	movs	r1, #0
 800aab0:	2002      	movs	r0, #2
 800aab2:	f010 f803 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	7b12      	ldrb	r2, [r2, #12]
 800aabe:	4611      	mov	r1, r2
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800aac6:	4610      	mov	r0, r2
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800aace:	9203      	str	r2, [sp, #12]
 800aad0:	9002      	str	r0, [sp, #8]
 800aad2:	9101      	str	r1, [sp, #4]
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	4b16      	ldr	r3, [pc, #88]	; (800ab30 <OnTxData+0xa8>)
 800aad8:	2200      	movs	r2, #0
 800aada:	2100      	movs	r1, #0
 800aadc:	2003      	movs	r0, #3
 800aade:	f00f ffed 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800aae2:	4b14      	ldr	r3, [pc, #80]	; (800ab34 <OnTxData+0xac>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	2100      	movs	r1, #0
 800aae8:	2003      	movs	r0, #3
 800aaea:	f00f ffe7 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	789b      	ldrb	r3, [r3, #2]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d10e      	bne.n	800ab14 <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	78db      	ldrb	r3, [r3, #3]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <OnTxData+0x7a>
 800aafe:	4b0e      	ldr	r3, [pc, #56]	; (800ab38 <OnTxData+0xb0>)
 800ab00:	e000      	b.n	800ab04 <OnTxData+0x7c>
 800ab02:	4b0e      	ldr	r3, [pc, #56]	; (800ab3c <OnTxData+0xb4>)
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	4b0e      	ldr	r3, [pc, #56]	; (800ab40 <OnTxData+0xb8>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	2003      	movs	r0, #3
 800ab0e:	f00f ffd5 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800ab12:	e005      	b.n	800ab20 <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800ab14:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <OnTxData+0xbc>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	2100      	movs	r1, #0
 800ab1a:	2003      	movs	r0, #3
 800ab1c:	f00f ffce 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
}
 800ab20:	bf00      	nop
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	20000368 	.word	0x20000368
 800ab2c:	0801b3fc 	.word	0x0801b3fc
 800ab30:	0801b430 	.word	0x0801b430
 800ab34:	0801b464 	.word	0x0801b464
 800ab38:	0801b474 	.word	0x0801b474
 800ab3c:	0801b478 	.word	0x0801b478
 800ab40:	0801b480 	.word	0x0801b480
 800ab44:	0801b494 	.word	0x0801b494

0800ab48 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d028      	beq.n	800aba8 <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d11d      	bne.n	800ab9c <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800ab60:	4813      	ldr	r0, [pc, #76]	; (800abb0 <OnJoinRequest+0x68>)
 800ab62:	f00f fda1 	bl	801a6a8 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 800ab66:	2002      	movs	r0, #2
 800ab68:	f7f7 ffda 	bl	8002b20 <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800ab6c:	4b11      	ldr	r3, [pc, #68]	; (800abb4 <OnJoinRequest+0x6c>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2100      	movs	r1, #0
 800ab72:	2002      	movs	r0, #2
 800ab74:	f00f ffa2 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	789b      	ldrb	r3, [r3, #2]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d106      	bne.n	800ab8e <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800ab80:	4b0d      	ldr	r3, [pc, #52]	; (800abb8 <OnJoinRequest+0x70>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	2100      	movs	r1, #0
 800ab86:	2002      	movs	r0, #2
 800ab88:	f00f ff98 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800ab8c:	e00c      	b.n	800aba8 <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	; (800abbc <OnJoinRequest+0x74>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	2100      	movs	r1, #0
 800ab94:	2002      	movs	r0, #2
 800ab96:	f00f ff91 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
}
 800ab9a:	e005      	b.n	800aba8 <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800ab9c:	4b08      	ldr	r3, [pc, #32]	; (800abc0 <OnJoinRequest+0x78>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2100      	movs	r1, #0
 800aba2:	2002      	movs	r0, #2
 800aba4:	f00f ff8a 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20000398 	.word	0x20000398
 800abb4:	0801b4a4 	.word	0x0801b4a4
 800abb8:	0801b4bc 	.word	0x0801b4bc
 800abbc:	0801b4dc 	.word	0x0801b4dc
 800abc0:	0801b4fc 	.word	0x0801b4fc

0800abc4 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800abc8:	2100      	movs	r1, #0
 800abca:	2001      	movs	r0, #1
 800abcc:	f00f fc48 	bl	801a460 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800abd0:	bf00      	nop
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800abd8:	4b15      	ldr	r3, [pc, #84]	; (800ac30 <LoraInfo_Init+0x5c>)
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800abde:	4b14      	ldr	r3, [pc, #80]	; (800ac30 <LoraInfo_Init+0x5c>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800abe4:	4b12      	ldr	r3, [pc, #72]	; (800ac30 <LoraInfo_Init+0x5c>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800abea:	4b11      	ldr	r3, [pc, #68]	; (800ac30 <LoraInfo_Init+0x5c>)
 800abec:	2200      	movs	r2, #0
 800abee:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800abf0:	4b0f      	ldr	r3, [pc, #60]	; (800ac30 <LoraInfo_Init+0x5c>)
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f043 0320 	orr.w	r3, r3, #32
 800abf8:	4a0d      	ldr	r2, [pc, #52]	; (800ac30 <LoraInfo_Init+0x5c>)
 800abfa:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800abfc:	4b0c      	ldr	r3, [pc, #48]	; (800ac30 <LoraInfo_Init+0x5c>)
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10c      	bne.n	800ac1e <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ac04:	4b0b      	ldr	r3, [pc, #44]	; (800ac34 <LoraInfo_Init+0x60>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	2100      	movs	r1, #0
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	f00f ff56 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ac10:	bf00      	nop
 800ac12:	f00f ff41 	bl	801aa98 <UTIL_ADV_TRACE_IsBufferEmpty>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d1fa      	bne.n	800ac12 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ac1c:	e7fe      	b.n	800ac1c <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ac1e:	4b04      	ldr	r3, [pc, #16]	; (800ac30 <LoraInfo_Init+0x5c>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800ac24:	4b02      	ldr	r3, [pc, #8]	; (800ac30 <LoraInfo_Init+0x5c>)
 800ac26:	2203      	movs	r2, #3
 800ac28:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ac2a:	bf00      	nop
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	200003b0 	.word	0x200003b0
 800ac34:	0801b554 	.word	0x0801b554

0800ac38 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ac3c:	4b02      	ldr	r3, [pc, #8]	; (800ac48 <LoraInfo_GetPtr+0x10>)
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bc80      	pop	{r7}
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	200003b0 	.word	0x200003b0

0800ac4c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800ac50:	f7f8 f83f 	bl	8002cd2 <BSP_RADIO_Init>
 800ac54:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	4603      	mov	r3, r0
 800ac62:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ac64:	79fb      	ldrb	r3, [r7, #7]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7f8 f864 	bl	8002d34 <BSP_RADIO_ConfigRFSwitch>
 800ac6c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800ac7a:	f7f8 f8a9 	bl	8002dd0 <BSP_RADIO_GetTxConfig>
 800ac7e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800ac88:	f7f8 f8a9 	bl	8002dde <BSP_RADIO_IsTCXO>
 800ac8c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800ac96:	f7f8 f8a9 	bl	8002dec <BSP_RADIO_IsDCDC>
 800ac9a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	33f1      	adds	r3, #241	; 0xf1
 800acac:	2210      	movs	r2, #16
 800acae:	2100      	movs	r1, #0
 800acb0:	4618      	mov	r0, r3
 800acb2:	f00b fd43 	bl	801673c <memset1>
    ctx->M_n = 0;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	22f0      	movs	r2, #240	; 0xf0
 800acc2:	2100      	movs	r1, #0
 800acc4:	4618      	mov	r0, r3
 800acc6:	f00b fd39 	bl	801673c <memset1>
}
 800acca:	bf00      	nop
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	461a      	mov	r2, r3
 800ace0:	2110      	movs	r1, #16
 800ace2:	6838      	ldr	r0, [r7, #0]
 800ace4:	f000 fe60 	bl	800b9a8 <lorawan_aes_set_key>
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b08c      	sub	sp, #48	; 0x30
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 80a1 	beq.w	800ae4a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad0e:	f1c3 0310 	rsb	r3, r3, #16
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	4293      	cmp	r3, r2
 800ad16:	bf28      	it	cs
 800ad18:	4613      	movcs	r3, r2
 800ad1a:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad28:	4413      	add	r3, r2
 800ad2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad2c:	b292      	uxth	r2, r2
 800ad2e:	68b9      	ldr	r1, [r7, #8]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f00b fcc8 	bl	80166c6 <memcpy1>
        ctx->M_n += mlen;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	441a      	add	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad4c:	2b0f      	cmp	r3, #15
 800ad4e:	f240 808d 	bls.w	800ae6c <AES_CMAC_Update+0x17c>
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad56:	429a      	cmp	r2, r3
 800ad58:	f000 8088 	beq.w	800ae6c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad60:	e015      	b.n	800ad8e <AES_CMAC_Update+0x9e>
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad66:	4413      	add	r3, r2
 800ad68:	33f1      	adds	r3, #241	; 0xf1
 800ad6a:	781a      	ldrb	r2, [r3, #0]
 800ad6c:	68f9      	ldr	r1, [r7, #12]
 800ad6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad70:	440b      	add	r3, r1
 800ad72:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	4053      	eors	r3, r2
 800ad7a:	b2d9      	uxtb	r1, r3
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad80:	4413      	add	r3, r2
 800ad82:	33f1      	adds	r3, #241	; 0xf1
 800ad84:	460a      	mov	r2, r1
 800ad86:	701a      	strb	r2, [r3, #0]
 800ad88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad90:	2b0f      	cmp	r3, #15
 800ad92:	dde6      	ble.n	800ad62 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ad9a:	f107 0314 	add.w	r3, r7, #20
 800ad9e:	2210      	movs	r2, #16
 800ada0:	4618      	mov	r0, r3
 800ada2:	f00b fc90 	bl	80166c6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	f107 0114 	add.w	r1, r7, #20
 800adac:	f107 0314 	add.w	r3, r7, #20
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 fed7 	bl	800bb64 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	33f1      	adds	r3, #241	; 0xf1
 800adba:	f107 0114 	add.w	r1, r7, #20
 800adbe:	2210      	movs	r2, #16
 800adc0:	4618      	mov	r0, r3
 800adc2:	f00b fc80 	bl	80166c6 <memcpy1>

        data += mlen;
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adca:	4413      	add	r3, r2
 800adcc:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	1ad3      	subs	r3, r2, r3
 800add4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800add6:	e038      	b.n	800ae4a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800add8:	2300      	movs	r3, #0
 800adda:	62bb      	str	r3, [r7, #40]	; 0x28
 800addc:	e013      	b.n	800ae06 <AES_CMAC_Update+0x116>
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	4413      	add	r3, r2
 800ade4:	33f1      	adds	r3, #241	; 0xf1
 800ade6:	781a      	ldrb	r2, [r3, #0]
 800ade8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adea:	68b9      	ldr	r1, [r7, #8]
 800adec:	440b      	add	r3, r1
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	4053      	eors	r3, r2
 800adf2:	b2d9      	uxtb	r1, r3
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf8:	4413      	add	r3, r2
 800adfa:	33f1      	adds	r3, #241	; 0xf1
 800adfc:	460a      	mov	r2, r1
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	3301      	adds	r3, #1
 800ae04:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae08:	2b0f      	cmp	r3, #15
 800ae0a:	dde8      	ble.n	800adde <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ae12:	f107 0314 	add.w	r3, r7, #20
 800ae16:	2210      	movs	r2, #16
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f00b fc54 	bl	80166c6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	f107 0114 	add.w	r1, r7, #20
 800ae24:	f107 0314 	add.w	r3, r7, #20
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f000 fe9b 	bl	800bb64 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	33f1      	adds	r3, #241	; 0xf1
 800ae32:	f107 0114 	add.w	r1, r7, #20
 800ae36:	2210      	movs	r2, #16
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f00b fc44 	bl	80166c6 <memcpy1>

        data += 16;
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	3310      	adds	r3, #16
 800ae42:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3b10      	subs	r3, #16
 800ae48:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b10      	cmp	r3, #16
 800ae4e:	d8c3      	bhi.n	800add8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	b292      	uxth	r2, r2
 800ae5a:	68b9      	ldr	r1, [r7, #8]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f00b fc32 	bl	80166c6 <memcpy1>
    ctx->M_n = len;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ae6a:	e000      	b.n	800ae6e <AES_CMAC_Update+0x17e>
            return;
 800ae6c:	bf00      	nop
}
 800ae6e:	3730      	adds	r7, #48	; 0x30
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b092      	sub	sp, #72	; 0x48
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ae7e:	f107 031c 	add.w	r3, r7, #28
 800ae82:	2210      	movs	r2, #16
 800ae84:	2100      	movs	r1, #0
 800ae86:	4618      	mov	r0, r3
 800ae88:	f00b fc58 	bl	801673c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	f107 011c 	add.w	r1, r7, #28
 800ae92:	f107 031c 	add.w	r3, r7, #28
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 fe64 	bl	800bb64 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ae9c:	7f3b      	ldrb	r3, [r7, #28]
 800ae9e:	b25b      	sxtb	r3, r3
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	da31      	bge.n	800af08 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800aea4:	2300      	movs	r3, #0
 800aea6:	647b      	str	r3, [r7, #68]	; 0x44
 800aea8:	e01c      	b.n	800aee4 <AES_CMAC_Final+0x70>
 800aeaa:	f107 021c 	add.w	r2, r7, #28
 800aeae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeb0:	4413      	add	r3, r2
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	b25a      	sxtb	r2, r3
 800aeb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeba:	3301      	adds	r3, #1
 800aebc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800aec0:	440b      	add	r3, r1
 800aec2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aec6:	09db      	lsrs	r3, r3, #7
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	b25b      	sxtb	r3, r3
 800aecc:	4313      	orrs	r3, r2
 800aece:	b25b      	sxtb	r3, r3
 800aed0:	b2d9      	uxtb	r1, r3
 800aed2:	f107 021c 	add.w	r2, r7, #28
 800aed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aed8:	4413      	add	r3, r2
 800aeda:	460a      	mov	r2, r1
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aee0:	3301      	adds	r3, #1
 800aee2:	647b      	str	r3, [r7, #68]	; 0x44
 800aee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aee6:	2b0e      	cmp	r3, #14
 800aee8:	dddf      	ble.n	800aeaa <AES_CMAC_Final+0x36>
 800aeea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800aef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aefa:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800aefe:	43db      	mvns	r3, r3
 800af00:	b2db      	uxtb	r3, r3
 800af02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af06:	e028      	b.n	800af5a <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800af08:	2300      	movs	r3, #0
 800af0a:	643b      	str	r3, [r7, #64]	; 0x40
 800af0c:	e01c      	b.n	800af48 <AES_CMAC_Final+0xd4>
 800af0e:	f107 021c 	add.w	r2, r7, #28
 800af12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af14:	4413      	add	r3, r2
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	005b      	lsls	r3, r3, #1
 800af1a:	b25a      	sxtb	r2, r3
 800af1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af1e:	3301      	adds	r3, #1
 800af20:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800af24:	440b      	add	r3, r1
 800af26:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800af2a:	09db      	lsrs	r3, r3, #7
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	b25b      	sxtb	r3, r3
 800af30:	4313      	orrs	r3, r2
 800af32:	b25b      	sxtb	r3, r3
 800af34:	b2d9      	uxtb	r1, r3
 800af36:	f107 021c 	add.w	r2, r7, #28
 800af3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af3c:	4413      	add	r3, r2
 800af3e:	460a      	mov	r2, r1
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af44:	3301      	adds	r3, #1
 800af46:	643b      	str	r3, [r7, #64]	; 0x40
 800af48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af4a:	2b0e      	cmp	r3, #14
 800af4c:	dddf      	ble.n	800af0e <AES_CMAC_Final+0x9a>
 800af4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af52:	005b      	lsls	r3, r3, #1
 800af54:	b2db      	uxtb	r3, r3
 800af56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af60:	2b10      	cmp	r3, #16
 800af62:	d11d      	bne.n	800afa0 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800af64:	2300      	movs	r3, #0
 800af66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af68:	e016      	b.n	800af98 <AES_CMAC_Final+0x124>
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af6e:	4413      	add	r3, r2
 800af70:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af74:	781a      	ldrb	r2, [r3, #0]
 800af76:	f107 011c 	add.w	r1, r7, #28
 800af7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af7c:	440b      	add	r3, r1
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	4053      	eors	r3, r2
 800af82:	b2d9      	uxtb	r1, r3
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af88:	4413      	add	r3, r2
 800af8a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af8e:	460a      	mov	r2, r1
 800af90:	701a      	strb	r2, [r3, #0]
 800af92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af94:	3301      	adds	r3, #1
 800af96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af9a:	2b0f      	cmp	r3, #15
 800af9c:	dde5      	ble.n	800af6a <AES_CMAC_Final+0xf6>
 800af9e:	e098      	b.n	800b0d2 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800afa0:	7f3b      	ldrb	r3, [r7, #28]
 800afa2:	b25b      	sxtb	r3, r3
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	da31      	bge.n	800b00c <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800afa8:	2300      	movs	r3, #0
 800afaa:	63bb      	str	r3, [r7, #56]	; 0x38
 800afac:	e01c      	b.n	800afe8 <AES_CMAC_Final+0x174>
 800afae:	f107 021c 	add.w	r2, r7, #28
 800afb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb4:	4413      	add	r3, r2
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	005b      	lsls	r3, r3, #1
 800afba:	b25a      	sxtb	r2, r3
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	3301      	adds	r3, #1
 800afc0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800afc4:	440b      	add	r3, r1
 800afc6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800afca:	09db      	lsrs	r3, r3, #7
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	b25b      	sxtb	r3, r3
 800afd0:	4313      	orrs	r3, r2
 800afd2:	b25b      	sxtb	r3, r3
 800afd4:	b2d9      	uxtb	r1, r3
 800afd6:	f107 021c 	add.w	r2, r7, #28
 800afda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afdc:	4413      	add	r3, r2
 800afde:	460a      	mov	r2, r1
 800afe0:	701a      	strb	r2, [r3, #0]
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	3301      	adds	r3, #1
 800afe6:	63bb      	str	r3, [r7, #56]	; 0x38
 800afe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afea:	2b0e      	cmp	r3, #14
 800afec:	dddf      	ble.n	800afae <AES_CMAC_Final+0x13a>
 800afee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800affa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800affe:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b002:	43db      	mvns	r3, r3
 800b004:	b2db      	uxtb	r3, r3
 800b006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b00a:	e028      	b.n	800b05e <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800b00c:	2300      	movs	r3, #0
 800b00e:	637b      	str	r3, [r7, #52]	; 0x34
 800b010:	e01c      	b.n	800b04c <AES_CMAC_Final+0x1d8>
 800b012:	f107 021c 	add.w	r2, r7, #28
 800b016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b018:	4413      	add	r3, r2
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	005b      	lsls	r3, r3, #1
 800b01e:	b25a      	sxtb	r2, r3
 800b020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b022:	3301      	adds	r3, #1
 800b024:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b028:	440b      	add	r3, r1
 800b02a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b02e:	09db      	lsrs	r3, r3, #7
 800b030:	b2db      	uxtb	r3, r3
 800b032:	b25b      	sxtb	r3, r3
 800b034:	4313      	orrs	r3, r2
 800b036:	b25b      	sxtb	r3, r3
 800b038:	b2d9      	uxtb	r1, r3
 800b03a:	f107 021c 	add.w	r2, r7, #28
 800b03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b040:	4413      	add	r3, r2
 800b042:	460a      	mov	r2, r1
 800b044:	701a      	strb	r2, [r3, #0]
 800b046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b048:	3301      	adds	r3, #1
 800b04a:	637b      	str	r3, [r7, #52]	; 0x34
 800b04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b04e:	2b0e      	cmp	r3, #14
 800b050:	dddf      	ble.n	800b012 <AES_CMAC_Final+0x19e>
 800b052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b056:	005b      	lsls	r3, r3, #1
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	4413      	add	r3, r2
 800b068:	2280      	movs	r2, #128	; 0x80
 800b06a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b06e:	e007      	b.n	800b080 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b076:	683a      	ldr	r2, [r7, #0]
 800b078:	4413      	add	r3, r2
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b094:	2b0f      	cmp	r3, #15
 800b096:	d9eb      	bls.n	800b070 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800b098:	2300      	movs	r3, #0
 800b09a:	633b      	str	r3, [r7, #48]	; 0x30
 800b09c:	e016      	b.n	800b0cc <AES_CMAC_Final+0x258>
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b0a8:	781a      	ldrb	r2, [r3, #0]
 800b0aa:	f107 011c 	add.w	r1, r7, #28
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	440b      	add	r3, r1
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	4053      	eors	r3, r2
 800b0b6:	b2d9      	uxtb	r1, r3
 800b0b8:	683a      	ldr	r2, [r7, #0]
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	4413      	add	r3, r2
 800b0be:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b0c2:	460a      	mov	r2, r1
 800b0c4:	701a      	strb	r2, [r3, #0]
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	633b      	str	r3, [r7, #48]	; 0x30
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	2b0f      	cmp	r3, #15
 800b0d0:	dde5      	ble.n	800b09e <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0d6:	e015      	b.n	800b104 <AES_CMAC_Final+0x290>
 800b0d8:	683a      	ldr	r2, [r7, #0]
 800b0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0dc:	4413      	add	r3, r2
 800b0de:	33f1      	adds	r3, #241	; 0xf1
 800b0e0:	781a      	ldrb	r2, [r3, #0]
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e6:	440b      	add	r3, r1
 800b0e8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	4053      	eors	r3, r2
 800b0f0:	b2d9      	uxtb	r1, r3
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f6:	4413      	add	r3, r2
 800b0f8:	33f1      	adds	r3, #241	; 0xf1
 800b0fa:	460a      	mov	r2, r1
 800b0fc:	701a      	strb	r2, [r3, #0]
 800b0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b100:	3301      	adds	r3, #1
 800b102:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b106:	2b0f      	cmp	r3, #15
 800b108:	dde6      	ble.n	800b0d8 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b110:	f107 030c 	add.w	r3, r7, #12
 800b114:	2210      	movs	r2, #16
 800b116:	4618      	mov	r0, r3
 800b118:	f00b fad5 	bl	80166c6 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	f107 030c 	add.w	r3, r7, #12
 800b122:	6879      	ldr	r1, [r7, #4]
 800b124:	4618      	mov	r0, r3
 800b126:	f000 fd1d 	bl	800bb64 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b12a:	f107 031c 	add.w	r3, r7, #28
 800b12e:	2210      	movs	r2, #16
 800b130:	2100      	movs	r1, #0
 800b132:	4618      	mov	r0, r3
 800b134:	f00b fb02 	bl	801673c <memset1>
}
 800b138:	bf00      	nop
 800b13a:	3748      	adds	r7, #72	; 0x48
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	781a      	ldrb	r2, [r3, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	3301      	adds	r3, #1
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	7852      	ldrb	r2, [r2, #1]
 800b15a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3302      	adds	r3, #2
 800b160:	683a      	ldr	r2, [r7, #0]
 800b162:	7892      	ldrb	r2, [r2, #2]
 800b164:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	3303      	adds	r3, #3
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	78d2      	ldrb	r2, [r2, #3]
 800b16e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	3304      	adds	r3, #4
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	7912      	ldrb	r2, [r2, #4]
 800b178:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	3305      	adds	r3, #5
 800b17e:	683a      	ldr	r2, [r7, #0]
 800b180:	7952      	ldrb	r2, [r2, #5]
 800b182:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	3306      	adds	r3, #6
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	7992      	ldrb	r2, [r2, #6]
 800b18c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3307      	adds	r3, #7
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	79d2      	ldrb	r2, [r2, #7]
 800b196:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3308      	adds	r3, #8
 800b19c:	683a      	ldr	r2, [r7, #0]
 800b19e:	7a12      	ldrb	r2, [r2, #8]
 800b1a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	3309      	adds	r3, #9
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	7a52      	ldrb	r2, [r2, #9]
 800b1aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	330a      	adds	r3, #10
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	7a92      	ldrb	r2, [r2, #10]
 800b1b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	330b      	adds	r3, #11
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	7ad2      	ldrb	r2, [r2, #11]
 800b1be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	330c      	adds	r3, #12
 800b1c4:	683a      	ldr	r2, [r7, #0]
 800b1c6:	7b12      	ldrb	r2, [r2, #12]
 800b1c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	330d      	adds	r3, #13
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	7b52      	ldrb	r2, [r2, #13]
 800b1d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	330e      	adds	r3, #14
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	7b92      	ldrb	r2, [r2, #14]
 800b1dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	330f      	adds	r3, #15
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	7bd2      	ldrb	r2, [r2, #15]
 800b1e6:	701a      	strb	r2, [r3, #0]
#endif
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bc80      	pop	{r7}
 800b1f0:	4770      	bx	lr

0800b1f2 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b085      	sub	sp, #20
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	60f8      	str	r0, [r7, #12]
 800b1fa:	60b9      	str	r1, [r7, #8]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b200:	e007      	b.n	800b212 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	1c53      	adds	r3, r2, #1
 800b206:	60bb      	str	r3, [r7, #8]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	1c59      	adds	r1, r3, #1
 800b20c:	60f9      	str	r1, [r7, #12]
 800b20e:	7812      	ldrb	r2, [r2, #0]
 800b210:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	1e5a      	subs	r2, r3, #1
 800b216:	71fa      	strb	r2, [r7, #7]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1f2      	bne.n	800b202 <copy_block_nn+0x10>
}
 800b21c:	bf00      	nop
 800b21e:	bf00      	nop
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	bc80      	pop	{r7}
 800b226:	4770      	bx	lr

0800b228 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	781a      	ldrb	r2, [r3, #0]
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	4053      	eors	r3, r2
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	3301      	adds	r3, #1
 800b246:	7819      	ldrb	r1, [r3, #0]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	3301      	adds	r3, #1
 800b24c:	781a      	ldrb	r2, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	3301      	adds	r3, #1
 800b252:	404a      	eors	r2, r1
 800b254:	b2d2      	uxtb	r2, r2
 800b256:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3302      	adds	r3, #2
 800b25c:	7819      	ldrb	r1, [r3, #0]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	3302      	adds	r3, #2
 800b262:	781a      	ldrb	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3302      	adds	r3, #2
 800b268:	404a      	eors	r2, r1
 800b26a:	b2d2      	uxtb	r2, r2
 800b26c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	3303      	adds	r3, #3
 800b272:	7819      	ldrb	r1, [r3, #0]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	3303      	adds	r3, #3
 800b278:	781a      	ldrb	r2, [r3, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3303      	adds	r3, #3
 800b27e:	404a      	eors	r2, r1
 800b280:	b2d2      	uxtb	r2, r2
 800b282:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	3304      	adds	r3, #4
 800b288:	7819      	ldrb	r1, [r3, #0]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	3304      	adds	r3, #4
 800b28e:	781a      	ldrb	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3304      	adds	r3, #4
 800b294:	404a      	eors	r2, r1
 800b296:	b2d2      	uxtb	r2, r2
 800b298:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	3305      	adds	r3, #5
 800b29e:	7819      	ldrb	r1, [r3, #0]
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	3305      	adds	r3, #5
 800b2a4:	781a      	ldrb	r2, [r3, #0]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3305      	adds	r3, #5
 800b2aa:	404a      	eors	r2, r1
 800b2ac:	b2d2      	uxtb	r2, r2
 800b2ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3306      	adds	r3, #6
 800b2b4:	7819      	ldrb	r1, [r3, #0]
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	3306      	adds	r3, #6
 800b2ba:	781a      	ldrb	r2, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3306      	adds	r3, #6
 800b2c0:	404a      	eors	r2, r1
 800b2c2:	b2d2      	uxtb	r2, r2
 800b2c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	3307      	adds	r3, #7
 800b2ca:	7819      	ldrb	r1, [r3, #0]
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	3307      	adds	r3, #7
 800b2d0:	781a      	ldrb	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3307      	adds	r3, #7
 800b2d6:	404a      	eors	r2, r1
 800b2d8:	b2d2      	uxtb	r2, r2
 800b2da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3308      	adds	r3, #8
 800b2e0:	7819      	ldrb	r1, [r3, #0]
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	3308      	adds	r3, #8
 800b2e6:	781a      	ldrb	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	404a      	eors	r2, r1
 800b2ee:	b2d2      	uxtb	r2, r2
 800b2f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	3309      	adds	r3, #9
 800b2f6:	7819      	ldrb	r1, [r3, #0]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	3309      	adds	r3, #9
 800b2fc:	781a      	ldrb	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	3309      	adds	r3, #9
 800b302:	404a      	eors	r2, r1
 800b304:	b2d2      	uxtb	r2, r2
 800b306:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	330a      	adds	r3, #10
 800b30c:	7819      	ldrb	r1, [r3, #0]
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	330a      	adds	r3, #10
 800b312:	781a      	ldrb	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	330a      	adds	r3, #10
 800b318:	404a      	eors	r2, r1
 800b31a:	b2d2      	uxtb	r2, r2
 800b31c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	330b      	adds	r3, #11
 800b322:	7819      	ldrb	r1, [r3, #0]
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	330b      	adds	r3, #11
 800b328:	781a      	ldrb	r2, [r3, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	330b      	adds	r3, #11
 800b32e:	404a      	eors	r2, r1
 800b330:	b2d2      	uxtb	r2, r2
 800b332:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	330c      	adds	r3, #12
 800b338:	7819      	ldrb	r1, [r3, #0]
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	330c      	adds	r3, #12
 800b33e:	781a      	ldrb	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	330c      	adds	r3, #12
 800b344:	404a      	eors	r2, r1
 800b346:	b2d2      	uxtb	r2, r2
 800b348:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	330d      	adds	r3, #13
 800b34e:	7819      	ldrb	r1, [r3, #0]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	330d      	adds	r3, #13
 800b354:	781a      	ldrb	r2, [r3, #0]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	330d      	adds	r3, #13
 800b35a:	404a      	eors	r2, r1
 800b35c:	b2d2      	uxtb	r2, r2
 800b35e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	330e      	adds	r3, #14
 800b364:	7819      	ldrb	r1, [r3, #0]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	330e      	adds	r3, #14
 800b36a:	781a      	ldrb	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	330e      	adds	r3, #14
 800b370:	404a      	eors	r2, r1
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	330f      	adds	r3, #15
 800b37a:	7819      	ldrb	r1, [r3, #0]
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	330f      	adds	r3, #15
 800b380:	781a      	ldrb	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	330f      	adds	r3, #15
 800b386:	404a      	eors	r2, r1
 800b388:	b2d2      	uxtb	r2, r2
 800b38a:	701a      	strb	r2, [r3, #0]
#endif
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	bc80      	pop	{r7}
 800b394:	4770      	bx	lr

0800b396 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b396:	b480      	push	{r7}
 800b398:	b085      	sub	sp, #20
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	781a      	ldrb	r2, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	4053      	eors	r3, r2
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	7819      	ldrb	r1, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	781a      	ldrb	r2, [r3, #0]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	404a      	eors	r2, r1
 800b3c4:	b2d2      	uxtb	r2, r2
 800b3c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	3302      	adds	r3, #2
 800b3cc:	7819      	ldrb	r1, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3302      	adds	r3, #2
 800b3d2:	781a      	ldrb	r2, [r3, #0]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	3302      	adds	r3, #2
 800b3d8:	404a      	eors	r2, r1
 800b3da:	b2d2      	uxtb	r2, r2
 800b3dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	3303      	adds	r3, #3
 800b3e2:	7819      	ldrb	r1, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	3303      	adds	r3, #3
 800b3e8:	781a      	ldrb	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	3303      	adds	r3, #3
 800b3ee:	404a      	eors	r2, r1
 800b3f0:	b2d2      	uxtb	r2, r2
 800b3f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	3304      	adds	r3, #4
 800b3f8:	7819      	ldrb	r1, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	781a      	ldrb	r2, [r3, #0]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	3304      	adds	r3, #4
 800b404:	404a      	eors	r2, r1
 800b406:	b2d2      	uxtb	r2, r2
 800b408:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	3305      	adds	r3, #5
 800b40e:	7819      	ldrb	r1, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	3305      	adds	r3, #5
 800b414:	781a      	ldrb	r2, [r3, #0]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3305      	adds	r3, #5
 800b41a:	404a      	eors	r2, r1
 800b41c:	b2d2      	uxtb	r2, r2
 800b41e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	3306      	adds	r3, #6
 800b424:	7819      	ldrb	r1, [r3, #0]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	3306      	adds	r3, #6
 800b42a:	781a      	ldrb	r2, [r3, #0]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	3306      	adds	r3, #6
 800b430:	404a      	eors	r2, r1
 800b432:	b2d2      	uxtb	r2, r2
 800b434:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	3307      	adds	r3, #7
 800b43a:	7819      	ldrb	r1, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	3307      	adds	r3, #7
 800b440:	781a      	ldrb	r2, [r3, #0]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3307      	adds	r3, #7
 800b446:	404a      	eors	r2, r1
 800b448:	b2d2      	uxtb	r2, r2
 800b44a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	3308      	adds	r3, #8
 800b450:	7819      	ldrb	r1, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	3308      	adds	r3, #8
 800b456:	781a      	ldrb	r2, [r3, #0]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	3308      	adds	r3, #8
 800b45c:	404a      	eors	r2, r1
 800b45e:	b2d2      	uxtb	r2, r2
 800b460:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	3309      	adds	r3, #9
 800b466:	7819      	ldrb	r1, [r3, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	3309      	adds	r3, #9
 800b46c:	781a      	ldrb	r2, [r3, #0]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	3309      	adds	r3, #9
 800b472:	404a      	eors	r2, r1
 800b474:	b2d2      	uxtb	r2, r2
 800b476:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	330a      	adds	r3, #10
 800b47c:	7819      	ldrb	r1, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	330a      	adds	r3, #10
 800b482:	781a      	ldrb	r2, [r3, #0]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	330a      	adds	r3, #10
 800b488:	404a      	eors	r2, r1
 800b48a:	b2d2      	uxtb	r2, r2
 800b48c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	330b      	adds	r3, #11
 800b492:	7819      	ldrb	r1, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	330b      	adds	r3, #11
 800b498:	781a      	ldrb	r2, [r3, #0]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	330b      	adds	r3, #11
 800b49e:	404a      	eors	r2, r1
 800b4a0:	b2d2      	uxtb	r2, r2
 800b4a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	330c      	adds	r3, #12
 800b4a8:	7819      	ldrb	r1, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	330c      	adds	r3, #12
 800b4ae:	781a      	ldrb	r2, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	330c      	adds	r3, #12
 800b4b4:	404a      	eors	r2, r1
 800b4b6:	b2d2      	uxtb	r2, r2
 800b4b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	330d      	adds	r3, #13
 800b4be:	7819      	ldrb	r1, [r3, #0]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	330d      	adds	r3, #13
 800b4c4:	781a      	ldrb	r2, [r3, #0]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	330d      	adds	r3, #13
 800b4ca:	404a      	eors	r2, r1
 800b4cc:	b2d2      	uxtb	r2, r2
 800b4ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	330e      	adds	r3, #14
 800b4d4:	7819      	ldrb	r1, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	330e      	adds	r3, #14
 800b4da:	781a      	ldrb	r2, [r3, #0]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	330e      	adds	r3, #14
 800b4e0:	404a      	eors	r2, r1
 800b4e2:	b2d2      	uxtb	r2, r2
 800b4e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	330f      	adds	r3, #15
 800b4ea:	7819      	ldrb	r1, [r3, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	330f      	adds	r3, #15
 800b4f0:	781a      	ldrb	r2, [r3, #0]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	330f      	adds	r3, #15
 800b4f6:	404a      	eors	r2, r1
 800b4f8:	b2d2      	uxtb	r2, r2
 800b4fa:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b4fc:	bf00      	nop
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	bc80      	pop	{r7}
 800b504:	4770      	bx	lr

0800b506 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b082      	sub	sp, #8
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7ff fe88 	bl	800b228 <xor_block>
}
 800b518:	bf00      	nop
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	461a      	mov	r2, r3
 800b52e:	4b48      	ldr	r3, [pc, #288]	; (800b650 <shift_sub_rows+0x130>)
 800b530:	5c9a      	ldrb	r2, [r3, r2]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	701a      	strb	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	3304      	adds	r3, #4
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	4619      	mov	r1, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	3304      	adds	r3, #4
 800b542:	4a43      	ldr	r2, [pc, #268]	; (800b650 <shift_sub_rows+0x130>)
 800b544:	5c52      	ldrb	r2, [r2, r1]
 800b546:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3308      	adds	r3, #8
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	4619      	mov	r1, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3308      	adds	r3, #8
 800b554:	4a3e      	ldr	r2, [pc, #248]	; (800b650 <shift_sub_rows+0x130>)
 800b556:	5c52      	ldrb	r2, [r2, r1]
 800b558:	701a      	strb	r2, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	330c      	adds	r3, #12
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	4619      	mov	r1, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	330c      	adds	r3, #12
 800b566:	4a3a      	ldr	r2, [pc, #232]	; (800b650 <shift_sub_rows+0x130>)
 800b568:	5c52      	ldrb	r2, [r2, r1]
 800b56a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	785b      	ldrb	r3, [r3, #1]
 800b570:	73fb      	strb	r3, [r7, #15]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	3305      	adds	r3, #5
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	4619      	mov	r1, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	3301      	adds	r3, #1
 800b57e:	4a34      	ldr	r2, [pc, #208]	; (800b650 <shift_sub_rows+0x130>)
 800b580:	5c52      	ldrb	r2, [r2, r1]
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3309      	adds	r3, #9
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	4619      	mov	r1, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	3305      	adds	r3, #5
 800b590:	4a2f      	ldr	r2, [pc, #188]	; (800b650 <shift_sub_rows+0x130>)
 800b592:	5c52      	ldrb	r2, [r2, r1]
 800b594:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	330d      	adds	r3, #13
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	4619      	mov	r1, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	3309      	adds	r3, #9
 800b5a2:	4a2b      	ldr	r2, [pc, #172]	; (800b650 <shift_sub_rows+0x130>)
 800b5a4:	5c52      	ldrb	r2, [r2, r1]
 800b5a6:	701a      	strb	r2, [r3, #0]
 800b5a8:	7bfa      	ldrb	r2, [r7, #15]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	330d      	adds	r3, #13
 800b5ae:	4928      	ldr	r1, [pc, #160]	; (800b650 <shift_sub_rows+0x130>)
 800b5b0:	5c8a      	ldrb	r2, [r1, r2]
 800b5b2:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	789b      	ldrb	r3, [r3, #2]
 800b5b8:	73fb      	strb	r3, [r7, #15]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	330a      	adds	r3, #10
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3302      	adds	r3, #2
 800b5c6:	4a22      	ldr	r2, [pc, #136]	; (800b650 <shift_sub_rows+0x130>)
 800b5c8:	5c52      	ldrb	r2, [r2, r1]
 800b5ca:	701a      	strb	r2, [r3, #0]
 800b5cc:	7bfa      	ldrb	r2, [r7, #15]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	330a      	adds	r3, #10
 800b5d2:	491f      	ldr	r1, [pc, #124]	; (800b650 <shift_sub_rows+0x130>)
 800b5d4:	5c8a      	ldrb	r2, [r1, r2]
 800b5d6:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	799b      	ldrb	r3, [r3, #6]
 800b5dc:	73fb      	strb	r3, [r7, #15]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	330e      	adds	r3, #14
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3306      	adds	r3, #6
 800b5ea:	4a19      	ldr	r2, [pc, #100]	; (800b650 <shift_sub_rows+0x130>)
 800b5ec:	5c52      	ldrb	r2, [r2, r1]
 800b5ee:	701a      	strb	r2, [r3, #0]
 800b5f0:	7bfa      	ldrb	r2, [r7, #15]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	330e      	adds	r3, #14
 800b5f6:	4916      	ldr	r1, [pc, #88]	; (800b650 <shift_sub_rows+0x130>)
 800b5f8:	5c8a      	ldrb	r2, [r1, r2]
 800b5fa:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	7bdb      	ldrb	r3, [r3, #15]
 800b600:	73fb      	strb	r3, [r7, #15]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	330b      	adds	r3, #11
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	4619      	mov	r1, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	330f      	adds	r3, #15
 800b60e:	4a10      	ldr	r2, [pc, #64]	; (800b650 <shift_sub_rows+0x130>)
 800b610:	5c52      	ldrb	r2, [r2, r1]
 800b612:	701a      	strb	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	3307      	adds	r3, #7
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	4619      	mov	r1, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	330b      	adds	r3, #11
 800b620:	4a0b      	ldr	r2, [pc, #44]	; (800b650 <shift_sub_rows+0x130>)
 800b622:	5c52      	ldrb	r2, [r2, r1]
 800b624:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	3303      	adds	r3, #3
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	4619      	mov	r1, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3307      	adds	r3, #7
 800b632:	4a07      	ldr	r2, [pc, #28]	; (800b650 <shift_sub_rows+0x130>)
 800b634:	5c52      	ldrb	r2, [r2, r1]
 800b636:	701a      	strb	r2, [r3, #0]
 800b638:	7bfa      	ldrb	r2, [r7, #15]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	3303      	adds	r3, #3
 800b63e:	4904      	ldr	r1, [pc, #16]	; (800b650 <shift_sub_rows+0x130>)
 800b640:	5c8a      	ldrb	r2, [r1, r2]
 800b642:	701a      	strb	r2, [r3, #0]
}
 800b644:	bf00      	nop
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	bc80      	pop	{r7}
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	0801bb8c 	.word	0x0801bb8c

0800b654 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b654:	b580      	push	{r7, lr}
 800b656:	b086      	sub	sp, #24
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b65c:	f107 0308 	add.w	r3, r7, #8
 800b660:	6879      	ldr	r1, [r7, #4]
 800b662:	4618      	mov	r0, r3
 800b664:	f7ff fd6c 	bl	800b140 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b668:	7a3b      	ldrb	r3, [r7, #8]
 800b66a:	461a      	mov	r2, r3
 800b66c:	4b9a      	ldr	r3, [pc, #616]	; (800b8d8 <mix_sub_columns+0x284>)
 800b66e:	5c9a      	ldrb	r2, [r3, r2]
 800b670:	7b7b      	ldrb	r3, [r7, #13]
 800b672:	4619      	mov	r1, r3
 800b674:	4b99      	ldr	r3, [pc, #612]	; (800b8dc <mix_sub_columns+0x288>)
 800b676:	5c5b      	ldrb	r3, [r3, r1]
 800b678:	4053      	eors	r3, r2
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	7cbb      	ldrb	r3, [r7, #18]
 800b67e:	4619      	mov	r1, r3
 800b680:	4b97      	ldr	r3, [pc, #604]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b682:	5c5b      	ldrb	r3, [r3, r1]
 800b684:	4053      	eors	r3, r2
 800b686:	b2da      	uxtb	r2, r3
 800b688:	7dfb      	ldrb	r3, [r7, #23]
 800b68a:	4619      	mov	r1, r3
 800b68c:	4b94      	ldr	r3, [pc, #592]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b68e:	5c5b      	ldrb	r3, [r3, r1]
 800b690:	4053      	eors	r3, r2
 800b692:	b2da      	uxtb	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b698:	7a3b      	ldrb	r3, [r7, #8]
 800b69a:	461a      	mov	r2, r3
 800b69c:	4b90      	ldr	r3, [pc, #576]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b69e:	5c9a      	ldrb	r2, [r3, r2]
 800b6a0:	7b7b      	ldrb	r3, [r7, #13]
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	4b8c      	ldr	r3, [pc, #560]	; (800b8d8 <mix_sub_columns+0x284>)
 800b6a6:	5c5b      	ldrb	r3, [r3, r1]
 800b6a8:	4053      	eors	r3, r2
 800b6aa:	b2da      	uxtb	r2, r3
 800b6ac:	7cbb      	ldrb	r3, [r7, #18]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	4b8a      	ldr	r3, [pc, #552]	; (800b8dc <mix_sub_columns+0x288>)
 800b6b2:	5c5b      	ldrb	r3, [r3, r1]
 800b6b4:	4053      	eors	r3, r2
 800b6b6:	b2d9      	uxtb	r1, r3
 800b6b8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	4b88      	ldr	r3, [pc, #544]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b6be:	5c9a      	ldrb	r2, [r3, r2]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	404a      	eors	r2, r1
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b6ca:	7a3b      	ldrb	r3, [r7, #8]
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	4b84      	ldr	r3, [pc, #528]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b6d0:	5c9a      	ldrb	r2, [r3, r2]
 800b6d2:	7b7b      	ldrb	r3, [r7, #13]
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4b82      	ldr	r3, [pc, #520]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b6d8:	5c5b      	ldrb	r3, [r3, r1]
 800b6da:	4053      	eors	r3, r2
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	7cbb      	ldrb	r3, [r7, #18]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4b7d      	ldr	r3, [pc, #500]	; (800b8d8 <mix_sub_columns+0x284>)
 800b6e4:	5c5b      	ldrb	r3, [r3, r1]
 800b6e6:	4053      	eors	r3, r2
 800b6e8:	b2d9      	uxtb	r1, r3
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	4b7b      	ldr	r3, [pc, #492]	; (800b8dc <mix_sub_columns+0x288>)
 800b6f0:	5c9a      	ldrb	r2, [r3, r2]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	3302      	adds	r3, #2
 800b6f6:	404a      	eors	r2, r1
 800b6f8:	b2d2      	uxtb	r2, r2
 800b6fa:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b6fc:	7a3b      	ldrb	r3, [r7, #8]
 800b6fe:	461a      	mov	r2, r3
 800b700:	4b76      	ldr	r3, [pc, #472]	; (800b8dc <mix_sub_columns+0x288>)
 800b702:	5c9a      	ldrb	r2, [r3, r2]
 800b704:	7b7b      	ldrb	r3, [r7, #13]
 800b706:	4619      	mov	r1, r3
 800b708:	4b75      	ldr	r3, [pc, #468]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b70a:	5c5b      	ldrb	r3, [r3, r1]
 800b70c:	4053      	eors	r3, r2
 800b70e:	b2da      	uxtb	r2, r3
 800b710:	7cbb      	ldrb	r3, [r7, #18]
 800b712:	4619      	mov	r1, r3
 800b714:	4b72      	ldr	r3, [pc, #456]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b716:	5c5b      	ldrb	r3, [r3, r1]
 800b718:	4053      	eors	r3, r2
 800b71a:	b2d9      	uxtb	r1, r3
 800b71c:	7dfb      	ldrb	r3, [r7, #23]
 800b71e:	461a      	mov	r2, r3
 800b720:	4b6d      	ldr	r3, [pc, #436]	; (800b8d8 <mix_sub_columns+0x284>)
 800b722:	5c9a      	ldrb	r2, [r3, r2]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3303      	adds	r3, #3
 800b728:	404a      	eors	r2, r1
 800b72a:	b2d2      	uxtb	r2, r2
 800b72c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b72e:	7b3b      	ldrb	r3, [r7, #12]
 800b730:	461a      	mov	r2, r3
 800b732:	4b69      	ldr	r3, [pc, #420]	; (800b8d8 <mix_sub_columns+0x284>)
 800b734:	5c9a      	ldrb	r2, [r3, r2]
 800b736:	7c7b      	ldrb	r3, [r7, #17]
 800b738:	4619      	mov	r1, r3
 800b73a:	4b68      	ldr	r3, [pc, #416]	; (800b8dc <mix_sub_columns+0x288>)
 800b73c:	5c5b      	ldrb	r3, [r3, r1]
 800b73e:	4053      	eors	r3, r2
 800b740:	b2da      	uxtb	r2, r3
 800b742:	7dbb      	ldrb	r3, [r7, #22]
 800b744:	4619      	mov	r1, r3
 800b746:	4b66      	ldr	r3, [pc, #408]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b748:	5c5b      	ldrb	r3, [r3, r1]
 800b74a:	4053      	eors	r3, r2
 800b74c:	b2d9      	uxtb	r1, r3
 800b74e:	7afb      	ldrb	r3, [r7, #11]
 800b750:	461a      	mov	r2, r3
 800b752:	4b63      	ldr	r3, [pc, #396]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b754:	5c9a      	ldrb	r2, [r3, r2]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	3304      	adds	r3, #4
 800b75a:	404a      	eors	r2, r1
 800b75c:	b2d2      	uxtb	r2, r2
 800b75e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b760:	7b3b      	ldrb	r3, [r7, #12]
 800b762:	461a      	mov	r2, r3
 800b764:	4b5e      	ldr	r3, [pc, #376]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b766:	5c9a      	ldrb	r2, [r3, r2]
 800b768:	7c7b      	ldrb	r3, [r7, #17]
 800b76a:	4619      	mov	r1, r3
 800b76c:	4b5a      	ldr	r3, [pc, #360]	; (800b8d8 <mix_sub_columns+0x284>)
 800b76e:	5c5b      	ldrb	r3, [r3, r1]
 800b770:	4053      	eors	r3, r2
 800b772:	b2da      	uxtb	r2, r3
 800b774:	7dbb      	ldrb	r3, [r7, #22]
 800b776:	4619      	mov	r1, r3
 800b778:	4b58      	ldr	r3, [pc, #352]	; (800b8dc <mix_sub_columns+0x288>)
 800b77a:	5c5b      	ldrb	r3, [r3, r1]
 800b77c:	4053      	eors	r3, r2
 800b77e:	b2d9      	uxtb	r1, r3
 800b780:	7afb      	ldrb	r3, [r7, #11]
 800b782:	461a      	mov	r2, r3
 800b784:	4b56      	ldr	r3, [pc, #344]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b786:	5c9a      	ldrb	r2, [r3, r2]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	3305      	adds	r3, #5
 800b78c:	404a      	eors	r2, r1
 800b78e:	b2d2      	uxtb	r2, r2
 800b790:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b792:	7b3b      	ldrb	r3, [r7, #12]
 800b794:	461a      	mov	r2, r3
 800b796:	4b52      	ldr	r3, [pc, #328]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b798:	5c9a      	ldrb	r2, [r3, r2]
 800b79a:	7c7b      	ldrb	r3, [r7, #17]
 800b79c:	4619      	mov	r1, r3
 800b79e:	4b50      	ldr	r3, [pc, #320]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b7a0:	5c5b      	ldrb	r3, [r3, r1]
 800b7a2:	4053      	eors	r3, r2
 800b7a4:	b2da      	uxtb	r2, r3
 800b7a6:	7dbb      	ldrb	r3, [r7, #22]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4b4b      	ldr	r3, [pc, #300]	; (800b8d8 <mix_sub_columns+0x284>)
 800b7ac:	5c5b      	ldrb	r3, [r3, r1]
 800b7ae:	4053      	eors	r3, r2
 800b7b0:	b2d9      	uxtb	r1, r3
 800b7b2:	7afb      	ldrb	r3, [r7, #11]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	4b49      	ldr	r3, [pc, #292]	; (800b8dc <mix_sub_columns+0x288>)
 800b7b8:	5c9a      	ldrb	r2, [r3, r2]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	3306      	adds	r3, #6
 800b7be:	404a      	eors	r2, r1
 800b7c0:	b2d2      	uxtb	r2, r2
 800b7c2:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b7c4:	7b3b      	ldrb	r3, [r7, #12]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	4b44      	ldr	r3, [pc, #272]	; (800b8dc <mix_sub_columns+0x288>)
 800b7ca:	5c9a      	ldrb	r2, [r3, r2]
 800b7cc:	7c7b      	ldrb	r3, [r7, #17]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	4b43      	ldr	r3, [pc, #268]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b7d2:	5c5b      	ldrb	r3, [r3, r1]
 800b7d4:	4053      	eors	r3, r2
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	7dbb      	ldrb	r3, [r7, #22]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	4b40      	ldr	r3, [pc, #256]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b7de:	5c5b      	ldrb	r3, [r3, r1]
 800b7e0:	4053      	eors	r3, r2
 800b7e2:	b2d9      	uxtb	r1, r3
 800b7e4:	7afb      	ldrb	r3, [r7, #11]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	4b3b      	ldr	r3, [pc, #236]	; (800b8d8 <mix_sub_columns+0x284>)
 800b7ea:	5c9a      	ldrb	r2, [r3, r2]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	3307      	adds	r3, #7
 800b7f0:	404a      	eors	r2, r1
 800b7f2:	b2d2      	uxtb	r2, r2
 800b7f4:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b7f6:	7c3b      	ldrb	r3, [r7, #16]
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	4b37      	ldr	r3, [pc, #220]	; (800b8d8 <mix_sub_columns+0x284>)
 800b7fc:	5c9a      	ldrb	r2, [r3, r2]
 800b7fe:	7d7b      	ldrb	r3, [r7, #21]
 800b800:	4619      	mov	r1, r3
 800b802:	4b36      	ldr	r3, [pc, #216]	; (800b8dc <mix_sub_columns+0x288>)
 800b804:	5c5b      	ldrb	r3, [r3, r1]
 800b806:	4053      	eors	r3, r2
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	7abb      	ldrb	r3, [r7, #10]
 800b80c:	4619      	mov	r1, r3
 800b80e:	4b34      	ldr	r3, [pc, #208]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b810:	5c5b      	ldrb	r3, [r3, r1]
 800b812:	4053      	eors	r3, r2
 800b814:	b2d9      	uxtb	r1, r3
 800b816:	7bfb      	ldrb	r3, [r7, #15]
 800b818:	461a      	mov	r2, r3
 800b81a:	4b31      	ldr	r3, [pc, #196]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b81c:	5c9a      	ldrb	r2, [r3, r2]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	3308      	adds	r3, #8
 800b822:	404a      	eors	r2, r1
 800b824:	b2d2      	uxtb	r2, r2
 800b826:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b828:	7c3b      	ldrb	r3, [r7, #16]
 800b82a:	461a      	mov	r2, r3
 800b82c:	4b2c      	ldr	r3, [pc, #176]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b82e:	5c9a      	ldrb	r2, [r3, r2]
 800b830:	7d7b      	ldrb	r3, [r7, #21]
 800b832:	4619      	mov	r1, r3
 800b834:	4b28      	ldr	r3, [pc, #160]	; (800b8d8 <mix_sub_columns+0x284>)
 800b836:	5c5b      	ldrb	r3, [r3, r1]
 800b838:	4053      	eors	r3, r2
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	7abb      	ldrb	r3, [r7, #10]
 800b83e:	4619      	mov	r1, r3
 800b840:	4b26      	ldr	r3, [pc, #152]	; (800b8dc <mix_sub_columns+0x288>)
 800b842:	5c5b      	ldrb	r3, [r3, r1]
 800b844:	4053      	eors	r3, r2
 800b846:	b2d9      	uxtb	r1, r3
 800b848:	7bfb      	ldrb	r3, [r7, #15]
 800b84a:	461a      	mov	r2, r3
 800b84c:	4b24      	ldr	r3, [pc, #144]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b84e:	5c9a      	ldrb	r2, [r3, r2]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	3309      	adds	r3, #9
 800b854:	404a      	eors	r2, r1
 800b856:	b2d2      	uxtb	r2, r2
 800b858:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b85a:	7c3b      	ldrb	r3, [r7, #16]
 800b85c:	461a      	mov	r2, r3
 800b85e:	4b20      	ldr	r3, [pc, #128]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b860:	5c9a      	ldrb	r2, [r3, r2]
 800b862:	7d7b      	ldrb	r3, [r7, #21]
 800b864:	4619      	mov	r1, r3
 800b866:	4b1e      	ldr	r3, [pc, #120]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b868:	5c5b      	ldrb	r3, [r3, r1]
 800b86a:	4053      	eors	r3, r2
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	7abb      	ldrb	r3, [r7, #10]
 800b870:	4619      	mov	r1, r3
 800b872:	4b19      	ldr	r3, [pc, #100]	; (800b8d8 <mix_sub_columns+0x284>)
 800b874:	5c5b      	ldrb	r3, [r3, r1]
 800b876:	4053      	eors	r3, r2
 800b878:	b2d9      	uxtb	r1, r3
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
 800b87c:	461a      	mov	r2, r3
 800b87e:	4b17      	ldr	r3, [pc, #92]	; (800b8dc <mix_sub_columns+0x288>)
 800b880:	5c9a      	ldrb	r2, [r3, r2]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	330a      	adds	r3, #10
 800b886:	404a      	eors	r2, r1
 800b888:	b2d2      	uxtb	r2, r2
 800b88a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b88c:	7c3b      	ldrb	r3, [r7, #16]
 800b88e:	461a      	mov	r2, r3
 800b890:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <mix_sub_columns+0x288>)
 800b892:	5c9a      	ldrb	r2, [r3, r2]
 800b894:	7d7b      	ldrb	r3, [r7, #21]
 800b896:	4619      	mov	r1, r3
 800b898:	4b11      	ldr	r3, [pc, #68]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b89a:	5c5b      	ldrb	r3, [r3, r1]
 800b89c:	4053      	eors	r3, r2
 800b89e:	b2da      	uxtb	r2, r3
 800b8a0:	7abb      	ldrb	r3, [r7, #10]
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4b0e      	ldr	r3, [pc, #56]	; (800b8e0 <mix_sub_columns+0x28c>)
 800b8a6:	5c5b      	ldrb	r3, [r3, r1]
 800b8a8:	4053      	eors	r3, r2
 800b8aa:	b2d9      	uxtb	r1, r3
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <mix_sub_columns+0x284>)
 800b8b2:	5c9a      	ldrb	r2, [r3, r2]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	330b      	adds	r3, #11
 800b8b8:	404a      	eors	r2, r1
 800b8ba:	b2d2      	uxtb	r2, r2
 800b8bc:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b8be:	7d3b      	ldrb	r3, [r7, #20]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <mix_sub_columns+0x284>)
 800b8c4:	5c9a      	ldrb	r2, [r3, r2]
 800b8c6:	7a7b      	ldrb	r3, [r7, #9]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	4b04      	ldr	r3, [pc, #16]	; (800b8dc <mix_sub_columns+0x288>)
 800b8cc:	5c5b      	ldrb	r3, [r3, r1]
 800b8ce:	4053      	eors	r3, r2
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	e005      	b.n	800b8e4 <mix_sub_columns+0x290>
 800b8d8:	0801bc8c 	.word	0x0801bc8c
 800b8dc:	0801bd8c 	.word	0x0801bd8c
 800b8e0:	0801bb8c 	.word	0x0801bb8c
 800b8e4:	4b2d      	ldr	r3, [pc, #180]	; (800b99c <mix_sub_columns+0x348>)
 800b8e6:	5c5b      	ldrb	r3, [r3, r1]
 800b8e8:	4053      	eors	r3, r2
 800b8ea:	b2d9      	uxtb	r1, r3
 800b8ec:	7cfb      	ldrb	r3, [r7, #19]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	4b2a      	ldr	r3, [pc, #168]	; (800b99c <mix_sub_columns+0x348>)
 800b8f2:	5c9a      	ldrb	r2, [r3, r2]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	330c      	adds	r3, #12
 800b8f8:	404a      	eors	r2, r1
 800b8fa:	b2d2      	uxtb	r2, r2
 800b8fc:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b8fe:	7d3b      	ldrb	r3, [r7, #20]
 800b900:	461a      	mov	r2, r3
 800b902:	4b26      	ldr	r3, [pc, #152]	; (800b99c <mix_sub_columns+0x348>)
 800b904:	5c9a      	ldrb	r2, [r3, r2]
 800b906:	7a7b      	ldrb	r3, [r7, #9]
 800b908:	4619      	mov	r1, r3
 800b90a:	4b25      	ldr	r3, [pc, #148]	; (800b9a0 <mix_sub_columns+0x34c>)
 800b90c:	5c5b      	ldrb	r3, [r3, r1]
 800b90e:	4053      	eors	r3, r2
 800b910:	b2da      	uxtb	r2, r3
 800b912:	7bbb      	ldrb	r3, [r7, #14]
 800b914:	4619      	mov	r1, r3
 800b916:	4b23      	ldr	r3, [pc, #140]	; (800b9a4 <mix_sub_columns+0x350>)
 800b918:	5c5b      	ldrb	r3, [r3, r1]
 800b91a:	4053      	eors	r3, r2
 800b91c:	b2d9      	uxtb	r1, r3
 800b91e:	7cfb      	ldrb	r3, [r7, #19]
 800b920:	461a      	mov	r2, r3
 800b922:	4b1e      	ldr	r3, [pc, #120]	; (800b99c <mix_sub_columns+0x348>)
 800b924:	5c9a      	ldrb	r2, [r3, r2]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	330d      	adds	r3, #13
 800b92a:	404a      	eors	r2, r1
 800b92c:	b2d2      	uxtb	r2, r2
 800b92e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b930:	7d3b      	ldrb	r3, [r7, #20]
 800b932:	461a      	mov	r2, r3
 800b934:	4b19      	ldr	r3, [pc, #100]	; (800b99c <mix_sub_columns+0x348>)
 800b936:	5c9a      	ldrb	r2, [r3, r2]
 800b938:	7a7b      	ldrb	r3, [r7, #9]
 800b93a:	4619      	mov	r1, r3
 800b93c:	4b17      	ldr	r3, [pc, #92]	; (800b99c <mix_sub_columns+0x348>)
 800b93e:	5c5b      	ldrb	r3, [r3, r1]
 800b940:	4053      	eors	r3, r2
 800b942:	b2da      	uxtb	r2, r3
 800b944:	7bbb      	ldrb	r3, [r7, #14]
 800b946:	4619      	mov	r1, r3
 800b948:	4b15      	ldr	r3, [pc, #84]	; (800b9a0 <mix_sub_columns+0x34c>)
 800b94a:	5c5b      	ldrb	r3, [r3, r1]
 800b94c:	4053      	eors	r3, r2
 800b94e:	b2d9      	uxtb	r1, r3
 800b950:	7cfb      	ldrb	r3, [r7, #19]
 800b952:	461a      	mov	r2, r3
 800b954:	4b13      	ldr	r3, [pc, #76]	; (800b9a4 <mix_sub_columns+0x350>)
 800b956:	5c9a      	ldrb	r2, [r3, r2]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	330e      	adds	r3, #14
 800b95c:	404a      	eors	r2, r1
 800b95e:	b2d2      	uxtb	r2, r2
 800b960:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b962:	7d3b      	ldrb	r3, [r7, #20]
 800b964:	461a      	mov	r2, r3
 800b966:	4b0f      	ldr	r3, [pc, #60]	; (800b9a4 <mix_sub_columns+0x350>)
 800b968:	5c9a      	ldrb	r2, [r3, r2]
 800b96a:	7a7b      	ldrb	r3, [r7, #9]
 800b96c:	4619      	mov	r1, r3
 800b96e:	4b0b      	ldr	r3, [pc, #44]	; (800b99c <mix_sub_columns+0x348>)
 800b970:	5c5b      	ldrb	r3, [r3, r1]
 800b972:	4053      	eors	r3, r2
 800b974:	b2da      	uxtb	r2, r3
 800b976:	7bbb      	ldrb	r3, [r7, #14]
 800b978:	4619      	mov	r1, r3
 800b97a:	4b08      	ldr	r3, [pc, #32]	; (800b99c <mix_sub_columns+0x348>)
 800b97c:	5c5b      	ldrb	r3, [r3, r1]
 800b97e:	4053      	eors	r3, r2
 800b980:	b2d9      	uxtb	r1, r3
 800b982:	7cfb      	ldrb	r3, [r7, #19]
 800b984:	461a      	mov	r2, r3
 800b986:	4b06      	ldr	r3, [pc, #24]	; (800b9a0 <mix_sub_columns+0x34c>)
 800b988:	5c9a      	ldrb	r2, [r3, r2]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	330f      	adds	r3, #15
 800b98e:	404a      	eors	r2, r1
 800b990:	b2d2      	uxtb	r2, r2
 800b992:	701a      	strb	r2, [r3, #0]
  }
 800b994:	bf00      	nop
 800b996:	3718      	adds	r7, #24
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	0801bb8c 	.word	0x0801bb8c
 800b9a0:	0801bc8c 	.word	0x0801bc8c
 800b9a4:	0801bd8c 	.word	0x0801bd8c

0800b9a8 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	607a      	str	r2, [r7, #4]
 800b9b4:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b9b6:	7afb      	ldrb	r3, [r7, #11]
 800b9b8:	3b10      	subs	r3, #16
 800b9ba:	2b10      	cmp	r3, #16
 800b9bc:	bf8c      	ite	hi
 800b9be:	2201      	movhi	r2, #1
 800b9c0:	2200      	movls	r2, #0
 800b9c2:	b2d2      	uxtb	r2, r2
 800b9c4:	2a00      	cmp	r2, #0
 800b9c6:	d10d      	bne.n	800b9e4 <lorawan_aes_set_key+0x3c>
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ce:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b9d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	bf14      	ite	ne
 800b9da:	2301      	movne	r3, #1
 800b9dc:	2300      	moveq	r3, #0
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d105      	bne.n	800b9f0 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b9ec:	23ff      	movs	r3, #255	; 0xff
 800b9ee:	e0b2      	b.n	800bb56 <lorawan_aes_set_key+0x1ae>
        break;
 800b9f0:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	7afa      	ldrb	r2, [r7, #11]
 800b9f6:	68f9      	ldr	r1, [r7, #12]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff fbfa 	bl	800b1f2 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b9fe:	7afb      	ldrb	r3, [r7, #11]
 800ba00:	331c      	adds	r3, #28
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ba08:	7c7b      	ldrb	r3, [r7, #17]
 800ba0a:	091b      	lsrs	r3, r3, #4
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ba18:	7afb      	ldrb	r3, [r7, #11]
 800ba1a:	75fb      	strb	r3, [r7, #23]
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	75bb      	strb	r3, [r7, #22]
 800ba20:	e093      	b.n	800bb4a <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ba22:	7dfb      	ldrb	r3, [r7, #23]
 800ba24:	3b04      	subs	r3, #4
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	5cd3      	ldrb	r3, [r2, r3]
 800ba2a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
 800ba2e:	3b03      	subs	r3, #3
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	5cd3      	ldrb	r3, [r2, r3]
 800ba34:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
 800ba38:	3b02      	subs	r3, #2
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	5cd3      	ldrb	r3, [r2, r3]
 800ba3e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
 800ba42:	3b01      	subs	r3, #1
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	5cd3      	ldrb	r3, [r2, r3]
 800ba48:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800ba4a:	7dfb      	ldrb	r3, [r7, #23]
 800ba4c:	7afa      	ldrb	r2, [r7, #11]
 800ba4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba52:	fb02 f201 	mul.w	r2, r2, r1
 800ba56:	1a9b      	subs	r3, r3, r2
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d127      	bne.n	800baae <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800ba5e:	7d7b      	ldrb	r3, [r7, #21]
 800ba60:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ba62:	7d3b      	ldrb	r3, [r7, #20]
 800ba64:	4a3e      	ldr	r2, [pc, #248]	; (800bb60 <lorawan_aes_set_key+0x1b8>)
 800ba66:	5cd2      	ldrb	r2, [r2, r3]
 800ba68:	7dbb      	ldrb	r3, [r7, #22]
 800ba6a:	4053      	eors	r3, r2
 800ba6c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ba6e:	7cfb      	ldrb	r3, [r7, #19]
 800ba70:	4a3b      	ldr	r2, [pc, #236]	; (800bb60 <lorawan_aes_set_key+0x1b8>)
 800ba72:	5cd3      	ldrb	r3, [r2, r3]
 800ba74:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ba76:	7cbb      	ldrb	r3, [r7, #18]
 800ba78:	4a39      	ldr	r2, [pc, #228]	; (800bb60 <lorawan_aes_set_key+0x1b8>)
 800ba7a:	5cd3      	ldrb	r3, [r2, r3]
 800ba7c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ba7e:	7c3b      	ldrb	r3, [r7, #16]
 800ba80:	4a37      	ldr	r2, [pc, #220]	; (800bb60 <lorawan_aes_set_key+0x1b8>)
 800ba82:	5cd3      	ldrb	r3, [r2, r3]
 800ba84:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800ba86:	7dbb      	ldrb	r3, [r7, #22]
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	b25a      	sxtb	r2, r3
 800ba8c:	7dbb      	ldrb	r3, [r7, #22]
 800ba8e:	09db      	lsrs	r3, r3, #7
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	4619      	mov	r1, r3
 800ba94:	0049      	lsls	r1, r1, #1
 800ba96:	440b      	add	r3, r1
 800ba98:	4619      	mov	r1, r3
 800ba9a:	00c8      	lsls	r0, r1, #3
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4603      	mov	r3, r0
 800baa0:	440b      	add	r3, r1
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	b25b      	sxtb	r3, r3
 800baa6:	4053      	eors	r3, r2
 800baa8:	b25b      	sxtb	r3, r3
 800baaa:	75bb      	strb	r3, [r7, #22]
 800baac:	e01c      	b.n	800bae8 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800baae:	7afb      	ldrb	r3, [r7, #11]
 800bab0:	2b18      	cmp	r3, #24
 800bab2:	d919      	bls.n	800bae8 <lorawan_aes_set_key+0x140>
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
 800bab6:	7afa      	ldrb	r2, [r7, #11]
 800bab8:	fbb3 f1f2 	udiv	r1, r3, r2
 800babc:	fb02 f201 	mul.w	r2, r2, r1
 800bac0:	1a9b      	subs	r3, r3, r2
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b10      	cmp	r3, #16
 800bac6:	d10f      	bne.n	800bae8 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800bac8:	7d7b      	ldrb	r3, [r7, #21]
 800baca:	4a25      	ldr	r2, [pc, #148]	; (800bb60 <lorawan_aes_set_key+0x1b8>)
 800bacc:	5cd3      	ldrb	r3, [r2, r3]
 800bace:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800bad0:	7d3b      	ldrb	r3, [r7, #20]
 800bad2:	4a23      	ldr	r2, [pc, #140]	; (800bb60 <lorawan_aes_set_key+0x1b8>)
 800bad4:	5cd3      	ldrb	r3, [r2, r3]
 800bad6:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800bad8:	7cfb      	ldrb	r3, [r7, #19]
 800bada:	4a21      	ldr	r2, [pc, #132]	; (800bb60 <lorawan_aes_set_key+0x1b8>)
 800badc:	5cd3      	ldrb	r3, [r2, r3]
 800bade:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800bae0:	7cbb      	ldrb	r3, [r7, #18]
 800bae2:	4a1f      	ldr	r2, [pc, #124]	; (800bb60 <lorawan_aes_set_key+0x1b8>)
 800bae4:	5cd3      	ldrb	r3, [r2, r3]
 800bae6:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800bae8:	7dfa      	ldrb	r2, [r7, #23]
 800baea:	7afb      	ldrb	r3, [r7, #11]
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800baf0:	7c3b      	ldrb	r3, [r7, #16]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	5cd1      	ldrb	r1, [r2, r3]
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
 800baf8:	7d7a      	ldrb	r2, [r7, #21]
 800bafa:	404a      	eors	r2, r1
 800bafc:	b2d1      	uxtb	r1, r2
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800bb02:	7c3b      	ldrb	r3, [r7, #16]
 800bb04:	3301      	adds	r3, #1
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	5cd1      	ldrb	r1, [r2, r3]
 800bb0a:	7dfb      	ldrb	r3, [r7, #23]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	7d3a      	ldrb	r2, [r7, #20]
 800bb10:	404a      	eors	r2, r1
 800bb12:	b2d1      	uxtb	r1, r2
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800bb18:	7c3b      	ldrb	r3, [r7, #16]
 800bb1a:	3302      	adds	r3, #2
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	5cd1      	ldrb	r1, [r2, r3]
 800bb20:	7dfb      	ldrb	r3, [r7, #23]
 800bb22:	3302      	adds	r3, #2
 800bb24:	7cfa      	ldrb	r2, [r7, #19]
 800bb26:	404a      	eors	r2, r1
 800bb28:	b2d1      	uxtb	r1, r2
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bb2e:	7c3b      	ldrb	r3, [r7, #16]
 800bb30:	3303      	adds	r3, #3
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	5cd1      	ldrb	r1, [r2, r3]
 800bb36:	7dfb      	ldrb	r3, [r7, #23]
 800bb38:	3303      	adds	r3, #3
 800bb3a:	7cba      	ldrb	r2, [r7, #18]
 800bb3c:	404a      	eors	r2, r1
 800bb3e:	b2d1      	uxtb	r1, r2
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
 800bb46:	3304      	adds	r3, #4
 800bb48:	75fb      	strb	r3, [r7, #23]
 800bb4a:	7dfa      	ldrb	r2, [r7, #23]
 800bb4c:	7c7b      	ldrb	r3, [r7, #17]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	f4ff af67 	bcc.w	800ba22 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3718      	adds	r7, #24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	0801bb8c 	.word	0x0801bb8c

0800bb64 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08a      	sub	sp, #40	; 0x28
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d038      	beq.n	800bbec <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	f107 0314 	add.w	r3, r7, #20
 800bb80:	68f9      	ldr	r1, [r7, #12]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff fc07 	bl	800b396 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bb88:	2301      	movs	r3, #1
 800bb8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bb8e:	e014      	b.n	800bbba <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bb90:	f107 0314 	add.w	r3, r7, #20
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7ff fd5d 	bl	800b654 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bba0:	0112      	lsls	r2, r2, #4
 800bba2:	441a      	add	r2, r3
 800bba4:	f107 0314 	add.w	r3, r7, #20
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff fcab 	bl	800b506 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bbb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bbc0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d3e3      	bcc.n	800bb90 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bbc8:	f107 0314 	add.w	r3, r7, #20
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7ff fca7 	bl	800b520 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbd8:	0112      	lsls	r2, r2, #4
 800bbda:	441a      	add	r2, r3
 800bbdc:	f107 0314 	add.w	r3, r7, #20
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	68b8      	ldr	r0, [r7, #8]
 800bbe4:	f7ff fbd7 	bl	800b396 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	e000      	b.n	800bbee <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bbec:	23ff      	movs	r3, #255	; 0xff
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3728      	adds	r7, #40	; 0x28
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
	...

0800bbf8 <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800bbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbfa:	b09d      	sub	sp, #116	; 0x74
 800bbfc:	af10      	add	r7, sp, #64	; 0x40
 800bbfe:	4603      	mov	r3, r0
 800bc00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bc04:	2306      	movs	r3, #6
 800bc06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800bc0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bc0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc12:	4611      	mov	r1, r2
 800bc14:	4618      	mov	r0, r3
 800bc16:	f000 f9f1 	bl	800bffc <SecureElementGetKeyByID>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800bc20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f040 80b0 	bne.w	800bd8a <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800bc2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d106      	bne.n	800bc40 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800bc32:	4b58      	ldr	r3, [pc, #352]	; (800bd94 <PrintKey+0x19c>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	2100      	movs	r1, #0
 800bc38:	2002      	movs	r0, #2
 800bc3a:	f00e ff3f 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
 800bc3e:	e056      	b.n	800bcee <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800bc40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d106      	bne.n	800bc56 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800bc48:	4b53      	ldr	r3, [pc, #332]	; (800bd98 <PrintKey+0x1a0>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	2002      	movs	r0, #2
 800bc50:	f00e ff34 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
 800bc54:	e04b      	b.n	800bcee <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800bc56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc5a:	2b03      	cmp	r3, #3
 800bc5c:	d106      	bne.n	800bc6c <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800bc5e:	4b4f      	ldr	r3, [pc, #316]	; (800bd9c <PrintKey+0x1a4>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	2100      	movs	r1, #0
 800bc64:	2002      	movs	r0, #2
 800bc66:	f00e ff29 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
 800bc6a:	e040      	b.n	800bcee <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800bc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d106      	bne.n	800bc82 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800bc74:	4b4a      	ldr	r3, [pc, #296]	; (800bda0 <PrintKey+0x1a8>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	2100      	movs	r1, #0
 800bc7a:	2002      	movs	r0, #2
 800bc7c:	f00e ff1e 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
 800bc80:	e035      	b.n	800bcee <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800bc82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc86:	2b04      	cmp	r3, #4
 800bc88:	d106      	bne.n	800bc98 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800bc8a:	4b46      	ldr	r3, [pc, #280]	; (800bda4 <PrintKey+0x1ac>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	2100      	movs	r1, #0
 800bc90:	2002      	movs	r0, #2
 800bc92:	f00e ff13 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
 800bc96:	e02a      	b.n	800bcee <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800bc98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc9c:	2b7f      	cmp	r3, #127	; 0x7f
 800bc9e:	d106      	bne.n	800bcae <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800bca0:	4b41      	ldr	r3, [pc, #260]	; (800bda8 <PrintKey+0x1b0>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	2100      	movs	r1, #0
 800bca6:	2002      	movs	r0, #2
 800bca8:	f00e ff08 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
 800bcac:	e01f      	b.n	800bcee <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800bcae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcb2:	2b80      	cmp	r3, #128	; 0x80
 800bcb4:	d106      	bne.n	800bcc4 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800bcb6:	4b3d      	ldr	r3, [pc, #244]	; (800bdac <PrintKey+0x1b4>)
 800bcb8:	2200      	movs	r2, #0
 800bcba:	2100      	movs	r1, #0
 800bcbc:	2002      	movs	r0, #2
 800bcbe:	f00e fefd 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
 800bcc2:	e014      	b.n	800bcee <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800bcc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcc8:	2b81      	cmp	r3, #129	; 0x81
 800bcca:	d106      	bne.n	800bcda <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800bccc:	4b38      	ldr	r3, [pc, #224]	; (800bdb0 <PrintKey+0x1b8>)
 800bcce:	2200      	movs	r2, #0
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	2002      	movs	r0, #2
 800bcd4:	f00e fef2 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
 800bcd8:	e009      	b.n	800bcee <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800bcda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcde:	2b82      	cmp	r3, #130	; 0x82
 800bce0:	d105      	bne.n	800bcee <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800bce2:	4b34      	ldr	r3, [pc, #208]	; (800bdb4 <PrintKey+0x1bc>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	2100      	movs	r1, #0
 800bce8:	2002      	movs	r0, #2
 800bcea:	f00e fee7 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf0:	785b      	ldrb	r3, [r3, #1]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	789b      	ldrb	r3, [r3, #2]
 800bcf8:	461c      	mov	r4, r3
 800bcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfc:	78db      	ldrb	r3, [r3, #3]
 800bcfe:	461d      	mov	r5, r3
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	791b      	ldrb	r3, [r3, #4]
 800bd04:	461e      	mov	r6, r3
 800bd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd08:	795b      	ldrb	r3, [r3, #5]
 800bd0a:	623b      	str	r3, [r7, #32]
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	799b      	ldrb	r3, [r3, #6]
 800bd10:	61fb      	str	r3, [r7, #28]
 800bd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd14:	79db      	ldrb	r3, [r3, #7]
 800bd16:	61bb      	str	r3, [r7, #24]
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	7a1b      	ldrb	r3, [r3, #8]
 800bd1c:	617b      	str	r3, [r7, #20]
 800bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd20:	7a5b      	ldrb	r3, [r3, #9]
 800bd22:	613b      	str	r3, [r7, #16]
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	7a9b      	ldrb	r3, [r3, #10]
 800bd28:	60fb      	str	r3, [r7, #12]
 800bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2c:	7adb      	ldrb	r3, [r3, #11]
 800bd2e:	60bb      	str	r3, [r7, #8]
 800bd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd32:	7b1b      	ldrb	r3, [r3, #12]
 800bd34:	607b      	str	r3, [r7, #4]
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	7b5b      	ldrb	r3, [r3, #13]
 800bd3a:	603b      	str	r3, [r7, #0]
 800bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3e:	7b9b      	ldrb	r3, [r3, #14]
 800bd40:	4619      	mov	r1, r3
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	7bdb      	ldrb	r3, [r3, #15]
 800bd46:	461a      	mov	r2, r3
 800bd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4a:	7c1b      	ldrb	r3, [r3, #16]
 800bd4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd4e:	920e      	str	r2, [sp, #56]	; 0x38
 800bd50:	910d      	str	r1, [sp, #52]	; 0x34
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	920c      	str	r2, [sp, #48]	; 0x30
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	920a      	str	r2, [sp, #40]	; 0x28
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	9209      	str	r2, [sp, #36]	; 0x24
 800bd62:	693a      	ldr	r2, [r7, #16]
 800bd64:	9208      	str	r2, [sp, #32]
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	9207      	str	r2, [sp, #28]
 800bd6a:	69ba      	ldr	r2, [r7, #24]
 800bd6c:	9206      	str	r2, [sp, #24]
 800bd6e:	69fa      	ldr	r2, [r7, #28]
 800bd70:	9205      	str	r2, [sp, #20]
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	9304      	str	r3, [sp, #16]
 800bd76:	9603      	str	r6, [sp, #12]
 800bd78:	9502      	str	r5, [sp, #8]
 800bd7a:	9401      	str	r4, [sp, #4]
 800bd7c:	9000      	str	r0, [sp, #0]
 800bd7e:	4b0e      	ldr	r3, [pc, #56]	; (800bdb8 <PrintKey+0x1c0>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	2100      	movs	r1, #0
 800bd84:	2002      	movs	r0, #2
 800bd86:	f00e fe99 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800bd8a:	bf00      	nop
 800bd8c:	3734      	adds	r7, #52	; 0x34
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd92:	bf00      	nop
 800bd94:	0801b5a4 	.word	0x0801b5a4
 800bd98:	0801b5bc 	.word	0x0801b5bc
 800bd9c:	0801b5d4 	.word	0x0801b5d4
 800bda0:	0801b5ec 	.word	0x0801b5ec
 800bda4:	0801b604 	.word	0x0801b604
 800bda8:	0801b61c 	.word	0x0801b61c
 800bdac:	0801b634 	.word	0x0801b634
 800bdb0:	0801b64c 	.word	0x0801b64c
 800bdb4:	0801b664 	.word	0x0801b664
 800bdb8:	0801b67c 	.word	0x0801b67c

0800bdbc <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	6039      	str	r1, [r7, #0]
 800bdc6:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bdc8:	2300      	movs	r3, #0
 800bdca:	73fb      	strb	r3, [r7, #15]
 800bdcc:	e01a      	b.n	800be04 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bdce:	4b12      	ldr	r3, [pc, #72]	; (800be18 <GetKeyByID+0x5c>)
 800bdd0:	6819      	ldr	r1, [r3, #0]
 800bdd2:	7bfa      	ldrb	r2, [r7, #15]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	011b      	lsls	r3, r3, #4
 800bdd8:	4413      	add	r3, r2
 800bdda:	440b      	add	r3, r1
 800bddc:	3310      	adds	r3, #16
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	79fa      	ldrb	r2, [r7, #7]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d10b      	bne.n	800bdfe <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bde6:	4b0c      	ldr	r3, [pc, #48]	; (800be18 <GetKeyByID+0x5c>)
 800bde8:	6819      	ldr	r1, [r3, #0]
 800bdea:	7bfa      	ldrb	r2, [r7, #15]
 800bdec:	4613      	mov	r3, r2
 800bdee:	011b      	lsls	r3, r3, #4
 800bdf0:	4413      	add	r3, r2
 800bdf2:	3310      	adds	r3, #16
 800bdf4:	18ca      	adds	r2, r1, r3
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	e006      	b.n	800be0c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
 800be00:	3301      	adds	r3, #1
 800be02:	73fb      	strb	r3, [r7, #15]
 800be04:	7bfb      	ldrb	r3, [r7, #15]
 800be06:	2b09      	cmp	r3, #9
 800be08:	d9e1      	bls.n	800bdce <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be0a:	2303      	movs	r3, #3
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	bc80      	pop	{r7}
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	200003c0 	.word	0x200003c0

0800be1c <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800be1c:	b590      	push	{r4, r7, lr}
 800be1e:	b0d1      	sub	sp, #324	; 0x144
 800be20:	af00      	add	r7, sp, #0
 800be22:	f107 040c 	add.w	r4, r7, #12
 800be26:	6020      	str	r0, [r4, #0]
 800be28:	f107 0008 	add.w	r0, r7, #8
 800be2c:	6001      	str	r1, [r0, #0]
 800be2e:	4619      	mov	r1, r3
 800be30:	1dbb      	adds	r3, r7, #6
 800be32:	801a      	strh	r2, [r3, #0]
 800be34:	1d7b      	adds	r3, r7, #5
 800be36:	460a      	mov	r2, r1
 800be38:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800be3a:	f107 0308 	add.w	r3, r7, #8
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d003      	beq.n	800be4c <ComputeCmac+0x30>
 800be44:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d101      	bne.n	800be50 <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be4c:	2302      	movs	r3, #2
 800be4e:	e04e      	b.n	800beee <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800be50:	f107 0314 	add.w	r3, r7, #20
 800be54:	4618      	mov	r0, r3
 800be56:	f7fe ff23 	bl	800aca0 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800be5a:	f107 0210 	add.w	r2, r7, #16
 800be5e:	1d7b      	adds	r3, r7, #5
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	4611      	mov	r1, r2
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff ffa9 	bl	800bdbc <GetKeyByID>
 800be6a:	4603      	mov	r3, r0
 800be6c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800be70:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800be74:	2b00      	cmp	r3, #0
 800be76:	d138      	bne.n	800beea <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800be78:	f107 0310 	add.w	r3, r7, #16
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	f107 0314 	add.w	r3, r7, #20
 800be84:	4611      	mov	r1, r2
 800be86:	4618      	mov	r0, r3
 800be88:	f7fe ff23 	bl	800acd2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800be8c:	f107 030c 	add.w	r3, r7, #12
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d007      	beq.n	800bea6 <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800be96:	f107 030c 	add.w	r3, r7, #12
 800be9a:	f107 0014 	add.w	r0, r7, #20
 800be9e:	2210      	movs	r2, #16
 800bea0:	6819      	ldr	r1, [r3, #0]
 800bea2:	f7fe ff25 	bl	800acf0 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bea6:	1dbb      	adds	r3, r7, #6
 800bea8:	881a      	ldrh	r2, [r3, #0]
 800beaa:	f107 0308 	add.w	r3, r7, #8
 800beae:	f107 0014 	add.w	r0, r7, #20
 800beb2:	6819      	ldr	r1, [r3, #0]
 800beb4:	f7fe ff1c 	bl	800acf0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800beb8:	f107 0214 	add.w	r2, r7, #20
 800bebc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bec0:	4611      	mov	r1, r2
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7fe ffd6 	bl	800ae74 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bec8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800becc:	061a      	lsls	r2, r3, #24
 800bece:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800bed2:	041b      	lsls	r3, r3, #16
 800bed4:	431a      	orrs	r2, r3
 800bed6:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800beda:	021b      	lsls	r3, r3, #8
 800bedc:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bede:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bee2:	431a      	orrs	r2, r3
 800bee4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bee8:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800beea:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800beee:	4618      	mov	r0, r3
 800bef0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd90      	pop	{r4, r7, pc}

0800bef8 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bef8:	b5b0      	push	{r4, r5, r7, lr}
 800befa:	b0b2      	sub	sp, #200	; 0xc8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800bf02:	f107 0308 	add.w	r3, r7, #8
 800bf06:	22c0      	movs	r2, #192	; 0xc0
 800bf08:	2100      	movs	r1, #0
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f00f f874 	bl	801aff8 <memset>
 800bf10:	4a33      	ldr	r2, [pc, #204]	; (800bfe0 <SecureElementInit+0xe8>)
 800bf12:	f107 0308 	add.w	r3, r7, #8
 800bf16:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf1a:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf1e:	4a31      	ldr	r2, [pc, #196]	; (800bfe4 <SecureElementInit+0xec>)
 800bf20:	f107 0310 	add.w	r3, r7, #16
 800bf24:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf28:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf2c:	4b2e      	ldr	r3, [pc, #184]	; (800bfe8 <SecureElementInit+0xf0>)
 800bf2e:	f107 0419 	add.w	r4, r7, #25
 800bf32:	461d      	mov	r5, r3
 800bf34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf36:	6020      	str	r0, [r4, #0]
 800bf38:	6061      	str	r1, [r4, #4]
 800bf3a:	60a2      	str	r2, [r4, #8]
 800bf3c:	60e3      	str	r3, [r4, #12]
 800bf3e:	2301      	movs	r3, #1
 800bf40:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800bf44:	4b29      	ldr	r3, [pc, #164]	; (800bfec <SecureElementInit+0xf4>)
 800bf46:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800bf4a:	461d      	mov	r5, r3
 800bf4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf4e:	6020      	str	r0, [r4, #0]
 800bf50:	6061      	str	r1, [r4, #4]
 800bf52:	60a2      	str	r2, [r4, #8]
 800bf54:	60e3      	str	r3, [r4, #12]
 800bf56:	2302      	movs	r3, #2
 800bf58:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800bf62:	2304      	movs	r3, #4
 800bf64:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800bf68:	237f      	movs	r3, #127	; 0x7f
 800bf6a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800bf6e:	2380      	movs	r3, #128	; 0x80
 800bf70:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bf74:	2381      	movs	r3, #129	; 0x81
 800bf76:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800bf7a:	2382      	movs	r3, #130	; 0x82
 800bf7c:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800bf80:	2383      	movs	r3, #131	; 0x83
 800bf82:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d101      	bne.n	800bf90 <SecureElementInit+0x98>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	e023      	b.n	800bfd8 <SecureElementInit+0xe0>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bf90:	4a17      	ldr	r2, [pc, #92]	; (800bff0 <SecureElementInit+0xf8>)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bf96:	4b16      	ldr	r3, [pc, #88]	; (800bff0 <SecureElementInit+0xf8>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f107 0108 	add.w	r1, r7, #8
 800bf9e:	22c0      	movs	r2, #192	; 0xc0
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f00a fb90 	bl	80166c6 <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bfa6:	4b13      	ldr	r3, [pc, #76]	; (800bff4 <SecureElementInit+0xfc>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	2100      	movs	r1, #0
 800bfac:	2002      	movs	r0, #2
 800bfae:	f00e fd85 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	f7ff fe20 	bl	800bbf8 <PrintKey>
    PrintKey(NWK_KEY);
 800bfb8:	2001      	movs	r0, #1
 800bfba:	f7ff fe1d 	bl	800bbf8 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bfbe:	4b0e      	ldr	r3, [pc, #56]	; (800bff8 <SecureElementInit+0x100>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	2002      	movs	r0, #2
 800bfc6:	f00e fd79 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bfca:	2003      	movs	r0, #3
 800bfcc:	f7ff fe14 	bl	800bbf8 <PrintKey>
    PrintKey(NWK_S_KEY);
 800bfd0:	2002      	movs	r0, #2
 800bfd2:	f7ff fe11 	bl	800bbf8 <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	37c8      	adds	r7, #200	; 0xc8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bdb0      	pop	{r4, r5, r7, pc}
 800bfe0:	0801b700 	.word	0x0801b700
 800bfe4:	0801b708 	.word	0x0801b708
 800bfe8:	0801b710 	.word	0x0801b710
 800bfec:	0801b720 	.word	0x0801b720
 800bff0:	200003c0 	.word	0x200003c0
 800bff4:	0801b6d0 	.word	0x0801b6d0
 800bff8:	0801b6e8 	.word	0x0801b6e8

0800bffc <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	4603      	mov	r3, r0
 800c004:	6039      	str	r1, [r7, #0]
 800c006:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c008:	2300      	movs	r3, #0
 800c00a:	73fb      	strb	r3, [r7, #15]
 800c00c:	e01a      	b.n	800c044 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800c00e:	4b12      	ldr	r3, [pc, #72]	; (800c058 <SecureElementGetKeyByID+0x5c>)
 800c010:	6819      	ldr	r1, [r3, #0]
 800c012:	7bfa      	ldrb	r2, [r7, #15]
 800c014:	4613      	mov	r3, r2
 800c016:	011b      	lsls	r3, r3, #4
 800c018:	4413      	add	r3, r2
 800c01a:	440b      	add	r3, r1
 800c01c:	3310      	adds	r3, #16
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	79fa      	ldrb	r2, [r7, #7]
 800c022:	429a      	cmp	r2, r3
 800c024:	d10b      	bne.n	800c03e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800c026:	4b0c      	ldr	r3, [pc, #48]	; (800c058 <SecureElementGetKeyByID+0x5c>)
 800c028:	6819      	ldr	r1, [r3, #0]
 800c02a:	7bfa      	ldrb	r2, [r7, #15]
 800c02c:	4613      	mov	r3, r2
 800c02e:	011b      	lsls	r3, r3, #4
 800c030:	4413      	add	r3, r2
 800c032:	3310      	adds	r3, #16
 800c034:	18ca      	adds	r2, r1, r3
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c03a:	2300      	movs	r3, #0
 800c03c:	e006      	b.n	800c04c <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
 800c040:	3301      	adds	r3, #1
 800c042:	73fb      	strb	r3, [r7, #15]
 800c044:	7bfb      	ldrb	r3, [r7, #15]
 800c046:	2b09      	cmp	r3, #9
 800c048:	d9e1      	bls.n	800c00e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c04a:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3714      	adds	r7, #20
 800c050:	46bd      	mov	sp, r7
 800c052:	bc80      	pop	{r7}
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	200003c0 	.word	0x200003c0

0800c05c <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af00      	add	r7, sp, #0
 800c062:	4603      	mov	r3, r0
 800c064:	6039      	str	r1, [r7, #0]
 800c066:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c06e:	2302      	movs	r3, #2
 800c070:	e04c      	b.n	800c10c <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c072:	2300      	movs	r3, #0
 800c074:	77fb      	strb	r3, [r7, #31]
 800c076:	e045      	b.n	800c104 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c078:	4b26      	ldr	r3, [pc, #152]	; (800c114 <SecureElementSetKey+0xb8>)
 800c07a:	6819      	ldr	r1, [r3, #0]
 800c07c:	7ffa      	ldrb	r2, [r7, #31]
 800c07e:	4613      	mov	r3, r2
 800c080:	011b      	lsls	r3, r3, #4
 800c082:	4413      	add	r3, r2
 800c084:	440b      	add	r3, r1
 800c086:	3310      	adds	r3, #16
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	79fa      	ldrb	r2, [r7, #7]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d136      	bne.n	800c0fe <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800c090:	79fb      	ldrb	r3, [r7, #7]
 800c092:	2b80      	cmp	r3, #128	; 0x80
 800c094:	d123      	bne.n	800c0de <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800c096:	2306      	movs	r3, #6
 800c098:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800c09a:	2300      	movs	r3, #0
 800c09c:	60fb      	str	r3, [r7, #12]
 800c09e:	f107 0310 	add.w	r3, r7, #16
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	605a      	str	r2, [r3, #4]
 800c0a8:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800c0aa:	f107 030c 	add.w	r3, r7, #12
 800c0ae:	227f      	movs	r2, #127	; 0x7f
 800c0b0:	2110      	movs	r1, #16
 800c0b2:	6838      	ldr	r0, [r7, #0]
 800c0b4:	f000 f87d 	bl	800c1b2 <SecureElementAesEncrypt>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c0bc:	4b15      	ldr	r3, [pc, #84]	; (800c114 <SecureElementSetKey+0xb8>)
 800c0be:	6819      	ldr	r1, [r3, #0]
 800c0c0:	7ffa      	ldrb	r2, [r7, #31]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	011b      	lsls	r3, r3, #4
 800c0c6:	4413      	add	r3, r2
 800c0c8:	3310      	adds	r3, #16
 800c0ca:	440b      	add	r3, r1
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	f107 010c 	add.w	r1, r7, #12
 800c0d2:	2210      	movs	r2, #16
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f00a faf6 	bl	80166c6 <memcpy1>
                return retval;
 800c0da:	7fbb      	ldrb	r3, [r7, #30]
 800c0dc:	e016      	b.n	800c10c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c0de:	4b0d      	ldr	r3, [pc, #52]	; (800c114 <SecureElementSetKey+0xb8>)
 800c0e0:	6819      	ldr	r1, [r3, #0]
 800c0e2:	7ffa      	ldrb	r2, [r7, #31]
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	011b      	lsls	r3, r3, #4
 800c0e8:	4413      	add	r3, r2
 800c0ea:	3310      	adds	r3, #16
 800c0ec:	440b      	add	r3, r1
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	2210      	movs	r2, #16
 800c0f2:	6839      	ldr	r1, [r7, #0]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f00a fae6 	bl	80166c6 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e006      	b.n	800c10c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c0fe:	7ffb      	ldrb	r3, [r7, #31]
 800c100:	3301      	adds	r3, #1
 800c102:	77fb      	strb	r3, [r7, #31]
 800c104:	7ffb      	ldrb	r3, [r7, #31]
 800c106:	2b09      	cmp	r3, #9
 800c108:	d9b6      	bls.n	800c078 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c10a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3720      	adds	r7, #32
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	200003c0 	.word	0x200003c0

0800c118 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af02      	add	r7, sp, #8
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	4611      	mov	r1, r2
 800c124:	461a      	mov	r2, r3
 800c126:	460b      	mov	r3, r1
 800c128:	80fb      	strh	r3, [r7, #6]
 800c12a:	4613      	mov	r3, r2
 800c12c:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800c12e:	797b      	ldrb	r3, [r7, #5]
 800c130:	2b7e      	cmp	r3, #126	; 0x7e
 800c132:	d901      	bls.n	800c138 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c134:	2303      	movs	r3, #3
 800c136:	e009      	b.n	800c14c <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c138:	7979      	ldrb	r1, [r7, #5]
 800c13a:	88fa      	ldrh	r2, [r7, #6]
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	460b      	mov	r3, r1
 800c142:	68b9      	ldr	r1, [r7, #8]
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f7ff fe69 	bl	800be1c <ComputeCmac>
 800c14a:	4603      	mov	r3, r0
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b088      	sub	sp, #32
 800c158:	af02      	add	r7, sp, #8
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	607a      	str	r2, [r7, #4]
 800c15e:	461a      	mov	r2, r3
 800c160:	460b      	mov	r3, r1
 800c162:	817b      	strh	r3, [r7, #10]
 800c164:	4613      	mov	r3, r2
 800c166:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c16e:	2302      	movs	r3, #2
 800c170:	e01b      	b.n	800c1aa <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c172:	2306      	movs	r3, #6
 800c174:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c17a:	7a79      	ldrb	r1, [r7, #9]
 800c17c:	897a      	ldrh	r2, [r7, #10]
 800c17e:	f107 0310 	add.w	r3, r7, #16
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	460b      	mov	r3, r1
 800c186:	68f9      	ldr	r1, [r7, #12]
 800c188:	2000      	movs	r0, #0
 800c18a:	f7ff fe47 	bl	800be1c <ComputeCmac>
 800c18e:	4603      	mov	r3, r0
 800c190:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c192:	7dfb      	ldrb	r3, [r7, #23]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d001      	beq.n	800c19c <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800c198:	7dfb      	ldrb	r3, [r7, #23]
 800c19a:	e006      	b.n	800c1aa <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d001      	beq.n	800c1a8 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3718      	adds	r7, #24
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b0c2      	sub	sp, #264	; 0x108
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	60f8      	str	r0, [r7, #12]
 800c1ba:	4608      	mov	r0, r1
 800c1bc:	4611      	mov	r1, r2
 800c1be:	1d3a      	adds	r2, r7, #4
 800c1c0:	6013      	str	r3, [r2, #0]
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	817b      	strh	r3, [r7, #10]
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d003      	beq.n	800c1d8 <SecureElementAesEncrypt+0x26>
 800c1d0:	1d3b      	adds	r3, r7, #4
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d101      	bne.n	800c1dc <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1d8:	2302      	movs	r3, #2
 800c1da:	e043      	b.n	800c264 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800c1dc:	897b      	ldrh	r3, [r7, #10]
 800c1de:	f003 030f 	and.w	r3, r3, #15
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c1e8:	2305      	movs	r3, #5
 800c1ea:	e03b      	b.n	800c264 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c1ec:	f107 0314 	add.w	r3, r7, #20
 800c1f0:	22f0      	movs	r2, #240	; 0xf0
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f00a faa1 	bl	801673c <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c1fa:	f107 0210 	add.w	r2, r7, #16
 800c1fe:	7a7b      	ldrb	r3, [r7, #9]
 800c200:	4611      	mov	r1, r2
 800c202:	4618      	mov	r0, r3
 800c204:	f7ff fdda 	bl	800bdbc <GetKeyByID>
 800c208:	4603      	mov	r3, r0
 800c20a:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c20e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800c212:	2b00      	cmp	r3, #0
 800c214:	d124      	bne.n	800c260 <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	3301      	adds	r3, #1
 800c21a:	f107 0214 	add.w	r2, r7, #20
 800c21e:	2110      	movs	r1, #16
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff fbc1 	bl	800b9a8 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c226:	2300      	movs	r3, #0
 800c228:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800c22c:	e015      	b.n	800c25a <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c22e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	18d0      	adds	r0, r2, r3
 800c236:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c23a:	1d3a      	adds	r2, r7, #4
 800c23c:	6812      	ldr	r2, [r2, #0]
 800c23e:	4413      	add	r3, r2
 800c240:	f107 0214 	add.w	r2, r7, #20
 800c244:	4619      	mov	r1, r3
 800c246:	f7ff fc8d 	bl	800bb64 <lorawan_aes_encrypt>
            block = block + 16;
 800c24a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c24e:	3310      	adds	r3, #16
 800c250:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c254:	897b      	ldrh	r3, [r7, #10]
 800c256:	3b10      	subs	r3, #16
 800c258:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c25a:	897b      	ldrh	r3, [r7, #10]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1e6      	bne.n	800c22e <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c260:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c264:	4618      	mov	r0, r3
 800c266:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b088      	sub	sp, #32
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	460b      	mov	r3, r1
 800c278:	70fb      	strb	r3, [r7, #3]
 800c27a:	4613      	mov	r3, r2
 800c27c:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d101      	bne.n	800c288 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c284:	2302      	movs	r3, #2
 800c286:	e02e      	b.n	800c2e6 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c288:	2306      	movs	r3, #6
 800c28a:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c28c:	78bb      	ldrb	r3, [r7, #2]
 800c28e:	2b7f      	cmp	r3, #127	; 0x7f
 800c290:	d104      	bne.n	800c29c <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c292:	78fb      	ldrb	r3, [r7, #3]
 800c294:	2b04      	cmp	r3, #4
 800c296:	d001      	beq.n	800c29c <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c298:	2303      	movs	r3, #3
 800c29a:	e024      	b.n	800c2e6 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c29c:	2300      	movs	r3, #0
 800c29e:	60fb      	str	r3, [r7, #12]
 800c2a0:	f107 0310 	add.w	r3, r7, #16
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	601a      	str	r2, [r3, #0]
 800c2a8:	605a      	str	r2, [r3, #4]
 800c2aa:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c2ac:	f107 030c 	add.w	r3, r7, #12
 800c2b0:	78fa      	ldrb	r2, [r7, #3]
 800c2b2:	2110      	movs	r1, #16
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7ff ff7c 	bl	800c1b2 <SecureElementAesEncrypt>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c2be:	7ffb      	ldrb	r3, [r7, #31]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c2c4:	7ffb      	ldrb	r3, [r7, #31]
 800c2c6:	e00e      	b.n	800c2e6 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c2c8:	f107 020c 	add.w	r2, r7, #12
 800c2cc:	78bb      	ldrb	r3, [r7, #2]
 800c2ce:	4611      	mov	r1, r2
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7ff fec3 	bl	800c05c <SecureElementSetKey>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c2da:	7ffb      	ldrb	r3, [r7, #31]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d001      	beq.n	800c2e4 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c2e0:	7ffb      	ldrb	r3, [r7, #31]
 800c2e2:	e000      	b.n	800c2e6 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c2e4:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3720      	adds	r7, #32
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b086      	sub	sp, #24
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607b      	str	r3, [r7, #4]
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73fb      	strb	r3, [r7, #15]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d005      	beq.n	800c312 <SecureElementProcessJoinAccept+0x24>
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d002      	beq.n	800c312 <SecureElementProcessJoinAccept+0x24>
 800c30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c312:	2302      	movs	r3, #2
 800c314:	e064      	b.n	800c3e0 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c316:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c31a:	2b21      	cmp	r3, #33	; 0x21
 800c31c:	d901      	bls.n	800c322 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c31e:	2305      	movs	r3, #5
 800c320:	e05e      	b.n	800c3e0 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c322:	2301      	movs	r3, #1
 800c324:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	461a      	mov	r2, r3
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c332:	f00a f9c8 	bl	80166c6 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	1c58      	adds	r0, r3, #1
 800c33a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c33e:	b29b      	uxth	r3, r3
 800c340:	3b01      	subs	r3, #1
 800c342:	b299      	uxth	r1, r3
 800c344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c346:	3301      	adds	r3, #1
 800c348:	7dfa      	ldrb	r2, [r7, #23]
 800c34a:	f7ff ff32 	bl	800c1b2 <SecureElementAesEncrypt>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d001      	beq.n	800c358 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c354:	2307      	movs	r3, #7
 800c356:	e043      	b.n	800c3e0 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	330b      	adds	r3, #11
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	09db      	lsrs	r3, r3, #7
 800c360:	b2da      	uxtb	r2, r3
 800c362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c364:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c36a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c36e:	3b04      	subs	r3, #4
 800c370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c372:	4413      	add	r3, r2
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c378:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c37c:	3b03      	subs	r3, #3
 800c37e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c380:	4413      	add	r3, r2
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	021b      	lsls	r3, r3, #8
 800c386:	693a      	ldr	r2, [r7, #16]
 800c388:	4313      	orrs	r3, r2
 800c38a:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c38c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c390:	3b02      	subs	r3, #2
 800c392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c394:	4413      	add	r3, r2
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	041b      	lsls	r3, r3, #16
 800c39a:	693a      	ldr	r2, [r7, #16]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c3a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3a8:	4413      	add	r3, r2
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	061b      	lsls	r3, r3, #24
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10e      	bne.n	800c3da <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c3bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	3b04      	subs	r3, #4
 800c3c4:	b299      	uxth	r1, r3
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3cc:	f7ff fec2 	bl	800c154 <SecureElementVerifyAesCmac>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d003      	beq.n	800c3de <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e002      	b.n	800c3e0 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c3da:	2304      	movs	r3, #4
 800c3dc:	e000      	b.n	800c3e0 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3718      	adds	r7, #24
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d101      	bne.n	800c3fa <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c3f6:	2302      	movs	r3, #2
 800c3f8:	e006      	b.n	800c408 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c3fa:	4b05      	ldr	r3, [pc, #20]	; (800c410 <SecureElementRandomNumber+0x28>)
 800c3fc:	695b      	ldr	r3, [r3, #20]
 800c3fe:	4798      	blx	r3
 800c400:	4602      	mov	r2, r0
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	0801bed4 	.word	0x0801bed4

0800c414 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c422:	2302      	movs	r3, #2
 800c424:	e007      	b.n	800c436 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c426:	4b06      	ldr	r3, [pc, #24]	; (800c440 <SecureElementSetDevEui+0x2c>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2208      	movs	r2, #8
 800c42c:	6879      	ldr	r1, [r7, #4]
 800c42e:	4618      	mov	r0, r3
 800c430:	f00a f949 	bl	80166c6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	200003c0 	.word	0x200003c0

0800c444 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c444:	b480      	push	{r7}
 800c446:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c448:	4b02      	ldr	r3, [pc, #8]	; (800c454 <SecureElementGetDevEui+0x10>)
 800c44a:	681b      	ldr	r3, [r3, #0]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	46bd      	mov	sp, r7
 800c450:	bc80      	pop	{r7}
 800c452:	4770      	bx	lr
 800c454:	200003c0 	.word	0x200003c0

0800c458 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d101      	bne.n	800c46a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c466:	2302      	movs	r3, #2
 800c468:	e008      	b.n	800c47c <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c46a:	4b06      	ldr	r3, [pc, #24]	; (800c484 <SecureElementSetJoinEui+0x2c>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3308      	adds	r3, #8
 800c470:	2208      	movs	r2, #8
 800c472:	6879      	ldr	r1, [r7, #4]
 800c474:	4618      	mov	r0, r3
 800c476:	f00a f926 	bl	80166c6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	200003c0 	.word	0x200003c0

0800c488 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c488:	b480      	push	{r7}
 800c48a:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c48c:	4b03      	ldr	r3, [pc, #12]	; (800c49c <SecureElementGetJoinEui+0x14>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3308      	adds	r3, #8
}
 800c492:	4618      	mov	r0, r3
 800c494:	46bd      	mov	sp, r7
 800c496:	bc80      	pop	{r7}
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	200003c0 	.word	0x200003c0

0800c4a0 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800c4a8:	4a1a      	ldr	r2, [pc, #104]	; (800c514 <LmHandlerInit+0x74>)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c4ae:	4b1a      	ldr	r3, [pc, #104]	; (800c518 <LmHandlerInit+0x78>)
 800c4b0:	4a1a      	ldr	r2, [pc, #104]	; (800c51c <LmHandlerInit+0x7c>)
 800c4b2:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c4b4:	4b18      	ldr	r3, [pc, #96]	; (800c518 <LmHandlerInit+0x78>)
 800c4b6:	4a1a      	ldr	r2, [pc, #104]	; (800c520 <LmHandlerInit+0x80>)
 800c4b8:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c4ba:	4b17      	ldr	r3, [pc, #92]	; (800c518 <LmHandlerInit+0x78>)
 800c4bc:	4a19      	ldr	r2, [pc, #100]	; (800c524 <LmHandlerInit+0x84>)
 800c4be:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c4c0:	4b15      	ldr	r3, [pc, #84]	; (800c518 <LmHandlerInit+0x78>)
 800c4c2:	4a19      	ldr	r2, [pc, #100]	; (800c528 <LmHandlerInit+0x88>)
 800c4c4:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c4c6:	4b13      	ldr	r3, [pc, #76]	; (800c514 <LmHandlerInit+0x74>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a17      	ldr	r2, [pc, #92]	; (800c52c <LmHandlerInit+0x8c>)
 800c4ce:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c4d0:	4b10      	ldr	r3, [pc, #64]	; (800c514 <LmHandlerInit+0x74>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	4a15      	ldr	r2, [pc, #84]	; (800c52c <LmHandlerInit+0x8c>)
 800c4d8:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c4da:	4b0e      	ldr	r3, [pc, #56]	; (800c514 <LmHandlerInit+0x74>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	4a12      	ldr	r2, [pc, #72]	; (800c52c <LmHandlerInit+0x8c>)
 800c4e2:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c4e4:	4b11      	ldr	r3, [pc, #68]	; (800c52c <LmHandlerInit+0x8c>)
 800c4e6:	4a12      	ldr	r2, [pc, #72]	; (800c530 <LmHandlerInit+0x90>)
 800c4e8:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c4ea:	4b0a      	ldr	r3, [pc, #40]	; (800c514 <LmHandlerInit+0x74>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	4a0e      	ldr	r2, [pc, #56]	; (800c52c <LmHandlerInit+0x8c>)
 800c4f2:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c4f4:	490f      	ldr	r1, [pc, #60]	; (800c534 <LmHandlerInit+0x94>)
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	f000 fcfe 	bl	800cef8 <LmHandlerPackageRegister>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d002      	beq.n	800c508 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800c502:	f04f 33ff 	mov.w	r3, #4294967295
 800c506:	e000      	b.n	800c50a <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c508:	2300      	movs	r3, #0
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3708      	adds	r7, #8
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	200003e8 	.word	0x200003e8
 800c518:	200003ec 	.word	0x200003ec
 800c51c:	0800cc4d 	.word	0x0800cc4d
 800c520:	0800ccb5 	.word	0x0800ccb5
 800c524:	0800cd95 	.word	0x0800cd95
 800c528:	0800ce59 	.word	0x0800ce59
 800c52c:	200003fc 	.word	0x200003fc
 800c530:	0800d169 	.word	0x0800d169
 800c534:	200000b8 	.word	0x200000b8

0800c538 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c53a:	b099      	sub	sp, #100	; 0x64
 800c53c:	af08      	add	r7, sp, #32
 800c53e:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c544:	2210      	movs	r2, #16
 800c546:	6879      	ldr	r1, [r7, #4]
 800c548:	4882      	ldr	r0, [pc, #520]	; (800c754 <LmHandlerConfigure+0x21c>)
 800c54a:	f00d fa7f 	bl	8019a4c <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800c54e:	f7fe fb73 	bl	800ac38 <LoraInfo_GetPtr>
 800c552:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c554:	4b7f      	ldr	r3, [pc, #508]	; (800c754 <LmHandlerConfigure+0x21c>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	461a      	mov	r2, r3
 800c55a:	2301      	movs	r3, #1
 800c55c:	4093      	lsls	r3, r2
 800c55e:	461a      	mov	r2, r3
 800c560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	4013      	ands	r3, r2
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00c      	beq.n	800c584 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c56a:	4b7a      	ldr	r3, [pc, #488]	; (800c754 <LmHandlerConfigure+0x21c>)
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	461a      	mov	r2, r3
 800c570:	4979      	ldr	r1, [pc, #484]	; (800c758 <LmHandlerConfigure+0x220>)
 800c572:	487a      	ldr	r0, [pc, #488]	; (800c75c <LmHandlerConfigure+0x224>)
 800c574:	f004 fb1a 	bl	8010bac <LoRaMacInitialization>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d009      	beq.n	800c592 <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800c57e:	f04f 33ff 	mov.w	r3, #4294967295
 800c582:	e0e2      	b.n	800c74a <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c584:	4b76      	ldr	r3, [pc, #472]	; (800c760 <LmHandlerConfigure+0x228>)
 800c586:	2201      	movs	r2, #1
 800c588:	2100      	movs	r1, #0
 800c58a:	2000      	movs	r0, #0
 800c58c:	f00e fa96 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c590:	e7fe      	b.n	800c590 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800c592:	f000 fdfa 	bl	800d18a <NvmDataMgmtRestore>
 800c596:	4603      	mov	r3, r0
 800c598:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800c59a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d003      	beq.n	800c5a8 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800c5a0:	4b70      	ldr	r3, [pc, #448]	; (800c764 <LmHandlerConfigure+0x22c>)
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	701a      	strb	r2, [r3, #0]
 800c5a6:	e002      	b.n	800c5ae <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800c5a8:	4b6e      	ldr	r3, [pc, #440]	; (800c764 <LmHandlerConfigure+0x22c>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c5b2:	f107 0314 	add.w	r3, r7, #20
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f004 fe42 	bl	8011240 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	2208      	movs	r2, #8
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	4869      	ldr	r0, [pc, #420]	; (800c768 <LmHandlerConfigure+0x230>)
 800c5c4:	f00a f87f 	bl	80166c6 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c5cc:	f107 0314 	add.w	r3, r7, #20
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f004 fe35 	bl	8011240 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	2208      	movs	r2, #8
 800c5da:	4619      	mov	r1, r3
 800c5dc:	4863      	ldr	r0, [pc, #396]	; (800c76c <LmHandlerConfigure+0x234>)
 800c5de:	f00a f872 	bl	80166c6 <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c5e2:	4b63      	ldr	r3, [pc, #396]	; (800c770 <LmHandlerConfigure+0x238>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	4798      	blx	r3
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	4a5e      	ldr	r2, [pc, #376]	; (800c768 <LmHandlerConfigure+0x230>)
 800c5ee:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800c5f0:	2306      	movs	r3, #6
 800c5f2:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c5f4:	4b5c      	ldr	r3, [pc, #368]	; (800c768 <LmHandlerConfigure+0x230>)
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c5fa:	f107 0314 	add.w	r3, r7, #20
 800c5fe:	4618      	mov	r0, r3
 800c600:	f004 ff7c 	bl	80114fc <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c604:	4b58      	ldr	r3, [pc, #352]	; (800c768 <LmHandlerConfigure+0x230>)
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	461a      	mov	r2, r3
 800c60a:	4b57      	ldr	r3, [pc, #348]	; (800c768 <LmHandlerConfigure+0x230>)
 800c60c:	785b      	ldrb	r3, [r3, #1]
 800c60e:	4619      	mov	r1, r3
 800c610:	4b55      	ldr	r3, [pc, #340]	; (800c768 <LmHandlerConfigure+0x230>)
 800c612:	789b      	ldrb	r3, [r3, #2]
 800c614:	4618      	mov	r0, r3
 800c616:	4b54      	ldr	r3, [pc, #336]	; (800c768 <LmHandlerConfigure+0x230>)
 800c618:	78db      	ldrb	r3, [r3, #3]
 800c61a:	461c      	mov	r4, r3
 800c61c:	4b52      	ldr	r3, [pc, #328]	; (800c768 <LmHandlerConfigure+0x230>)
 800c61e:	791b      	ldrb	r3, [r3, #4]
 800c620:	461d      	mov	r5, r3
 800c622:	4b51      	ldr	r3, [pc, #324]	; (800c768 <LmHandlerConfigure+0x230>)
 800c624:	795b      	ldrb	r3, [r3, #5]
 800c626:	461e      	mov	r6, r3
 800c628:	4b4f      	ldr	r3, [pc, #316]	; (800c768 <LmHandlerConfigure+0x230>)
 800c62a:	799b      	ldrb	r3, [r3, #6]
 800c62c:	603b      	str	r3, [r7, #0]
 800c62e:	4b4e      	ldr	r3, [pc, #312]	; (800c768 <LmHandlerConfigure+0x230>)
 800c630:	79db      	ldrb	r3, [r3, #7]
 800c632:	9307      	str	r3, [sp, #28]
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	9306      	str	r3, [sp, #24]
 800c638:	9605      	str	r6, [sp, #20]
 800c63a:	9504      	str	r5, [sp, #16]
 800c63c:	9403      	str	r4, [sp, #12]
 800c63e:	9002      	str	r0, [sp, #8]
 800c640:	9101      	str	r1, [sp, #4]
 800c642:	9200      	str	r2, [sp, #0]
 800c644:	4b4b      	ldr	r3, [pc, #300]	; (800c774 <LmHandlerConfigure+0x23c>)
 800c646:	2200      	movs	r2, #0
 800c648:	2100      	movs	r1, #0
 800c64a:	2002      	movs	r0, #2
 800c64c:	f00e fa36 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c650:	4b45      	ldr	r3, [pc, #276]	; (800c768 <LmHandlerConfigure+0x230>)
 800c652:	7a1b      	ldrb	r3, [r3, #8]
 800c654:	461a      	mov	r2, r3
 800c656:	4b44      	ldr	r3, [pc, #272]	; (800c768 <LmHandlerConfigure+0x230>)
 800c658:	7a5b      	ldrb	r3, [r3, #9]
 800c65a:	4619      	mov	r1, r3
 800c65c:	4b42      	ldr	r3, [pc, #264]	; (800c768 <LmHandlerConfigure+0x230>)
 800c65e:	7a9b      	ldrb	r3, [r3, #10]
 800c660:	4618      	mov	r0, r3
 800c662:	4b41      	ldr	r3, [pc, #260]	; (800c768 <LmHandlerConfigure+0x230>)
 800c664:	7adb      	ldrb	r3, [r3, #11]
 800c666:	461c      	mov	r4, r3
 800c668:	4b3f      	ldr	r3, [pc, #252]	; (800c768 <LmHandlerConfigure+0x230>)
 800c66a:	7b1b      	ldrb	r3, [r3, #12]
 800c66c:	461d      	mov	r5, r3
 800c66e:	4b3e      	ldr	r3, [pc, #248]	; (800c768 <LmHandlerConfigure+0x230>)
 800c670:	7b5b      	ldrb	r3, [r3, #13]
 800c672:	461e      	mov	r6, r3
 800c674:	4b3c      	ldr	r3, [pc, #240]	; (800c768 <LmHandlerConfigure+0x230>)
 800c676:	7b9b      	ldrb	r3, [r3, #14]
 800c678:	603b      	str	r3, [r7, #0]
 800c67a:	4b3b      	ldr	r3, [pc, #236]	; (800c768 <LmHandlerConfigure+0x230>)
 800c67c:	7bdb      	ldrb	r3, [r3, #15]
 800c67e:	9307      	str	r3, [sp, #28]
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	9306      	str	r3, [sp, #24]
 800c684:	9605      	str	r6, [sp, #20]
 800c686:	9504      	str	r5, [sp, #16]
 800c688:	9403      	str	r4, [sp, #12]
 800c68a:	9002      	str	r0, [sp, #8]
 800c68c:	9101      	str	r1, [sp, #4]
 800c68e:	9200      	str	r2, [sp, #0]
 800c690:	4b39      	ldr	r3, [pc, #228]	; (800c778 <LmHandlerConfigure+0x240>)
 800c692:	2200      	movs	r2, #0
 800c694:	2100      	movs	r1, #0
 800c696:	2002      	movs	r0, #2
 800c698:	f00e fa10 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800c69c:	4b37      	ldr	r3, [pc, #220]	; (800c77c <LmHandlerConfigure+0x244>)
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	4b37      	ldr	r3, [pc, #220]	; (800c780 <LmHandlerConfigure+0x248>)
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	4b36      	ldr	r3, [pc, #216]	; (800c784 <LmHandlerConfigure+0x24c>)
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	4b36      	ldr	r3, [pc, #216]	; (800c788 <LmHandlerConfigure+0x250>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	9303      	str	r3, [sp, #12]
 800c6b4:	9002      	str	r0, [sp, #8]
 800c6b6:	9101      	str	r1, [sp, #4]
 800c6b8:	9200      	str	r2, [sp, #0]
 800c6ba:	4b34      	ldr	r3, [pc, #208]	; (800c78c <LmHandlerConfigure+0x254>)
 800c6bc:	2200      	movs	r2, #0
 800c6be:	2100      	movs	r1, #0
 800c6c0:	2002      	movs	r0, #2
 800c6c2:	f00e f9fb 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c6c6:	230f      	movs	r3, #15
 800c6c8:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c6ce:	f107 0314 	add.w	r3, r7, #20
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f004 ff12 	bl	80114fc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800c6d8:	2305      	movs	r3, #5
 800c6da:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c6e0:	f107 0314 	add.w	r3, r7, #20
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f004 ff09 	bl	80114fc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c6ea:	2310      	movs	r3, #16
 800c6ec:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c6f2:	f107 0314 	add.w	r3, r7, #20
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f004 ff00 	bl	80114fc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c6fc:	2304      	movs	r3, #4
 800c6fe:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c700:	4b14      	ldr	r3, [pc, #80]	; (800c754 <LmHandlerConfigure+0x21c>)
 800c702:	789b      	ldrb	r3, [r3, #2]
 800c704:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c706:	f107 0314 	add.w	r3, r7, #20
 800c70a:	4618      	mov	r0, r3
 800c70c:	f004 fef6 	bl	80114fc <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c710:	230f      	movs	r3, #15
 800c712:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c714:	4b0f      	ldr	r3, [pc, #60]	; (800c754 <LmHandlerConfigure+0x21c>)
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	f107 020c 	add.w	r2, r7, #12
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f007 fcc6 	bl	80140b0 <RegionGetPhyParam>
 800c724:	4603      	mov	r3, r0
 800c726:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	bf14      	ite	ne
 800c72e:	2301      	movne	r3, #1
 800c730:	2300      	moveq	r3, #0
 800c732:	b2da      	uxtb	r2, r3
 800c734:	4b07      	ldr	r3, [pc, #28]	; (800c754 <LmHandlerConfigure+0x21c>)
 800c736:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800c738:	2014      	movs	r0, #20
 800c73a:	f000 fa6f 	bl	800cc1c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c73e:	4b05      	ldr	r3, [pc, #20]	; (800c754 <LmHandlerConfigure+0x21c>)
 800c740:	795b      	ldrb	r3, [r3, #5]
 800c742:	4618      	mov	r0, r3
 800c744:	f005 fc4e 	bl	8011fe4 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3744      	adds	r7, #68	; 0x44
 800c74e:	46bd      	mov	sp, r7
 800c750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c752:	bf00      	nop
 800c754:	200003d8 	.word	0x200003d8
 800c758:	200003fc 	.word	0x200003fc
 800c75c:	200003ec 	.word	0x200003ec
 800c760:	0801b730 	.word	0x0801b730
 800c764:	2000051a 	.word	0x2000051a
 800c768:	200000a0 	.word	0x200000a0
 800c76c:	200000a8 	.word	0x200000a8
 800c770:	200003e8 	.word	0x200003e8
 800c774:	0801b77c 	.word	0x0801b77c
 800c778:	0801b7b8 	.word	0x0801b7b8
 800c77c:	200000b7 	.word	0x200000b7
 800c780:	200000b6 	.word	0x200000b6
 800c784:	200000b5 	.word	0x200000b5
 800c788:	200000b4 	.word	0x200000b4
 800c78c:	0801b7f4 	.word	0x0801b7f4

0800c790 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c794:	f002 f9b8 	bl	800eb08 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c798:	f000 fc9a 	bl	800d0d0 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800c79c:	f000 fcee 	bl	800d17c <NvmDataMgmtStore>
}
 800c7a0:	bf00      	nop
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b090      	sub	sp, #64	; 0x40
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c7ae:	79fb      	ldrb	r3, [r7, #7]
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d111      	bne.n	800c7d8 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c7b4:	4b23      	ldr	r3, [pc, #140]	; (800c844 <LmHandlerJoin+0xa0>)
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800c7ba:	f004 fcab 	bl	8011114 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c7c2:	4b21      	ldr	r3, [pc, #132]	; (800c848 <LmHandlerJoin+0xa4>)
 800c7c4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c7cc:	f107 0308 	add.w	r3, r7, #8
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f005 f9d1 	bl	8011b78 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800c7d6:	e030      	b.n	800c83a <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c7d8:	4b1a      	ldr	r3, [pc, #104]	; (800c844 <LmHandlerJoin+0xa0>)
 800c7da:	2201      	movs	r2, #1
 800c7dc:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c7de:	4b1a      	ldr	r3, [pc, #104]	; (800c848 <LmHandlerJoin+0xa4>)
 800c7e0:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c7e4:	4b17      	ldr	r3, [pc, #92]	; (800c844 <LmHandlerJoin+0xa0>)
 800c7e6:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c7e8:	4b16      	ldr	r3, [pc, #88]	; (800c844 <LmHandlerJoin+0xa0>)
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800c7ee:	4b17      	ldr	r3, [pc, #92]	; (800c84c <LmHandlerJoin+0xa8>)
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	f083 0301 	eor.w	r3, r3, #1
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d008      	beq.n	800c80e <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c7fc:	2327      	movs	r3, #39	; 0x27
 800c7fe:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c800:	4b13      	ldr	r3, [pc, #76]	; (800c850 <LmHandlerJoin+0xac>)
 800c802:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c804:	f107 031c 	add.w	r3, r7, #28
 800c808:	4618      	mov	r0, r3
 800c80a:	f004 fe77 	bl	80114fc <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c80e:	f004 fc81 	bl	8011114 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c812:	2301      	movs	r3, #1
 800c814:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c816:	2301      	movs	r3, #1
 800c818:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c81c:	f107 031c 	add.w	r3, r7, #28
 800c820:	4618      	mov	r0, r3
 800c822:	f004 fe6b 	bl	80114fc <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c826:	4b0b      	ldr	r3, [pc, #44]	; (800c854 <LmHandlerJoin+0xb0>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	69db      	ldr	r3, [r3, #28]
 800c82c:	4805      	ldr	r0, [pc, #20]	; (800c844 <LmHandlerJoin+0xa0>)
 800c82e:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c830:	4b05      	ldr	r3, [pc, #20]	; (800c848 <LmHandlerJoin+0xa4>)
 800c832:	785b      	ldrb	r3, [r3, #1]
 800c834:	4618      	mov	r0, r3
 800c836:	f000 f917 	bl	800ca68 <LmHandlerRequestClass>
}
 800c83a:	bf00      	nop
 800c83c:	3740      	adds	r7, #64	; 0x40
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	200000c4 	.word	0x200000c4
 800c848:	200003d8 	.word	0x200003d8
 800c84c:	2000051a 	.word	0x2000051a
 800c850:	01000300 	.word	0x01000300
 800c854:	200003e8 	.word	0x200003e8

0800c858 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b08a      	sub	sp, #40	; 0x28
 800c85c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c85e:	2301      	movs	r3, #1
 800c860:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c862:	463b      	mov	r3, r7
 800c864:	4618      	mov	r0, r3
 800c866:	f004 fceb 	bl	8011240 <LoRaMacMibGetRequestConfirm>
 800c86a:	4603      	mov	r3, r0
 800c86c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c874:	2b00      	cmp	r3, #0
 800c876:	d106      	bne.n	800c886 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c878:	793b      	ldrb	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d101      	bne.n	800c882 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c87e:	2300      	movs	r3, #0
 800c880:	e002      	b.n	800c888 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c882:	2301      	movs	r3, #1
 800c884:	e000      	b.n	800c888 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c886:	2300      	movs	r3, #0
    }
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3728      	adds	r7, #40	; 0x28
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b08c      	sub	sp, #48	; 0x30
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	607a      	str	r2, [r7, #4]
 800c89a:	461a      	mov	r2, r3
 800c89c:	460b      	mov	r3, r1
 800c89e:	72fb      	strb	r3, [r7, #11]
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c8a4:	23ff      	movs	r3, #255	; 0xff
 800c8a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c8aa:	f001 fe97 	bl	800e5dc <LoRaMacIsBusy>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d002      	beq.n	800c8ba <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c8b4:	f06f 0301 	mvn.w	r3, #1
 800c8b8:	e0b4      	b.n	800ca24 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c8ba:	f7ff ffcd 	bl	800c858 <LmHandlerJoinStatus>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d007      	beq.n	800c8d4 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800c8c4:	4b59      	ldr	r3, [pc, #356]	; (800ca2c <LmHandlerSend+0x19c>)
 800c8c6:	789b      	ldrb	r3, [r3, #2]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7ff ff6b 	bl	800c7a4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c8ce:	f06f 0302 	mvn.w	r3, #2
 800c8d2:	e0a7      	b.n	800ca24 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c8d4:	4b56      	ldr	r3, [pc, #344]	; (800ca30 <LmHandlerSend+0x1a0>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68db      	ldr	r3, [r3, #12]
 800c8da:	4798      	blx	r3
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00d      	beq.n	800c8fe <LmHandlerSend+0x6e>
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	781a      	ldrb	r2, [r3, #0]
 800c8e6:	4b52      	ldr	r3, [pc, #328]	; (800ca30 <LmHandlerSend+0x1a0>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d006      	beq.n	800c8fe <LmHandlerSend+0x6e>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d002      	beq.n	800c8fe <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c8f8:	f06f 0303 	mvn.w	r3, #3
 800c8fc:	e092      	b.n	800ca24 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c8fe:	4b4d      	ldr	r3, [pc, #308]	; (800ca34 <LmHandlerSend+0x1a4>)
 800c900:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	785b      	ldrb	r3, [r3, #1]
 800c90c:	f107 0214 	add.w	r2, r7, #20
 800c910:	4611      	mov	r1, r2
 800c912:	4618      	mov	r0, r3
 800c914:	f004 fc0c 	bl	8011130 <LoRaMacQueryTxPossible>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d009      	beq.n	800c932 <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800c91e:	4b46      	ldr	r3, [pc, #280]	; (800ca38 <LmHandlerSend+0x1a8>)
 800c920:	2200      	movs	r2, #0
 800c922:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c924:	2300      	movs	r3, #0
 800c926:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c928:	2300      	movs	r3, #0
 800c92a:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c92c:	2300      	movs	r3, #0
 800c92e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c930:	e017      	b.n	800c962 <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800c932:	4a41      	ldr	r2, [pc, #260]	; (800ca38 <LmHandlerSend+0x1a8>)
 800c934:	7afb      	ldrb	r3, [r7, #11]
 800c936:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	785b      	ldrb	r3, [r3, #1]
 800c942:	b29b      	uxth	r3, r3
 800c944:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800c94c:	7afb      	ldrb	r3, [r7, #11]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d102      	bne.n	800c958 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c952:	2300      	movs	r3, #0
 800c954:	763b      	strb	r3, [r7, #24]
 800c956:	e004      	b.n	800c962 <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800c958:	2301      	movs	r3, #1
 800c95a:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c95c:	2308      	movs	r3, #8
 800c95e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800c962:	4b35      	ldr	r3, [pc, #212]	; (800ca38 <LmHandlerSend+0x1a8>)
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	330c      	adds	r3, #12
 800c968:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c96c:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c970:	4b30      	ldr	r3, [pc, #192]	; (800ca34 <LmHandlerSend+0x1a4>)
 800c972:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c976:	4b30      	ldr	r3, [pc, #192]	; (800ca38 <LmHandlerSend+0x1a8>)
 800c978:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c97a:	7aba      	ldrb	r2, [r7, #10]
 800c97c:	f107 0318 	add.w	r3, r7, #24
 800c980:	4611      	mov	r1, r2
 800c982:	4618      	mov	r0, r3
 800c984:	f005 fa38 	bl	8011df8 <LoRaMacMcpsRequest>
 800c988:	4603      	mov	r3, r0
 800c98a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d002      	beq.n	800c99a <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800c99a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c99e:	2b11      	cmp	r3, #17
 800c9a0:	d83a      	bhi.n	800ca18 <LmHandlerSend+0x188>
 800c9a2:	a201      	add	r2, pc, #4	; (adr r2, 800c9a8 <LmHandlerSend+0x118>)
 800c9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a8:	0800c9f1 	.word	0x0800c9f1
 800c9ac:	0800c9f9 	.word	0x0800c9f9
 800c9b0:	0800ca19 	.word	0x0800ca19
 800c9b4:	0800ca19 	.word	0x0800ca19
 800c9b8:	0800ca19 	.word	0x0800ca19
 800c9bc:	0800ca19 	.word	0x0800ca19
 800c9c0:	0800ca19 	.word	0x0800ca19
 800c9c4:	0800ca01 	.word	0x0800ca01
 800c9c8:	0800ca19 	.word	0x0800ca19
 800c9cc:	0800ca19 	.word	0x0800ca19
 800c9d0:	0800ca19 	.word	0x0800ca19
 800c9d4:	0800ca11 	.word	0x0800ca11
 800c9d8:	0800ca19 	.word	0x0800ca19
 800c9dc:	0800ca19 	.word	0x0800ca19
 800c9e0:	0800c9f9 	.word	0x0800c9f9
 800c9e4:	0800c9f9 	.word	0x0800c9f9
 800c9e8:	0800c9f9 	.word	0x0800c9f9
 800c9ec:	0800ca09 	.word	0x0800ca09
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c9f6:	e013      	b.n	800ca20 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c9f8:	23fe      	movs	r3, #254	; 0xfe
 800c9fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c9fe:	e00f      	b.n	800ca20 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ca00:	23fd      	movs	r3, #253	; 0xfd
 800ca02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca06:	e00b      	b.n	800ca20 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800ca08:	23fb      	movs	r3, #251	; 0xfb
 800ca0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca0e:	e007      	b.n	800ca20 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800ca10:	23fa      	movs	r3, #250	; 0xfa
 800ca12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca16:	e003      	b.n	800ca20 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ca18:	23ff      	movs	r3, #255	; 0xff
 800ca1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca1e:	bf00      	nop
    }

    return lmhStatus;
 800ca20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3730      	adds	r7, #48	; 0x30
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	200000c4 	.word	0x200000c4
 800ca30:	200003c4 	.word	0x200003c4
 800ca34:	200003d8 	.word	0x200003d8
 800ca38:	20000410 	.word	0x20000410

0800ca3c <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b086      	sub	sp, #24
 800ca40:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ca42:	230a      	movs	r3, #10
 800ca44:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ca46:	463b      	mov	r3, r7
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f005 f895 	bl	8011b78 <LoRaMacMlmeRequest>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d101      	bne.n	800ca5c <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	e001      	b.n	800ca60 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ca5c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3718      	adds	r7, #24
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b08c      	sub	sp, #48	; 0x30
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	4603      	mov	r3, r0
 800ca70:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ca72:	2300      	movs	r3, #0
 800ca74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800ca78:	f001 fdb0 	bl	800e5dc <LoRaMacIsBusy>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d002      	beq.n	800ca88 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ca82:	f06f 0301 	mvn.w	r3, #1
 800ca86:	e07b      	b.n	800cb80 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800ca88:	f7ff fee6 	bl	800c858 <LmHandlerJoinStatus>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d002      	beq.n	800ca98 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ca92:	f06f 0302 	mvn.w	r3, #2
 800ca96:	e073      	b.n	800cb80 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ca9c:	f107 0308 	add.w	r3, r7, #8
 800caa0:	4618      	mov	r0, r3
 800caa2:	f004 fbcd 	bl	8011240 <LoRaMacMibGetRequestConfirm>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d002      	beq.n	800cab2 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800caac:	f04f 33ff 	mov.w	r3, #4294967295
 800cab0:	e066      	b.n	800cb80 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800cab2:	7b3b      	ldrb	r3, [r7, #12]
 800cab4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800cab8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cabc:	79fb      	ldrb	r3, [r7, #7]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d055      	beq.n	800cb6e <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	2b02      	cmp	r3, #2
 800cac6:	d02c      	beq.n	800cb22 <LmHandlerRequestClass+0xba>
 800cac8:	2b02      	cmp	r3, #2
 800caca:	dc52      	bgt.n	800cb72 <LmHandlerRequestClass+0x10a>
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <LmHandlerRequestClass+0x6e>
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d022      	beq.n	800cb1a <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800cad4:	e04d      	b.n	800cb72 <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800cad6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d04b      	beq.n	800cb76 <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800cade:	79fb      	ldrb	r3, [r7, #7]
 800cae0:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cae2:	f107 0308 	add.w	r3, r7, #8
 800cae6:	4618      	mov	r0, r3
 800cae8:	f004 fd08 	bl	80114fc <LoRaMacMibSetRequestConfirm>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10f      	bne.n	800cb12 <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800caf2:	79fb      	ldrb	r3, [r7, #7]
 800caf4:	4618      	mov	r0, r3
 800caf6:	f000 fb1f 	bl	800d138 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cafa:	4b23      	ldr	r3, [pc, #140]	; (800cb88 <LmHandlerRequestClass+0x120>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d038      	beq.n	800cb76 <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cb04:	4b20      	ldr	r3, [pc, #128]	; (800cb88 <LmHandlerRequestClass+0x120>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb0a:	79fa      	ldrb	r2, [r7, #7]
 800cb0c:	4610      	mov	r0, r2
 800cb0e:	4798      	blx	r3
            break;
 800cb10:	e031      	b.n	800cb76 <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cb12:	23ff      	movs	r3, #255	; 0xff
 800cb14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb18:	e02d      	b.n	800cb76 <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800cb1a:	23ff      	movs	r3, #255	; 0xff
 800cb1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb20:	e02c      	b.n	800cb7c <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800cb22:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d003      	beq.n	800cb32 <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cb2a:	23ff      	movs	r3, #255	; 0xff
 800cb2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb30:	e023      	b.n	800cb7a <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800cb32:	79fb      	ldrb	r3, [r7, #7]
 800cb34:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cb36:	f107 0308 	add.w	r3, r7, #8
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f004 fcde 	bl	80114fc <LoRaMacMibSetRequestConfirm>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10f      	bne.n	800cb66 <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800cb46:	79fb      	ldrb	r3, [r7, #7]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f000 faf5 	bl	800d138 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cb4e:	4b0e      	ldr	r3, [pc, #56]	; (800cb88 <LmHandlerRequestClass+0x120>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d010      	beq.n	800cb7a <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cb58:	4b0b      	ldr	r3, [pc, #44]	; (800cb88 <LmHandlerRequestClass+0x120>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb5e:	79fa      	ldrb	r2, [r7, #7]
 800cb60:	4610      	mov	r0, r2
 800cb62:	4798      	blx	r3
            break;
 800cb64:	e009      	b.n	800cb7a <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cb66:	23ff      	movs	r3, #255	; 0xff
 800cb68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb6c:	e005      	b.n	800cb7a <LmHandlerRequestClass+0x112>
        }
    }
 800cb6e:	bf00      	nop
 800cb70:	e004      	b.n	800cb7c <LmHandlerRequestClass+0x114>
            break;
 800cb72:	bf00      	nop
 800cb74:	e002      	b.n	800cb7c <LmHandlerRequestClass+0x114>
            break;
 800cb76:	bf00      	nop
 800cb78:	e000      	b.n	800cb7c <LmHandlerRequestClass+0x114>
            break;
 800cb7a:	bf00      	nop
    return errorStatus;
 800cb7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3730      	adds	r7, #48	; 0x30
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	200003e8 	.word	0x200003e8

0800cb8c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b08c      	sub	sp, #48	; 0x30
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d102      	bne.n	800cba0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb9e:	e010      	b.n	800cbc2 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cba0:	2300      	movs	r3, #0
 800cba2:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800cba4:	f107 030c 	add.w	r3, r7, #12
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f004 fb49 	bl	8011240 <LoRaMacMibGetRequestConfirm>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbb4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbb8:	e003      	b.n	800cbc2 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800cbba:	7c3a      	ldrb	r2, [r7, #16]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800cbc0:	2300      	movs	r3, #0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3730      	adds	r7, #48	; 0x30
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
	...

0800cbcc <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b08c      	sub	sp, #48	; 0x30
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d102      	bne.n	800cbe0 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbda:	f04f 33ff 	mov.w	r3, #4294967295
 800cbde:	e016      	b.n	800cc0e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800cbe0:	231f      	movs	r3, #31
 800cbe2:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800cbe4:	f107 030c 	add.w	r3, r7, #12
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f004 fb29 	bl	8011240 <LoRaMacMibGetRequestConfirm>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf8:	e009      	b.n	800cc0e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800cbfa:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f993 2000 	ldrsb.w	r2, [r3]
 800cc08:	4b03      	ldr	r3, [pc, #12]	; (800cc18 <LmHandlerGetTxDatarate+0x4c>)
 800cc0a:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3730      	adds	r7, #48	; 0x30
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	200003d8 	.word	0x200003d8

0800cc1c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b08c      	sub	sp, #48	; 0x30
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800cc24:	2322      	movs	r3, #34	; 0x22
 800cc26:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cc2c:	f107 030c 	add.w	r3, r7, #12
 800cc30:	4618      	mov	r0, r3
 800cc32:	f004 fc63 	bl	80114fc <LoRaMacMibSetRequestConfirm>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc40:	e000      	b.n	800cc44 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3730      	adds	r7, #48	; 0x30
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800cc54:	4b15      	ldr	r3, [pc, #84]	; (800ccac <McpsConfirm+0x60>)
 800cc56:	2201      	movs	r2, #1
 800cc58:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	785a      	ldrb	r2, [r3, #1]
 800cc5e:	4b13      	ldr	r3, [pc, #76]	; (800ccac <McpsConfirm+0x60>)
 800cc60:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	789b      	ldrb	r3, [r3, #2]
 800cc66:	b25a      	sxtb	r2, r3
 800cc68:	4b10      	ldr	r3, [pc, #64]	; (800ccac <McpsConfirm+0x60>)
 800cc6a:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	4a0e      	ldr	r2, [pc, #56]	; (800ccac <McpsConfirm+0x60>)
 800cc72:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800cc7a:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <McpsConfirm+0x60>)
 800cc7c:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	4b09      	ldr	r3, [pc, #36]	; (800ccac <McpsConfirm+0x60>)
 800cc86:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	791b      	ldrb	r3, [r3, #4]
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	4b07      	ldr	r3, [pc, #28]	; (800ccac <McpsConfirm+0x60>)
 800cc90:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800cc92:	4b07      	ldr	r3, [pc, #28]	; (800ccb0 <McpsConfirm+0x64>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6a1b      	ldr	r3, [r3, #32]
 800cc98:	4804      	ldr	r0, [pc, #16]	; (800ccac <McpsConfirm+0x60>)
 800cc9a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800cc9c:	6879      	ldr	r1, [r7, #4]
 800cc9e:	2000      	movs	r0, #0
 800cca0:	f000 f99a 	bl	800cfd8 <LmHandlerPackagesNotify>
}
 800cca4:	bf00      	nop
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	20000410 	.word	0x20000410
 800ccb0:	200003e8 	.word	0x200003e8

0800ccb4 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b088      	sub	sp, #32
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ccc2:	4b32      	ldr	r3, [pc, #200]	; (800cd8c <McpsIndication+0xd8>)
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	785a      	ldrb	r2, [r3, #1]
 800cccc:	4b2f      	ldr	r3, [pc, #188]	; (800cd8c <McpsIndication+0xd8>)
 800ccce:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ccd0:	4b2e      	ldr	r3, [pc, #184]	; (800cd8c <McpsIndication+0xd8>)
 800ccd2:	785b      	ldrb	r3, [r3, #1]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d154      	bne.n	800cd82 <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	791b      	ldrb	r3, [r3, #4]
 800ccdc:	b25a      	sxtb	r2, r3
 800ccde:	4b2b      	ldr	r3, [pc, #172]	; (800cd8c <McpsIndication+0xd8>)
 800cce0:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cce8:	b25a      	sxtb	r2, r3
 800ccea:	4b28      	ldr	r3, [pc, #160]	; (800cd8c <McpsIndication+0xd8>)
 800ccec:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ccf4:	4b25      	ldr	r3, [pc, #148]	; (800cd8c <McpsIndication+0xd8>)
 800ccf6:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	78db      	ldrb	r3, [r3, #3]
 800ccfc:	b25a      	sxtb	r2, r3
 800ccfe:	4b23      	ldr	r3, [pc, #140]	; (800cd8c <McpsIndication+0xd8>)
 800cd00:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	4a21      	ldr	r2, [pc, #132]	; (800cd8c <McpsIndication+0xd8>)
 800cd08:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	78db      	ldrb	r3, [r3, #3]
 800cd0e:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	7b1b      	ldrb	r3, [r3, #12]
 800cd14:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800cd1c:	4b1c      	ldr	r3, [pc, #112]	; (800cd90 <McpsIndication+0xdc>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd22:	f107 0218 	add.w	r2, r7, #24
 800cd26:	4919      	ldr	r1, [pc, #100]	; (800cd8c <McpsIndication+0xd8>)
 800cd28:	4610      	mov	r0, r2
 800cd2a:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800cd2c:	4b18      	ldr	r3, [pc, #96]	; (800cd90 <McpsIndication+0xdc>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d007      	beq.n	800cd46 <McpsIndication+0x92>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	7e1b      	ldrb	r3, [r3, #24]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d003      	beq.n	800cd46 <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cd3e:	4b14      	ldr	r3, [pc, #80]	; (800cd90 <McpsIndication+0xdc>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd44:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cd46:	6879      	ldr	r1, [r7, #4]
 800cd48:	2001      	movs	r0, #1
 800cd4a:	f000 f945 	bl	800cfd8 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800cd4e:	f107 0317 	add.w	r3, r7, #23
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7ff ff1a 	bl	800cb8c <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	795b      	ldrb	r3, [r3, #5]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d111      	bne.n	800cd84 <McpsIndication+0xd0>
 800cd60:	7dfb      	ldrb	r3, [r7, #23]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d10e      	bne.n	800cd84 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800cd66:	2300      	movs	r3, #0
 800cd68:	733b      	strb	r3, [r7, #12]
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	737b      	strb	r3, [r7, #13]
 800cd6e:	2300      	movs	r3, #0
 800cd70:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800cd72:	f107 000c 	add.w	r0, r7, #12
 800cd76:	2301      	movs	r3, #1
 800cd78:	2200      	movs	r2, #0
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	f7ff fd88 	bl	800c890 <LmHandlerSend>
 800cd80:	e000      	b.n	800cd84 <McpsIndication+0xd0>
        return;
 800cd82:	bf00      	nop
    }
}
 800cd84:	3720      	adds	r7, #32
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	200000c8 	.word	0x200000c8
 800cd90:	200003e8 	.word	0x200003e8

0800cd94 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b08c      	sub	sp, #48	; 0x30
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cd9c:	4b28      	ldr	r3, [pc, #160]	; (800ce40 <MlmeConfirm+0xac>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	785a      	ldrb	r2, [r3, #1]
 800cda6:	4b26      	ldr	r3, [pc, #152]	; (800ce40 <MlmeConfirm+0xac>)
 800cda8:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cdaa:	4b26      	ldr	r3, [pc, #152]	; (800ce44 <MlmeConfirm+0xb0>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6a1b      	ldr	r3, [r3, #32]
 800cdb0:	4823      	ldr	r0, [pc, #140]	; (800ce40 <MlmeConfirm+0xac>)
 800cdb2:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cdb4:	6879      	ldr	r1, [r7, #4]
 800cdb6:	2002      	movs	r0, #2
 800cdb8:	f000 f90e 	bl	800cfd8 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	2b0a      	cmp	r3, #10
 800cdc2:	d035      	beq.n	800ce30 <MlmeConfirm+0x9c>
 800cdc4:	2b0a      	cmp	r3, #10
 800cdc6:	dc35      	bgt.n	800ce34 <MlmeConfirm+0xa0>
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d002      	beq.n	800cdd2 <MlmeConfirm+0x3e>
 800cdcc:	2b04      	cmp	r3, #4
 800cdce:	d023      	beq.n	800ce18 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cdd0:	e030      	b.n	800ce34 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800cdd2:	2306      	movs	r3, #6
 800cdd4:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cdd6:	f107 030c 	add.w	r3, r7, #12
 800cdda:	4618      	mov	r0, r3
 800cddc:	f004 fa30 	bl	8011240 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	4a19      	ldr	r2, [pc, #100]	; (800ce48 <MlmeConfirm+0xb4>)
 800cde4:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cde6:	4819      	ldr	r0, [pc, #100]	; (800ce4c <MlmeConfirm+0xb8>)
 800cde8:	f7ff fef0 	bl	800cbcc <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	785b      	ldrb	r3, [r3, #1]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d108      	bne.n	800ce06 <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cdf4:	4b15      	ldr	r3, [pc, #84]	; (800ce4c <MlmeConfirm+0xb8>)
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800cdfa:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <MlmeConfirm+0xbc>)
 800cdfc:	785b      	ldrb	r3, [r3, #1]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7ff fe32 	bl	800ca68 <LmHandlerRequestClass>
 800ce04:	e002      	b.n	800ce0c <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800ce06:	4b11      	ldr	r3, [pc, #68]	; (800ce4c <MlmeConfirm+0xb8>)
 800ce08:	22ff      	movs	r2, #255	; 0xff
 800ce0a:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800ce0c:	4b0d      	ldr	r3, [pc, #52]	; (800ce44 <MlmeConfirm+0xb0>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	69db      	ldr	r3, [r3, #28]
 800ce12:	480e      	ldr	r0, [pc, #56]	; (800ce4c <MlmeConfirm+0xb8>)
 800ce14:	4798      	blx	r3
        break;
 800ce16:	e00e      	b.n	800ce36 <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800ce18:	4b0e      	ldr	r3, [pc, #56]	; (800ce54 <MlmeConfirm+0xc0>)
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	7a1a      	ldrb	r2, [r3, #8]
 800ce22:	4b0c      	ldr	r3, [pc, #48]	; (800ce54 <MlmeConfirm+0xc0>)
 800ce24:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	7a5a      	ldrb	r2, [r3, #9]
 800ce2a:	4b0a      	ldr	r3, [pc, #40]	; (800ce54 <MlmeConfirm+0xc0>)
 800ce2c:	73da      	strb	r2, [r3, #15]
        break;
 800ce2e:	e002      	b.n	800ce36 <MlmeConfirm+0xa2>
        break;
 800ce30:	bf00      	nop
 800ce32:	e000      	b.n	800ce36 <MlmeConfirm+0xa2>
        break;
 800ce34:	bf00      	nop
    }
}
 800ce36:	bf00      	nop
 800ce38:	3730      	adds	r7, #48	; 0x30
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	20000410 	.word	0x20000410
 800ce44:	200003e8 	.word	0x200003e8
 800ce48:	200000a0 	.word	0x200000a0
 800ce4c:	200000c4 	.word	0x200000c4
 800ce50:	200003d8 	.word	0x200003d8
 800ce54:	200000c8 	.word	0x200000c8

0800ce58 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ce62:	4b22      	ldr	r3, [pc, #136]	; (800ceec <MlmeIndication+0x94>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	785a      	ldrb	r2, [r3, #1]
 800ce6c:	4b1f      	ldr	r3, [pc, #124]	; (800ceec <MlmeIndication+0x94>)
 800ce6e:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce76:	b25a      	sxtb	r2, r3
 800ce78:	4b1c      	ldr	r3, [pc, #112]	; (800ceec <MlmeIndication+0x94>)
 800ce7a:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ce82:	4b1a      	ldr	r3, [pc, #104]	; (800ceec <MlmeIndication+0x94>)
 800ce84:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	78db      	ldrb	r3, [r3, #3]
 800ce8a:	b25a      	sxtb	r2, r3
 800ce8c:	4b17      	ldr	r3, [pc, #92]	; (800ceec <MlmeIndication+0x94>)
 800ce8e:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800ce90:	4b16      	ldr	r3, [pc, #88]	; (800ceec <MlmeIndication+0x94>)
 800ce92:	785b      	ldrb	r3, [r3, #1]
 800ce94:	2b0e      	cmp	r3, #14
 800ce96:	d005      	beq.n	800cea4 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800ce98:	4b15      	ldr	r3, [pc, #84]	; (800cef0 <MlmeIndication+0x98>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9e:	4913      	ldr	r1, [pc, #76]	; (800ceec <MlmeIndication+0x94>)
 800cea0:	2000      	movs	r0, #0
 800cea2:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	2b07      	cmp	r3, #7
 800ceaa:	d117      	bne.n	800cedc <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800ceac:	2300      	movs	r3, #0
 800ceae:	723b      	strb	r3, [r7, #8]
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	727b      	strb	r3, [r7, #9]
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800ceb8:	4b0e      	ldr	r3, [pc, #56]	; (800cef4 <MlmeIndication+0x9c>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	4798      	blx	r3
 800cec0:	4603      	mov	r3, r0
 800cec2:	f083 0301 	eor.w	r3, r3, #1
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d009      	beq.n	800cee0 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800cecc:	f107 0008 	add.w	r0, r7, #8
 800ced0:	2301      	movs	r3, #1
 800ced2:	2200      	movs	r2, #0
 800ced4:	2100      	movs	r1, #0
 800ced6:	f7ff fcdb 	bl	800c890 <LmHandlerSend>
            }
        }
        break;
 800ceda:	e001      	b.n	800cee0 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cedc:	bf00      	nop
 800cede:	e000      	b.n	800cee2 <MlmeIndication+0x8a>
        break;
 800cee0:	bf00      	nop
    }
}
 800cee2:	bf00      	nop
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	200000c8 	.word	0x200000c8
 800cef0:	200003e8 	.word	0x200003e8
 800cef4:	200003c4 	.word	0x200003c4

0800cef8 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	4603      	mov	r3, r0
 800cf00:	6039      	str	r1, [r7, #0]
 800cf02:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cf04:	2300      	movs	r3, #0
 800cf06:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cf08:	79fb      	ldrb	r3, [r7, #7]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d103      	bne.n	800cf16 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cf0e:	f000 f943 	bl	800d198 <LmhpCompliancePackageFactory>
 800cf12:	60f8      	str	r0, [r7, #12]
            break;
 800cf14:	e000      	b.n	800cf18 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cf16:	bf00      	nop
        }
    }
    if( package != NULL )
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d02b      	beq.n	800cf76 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800cf1e:	79fb      	ldrb	r3, [r7, #7]
 800cf20:	4918      	ldr	r1, [pc, #96]	; (800cf84 <LmHandlerPackageRegister+0x8c>)
 800cf22:	68fa      	ldr	r2, [r7, #12]
 800cf24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cf28:	79fb      	ldrb	r3, [r7, #7]
 800cf2a:	4a16      	ldr	r2, [pc, #88]	; (800cf84 <LmHandlerPackageRegister+0x8c>)
 800cf2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf30:	4a15      	ldr	r2, [pc, #84]	; (800cf88 <LmHandlerPackageRegister+0x90>)
 800cf32:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800cf34:	79fb      	ldrb	r3, [r7, #7]
 800cf36:	4a13      	ldr	r2, [pc, #76]	; (800cf84 <LmHandlerPackageRegister+0x8c>)
 800cf38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf3c:	4a13      	ldr	r2, [pc, #76]	; (800cf8c <LmHandlerPackageRegister+0x94>)
 800cf3e:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cf40:	79fb      	ldrb	r3, [r7, #7]
 800cf42:	4a10      	ldr	r2, [pc, #64]	; (800cf84 <LmHandlerPackageRegister+0x8c>)
 800cf44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf48:	4a11      	ldr	r2, [pc, #68]	; (800cf90 <LmHandlerPackageRegister+0x98>)
 800cf4a:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cf4c:	4b11      	ldr	r3, [pc, #68]	; (800cf94 <LmHandlerPackageRegister+0x9c>)
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	79fb      	ldrb	r3, [r7, #7]
 800cf52:	490c      	ldr	r1, [pc, #48]	; (800cf84 <LmHandlerPackageRegister+0x8c>)
 800cf54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf58:	6912      	ldr	r2, [r2, #16]
 800cf5a:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cf5c:	79fb      	ldrb	r3, [r7, #7]
 800cf5e:	4a09      	ldr	r2, [pc, #36]	; (800cf84 <LmHandlerPackageRegister+0x8c>)
 800cf60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	4a0c      	ldr	r2, [pc, #48]	; (800cf98 <LmHandlerPackageRegister+0xa0>)
 800cf68:	6851      	ldr	r1, [r2, #4]
 800cf6a:	4a0b      	ldr	r2, [pc, #44]	; (800cf98 <LmHandlerPackageRegister+0xa0>)
 800cf6c:	7852      	ldrb	r2, [r2, #1]
 800cf6e:	6838      	ldr	r0, [r7, #0]
 800cf70:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cf72:	2300      	movs	r3, #0
 800cf74:	e001      	b.n	800cf7a <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cf76:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	200003c4 	.word	0x200003c4
 800cf88:	0800c7a5 	.word	0x0800c7a5
 800cf8c:	0800c891 	.word	0x0800c891
 800cf90:	0800ca3d 	.word	0x0800ca3d
 800cf94:	200003e8 	.word	0x200003e8
 800cf98:	200000d8 	.word	0x200000d8

0800cf9c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800cfa6:	79fb      	ldrb	r3, [r7, #7]
 800cfa8:	2b04      	cmp	r3, #4
 800cfaa:	d80e      	bhi.n	800cfca <LmHandlerPackageIsInitialized+0x2e>
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	4a09      	ldr	r2, [pc, #36]	; (800cfd4 <LmHandlerPackageIsInitialized+0x38>)
 800cfb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d007      	beq.n	800cfca <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	4a05      	ldr	r2, [pc, #20]	; (800cfd4 <LmHandlerPackageIsInitialized+0x38>)
 800cfbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	4798      	blx	r3
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	e000      	b.n	800cfcc <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cfca:	2300      	movs	r3, #0
    }
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	200003c4 	.word	0x200003c4

0800cfd8 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	6039      	str	r1, [r7, #0]
 800cfe2:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	73fb      	strb	r3, [r7, #15]
 800cfe8:	e067      	b.n	800d0ba <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800cfea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfee:	4a37      	ldr	r2, [pc, #220]	; (800d0cc <LmHandlerPackagesNotify+0xf4>)
 800cff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d051      	beq.n	800d09c <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800cff8:	79fb      	ldrb	r3, [r7, #7]
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	d03d      	beq.n	800d07a <LmHandlerPackagesNotify+0xa2>
 800cffe:	2b02      	cmp	r3, #2
 800d000:	dc4e      	bgt.n	800d0a0 <LmHandlerPackagesNotify+0xc8>
 800d002:	2b00      	cmp	r3, #0
 800d004:	d002      	beq.n	800d00c <LmHandlerPackagesNotify+0x34>
 800d006:	2b01      	cmp	r3, #1
 800d008:	d011      	beq.n	800d02e <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800d00a:	e049      	b.n	800d0a0 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d00c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d010:	4a2e      	ldr	r2, [pc, #184]	; (800d0cc <LmHandlerPackagesNotify+0xf4>)
 800d012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d016:	699b      	ldr	r3, [r3, #24]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d043      	beq.n	800d0a4 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d01c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d020:	4a2a      	ldr	r2, [pc, #168]	; (800d0cc <LmHandlerPackagesNotify+0xf4>)
 800d022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	6838      	ldr	r0, [r7, #0]
 800d02a:	4798      	blx	r3
                    break;
 800d02c:	e03a      	b.n	800d0a4 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800d02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d032:	4a26      	ldr	r2, [pc, #152]	; (800d0cc <LmHandlerPackagesNotify+0xf4>)
 800d034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d038:	69db      	ldr	r3, [r3, #28]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d034      	beq.n	800d0a8 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800d03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d042:	4a22      	ldr	r2, [pc, #136]	; (800d0cc <LmHandlerPackagesNotify+0xf4>)
 800d044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d048:	781a      	ldrb	r2, [r3, #0]
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800d04e:	429a      	cmp	r2, r3
 800d050:	d00a      	beq.n	800d068 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800d052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d126      	bne.n	800d0a8 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800d05a:	4b1c      	ldr	r3, [pc, #112]	; (800d0cc <LmHandlerPackagesNotify+0xf4>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	4798      	blx	r3
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d01f      	beq.n	800d0a8 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d06c:	4a17      	ldr	r2, [pc, #92]	; (800d0cc <LmHandlerPackagesNotify+0xf4>)
 800d06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d072:	69db      	ldr	r3, [r3, #28]
 800d074:	6838      	ldr	r0, [r7, #0]
 800d076:	4798      	blx	r3
                    break;
 800d078:	e016      	b.n	800d0a8 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d07e:	4a13      	ldr	r2, [pc, #76]	; (800d0cc <LmHandlerPackagesNotify+0xf4>)
 800d080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d084:	6a1b      	ldr	r3, [r3, #32]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d010      	beq.n	800d0ac <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d08e:	4a0f      	ldr	r2, [pc, #60]	; (800d0cc <LmHandlerPackagesNotify+0xf4>)
 800d090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d094:	6a1b      	ldr	r3, [r3, #32]
 800d096:	6838      	ldr	r0, [r7, #0]
 800d098:	4798      	blx	r3
                    break;
 800d09a:	e007      	b.n	800d0ac <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800d09c:	bf00      	nop
 800d09e:	e006      	b.n	800d0ae <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0a0:	bf00      	nop
 800d0a2:	e004      	b.n	800d0ae <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0a4:	bf00      	nop
 800d0a6:	e002      	b.n	800d0ae <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0a8:	bf00      	nop
 800d0aa:	e000      	b.n	800d0ae <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0ac:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	73fb      	strb	r3, [r7, #15]
 800d0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0be:	2b04      	cmp	r3, #4
 800d0c0:	dd93      	ble.n	800cfea <LmHandlerPackagesNotify+0x12>
    }
}
 800d0c2:	bf00      	nop
 800d0c4:	bf00      	nop
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	200003c4 	.word	0x200003c4

0800d0d0 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	71fb      	strb	r3, [r7, #7]
 800d0da:	e022      	b.n	800d122 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d0dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0e0:	4a14      	ldr	r2, [pc, #80]	; (800d134 <LmHandlerPackagesProcess+0x64>)
 800d0e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d015      	beq.n	800d116 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d0ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0ee:	4a11      	ldr	r2, [pc, #68]	; (800d134 <LmHandlerPackagesProcess+0x64>)
 800d0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0f4:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00d      	beq.n	800d116 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d0fa:	79fb      	ldrb	r3, [r7, #7]
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7ff ff4d 	bl	800cf9c <LmHandlerPackageIsInitialized>
 800d102:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d104:	2b00      	cmp	r3, #0
 800d106:	d006      	beq.n	800d116 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d10c:	4a09      	ldr	r2, [pc, #36]	; (800d134 <LmHandlerPackagesProcess+0x64>)
 800d10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d112:	691b      	ldr	r3, [r3, #16]
 800d114:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	3301      	adds	r3, #1
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	71fb      	strb	r3, [r7, #7]
 800d122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d126:	2b04      	cmp	r3, #4
 800d128:	ddd8      	ble.n	800d0dc <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d12a:	bf00      	nop
 800d12c:	bf00      	nop
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	200003c4 	.word	0x200003c4

0800d138 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af02      	add	r7, sp, #8
 800d13e:	4603      	mov	r3, r0
 800d140:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d142:	79fb      	ldrb	r3, [r7, #7]
 800d144:	4a06      	ldr	r2, [pc, #24]	; (800d160 <DisplayClassUpdate+0x28>)
 800d146:	5cd3      	ldrb	r3, [r2, r3]
 800d148:	9300      	str	r3, [sp, #0]
 800d14a:	4b06      	ldr	r3, [pc, #24]	; (800d164 <DisplayClassUpdate+0x2c>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	2100      	movs	r1, #0
 800d150:	2002      	movs	r0, #2
 800d152:	f00d fcb3 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
}
 800d156:	bf00      	nop
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	0801b838 	.word	0x0801b838
 800d164:	0801b81c 	.word	0x0801b81c

0800d168 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	4603      	mov	r3, r0
 800d170:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d172:	bf00      	nop
 800d174:	370c      	adds	r7, #12
 800d176:	46bd      	mov	sp, r7
 800d178:	bc80      	pop	{r7}
 800d17a:	4770      	bx	lr

0800d17c <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800d17c:	b480      	push	{r7}
 800d17e:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800d180:	2300      	movs	r3, #0
#endif
}
 800d182:	4618      	mov	r0, r3
 800d184:	46bd      	mov	sp, r7
 800d186:	bc80      	pop	{r7}
 800d188:	4770      	bx	lr

0800d18a <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800d18a:	b480      	push	{r7}
 800d18c:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	46bd      	mov	sp, r7
 800d194:	bc80      	pop	{r7}
 800d196:	4770      	bx	lr

0800d198 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d198:	b480      	push	{r7}
 800d19a:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800d19c:	4b02      	ldr	r3, [pc, #8]	; (800d1a8 <LmhpCompliancePackageFactory+0x10>)
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bc80      	pop	{r7}
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	200000e0 	.word	0x200000e0

0800d1ac <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00f      	beq.n	800d1e0 <LmhpComplianceInit+0x34>
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00c      	beq.n	800d1e0 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800d1c6:	4a0c      	ldr	r2, [pc, #48]	; (800d1f8 <LmhpComplianceInit+0x4c>)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800d1cc:	4a0b      	ldr	r2, [pc, #44]	; (800d1fc <LmhpComplianceInit+0x50>)
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d1d2:	4a0a      	ldr	r2, [pc, #40]	; (800d1fc <LmhpComplianceInit+0x50>)
 800d1d4:	79fb      	ldrb	r3, [r7, #7]
 800d1d6:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800d1d8:	4b08      	ldr	r3, [pc, #32]	; (800d1fc <LmhpComplianceInit+0x50>)
 800d1da:	2201      	movs	r2, #1
 800d1dc:	701a      	strb	r2, [r3, #0]
 800d1de:	e006      	b.n	800d1ee <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800d1e0:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <LmhpComplianceInit+0x4c>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d1e6:	4b05      	ldr	r3, [pc, #20]	; (800d1fc <LmhpComplianceInit+0x50>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	701a      	strb	r2, [r3, #0]
    }
}
 800d1ec:	bf00      	nop
 800d1ee:	bf00      	nop
 800d1f0:	3714      	adds	r7, #20
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bc80      	pop	{r7}
 800d1f6:	4770      	bx	lr
 800d1f8:	20000548 	.word	0x20000548
 800d1fc:	20000534 	.word	0x20000534

0800d200 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d200:	b480      	push	{r7}
 800d202:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d204:	4b02      	ldr	r3, [pc, #8]	; (800d210 <LmhpComplianceIsInitialized+0x10>)
 800d206:	781b      	ldrb	r3, [r3, #0]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bc80      	pop	{r7}
 800d20e:	4770      	bx	lr
 800d210:	20000534 	.word	0x20000534

0800d214 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800d214:	b480      	push	{r7}
 800d216:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d218:	4b07      	ldr	r3, [pc, #28]	; (800d238 <LmhpComplianceIsRunning+0x24>)
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	f083 0301 	eor.w	r3, r3, #1
 800d220:	b2db      	uxtb	r3, r3
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800d226:	2300      	movs	r3, #0
 800d228:	e001      	b.n	800d22e <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800d22a:	4b03      	ldr	r3, [pc, #12]	; (800d238 <LmhpComplianceIsRunning+0x24>)
 800d22c:	785b      	ldrb	r3, [r3, #1]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	46bd      	mov	sp, r7
 800d232:	bc80      	pop	{r7}
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	20000534 	.word	0x20000534

0800d23c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800d244:	4b0f      	ldr	r3, [pc, #60]	; (800d284 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	f083 0301 	eor.w	r3, r3, #1
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d112      	bne.n	800d278 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d252:	4b0c      	ldr	r3, [pc, #48]	; (800d284 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d254:	785b      	ldrb	r3, [r3, #1]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00f      	beq.n	800d27a <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d10b      	bne.n	800d27a <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d266:	2b00      	cmp	r3, #0
 800d268:	d007      	beq.n	800d27a <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d26a:	4b06      	ldr	r3, [pc, #24]	; (800d284 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d26c:	899b      	ldrh	r3, [r3, #12]
 800d26e:	3301      	adds	r3, #1
 800d270:	b29a      	uxth	r2, r3
 800d272:	4b04      	ldr	r3, [pc, #16]	; (800d284 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d274:	819a      	strh	r2, [r3, #12]
 800d276:	e000      	b.n	800d27a <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800d278:	bf00      	nop
    }
}
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bc80      	pop	{r7}
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	20000534 	.word	0x20000534

0800d288 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d290:	4b12      	ldr	r3, [pc, #72]	; (800d2dc <LmhpComplianceOnMlmeConfirm+0x54>)
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	f083 0301 	eor.w	r3, r3, #1
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d116      	bne.n	800d2cc <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d29e:	4b0f      	ldr	r3, [pc, #60]	; (800d2dc <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2a0:	785b      	ldrb	r3, [r3, #1]
 800d2a2:	f083 0301 	eor.w	r3, r3, #1
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d111      	bne.n	800d2d0 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	2b04      	cmp	r3, #4
 800d2b2:	d10e      	bne.n	800d2d2 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800d2b4:	4b09      	ldr	r3, [pc, #36]	; (800d2dc <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	7a1a      	ldrb	r2, [r3, #8]
 800d2be:	4b07      	ldr	r3, [pc, #28]	; (800d2dc <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2c0:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	7a5a      	ldrb	r2, [r3, #9]
 800d2c6:	4b05      	ldr	r3, [pc, #20]	; (800d2dc <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2c8:	741a      	strb	r2, [r3, #16]
 800d2ca:	e002      	b.n	800d2d2 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d2cc:	bf00      	nop
 800d2ce:	e000      	b.n	800d2d2 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d2d0:	bf00      	nop
    }
}
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bc80      	pop	{r7}
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop
 800d2dc:	20000534 	.word	0x20000534

0800d2e0 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800d2e0:	b590      	push	{r4, r7, lr}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d2e6:	4b33      	ldr	r3, [pc, #204]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	f083 0301 	eor.w	r3, r3, #1
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2f8:	e058      	b.n	800d3ac <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800d2fa:	4b2e      	ldr	r3, [pc, #184]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d2fc:	785b      	ldrb	r3, [r3, #1]
 800d2fe:	f083 0301 	eor.w	r3, r3, #1
 800d302:	b2db      	uxtb	r3, r3
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d308:	2300      	movs	r3, #0
 800d30a:	e04f      	b.n	800d3ac <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800d30c:	4b29      	ldr	r3, [pc, #164]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d30e:	7b9b      	ldrb	r3, [r3, #14]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d019      	beq.n	800d348 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800d314:	4b27      	ldr	r3, [pc, #156]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d316:	2200      	movs	r2, #0
 800d318:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800d31a:	4b26      	ldr	r3, [pc, #152]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d31c:	2203      	movs	r2, #3
 800d31e:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d320:	4b24      	ldr	r3, [pc, #144]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	2205      	movs	r2, #5
 800d326:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d328:	4b22      	ldr	r3, [pc, #136]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	3301      	adds	r3, #1
 800d32e:	4a21      	ldr	r2, [pc, #132]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d330:	7bd2      	ldrb	r2, [r2, #15]
 800d332:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d334:	4b1f      	ldr	r3, [pc, #124]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	3302      	adds	r3, #2
 800d33a:	4a1e      	ldr	r2, [pc, #120]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d33c:	7c12      	ldrb	r2, [r2, #16]
 800d33e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d340:	4b1c      	ldr	r3, [pc, #112]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d342:	2201      	movs	r2, #1
 800d344:	709a      	strb	r2, [r3, #2]
 800d346:	e01c      	b.n	800d382 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d348:	4b1a      	ldr	r3, [pc, #104]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d34a:	789b      	ldrb	r3, [r3, #2]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d005      	beq.n	800d35c <LmhpComplianceTxProcess+0x7c>
 800d350:	2b04      	cmp	r3, #4
 800d352:	d116      	bne.n	800d382 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800d354:	4b17      	ldr	r3, [pc, #92]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d356:	2201      	movs	r2, #1
 800d358:	709a      	strb	r2, [r3, #2]
            break;
 800d35a:	e012      	b.n	800d382 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800d35c:	4b15      	ldr	r3, [pc, #84]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d35e:	2202      	movs	r2, #2
 800d360:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d362:	4b14      	ldr	r3, [pc, #80]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d364:	899b      	ldrh	r3, [r3, #12]
 800d366:	0a1b      	lsrs	r3, r3, #8
 800d368:	b29a      	uxth	r2, r3
 800d36a:	4b12      	ldr	r3, [pc, #72]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	b2d2      	uxtb	r2, r2
 800d370:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d372:	4b10      	ldr	r3, [pc, #64]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d374:	899a      	ldrh	r2, [r3, #12]
 800d376:	4b0f      	ldr	r3, [pc, #60]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	3301      	adds	r3, #1
 800d37c:	b2d2      	uxtb	r2, r2
 800d37e:	701a      	strb	r2, [r3, #0]
            break;
 800d380:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d382:	23e0      	movs	r3, #224	; 0xe0
 800d384:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d386:	4b0b      	ldr	r3, [pc, #44]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d388:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d38a:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d38c:	4b09      	ldr	r3, [pc, #36]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d38e:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d390:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800d392:	4809      	ldr	r0, [pc, #36]	; (800d3b8 <LmhpComplianceTxProcess+0xd8>)
 800d394:	f00d f91a 	bl	801a5cc <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800d398:	4b08      	ldr	r3, [pc, #32]	; (800d3bc <LmhpComplianceTxProcess+0xdc>)
 800d39a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d39c:	4b05      	ldr	r3, [pc, #20]	; (800d3b4 <LmhpComplianceTxProcess+0xd4>)
 800d39e:	78db      	ldrb	r3, [r3, #3]
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	4638      	mov	r0, r7
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	47a0      	blx	r4
 800d3aa:	4603      	mov	r3, r0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd90      	pop	{r4, r7, pc}
 800d3b4:	20000534 	.word	0x20000534
 800d3b8:	2000051c 	.word	0x2000051c
 800d3bc:	200000e0 	.word	0x200000e0

0800d3c0 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b0a2      	sub	sp, #136	; 0x88
 800d3c4:	af02      	add	r7, sp, #8
 800d3c6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d3c8:	4bae      	ldr	r3, [pc, #696]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	f083 0301 	eor.w	r3, r3, #1
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f040 81c0 	bne.w	800d758 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	7b5b      	ldrb	r3, [r3, #13]
 800d3dc:	f083 0301 	eor.w	r3, r3, #1
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f040 81ba 	bne.w	800d75c <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d3e8:	4ba6      	ldr	r3, [pc, #664]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d3ea:	785b      	ldrb	r3, [r3, #1]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00c      	beq.n	800d40a <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	7b9b      	ldrb	r3, [r3, #14]
 800d3f4:	f083 0301 	eor.w	r3, r3, #1
 800d3f8:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d005      	beq.n	800d40a <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d3fe:	4ba1      	ldr	r3, [pc, #644]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d400:	899b      	ldrh	r3, [r3, #12]
 800d402:	3301      	adds	r3, #1
 800d404:	b29a      	uxth	r2, r3
 800d406:	4b9f      	ldr	r3, [pc, #636]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d408:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	78db      	ldrb	r3, [r3, #3]
 800d40e:	2be0      	cmp	r3, #224	; 0xe0
 800d410:	f040 81a6 	bne.w	800d760 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d414:	4b9b      	ldr	r3, [pc, #620]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d416:	785b      	ldrb	r3, [r3, #1]
 800d418:	f083 0301 	eor.w	r3, r3, #1
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d060      	beq.n	800d4e4 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	7b1b      	ldrb	r3, [r3, #12]
 800d426:	2b04      	cmp	r3, #4
 800d428:	f040 819f 	bne.w	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d432:	2b01      	cmp	r3, #1
 800d434:	f040 8199 	bne.w	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	3301      	adds	r3, #1
 800d43e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d440:	2b01      	cmp	r3, #1
 800d442:	f040 8192 	bne.w	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	3302      	adds	r3, #2
 800d44c:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d44e:	2b01      	cmp	r3, #1
 800d450:	f040 818b 	bne.w	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	3303      	adds	r3, #3
 800d45a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	f040 8184 	bne.w	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d462:	4b88      	ldr	r3, [pc, #544]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d464:	2200      	movs	r2, #0
 800d466:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d468:	4b86      	ldr	r3, [pc, #536]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d46a:	22e0      	movs	r2, #224	; 0xe0
 800d46c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d46e:	4b85      	ldr	r3, [pc, #532]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d470:	2202      	movs	r2, #2
 800d472:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d474:	4b83      	ldr	r3, [pc, #524]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d476:	2200      	movs	r2, #0
 800d478:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d47a:	4b82      	ldr	r3, [pc, #520]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d47c:	2200      	movs	r2, #0
 800d47e:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d480:	4b80      	ldr	r3, [pc, #512]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d482:	2200      	movs	r2, #0
 800d484:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d486:	4b7f      	ldr	r3, [pc, #508]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d488:	2200      	movs	r2, #0
 800d48a:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d48c:	4b7d      	ldr	r3, [pc, #500]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d48e:	2201      	movs	r2, #1
 800d490:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d492:	4b7c      	ldr	r3, [pc, #496]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d494:	2201      	movs	r2, #1
 800d496:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d498:	2304      	movs	r3, #4
 800d49a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d49c:	2301      	movs	r3, #1
 800d49e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d4a0:	f107 0308 	add.w	r3, r7, #8
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f004 f829 	bl	80114fc <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	f004 fd9a 	bl	8011fe4 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d4b0:	4b75      	ldr	r3, [pc, #468]	; (800d688 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d4ba:	4b73      	ldr	r3, [pc, #460]	; (800d688 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	9300      	str	r3, [sp, #0]
 800d4c6:	4b71      	ldr	r3, [pc, #452]	; (800d68c <LmhpComplianceOnMcpsIndication+0x2cc>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	f04f 31ff 	mov.w	r1, #4294967295
 800d4ce:	4870      	ldr	r0, [pc, #448]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d4d0:	f00d f846 	bl	801a560 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d4d4:	f241 3188 	movw	r1, #5000	; 0x1388
 800d4d8:	486d      	ldr	r0, [pc, #436]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d4da:	f00d f955 	bl	801a788 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d4de:	f7ff feff 	bl	800d2e0 <LmhpComplianceTxProcess>
 800d4e2:	e142      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	781a      	ldrb	r2, [r3, #0]
 800d4ea:	4b66      	ldr	r3, [pc, #408]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4ec:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d4ee:	4b65      	ldr	r3, [pc, #404]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4f0:	789b      	ldrb	r3, [r3, #2]
 800d4f2:	2b0a      	cmp	r3, #10
 800d4f4:	f200 8136 	bhi.w	800d764 <LmhpComplianceOnMcpsIndication+0x3a4>
 800d4f8:	a201      	add	r2, pc, #4	; (adr r2, 800d500 <LmhpComplianceOnMcpsIndication+0x140>)
 800d4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4fe:	bf00      	nop
 800d500:	0800d52d 	.word	0x0800d52d
 800d504:	0800d577 	.word	0x0800d577
 800d508:	0800d57f 	.word	0x0800d57f
 800d50c:	0800d58d 	.word	0x0800d58d
 800d510:	0800d59b 	.word	0x0800d59b
 800d514:	0800d5f3 	.word	0x0800d5f3
 800d518:	0800d605 	.word	0x0800d605
 800d51c:	0800d655 	.word	0x0800d655
 800d520:	0800d711 	.word	0x0800d711
 800d524:	0800d723 	.word	0x0800d723
 800d528:	0800d73d 	.word	0x0800d73d
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d52c:	4858      	ldr	r0, [pc, #352]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d52e:	f00d f8bb 	bl	801a6a8 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d532:	4b54      	ldr	r3, [pc, #336]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d534:	2200      	movs	r2, #0
 800d536:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d538:	4b52      	ldr	r3, [pc, #328]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d53a:	2200      	movs	r2, #0
 800d53c:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d53e:	2304      	movs	r3, #4
 800d540:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d542:	4b51      	ldr	r3, [pc, #324]	; (800d688 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d54a:	f107 0308 	add.w	r3, r7, #8
 800d54e:	4618      	mov	r0, r3
 800d550:	f003 ffd4 	bl	80114fc <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d554:	4b4c      	ldr	r3, [pc, #304]	; (800d688 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	785b      	ldrb	r3, [r3, #1]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f004 fd42 	bl	8011fe4 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d560:	4b49      	ldr	r3, [pc, #292]	; (800d688 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	2b00      	cmp	r3, #0
 800d568:	f000 80fe 	beq.w	800d768 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d56c:	4b46      	ldr	r3, [pc, #280]	; (800d688 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	689b      	ldr	r3, [r3, #8]
 800d572:	4798      	blx	r3
                }
            }
            break;
 800d574:	e0f8      	b.n	800d768 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d576:	4b43      	ldr	r3, [pc, #268]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d578:	2202      	movs	r2, #2
 800d57a:	719a      	strb	r2, [r3, #6]
            break;
 800d57c:	e0f5      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d57e:	4b41      	ldr	r3, [pc, #260]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d580:	2201      	movs	r2, #1
 800d582:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d584:	4b3f      	ldr	r3, [pc, #252]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d586:	2201      	movs	r2, #1
 800d588:	709a      	strb	r2, [r3, #2]
            break;
 800d58a:	e0ee      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d58c:	4b3d      	ldr	r3, [pc, #244]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d58e:	2200      	movs	r2, #0
 800d590:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d592:	4b3c      	ldr	r3, [pc, #240]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d594:	2201      	movs	r2, #1
 800d596:	709a      	strb	r2, [r3, #2]
            break;
 800d598:	e0e7      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	7b1a      	ldrb	r2, [r3, #12]
 800d59e:	4b39      	ldr	r3, [pc, #228]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5a0:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d5a2:	4b38      	ldr	r3, [pc, #224]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	2204      	movs	r2, #4
 800d5a8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d5b0:	e012      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	689a      	ldr	r2, [r3, #8]
 800d5b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5ba:	4413      	add	r3, r2
 800d5bc:	781a      	ldrb	r2, [r3, #0]
 800d5be:	4b31      	ldr	r3, [pc, #196]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5c0:	6899      	ldr	r1, [r3, #8]
 800d5c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5c6:	440b      	add	r3, r1
 800d5c8:	3201      	adds	r2, #1
 800d5ca:	b2d2      	uxtb	r2, r2
 800d5cc:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d5ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d5d8:	4b2a      	ldr	r3, [pc, #168]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5da:	795a      	ldrb	r2, [r3, #5]
 800d5dc:	4b29      	ldr	r3, [pc, #164]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5de:	799b      	ldrb	r3, [r3, #6]
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	bf28      	it	cs
 800d5e4:	4613      	movcs	r3, r2
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d3e0      	bcc.n	800d5b2 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d5f0:	e0bb      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d5f2:	2304      	movs	r3, #4
 800d5f4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d5f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f004 fabb 	bl	8011b78 <LoRaMacMlmeRequest>
            }
            break;
 800d602:	e0b2      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d604:	4822      	ldr	r0, [pc, #136]	; (800d690 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d606:	f00d f84f 	bl	801a6a8 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d60a:	4b1e      	ldr	r3, [pc, #120]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d60c:	2200      	movs	r2, #0
 800d60e:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d610:	4b1c      	ldr	r3, [pc, #112]	; (800d684 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d612:	2200      	movs	r2, #0
 800d614:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d616:	2304      	movs	r3, #4
 800d618:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d61a:	4b1b      	ldr	r3, [pc, #108]	; (800d688 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d622:	f107 0308 	add.w	r3, r7, #8
 800d626:	4618      	mov	r0, r3
 800d628:	f003 ff68 	bl	80114fc <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d62c:	4b16      	ldr	r3, [pc, #88]	; (800d688 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	785b      	ldrb	r3, [r3, #1]
 800d632:	4618      	mov	r0, r3
 800d634:	f004 fcd6 	bl	8011fe4 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d638:	4b13      	ldr	r3, [pc, #76]	; (800d688 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	689b      	ldr	r3, [r3, #8]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d003      	beq.n	800d64a <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d642:	4b11      	ldr	r3, [pc, #68]	; (800d688 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800d64a:	4b12      	ldr	r3, [pc, #72]	; (800d694 <LmhpComplianceOnMcpsIndication+0x2d4>)
 800d64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64e:	2002      	movs	r0, #2
 800d650:	4798      	blx	r3
            }
            break;
 800d652:	e08a      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	7b1b      	ldrb	r3, [r3, #12]
 800d658:	2b03      	cmp	r3, #3
 800d65a:	d11d      	bne.n	800d698 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d65c:	2305      	movs	r3, #5
 800d65e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	3301      	adds	r3, #1
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	021b      	lsls	r3, r3, #8
 800d66c:	b21a      	sxth	r2, r3
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	3302      	adds	r3, #2
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	b21b      	sxth	r3, r3
 800d678:	4313      	orrs	r3, r2
 800d67a:	b21b      	sxth	r3, r3
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d682:	e03c      	b.n	800d6fe <LmhpComplianceOnMcpsIndication+0x33e>
 800d684:	20000534 	.word	0x20000534
 800d688:	20000548 	.word	0x20000548
 800d68c:	0800d781 	.word	0x0800d781
 800d690:	2000051c 	.word	0x2000051c
 800d694:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	7b1b      	ldrb	r3, [r3, #12]
 800d69c:	2b07      	cmp	r3, #7
 800d69e:	d12e      	bne.n	800d6fe <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d6a0:	2306      	movs	r3, #6
 800d6a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	021b      	lsls	r3, r3, #8
 800d6b0:	b21a      	sxth	r2, r3
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	689b      	ldr	r3, [r3, #8]
 800d6b6:	3302      	adds	r3, #2
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	b21b      	sxth	r3, r3
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	b21b      	sxth	r3, r3
 800d6c0:	b29b      	uxth	r3, r3
 800d6c2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	3303      	adds	r3, #3
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	041a      	lsls	r2, r3, #16
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	3304      	adds	r3, #4
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	021b      	lsls	r3, r3, #8
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	6892      	ldr	r2, [r2, #8]
 800d6e0:	3205      	adds	r2, #5
 800d6e2:	7812      	ldrb	r2, [r2, #0]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	2364      	movs	r3, #100	; 0x64
 800d6ea:	fb03 f302 	mul.w	r3, r3, r2
 800d6ee:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	3306      	adds	r3, #6
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	b25b      	sxtb	r3, r3
 800d6fa:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d6fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d702:	4618      	mov	r0, r3
 800d704:	f004 fa38 	bl	8011b78 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d708:	4b19      	ldr	r3, [pc, #100]	; (800d770 <LmhpComplianceOnMcpsIndication+0x3b0>)
 800d70a:	2201      	movs	r2, #1
 800d70c:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d70e:	e02c      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d710:	230a      	movs	r3, #10
 800d712:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d716:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d71a:	4618      	mov	r0, r3
 800d71c:	f004 fa2c 	bl	8011b78 <LoRaMacMlmeRequest>
            }
            break;
 800d720:	e023      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d722:	2300      	movs	r3, #0
 800d724:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	3301      	adds	r3, #1
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d730:	f107 0308 	add.w	r3, r7, #8
 800d734:	4618      	mov	r0, r3
 800d736:	f003 fee1 	bl	80114fc <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d73a:	e016      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d73c:	230d      	movs	r3, #13
 800d73e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	785b      	ldrb	r3, [r3, #1]
 800d748:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d74c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d750:	4618      	mov	r0, r3
 800d752:	f004 fa11 	bl	8011b78 <LoRaMacMlmeRequest>
            }
            break;
 800d756:	e008      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d758:	bf00      	nop
 800d75a:	e006      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d75c:	bf00      	nop
 800d75e:	e004      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d760:	bf00      	nop
 800d762:	e002      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800d764:	bf00      	nop
 800d766:	e000      	b.n	800d76a <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800d768:	bf00      	nop
        }
    }
}
 800d76a:	3780      	adds	r7, #128	; 0x80
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	20000534 	.word	0x20000534

0800d774 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d774:	b480      	push	{r7}
 800d776:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d778:	bf00      	nop
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bc80      	pop	{r7}
 800d77e:	4770      	bx	lr

0800d780 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d788:	f7ff fdaa 	bl	800d2e0 <LmhpComplianceTxProcess>
}
 800d78c:	bf00      	nop
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d794:	b590      	push	{r4, r7, lr}
 800d796:	b083      	sub	sp, #12
 800d798:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d79a:	f00d f89f 	bl	801a8dc <UTIL_TIMER_GetCurrentTime>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	4a16      	ldr	r2, [pc, #88]	; (800d7fc <OnRadioTxDone+0x68>)
 800d7a2:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d7a4:	4c16      	ldr	r4, [pc, #88]	; (800d800 <OnRadioTxDone+0x6c>)
 800d7a6:	463b      	mov	r3, r7
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f00c fa29 	bl	8019c00 <SysTimeGet>
 800d7ae:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d7b2:	463a      	mov	r2, r7
 800d7b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7b8:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d7bc:	4a11      	ldr	r2, [pc, #68]	; (800d804 <OnRadioTxDone+0x70>)
 800d7be:	7813      	ldrb	r3, [r2, #0]
 800d7c0:	f043 0310 	orr.w	r3, r3, #16
 800d7c4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d7c6:	4b0e      	ldr	r3, [pc, #56]	; (800d800 <OnRadioTxDone+0x6c>)
 800d7c8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00a      	beq.n	800d7e6 <OnRadioTxDone+0x52>
 800d7d0:	4b0b      	ldr	r3, [pc, #44]	; (800d800 <OnRadioTxDone+0x6c>)
 800d7d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7d6:	691b      	ldr	r3, [r3, #16]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d004      	beq.n	800d7e6 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d7dc:	4b08      	ldr	r3, [pc, #32]	; (800d800 <OnRadioTxDone+0x6c>)
 800d7de:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d7e6:	4b08      	ldr	r3, [pc, #32]	; (800d808 <OnRadioTxDone+0x74>)
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	2002      	movs	r0, #2
 800d7ee:	f00d f965 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
}
 800d7f2:	bf00      	nop
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd90      	pop	{r4, r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	200018a8 	.word	0x200018a8
 800d800:	2000054c 	.word	0x2000054c
 800d804:	20000da0 	.word	0x20000da0
 800d808:	0801b83c 	.word	0x0801b83c

0800d80c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	4608      	mov	r0, r1
 800d816:	4611      	mov	r1, r2
 800d818:	461a      	mov	r2, r3
 800d81a:	4603      	mov	r3, r0
 800d81c:	817b      	strh	r3, [r7, #10]
 800d81e:	460b      	mov	r3, r1
 800d820:	813b      	strh	r3, [r7, #8]
 800d822:	4613      	mov	r3, r2
 800d824:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d826:	f00d f859 	bl	801a8dc <UTIL_TIMER_GetCurrentTime>
 800d82a:	4603      	mov	r3, r0
 800d82c:	4a16      	ldr	r2, [pc, #88]	; (800d888 <OnRadioRxDone+0x7c>)
 800d82e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d830:	4a15      	ldr	r2, [pc, #84]	; (800d888 <OnRadioRxDone+0x7c>)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d836:	4a14      	ldr	r2, [pc, #80]	; (800d888 <OnRadioRxDone+0x7c>)
 800d838:	897b      	ldrh	r3, [r7, #10]
 800d83a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d83c:	4a12      	ldr	r2, [pc, #72]	; (800d888 <OnRadioRxDone+0x7c>)
 800d83e:	893b      	ldrh	r3, [r7, #8]
 800d840:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d842:	4a11      	ldr	r2, [pc, #68]	; (800d888 <OnRadioRxDone+0x7c>)
 800d844:	79fb      	ldrb	r3, [r7, #7]
 800d846:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d848:	4a10      	ldr	r2, [pc, #64]	; (800d88c <OnRadioRxDone+0x80>)
 800d84a:	7813      	ldrb	r3, [r2, #0]
 800d84c:	f043 0308 	orr.w	r3, r3, #8
 800d850:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d852:	4b0f      	ldr	r3, [pc, #60]	; (800d890 <OnRadioRxDone+0x84>)
 800d854:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00a      	beq.n	800d872 <OnRadioRxDone+0x66>
 800d85c:	4b0c      	ldr	r3, [pc, #48]	; (800d890 <OnRadioRxDone+0x84>)
 800d85e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d862:	691b      	ldr	r3, [r3, #16]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d004      	beq.n	800d872 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d868:	4b09      	ldr	r3, [pc, #36]	; (800d890 <OnRadioRxDone+0x84>)
 800d86a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d86e:	691b      	ldr	r3, [r3, #16]
 800d870:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d872:	4b08      	ldr	r3, [pc, #32]	; (800d894 <OnRadioRxDone+0x88>)
 800d874:	2201      	movs	r2, #1
 800d876:	2100      	movs	r1, #0
 800d878:	2002      	movs	r0, #2
 800d87a:	f00d f91f 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
}
 800d87e:	bf00      	nop
 800d880:	3710      	adds	r7, #16
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	200018ac 	.word	0x200018ac
 800d88c:	20000da0 	.word	0x20000da0
 800d890:	2000054c 	.word	0x2000054c
 800d894:	0801b84c 	.word	0x0801b84c

0800d898 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d89c:	4a0e      	ldr	r2, [pc, #56]	; (800d8d8 <OnRadioTxTimeout+0x40>)
 800d89e:	7813      	ldrb	r3, [r2, #0]
 800d8a0:	f043 0304 	orr.w	r3, r3, #4
 800d8a4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d8a6:	4b0d      	ldr	r3, [pc, #52]	; (800d8dc <OnRadioTxTimeout+0x44>)
 800d8a8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00a      	beq.n	800d8c6 <OnRadioTxTimeout+0x2e>
 800d8b0:	4b0a      	ldr	r3, [pc, #40]	; (800d8dc <OnRadioTxTimeout+0x44>)
 800d8b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8b6:	691b      	ldr	r3, [r3, #16]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d004      	beq.n	800d8c6 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d8bc:	4b07      	ldr	r3, [pc, #28]	; (800d8dc <OnRadioTxTimeout+0x44>)
 800d8be:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d8c6:	4b06      	ldr	r3, [pc, #24]	; (800d8e0 <OnRadioTxTimeout+0x48>)
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	2100      	movs	r1, #0
 800d8cc:	2002      	movs	r0, #2
 800d8ce:	f00d f8f5 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
}
 800d8d2:	bf00      	nop
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	20000da0 	.word	0x20000da0
 800d8dc:	2000054c 	.word	0x2000054c
 800d8e0:	0801b85c 	.word	0x0801b85c

0800d8e4 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d8e8:	4a0b      	ldr	r2, [pc, #44]	; (800d918 <OnRadioRxError+0x34>)
 800d8ea:	7813      	ldrb	r3, [r2, #0]
 800d8ec:	f043 0302 	orr.w	r3, r3, #2
 800d8f0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d8f2:	4b0a      	ldr	r3, [pc, #40]	; (800d91c <OnRadioRxError+0x38>)
 800d8f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00a      	beq.n	800d912 <OnRadioRxError+0x2e>
 800d8fc:	4b07      	ldr	r3, [pc, #28]	; (800d91c <OnRadioRxError+0x38>)
 800d8fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d004      	beq.n	800d912 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d908:	4b04      	ldr	r3, [pc, #16]	; (800d91c <OnRadioRxError+0x38>)
 800d90a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	4798      	blx	r3
    }
}
 800d912:	bf00      	nop
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	20000da0 	.word	0x20000da0
 800d91c:	2000054c 	.word	0x2000054c

0800d920 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d924:	4a0e      	ldr	r2, [pc, #56]	; (800d960 <OnRadioRxTimeout+0x40>)
 800d926:	7813      	ldrb	r3, [r2, #0]
 800d928:	f043 0301 	orr.w	r3, r3, #1
 800d92c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d92e:	4b0d      	ldr	r3, [pc, #52]	; (800d964 <OnRadioRxTimeout+0x44>)
 800d930:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00a      	beq.n	800d94e <OnRadioRxTimeout+0x2e>
 800d938:	4b0a      	ldr	r3, [pc, #40]	; (800d964 <OnRadioRxTimeout+0x44>)
 800d93a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d93e:	691b      	ldr	r3, [r3, #16]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d004      	beq.n	800d94e <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d944:	4b07      	ldr	r3, [pc, #28]	; (800d964 <OnRadioRxTimeout+0x44>)
 800d946:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d94e:	4b06      	ldr	r3, [pc, #24]	; (800d968 <OnRadioRxTimeout+0x48>)
 800d950:	2201      	movs	r2, #1
 800d952:	2100      	movs	r1, #0
 800d954:	2002      	movs	r0, #2
 800d956:	f00d f8b1 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
}
 800d95a:	bf00      	nop
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	20000da0 	.word	0x20000da0
 800d964:	2000054c 	.word	0x2000054c
 800d968:	0801b86c 	.word	0x0801b86c

0800d96c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d96c:	b480      	push	{r7}
 800d96e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d970:	4b08      	ldr	r3, [pc, #32]	; (800d994 <UpdateRxSlotIdleState+0x28>)
 800d972:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d976:	2b02      	cmp	r3, #2
 800d978:	d004      	beq.n	800d984 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d97a:	4b07      	ldr	r3, [pc, #28]	; (800d998 <UpdateRxSlotIdleState+0x2c>)
 800d97c:	2206      	movs	r2, #6
 800d97e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d982:	e003      	b.n	800d98c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d984:	4b04      	ldr	r3, [pc, #16]	; (800d998 <UpdateRxSlotIdleState+0x2c>)
 800d986:	2202      	movs	r2, #2
 800d988:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800d98c:	bf00      	nop
 800d98e:	46bd      	mov	sp, r7
 800d990:	bc80      	pop	{r7}
 800d992:	4770      	bx	lr
 800d994:	20000a54 	.word	0x20000a54
 800d998:	2000054c 	.word	0x2000054c

0800d99c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b08e      	sub	sp, #56	; 0x38
 800d9a0:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d9a2:	4b44      	ldr	r3, [pc, #272]	; (800dab4 <ProcessRadioTxDone+0x118>)
 800d9a4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	d002      	beq.n	800d9b2 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d9ac:	4b42      	ldr	r3, [pc, #264]	; (800dab8 <ProcessRadioTxDone+0x11c>)
 800d9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b0:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d9b2:	4b42      	ldr	r3, [pc, #264]	; (800dabc <ProcessRadioTxDone+0x120>)
 800d9b4:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	4841      	ldr	r0, [pc, #260]	; (800dac0 <ProcessRadioTxDone+0x124>)
 800d9bc:	f00c fee4 	bl	801a788 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d9c0:	483f      	ldr	r0, [pc, #252]	; (800dac0 <ProcessRadioTxDone+0x124>)
 800d9c2:	f00c fe03 	bl	801a5cc <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d9c6:	4b3d      	ldr	r3, [pc, #244]	; (800dabc <ProcessRadioTxDone+0x120>)
 800d9c8:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	483d      	ldr	r0, [pc, #244]	; (800dac4 <ProcessRadioTxDone+0x128>)
 800d9d0:	f00c feda 	bl	801a788 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d9d4:	483b      	ldr	r0, [pc, #236]	; (800dac4 <ProcessRadioTxDone+0x128>)
 800d9d6:	f00c fdf9 	bl	801a5cc <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d9da:	4b36      	ldr	r3, [pc, #216]	; (800dab4 <ProcessRadioTxDone+0x118>)
 800d9dc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d9e0:	2b02      	cmp	r3, #2
 800d9e2:	d004      	beq.n	800d9ee <ProcessRadioTxDone+0x52>
 800d9e4:	4b35      	ldr	r3, [pc, #212]	; (800dabc <ProcessRadioTxDone+0x120>)
 800d9e6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d019      	beq.n	800da22 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d9ee:	2316      	movs	r3, #22
 800d9f0:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d9f4:	4b2f      	ldr	r3, [pc, #188]	; (800dab4 <ProcessRadioTxDone+0x118>)
 800d9f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d9fa:	f107 0220 	add.w	r2, r7, #32
 800d9fe:	4611      	mov	r1, r2
 800da00:	4618      	mov	r0, r3
 800da02:	f006 fb55 	bl	80140b0 <RegionGetPhyParam>
 800da06:	4603      	mov	r3, r0
 800da08:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800da0a:	4b2c      	ldr	r3, [pc, #176]	; (800dabc <ProcessRadioTxDone+0x120>)
 800da0c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	4413      	add	r3, r2
 800da14:	4619      	mov	r1, r3
 800da16:	482c      	ldr	r0, [pc, #176]	; (800dac8 <ProcessRadioTxDone+0x12c>)
 800da18:	f00c feb6 	bl	801a788 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800da1c:	482a      	ldr	r0, [pc, #168]	; (800dac8 <ProcessRadioTxDone+0x12c>)
 800da1e:	f00c fdd5 	bl	801a5cc <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800da22:	4b2a      	ldr	r3, [pc, #168]	; (800dacc <ProcessRadioTxDone+0x130>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4a23      	ldr	r2, [pc, #140]	; (800dab4 <ProcessRadioTxDone+0x118>)
 800da28:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800da2a:	4b24      	ldr	r3, [pc, #144]	; (800dabc <ProcessRadioTxDone+0x120>)
 800da2c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800da30:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800da32:	4b26      	ldr	r3, [pc, #152]	; (800dacc <ProcessRadioTxDone+0x130>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800da38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da3c:	4618      	mov	r0, r3
 800da3e:	f00c f917 	bl	8019c70 <SysTimeGetMcuTime>
 800da42:	4638      	mov	r0, r7
 800da44:	4b1b      	ldr	r3, [pc, #108]	; (800dab4 <ProcessRadioTxDone+0x118>)
 800da46:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800da4a:	9200      	str	r2, [sp, #0]
 800da4c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800da50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800da54:	ca06      	ldmia	r2, {r1, r2}
 800da56:	f00c f86c 	bl	8019b32 <SysTimeSub>
 800da5a:	f107 0314 	add.w	r3, r7, #20
 800da5e:	463a      	mov	r2, r7
 800da60:	e892 0003 	ldmia.w	r2, {r0, r1}
 800da64:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800da68:	4b14      	ldr	r3, [pc, #80]	; (800dabc <ProcessRadioTxDone+0x120>)
 800da6a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800da6e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800da70:	2301      	movs	r3, #1
 800da72:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800da74:	4b0f      	ldr	r3, [pc, #60]	; (800dab4 <ProcessRadioTxDone+0x118>)
 800da76:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d101      	bne.n	800da82 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800da7e:	2300      	movs	r3, #0
 800da80:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800da82:	4b0c      	ldr	r3, [pc, #48]	; (800dab4 <ProcessRadioTxDone+0x118>)
 800da84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da88:	f107 0208 	add.w	r2, r7, #8
 800da8c:	4611      	mov	r1, r2
 800da8e:	4618      	mov	r0, r3
 800da90:	f006 fb27 	bl	80140e2 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800da94:	4b09      	ldr	r3, [pc, #36]	; (800dabc <ProcessRadioTxDone+0x120>)
 800da96:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800da9a:	f083 0301 	eor.w	r3, r3, #1
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d003      	beq.n	800daac <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800daa4:	4b05      	ldr	r3, [pc, #20]	; (800dabc <ProcessRadioTxDone+0x120>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800daac:	bf00      	nop
 800daae:	3730      	adds	r7, #48	; 0x30
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	20000a54 	.word	0x20000a54
 800dab8:	0801bed4 	.word	0x0801bed4
 800dabc:	2000054c 	.word	0x2000054c
 800dac0:	200008cc 	.word	0x200008cc
 800dac4:	200008e4 	.word	0x200008e4
 800dac8:	20000944 	.word	0x20000944
 800dacc:	200018a8 	.word	0x200018a8

0800dad0 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800dad4:	4b10      	ldr	r3, [pc, #64]	; (800db18 <PrepareRxDoneAbort+0x48>)
 800dad6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dade:	4a0e      	ldr	r2, [pc, #56]	; (800db18 <PrepareRxDoneAbort+0x48>)
 800dae0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800dae4:	4b0c      	ldr	r3, [pc, #48]	; (800db18 <PrepareRxDoneAbort+0x48>)
 800dae6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800daea:	2b00      	cmp	r3, #0
 800daec:	d002      	beq.n	800daf4 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800daee:	2000      	movs	r0, #0
 800daf0:	f001 f8f8 	bl	800ece4 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800daf4:	4a08      	ldr	r2, [pc, #32]	; (800db18 <PrepareRxDoneAbort+0x48>)
 800daf6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dafa:	f043 0302 	orr.w	r3, r3, #2
 800dafe:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800db02:	4a05      	ldr	r2, [pc, #20]	; (800db18 <PrepareRxDoneAbort+0x48>)
 800db04:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800db08:	f043 0320 	orr.w	r3, r3, #32
 800db0c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800db10:	f7ff ff2c 	bl	800d96c <UpdateRxSlotIdleState>
}
 800db14:	bf00      	nop
 800db16:	bd80      	pop	{r7, pc}
 800db18:	2000054c 	.word	0x2000054c

0800db1c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800db1c:	b5b0      	push	{r4, r5, r7, lr}
 800db1e:	b0a6      	sub	sp, #152	; 0x98
 800db20:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800db22:	2313      	movs	r3, #19
 800db24:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800db28:	4bb9      	ldr	r3, [pc, #740]	; (800de10 <ProcessRadioRxDone+0x2f4>)
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800db2e:	4bb8      	ldr	r3, [pc, #736]	; (800de10 <ProcessRadioRxDone+0x2f4>)
 800db30:	891b      	ldrh	r3, [r3, #8]
 800db32:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800db36:	4bb6      	ldr	r3, [pc, #728]	; (800de10 <ProcessRadioRxDone+0x2f4>)
 800db38:	895b      	ldrh	r3, [r3, #10]
 800db3a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800db3e:	4bb4      	ldr	r3, [pc, #720]	; (800de10 <ProcessRadioRxDone+0x2f4>)
 800db40:	7b1b      	ldrb	r3, [r3, #12]
 800db42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800db46:	2300      	movs	r3, #0
 800db48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800db4c:	2300      	movs	r3, #0
 800db4e:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800db50:	4bb0      	ldr	r3, [pc, #704]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800db52:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800db56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800db5a:	2300      	movs	r3, #0
 800db5c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800db60:	2301      	movs	r3, #1
 800db62:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800db66:	4bac      	ldr	r3, [pc, #688]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800db68:	2200      	movs	r2, #0
 800db6a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800db6e:	4aaa      	ldr	r2, [pc, #680]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800db70:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800db74:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800db78:	4aa7      	ldr	r2, [pc, #668]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800db7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800db7e:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800db82:	4ba5      	ldr	r3, [pc, #660]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800db84:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800db88:	4ba3      	ldr	r3, [pc, #652]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800db8a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800db8e:	4ba2      	ldr	r3, [pc, #648]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800db90:	2200      	movs	r2, #0
 800db92:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800db96:	4ba0      	ldr	r3, [pc, #640]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800db98:	2200      	movs	r2, #0
 800db9a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800db9e:	4b9e      	ldr	r3, [pc, #632]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800dba6:	4b9c      	ldr	r3, [pc, #624]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800dbae:	4b9a      	ldr	r3, [pc, #616]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800dbb6:	4b98      	ldr	r3, [pc, #608]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800dbbe:	4b96      	ldr	r3, [pc, #600]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800dbc6:	4b94      	ldr	r3, [pc, #592]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800dbce:	4b92      	ldr	r3, [pc, #584]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800dbd6:	4b90      	ldr	r3, [pc, #576]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800dbde:	4b8e      	ldr	r3, [pc, #568]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800dbe6:	4b8d      	ldr	r3, [pc, #564]	; (800de1c <ProcessRadioRxDone+0x300>)
 800dbe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbea:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800dbec:	488c      	ldr	r0, [pc, #560]	; (800de20 <ProcessRadioRxDone+0x304>)
 800dbee:	f00c fd5b 	bl	801a6a8 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800dbf2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dbfa:	f004 fb28 	bl	801224e <LoRaMacClassBRxBeacon>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00a      	beq.n	800dc1a <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800dc04:	4a84      	ldr	r2, [pc, #528]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dc06:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800dc0a:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800dc0e:	4a82      	ldr	r2, [pc, #520]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dc10:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dc14:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800dc18:	e3bf      	b.n	800e39a <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dc1a:	4b7e      	ldr	r3, [pc, #504]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dc1c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d11e      	bne.n	800dc62 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dc24:	f004 fb26 	bl	8012274 <LoRaMacClassBIsPingExpected>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00a      	beq.n	800dc44 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dc2e:	2000      	movs	r0, #0
 800dc30:	f004 fad7 	bl	80121e2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800dc34:	2000      	movs	r0, #0
 800dc36:	f004 faf8 	bl	801222a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dc3a:	4b77      	ldr	r3, [pc, #476]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dc3c:	2204      	movs	r2, #4
 800dc3e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800dc42:	e00e      	b.n	800dc62 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dc44:	f004 fb1d 	bl	8012282 <LoRaMacClassBIsMulticastExpected>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d009      	beq.n	800dc62 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dc4e:	2000      	movs	r0, #0
 800dc50:	f004 fad1 	bl	80121f6 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dc54:	2000      	movs	r0, #0
 800dc56:	f004 faf1 	bl	801223c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800dc5a:	4b6f      	ldr	r3, [pc, #444]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dc5c:	2205      	movs	r2, #5
 800dc5e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800dc62:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dc66:	1c5a      	adds	r2, r3, #1
 800dc68:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc70:	4413      	add	r3, r2
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800dc78:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dc7c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	3b01      	subs	r3, #1
 800dc84:	2b06      	cmp	r3, #6
 800dc86:	f200 8362 	bhi.w	800e34e <ProcessRadioRxDone+0x832>
 800dc8a:	a201      	add	r2, pc, #4	; (adr r2, 800dc90 <ProcessRadioRxDone+0x174>)
 800dc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc90:	0800dcad 	.word	0x0800dcad
 800dc94:	0800e34f 	.word	0x0800e34f
 800dc98:	0800de2d 	.word	0x0800de2d
 800dc9c:	0800e34f 	.word	0x0800e34f
 800dca0:	0800de25 	.word	0x0800de25
 800dca4:	0800e34f 	.word	0x0800e34f
 800dca8:	0800e2f5 	.word	0x0800e2f5
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800dcac:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dcb0:	2b10      	cmp	r3, #16
 800dcb2:	d806      	bhi.n	800dcc2 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dcb4:	4b58      	ldr	r3, [pc, #352]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dcbc:	f7ff ff08 	bl	800dad0 <PrepareRxDoneAbort>
                return;
 800dcc0:	e36b      	b.n	800e39a <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800dcc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcc4:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800dcc6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dcce:	4b51      	ldr	r3, [pc, #324]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dcd0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d006      	beq.n	800dce6 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dcd8:	4b4f      	ldr	r3, [pc, #316]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800dcda:	2201      	movs	r2, #1
 800dcdc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dce0:	f7ff fef6 	bl	800dad0 <PrepareRxDoneAbort>
                return;
 800dce4:	e359      	b.n	800e39a <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800dce6:	f7fe fbcf 	bl	800c488 <SecureElementGetJoinEui>
 800dcea:	4601      	mov	r1, r0
 800dcec:	f107 0308 	add.w	r3, r7, #8
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	20ff      	movs	r0, #255	; 0xff
 800dcf4:	f005 fc60 	bl	80135b8 <LoRaMacCryptoHandleJoinAccept>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800dcfe:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d172      	bne.n	800ddec <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800dd06:	7c7b      	ldrb	r3, [r7, #17]
 800dd08:	461a      	mov	r2, r3
 800dd0a:	4b42      	ldr	r3, [pc, #264]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800dd10:	4b40      	ldr	r3, [pc, #256]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd12:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dd16:	7cbb      	ldrb	r3, [r7, #18]
 800dd18:	021b      	lsls	r3, r3, #8
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	4a3d      	ldr	r2, [pc, #244]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd1e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800dd22:	4b3c      	ldr	r3, [pc, #240]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd24:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dd28:	7cfb      	ldrb	r3, [r7, #19]
 800dd2a:	041b      	lsls	r3, r3, #16
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	4a39      	ldr	r2, [pc, #228]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd30:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	4a37      	ldr	r2, [pc, #220]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd38:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800dd3c:	7e3b      	ldrb	r3, [r7, #24]
 800dd3e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	461a      	mov	r2, r3
 800dd46:	4b33      	ldr	r3, [pc, #204]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd4c:	7e3b      	ldrb	r3, [r7, #24]
 800dd4e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	461a      	mov	r2, r3
 800dd56:	4b2f      	ldr	r3, [pc, #188]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd5c:	7e3b      	ldrb	r3, [r7, #24]
 800dd5e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	461a      	mov	r2, r3
 800dd66:	4b2b      	ldr	r3, [pc, #172]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800dd6c:	7e7b      	ldrb	r3, [r7, #25]
 800dd6e:	461a      	mov	r2, r3
 800dd70:	4b28      	ldr	r3, [pc, #160]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd72:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800dd74:	4b27      	ldr	r3, [pc, #156]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d102      	bne.n	800dd82 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800dd7c:	4b25      	ldr	r3, [pc, #148]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd7e:	2201      	movs	r2, #1
 800dd80:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800dd82:	4b24      	ldr	r3, [pc, #144]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dd8a:	fb02 f303 	mul.w	r3, r2, r3
 800dd8e:	4a21      	ldr	r2, [pc, #132]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd90:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800dd92:	4b20      	ldr	r3, [pc, #128]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd96:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800dd9a:	4a1e      	ldr	r2, [pc, #120]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dd9c:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800dd9e:	4b1d      	ldr	r3, [pc, #116]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800dda6:	f107 0308 	add.w	r3, r7, #8
 800ddaa:	3312      	adds	r3, #18
 800ddac:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ddae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	3b11      	subs	r3, #17
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ddbc:	4b15      	ldr	r3, [pc, #84]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800ddbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddc2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f006 f9c4 	bl	8014156 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ddce:	4b11      	ldr	r3, [pc, #68]	; (800de14 <ProcessRadioRxDone+0x2f8>)
 800ddd0:	2202      	movs	r2, #2
 800ddd2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ddd6:	2001      	movs	r0, #1
 800ddd8:	f004 ff18 	bl	8012c0c <LoRaMacConfirmQueueIsCmdActive>
 800dddc:	4603      	mov	r3, r0
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00e      	beq.n	800de00 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800dde2:	2101      	movs	r1, #1
 800dde4:	2000      	movs	r0, #0
 800dde6:	f004 fe85 	bl	8012af4 <LoRaMacConfirmQueueSetStatus>
 800ddea:	e009      	b.n	800de00 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ddec:	2001      	movs	r0, #1
 800ddee:	f004 ff0d 	bl	8012c0c <LoRaMacConfirmQueueIsCmdActive>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d003      	beq.n	800de00 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ddf8:	2101      	movs	r1, #1
 800ddfa:	2007      	movs	r0, #7
 800ddfc:	f004 fe7a 	bl	8012af4 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800de00:	4a05      	ldr	r2, [pc, #20]	; (800de18 <ProcessRadioRxDone+0x2fc>)
 800de02:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800de06:	f043 0308 	orr.w	r3, r3, #8
 800de0a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800de0e:	e2a5      	b.n	800e35c <ProcessRadioRxDone+0x840>
 800de10:	200018ac 	.word	0x200018ac
 800de14:	20000a54 	.word	0x20000a54
 800de18:	2000054c 	.word	0x2000054c
 800de1c:	0801bed4 	.word	0x0801bed4
 800de20:	200008e4 	.word	0x200008e4
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800de24:	4bae      	ldr	r3, [pc, #696]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800de26:	2201      	movs	r2, #1
 800de28:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800de2c:	4bad      	ldr	r3, [pc, #692]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800de2e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800de32:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800de36:	4baa      	ldr	r3, [pc, #680]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800de38:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800de3c:	b25b      	sxtb	r3, r3
 800de3e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800de42:	230d      	movs	r3, #13
 800de44:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800de48:	4ba6      	ldr	r3, [pc, #664]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800de4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d002      	beq.n	800de58 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800de52:	230e      	movs	r3, #14
 800de54:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de58:	4ba2      	ldr	r3, [pc, #648]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800de5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de5e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800de62:	4611      	mov	r1, r2
 800de64:	4618      	mov	r0, r3
 800de66:	f006 f923 	bl	80140b0 <RegionGetPhyParam>
 800de6a:	4603      	mov	r3, r0
 800de6c:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800de6e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800de72:	3b0d      	subs	r3, #13
 800de74:	b29b      	uxth	r3, r3
 800de76:	b21b      	sxth	r3, r3
 800de78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de7c:	b21a      	sxth	r2, r3
 800de7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de80:	b21b      	sxth	r3, r3
 800de82:	429a      	cmp	r2, r3
 800de84:	dc03      	bgt.n	800de8e <ProcessRadioRxDone+0x372>
 800de86:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800de8a:	2b0b      	cmp	r3, #11
 800de8c:	d806      	bhi.n	800de9c <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de8e:	4b94      	ldr	r3, [pc, #592]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800de90:	2201      	movs	r2, #1
 800de92:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800de96:	f7ff fe1b 	bl	800dad0 <PrepareRxDoneAbort>
                return;
 800de9a:	e27e      	b.n	800e39a <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800de9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de9e:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800dea0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800deaa:	4b8f      	ldr	r3, [pc, #572]	; (800e0e8 <ProcessRadioRxDone+0x5cc>)
 800deac:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800deae:	23ff      	movs	r3, #255	; 0xff
 800deb0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800deb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800deb8:	4618      	mov	r0, r3
 800deba:	f005 fe7c 	bl	8013bb6 <LoRaMacParserData>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d006      	beq.n	800ded2 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dec4:	4b86      	ldr	r3, [pc, #536]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800dec6:	2201      	movs	r2, #1
 800dec8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800decc:	f7ff fe00 	bl	800dad0 <PrepareRxDoneAbort>
                return;
 800ded0:	e263      	b.n	800e39a <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ded2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded4:	4a82      	ldr	r2, [pc, #520]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800ded6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800deda:	1cba      	adds	r2, r7, #2
 800dedc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dee0:	4611      	mov	r1, r2
 800dee2:	4618      	mov	r0, r3
 800dee4:	f002 fcde 	bl	80108a4 <DetermineFrameType>
 800dee8:	4603      	mov	r3, r0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d006      	beq.n	800defc <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800deee:	4b7c      	ldr	r3, [pc, #496]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800def0:	2201      	movs	r2, #1
 800def2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800def6:	f7ff fdeb 	bl	800dad0 <PrepareRxDoneAbort>
                return;
 800defa:	e24e      	b.n	800e39a <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800defc:	2300      	movs	r3, #0
 800defe:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800df02:	2300      	movs	r3, #0
 800df04:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800df06:	2300      	movs	r3, #0
 800df08:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800df0c:	e049      	b.n	800dfa2 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df0e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df12:	4a74      	ldr	r2, [pc, #464]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800df14:	212c      	movs	r1, #44	; 0x2c
 800df16:	fb01 f303 	mul.w	r3, r1, r3
 800df1a:	4413      	add	r3, r2
 800df1c:	33d4      	adds	r3, #212	; 0xd4
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df22:	429a      	cmp	r2, r3
 800df24:	d138      	bne.n	800df98 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800df26:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df2a:	4a6e      	ldr	r2, [pc, #440]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800df2c:	212c      	movs	r1, #44	; 0x2c
 800df2e:	fb01 f303 	mul.w	r3, r1, r3
 800df32:	4413      	add	r3, r2
 800df34:	33d2      	adds	r3, #210	; 0xd2
 800df36:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d02d      	beq.n	800df98 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800df3c:	2301      	movs	r3, #1
 800df3e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800df42:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df46:	4a67      	ldr	r2, [pc, #412]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800df48:	212c      	movs	r1, #44	; 0x2c
 800df4a:	fb01 f303 	mul.w	r3, r1, r3
 800df4e:	4413      	add	r3, r2
 800df50:	33d3      	adds	r3, #211	; 0xd3
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800df58:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df5c:	4a61      	ldr	r2, [pc, #388]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800df5e:	212c      	movs	r1, #44	; 0x2c
 800df60:	fb01 f303 	mul.w	r3, r1, r3
 800df64:	4413      	add	r3, r2
 800df66:	33f0      	adds	r3, #240	; 0xf0
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800df6e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df72:	4a5c      	ldr	r2, [pc, #368]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800df74:	212c      	movs	r1, #44	; 0x2c
 800df76:	fb01 f303 	mul.w	r3, r1, r3
 800df7a:	4413      	add	r3, r2
 800df7c:	33d4      	adds	r3, #212	; 0xd4
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800df84:	4b57      	ldr	r3, [pc, #348]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800df86:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800df8a:	2b02      	cmp	r3, #2
 800df8c:	d10e      	bne.n	800dfac <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800df8e:	4b54      	ldr	r3, [pc, #336]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800df90:	2203      	movs	r2, #3
 800df92:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800df96:	e009      	b.n	800dfac <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800df98:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df9c:	3301      	adds	r3, #1
 800df9e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dfa2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d0b1      	beq.n	800df0e <ProcessRadioRxDone+0x3f2>
 800dfaa:	e000      	b.n	800dfae <ProcessRadioRxDone+0x492>
                    break;
 800dfac:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d117      	bne.n	800dfe6 <ProcessRadioRxDone+0x4ca>
 800dfb6:	78bb      	ldrb	r3, [r7, #2]
 800dfb8:	2b03      	cmp	r3, #3
 800dfba:	d10d      	bne.n	800dfd8 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dfbc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfc0:	f003 0320 	and.w	r3, r3, #32
 800dfc4:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d106      	bne.n	800dfd8 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dfca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfd2:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d006      	beq.n	800dfe6 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dfd8:	4b41      	ldr	r3, [pc, #260]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800dfda:	2201      	movs	r2, #1
 800dfdc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dfe0:	f7ff fd76 	bl	800dad0 <PrepareRxDoneAbort>
                return;
 800dfe4:	e1d9      	b.n	800e39a <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800dfe6:	2315      	movs	r3, #21
 800dfe8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dfec:	4b3d      	ldr	r3, [pc, #244]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800dfee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dff2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dff6:	4611      	mov	r1, r2
 800dff8:	4618      	mov	r0, r3
 800dffa:	f006 f859 	bl	80140b0 <RegionGetPhyParam>
 800dffe:	4603      	mov	r3, r0
 800e000:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800e002:	78b9      	ldrb	r1, [r7, #2]
 800e004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e006:	b29b      	uxth	r3, r3
 800e008:	4d36      	ldr	r5, [pc, #216]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800e00a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e00e:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800e012:	1d3a      	adds	r2, r7, #4
 800e014:	9202      	str	r2, [sp, #8]
 800e016:	1cfa      	adds	r2, r7, #3
 800e018:	9201      	str	r2, [sp, #4]
 800e01a:	9300      	str	r3, [sp, #0]
 800e01c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800e020:	4622      	mov	r2, r4
 800e022:	f000 fe95 	bl	800ed50 <GetFCntDown>
 800e026:	4603      	mov	r3, r0
 800e028:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e02c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e030:	2b00      	cmp	r3, #0
 800e032:	d031      	beq.n	800e098 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e034:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e038:	2b07      	cmp	r3, #7
 800e03a:	d119      	bne.n	800e070 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e03c:	4b28      	ldr	r3, [pc, #160]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800e03e:	2208      	movs	r2, #8
 800e040:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800e044:	4b27      	ldr	r3, [pc, #156]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800e046:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d11d      	bne.n	800e08a <ProcessRadioRxDone+0x56e>
 800e04e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e052:	f023 031f 	bic.w	r3, r3, #31
 800e056:	b2db      	uxtb	r3, r3
 800e058:	2ba0      	cmp	r3, #160	; 0xa0
 800e05a:	d116      	bne.n	800e08a <ProcessRadioRxDone+0x56e>
 800e05c:	4b21      	ldr	r3, [pc, #132]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800e05e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e062:	429a      	cmp	r2, r3
 800e064:	d111      	bne.n	800e08a <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800e066:	4b1f      	ldr	r3, [pc, #124]	; (800e0e4 <ProcessRadioRxDone+0x5c8>)
 800e068:	2201      	movs	r2, #1
 800e06a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800e06e:	e00c      	b.n	800e08a <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800e070:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e074:	2b08      	cmp	r3, #8
 800e076:	d104      	bne.n	800e082 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800e078:	4b19      	ldr	r3, [pc, #100]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800e07a:	220a      	movs	r2, #10
 800e07c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800e080:	e003      	b.n	800e08a <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e082:	4b17      	ldr	r3, [pc, #92]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800e084:	2201      	movs	r2, #1
 800e086:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4a14      	ldr	r2, [pc, #80]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800e08e:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800e092:	f7ff fd1d 	bl	800dad0 <PrepareRxDoneAbort>
                return;
 800e096:	e180      	b.n	800e39a <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e098:	78fa      	ldrb	r2, [r7, #3]
 800e09a:	6879      	ldr	r1, [r7, #4]
 800e09c:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800e0a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0a4:	9300      	str	r3, [sp, #0]
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e0ac:	f005 fbd0 	bl	8013850 <LoRaMacCryptoUnsecureMessage>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e0b6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d016      	beq.n	800e0ec <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e0be:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e0c2:	2b02      	cmp	r3, #2
 800e0c4:	d104      	bne.n	800e0d0 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e0c6:	4b06      	ldr	r3, [pc, #24]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800e0c8:	220b      	movs	r2, #11
 800e0ca:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800e0ce:	e003      	b.n	800e0d8 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e0d0:	4b03      	ldr	r3, [pc, #12]	; (800e0e0 <ProcessRadioRxDone+0x5c4>)
 800e0d2:	220c      	movs	r2, #12
 800e0d4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800e0d8:	f7ff fcfa 	bl	800dad0 <PrepareRxDoneAbort>
                return;
 800e0dc:	e15d      	b.n	800e39a <ProcessRadioRxDone+0x87e>
 800e0de:	bf00      	nop
 800e0e0:	2000054c 	.word	0x2000054c
 800e0e4:	20000a54 	.word	0x20000a54
 800e0e8:	20000784 	.word	0x20000784
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e0ec:	4bac      	ldr	r3, [pc, #688]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800e0f4:	4aaa      	ldr	r2, [pc, #680]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e0f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e0fa:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e0fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e102:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e106:	b2db      	uxtb	r3, r3
 800e108:	461a      	mov	r2, r3
 800e10a:	4ba5      	ldr	r3, [pc, #660]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e10c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800e110:	4ba3      	ldr	r3, [pc, #652]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e112:	2200      	movs	r2, #0
 800e114:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800e118:	4ba1      	ldr	r3, [pc, #644]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	4a9f      	ldr	r2, [pc, #636]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e124:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e128:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e12c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e130:	b2db      	uxtb	r3, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	bf14      	ite	ne
 800e136:	2301      	movne	r3, #1
 800e138:	2300      	moveq	r3, #0
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	4b98      	ldr	r3, [pc, #608]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e13e:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e142:	4b97      	ldr	r3, [pc, #604]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e144:	2200      	movs	r2, #0
 800e146:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e14a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e14e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e152:	b2db      	uxtb	r3, r3
 800e154:	2b00      	cmp	r3, #0
 800e156:	bf14      	ite	ne
 800e158:	2301      	movne	r3, #1
 800e15a:	2300      	moveq	r3, #0
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	4b90      	ldr	r3, [pc, #576]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e160:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e164:	4b8e      	ldr	r3, [pc, #568]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e166:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d004      	beq.n	800e178 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e16e:	4b8c      	ldr	r3, [pc, #560]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e170:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e174:	2b01      	cmp	r3, #1
 800e176:	d102      	bne.n	800e17e <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e178:	4b8a      	ldr	r3, [pc, #552]	; (800e3a4 <ProcessRadioRxDone+0x888>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e17e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e182:	2b01      	cmp	r3, #1
 800e184:	d104      	bne.n	800e190 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e186:	4b86      	ldr	r3, [pc, #536]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e188:	2202      	movs	r2, #2
 800e18a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800e18e:	e01f      	b.n	800e1d0 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e190:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e194:	f023 031f 	bic.w	r3, r3, #31
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	2ba0      	cmp	r3, #160	; 0xa0
 800e19c:	d110      	bne.n	800e1c0 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e19e:	4b81      	ldr	r3, [pc, #516]	; (800e3a4 <ProcessRadioRxDone+0x888>)
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e1a6:	4b7f      	ldr	r3, [pc, #508]	; (800e3a4 <ProcessRadioRxDone+0x888>)
 800e1a8:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d102      	bne.n	800e1b6 <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e1b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1b2:	4a7c      	ldr	r2, [pc, #496]	; (800e3a4 <ProcessRadioRxDone+0x888>)
 800e1b4:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e1b6:	4b7a      	ldr	r3, [pc, #488]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800e1be:	e007      	b.n	800e1d0 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e1c0:	4b78      	ldr	r3, [pc, #480]	; (800e3a4 <ProcessRadioRxDone+0x888>)
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e1c8:	4b75      	ldr	r3, [pc, #468]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e1d0:	4b73      	ldr	r3, [pc, #460]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e1d2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e1d6:	4a72      	ldr	r2, [pc, #456]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e1d8:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800e1dc:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f001 ff0d 	bl	8010000 <RemoveMacCommands>

            switch( fType )
 800e1e6:	78bb      	ldrb	r3, [r7, #2]
 800e1e8:	2b03      	cmp	r3, #3
 800e1ea:	d874      	bhi.n	800e2d6 <ProcessRadioRxDone+0x7ba>
 800e1ec:	a201      	add	r2, pc, #4	; (adr r2, 800e1f4 <ProcessRadioRxDone+0x6d8>)
 800e1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f2:	bf00      	nop
 800e1f4:	0800e205 	.word	0x0800e205
 800e1f8:	0800e255 	.word	0x0800e255
 800e1fc:	0800e28b 	.word	0x0800e28b
 800e200:	0800e2b1 	.word	0x0800e2b1
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e204:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e208:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	461c      	mov	r4, r3
 800e210:	4b63      	ldr	r3, [pc, #396]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e212:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e216:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e21a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e21e:	f102 0010 	add.w	r0, r2, #16
 800e222:	9300      	str	r3, [sp, #0]
 800e224:	460b      	mov	r3, r1
 800e226:	4622      	mov	r2, r4
 800e228:	2100      	movs	r1, #0
 800e22a:	f000 ff03 	bl	800f034 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e22e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e232:	4b5b      	ldr	r3, [pc, #364]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e234:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e23a:	4a59      	ldr	r2, [pc, #356]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e23c:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e240:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e244:	4b56      	ldr	r3, [pc, #344]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e246:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e24a:	4b55      	ldr	r3, [pc, #340]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e24c:	2201      	movs	r2, #1
 800e24e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e252:	e047      	b.n	800e2e4 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e254:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e258:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	461c      	mov	r4, r3
 800e260:	4b4f      	ldr	r3, [pc, #316]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e262:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e266:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e26a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e26e:	f102 0010 	add.w	r0, r2, #16
 800e272:	9300      	str	r3, [sp, #0]
 800e274:	460b      	mov	r3, r1
 800e276:	4622      	mov	r2, r4
 800e278:	2100      	movs	r1, #0
 800e27a:	f000 fedb 	bl	800f034 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e27e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e282:	4b47      	ldr	r3, [pc, #284]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e284:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e288:	e02c      	b.n	800e2e4 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e28a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e28c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e290:	4b43      	ldr	r3, [pc, #268]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e292:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e296:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e29a:	9300      	str	r3, [sp, #0]
 800e29c:	460b      	mov	r3, r1
 800e29e:	2100      	movs	r1, #0
 800e2a0:	f000 fec8 	bl	800f034 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2a4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e2a8:	4b3d      	ldr	r3, [pc, #244]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e2aa:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e2ae:	e019      	b.n	800e2e4 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2b0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e2b4:	4b3a      	ldr	r3, [pc, #232]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e2b6:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e2ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2bc:	4a38      	ldr	r2, [pc, #224]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e2be:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e2c2:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e2c6:	4b36      	ldr	r3, [pc, #216]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e2c8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e2cc:	4b34      	ldr	r3, [pc, #208]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e2d4:	e006      	b.n	800e2e4 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e2d6:	4b32      	ldr	r3, [pc, #200]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e2d8:	2201      	movs	r2, #1
 800e2da:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800e2de:	f7ff fbf7 	bl	800dad0 <PrepareRxDoneAbort>
                    break;
 800e2e2:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e2e4:	4a2e      	ldr	r2, [pc, #184]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e2e6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e2ea:	f043 0302 	orr.w	r3, r3, #2
 800e2ee:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800e2f2:	e033      	b.n	800e35c <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e2f4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e2f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e2fa:	18d1      	adds	r1, r2, r3
 800e2fc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e300:	b29b      	uxth	r3, r3
 800e302:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e306:	1ad3      	subs	r3, r2, r3
 800e308:	b29b      	uxth	r3, r3
 800e30a:	461a      	mov	r2, r3
 800e30c:	4826      	ldr	r0, [pc, #152]	; (800e3a8 <ProcessRadioRxDone+0x88c>)
 800e30e:	f008 f9da 	bl	80166c6 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e312:	4b23      	ldr	r3, [pc, #140]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e314:	2203      	movs	r2, #3
 800e316:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e31a:	4b21      	ldr	r3, [pc, #132]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e31c:	2200      	movs	r2, #0
 800e31e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e322:	4b1f      	ldr	r3, [pc, #124]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e324:	4a20      	ldr	r2, [pc, #128]	; (800e3a8 <ProcessRadioRxDone+0x88c>)
 800e326:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e32a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e32e:	b2da      	uxtb	r2, r3
 800e330:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e334:	1ad3      	subs	r3, r2, r3
 800e336:	b2da      	uxtb	r2, r3
 800e338:	4b19      	ldr	r3, [pc, #100]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e33a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e33e:	4a18      	ldr	r2, [pc, #96]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e340:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e344:	f043 0302 	orr.w	r3, r3, #2
 800e348:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800e34c:	e006      	b.n	800e35c <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e34e:	4b14      	ldr	r3, [pc, #80]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e350:	2201      	movs	r2, #1
 800e352:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800e356:	f7ff fbbb 	bl	800dad0 <PrepareRxDoneAbort>
            break;
 800e35a:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e35c:	4b10      	ldr	r3, [pc, #64]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e35e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e362:	2b00      	cmp	r3, #0
 800e364:	d008      	beq.n	800e378 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e366:	4b0e      	ldr	r3, [pc, #56]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e368:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d00b      	beq.n	800e388 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e370:	2000      	movs	r0, #0
 800e372:	f000 fcb7 	bl	800ece4 <OnAckTimeoutTimerEvent>
 800e376:	e007      	b.n	800e388 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e378:	4b0a      	ldr	r3, [pc, #40]	; (800e3a4 <ProcessRadioRxDone+0x888>)
 800e37a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d102      	bne.n	800e388 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e382:	2000      	movs	r0, #0
 800e384:	f000 fcae 	bl	800ece4 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e388:	4a05      	ldr	r2, [pc, #20]	; (800e3a0 <ProcessRadioRxDone+0x884>)
 800e38a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e38e:	f043 0320 	orr.w	r3, r3, #32
 800e392:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800e396:	f7ff fae9 	bl	800d96c <UpdateRxSlotIdleState>
}
 800e39a:	3788      	adds	r7, #136	; 0x88
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bdb0      	pop	{r4, r5, r7, pc}
 800e3a0:	2000054c 	.word	0x2000054c
 800e3a4:	20000a54 	.word	0x20000a54
 800e3a8:	20000784 	.word	0x20000784

0800e3ac <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e3b0:	4b11      	ldr	r3, [pc, #68]	; (800e3f8 <ProcessRadioTxTimeout+0x4c>)
 800e3b2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e3b6:	2b02      	cmp	r3, #2
 800e3b8:	d002      	beq.n	800e3c0 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e3ba:	4b10      	ldr	r3, [pc, #64]	; (800e3fc <ProcessRadioTxTimeout+0x50>)
 800e3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3be:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e3c0:	f7ff fad4 	bl	800d96c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e3c4:	4b0e      	ldr	r3, [pc, #56]	; (800e400 <ProcessRadioTxTimeout+0x54>)
 800e3c6:	2202      	movs	r2, #2
 800e3c8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e3cc:	2002      	movs	r0, #2
 800e3ce:	f004 fbe9 	bl	8012ba4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e3d2:	4b0b      	ldr	r3, [pc, #44]	; (800e400 <ProcessRadioTxTimeout+0x54>)
 800e3d4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d003      	beq.n	800e3e4 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800e3dc:	4b08      	ldr	r3, [pc, #32]	; (800e400 <ProcessRadioTxTimeout+0x54>)
 800e3de:	2201      	movs	r2, #1
 800e3e0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e3e4:	4a06      	ldr	r2, [pc, #24]	; (800e400 <ProcessRadioTxTimeout+0x54>)
 800e3e6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e3ea:	f043 0320 	orr.w	r3, r3, #32
 800e3ee:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800e3f2:	bf00      	nop
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	20000a54 	.word	0x20000a54
 800e3fc:	0801bed4 	.word	0x0801bed4
 800e400:	2000054c 	.word	0x2000054c

0800e404 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	4603      	mov	r3, r0
 800e40c:	460a      	mov	r2, r1
 800e40e:	71fb      	strb	r3, [r7, #7]
 800e410:	4613      	mov	r3, r2
 800e412:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e414:	2300      	movs	r3, #0
 800e416:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e418:	4b40      	ldr	r3, [pc, #256]	; (800e51c <HandleRadioRxErrorTimeout+0x118>)
 800e41a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e41e:	2b02      	cmp	r3, #2
 800e420:	d002      	beq.n	800e428 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e422:	4b3f      	ldr	r3, [pc, #252]	; (800e520 <HandleRadioRxErrorTimeout+0x11c>)
 800e424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e426:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e428:	f003 ff1d 	bl	8012266 <LoRaMacClassBIsBeaconExpected>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d007      	beq.n	800e442 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e432:	2002      	movs	r0, #2
 800e434:	f003 fecb 	bl	80121ce <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e438:	2000      	movs	r0, #0
 800e43a:	f003 feed 	bl	8012218 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e43e:	2301      	movs	r3, #1
 800e440:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e442:	4b36      	ldr	r3, [pc, #216]	; (800e51c <HandleRadioRxErrorTimeout+0x118>)
 800e444:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d119      	bne.n	800e480 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e44c:	f003 ff12 	bl	8012274 <LoRaMacClassBIsPingExpected>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d007      	beq.n	800e466 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e456:	2000      	movs	r0, #0
 800e458:	f003 fec3 	bl	80121e2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e45c:	2000      	movs	r0, #0
 800e45e:	f003 fee4 	bl	801222a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e462:	2301      	movs	r3, #1
 800e464:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e466:	f003 ff0c 	bl	8012282 <LoRaMacClassBIsMulticastExpected>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d007      	beq.n	800e480 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e470:	2000      	movs	r0, #0
 800e472:	f003 fec0 	bl	80121f6 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e476:	2000      	movs	r0, #0
 800e478:	f003 fee0 	bl	801223c <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e47c:	2301      	movs	r3, #1
 800e47e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e480:	7bfb      	ldrb	r3, [r7, #15]
 800e482:	f083 0301 	eor.w	r3, r3, #1
 800e486:	b2db      	uxtb	r3, r3
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d040      	beq.n	800e50e <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e48c:	4b25      	ldr	r3, [pc, #148]	; (800e524 <HandleRadioRxErrorTimeout+0x120>)
 800e48e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e492:	2b00      	cmp	r3, #0
 800e494:	d122      	bne.n	800e4dc <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e496:	4b23      	ldr	r3, [pc, #140]	; (800e524 <HandleRadioRxErrorTimeout+0x120>)
 800e498:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d003      	beq.n	800e4a8 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e4a0:	4a20      	ldr	r2, [pc, #128]	; (800e524 <HandleRadioRxErrorTimeout+0x120>)
 800e4a2:	79fb      	ldrb	r3, [r7, #7]
 800e4a4:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e4a8:	79fb      	ldrb	r3, [r7, #7]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f004 fb7a 	bl	8012ba4 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e4b0:	4b1a      	ldr	r3, [pc, #104]	; (800e51c <HandleRadioRxErrorTimeout+0x118>)
 800e4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f00c fa23 	bl	801a900 <UTIL_TIMER_GetElapsedTime>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	4b19      	ldr	r3, [pc, #100]	; (800e524 <HandleRadioRxErrorTimeout+0x120>)
 800e4be:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d323      	bcc.n	800e50e <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e4c6:	4818      	ldr	r0, [pc, #96]	; (800e528 <HandleRadioRxErrorTimeout+0x124>)
 800e4c8:	f00c f8ee 	bl	801a6a8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e4cc:	4a15      	ldr	r2, [pc, #84]	; (800e524 <HandleRadioRxErrorTimeout+0x120>)
 800e4ce:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e4d2:	f043 0320 	orr.w	r3, r3, #32
 800e4d6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800e4da:	e018      	b.n	800e50e <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e4dc:	4b11      	ldr	r3, [pc, #68]	; (800e524 <HandleRadioRxErrorTimeout+0x120>)
 800e4de:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d003      	beq.n	800e4ee <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e4e6:	4a0f      	ldr	r2, [pc, #60]	; (800e524 <HandleRadioRxErrorTimeout+0x120>)
 800e4e8:	79bb      	ldrb	r3, [r7, #6]
 800e4ea:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e4ee:	79bb      	ldrb	r3, [r7, #6]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f004 fb57 	bl	8012ba4 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e4f6:	4b09      	ldr	r3, [pc, #36]	; (800e51c <HandleRadioRxErrorTimeout+0x118>)
 800e4f8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e4fc:	2b02      	cmp	r3, #2
 800e4fe:	d006      	beq.n	800e50e <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e500:	4a08      	ldr	r2, [pc, #32]	; (800e524 <HandleRadioRxErrorTimeout+0x120>)
 800e502:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e506:	f043 0320 	orr.w	r3, r3, #32
 800e50a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800e50e:	f7ff fa2d 	bl	800d96c <UpdateRxSlotIdleState>
}
 800e512:	bf00      	nop
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	20000a54 	.word	0x20000a54
 800e520:	0801bed4 	.word	0x0801bed4
 800e524:	2000054c 	.word	0x2000054c
 800e528:	200008e4 	.word	0x200008e4

0800e52c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e530:	2106      	movs	r1, #6
 800e532:	2005      	movs	r0, #5
 800e534:	f7ff ff66 	bl	800e404 <HandleRadioRxErrorTimeout>
}
 800e538:	bf00      	nop
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e540:	2104      	movs	r1, #4
 800e542:	2003      	movs	r0, #3
 800e544:	f7ff ff5e 	bl	800e404 <HandleRadioRxErrorTimeout>
}
 800e548:	bf00      	nop
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e552:	f3ef 8310 	mrs	r3, PRIMASK
 800e556:	607b      	str	r3, [r7, #4]
  return(result);
 800e558:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e55a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e55c:	b672      	cpsid	i
}
 800e55e:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e560:	4b1d      	ldr	r3, [pc, #116]	; (800e5d8 <LoRaMacHandleIrqEvents+0x8c>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e566:	4b1c      	ldr	r3, [pc, #112]	; (800e5d8 <LoRaMacHandleIrqEvents+0x8c>)
 800e568:	2200      	movs	r2, #0
 800e56a:	601a      	str	r2, [r3, #0]
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	f383 8810 	msr	PRIMASK, r3
}
 800e576:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d027      	beq.n	800e5ce <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e57e:	783b      	ldrb	r3, [r7, #0]
 800e580:	f003 0310 	and.w	r3, r3, #16
 800e584:	b2db      	uxtb	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	d001      	beq.n	800e58e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e58a:	f7ff fa07 	bl	800d99c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e58e:	783b      	ldrb	r3, [r7, #0]
 800e590:	f003 0308 	and.w	r3, r3, #8
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e59a:	f7ff fabf 	bl	800db1c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e59e:	783b      	ldrb	r3, [r7, #0]
 800e5a0:	f003 0304 	and.w	r3, r3, #4
 800e5a4:	b2db      	uxtb	r3, r3
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d001      	beq.n	800e5ae <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e5aa:	f7ff feff 	bl	800e3ac <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e5ae:	783b      	ldrb	r3, [r7, #0]
 800e5b0:	f003 0302 	and.w	r3, r3, #2
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e5ba:	f7ff ffb7 	bl	800e52c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e5be:	783b      	ldrb	r3, [r7, #0]
 800e5c0:	f003 0301 	and.w	r3, r3, #1
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e5ca:	f7ff ffb7 	bl	800e53c <ProcessRadioRxTimeout>
        }
    }
}
 800e5ce:	bf00      	nop
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	20000da0 	.word	0x20000da0

0800e5dc <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e5dc:	b480      	push	{r7}
 800e5de:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e5e0:	4b08      	ldr	r3, [pc, #32]	; (800e604 <LoRaMacIsBusy+0x28>)
 800e5e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d106      	bne.n	800e5f8 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e5ea:	4b06      	ldr	r3, [pc, #24]	; (800e604 <LoRaMacIsBusy+0x28>)
 800e5ec:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d101      	bne.n	800e5f8 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	e000      	b.n	800e5fa <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e5f8:	2301      	movs	r3, #1
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bc80      	pop	{r7}
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	2000054c 	.word	0x2000054c

0800e608 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e608:	b480      	push	{r7}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	4603      	mov	r3, r0
 800e610:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e612:	4a04      	ldr	r2, [pc, #16]	; (800e624 <LoRaMacEnableRequests+0x1c>)
 800e614:	79fb      	ldrb	r3, [r7, #7]
 800e616:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800e61a:	bf00      	nop
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	bc80      	pop	{r7}
 800e622:	4770      	bx	lr
 800e624:	2000054c 	.word	0x2000054c

0800e628 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e62e:	4b2c      	ldr	r3, [pc, #176]	; (800e6e0 <LoRaMacHandleRequestEvents+0xb8>)
 800e630:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e634:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e636:	4b2a      	ldr	r3, [pc, #168]	; (800e6e0 <LoRaMacHandleRequestEvents+0xb8>)
 800e638:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d14a      	bne.n	800e6d6 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e640:	4b27      	ldr	r3, [pc, #156]	; (800e6e0 <LoRaMacHandleRequestEvents+0xb8>)
 800e642:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e646:	f003 0301 	and.w	r3, r3, #1
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d006      	beq.n	800e65e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e650:	4a23      	ldr	r2, [pc, #140]	; (800e6e0 <LoRaMacHandleRequestEvents+0xb8>)
 800e652:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e656:	f36f 0300 	bfc	r3, #0, #1
 800e65a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e65e:	4b20      	ldr	r3, [pc, #128]	; (800e6e0 <LoRaMacHandleRequestEvents+0xb8>)
 800e660:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e664:	f003 0304 	and.w	r3, r3, #4
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d006      	beq.n	800e67c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e66e:	4a1c      	ldr	r2, [pc, #112]	; (800e6e0 <LoRaMacHandleRequestEvents+0xb8>)
 800e670:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e674:	f36f 0382 	bfc	r3, #2, #1
 800e678:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e67c:	2001      	movs	r0, #1
 800e67e:	f7ff ffc3 	bl	800e608 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e682:	793b      	ldrb	r3, [r7, #4]
 800e684:	f003 0301 	and.w	r3, r3, #1
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d005      	beq.n	800e69a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e68e:	4b14      	ldr	r3, [pc, #80]	; (800e6e0 <LoRaMacHandleRequestEvents+0xb8>)
 800e690:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4813      	ldr	r0, [pc, #76]	; (800e6e4 <LoRaMacHandleRequestEvents+0xbc>)
 800e698:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e69a:	793b      	ldrb	r3, [r7, #4]
 800e69c:	f003 0304 	and.w	r3, r3, #4
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d00e      	beq.n	800e6c4 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e6a6:	4810      	ldr	r0, [pc, #64]	; (800e6e8 <LoRaMacHandleRequestEvents+0xc0>)
 800e6a8:	f004 faca 	bl	8012c40 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e6ac:	f004 fb14 	bl	8012cd8 <LoRaMacConfirmQueueGetCnt>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d006      	beq.n	800e6c4 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e6b6:	4a0a      	ldr	r2, [pc, #40]	; (800e6e0 <LoRaMacHandleRequestEvents+0xb8>)
 800e6b8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e6bc:	f043 0304 	orr.w	r3, r3, #4
 800e6c0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e6c4:	f003 fdfb 	bl	80122be <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e6c8:	4a05      	ldr	r2, [pc, #20]	; (800e6e0 <LoRaMacHandleRequestEvents+0xb8>)
 800e6ca:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e6ce:	f36f 1345 	bfc	r3, #5, #1
 800e6d2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800e6d6:	bf00      	nop
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	2000054c 	.word	0x2000054c
 800e6e4:	20000984 	.word	0x20000984
 800e6e8:	20000998 	.word	0x20000998

0800e6ec <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e6f2:	4b0a      	ldr	r3, [pc, #40]	; (800e71c <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800e6f4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d10a      	bne.n	800e712 <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e700:	1dfb      	adds	r3, r7, #7
 800e702:	4618      	mov	r0, r3
 800e704:	f004 f882 	bl	801280c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800e708:	79fb      	ldrb	r3, [r7, #7]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d001      	beq.n	800e712 <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800e70e:	f000 fc81 	bl	800f014 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800e712:	bf00      	nop
 800e714:	3708      	adds	r7, #8
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	2000054c 	.word	0x2000054c

0800e720 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b088      	sub	sp, #32
 800e724:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e726:	4b25      	ldr	r3, [pc, #148]	; (800e7bc <LoRaMacHandleIndicationEvents+0x9c>)
 800e728:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e72c:	f003 0308 	and.w	r3, r3, #8
 800e730:	b2db      	uxtb	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	d00d      	beq.n	800e752 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e736:	4a21      	ldr	r2, [pc, #132]	; (800e7bc <LoRaMacHandleIndicationEvents+0x9c>)
 800e738:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e73c:	f36f 03c3 	bfc	r3, #3, #1
 800e740:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e744:	4b1d      	ldr	r3, [pc, #116]	; (800e7bc <LoRaMacHandleIndicationEvents+0x9c>)
 800e746:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e74a:	68db      	ldr	r3, [r3, #12]
 800e74c:	491c      	ldr	r1, [pc, #112]	; (800e7c0 <LoRaMacHandleIndicationEvents+0xa0>)
 800e74e:	481d      	ldr	r0, [pc, #116]	; (800e7c4 <LoRaMacHandleIndicationEvents+0xa4>)
 800e750:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800e752:	4b1a      	ldr	r3, [pc, #104]	; (800e7bc <LoRaMacHandleIndicationEvents+0x9c>)
 800e754:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e758:	f003 0310 	and.w	r3, r3, #16
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d012      	beq.n	800e788 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800e762:	2307      	movs	r3, #7
 800e764:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e766:	2300      	movs	r3, #0
 800e768:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800e76a:	4b14      	ldr	r3, [pc, #80]	; (800e7bc <LoRaMacHandleIndicationEvents+0x9c>)
 800e76c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	1d3a      	adds	r2, r7, #4
 800e774:	4912      	ldr	r1, [pc, #72]	; (800e7c0 <LoRaMacHandleIndicationEvents+0xa0>)
 800e776:	4610      	mov	r0, r2
 800e778:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800e77a:	4a10      	ldr	r2, [pc, #64]	; (800e7bc <LoRaMacHandleIndicationEvents+0x9c>)
 800e77c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e780:	f36f 1304 	bfc	r3, #4, #1
 800e784:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e788:	4b0c      	ldr	r3, [pc, #48]	; (800e7bc <LoRaMacHandleIndicationEvents+0x9c>)
 800e78a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e78e:	f003 0302 	and.w	r3, r3, #2
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00d      	beq.n	800e7b4 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e798:	4a08      	ldr	r2, [pc, #32]	; (800e7bc <LoRaMacHandleIndicationEvents+0x9c>)
 800e79a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e79e:	f36f 0341 	bfc	r3, #1, #1
 800e7a2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e7a6:	4b05      	ldr	r3, [pc, #20]	; (800e7bc <LoRaMacHandleIndicationEvents+0x9c>)
 800e7a8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	4904      	ldr	r1, [pc, #16]	; (800e7c0 <LoRaMacHandleIndicationEvents+0xa0>)
 800e7b0:	4805      	ldr	r0, [pc, #20]	; (800e7c8 <LoRaMacHandleIndicationEvents+0xa8>)
 800e7b2:	4798      	blx	r3
    }
}
 800e7b4:	bf00      	nop
 800e7b6:	3720      	adds	r7, #32
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	2000054c 	.word	0x2000054c
 800e7c0:	200009c8 	.word	0x200009c8
 800e7c4:	200009ac 	.word	0x200009ac
 800e7c8:	20000968 	.word	0x20000968

0800e7cc <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e7d2:	4b32      	ldr	r3, [pc, #200]	; (800e89c <LoRaMacHandleMcpsRequest+0xd0>)
 800e7d4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e7d8:	f003 0301 	and.w	r3, r3, #1
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d058      	beq.n	800e894 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e7ea:	4b2c      	ldr	r3, [pc, #176]	; (800e89c <LoRaMacHandleMcpsRequest+0xd0>)
 800e7ec:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d004      	beq.n	800e7fe <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e7f4:	4b29      	ldr	r3, [pc, #164]	; (800e89c <LoRaMacHandleMcpsRequest+0xd0>)
 800e7f6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e7fa:	2b03      	cmp	r3, #3
 800e7fc:	d104      	bne.n	800e808 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e7fe:	f002 f89f 	bl	8010940 <CheckRetransUnconfirmedUplink>
 800e802:	4603      	mov	r3, r0
 800e804:	71fb      	strb	r3, [r7, #7]
 800e806:	e020      	b.n	800e84a <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e808:	4b24      	ldr	r3, [pc, #144]	; (800e89c <LoRaMacHandleMcpsRequest+0xd0>)
 800e80a:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d11b      	bne.n	800e84a <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800e812:	4b22      	ldr	r3, [pc, #136]	; (800e89c <LoRaMacHandleMcpsRequest+0xd0>)
 800e814:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d014      	beq.n	800e846 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e81c:	f002 f8bc 	bl	8010998 <CheckRetransConfirmedUplink>
 800e820:	4603      	mov	r3, r0
 800e822:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e824:	4b1e      	ldr	r3, [pc, #120]	; (800e8a0 <LoRaMacHandleMcpsRequest+0xd4>)
 800e826:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d10d      	bne.n	800e84a <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e82e:	79fb      	ldrb	r3, [r7, #7]
 800e830:	f083 0301 	eor.w	r3, r3, #1
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b00      	cmp	r3, #0
 800e838:	d002      	beq.n	800e840 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e83a:	f002 f929 	bl	8010a90 <AckTimeoutRetriesProcess>
 800e83e:	e004      	b.n	800e84a <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e840:	f002 f964 	bl	8010b0c <AckTimeoutRetriesFinalize>
 800e844:	e001      	b.n	800e84a <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e846:	2301      	movs	r3, #1
 800e848:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800e84a:	79fb      	ldrb	r3, [r7, #7]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00d      	beq.n	800e86c <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e850:	4814      	ldr	r0, [pc, #80]	; (800e8a4 <LoRaMacHandleMcpsRequest+0xd8>)
 800e852:	f00b ff29 	bl	801a6a8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e856:	4b11      	ldr	r3, [pc, #68]	; (800e89c <LoRaMacHandleMcpsRequest+0xd0>)
 800e858:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e85c:	f023 0320 	bic.w	r3, r3, #32
 800e860:	4a0e      	ldr	r2, [pc, #56]	; (800e89c <LoRaMacHandleMcpsRequest+0xd0>)
 800e862:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e866:	f002 f8b9 	bl	80109dc <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e86a:	e013      	b.n	800e894 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e86c:	79bb      	ldrb	r3, [r7, #6]
 800e86e:	f083 0301 	eor.w	r3, r3, #1
 800e872:	b2db      	uxtb	r3, r3
 800e874:	2b00      	cmp	r3, #0
 800e876:	d00d      	beq.n	800e894 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e878:	4a08      	ldr	r2, [pc, #32]	; (800e89c <LoRaMacHandleMcpsRequest+0xd0>)
 800e87a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e87e:	f36f 1345 	bfc	r3, #5, #1
 800e882:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800e886:	4b05      	ldr	r3, [pc, #20]	; (800e89c <LoRaMacHandleMcpsRequest+0xd0>)
 800e888:	2200      	movs	r2, #0
 800e88a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e88e:	2000      	movs	r0, #0
 800e890:	f000 f97e 	bl	800eb90 <OnTxDelayedTimerEvent>
}
 800e894:	bf00      	nop
 800e896:	3708      	adds	r7, #8
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	2000054c 	.word	0x2000054c
 800e8a0:	20000a54 	.word	0x20000a54
 800e8a4:	200008b4 	.word	0x200008b4

0800e8a8 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e8ac:	4b1b      	ldr	r3, [pc, #108]	; (800e91c <LoRaMacHandleMlmeRequest+0x74>)
 800e8ae:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e8b2:	f003 0304 	and.w	r3, r3, #4
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d02c      	beq.n	800e916 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e8bc:	2001      	movs	r0, #1
 800e8be:	f004 f9a5 	bl	8012c0c <LoRaMacConfirmQueueIsCmdActive>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d012      	beq.n	800e8ee <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e8c8:	2001      	movs	r0, #1
 800e8ca:	f004 f941 	bl	8012b50 <LoRaMacConfirmQueueGetStatus>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d103      	bne.n	800e8dc <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e8d4:	4b11      	ldr	r3, [pc, #68]	; (800e91c <LoRaMacHandleMlmeRequest+0x74>)
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e8dc:	4b0f      	ldr	r3, [pc, #60]	; (800e91c <LoRaMacHandleMlmeRequest+0x74>)
 800e8de:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e8e2:	f023 0302 	bic.w	r3, r3, #2
 800e8e6:	4a0d      	ldr	r2, [pc, #52]	; (800e91c <LoRaMacHandleMlmeRequest+0x74>)
 800e8e8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800e8ec:	e013      	b.n	800e916 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e8ee:	2005      	movs	r0, #5
 800e8f0:	f004 f98c 	bl	8012c0c <LoRaMacConfirmQueueIsCmdActive>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d105      	bne.n	800e906 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e8fa:	2006      	movs	r0, #6
 800e8fc:	f004 f986 	bl	8012c0c <LoRaMacConfirmQueueIsCmdActive>
 800e900:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e902:	2b00      	cmp	r3, #0
 800e904:	d007      	beq.n	800e916 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e906:	4b05      	ldr	r3, [pc, #20]	; (800e91c <LoRaMacHandleMlmeRequest+0x74>)
 800e908:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e90c:	f023 0302 	bic.w	r3, r3, #2
 800e910:	4a02      	ldr	r2, [pc, #8]	; (800e91c <LoRaMacHandleMlmeRequest+0x74>)
 800e912:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e916:	bf00      	nop
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	2000054c 	.word	0x2000054c

0800e920 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e924:	200c      	movs	r0, #12
 800e926:	f004 f971 	bl	8012c0c <LoRaMacConfirmQueueIsCmdActive>
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d019      	beq.n	800e964 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e930:	4b0e      	ldr	r3, [pc, #56]	; (800e96c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e932:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e936:	f003 0301 	and.w	r3, r3, #1
 800e93a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d111      	bne.n	800e964 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e940:	4b0a      	ldr	r3, [pc, #40]	; (800e96c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e942:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e946:	f003 0304 	and.w	r3, r3, #4
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d009      	beq.n	800e964 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e950:	4b06      	ldr	r3, [pc, #24]	; (800e96c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e952:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e956:	f023 0302 	bic.w	r3, r3, #2
 800e95a:	4a04      	ldr	r2, [pc, #16]	; (800e96c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e95c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e960:	2301      	movs	r3, #1
 800e962:	e000      	b.n	800e966 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	2000054c 	.word	0x2000054c

0800e970 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800e970:	b480      	push	{r7}
 800e972:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e974:	4b0d      	ldr	r3, [pc, #52]	; (800e9ac <LoRaMacCheckForRxAbort+0x3c>)
 800e976:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e97a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00f      	beq.n	800e9a2 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e982:	4b0a      	ldr	r3, [pc, #40]	; (800e9ac <LoRaMacCheckForRxAbort+0x3c>)
 800e984:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e98c:	4a07      	ldr	r2, [pc, #28]	; (800e9ac <LoRaMacCheckForRxAbort+0x3c>)
 800e98e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e992:	4b06      	ldr	r3, [pc, #24]	; (800e9ac <LoRaMacCheckForRxAbort+0x3c>)
 800e994:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e998:	f023 0302 	bic.w	r3, r3, #2
 800e99c:	4a03      	ldr	r2, [pc, #12]	; (800e9ac <LoRaMacCheckForRxAbort+0x3c>)
 800e99e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e9a2:	bf00      	nop
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bc80      	pop	{r7}
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop
 800e9ac:	2000054c 	.word	0x2000054c

0800e9b0 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e9c0:	4b50      	ldr	r3, [pc, #320]	; (800eb04 <LoRaMacHandleNvm+0x154>)
 800e9c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	f040 8097 	bne.w	800eafa <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2124      	movs	r1, #36	; 0x24
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f007 fecd 	bl	8016770 <Crc32>
 800e9d6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9dc:	68ba      	ldr	r2, [r7, #8]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d006      	beq.n	800e9f0 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	68ba      	ldr	r2, [r7, #8]
 800e9e6:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e9e8:	89fb      	ldrh	r3, [r7, #14]
 800e9ea:	f043 0301 	orr.w	r3, r3, #1
 800e9ee:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	3328      	adds	r3, #40	; 0x28
 800e9f4:	2114      	movs	r1, #20
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f007 feba 	bl	8016770 <Crc32>
 800e9fc:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea02:	68ba      	ldr	r2, [r7, #8]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d006      	beq.n	800ea16 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	68ba      	ldr	r2, [r7, #8]
 800ea0c:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ea0e:	89fb      	ldrh	r3, [r7, #14]
 800ea10:	f043 0302 	orr.w	r3, r3, #2
 800ea14:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	3340      	adds	r3, #64	; 0x40
 800ea1a:	21d4      	movs	r1, #212	; 0xd4
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f007 fea7 	bl	8016770 <Crc32>
 800ea22:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d007      	beq.n	800ea40 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	68ba      	ldr	r2, [r7, #8]
 800ea34:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ea38:	89fb      	ldrh	r3, [r7, #14]
 800ea3a:	f043 0304 	orr.w	r3, r3, #4
 800ea3e:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800ea46:	21bc      	movs	r1, #188	; 0xbc
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f007 fe91 	bl	8016770 <Crc32>
 800ea4e:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800ea56:	68ba      	ldr	r2, [r7, #8]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d007      	beq.n	800ea6c <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ea64:	89fb      	ldrh	r3, [r7, #14]
 800ea66:	f043 0308 	orr.w	r3, r3, #8
 800ea6a:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800ea72:	2190      	movs	r1, #144	; 0x90
 800ea74:	4618      	mov	r0, r3
 800ea76:	f007 fe7b 	bl	8016770 <Crc32>
 800ea7a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ea82:	68ba      	ldr	r2, [r7, #8]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d007      	beq.n	800ea98 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800ea90:	89fb      	ldrh	r3, [r7, #14]
 800ea92:	f043 0310 	orr.w	r3, r3, #16
 800ea96:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800ea9e:	21c4      	movs	r1, #196	; 0xc4
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f007 fe65 	bl	8016770 <Crc32>
 800eaa6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800eaae:	68ba      	ldr	r2, [r7, #8]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d007      	beq.n	800eac4 <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	68ba      	ldr	r2, [r7, #8]
 800eab8:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800eabc:	89fb      	ldrh	r3, [r7, #14]
 800eabe:	f043 0320 	orr.w	r3, r3, #32
 800eac2:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800eaca:	2114      	movs	r1, #20
 800eacc:	4618      	mov	r0, r3
 800eace:	f007 fe4f 	bl	8016770 <Crc32>
 800ead2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d007      	beq.n	800eaf0 <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800eae8:	89fb      	ldrh	r3, [r7, #14]
 800eaea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaee:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800eaf0:	89fb      	ldrh	r3, [r7, #14]
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f001 ffae 	bl	8010a54 <CallNvmDataChangeCallback>
 800eaf8:	e000      	b.n	800eafc <LoRaMacHandleNvm+0x14c>
        return;
 800eafa:	bf00      	nop
}
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	2000054c 	.word	0x2000054c

0800eb08 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800eb12:	f7ff fd1b 	bl	800e54c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800eb16:	f003 fc36 	bl	8012386 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800eb1a:	4b1b      	ldr	r3, [pc, #108]	; (800eb88 <LoRaMacProcess+0x80>)
 800eb1c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800eb20:	f003 0320 	and.w	r3, r3, #32
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d021      	beq.n	800eb6e <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800eb2a:	2000      	movs	r0, #0
 800eb2c:	f7ff fd6c 	bl	800e608 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800eb30:	f7ff ff1e 	bl	800e970 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800eb34:	f002 f81e 	bl	8010b74 <IsRequestPending>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d006      	beq.n	800eb4c <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800eb3e:	f7ff feef 	bl	800e920 <LoRaMacCheckForBeaconAcquisition>
 800eb42:	4603      	mov	r3, r0
 800eb44:	461a      	mov	r2, r3
 800eb46:	79fb      	ldrb	r3, [r7, #7]
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800eb4c:	79fb      	ldrb	r3, [r7, #7]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d103      	bne.n	800eb5a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800eb52:	f7ff fea9 	bl	800e8a8 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800eb56:	f7ff fe39 	bl	800e7cc <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800eb5a:	f7ff fd65 	bl	800e628 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800eb5e:	f7ff fdc5 	bl	800e6ec <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800eb62:	480a      	ldr	r0, [pc, #40]	; (800eb8c <LoRaMacProcess+0x84>)
 800eb64:	f7ff ff24 	bl	800e9b0 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800eb68:	2001      	movs	r0, #1
 800eb6a:	f7ff fd4d 	bl	800e608 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800eb6e:	f7ff fdd7 	bl	800e720 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800eb72:	4b05      	ldr	r3, [pc, #20]	; (800eb88 <LoRaMacProcess+0x80>)
 800eb74:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800eb78:	2b02      	cmp	r3, #2
 800eb7a:	d101      	bne.n	800eb80 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800eb7c:	f001 fb7c 	bl	8010278 <OpenContinuousRxCWindow>
    }
}
 800eb80:	bf00      	nop
 800eb82:	3708      	adds	r7, #8
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	2000054c 	.word	0x2000054c
 800eb8c:	20000a54 	.word	0x20000a54

0800eb90 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800eb98:	4817      	ldr	r0, [pc, #92]	; (800ebf8 <OnTxDelayedTimerEvent+0x68>)
 800eb9a:	f00b fd85 	bl	801a6a8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800eb9e:	4b17      	ldr	r3, [pc, #92]	; (800ebfc <OnTxDelayedTimerEvent+0x6c>)
 800eba0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eba4:	f023 0320 	bic.w	r3, r3, #32
 800eba8:	4a14      	ldr	r2, [pc, #80]	; (800ebfc <OnTxDelayedTimerEvent+0x6c>)
 800ebaa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ebae:	2001      	movs	r0, #1
 800ebb0:	f001 f8fc 	bl	800fdac <ScheduleTx>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d018      	beq.n	800ebec <OnTxDelayedTimerEvent+0x5c>
 800ebba:	2b0b      	cmp	r3, #11
 800ebbc:	d016      	beq.n	800ebec <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ebbe:	4b10      	ldr	r3, [pc, #64]	; (800ec00 <OnTxDelayedTimerEvent+0x70>)
 800ebc0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ebc4:	b2da      	uxtb	r2, r3
 800ebc6:	4b0d      	ldr	r3, [pc, #52]	; (800ebfc <OnTxDelayedTimerEvent+0x6c>)
 800ebc8:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ebcc:	4b0b      	ldr	r3, [pc, #44]	; (800ebfc <OnTxDelayedTimerEvent+0x6c>)
 800ebce:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800ebd2:	4b0a      	ldr	r3, [pc, #40]	; (800ebfc <OnTxDelayedTimerEvent+0x6c>)
 800ebd4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ebd8:	4b08      	ldr	r3, [pc, #32]	; (800ebfc <OnTxDelayedTimerEvent+0x6c>)
 800ebda:	2209      	movs	r2, #9
 800ebdc:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ebe0:	2009      	movs	r0, #9
 800ebe2:	f003 ffdf 	bl	8012ba4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ebe6:	f001 fef9 	bl	80109dc <StopRetransmission>
            break;
 800ebea:	e000      	b.n	800ebee <OnTxDelayedTimerEvent+0x5e>
            break;
 800ebec:	bf00      	nop
        }
    }
}
 800ebee:	bf00      	nop
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	200008b4 	.word	0x200008b4
 800ebfc:	2000054c 	.word	0x2000054c
 800ec00:	20000a54 	.word	0x20000a54

0800ec04 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ec0c:	4b14      	ldr	r3, [pc, #80]	; (800ec60 <OnRxWindow1TimerEvent+0x5c>)
 800ec0e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ec12:	4b13      	ldr	r3, [pc, #76]	; (800ec60 <OnRxWindow1TimerEvent+0x5c>)
 800ec14:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ec18:	4b12      	ldr	r3, [pc, #72]	; (800ec64 <OnRxWindow1TimerEvent+0x60>)
 800ec1a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ec1e:	b25a      	sxtb	r2, r3
 800ec20:	4b0f      	ldr	r3, [pc, #60]	; (800ec60 <OnRxWindow1TimerEvent+0x5c>)
 800ec22:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec26:	4b0f      	ldr	r3, [pc, #60]	; (800ec64 <OnRxWindow1TimerEvent+0x60>)
 800ec28:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ec2c:	4b0c      	ldr	r3, [pc, #48]	; (800ec60 <OnRxWindow1TimerEvent+0x5c>)
 800ec2e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ec32:	4b0c      	ldr	r3, [pc, #48]	; (800ec64 <OnRxWindow1TimerEvent+0x60>)
 800ec34:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ec38:	4b09      	ldr	r3, [pc, #36]	; (800ec60 <OnRxWindow1TimerEvent+0x5c>)
 800ec3a:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ec3e:	4b08      	ldr	r3, [pc, #32]	; (800ec60 <OnRxWindow1TimerEvent+0x5c>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ec46:	4b06      	ldr	r3, [pc, #24]	; (800ec60 <OnRxWindow1TimerEvent+0x5c>)
 800ec48:	2200      	movs	r2, #0
 800ec4a:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ec4e:	4906      	ldr	r1, [pc, #24]	; (800ec68 <OnRxWindow1TimerEvent+0x64>)
 800ec50:	4806      	ldr	r0, [pc, #24]	; (800ec6c <OnRxWindow1TimerEvent+0x68>)
 800ec52:	f001 fae3 	bl	801021c <RxWindowSetup>
}
 800ec56:	bf00      	nop
 800ec58:	3708      	adds	r7, #8
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	2000054c 	.word	0x2000054c
 800ec64:	20000a54 	.word	0x20000a54
 800ec68:	20000904 	.word	0x20000904
 800ec6c:	200008cc 	.word	0x200008cc

0800ec70 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ec78:	4b16      	ldr	r3, [pc, #88]	; (800ecd4 <OnRxWindow2TimerEvent+0x64>)
 800ec7a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d023      	beq.n	800ecca <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ec82:	4b14      	ldr	r3, [pc, #80]	; (800ecd4 <OnRxWindow2TimerEvent+0x64>)
 800ec84:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ec88:	4b12      	ldr	r3, [pc, #72]	; (800ecd4 <OnRxWindow2TimerEvent+0x64>)
 800ec8a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ec8e:	4b12      	ldr	r3, [pc, #72]	; (800ecd8 <OnRxWindow2TimerEvent+0x68>)
 800ec90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec92:	4a10      	ldr	r2, [pc, #64]	; (800ecd4 <OnRxWindow2TimerEvent+0x64>)
 800ec94:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec98:	4b0f      	ldr	r3, [pc, #60]	; (800ecd8 <OnRxWindow2TimerEvent+0x68>)
 800ec9a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ec9e:	4b0d      	ldr	r3, [pc, #52]	; (800ecd4 <OnRxWindow2TimerEvent+0x64>)
 800eca0:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eca4:	4b0c      	ldr	r3, [pc, #48]	; (800ecd8 <OnRxWindow2TimerEvent+0x68>)
 800eca6:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ecaa:	4b0a      	ldr	r3, [pc, #40]	; (800ecd4 <OnRxWindow2TimerEvent+0x64>)
 800ecac:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ecb0:	4b08      	ldr	r3, [pc, #32]	; (800ecd4 <OnRxWindow2TimerEvent+0x64>)
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ecb8:	4b06      	ldr	r3, [pc, #24]	; (800ecd4 <OnRxWindow2TimerEvent+0x64>)
 800ecba:	2201      	movs	r2, #1
 800ecbc:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ecc0:	4906      	ldr	r1, [pc, #24]	; (800ecdc <OnRxWindow2TimerEvent+0x6c>)
 800ecc2:	4807      	ldr	r0, [pc, #28]	; (800ece0 <OnRxWindow2TimerEvent+0x70>)
 800ecc4:	f001 faaa 	bl	801021c <RxWindowSetup>
 800ecc8:	e000      	b.n	800eccc <OnRxWindow2TimerEvent+0x5c>
        return;
 800ecca:	bf00      	nop
}
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	2000054c 	.word	0x2000054c
 800ecd8:	20000a54 	.word	0x20000a54
 800ecdc:	20000918 	.word	0x20000918
 800ece0:	200008e4 	.word	0x200008e4

0800ece4 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ecec:	4815      	ldr	r0, [pc, #84]	; (800ed44 <OnAckTimeoutTimerEvent+0x60>)
 800ecee:	f00b fcdb 	bl	801a6a8 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800ecf2:	4b15      	ldr	r3, [pc, #84]	; (800ed48 <OnAckTimeoutTimerEvent+0x64>)
 800ecf4:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d003      	beq.n	800ed04 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800ecfc:	4b12      	ldr	r3, [pc, #72]	; (800ed48 <OnAckTimeoutTimerEvent+0x64>)
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ed04:	4b11      	ldr	r3, [pc, #68]	; (800ed4c <OnAckTimeoutTimerEvent+0x68>)
 800ed06:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ed0a:	2b02      	cmp	r3, #2
 800ed0c:	d106      	bne.n	800ed1c <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ed0e:	4a0e      	ldr	r2, [pc, #56]	; (800ed48 <OnAckTimeoutTimerEvent+0x64>)
 800ed10:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ed14:	f043 0320 	orr.w	r3, r3, #32
 800ed18:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ed1c:	4b0a      	ldr	r3, [pc, #40]	; (800ed48 <OnAckTimeoutTimerEvent+0x64>)
 800ed1e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00a      	beq.n	800ed3c <OnAckTimeoutTimerEvent+0x58>
 800ed26:	4b08      	ldr	r3, [pc, #32]	; (800ed48 <OnAckTimeoutTimerEvent+0x64>)
 800ed28:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed2c:	691b      	ldr	r3, [r3, #16]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d004      	beq.n	800ed3c <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ed32:	4b05      	ldr	r3, [pc, #20]	; (800ed48 <OnAckTimeoutTimerEvent+0x64>)
 800ed34:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed38:	691b      	ldr	r3, [r3, #16]
 800ed3a:	4798      	blx	r3
    }
}
 800ed3c:	bf00      	nop
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	20000944 	.word	0x20000944
 800ed48:	2000054c 	.word	0x2000054c
 800ed4c:	20000a54 	.word	0x20000a54

0800ed50 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60ba      	str	r2, [r7, #8]
 800ed58:	607b      	str	r3, [r7, #4]
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	73fb      	strb	r3, [r7, #15]
 800ed5e:	460b      	mov	r3, r1
 800ed60:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d005      	beq.n	800ed74 <GetFCntDown+0x24>
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d002      	beq.n	800ed74 <GetFCntDown+0x24>
 800ed6e:	6a3b      	ldr	r3, [r7, #32]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d101      	bne.n	800ed78 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ed74:	230a      	movs	r3, #10
 800ed76:	e029      	b.n	800edcc <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ed78:	7bfb      	ldrb	r3, [r7, #15]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d016      	beq.n	800edac <GetFCntDown+0x5c>
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d118      	bne.n	800edb4 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800ed82:	79bb      	ldrb	r3, [r7, #6]
 800ed84:	2b01      	cmp	r3, #1
 800ed86:	d10d      	bne.n	800eda4 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ed88:	7bbb      	ldrb	r3, [r7, #14]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d002      	beq.n	800ed94 <GetFCntDown+0x44>
 800ed8e:	7bbb      	ldrb	r3, [r7, #14]
 800ed90:	2b03      	cmp	r3, #3
 800ed92:	d103      	bne.n	800ed9c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800ed94:	69fb      	ldr	r3, [r7, #28]
 800ed96:	2202      	movs	r2, #2
 800ed98:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800ed9a:	e00d      	b.n	800edb8 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	2201      	movs	r2, #1
 800eda0:	701a      	strb	r2, [r3, #0]
            break;
 800eda2:	e009      	b.n	800edb8 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	2203      	movs	r2, #3
 800eda8:	701a      	strb	r2, [r3, #0]
            break;
 800edaa:	e005      	b.n	800edb8 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	2204      	movs	r2, #4
 800edb0:	701a      	strb	r2, [r3, #0]
            break;
 800edb2:	e001      	b.n	800edb8 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800edb4:	2305      	movs	r3, #5
 800edb6:	e009      	b.n	800edcc <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	7818      	ldrb	r0, [r3, #0]
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	89db      	ldrh	r3, [r3, #14]
 800edc0:	461a      	mov	r2, r3
 800edc2:	8b39      	ldrh	r1, [r7, #24]
 800edc4:	6a3b      	ldr	r3, [r7, #32]
 800edc6:	f004 faf1 	bl	80133ac <LoRaMacCryptoGetFCntDown>
 800edca:	4603      	mov	r3, r0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3710      	adds	r7, #16
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800edd4:	b5b0      	push	{r4, r5, r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	4603      	mov	r3, r0
 800eddc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800edde:	2303      	movs	r3, #3
 800ede0:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800ede2:	4b61      	ldr	r3, [pc, #388]	; (800ef68 <SwitchClass+0x194>)
 800ede4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ede8:	2b02      	cmp	r3, #2
 800edea:	f000 80a5 	beq.w	800ef38 <SwitchClass+0x164>
 800edee:	2b02      	cmp	r3, #2
 800edf0:	f300 80b4 	bgt.w	800ef5c <SwitchClass+0x188>
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d003      	beq.n	800ee00 <SwitchClass+0x2c>
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	f000 808f 	beq.w	800ef1c <SwitchClass+0x148>
 800edfe:	e0ad      	b.n	800ef5c <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ee00:	79fb      	ldrb	r3, [r7, #7]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d107      	bne.n	800ee16 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ee06:	4b58      	ldr	r3, [pc, #352]	; (800ef68 <SwitchClass+0x194>)
 800ee08:	4a57      	ldr	r2, [pc, #348]	; (800ef68 <SwitchClass+0x194>)
 800ee0a:	336c      	adds	r3, #108	; 0x6c
 800ee0c:	3264      	adds	r2, #100	; 0x64
 800ee0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee12:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800ee16:	79fb      	ldrb	r3, [r7, #7]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d10c      	bne.n	800ee36 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ee1c:	79fb      	ldrb	r3, [r7, #7]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f003 fa53 	bl	80122ca <LoRaMacClassBSwitchClass>
 800ee24:	4603      	mov	r3, r0
 800ee26:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ee28:	7bfb      	ldrb	r3, [r7, #15]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d103      	bne.n	800ee36 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee2e:	4a4e      	ldr	r2, [pc, #312]	; (800ef68 <SwitchClass+0x194>)
 800ee30:	79fb      	ldrb	r3, [r7, #7]
 800ee32:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800ee36:	79fb      	ldrb	r3, [r7, #7]
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	f040 808a 	bne.w	800ef52 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee3e:	4a4a      	ldr	r2, [pc, #296]	; (800ef68 <SwitchClass+0x194>)
 800ee40:	79fb      	ldrb	r3, [r7, #7]
 800ee42:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ee46:	4a49      	ldr	r2, [pc, #292]	; (800ef6c <SwitchClass+0x198>)
 800ee48:	4b48      	ldr	r3, [pc, #288]	; (800ef6c <SwitchClass+0x198>)
 800ee4a:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800ee4e:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800ee52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee56:	682b      	ldr	r3, [r5, #0]
 800ee58:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ee5a:	4b44      	ldr	r3, [pc, #272]	; (800ef6c <SwitchClass+0x198>)
 800ee5c:	2202      	movs	r2, #2
 800ee5e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee62:	2300      	movs	r3, #0
 800ee64:	73bb      	strb	r3, [r7, #14]
 800ee66:	e049      	b.n	800eefc <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ee68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee6c:	4a3e      	ldr	r2, [pc, #248]	; (800ef68 <SwitchClass+0x194>)
 800ee6e:	212c      	movs	r1, #44	; 0x2c
 800ee70:	fb01 f303 	mul.w	r3, r1, r3
 800ee74:	4413      	add	r3, r2
 800ee76:	33d2      	adds	r3, #210	; 0xd2
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d038      	beq.n	800eef0 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ee7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee82:	4a39      	ldr	r2, [pc, #228]	; (800ef68 <SwitchClass+0x194>)
 800ee84:	212c      	movs	r1, #44	; 0x2c
 800ee86:	fb01 f303 	mul.w	r3, r1, r3
 800ee8a:	4413      	add	r3, r2
 800ee8c:	33e8      	adds	r3, #232	; 0xe8
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a35      	ldr	r2, [pc, #212]	; (800ef68 <SwitchClass+0x194>)
 800ee92:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800ee94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee98:	4a33      	ldr	r2, [pc, #204]	; (800ef68 <SwitchClass+0x194>)
 800ee9a:	212c      	movs	r1, #44	; 0x2c
 800ee9c:	fb01 f303 	mul.w	r3, r1, r3
 800eea0:	4413      	add	r3, r2
 800eea2:	33ec      	adds	r3, #236	; 0xec
 800eea4:	f993 3000 	ldrsb.w	r3, [r3]
 800eea8:	b2da      	uxtb	r2, r3
 800eeaa:	4b2f      	ldr	r3, [pc, #188]	; (800ef68 <SwitchClass+0x194>)
 800eeac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800eeb0:	4b2e      	ldr	r3, [pc, #184]	; (800ef6c <SwitchClass+0x198>)
 800eeb2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800eeb6:	4b2d      	ldr	r3, [pc, #180]	; (800ef6c <SwitchClass+0x198>)
 800eeb8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800eebc:	4b2a      	ldr	r3, [pc, #168]	; (800ef68 <SwitchClass+0x194>)
 800eebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eec0:	4a2a      	ldr	r2, [pc, #168]	; (800ef6c <SwitchClass+0x198>)
 800eec2:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eec6:	4b28      	ldr	r3, [pc, #160]	; (800ef68 <SwitchClass+0x194>)
 800eec8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800eecc:	4b27      	ldr	r3, [pc, #156]	; (800ef6c <SwitchClass+0x198>)
 800eece:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eed2:	4b25      	ldr	r3, [pc, #148]	; (800ef68 <SwitchClass+0x194>)
 800eed4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800eed8:	4b24      	ldr	r3, [pc, #144]	; (800ef6c <SwitchClass+0x198>)
 800eeda:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800eede:	4b23      	ldr	r3, [pc, #140]	; (800ef6c <SwitchClass+0x198>)
 800eee0:	2203      	movs	r2, #3
 800eee2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800eee6:	4b21      	ldr	r3, [pc, #132]	; (800ef6c <SwitchClass+0x198>)
 800eee8:	2201      	movs	r2, #1
 800eeea:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800eeee:	e009      	b.n	800ef04 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	3301      	adds	r3, #1
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	73bb      	strb	r3, [r7, #14]
 800eefc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	ddb1      	ble.n	800ee68 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ef04:	4b19      	ldr	r3, [pc, #100]	; (800ef6c <SwitchClass+0x198>)
 800ef06:	2200      	movs	r2, #0
 800ef08:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ef0c:	4b18      	ldr	r3, [pc, #96]	; (800ef70 <SwitchClass+0x19c>)
 800ef0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef10:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ef12:	f001 f9b1 	bl	8010278 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ef16:	2300      	movs	r3, #0
 800ef18:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ef1a:	e01a      	b.n	800ef52 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ef1c:	79fb      	ldrb	r3, [r7, #7]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f003 f9d3 	bl	80122ca <LoRaMacClassBSwitchClass>
 800ef24:	4603      	mov	r3, r0
 800ef26:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ef28:	7bfb      	ldrb	r3, [r7, #15]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d113      	bne.n	800ef56 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef2e:	4a0e      	ldr	r2, [pc, #56]	; (800ef68 <SwitchClass+0x194>)
 800ef30:	79fb      	ldrb	r3, [r7, #7]
 800ef32:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800ef36:	e00e      	b.n	800ef56 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ef38:	79fb      	ldrb	r3, [r7, #7]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d10d      	bne.n	800ef5a <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef3e:	4a0a      	ldr	r2, [pc, #40]	; (800ef68 <SwitchClass+0x194>)
 800ef40:	79fb      	ldrb	r3, [r7, #7]
 800ef42:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ef46:	4b0a      	ldr	r3, [pc, #40]	; (800ef70 <SwitchClass+0x19c>)
 800ef48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef4a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ef50:	e003      	b.n	800ef5a <SwitchClass+0x186>
            break;
 800ef52:	bf00      	nop
 800ef54:	e002      	b.n	800ef5c <SwitchClass+0x188>
            break;
 800ef56:	bf00      	nop
 800ef58:	e000      	b.n	800ef5c <SwitchClass+0x188>
            break;
 800ef5a:	bf00      	nop
        }
    }

    return status;
 800ef5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3710      	adds	r7, #16
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bdb0      	pop	{r4, r5, r7, pc}
 800ef66:	bf00      	nop
 800ef68:	20000a54 	.word	0x20000a54
 800ef6c:	2000054c 	.word	0x2000054c
 800ef70:	0801bed4 	.word	0x0801bed4

0800ef74 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b086      	sub	sp, #24
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ef7e:	4b10      	ldr	r3, [pc, #64]	; (800efc0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ef80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ef84:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ef86:	79fb      	ldrb	r3, [r7, #7]
 800ef88:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ef8a:	230d      	movs	r3, #13
 800ef8c:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ef8e:	4b0c      	ldr	r3, [pc, #48]	; (800efc0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ef90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d001      	beq.n	800ef9c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ef98:	230e      	movs	r3, #14
 800ef9a:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ef9c:	4b08      	ldr	r3, [pc, #32]	; (800efc0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ef9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efa2:	f107 0210 	add.w	r2, r7, #16
 800efa6:	4611      	mov	r1, r2
 800efa8:	4618      	mov	r0, r3
 800efaa:	f005 f881 	bl	80140b0 <RegionGetPhyParam>
 800efae:	4603      	mov	r3, r0
 800efb0:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	b2db      	uxtb	r3, r3
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3718      	adds	r7, #24
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	20000a54 	.word	0x20000a54

0800efc4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b084      	sub	sp, #16
 800efc8:	af00      	add	r7, sp, #0
 800efca:	4603      	mov	r3, r0
 800efcc:	71fb      	strb	r3, [r7, #7]
 800efce:	460b      	mov	r3, r1
 800efd0:	71bb      	strb	r3, [r7, #6]
 800efd2:	4613      	mov	r3, r2
 800efd4:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800efd6:	2300      	movs	r3, #0
 800efd8:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800efda:	2300      	movs	r3, #0
 800efdc:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800efde:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7ff ffc6 	bl	800ef74 <GetMaxAppPayloadWithoutFOptsLength>
 800efe8:	4603      	mov	r3, r0
 800efea:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800efec:	79fb      	ldrb	r3, [r7, #7]
 800efee:	b29a      	uxth	r2, r3
 800eff0:	797b      	ldrb	r3, [r7, #5]
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	4413      	add	r3, r2
 800eff6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800eff8:	89ba      	ldrh	r2, [r7, #12]
 800effa:	89fb      	ldrh	r3, [r7, #14]
 800effc:	429a      	cmp	r2, r3
 800effe:	d804      	bhi.n	800f00a <ValidatePayloadLength+0x46>
 800f000:	89bb      	ldrh	r3, [r7, #12]
 800f002:	2bff      	cmp	r3, #255	; 0xff
 800f004:	d801      	bhi.n	800f00a <ValidatePayloadLength+0x46>
    {
        return true;
 800f006:	2301      	movs	r3, #1
 800f008:	e000      	b.n	800f00c <ValidatePayloadLength+0x48>
    }
    return false;
 800f00a:	2300      	movs	r3, #0
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800f014:	b480      	push	{r7}
 800f016:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800f018:	4a05      	ldr	r2, [pc, #20]	; (800f030 <SetMlmeScheduleUplinkIndication+0x1c>)
 800f01a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f01e:	f043 0310 	orr.w	r3, r3, #16
 800f022:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800f026:	bf00      	nop
 800f028:	46bd      	mov	sp, r7
 800f02a:	bc80      	pop	{r7}
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop
 800f030:	2000054c 	.word	0x2000054c

0800f034 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f034:	b590      	push	{r4, r7, lr}
 800f036:	b0a5      	sub	sp, #148	; 0x94
 800f038:	af02      	add	r7, sp, #8
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	4608      	mov	r0, r1
 800f03e:	4611      	mov	r1, r2
 800f040:	461a      	mov	r2, r3
 800f042:	4603      	mov	r3, r0
 800f044:	70fb      	strb	r3, [r7, #3]
 800f046:	460b      	mov	r3, r1
 800f048:	70bb      	strb	r3, [r7, #2]
 800f04a:	4613      	mov	r3, r2
 800f04c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f04e:	2300      	movs	r3, #0
 800f050:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800f054:	2300      	movs	r3, #0
 800f056:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f05a:	2300      	movs	r3, #0
 800f05c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800f060:	f000 bc73 	b.w	800f94a <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f064:	78fb      	ldrb	r3, [r7, #3]
 800f066:	687a      	ldr	r2, [r7, #4]
 800f068:	4413      	add	r3, r2
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	4618      	mov	r0, r3
 800f06e:	f003 fbf5 	bl	801285c <LoRaMacCommandsGetCmdSize>
 800f072:	4603      	mov	r3, r0
 800f074:	461a      	mov	r2, r3
 800f076:	78fb      	ldrb	r3, [r7, #3]
 800f078:	441a      	add	r2, r3
 800f07a:	78bb      	ldrb	r3, [r7, #2]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	f300 846a 	bgt.w	800f956 <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f082:	78fb      	ldrb	r3, [r7, #3]
 800f084:	1c5a      	adds	r2, r3, #1
 800f086:	70fa      	strb	r2, [r7, #3]
 800f088:	461a      	mov	r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4413      	add	r3, r2
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	3b02      	subs	r3, #2
 800f092:	2b11      	cmp	r3, #17
 800f094:	f200 8461 	bhi.w	800f95a <ProcessMacCommands+0x926>
 800f098:	a201      	add	r2, pc, #4	; (adr r2, 800f0a0 <ProcessMacCommands+0x6c>)
 800f09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f09e:	bf00      	nop
 800f0a0:	0800f0e9 	.word	0x0800f0e9
 800f0a4:	0800f12b 	.word	0x0800f12b
 800f0a8:	0800f247 	.word	0x0800f247
 800f0ac:	0800f285 	.word	0x0800f285
 800f0b0:	0800f375 	.word	0x0800f375
 800f0b4:	0800f3d1 	.word	0x0800f3d1
 800f0b8:	0800f48d 	.word	0x0800f48d
 800f0bc:	0800f4e7 	.word	0x0800f4e7
 800f0c0:	0800f5cb 	.word	0x0800f5cb
 800f0c4:	0800f95b 	.word	0x0800f95b
 800f0c8:	0800f95b 	.word	0x0800f95b
 800f0cc:	0800f675 	.word	0x0800f675
 800f0d0:	0800f95b 	.word	0x0800f95b
 800f0d4:	0800f95b 	.word	0x0800f95b
 800f0d8:	0800f78b 	.word	0x0800f78b
 800f0dc:	0800f7bf 	.word	0x0800f7bf
 800f0e0:	0800f84f 	.word	0x0800f84f
 800f0e4:	0800f8c5 	.word	0x0800f8c5
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f0e8:	2004      	movs	r0, #4
 800f0ea:	f003 fd8f 	bl	8012c0c <LoRaMacConfirmQueueIsCmdActive>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f000 842a 	beq.w	800f94a <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f0f6:	2104      	movs	r1, #4
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	f003 fcfb 	bl	8012af4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f0fe:	78fb      	ldrb	r3, [r7, #3]
 800f100:	1c5a      	adds	r2, r3, #1
 800f102:	70fa      	strb	r2, [r7, #3]
 800f104:	461a      	mov	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4413      	add	r3, r2
 800f10a:	781a      	ldrb	r2, [r3, #0]
 800f10c:	4bad      	ldr	r3, [pc, #692]	; (800f3c4 <ProcessMacCommands+0x390>)
 800f10e:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f112:	78fb      	ldrb	r3, [r7, #3]
 800f114:	1c5a      	adds	r2, r3, #1
 800f116:	70fa      	strb	r2, [r7, #3]
 800f118:	461a      	mov	r2, r3
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4413      	add	r3, r2
 800f11e:	781a      	ldrb	r2, [r3, #0]
 800f120:	4ba8      	ldr	r3, [pc, #672]	; (800f3c4 <ProcessMacCommands+0x390>)
 800f122:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800f126:	f000 bc10 	b.w	800f94a <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f12a:	2300      	movs	r3, #0
 800f12c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f130:	2300      	movs	r3, #0
 800f132:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800f136:	2300      	movs	r3, #0
 800f138:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800f142:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f146:	f083 0301 	eor.w	r3, r3, #1
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d078      	beq.n	800f242 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800f150:	2301      	movs	r3, #1
 800f152:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800f156:	78fb      	ldrb	r3, [r7, #3]
 800f158:	3b01      	subs	r3, #1
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	4413      	add	r3, r2
 800f15e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f160:	78ba      	ldrb	r2, [r7, #2]
 800f162:	78fb      	ldrb	r3, [r7, #3]
 800f164:	1ad3      	subs	r3, r2, r3
 800f166:	b2db      	uxtb	r3, r3
 800f168:	3301      	adds	r3, #1
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f170:	4b95      	ldr	r3, [pc, #596]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f172:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f176:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f17a:	4b93      	ldr	r3, [pc, #588]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f17c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f180:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f184:	4b90      	ldr	r3, [pc, #576]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f186:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f18a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f18e:	4b8e      	ldr	r3, [pc, #568]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f190:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f194:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f198:	4b8b      	ldr	r3, [pc, #556]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f19a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f19e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f1a2:	4b89      	ldr	r3, [pc, #548]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f1a4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f1a8:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f1aa:	4b87      	ldr	r3, [pc, #540]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f1ac:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f1b0:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800f1b4:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800f1b8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f1bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f1c0:	9301      	str	r3, [sp, #4]
 800f1c2:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800f1c6:	9300      	str	r3, [sp, #0]
 800f1c8:	4623      	mov	r3, r4
 800f1ca:	f005 f82f 	bl	801422c <RegionLinkAdrReq>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800f1d4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f1d8:	f003 0307 	and.w	r3, r3, #7
 800f1dc:	2b07      	cmp	r3, #7
 800f1de:	d10e      	bne.n	800f1fe <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f1e0:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800f1e4:	4b78      	ldr	r3, [pc, #480]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f1e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f1ea:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800f1ee:	4b76      	ldr	r3, [pc, #472]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f1f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f1f4:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800f1f8:	4b73      	ldr	r3, [pc, #460]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f1fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f1fe:	2300      	movs	r3, #0
 800f200:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f204:	e00b      	b.n	800f21e <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f206:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800f20a:	2201      	movs	r2, #1
 800f20c:	4619      	mov	r1, r3
 800f20e:	2003      	movs	r0, #3
 800f210:	f003 f9d4 	bl	80125bc <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f214:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800f218:	3301      	adds	r3, #1
 800f21a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f21e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f222:	4a6a      	ldr	r2, [pc, #424]	; (800f3cc <ProcessMacCommands+0x398>)
 800f224:	fba2 2303 	umull	r2, r3, r2, r3
 800f228:	089b      	lsrs	r3, r3, #2
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800f230:	429a      	cmp	r2, r3
 800f232:	d3e8      	bcc.n	800f206 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800f234:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f238:	78fb      	ldrb	r3, [r7, #3]
 800f23a:	4413      	add	r3, r2
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	3b01      	subs	r3, #1
 800f240:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800f242:	bf00      	nop
 800f244:	e381      	b.n	800f94a <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f246:	78fb      	ldrb	r3, [r7, #3]
 800f248:	1c5a      	adds	r2, r3, #1
 800f24a:	70fa      	strb	r2, [r7, #3]
 800f24c:	461a      	mov	r2, r3
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4413      	add	r3, r2
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	f003 030f 	and.w	r3, r3, #15
 800f258:	b2da      	uxtb	r2, r3
 800f25a:	4b5b      	ldr	r3, [pc, #364]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f25c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f260:	4b59      	ldr	r3, [pc, #356]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f262:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f266:	461a      	mov	r2, r3
 800f268:	2301      	movs	r3, #1
 800f26a:	4093      	lsls	r3, r2
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	4b56      	ldr	r3, [pc, #344]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f270:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f274:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f278:	2200      	movs	r2, #0
 800f27a:	4619      	mov	r1, r3
 800f27c:	2004      	movs	r0, #4
 800f27e:	f003 f99d 	bl	80125bc <LoRaMacCommandsAddCmd>
                break;
 800f282:	e362      	b.n	800f94a <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f284:	2307      	movs	r3, #7
 800f286:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f28a:	78fb      	ldrb	r3, [r7, #3]
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	4413      	add	r3, r2
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	091b      	lsrs	r3, r3, #4
 800f294:	b2db      	uxtb	r3, r3
 800f296:	b25b      	sxtb	r3, r3
 800f298:	f003 0307 	and.w	r3, r3, #7
 800f29c:	b25b      	sxtb	r3, r3
 800f29e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f2a2:	78fb      	ldrb	r3, [r7, #3]
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	4413      	add	r3, r2
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	b25b      	sxtb	r3, r3
 800f2ac:	f003 030f 	and.w	r3, r3, #15
 800f2b0:	b25b      	sxtb	r3, r3
 800f2b2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f2b6:	78fb      	ldrb	r3, [r7, #3]
 800f2b8:	3301      	adds	r3, #1
 800f2ba:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f2bc:	78fb      	ldrb	r3, [r7, #3]
 800f2be:	1c5a      	adds	r2, r3, #1
 800f2c0:	70fa      	strb	r2, [r7, #3]
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f2cc:	78fb      	ldrb	r3, [r7, #3]
 800f2ce:	1c5a      	adds	r2, r3, #1
 800f2d0:	70fa      	strb	r2, [r7, #3]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	021a      	lsls	r2, r3, #8
 800f2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f2e2:	78fb      	ldrb	r3, [r7, #3]
 800f2e4:	1c5a      	adds	r2, r3, #1
 800f2e6:	70fa      	strb	r2, [r7, #3]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	041a      	lsls	r2, r3, #16
 800f2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2fa:	2264      	movs	r2, #100	; 0x64
 800f2fc:	fb02 f303 	mul.w	r3, r2, r3
 800f300:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f302:	4b31      	ldr	r3, [pc, #196]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f308:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f30c:	4611      	mov	r1, r2
 800f30e:	4618      	mov	r0, r3
 800f310:	f004 ffa6 	bl	8014260 <RegionRxParamSetupReq>
 800f314:	4603      	mov	r3, r0
 800f316:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f31a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f31e:	f003 0307 	and.w	r3, r3, #7
 800f322:	2b07      	cmp	r3, #7
 800f324:	d117      	bne.n	800f356 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f326:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f32a:	b2da      	uxtb	r2, r3
 800f32c:	4b26      	ldr	r3, [pc, #152]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f32e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f332:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f336:	b2da      	uxtb	r2, r3
 800f338:	4b23      	ldr	r3, [pc, #140]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f33a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f33e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f340:	4a21      	ldr	r2, [pc, #132]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f342:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f346:	4a20      	ldr	r2, [pc, #128]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f348:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f34a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f34e:	b2da      	uxtb	r2, r3
 800f350:	4b1d      	ldr	r3, [pc, #116]	; (800f3c8 <ProcessMacCommands+0x394>)
 800f352:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f356:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f35a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f35e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f362:	2201      	movs	r2, #1
 800f364:	4619      	mov	r1, r3
 800f366:	2005      	movs	r0, #5
 800f368:	f003 f928 	bl	80125bc <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f36c:	f7ff fe52 	bl	800f014 <SetMlmeScheduleUplinkIndication>
                break;
 800f370:	bf00      	nop
 800f372:	e2ea      	b.n	800f94a <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f374:	23ff      	movs	r3, #255	; 0xff
 800f376:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f37a:	4b12      	ldr	r3, [pc, #72]	; (800f3c4 <ProcessMacCommands+0x390>)
 800f37c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00d      	beq.n	800f3a0 <ProcessMacCommands+0x36c>
 800f384:	4b0f      	ldr	r3, [pc, #60]	; (800f3c4 <ProcessMacCommands+0x390>)
 800f386:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d007      	beq.n	800f3a0 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f390:	4b0c      	ldr	r3, [pc, #48]	; (800f3c4 <ProcessMacCommands+0x390>)
 800f392:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4798      	blx	r3
 800f39a:	4603      	mov	r3, r0
 800f39c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f3a0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f3a4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f3a8:	787b      	ldrb	r3, [r7, #1]
 800f3aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f3b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f3b8:	2202      	movs	r2, #2
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	2006      	movs	r0, #6
 800f3be:	f003 f8fd 	bl	80125bc <LoRaMacCommandsAddCmd>
                break;
 800f3c2:	e2c2      	b.n	800f94a <ProcessMacCommands+0x916>
 800f3c4:	2000054c 	.word	0x2000054c
 800f3c8:	20000a54 	.word	0x20000a54
 800f3cc:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f3d0:	2303      	movs	r3, #3
 800f3d2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f3d6:	78fb      	ldrb	r3, [r7, #3]
 800f3d8:	1c5a      	adds	r2, r3, #1
 800f3da:	70fa      	strb	r2, [r7, #3]
 800f3dc:	461a      	mov	r2, r3
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	b25b      	sxtb	r3, r3
 800f3e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f3ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f3ee:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f3f0:	78fb      	ldrb	r3, [r7, #3]
 800f3f2:	1c5a      	adds	r2, r3, #1
 800f3f4:	70fa      	strb	r2, [r7, #3]
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4413      	add	r3, r2
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f400:	78fb      	ldrb	r3, [r7, #3]
 800f402:	1c5a      	adds	r2, r3, #1
 800f404:	70fa      	strb	r2, [r7, #3]
 800f406:	461a      	mov	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4413      	add	r3, r2
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	021a      	lsls	r2, r3, #8
 800f410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f412:	4313      	orrs	r3, r2
 800f414:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f416:	78fb      	ldrb	r3, [r7, #3]
 800f418:	1c5a      	adds	r2, r3, #1
 800f41a:	70fa      	strb	r2, [r7, #3]
 800f41c:	461a      	mov	r2, r3
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4413      	add	r3, r2
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	041a      	lsls	r2, r3, #16
 800f426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f428:	4313      	orrs	r3, r2
 800f42a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42e:	2264      	movs	r2, #100	; 0x64
 800f430:	fb02 f303 	mul.w	r3, r2, r3
 800f434:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f436:	2300      	movs	r3, #0
 800f438:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f43a:	78fb      	ldrb	r3, [r7, #3]
 800f43c:	1c5a      	adds	r2, r3, #1
 800f43e:	70fa      	strb	r2, [r7, #3]
 800f440:	461a      	mov	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	4413      	add	r3, r2
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	b25b      	sxtb	r3, r3
 800f44a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f44e:	4b87      	ldr	r3, [pc, #540]	; (800f66c <ProcessMacCommands+0x638>)
 800f450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f454:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f458:	4611      	mov	r1, r2
 800f45a:	4618      	mov	r0, r3
 800f45c:	f004 ff13 	bl	8014286 <RegionNewChannelReq>
 800f460:	4603      	mov	r3, r0
 800f462:	b2db      	uxtb	r3, r3
 800f464:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f468:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f46c:	b25b      	sxtb	r3, r3
 800f46e:	2b00      	cmp	r3, #0
 800f470:	db0a      	blt.n	800f488 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800f472:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f476:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f47a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f47e:	2201      	movs	r2, #1
 800f480:	4619      	mov	r1, r3
 800f482:	2007      	movs	r0, #7
 800f484:	f003 f89a 	bl	80125bc <LoRaMacCommandsAddCmd>
                }
                break;
 800f488:	bf00      	nop
 800f48a:	e25e      	b.n	800f94a <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f48c:	78fb      	ldrb	r3, [r7, #3]
 800f48e:	1c5a      	adds	r2, r3, #1
 800f490:	70fa      	strb	r2, [r7, #3]
 800f492:	461a      	mov	r2, r3
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4413      	add	r3, r2
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	f003 030f 	and.w	r3, r3, #15
 800f49e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f4a2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d104      	bne.n	800f4b4 <ProcessMacCommands+0x480>
                {
                    delay++;
 800f4aa:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f4b4:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f4b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f4bc:	fb02 f303 	mul.w	r3, r2, r3
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	4b6a      	ldr	r3, [pc, #424]	; (800f66c <ProcessMacCommands+0x638>)
 800f4c4:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f4c6:	4b69      	ldr	r3, [pc, #420]	; (800f66c <ProcessMacCommands+0x638>)
 800f4c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4ca:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f4ce:	4a67      	ldr	r2, [pc, #412]	; (800f66c <ProcessMacCommands+0x638>)
 800f4d0:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f4d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	4619      	mov	r1, r3
 800f4da:	2008      	movs	r0, #8
 800f4dc:	f003 f86e 	bl	80125bc <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f4e0:	f7ff fd98 	bl	800f014 <SetMlmeScheduleUplinkIndication>
                break;
 800f4e4:	e231      	b.n	800f94a <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f4e6:	78fb      	ldrb	r3, [r7, #3]
 800f4e8:	1c5a      	adds	r2, r3, #1
 800f4ea:	70fa      	strb	r2, [r7, #3]
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f4fe:	2300      	movs	r3, #0
 800f500:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f504:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f508:	f003 0320 	and.w	r3, r3, #32
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d002      	beq.n	800f516 <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f510:	2301      	movs	r3, #1
 800f512:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f516:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f51a:	f003 0310 	and.w	r3, r3, #16
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d002      	beq.n	800f528 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f522:	2301      	movs	r3, #1
 800f524:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f528:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f52c:	f003 030f 	and.w	r3, r3, #15
 800f530:	b2db      	uxtb	r3, r3
 800f532:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f536:	4b4d      	ldr	r3, [pc, #308]	; (800f66c <ProcessMacCommands+0x638>)
 800f538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f53c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f540:	4611      	mov	r1, r2
 800f542:	4618      	mov	r0, r3
 800f544:	f004 feb2 	bl	80142ac <RegionTxParamSetupReq>
 800f548:	4603      	mov	r3, r0
 800f54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f54e:	d03a      	beq.n	800f5c6 <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f550:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f554:	4b45      	ldr	r3, [pc, #276]	; (800f66c <ProcessMacCommands+0x638>)
 800f556:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f55a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f55e:	4b43      	ldr	r3, [pc, #268]	; (800f66c <ProcessMacCommands+0x638>)
 800f560:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f564:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f568:	461a      	mov	r2, r3
 800f56a:	4b41      	ldr	r3, [pc, #260]	; (800f670 <ProcessMacCommands+0x63c>)
 800f56c:	5c9b      	ldrb	r3, [r3, r2]
 800f56e:	4618      	mov	r0, r3
 800f570:	f7f1 f92c 	bl	80007cc <__aeabi_ui2f>
 800f574:	4603      	mov	r3, r0
 800f576:	4a3d      	ldr	r2, [pc, #244]	; (800f66c <ProcessMacCommands+0x638>)
 800f578:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f57a:	2302      	movs	r3, #2
 800f57c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f580:	4b3a      	ldr	r3, [pc, #232]	; (800f66c <ProcessMacCommands+0x638>)
 800f582:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f586:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f58a:	4b38      	ldr	r3, [pc, #224]	; (800f66c <ProcessMacCommands+0x638>)
 800f58c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f590:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f594:	4611      	mov	r1, r2
 800f596:	4618      	mov	r0, r3
 800f598:	f004 fd8a 	bl	80140b0 <RegionGetPhyParam>
 800f59c:	4603      	mov	r3, r0
 800f59e:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a2:	b25a      	sxtb	r2, r3
 800f5a4:	4b31      	ldr	r3, [pc, #196]	; (800f66c <ProcessMacCommands+0x638>)
 800f5a6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	bfb8      	it	lt
 800f5ae:	4613      	movlt	r3, r2
 800f5b0:	b25a      	sxtb	r2, r3
 800f5b2:	4b2e      	ldr	r3, [pc, #184]	; (800f66c <ProcessMacCommands+0x638>)
 800f5b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f5b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f5bc:	2200      	movs	r2, #0
 800f5be:	4619      	mov	r1, r3
 800f5c0:	2009      	movs	r0, #9
 800f5c2:	f002 fffb 	bl	80125bc <LoRaMacCommandsAddCmd>
                }
                break;
 800f5c6:	bf00      	nop
 800f5c8:	e1bf      	b.n	800f94a <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f5ca:	2303      	movs	r3, #3
 800f5cc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f5d0:	78fb      	ldrb	r3, [r7, #3]
 800f5d2:	1c5a      	adds	r2, r3, #1
 800f5d4:	70fa      	strb	r2, [r7, #3]
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4413      	add	r3, r2
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f5e2:	78fb      	ldrb	r3, [r7, #3]
 800f5e4:	1c5a      	adds	r2, r3, #1
 800f5e6:	70fa      	strb	r2, [r7, #3]
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f5f2:	78fb      	ldrb	r3, [r7, #3]
 800f5f4:	1c5a      	adds	r2, r3, #1
 800f5f6:	70fa      	strb	r2, [r7, #3]
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	021a      	lsls	r2, r3, #8
 800f602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f604:	4313      	orrs	r3, r2
 800f606:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f608:	78fb      	ldrb	r3, [r7, #3]
 800f60a:	1c5a      	adds	r2, r3, #1
 800f60c:	70fa      	strb	r2, [r7, #3]
 800f60e:	461a      	mov	r2, r3
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	4413      	add	r3, r2
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	041a      	lsls	r2, r3, #16
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	4313      	orrs	r3, r2
 800f61c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f620:	2264      	movs	r2, #100	; 0x64
 800f622:	fb02 f303 	mul.w	r3, r2, r3
 800f626:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f628:	4b10      	ldr	r3, [pc, #64]	; (800f66c <ProcessMacCommands+0x638>)
 800f62a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f62e:	f107 0220 	add.w	r2, r7, #32
 800f632:	4611      	mov	r1, r2
 800f634:	4618      	mov	r0, r3
 800f636:	f004 fe4c 	bl	80142d2 <RegionDlChannelReq>
 800f63a:	4603      	mov	r3, r0
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f642:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f646:	b25b      	sxtb	r3, r3
 800f648:	2b00      	cmp	r3, #0
 800f64a:	db0c      	blt.n	800f666 <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800f64c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f650:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f654:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f658:	2201      	movs	r2, #1
 800f65a:	4619      	mov	r1, r3
 800f65c:	200a      	movs	r0, #10
 800f65e:	f002 ffad 	bl	80125bc <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800f662:	f7ff fcd7 	bl	800f014 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800f666:	bf00      	nop
 800f668:	e16f      	b.n	800f94a <ProcessMacCommands+0x916>
 800f66a:	bf00      	nop
 800f66c:	20000a54 	.word	0x20000a54
 800f670:	0801be8c 	.word	0x0801be8c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f674:	200a      	movs	r0, #10
 800f676:	f003 fac9 	bl	8012c0c <LoRaMacConfirmQueueIsCmdActive>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	f000 8164 	beq.w	800f94a <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f682:	210a      	movs	r1, #10
 800f684:	2000      	movs	r0, #0
 800f686:	f003 fa35 	bl	8012af4 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800f68a:	f107 0318 	add.w	r3, r7, #24
 800f68e:	2200      	movs	r2, #0
 800f690:	601a      	str	r2, [r3, #0]
 800f692:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f694:	f107 0310 	add.w	r3, r7, #16
 800f698:	2200      	movs	r2, #0
 800f69a:	601a      	str	r2, [r3, #0]
 800f69c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f69e:	f107 0308 	add.w	r3, r7, #8
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	601a      	str	r2, [r3, #0]
 800f6a6:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f6a8:	78fb      	ldrb	r3, [r7, #3]
 800f6aa:	1c5a      	adds	r2, r3, #1
 800f6ac:	70fa      	strb	r2, [r7, #3]
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f6b8:	78fb      	ldrb	r3, [r7, #3]
 800f6ba:	1c5a      	adds	r2, r3, #1
 800f6bc:	70fa      	strb	r2, [r7, #3]
 800f6be:	461a      	mov	r2, r3
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	021a      	lsls	r2, r3, #8
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	4313      	orrs	r3, r2
 800f6cc:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f6ce:	78fb      	ldrb	r3, [r7, #3]
 800f6d0:	1c5a      	adds	r2, r3, #1
 800f6d2:	70fa      	strb	r2, [r7, #3]
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4413      	add	r3, r2
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	041a      	lsls	r2, r3, #16
 800f6de:	69bb      	ldr	r3, [r7, #24]
 800f6e0:	4313      	orrs	r3, r2
 800f6e2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f6e4:	78fb      	ldrb	r3, [r7, #3]
 800f6e6:	1c5a      	adds	r2, r3, #1
 800f6e8:	70fa      	strb	r2, [r7, #3]
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4413      	add	r3, r2
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	061a      	lsls	r2, r3, #24
 800f6f4:	69bb      	ldr	r3, [r7, #24]
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f6fa:	78fb      	ldrb	r3, [r7, #3]
 800f6fc:	1c5a      	adds	r2, r3, #1
 800f6fe:	70fa      	strb	r2, [r7, #3]
 800f700:	461a      	mov	r2, r3
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	4413      	add	r3, r2
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	b21b      	sxth	r3, r3
 800f70a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f70c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f710:	461a      	mov	r2, r3
 800f712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f716:	fb03 f302 	mul.w	r3, r3, r2
 800f71a:	121b      	asrs	r3, r3, #8
 800f71c:	b21b      	sxth	r3, r3
 800f71e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f720:	f107 0310 	add.w	r3, r7, #16
 800f724:	f107 0218 	add.w	r2, r7, #24
 800f728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f72c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f730:	693a      	ldr	r2, [r7, #16]
 800f732:	4b8c      	ldr	r3, [pc, #560]	; (800f964 <ProcessMacCommands+0x930>)
 800f734:	4413      	add	r3, r2
 800f736:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f738:	f107 0308 	add.w	r3, r7, #8
 800f73c:	4618      	mov	r0, r3
 800f73e:	f00a fa5f 	bl	8019c00 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f742:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f746:	4b88      	ldr	r3, [pc, #544]	; (800f968 <ProcessMacCommands+0x934>)
 800f748:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f74c:	9200      	str	r2, [sp, #0]
 800f74e:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f752:	f107 0210 	add.w	r2, r7, #16
 800f756:	ca06      	ldmia	r2, {r1, r2}
 800f758:	f00a f9eb 	bl	8019b32 <SysTimeSub>
 800f75c:	f107 0010 	add.w	r0, r7, #16
 800f760:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f766:	f107 0208 	add.w	r2, r7, #8
 800f76a:	ca06      	ldmia	r2, {r1, r2}
 800f76c:	f00a f9a8 	bl	8019ac0 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f770:	f107 0310 	add.w	r3, r7, #16
 800f774:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f778:	f00a fa14 	bl	8019ba4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f77c:	f002 fde3 	bl	8012346 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f780:	4b79      	ldr	r3, [pc, #484]	; (800f968 <ProcessMacCommands+0x934>)
 800f782:	2201      	movs	r2, #1
 800f784:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800f788:	e0df      	b.n	800f94a <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f78a:	200d      	movs	r0, #13
 800f78c:	f003 fa3e 	bl	8012c0c <LoRaMacConfirmQueueIsCmdActive>
 800f790:	4603      	mov	r3, r0
 800f792:	2b00      	cmp	r3, #0
 800f794:	f000 80d9 	beq.w	800f94a <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f798:	210d      	movs	r1, #13
 800f79a:	2000      	movs	r0, #0
 800f79c:	f003 f9aa 	bl	8012af4 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f7a0:	4b71      	ldr	r3, [pc, #452]	; (800f968 <ProcessMacCommands+0x934>)
 800f7a2:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f7a6:	2b04      	cmp	r3, #4
 800f7a8:	f000 80cf 	beq.w	800f94a <ProcessMacCommands+0x916>
 800f7ac:	4b6e      	ldr	r3, [pc, #440]	; (800f968 <ProcessMacCommands+0x934>)
 800f7ae:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f7b2:	2b05      	cmp	r3, #5
 800f7b4:	f000 80c9 	beq.w	800f94a <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f7b8:	f002 fda6 	bl	8012308 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f7bc:	e0c5      	b.n	800f94a <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f7be:	2303      	movs	r3, #3
 800f7c0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f7c8:	78fb      	ldrb	r3, [r7, #3]
 800f7ca:	1c5a      	adds	r2, r3, #1
 800f7cc:	70fa      	strb	r2, [r7, #3]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f7d8:	78fb      	ldrb	r3, [r7, #3]
 800f7da:	1c5a      	adds	r2, r3, #1
 800f7dc:	70fa      	strb	r2, [r7, #3]
 800f7de:	461a      	mov	r2, r3
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4413      	add	r3, r2
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	021b      	lsls	r3, r3, #8
 800f7e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f7ea:	4313      	orrs	r3, r2
 800f7ec:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f7ee:	78fb      	ldrb	r3, [r7, #3]
 800f7f0:	1c5a      	adds	r2, r3, #1
 800f7f2:	70fa      	strb	r2, [r7, #3]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4413      	add	r3, r2
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	041b      	lsls	r3, r3, #16
 800f7fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f800:	4313      	orrs	r3, r2
 800f802:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f806:	2264      	movs	r2, #100	; 0x64
 800f808:	fb02 f303 	mul.w	r3, r2, r3
 800f80c:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f80e:	78fb      	ldrb	r3, [r7, #3]
 800f810:	1c5a      	adds	r2, r3, #1
 800f812:	70fa      	strb	r2, [r7, #3]
 800f814:	461a      	mov	r2, r3
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4413      	add	r3, r2
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	f003 030f 	and.w	r3, r3, #15
 800f820:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f824:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f828:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f82a:	4618      	mov	r0, r3
 800f82c:	f002 fd72 	bl	8012314 <LoRaMacClassBPingSlotChannelReq>
 800f830:	4603      	mov	r3, r0
 800f832:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f836:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f83a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f83e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f842:	2201      	movs	r2, #1
 800f844:	4619      	mov	r1, r3
 800f846:	2011      	movs	r0, #17
 800f848:	f002 feb8 	bl	80125bc <LoRaMacCommandsAddCmd>
                break;
 800f84c:	e07d      	b.n	800f94a <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f84e:	200e      	movs	r0, #14
 800f850:	f003 f9dc 	bl	8012c0c <LoRaMacConfirmQueueIsCmdActive>
 800f854:	4603      	mov	r3, r0
 800f856:	2b00      	cmp	r3, #0
 800f858:	d077      	beq.n	800f94a <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f85a:	210e      	movs	r1, #14
 800f85c:	2000      	movs	r0, #0
 800f85e:	f003 f949 	bl	8012af4 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f862:	2300      	movs	r3, #0
 800f864:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f868:	2300      	movs	r3, #0
 800f86a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f86e:	78fb      	ldrb	r3, [r7, #3]
 800f870:	1c5a      	adds	r2, r3, #1
 800f872:	70fa      	strb	r2, [r7, #3]
 800f874:	461a      	mov	r2, r3
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	4413      	add	r3, r2
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f880:	78fb      	ldrb	r3, [r7, #3]
 800f882:	1c5a      	adds	r2, r3, #1
 800f884:	70fa      	strb	r2, [r7, #3]
 800f886:	461a      	mov	r2, r3
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	4413      	add	r3, r2
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	021b      	lsls	r3, r3, #8
 800f890:	b21a      	sxth	r2, r3
 800f892:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f896:	4313      	orrs	r3, r2
 800f898:	b21b      	sxth	r3, r3
 800f89a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f89e:	78fb      	ldrb	r3, [r7, #3]
 800f8a0:	1c5a      	adds	r2, r3, #1
 800f8a2:	70fa      	strb	r2, [r7, #3]
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4413      	add	r3, r2
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f8b0:	4b2e      	ldr	r3, [pc, #184]	; (800f96c <ProcessMacCommands+0x938>)
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f8b8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f002 fd35 	bl	801232c <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f8c2:	e042      	b.n	800f94a <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f8ca:	78fb      	ldrb	r3, [r7, #3]
 800f8cc:	1c5a      	adds	r2, r3, #1
 800f8ce:	70fa      	strb	r2, [r7, #3]
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f8dc:	78fb      	ldrb	r3, [r7, #3]
 800f8de:	1c5a      	adds	r2, r3, #1
 800f8e0:	70fa      	strb	r2, [r7, #3]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	021b      	lsls	r3, r3, #8
 800f8ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f8f0:	4313      	orrs	r3, r2
 800f8f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f8f6:	78fb      	ldrb	r3, [r7, #3]
 800f8f8:	1c5a      	adds	r2, r3, #1
 800f8fa:	70fa      	strb	r2, [r7, #3]
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4413      	add	r3, r2
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	041b      	lsls	r3, r3, #16
 800f906:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f90a:	4313      	orrs	r3, r2
 800f90c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f910:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f914:	2264      	movs	r2, #100	; 0x64
 800f916:	fb02 f303 	mul.w	r3, r2, r3
 800f91a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f91e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f922:	f002 fd16 	bl	8012352 <LoRaMacClassBBeaconFreqReq>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d003      	beq.n	800f934 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800f92c:	2301      	movs	r3, #1
 800f92e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f932:	e002      	b.n	800f93a <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f934:	2300      	movs	r3, #0
 800f936:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f93a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f93e:	2201      	movs	r2, #1
 800f940:	4619      	mov	r1, r3
 800f942:	2013      	movs	r0, #19
 800f944:	f002 fe3a 	bl	80125bc <LoRaMacCommandsAddCmd>
                }
                break;
 800f948:	bf00      	nop
    while( macIndex < commandsSize )
 800f94a:	78fa      	ldrb	r2, [r7, #3]
 800f94c:	78bb      	ldrb	r3, [r7, #2]
 800f94e:	429a      	cmp	r2, r3
 800f950:	f4ff ab88 	bcc.w	800f064 <ProcessMacCommands+0x30>
 800f954:	e002      	b.n	800f95c <ProcessMacCommands+0x928>
            return;
 800f956:	bf00      	nop
 800f958:	e000      	b.n	800f95c <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f95a:	bf00      	nop
        }
    }
}
 800f95c:	378c      	adds	r7, #140	; 0x8c
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd90      	pop	{r4, r7, pc}
 800f962:	bf00      	nop
 800f964:	12d53d80 	.word	0x12d53d80
 800f968:	2000054c 	.word	0x2000054c
 800f96c:	200018ac 	.word	0x200018ac

0800f970 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b08e      	sub	sp, #56	; 0x38
 800f974:	af02      	add	r7, sp, #8
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	607a      	str	r2, [r7, #4]
 800f97a:	461a      	mov	r2, r3
 800f97c:	460b      	mov	r3, r1
 800f97e:	72fb      	strb	r3, [r7, #11]
 800f980:	4613      	mov	r3, r2
 800f982:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f984:	2303      	movs	r3, #3
 800f986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f98a:	4b65      	ldr	r3, [pc, #404]	; (800fb20 <Send+0x1b0>)
 800f98c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f990:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f994:	4b62      	ldr	r3, [pc, #392]	; (800fb20 <Send+0x1b0>)
 800f996:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f99a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f99e:	4b60      	ldr	r3, [pc, #384]	; (800fb20 <Send+0x1b0>)
 800f9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9a2:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f9a4:	4b5e      	ldr	r3, [pc, #376]	; (800fb20 <Send+0x1b0>)
 800f9a6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d101      	bne.n	800f9b2 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f9ae:	2307      	movs	r3, #7
 800f9b0:	e0b1      	b.n	800fb16 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f9b2:	4b5b      	ldr	r3, [pc, #364]	; (800fb20 <Send+0x1b0>)
 800f9b4:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d102      	bne.n	800f9c2 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f9bc:	4b58      	ldr	r3, [pc, #352]	; (800fb20 <Send+0x1b0>)
 800f9be:	2200      	movs	r2, #0
 800f9c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f9c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9cc:	f36f 0303 	bfc	r3, #0, #4
 800f9d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f9d4:	4b52      	ldr	r3, [pc, #328]	; (800fb20 <Send+0x1b0>)
 800f9d6:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800f9da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9de:	f362 13c7 	bfi	r3, r2, #7, #1
 800f9e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f9e6:	4b4e      	ldr	r3, [pc, #312]	; (800fb20 <Send+0x1b0>)
 800f9e8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d106      	bne.n	800f9fe <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f9f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9f4:	f043 0310 	orr.w	r3, r3, #16
 800f9f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800f9fc:	e005      	b.n	800fa0a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f9fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa02:	f36f 1304 	bfc	r3, #4, #1
 800fa06:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800fa0a:	4b45      	ldr	r3, [pc, #276]	; (800fb20 <Send+0x1b0>)
 800fa0c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d005      	beq.n	800fa20 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800fa14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa18:	f043 0320 	orr.w	r3, r3, #32
 800fa1c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800fa20:	4b3f      	ldr	r3, [pc, #252]	; (800fb20 <Send+0x1b0>)
 800fa22:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800fa26:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fa2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa30:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	bf14      	ite	ne
 800fa3a:	2301      	movne	r3, #1
 800fa3c:	2300      	moveq	r3, #0
 800fa3e:	b2db      	uxtb	r3, r3
 800fa40:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fa42:	4b37      	ldr	r3, [pc, #220]	; (800fb20 <Send+0x1b0>)
 800fa44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa46:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800fa48:	4b36      	ldr	r3, [pc, #216]	; (800fb24 <Send+0x1b4>)
 800fa4a:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800fa4e:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800fa50:	4b34      	ldr	r3, [pc, #208]	; (800fb24 <Send+0x1b4>)
 800fa52:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800fa56:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fa58:	4b31      	ldr	r3, [pc, #196]	; (800fb20 <Send+0x1b0>)
 800fa5a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fa5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fa62:	4b2f      	ldr	r3, [pc, #188]	; (800fb20 <Send+0x1b0>)
 800fa64:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800fa68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fa6c:	4b2c      	ldr	r3, [pc, #176]	; (800fb20 <Send+0x1b0>)
 800fa6e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fa72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800fa76:	4b2a      	ldr	r3, [pc, #168]	; (800fb20 <Send+0x1b0>)
 800fa78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fa80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa84:	f107 0014 	add.w	r0, r7, #20
 800fa88:	4a27      	ldr	r2, [pc, #156]	; (800fb28 <Send+0x1b8>)
 800fa8a:	4928      	ldr	r1, [pc, #160]	; (800fb2c <Send+0x1bc>)
 800fa8c:	f002 fb7c 	bl	8012188 <LoRaMacAdrCalcNext>
 800fa90:	4603      	mov	r3, r0
 800fa92:	461a      	mov	r2, r3
 800fa94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa98:	f362 1386 	bfi	r3, r2, #6, #1
 800fa9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800faa0:	7afa      	ldrb	r2, [r7, #11]
 800faa2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800faa6:	893b      	ldrh	r3, [r7, #8]
 800faa8:	9300      	str	r3, [sp, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	68f8      	ldr	r0, [r7, #12]
 800faae:	f000 fc21 	bl	80102f4 <PrepareFrame>
 800fab2:	4603      	mov	r3, r0
 800fab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d003      	beq.n	800fac8 <Send+0x158>
 800fac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fac4:	2b0a      	cmp	r3, #10
 800fac6:	d107      	bne.n	800fad8 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800fac8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800facc:	4618      	mov	r0, r3
 800face:	f000 f96d 	bl	800fdac <ScheduleTx>
 800fad2:	4603      	mov	r3, r0
 800fad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800fad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d00a      	beq.n	800faf6 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fae0:	4a0f      	ldr	r2, [pc, #60]	; (800fb20 <Send+0x1b0>)
 800fae2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fae6:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800faea:	4a0d      	ldr	r2, [pc, #52]	; (800fb20 <Send+0x1b0>)
 800faec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800faf0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800faf4:	e00d      	b.n	800fb12 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800faf6:	4b0a      	ldr	r3, [pc, #40]	; (800fb20 <Send+0x1b0>)
 800faf8:	2200      	movs	r2, #0
 800fafa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb00:	4a07      	ldr	r2, [pc, #28]	; (800fb20 <Send+0x1b0>)
 800fb02:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fb04:	f002 fdd2 	bl	80126ac <LoRaMacCommandsRemoveNoneStickyCmds>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d001      	beq.n	800fb12 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fb0e:	2313      	movs	r3, #19
 800fb10:	e001      	b.n	800fb16 <Send+0x1a6>
        }
    }
    return status;
 800fb12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3730      	adds	r7, #48	; 0x30
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	20000a54 	.word	0x20000a54
 800fb24:	2000054c 	.word	0x2000054c
 800fb28:	20000a8c 	.word	0x20000a8c
 800fb2c:	20000a8d 	.word	0x20000a8d

0800fb30 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	4603      	mov	r3, r0
 800fb38:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fb42:	2301      	movs	r3, #1
 800fb44:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fb46:	79fb      	ldrb	r3, [r7, #7]
 800fb48:	2bff      	cmp	r3, #255	; 0xff
 800fb4a:	d129      	bne.n	800fba0 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800fb4c:	2000      	movs	r0, #0
 800fb4e:	f7ff f941 	bl	800edd4 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fb52:	4b1a      	ldr	r3, [pc, #104]	; (800fbbc <SendReJoinReq+0x8c>)
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fb5a:	4b18      	ldr	r3, [pc, #96]	; (800fbbc <SendReJoinReq+0x8c>)
 800fb5c:	4a18      	ldr	r2, [pc, #96]	; (800fbc0 <SendReJoinReq+0x90>)
 800fb5e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fb62:	4b16      	ldr	r3, [pc, #88]	; (800fbbc <SendReJoinReq+0x8c>)
 800fb64:	22ff      	movs	r2, #255	; 0xff
 800fb66:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800fb6a:	7b3b      	ldrb	r3, [r7, #12]
 800fb6c:	f36f 1347 	bfc	r3, #5, #3
 800fb70:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fb72:	7b3a      	ldrb	r2, [r7, #12]
 800fb74:	4b11      	ldr	r3, [pc, #68]	; (800fbbc <SendReJoinReq+0x8c>)
 800fb76:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fb7a:	f7fc fc85 	bl	800c488 <SecureElementGetJoinEui>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2208      	movs	r2, #8
 800fb82:	4619      	mov	r1, r3
 800fb84:	480f      	ldr	r0, [pc, #60]	; (800fbc4 <SendReJoinReq+0x94>)
 800fb86:	f006 fd9e 	bl	80166c6 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800fb8a:	f7fc fc5b 	bl	800c444 <SecureElementGetDevEui>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	2208      	movs	r2, #8
 800fb92:	4619      	mov	r1, r3
 800fb94:	480c      	ldr	r0, [pc, #48]	; (800fbc8 <SendReJoinReq+0x98>)
 800fb96:	f006 fd96 	bl	80166c6 <memcpy1>

            allowDelayedTx = false;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	73fb      	strb	r3, [r7, #15]

            break;
 800fb9e:	e002      	b.n	800fba6 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fba0:	2302      	movs	r3, #2
 800fba2:	73bb      	strb	r3, [r7, #14]
            break;
 800fba4:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fba6:	7bfb      	ldrb	r3, [r7, #15]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f000 f8ff 	bl	800fdac <ScheduleTx>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	73bb      	strb	r3, [r7, #14]
    return status;
 800fbb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3710      	adds	r7, #16
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	2000054c 	.word	0x2000054c
 800fbc0:	2000054e 	.word	0x2000054e
 800fbc4:	2000065a 	.word	0x2000065a
 800fbc8:	20000662 	.word	0x20000662

0800fbcc <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fbd0:	f002 fb49 	bl	8012266 <LoRaMacClassBIsBeaconExpected>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d001      	beq.n	800fbde <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800fbda:	230e      	movs	r3, #14
 800fbdc:	e013      	b.n	800fc06 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fbde:	4b0b      	ldr	r3, [pc, #44]	; (800fc0c <CheckForClassBCollision+0x40>)
 800fbe0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d10d      	bne.n	800fc04 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fbe8:	f002 fb44 	bl	8012274 <LoRaMacClassBIsPingExpected>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d001      	beq.n	800fbf6 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fbf2:	230f      	movs	r3, #15
 800fbf4:	e007      	b.n	800fc06 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fbf6:	f002 fb44 	bl	8012282 <LoRaMacClassBIsMulticastExpected>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d001      	beq.n	800fc04 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fc00:	230f      	movs	r3, #15
 800fc02:	e000      	b.n	800fc06 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800fc04:	2300      	movs	r3, #0
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	20000a54 	.word	0x20000a54

0800fc10 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800fc10:	b590      	push	{r4, r7, lr}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc16:	4b2d      	ldr	r3, [pc, #180]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc18:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fc1c:	4b2b      	ldr	r3, [pc, #172]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc1e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fc22:	4b2a      	ldr	r3, [pc, #168]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc24:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800fc28:	4b28      	ldr	r3, [pc, #160]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc2a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800fc2e:	4b27      	ldr	r3, [pc, #156]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc30:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fc34:	b25b      	sxtb	r3, r3
 800fc36:	f004 fba3 	bl	8014380 <RegionApplyDrOffset>
 800fc3a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc3c:	b259      	sxtb	r1, r3
 800fc3e:	4b23      	ldr	r3, [pc, #140]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc40:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fc44:	4b21      	ldr	r3, [pc, #132]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc48:	4821      	ldr	r0, [pc, #132]	; (800fcd0 <ComputeRxWindowParameters+0xc0>)
 800fc4a:	9000      	str	r0, [sp, #0]
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	f004 faa7 	bl	80141a0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc52:	4b1e      	ldr	r3, [pc, #120]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc54:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800fc58:	4b1c      	ldr	r3, [pc, #112]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc5a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc5e:	b259      	sxtb	r1, r3
 800fc60:	4b1a      	ldr	r3, [pc, #104]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc62:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fc66:	4b19      	ldr	r3, [pc, #100]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc6a:	4c1a      	ldr	r4, [pc, #104]	; (800fcd4 <ComputeRxWindowParameters+0xc4>)
 800fc6c:	9400      	str	r4, [sp, #0]
 800fc6e:	f004 fa97 	bl	80141a0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fc72:	4b16      	ldr	r3, [pc, #88]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc76:	4a18      	ldr	r2, [pc, #96]	; (800fcd8 <ComputeRxWindowParameters+0xc8>)
 800fc78:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fc7c:	4413      	add	r3, r2
 800fc7e:	4a16      	ldr	r2, [pc, #88]	; (800fcd8 <ComputeRxWindowParameters+0xc8>)
 800fc80:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fc84:	4b11      	ldr	r3, [pc, #68]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc88:	4a13      	ldr	r2, [pc, #76]	; (800fcd8 <ComputeRxWindowParameters+0xc8>)
 800fc8a:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fc8e:	4413      	add	r3, r2
 800fc90:	4a11      	ldr	r2, [pc, #68]	; (800fcd8 <ComputeRxWindowParameters+0xc8>)
 800fc92:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fc96:	4b0d      	ldr	r3, [pc, #52]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fc98:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d111      	bne.n	800fcc4 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fca0:	4b0a      	ldr	r3, [pc, #40]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fca4:	4a0c      	ldr	r2, [pc, #48]	; (800fcd8 <ComputeRxWindowParameters+0xc8>)
 800fca6:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fcaa:	4413      	add	r3, r2
 800fcac:	4a0a      	ldr	r2, [pc, #40]	; (800fcd8 <ComputeRxWindowParameters+0xc8>)
 800fcae:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fcb2:	4b06      	ldr	r3, [pc, #24]	; (800fccc <ComputeRxWindowParameters+0xbc>)
 800fcb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcb6:	4a08      	ldr	r2, [pc, #32]	; (800fcd8 <ComputeRxWindowParameters+0xc8>)
 800fcb8:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fcbc:	4413      	add	r3, r2
 800fcbe:	4a06      	ldr	r2, [pc, #24]	; (800fcd8 <ComputeRxWindowParameters+0xc8>)
 800fcc0:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800fcc4:	bf00      	nop
 800fcc6:	3704      	adds	r7, #4
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd90      	pop	{r4, r7, pc}
 800fccc:	20000a54 	.word	0x20000a54
 800fcd0:	20000904 	.word	0x20000904
 800fcd4:	20000918 	.word	0x20000918
 800fcd8:	2000054c 	.word	0x2000054c

0800fcdc <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800fce2:	2300      	movs	r3, #0
 800fce4:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fce6:	4b13      	ldr	r3, [pc, #76]	; (800fd34 <VerifyTxFrame+0x58>)
 800fce8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d01b      	beq.n	800fd28 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fcf0:	1d3b      	adds	r3, r7, #4
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f002 fd20 	bl	8012738 <LoRaMacCommandsGetSizeSerializedCmds>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d001      	beq.n	800fd02 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fcfe:	2313      	movs	r3, #19
 800fd00:	e013      	b.n	800fd2a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800fd02:	4b0d      	ldr	r3, [pc, #52]	; (800fd38 <VerifyTxFrame+0x5c>)
 800fd04:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fd08:	4a0a      	ldr	r2, [pc, #40]	; (800fd34 <VerifyTxFrame+0x58>)
 800fd0a:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	b2d2      	uxtb	r2, r2
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7ff f956 	bl	800efc4 <ValidatePayloadLength>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	f083 0301 	eor.w	r3, r3, #1
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d001      	beq.n	800fd28 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fd24:	2308      	movs	r3, #8
 800fd26:	e000      	b.n	800fd2a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fd28:	2300      	movs	r3, #0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	20000a54 	.word	0x20000a54
 800fd38:	2000054c 	.word	0x2000054c

0800fd3c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fd42:	4b18      	ldr	r3, [pc, #96]	; (800fda4 <SerializeTxFrame+0x68>)
 800fd44:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d002      	beq.n	800fd52 <SerializeTxFrame+0x16>
 800fd4c:	2b04      	cmp	r3, #4
 800fd4e:	d011      	beq.n	800fd74 <SerializeTxFrame+0x38>
 800fd50:	e021      	b.n	800fd96 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fd52:	4815      	ldr	r0, [pc, #84]	; (800fda8 <SerializeTxFrame+0x6c>)
 800fd54:	f004 f823 	bl	8013d9e <LoRaMacSerializerJoinRequest>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fd5c:	79fb      	ldrb	r3, [r7, #7]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d001      	beq.n	800fd66 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd62:	2311      	movs	r3, #17
 800fd64:	e01a      	b.n	800fd9c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fd66:	4b0f      	ldr	r3, [pc, #60]	; (800fda4 <SerializeTxFrame+0x68>)
 800fd68:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fd6c:	b29a      	uxth	r2, r3
 800fd6e:	4b0d      	ldr	r3, [pc, #52]	; (800fda4 <SerializeTxFrame+0x68>)
 800fd70:	801a      	strh	r2, [r3, #0]
            break;
 800fd72:	e012      	b.n	800fd9a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fd74:	480c      	ldr	r0, [pc, #48]	; (800fda8 <SerializeTxFrame+0x6c>)
 800fd76:	f004 f894 	bl	8013ea2 <LoRaMacSerializerData>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fd7e:	79fb      	ldrb	r3, [r7, #7]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d001      	beq.n	800fd88 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd84:	2311      	movs	r3, #17
 800fd86:	e009      	b.n	800fd9c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fd88:	4b06      	ldr	r3, [pc, #24]	; (800fda4 <SerializeTxFrame+0x68>)
 800fd8a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fd8e:	b29a      	uxth	r2, r3
 800fd90:	4b04      	ldr	r3, [pc, #16]	; (800fda4 <SerializeTxFrame+0x68>)
 800fd92:	801a      	strh	r2, [r3, #0]
            break;
 800fd94:	e001      	b.n	800fd9a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fd96:	2303      	movs	r3, #3
 800fd98:	e000      	b.n	800fd9c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fd9a:	2300      	movs	r3, #0
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3708      	adds	r7, #8
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	2000054c 	.word	0x2000054c
 800fda8:	20000654 	.word	0x20000654

0800fdac <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b090      	sub	sp, #64	; 0x40
 800fdb0:	af02      	add	r7, sp, #8
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fdb6:	2303      	movs	r3, #3
 800fdb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800fdbc:	f7ff ff06 	bl	800fbcc <CheckForClassBCollision>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fdc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d002      	beq.n	800fdd4 <ScheduleTx+0x28>
    {
        return status;
 800fdce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdd2:	e08f      	b.n	800fef4 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800fdd4:	f000 f8fa 	bl	800ffcc <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fdd8:	f7ff ffb0 	bl	800fd3c <SerializeTxFrame>
 800fddc:	4603      	mov	r3, r0
 800fdde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fde2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d002      	beq.n	800fdf0 <ScheduleTx+0x44>
    {
        return status;
 800fdea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdee:	e081      	b.n	800fef4 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fdf0:	4b42      	ldr	r3, [pc, #264]	; (800fefc <ScheduleTx+0x150>)
 800fdf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdf4:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fdf6:	4b41      	ldr	r3, [pc, #260]	; (800fefc <ScheduleTx+0x150>)
 800fdf8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fdfc:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fdfe:	4b3f      	ldr	r3, [pc, #252]	; (800fefc <ScheduleTx+0x150>)
 800fe00:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fe04:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fe06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f009 ff30 	bl	8019c70 <SysTimeGetMcuTime>
 800fe10:	4638      	mov	r0, r7
 800fe12:	4b3a      	ldr	r3, [pc, #232]	; (800fefc <ScheduleTx+0x150>)
 800fe14:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800fe18:	9200      	str	r2, [sp, #0]
 800fe1a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800fe1e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fe22:	ca06      	ldmia	r2, {r1, r2}
 800fe24:	f009 fe85 	bl	8019b32 <SysTimeSub>
 800fe28:	f107 0320 	add.w	r3, r7, #32
 800fe2c:	463a      	mov	r2, r7
 800fe2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe32:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fe36:	4b31      	ldr	r3, [pc, #196]	; (800fefc <ScheduleTx+0x150>)
 800fe38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe3a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800fe42:	2301      	movs	r3, #1
 800fe44:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fe46:	4b2e      	ldr	r3, [pc, #184]	; (800ff00 <ScheduleTx+0x154>)
 800fe48:	881b      	ldrh	r3, [r3, #0]
 800fe4a:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fe4c:	4b2b      	ldr	r3, [pc, #172]	; (800fefc <ScheduleTx+0x150>)
 800fe4e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d104      	bne.n	800fe60 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fe56:	2301      	movs	r3, #1
 800fe58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fe60:	4b26      	ldr	r3, [pc, #152]	; (800fefc <ScheduleTx+0x150>)
 800fe62:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fe66:	f107 0114 	add.w	r1, r7, #20
 800fe6a:	4b26      	ldr	r3, [pc, #152]	; (800ff04 <ScheduleTx+0x158>)
 800fe6c:	9300      	str	r3, [sp, #0]
 800fe6e:	4b26      	ldr	r3, [pc, #152]	; (800ff08 <ScheduleTx+0x15c>)
 800fe70:	4a26      	ldr	r2, [pc, #152]	; (800ff0c <ScheduleTx+0x160>)
 800fe72:	f004 fa5b 	bl	801432c <RegionNextChannel>
 800fe76:	4603      	mov	r3, r0
 800fe78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800fe7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d022      	beq.n	800feca <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fe84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe88:	2b0b      	cmp	r3, #11
 800fe8a:	d11b      	bne.n	800fec4 <ScheduleTx+0x118>
 800fe8c:	7bfb      	ldrb	r3, [r7, #15]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d018      	beq.n	800fec4 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800fe92:	4b1b      	ldr	r3, [pc, #108]	; (800ff00 <ScheduleTx+0x154>)
 800fe94:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d011      	beq.n	800fec0 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fe9c:	4b18      	ldr	r3, [pc, #96]	; (800ff00 <ScheduleTx+0x154>)
 800fe9e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fea2:	f043 0320 	orr.w	r3, r3, #32
 800fea6:	4a16      	ldr	r2, [pc, #88]	; (800ff00 <ScheduleTx+0x154>)
 800fea8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800feac:	4b14      	ldr	r3, [pc, #80]	; (800ff00 <ScheduleTx+0x154>)
 800feae:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800feb2:	4619      	mov	r1, r3
 800feb4:	4816      	ldr	r0, [pc, #88]	; (800ff10 <ScheduleTx+0x164>)
 800feb6:	f00a fc67 	bl	801a788 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800feba:	4815      	ldr	r0, [pc, #84]	; (800ff10 <ScheduleTx+0x164>)
 800febc:	f00a fb86 	bl	801a5cc <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fec0:	2300      	movs	r3, #0
 800fec2:	e017      	b.n	800fef4 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fec4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fec8:	e014      	b.n	800fef4 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800feca:	f7ff fea1 	bl	800fc10 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fece:	f7ff ff05 	bl	800fcdc <VerifyTxFrame>
 800fed2:	4603      	mov	r3, r0
 800fed4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d002      	beq.n	800fee6 <ScheduleTx+0x13a>
    {
        return status;
 800fee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fee4:	e006      	b.n	800fef4 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800fee6:	4b06      	ldr	r3, [pc, #24]	; (800ff00 <ScheduleTx+0x154>)
 800fee8:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800feec:	4618      	mov	r0, r3
 800feee:	f000 fb1d 	bl	801052c <SendFrameOnChannel>
 800fef2:	4603      	mov	r3, r0
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3738      	adds	r7, #56	; 0x38
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	20000a54 	.word	0x20000a54
 800ff00:	2000054c 	.word	0x2000054c
 800ff04:	20000a84 	.word	0x20000a84
 800ff08:	200009d0 	.word	0x200009d0
 800ff0c:	20000961 	.word	0x20000961
 800ff10:	200008b4 	.word	0x200008b4

0800ff14 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	460a      	mov	r2, r1
 800ff1e:	71fb      	strb	r3, [r7, #7]
 800ff20:	4613      	mov	r3, r2
 800ff22:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ff24:	2313      	movs	r3, #19
 800ff26:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800ff2c:	4b25      	ldr	r3, [pc, #148]	; (800ffc4 <SecureFrame+0xb0>)
 800ff2e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d002      	beq.n	800ff3c <SecureFrame+0x28>
 800ff36:	2b04      	cmp	r3, #4
 800ff38:	d011      	beq.n	800ff5e <SecureFrame+0x4a>
 800ff3a:	e03b      	b.n	800ffb4 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ff3c:	4822      	ldr	r0, [pc, #136]	; (800ffc8 <SecureFrame+0xb4>)
 800ff3e:	f003 faf7 	bl	8013530 <LoRaMacCryptoPrepareJoinRequest>
 800ff42:	4603      	mov	r3, r0
 800ff44:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ff46:	7bfb      	ldrb	r3, [r7, #15]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d001      	beq.n	800ff50 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff4c:	2311      	movs	r3, #17
 800ff4e:	e034      	b.n	800ffba <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ff50:	4b1c      	ldr	r3, [pc, #112]	; (800ffc4 <SecureFrame+0xb0>)
 800ff52:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	4b1a      	ldr	r3, [pc, #104]	; (800ffc4 <SecureFrame+0xb0>)
 800ff5a:	801a      	strh	r2, [r3, #0]
            break;
 800ff5c:	e02c      	b.n	800ffb8 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ff5e:	f107 0308 	add.w	r3, r7, #8
 800ff62:	4618      	mov	r0, r3
 800ff64:	f003 fa0a 	bl	801337c <LoRaMacCryptoGetFCntUp>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ff6e:	2312      	movs	r3, #18
 800ff70:	e023      	b.n	800ffba <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800ff72:	4b14      	ldr	r3, [pc, #80]	; (800ffc4 <SecureFrame+0xb0>)
 800ff74:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d104      	bne.n	800ff86 <SecureFrame+0x72>
 800ff7c:	4b11      	ldr	r3, [pc, #68]	; (800ffc4 <SecureFrame+0xb0>)
 800ff7e:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800ff82:	2b01      	cmp	r3, #1
 800ff84:	d902      	bls.n	800ff8c <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800ff8c:	68b8      	ldr	r0, [r7, #8]
 800ff8e:	79ba      	ldrb	r2, [r7, #6]
 800ff90:	79f9      	ldrb	r1, [r7, #7]
 800ff92:	4b0d      	ldr	r3, [pc, #52]	; (800ffc8 <SecureFrame+0xb4>)
 800ff94:	f003 fbe4 	bl	8013760 <LoRaMacCryptoSecureMessage>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ff9c:	7bfb      	ldrb	r3, [r7, #15]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d001      	beq.n	800ffa6 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ffa2:	2311      	movs	r3, #17
 800ffa4:	e009      	b.n	800ffba <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ffa6:	4b07      	ldr	r3, [pc, #28]	; (800ffc4 <SecureFrame+0xb0>)
 800ffa8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	4b05      	ldr	r3, [pc, #20]	; (800ffc4 <SecureFrame+0xb0>)
 800ffb0:	801a      	strh	r2, [r3, #0]
            break;
 800ffb2:	e001      	b.n	800ffb8 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ffb4:	2303      	movs	r3, #3
 800ffb6:	e000      	b.n	800ffba <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800ffb8:	2300      	movs	r3, #0
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3710      	adds	r7, #16
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	2000054c 	.word	0x2000054c
 800ffc8:	20000654 	.word	0x20000654

0800ffcc <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800ffcc:	b480      	push	{r7}
 800ffce:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800ffd0:	4b09      	ldr	r3, [pc, #36]	; (800fff8 <CalculateBackOff+0x2c>)
 800ffd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d10a      	bne.n	800ffee <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800ffd8:	4b07      	ldr	r3, [pc, #28]	; (800fff8 <CalculateBackOff+0x2c>)
 800ffda:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800ffde:	3b01      	subs	r3, #1
 800ffe0:	4a06      	ldr	r2, [pc, #24]	; (800fffc <CalculateBackOff+0x30>)
 800ffe2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800ffe6:	fb02 f303 	mul.w	r3, r2, r3
 800ffea:	4a03      	ldr	r2, [pc, #12]	; (800fff8 <CalculateBackOff+0x2c>)
 800ffec:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800ffee:	bf00      	nop
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bc80      	pop	{r7}
 800fff4:	4770      	bx	lr
 800fff6:	bf00      	nop
 800fff8:	20000a54 	.word	0x20000a54
 800fffc:	2000054c 	.word	0x2000054c

08010000 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	4603      	mov	r3, r0
 8010008:	7139      	strb	r1, [r7, #4]
 801000a:	71fb      	strb	r3, [r7, #7]
 801000c:	4613      	mov	r3, r2
 801000e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010010:	79fb      	ldrb	r3, [r7, #7]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d002      	beq.n	801001c <RemoveMacCommands+0x1c>
 8010016:	79fb      	ldrb	r3, [r7, #7]
 8010018:	2b01      	cmp	r3, #1
 801001a:	d10d      	bne.n	8010038 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 801001c:	79bb      	ldrb	r3, [r7, #6]
 801001e:	2b01      	cmp	r3, #1
 8010020:	d108      	bne.n	8010034 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010022:	793b      	ldrb	r3, [r7, #4]
 8010024:	f003 0320 	and.w	r3, r3, #32
 8010028:	b2db      	uxtb	r3, r3
 801002a:	2b00      	cmp	r3, #0
 801002c:	d004      	beq.n	8010038 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801002e:	f002 fb61 	bl	80126f4 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010032:	e001      	b.n	8010038 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010034:	f002 fb5e 	bl	80126f4 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010038:	bf00      	nop
 801003a:	3708      	adds	r7, #8
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 8010040:	b5b0      	push	{r4, r5, r7, lr}
 8010042:	b08e      	sub	sp, #56	; 0x38
 8010044:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010046:	4b68      	ldr	r3, [pc, #416]	; (80101e8 <ResetMacParameters+0x1a8>)
 8010048:	2200      	movs	r2, #0
 801004a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801004e:	4b66      	ldr	r3, [pc, #408]	; (80101e8 <ResetMacParameters+0x1a8>)
 8010050:	2200      	movs	r2, #0
 8010052:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010054:	4b65      	ldr	r3, [pc, #404]	; (80101ec <ResetMacParameters+0x1ac>)
 8010056:	2200      	movs	r2, #0
 8010058:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 801005c:	4b63      	ldr	r3, [pc, #396]	; (80101ec <ResetMacParameters+0x1ac>)
 801005e:	2201      	movs	r2, #1
 8010060:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010064:	4b61      	ldr	r3, [pc, #388]	; (80101ec <ResetMacParameters+0x1ac>)
 8010066:	2201      	movs	r2, #1
 8010068:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 801006c:	4b5f      	ldr	r3, [pc, #380]	; (80101ec <ResetMacParameters+0x1ac>)
 801006e:	2200      	movs	r2, #0
 8010070:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 8010074:	4b5c      	ldr	r3, [pc, #368]	; (80101e8 <ResetMacParameters+0x1a8>)
 8010076:	2200      	movs	r2, #0
 8010078:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 801007c:	4b5a      	ldr	r3, [pc, #360]	; (80101e8 <ResetMacParameters+0x1a8>)
 801007e:	2201      	movs	r2, #1
 8010080:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010084:	4b58      	ldr	r3, [pc, #352]	; (80101e8 <ResetMacParameters+0x1a8>)
 8010086:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 801008a:	4b57      	ldr	r3, [pc, #348]	; (80101e8 <ResetMacParameters+0x1a8>)
 801008c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010090:	4b55      	ldr	r3, [pc, #340]	; (80101e8 <ResetMacParameters+0x1a8>)
 8010092:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8010096:	4b54      	ldr	r3, [pc, #336]	; (80101e8 <ResetMacParameters+0x1a8>)
 8010098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 801009c:	4b52      	ldr	r3, [pc, #328]	; (80101e8 <ResetMacParameters+0x1a8>)
 801009e:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 80100a2:	4b51      	ldr	r3, [pc, #324]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80100a8:	4b4f      	ldr	r3, [pc, #316]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100aa:	4a4f      	ldr	r2, [pc, #316]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100ac:	3364      	adds	r3, #100	; 0x64
 80100ae:	32a4      	adds	r2, #164	; 0xa4
 80100b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100b4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80100b8:	4b4b      	ldr	r3, [pc, #300]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100ba:	4a4b      	ldr	r2, [pc, #300]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100bc:	336c      	adds	r3, #108	; 0x6c
 80100be:	32ac      	adds	r2, #172	; 0xac
 80100c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100c4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80100c8:	4b47      	ldr	r3, [pc, #284]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100ca:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 80100ce:	4b46      	ldr	r3, [pc, #280]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80100d4:	4b44      	ldr	r3, [pc, #272]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100d6:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 80100da:	4b43      	ldr	r3, [pc, #268]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100dc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80100e0:	4b41      	ldr	r3, [pc, #260]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80100e6:	4a40      	ldr	r2, [pc, #256]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100e8:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80100ea:	4b3f      	ldr	r3, [pc, #252]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80100f0:	4a3d      	ldr	r2, [pc, #244]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100f2:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 80100f4:	4b3d      	ldr	r3, [pc, #244]	; (80101ec <ResetMacParameters+0x1ac>)
 80100f6:	2200      	movs	r2, #0
 80100f8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 80100fc:	4b3a      	ldr	r3, [pc, #232]	; (80101e8 <ResetMacParameters+0x1a8>)
 80100fe:	2200      	movs	r2, #0
 8010100:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010104:	2301      	movs	r3, #1
 8010106:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010108:	4b39      	ldr	r3, [pc, #228]	; (80101f0 <ResetMacParameters+0x1b0>)
 801010a:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801010c:	4b39      	ldr	r3, [pc, #228]	; (80101f4 <ResetMacParameters+0x1b4>)
 801010e:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010110:	4b35      	ldr	r3, [pc, #212]	; (80101e8 <ResetMacParameters+0x1a8>)
 8010112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010116:	1d3a      	adds	r2, r7, #4
 8010118:	4611      	mov	r1, r2
 801011a:	4618      	mov	r0, r3
 801011c:	f003 fff2 	bl	8014104 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010120:	4b32      	ldr	r3, [pc, #200]	; (80101ec <ResetMacParameters+0x1ac>)
 8010122:	2200      	movs	r2, #0
 8010124:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010128:	4b30      	ldr	r3, [pc, #192]	; (80101ec <ResetMacParameters+0x1ac>)
 801012a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801012e:	4b2f      	ldr	r3, [pc, #188]	; (80101ec <ResetMacParameters+0x1ac>)
 8010130:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010134:	4b2c      	ldr	r3, [pc, #176]	; (80101e8 <ResetMacParameters+0x1a8>)
 8010136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010138:	4a2c      	ldr	r2, [pc, #176]	; (80101ec <ResetMacParameters+0x1ac>)
 801013a:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801013e:	4b2a      	ldr	r3, [pc, #168]	; (80101e8 <ResetMacParameters+0x1a8>)
 8010140:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010144:	4b29      	ldr	r3, [pc, #164]	; (80101ec <ResetMacParameters+0x1ac>)
 8010146:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801014a:	4b27      	ldr	r3, [pc, #156]	; (80101e8 <ResetMacParameters+0x1a8>)
 801014c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010150:	4b26      	ldr	r3, [pc, #152]	; (80101ec <ResetMacParameters+0x1ac>)
 8010152:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010156:	4b25      	ldr	r3, [pc, #148]	; (80101ec <ResetMacParameters+0x1ac>)
 8010158:	2200      	movs	r2, #0
 801015a:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801015e:	4b23      	ldr	r3, [pc, #140]	; (80101ec <ResetMacParameters+0x1ac>)
 8010160:	2201      	movs	r2, #1
 8010162:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010166:	4a21      	ldr	r2, [pc, #132]	; (80101ec <ResetMacParameters+0x1ac>)
 8010168:	4b20      	ldr	r3, [pc, #128]	; (80101ec <ResetMacParameters+0x1ac>)
 801016a:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 801016e:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8010172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010176:	682b      	ldr	r3, [r5, #0]
 8010178:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801017a:	4b1c      	ldr	r3, [pc, #112]	; (80101ec <ResetMacParameters+0x1ac>)
 801017c:	2201      	movs	r2, #1
 801017e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010182:	4b1a      	ldr	r3, [pc, #104]	; (80101ec <ResetMacParameters+0x1ac>)
 8010184:	2202      	movs	r2, #2
 8010186:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801018a:	2300      	movs	r3, #0
 801018c:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 801018e:	2300      	movs	r3, #0
 8010190:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 8010192:	4b16      	ldr	r3, [pc, #88]	; (80101ec <ResetMacParameters+0x1ac>)
 8010194:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010198:	2b00      	cmp	r3, #0
 801019a:	d009      	beq.n	80101b0 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801019c:	4b13      	ldr	r3, [pc, #76]	; (80101ec <ResetMacParameters+0x1ac>)
 801019e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80101a6:	4b11      	ldr	r3, [pc, #68]	; (80101ec <ResetMacParameters+0x1ac>)
 80101a8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80101ac:	691b      	ldr	r3, [r3, #16]
 80101ae:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80101b0:	4b11      	ldr	r3, [pc, #68]	; (80101f8 <ResetMacParameters+0x1b8>)
 80101b2:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80101b4:	4b11      	ldr	r3, [pc, #68]	; (80101fc <ResetMacParameters+0x1bc>)
 80101b6:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80101b8:	4b11      	ldr	r3, [pc, #68]	; (8010200 <ResetMacParameters+0x1c0>)
 80101ba:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80101bc:	4b11      	ldr	r3, [pc, #68]	; (8010204 <ResetMacParameters+0x1c4>)
 80101be:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80101c0:	4b11      	ldr	r3, [pc, #68]	; (8010208 <ResetMacParameters+0x1c8>)
 80101c2:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80101c4:	4b11      	ldr	r3, [pc, #68]	; (801020c <ResetMacParameters+0x1cc>)
 80101c6:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80101c8:	4b11      	ldr	r3, [pc, #68]	; (8010210 <ResetMacParameters+0x1d0>)
 80101ca:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80101cc:	4b11      	ldr	r3, [pc, #68]	; (8010214 <ResetMacParameters+0x1d4>)
 80101ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80101d0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80101d4:	f107 0310 	add.w	r3, r7, #16
 80101d8:	4a0f      	ldr	r2, [pc, #60]	; (8010218 <ResetMacParameters+0x1d8>)
 80101da:	4618      	mov	r0, r3
 80101dc:	f001 ffec 	bl	80121b8 <LoRaMacClassBInit>
}
 80101e0:	bf00      	nop
 80101e2:	3738      	adds	r7, #56	; 0x38
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bdb0      	pop	{r4, r5, r7, pc}
 80101e8:	20000a54 	.word	0x20000a54
 80101ec:	2000054c 	.word	0x2000054c
 80101f0:	20000c2c 	.word	0x20000c2c
 80101f4:	20000cc0 	.word	0x20000cc0
 80101f8:	200009ac 	.word	0x200009ac
 80101fc:	20000968 	.word	0x20000968
 8010200:	20000998 	.word	0x20000998
 8010204:	200009cd 	.word	0x200009cd
 8010208:	20000b20 	.word	0x20000b20
 801020c:	20000a94 	.word	0x20000a94
 8010210:	20000a98 	.word	0x20000a98
 8010214:	20000b24 	.word	0x20000b24
 8010218:	20000d88 	.word	0x20000d88

0801021c <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f00a fa3e 	bl	801a6a8 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 801022c:	4b0e      	ldr	r3, [pc, #56]	; (8010268 <RxWindowSetup+0x4c>)
 801022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010230:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010232:	4b0e      	ldr	r3, [pc, #56]	; (801026c <RxWindowSetup+0x50>)
 8010234:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010238:	4a0d      	ldr	r2, [pc, #52]	; (8010270 <RxWindowSetup+0x54>)
 801023a:	6839      	ldr	r1, [r7, #0]
 801023c:	4618      	mov	r0, r3
 801023e:	f003 ffc9 	bl	80141d4 <RegionRxConfig>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d00a      	beq.n	801025e <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010248:	4b07      	ldr	r3, [pc, #28]	; (8010268 <RxWindowSetup+0x4c>)
 801024a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801024c:	4a07      	ldr	r2, [pc, #28]	; (801026c <RxWindowSetup+0x50>)
 801024e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010250:	4610      	mov	r0, r2
 8010252:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	7cda      	ldrb	r2, [r3, #19]
 8010258:	4b06      	ldr	r3, [pc, #24]	; (8010274 <RxWindowSetup+0x58>)
 801025a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 801025e:	bf00      	nop
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop
 8010268:	0801bed4 	.word	0x0801bed4
 801026c:	20000a54 	.word	0x20000a54
 8010270:	2000096c 	.word	0x2000096c
 8010274:	2000054c 	.word	0x2000054c

08010278 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010278:	b590      	push	{r4, r7, lr}
 801027a:	b083      	sub	sp, #12
 801027c:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801027e:	4b18      	ldr	r3, [pc, #96]	; (80102e0 <OpenContinuousRxCWindow+0x68>)
 8010280:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010284:	4b16      	ldr	r3, [pc, #88]	; (80102e0 <OpenContinuousRxCWindow+0x68>)
 8010286:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801028a:	b259      	sxtb	r1, r3
 801028c:	4b14      	ldr	r3, [pc, #80]	; (80102e0 <OpenContinuousRxCWindow+0x68>)
 801028e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010292:	4b13      	ldr	r3, [pc, #76]	; (80102e0 <OpenContinuousRxCWindow+0x68>)
 8010294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010296:	4c13      	ldr	r4, [pc, #76]	; (80102e4 <OpenContinuousRxCWindow+0x6c>)
 8010298:	9400      	str	r4, [sp, #0]
 801029a:	f003 ff81 	bl	80141a0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801029e:	4b12      	ldr	r3, [pc, #72]	; (80102e8 <OpenContinuousRxCWindow+0x70>)
 80102a0:	2202      	movs	r2, #2
 80102a2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80102a6:	4b10      	ldr	r3, [pc, #64]	; (80102e8 <OpenContinuousRxCWindow+0x70>)
 80102a8:	2201      	movs	r2, #1
 80102aa:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80102ae:	4b0c      	ldr	r3, [pc, #48]	; (80102e0 <OpenContinuousRxCWindow+0x68>)
 80102b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102b4:	4a0d      	ldr	r2, [pc, #52]	; (80102ec <OpenContinuousRxCWindow+0x74>)
 80102b6:	490b      	ldr	r1, [pc, #44]	; (80102e4 <OpenContinuousRxCWindow+0x6c>)
 80102b8:	4618      	mov	r0, r3
 80102ba:	f003 ff8b 	bl	80141d4 <RegionRxConfig>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d009      	beq.n	80102d8 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 80102c4:	4b0a      	ldr	r3, [pc, #40]	; (80102f0 <OpenContinuousRxCWindow+0x78>)
 80102c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102c8:	2000      	movs	r0, #0
 80102ca:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80102cc:	4b06      	ldr	r3, [pc, #24]	; (80102e8 <OpenContinuousRxCWindow+0x70>)
 80102ce:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80102d2:	4b05      	ldr	r3, [pc, #20]	; (80102e8 <OpenContinuousRxCWindow+0x70>)
 80102d4:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80102d8:	bf00      	nop
 80102da:	3704      	adds	r7, #4
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd90      	pop	{r4, r7, pc}
 80102e0:	20000a54 	.word	0x20000a54
 80102e4:	2000092c 	.word	0x2000092c
 80102e8:	2000054c 	.word	0x2000054c
 80102ec:	2000096c 	.word	0x2000096c
 80102f0:	0801bed4 	.word	0x0801bed4

080102f4 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b088      	sub	sp, #32
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	60b9      	str	r1, [r7, #8]
 80102fe:	603b      	str	r3, [r7, #0]
 8010300:	4613      	mov	r3, r2
 8010302:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010304:	4b82      	ldr	r3, [pc, #520]	; (8010510 <PrepareFrame+0x21c>)
 8010306:	2200      	movs	r2, #0
 8010308:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801030a:	4b81      	ldr	r3, [pc, #516]	; (8010510 <PrepareFrame+0x21c>)
 801030c:	2200      	movs	r2, #0
 801030e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 8010312:	2300      	movs	r3, #0
 8010314:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010316:	2300      	movs	r3, #0
 8010318:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801031a:	2300      	movs	r3, #0
 801031c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d101      	bne.n	8010328 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010324:	2300      	movs	r3, #0
 8010326:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010328:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801032a:	461a      	mov	r2, r3
 801032c:	6839      	ldr	r1, [r7, #0]
 801032e:	4879      	ldr	r0, [pc, #484]	; (8010514 <PrepareFrame+0x220>)
 8010330:	f006 f9c9 	bl	80166c6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010334:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010336:	b2da      	uxtb	r2, r3
 8010338:	4b75      	ldr	r3, [pc, #468]	; (8010510 <PrepareFrame+0x21c>)
 801033a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	781a      	ldrb	r2, [r3, #0]
 8010342:	4b73      	ldr	r3, [pc, #460]	; (8010510 <PrepareFrame+0x21c>)
 8010344:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801034e:	b2db      	uxtb	r3, r3
 8010350:	2b07      	cmp	r3, #7
 8010352:	f000 80b9 	beq.w	80104c8 <PrepareFrame+0x1d4>
 8010356:	2b07      	cmp	r3, #7
 8010358:	f300 80d0 	bgt.w	80104fc <PrepareFrame+0x208>
 801035c:	2b02      	cmp	r3, #2
 801035e:	d006      	beq.n	801036e <PrepareFrame+0x7a>
 8010360:	2b04      	cmp	r3, #4
 8010362:	f040 80cb 	bne.w	80104fc <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010366:	4b6a      	ldr	r3, [pc, #424]	; (8010510 <PrepareFrame+0x21c>)
 8010368:	2201      	movs	r2, #1
 801036a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801036e:	4b68      	ldr	r3, [pc, #416]	; (8010510 <PrepareFrame+0x21c>)
 8010370:	2204      	movs	r2, #4
 8010372:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010376:	4b66      	ldr	r3, [pc, #408]	; (8010510 <PrepareFrame+0x21c>)
 8010378:	4a67      	ldr	r2, [pc, #412]	; (8010518 <PrepareFrame+0x224>)
 801037a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801037e:	4b64      	ldr	r3, [pc, #400]	; (8010510 <PrepareFrame+0x21c>)
 8010380:	22ff      	movs	r2, #255	; 0xff
 8010382:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	781a      	ldrb	r2, [r3, #0]
 801038a:	4b61      	ldr	r3, [pc, #388]	; (8010510 <PrepareFrame+0x21c>)
 801038c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010390:	4a5f      	ldr	r2, [pc, #380]	; (8010510 <PrepareFrame+0x21c>)
 8010392:	79fb      	ldrb	r3, [r7, #7]
 8010394:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010398:	4b60      	ldr	r3, [pc, #384]	; (801051c <PrepareFrame+0x228>)
 801039a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801039e:	4a5c      	ldr	r2, [pc, #368]	; (8010510 <PrepareFrame+0x21c>)
 80103a0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	781a      	ldrb	r2, [r3, #0]
 80103a8:	4b59      	ldr	r3, [pc, #356]	; (8010510 <PrepareFrame+0x21c>)
 80103aa:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80103ae:	4b58      	ldr	r3, [pc, #352]	; (8010510 <PrepareFrame+0x21c>)
 80103b0:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80103b4:	4b56      	ldr	r3, [pc, #344]	; (8010510 <PrepareFrame+0x21c>)
 80103b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80103ba:	4b55      	ldr	r3, [pc, #340]	; (8010510 <PrepareFrame+0x21c>)
 80103bc:	4a55      	ldr	r2, [pc, #340]	; (8010514 <PrepareFrame+0x220>)
 80103be:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80103c2:	f107 0318 	add.w	r3, r7, #24
 80103c6:	4618      	mov	r0, r3
 80103c8:	f002 ffd8 	bl	801337c <LoRaMacCryptoGetFCntUp>
 80103cc:	4603      	mov	r3, r0
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d001      	beq.n	80103d6 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80103d2:	2312      	movs	r3, #18
 80103d4:	e098      	b.n	8010508 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80103d6:	69bb      	ldr	r3, [r7, #24]
 80103d8:	b29a      	uxth	r2, r3
 80103da:	4b4d      	ldr	r3, [pc, #308]	; (8010510 <PrepareFrame+0x21c>)
 80103dc:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 80103e0:	4b4b      	ldr	r3, [pc, #300]	; (8010510 <PrepareFrame+0x21c>)
 80103e2:	2200      	movs	r2, #0
 80103e4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 80103e8:	4b49      	ldr	r3, [pc, #292]	; (8010510 <PrepareFrame+0x21c>)
 80103ea:	2200      	movs	r2, #0
 80103ec:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80103f0:	69bb      	ldr	r3, [r7, #24]
 80103f2:	4a47      	ldr	r2, [pc, #284]	; (8010510 <PrepareFrame+0x21c>)
 80103f4:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80103f8:	f107 0314 	add.w	r3, r7, #20
 80103fc:	4618      	mov	r0, r3
 80103fe:	f002 f99b 	bl	8012738 <LoRaMacCommandsGetSizeSerializedCmds>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d001      	beq.n	801040c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010408:	2313      	movs	r3, #19
 801040a:	e07d      	b.n	8010508 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d076      	beq.n	8010500 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010412:	4b42      	ldr	r3, [pc, #264]	; (801051c <PrepareFrame+0x228>)
 8010414:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010418:	4618      	mov	r0, r3
 801041a:	f7fe fdab 	bl	800ef74 <GetMaxAppPayloadWithoutFOptsLength>
 801041e:	4603      	mov	r3, r0
 8010420:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010422:	4b3b      	ldr	r3, [pc, #236]	; (8010510 <PrepareFrame+0x21c>)
 8010424:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010428:	2b00      	cmp	r3, #0
 801042a:	d01d      	beq.n	8010468 <PrepareFrame+0x174>
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	2b0f      	cmp	r3, #15
 8010430:	d81a      	bhi.n	8010468 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010432:	f107 0314 	add.w	r3, r7, #20
 8010436:	4a3a      	ldr	r2, [pc, #232]	; (8010520 <PrepareFrame+0x22c>)
 8010438:	4619      	mov	r1, r3
 801043a:	200f      	movs	r0, #15
 801043c:	f002 f992 	bl	8012764 <LoRaMacCommandsSerializeCmds>
 8010440:	4603      	mov	r3, r0
 8010442:	2b00      	cmp	r3, #0
 8010444:	d001      	beq.n	801044a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010446:	2313      	movs	r3, #19
 8010448:	e05e      	b.n	8010508 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	f003 030f 	and.w	r3, r3, #15
 8010450:	b2d9      	uxtb	r1, r3
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	7813      	ldrb	r3, [r2, #0]
 8010456:	f361 0303 	bfi	r3, r1, #0, #4
 801045a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	781a      	ldrb	r2, [r3, #0]
 8010460:	4b2b      	ldr	r3, [pc, #172]	; (8010510 <PrepareFrame+0x21c>)
 8010462:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010466:	e04b      	b.n	8010500 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010468:	4b29      	ldr	r3, [pc, #164]	; (8010510 <PrepareFrame+0x21c>)
 801046a:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801046e:	2b00      	cmp	r3, #0
 8010470:	d010      	beq.n	8010494 <PrepareFrame+0x1a0>
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	2b0f      	cmp	r3, #15
 8010476:	d90d      	bls.n	8010494 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010478:	7ffb      	ldrb	r3, [r7, #31]
 801047a:	f107 0114 	add.w	r1, r7, #20
 801047e:	4a29      	ldr	r2, [pc, #164]	; (8010524 <PrepareFrame+0x230>)
 8010480:	4618      	mov	r0, r3
 8010482:	f002 f96f 	bl	8012764 <LoRaMacCommandsSerializeCmds>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d001      	beq.n	8010490 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801048c:	2313      	movs	r3, #19
 801048e:	e03b      	b.n	8010508 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010490:	230a      	movs	r3, #10
 8010492:	e039      	b.n	8010508 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010494:	7ffb      	ldrb	r3, [r7, #31]
 8010496:	f107 0114 	add.w	r1, r7, #20
 801049a:	4a22      	ldr	r2, [pc, #136]	; (8010524 <PrepareFrame+0x230>)
 801049c:	4618      	mov	r0, r3
 801049e:	f002 f961 	bl	8012764 <LoRaMacCommandsSerializeCmds>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d001      	beq.n	80104ac <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80104a8:	2313      	movs	r3, #19
 80104aa:	e02d      	b.n	8010508 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80104ac:	4b18      	ldr	r3, [pc, #96]	; (8010510 <PrepareFrame+0x21c>)
 80104ae:	2200      	movs	r2, #0
 80104b0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80104b4:	4b16      	ldr	r3, [pc, #88]	; (8010510 <PrepareFrame+0x21c>)
 80104b6:	4a1b      	ldr	r2, [pc, #108]	; (8010524 <PrepareFrame+0x230>)
 80104b8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	b2da      	uxtb	r2, r3
 80104c0:	4b13      	ldr	r3, [pc, #76]	; (8010510 <PrepareFrame+0x21c>)
 80104c2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80104c6:	e01b      	b.n	8010500 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d01a      	beq.n	8010504 <PrepareFrame+0x210>
 80104ce:	4b10      	ldr	r3, [pc, #64]	; (8010510 <PrepareFrame+0x21c>)
 80104d0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d015      	beq.n	8010504 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80104d8:	4813      	ldr	r0, [pc, #76]	; (8010528 <PrepareFrame+0x234>)
 80104da:	4b0d      	ldr	r3, [pc, #52]	; (8010510 <PrepareFrame+0x21c>)
 80104dc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80104e0:	b29b      	uxth	r3, r3
 80104e2:	461a      	mov	r2, r3
 80104e4:	6839      	ldr	r1, [r7, #0]
 80104e6:	f006 f8ee 	bl	80166c6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80104ea:	4b09      	ldr	r3, [pc, #36]	; (8010510 <PrepareFrame+0x21c>)
 80104ec:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	3301      	adds	r3, #1
 80104f4:	b29a      	uxth	r2, r3
 80104f6:	4b06      	ldr	r3, [pc, #24]	; (8010510 <PrepareFrame+0x21c>)
 80104f8:	801a      	strh	r2, [r3, #0]
            }
            break;
 80104fa:	e003      	b.n	8010504 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80104fc:	2302      	movs	r3, #2
 80104fe:	e003      	b.n	8010508 <PrepareFrame+0x214>
            break;
 8010500:	bf00      	nop
 8010502:	e000      	b.n	8010506 <PrepareFrame+0x212>
            break;
 8010504:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010506:	2300      	movs	r3, #0
}
 8010508:	4618      	mov	r0, r3
 801050a:	3720      	adds	r7, #32
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	2000054c 	.word	0x2000054c
 8010514:	20000684 	.word	0x20000684
 8010518:	2000054e 	.word	0x2000054e
 801051c:	20000a54 	.word	0x20000a54
 8010520:	20000664 	.word	0x20000664
 8010524:	200009d4 	.word	0x200009d4
 8010528:	2000054f 	.word	0x2000054f

0801052c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b08a      	sub	sp, #40	; 0x28
 8010530:	af00      	add	r7, sp, #0
 8010532:	4603      	mov	r3, r0
 8010534:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010536:	2303      	movs	r3, #3
 8010538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 801053c:	2300      	movs	r3, #0
 801053e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010540:	79fb      	ldrb	r3, [r7, #7]
 8010542:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010544:	4b47      	ldr	r3, [pc, #284]	; (8010664 <SendFrameOnChannel+0x138>)
 8010546:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801054a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801054c:	4b45      	ldr	r3, [pc, #276]	; (8010664 <SendFrameOnChannel+0x138>)
 801054e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010552:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010554:	4b43      	ldr	r3, [pc, #268]	; (8010664 <SendFrameOnChannel+0x138>)
 8010556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010558:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801055a:	4b42      	ldr	r3, [pc, #264]	; (8010664 <SendFrameOnChannel+0x138>)
 801055c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801055e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010560:	4b41      	ldr	r3, [pc, #260]	; (8010668 <SendFrameOnChannel+0x13c>)
 8010562:	881b      	ldrh	r3, [r3, #0]
 8010564:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010566:	4b3f      	ldr	r3, [pc, #252]	; (8010664 <SendFrameOnChannel+0x138>)
 8010568:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801056c:	f107 020f 	add.w	r2, r7, #15
 8010570:	f107 0110 	add.w	r1, r7, #16
 8010574:	4b3d      	ldr	r3, [pc, #244]	; (801066c <SendFrameOnChannel+0x140>)
 8010576:	f003 fe42 	bl	80141fe <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801057a:	4b3b      	ldr	r3, [pc, #236]	; (8010668 <SendFrameOnChannel+0x13c>)
 801057c:	2201      	movs	r2, #1
 801057e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010582:	4b38      	ldr	r3, [pc, #224]	; (8010664 <SendFrameOnChannel+0x138>)
 8010584:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010588:	b2da      	uxtb	r2, r3
 801058a:	4b37      	ldr	r3, [pc, #220]	; (8010668 <SendFrameOnChannel+0x13c>)
 801058c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8010590:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010594:	4b34      	ldr	r3, [pc, #208]	; (8010668 <SendFrameOnChannel+0x13c>)
 8010596:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 801059a:	79fb      	ldrb	r3, [r7, #7]
 801059c:	4a32      	ldr	r2, [pc, #200]	; (8010668 <SendFrameOnChannel+0x13c>)
 801059e:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80105a2:	4b31      	ldr	r3, [pc, #196]	; (8010668 <SendFrameOnChannel+0x13c>)
 80105a4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105a8:	4a2f      	ldr	r2, [pc, #188]	; (8010668 <SendFrameOnChannel+0x13c>)
 80105aa:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80105ae:	4b2e      	ldr	r3, [pc, #184]	; (8010668 <SendFrameOnChannel+0x13c>)
 80105b0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105b4:	4a2c      	ldr	r2, [pc, #176]	; (8010668 <SendFrameOnChannel+0x13c>)
 80105b6:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80105ba:	f001 fe69 	bl	8012290 <LoRaMacClassBIsBeaconModeActive>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d00b      	beq.n	80105dc <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80105c4:	4b28      	ldr	r3, [pc, #160]	; (8010668 <SendFrameOnChannel+0x13c>)
 80105c6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105ca:	4618      	mov	r0, r3
 80105cc:	f001 fecb 	bl	8012366 <LoRaMacClassBIsUplinkCollision>
 80105d0:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80105d2:	6a3b      	ldr	r3, [r7, #32]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d001      	beq.n	80105dc <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80105d8:	2310      	movs	r3, #16
 80105da:	e03e      	b.n	801065a <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80105dc:	4b21      	ldr	r3, [pc, #132]	; (8010664 <SendFrameOnChannel+0x138>)
 80105de:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d101      	bne.n	80105ea <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80105e6:	f001 fec8 	bl	801237a <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80105ea:	f001 fe62 	bl	80122b2 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80105ee:	4b1d      	ldr	r3, [pc, #116]	; (8010664 <SendFrameOnChannel+0x138>)
 80105f0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	4a1c      	ldr	r2, [pc, #112]	; (8010668 <SendFrameOnChannel+0x13c>)
 80105f8:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 80105fc:	4611      	mov	r1, r2
 80105fe:	4618      	mov	r0, r3
 8010600:	f7ff fc88 	bl	800ff14 <SecureFrame>
 8010604:	4603      	mov	r3, r0
 8010606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 801060a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801060e:	2b00      	cmp	r3, #0
 8010610:	d002      	beq.n	8010618 <SendFrameOnChannel+0xec>
    {
        return status;
 8010612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010616:	e020      	b.n	801065a <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010618:	4b13      	ldr	r3, [pc, #76]	; (8010668 <SendFrameOnChannel+0x13c>)
 801061a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801061e:	f043 0302 	orr.w	r3, r3, #2
 8010622:	4a11      	ldr	r2, [pc, #68]	; (8010668 <SendFrameOnChannel+0x13c>)
 8010624:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8010628:	4b0f      	ldr	r3, [pc, #60]	; (8010668 <SendFrameOnChannel+0x13c>)
 801062a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 801062e:	f083 0301 	eor.w	r3, r3, #1
 8010632:	b2db      	uxtb	r3, r3
 8010634:	2b00      	cmp	r3, #0
 8010636:	d007      	beq.n	8010648 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8010638:	4b0b      	ldr	r3, [pc, #44]	; (8010668 <SendFrameOnChannel+0x13c>)
 801063a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801063e:	3301      	adds	r3, #1
 8010640:	b2da      	uxtb	r2, r3
 8010642:	4b09      	ldr	r3, [pc, #36]	; (8010668 <SendFrameOnChannel+0x13c>)
 8010644:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010648:	4b09      	ldr	r3, [pc, #36]	; (8010670 <SendFrameOnChannel+0x144>)
 801064a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801064c:	4a06      	ldr	r2, [pc, #24]	; (8010668 <SendFrameOnChannel+0x13c>)
 801064e:	8812      	ldrh	r2, [r2, #0]
 8010650:	b2d2      	uxtb	r2, r2
 8010652:	4611      	mov	r1, r2
 8010654:	4807      	ldr	r0, [pc, #28]	; (8010674 <SendFrameOnChannel+0x148>)
 8010656:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010658:	2300      	movs	r3, #0
}
 801065a:	4618      	mov	r0, r3
 801065c:	3728      	adds	r7, #40	; 0x28
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	20000a54 	.word	0x20000a54
 8010668:	2000054c 	.word	0x2000054c
 801066c:	20000964 	.word	0x20000964
 8010670:	0801bed4 	.word	0x0801bed4
 8010674:	2000054e 	.word	0x2000054e

08010678 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b086      	sub	sp, #24
 801067c:	af00      	add	r7, sp, #0
 801067e:	4603      	mov	r3, r0
 8010680:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8010682:	4b15      	ldr	r3, [pc, #84]	; (80106d8 <SetTxContinuousWave+0x60>)
 8010684:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8010688:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801068a:	4b14      	ldr	r3, [pc, #80]	; (80106dc <SetTxContinuousWave+0x64>)
 801068c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010690:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010692:	4b12      	ldr	r3, [pc, #72]	; (80106dc <SetTxContinuousWave+0x64>)
 8010694:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010698:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801069a:	4b10      	ldr	r3, [pc, #64]	; (80106dc <SetTxContinuousWave+0x64>)
 801069c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801069e:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80106a0:	4b0e      	ldr	r3, [pc, #56]	; (80106dc <SetTxContinuousWave+0x64>)
 80106a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106a4:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 80106a6:	88fb      	ldrh	r3, [r7, #6]
 80106a8:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80106aa:	4b0c      	ldr	r3, [pc, #48]	; (80106dc <SetTxContinuousWave+0x64>)
 80106ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106b0:	f107 0208 	add.w	r2, r7, #8
 80106b4:	4611      	mov	r1, r2
 80106b6:	4618      	mov	r0, r3
 80106b8:	f003 fe50 	bl	801435c <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80106bc:	4b06      	ldr	r3, [pc, #24]	; (80106d8 <SetTxContinuousWave+0x60>)
 80106be:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106c2:	f043 0302 	orr.w	r3, r3, #2
 80106c6:	4a04      	ldr	r2, [pc, #16]	; (80106d8 <SetTxContinuousWave+0x60>)
 80106c8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3718      	adds	r7, #24
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	2000054c 	.word	0x2000054c
 80106dc:	20000a54 	.word	0x20000a54

080106e0 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	4603      	mov	r3, r0
 80106e8:	6039      	str	r1, [r7, #0]
 80106ea:	80fb      	strh	r3, [r7, #6]
 80106ec:	4613      	mov	r3, r2
 80106ee:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80106f0:	4b09      	ldr	r3, [pc, #36]	; (8010718 <SetTxContinuousWave1+0x38>)
 80106f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106f4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80106f8:	88fa      	ldrh	r2, [r7, #6]
 80106fa:	6838      	ldr	r0, [r7, #0]
 80106fc:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80106fe:	4b07      	ldr	r3, [pc, #28]	; (801071c <SetTxContinuousWave1+0x3c>)
 8010700:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010704:	f043 0302 	orr.w	r3, r3, #2
 8010708:	4a04      	ldr	r2, [pc, #16]	; (801071c <SetTxContinuousWave1+0x3c>)
 801070a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801070e:	2300      	movs	r3, #0
}
 8010710:	4618      	mov	r0, r3
 8010712:	3708      	adds	r7, #8
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	0801bed4 	.word	0x0801bed4
 801071c:	2000054c 	.word	0x2000054c

08010720 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 8010720:	b480      	push	{r7}
 8010722:	af00      	add	r7, sp, #0
    return &Nvm;
 8010724:	4b02      	ldr	r3, [pc, #8]	; (8010730 <GetNvmData+0x10>)
}
 8010726:	4618      	mov	r0, r3
 8010728:	46bd      	mov	sp, r7
 801072a:	bc80      	pop	{r7}
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	20000a54 	.word	0x20000a54

08010734 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 801073c:	2300      	movs	r3, #0
 801073e:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d101      	bne.n	801074a <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010746:	2303      	movs	r3, #3
 8010748:	e09a      	b.n	8010880 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801074a:	4b4f      	ldr	r3, [pc, #316]	; (8010888 <RestoreNvmData+0x154>)
 801074c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010750:	2b01      	cmp	r3, #1
 8010752:	d001      	beq.n	8010758 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8010754:	2301      	movs	r3, #1
 8010756:	e093      	b.n	8010880 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2124      	movs	r1, #36	; 0x24
 801075c:	4618      	mov	r0, r3
 801075e:	f006 f807 	bl	8016770 <Crc32>
 8010762:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010768:	68fa      	ldr	r2, [r7, #12]
 801076a:	429a      	cmp	r2, r3
 801076c:	d105      	bne.n	801077a <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2228      	movs	r2, #40	; 0x28
 8010772:	4619      	mov	r1, r3
 8010774:	4845      	ldr	r0, [pc, #276]	; (801088c <RestoreNvmData+0x158>)
 8010776:	f005 ffa6 	bl	80166c6 <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	3328      	adds	r3, #40	; 0x28
 801077e:	2114      	movs	r1, #20
 8010780:	4618      	mov	r0, r3
 8010782:	f005 fff5 	bl	8016770 <Crc32>
 8010786:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801078c:	68fa      	ldr	r2, [r7, #12]
 801078e:	429a      	cmp	r2, r3
 8010790:	d106      	bne.n	80107a0 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	3328      	adds	r3, #40	; 0x28
 8010796:	2218      	movs	r2, #24
 8010798:	4619      	mov	r1, r3
 801079a:	483d      	ldr	r0, [pc, #244]	; (8010890 <RestoreNvmData+0x15c>)
 801079c:	f005 ff93 	bl	80166c6 <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	3340      	adds	r3, #64	; 0x40
 80107a4:	21d4      	movs	r1, #212	; 0xd4
 80107a6:	4618      	mov	r0, r3
 80107a8:	f005 ffe2 	bl	8016770 <Crc32>
 80107ac:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80107b4:	68fa      	ldr	r2, [r7, #12]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d11f      	bne.n	80107fa <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	3340      	adds	r3, #64	; 0x40
 80107be:	22d8      	movs	r2, #216	; 0xd8
 80107c0:	4619      	mov	r1, r3
 80107c2:	4834      	ldr	r0, [pc, #208]	; (8010894 <RestoreNvmData+0x160>)
 80107c4:	f005 ff7f 	bl	80166c6 <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80107c8:	4b2f      	ldr	r3, [pc, #188]	; (8010888 <RestoreNvmData+0x154>)
 80107ca:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80107ce:	4b2e      	ldr	r3, [pc, #184]	; (8010888 <RestoreNvmData+0x154>)
 80107d0:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80107d4:	4b2d      	ldr	r3, [pc, #180]	; (801088c <RestoreNvmData+0x158>)
 80107d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107d8:	4a2b      	ldr	r2, [pc, #172]	; (8010888 <RestoreNvmData+0x154>)
 80107da:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80107de:	4b2b      	ldr	r3, [pc, #172]	; (801088c <RestoreNvmData+0x158>)
 80107e0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80107e4:	4b28      	ldr	r3, [pc, #160]	; (8010888 <RestoreNvmData+0x154>)
 80107e6:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80107ea:	4b27      	ldr	r3, [pc, #156]	; (8010888 <RestoreNvmData+0x154>)
 80107ec:	2201      	movs	r2, #1
 80107ee:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80107f2:	4b25      	ldr	r3, [pc, #148]	; (8010888 <RestoreNvmData+0x154>)
 80107f4:	2202      	movs	r2, #2
 80107f6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010800:	21bc      	movs	r1, #188	; 0xbc
 8010802:	4618      	mov	r0, r3
 8010804:	f005 ffb4 	bl	8016770 <Crc32>
 8010808:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8010810:	68fa      	ldr	r2, [r7, #12]
 8010812:	429a      	cmp	r2, r3
 8010814:	d107      	bne.n	8010826 <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801081c:	22c0      	movs	r2, #192	; 0xc0
 801081e:	4619      	mov	r1, r3
 8010820:	481d      	ldr	r0, [pc, #116]	; (8010898 <RestoreNvmData+0x164>)
 8010822:	f005 ff50 	bl	80166c6 <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801082c:	2190      	movs	r1, #144	; 0x90
 801082e:	4618      	mov	r0, r3
 8010830:	f005 ff9e 	bl	8016770 <Crc32>
 8010834:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801083c:	68fa      	ldr	r2, [r7, #12]
 801083e:	429a      	cmp	r2, r3
 8010840:	d107      	bne.n	8010852 <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010848:	2294      	movs	r2, #148	; 0x94
 801084a:	4619      	mov	r1, r3
 801084c:	4813      	ldr	r0, [pc, #76]	; (801089c <RestoreNvmData+0x168>)
 801084e:	f005 ff3a 	bl	80166c6 <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010858:	2114      	movs	r1, #20
 801085a:	4618      	mov	r0, r3
 801085c:	f005 ff88 	bl	8016770 <Crc32>
 8010860:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010868:	68fa      	ldr	r2, [r7, #12]
 801086a:	429a      	cmp	r2, r3
 801086c:	d107      	bne.n	801087e <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010874:	2218      	movs	r2, #24
 8010876:	4619      	mov	r1, r3
 8010878:	4809      	ldr	r0, [pc, #36]	; (80108a0 <RestoreNvmData+0x16c>)
 801087a:	f005 ff24 	bl	80166c6 <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 801087e:	2300      	movs	r3, #0
}
 8010880:	4618      	mov	r0, r3
 8010882:	3710      	adds	r7, #16
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	2000054c 	.word	0x2000054c
 801088c:	20000a54 	.word	0x20000a54
 8010890:	20000a7c 	.word	0x20000a7c
 8010894:	20000a94 	.word	0x20000a94
 8010898:	20000b6c 	.word	0x20000b6c
 801089c:	20000c2c 	.word	0x20000c2c
 80108a0:	20000d88 	.word	0x20000d88

080108a4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d002      	beq.n	80108ba <DetermineFrameType+0x16>
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d101      	bne.n	80108be <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80108ba:	2303      	movs	r3, #3
 80108bc:	e03b      	b.n	8010936 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	7b1b      	ldrb	r3, [r3, #12]
 80108c2:	f003 030f 	and.w	r3, r3, #15
 80108c6:	b2db      	uxtb	r3, r3
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d008      	beq.n	80108de <DetermineFrameType+0x3a>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d003      	beq.n	80108de <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	2200      	movs	r2, #0
 80108da:	701a      	strb	r2, [r3, #0]
 80108dc:	e02a      	b.n	8010934 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d103      	bne.n	80108f0 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	2201      	movs	r2, #1
 80108ec:	701a      	strb	r2, [r3, #0]
 80108ee:	e021      	b.n	8010934 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	7b1b      	ldrb	r3, [r3, #12]
 80108f4:	f003 030f 	and.w	r3, r3, #15
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d108      	bne.n	8010910 <DetermineFrameType+0x6c>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d103      	bne.n	8010910 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	2202      	movs	r2, #2
 801090c:	701a      	strb	r2, [r3, #0]
 801090e:	e011      	b.n	8010934 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	7b1b      	ldrb	r3, [r3, #12]
 8010914:	f003 030f 	and.w	r3, r3, #15
 8010918:	b2db      	uxtb	r3, r3
 801091a:	2b00      	cmp	r3, #0
 801091c:	d108      	bne.n	8010930 <DetermineFrameType+0x8c>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d003      	beq.n	8010930 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	2203      	movs	r2, #3
 801092c:	701a      	strb	r2, [r3, #0]
 801092e:	e001      	b.n	8010934 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010930:	2317      	movs	r3, #23
 8010932:	e000      	b.n	8010936 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010934:	2300      	movs	r3, #0
}
 8010936:	4618      	mov	r0, r3
 8010938:	370c      	adds	r7, #12
 801093a:	46bd      	mov	sp, r7
 801093c:	bc80      	pop	{r7}
 801093e:	4770      	bx	lr

08010940 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8010940:	b480      	push	{r7}
 8010942:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8010944:	4b12      	ldr	r3, [pc, #72]	; (8010990 <CheckRetransUnconfirmedUplink+0x50>)
 8010946:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 801094a:	4b12      	ldr	r3, [pc, #72]	; (8010994 <CheckRetransUnconfirmedUplink+0x54>)
 801094c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8010950:	429a      	cmp	r2, r3
 8010952:	d301      	bcc.n	8010958 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8010954:	2301      	movs	r3, #1
 8010956:	e016      	b.n	8010986 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010958:	4b0d      	ldr	r3, [pc, #52]	; (8010990 <CheckRetransUnconfirmedUplink+0x50>)
 801095a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801095e:	f003 0302 	and.w	r3, r3, #2
 8010962:	b2db      	uxtb	r3, r3
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00d      	beq.n	8010984 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010968:	4b0a      	ldr	r3, [pc, #40]	; (8010994 <CheckRetransUnconfirmedUplink+0x54>)
 801096a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801096e:	2b00      	cmp	r3, #0
 8010970:	d101      	bne.n	8010976 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8010972:	2301      	movs	r3, #1
 8010974:	e007      	b.n	8010986 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8010976:	4b06      	ldr	r3, [pc, #24]	; (8010990 <CheckRetransUnconfirmedUplink+0x50>)
 8010978:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801097c:	2b00      	cmp	r3, #0
 801097e:	d101      	bne.n	8010984 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8010980:	2301      	movs	r3, #1
 8010982:	e000      	b.n	8010986 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8010984:	2300      	movs	r3, #0
}
 8010986:	4618      	mov	r0, r3
 8010988:	46bd      	mov	sp, r7
 801098a:	bc80      	pop	{r7}
 801098c:	4770      	bx	lr
 801098e:	bf00      	nop
 8010990:	2000054c 	.word	0x2000054c
 8010994:	20000a54 	.word	0x20000a54

08010998 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010998:	b480      	push	{r7}
 801099a:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 801099c:	4b0e      	ldr	r3, [pc, #56]	; (80109d8 <CheckRetransConfirmedUplink+0x40>)
 801099e:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 80109a2:	4b0d      	ldr	r3, [pc, #52]	; (80109d8 <CheckRetransConfirmedUplink+0x40>)
 80109a4:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d301      	bcc.n	80109b0 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80109ac:	2301      	movs	r3, #1
 80109ae:	e00f      	b.n	80109d0 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80109b0:	4b09      	ldr	r3, [pc, #36]	; (80109d8 <CheckRetransConfirmedUplink+0x40>)
 80109b2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80109b6:	f003 0302 	and.w	r3, r3, #2
 80109ba:	b2db      	uxtb	r3, r3
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d006      	beq.n	80109ce <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80109c0:	4b05      	ldr	r3, [pc, #20]	; (80109d8 <CheckRetransConfirmedUplink+0x40>)
 80109c2:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d001      	beq.n	80109ce <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80109ca:	2301      	movs	r3, #1
 80109cc:	e000      	b.n	80109d0 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80109ce:	2300      	movs	r3, #0
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bc80      	pop	{r7}
 80109d6:	4770      	bx	lr
 80109d8:	2000054c 	.word	0x2000054c

080109dc <StopRetransmission>:

static bool StopRetransmission( void )
{
 80109dc:	b480      	push	{r7}
 80109de:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80109e0:	4b1a      	ldr	r3, [pc, #104]	; (8010a4c <StopRetransmission+0x70>)
 80109e2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80109e6:	f003 0302 	and.w	r3, r3, #2
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d009      	beq.n	8010a04 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80109f0:	4b16      	ldr	r3, [pc, #88]	; (8010a4c <StopRetransmission+0x70>)
 80109f2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00e      	beq.n	8010a18 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80109fa:	4b14      	ldr	r3, [pc, #80]	; (8010a4c <StopRetransmission+0x70>)
 80109fc:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d009      	beq.n	8010a18 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010a04:	4b12      	ldr	r3, [pc, #72]	; (8010a50 <StopRetransmission+0x74>)
 8010a06:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d004      	beq.n	8010a18 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8010a0e:	4b10      	ldr	r3, [pc, #64]	; (8010a50 <StopRetransmission+0x74>)
 8010a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a12:	3301      	adds	r3, #1
 8010a14:	4a0e      	ldr	r2, [pc, #56]	; (8010a50 <StopRetransmission+0x74>)
 8010a16:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010a18:	4b0c      	ldr	r3, [pc, #48]	; (8010a4c <StopRetransmission+0x70>)
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8010a20:	4b0a      	ldr	r3, [pc, #40]	; (8010a4c <StopRetransmission+0x70>)
 8010a22:	2200      	movs	r2, #0
 8010a24:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8010a28:	4b08      	ldr	r3, [pc, #32]	; (8010a4c <StopRetransmission+0x70>)
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010a30:	4b06      	ldr	r3, [pc, #24]	; (8010a4c <StopRetransmission+0x70>)
 8010a32:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a36:	f023 0302 	bic.w	r3, r3, #2
 8010a3a:	4a04      	ldr	r2, [pc, #16]	; (8010a4c <StopRetransmission+0x70>)
 8010a3c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8010a40:	2301      	movs	r3, #1
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bc80      	pop	{r7}
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop
 8010a4c:	2000054c 	.word	0x2000054c
 8010a50:	20000a54 	.word	0x20000a54

08010a54 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010a5e:	4b0b      	ldr	r3, [pc, #44]	; (8010a8c <CallNvmDataChangeCallback+0x38>)
 8010a60:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d00c      	beq.n	8010a82 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010a68:	4b08      	ldr	r3, [pc, #32]	; (8010a8c <CallNvmDataChangeCallback+0x38>)
 8010a6a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010a6e:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d006      	beq.n	8010a82 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010a74:	4b05      	ldr	r3, [pc, #20]	; (8010a8c <CallNvmDataChangeCallback+0x38>)
 8010a76:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010a7a:	68db      	ldr	r3, [r3, #12]
 8010a7c:	88fa      	ldrh	r2, [r7, #6]
 8010a7e:	4610      	mov	r0, r2
 8010a80:	4798      	blx	r3
    }
}
 8010a82:	bf00      	nop
 8010a84:	3708      	adds	r7, #8
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop
 8010a8c:	2000054c 	.word	0x2000054c

08010a90 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b084      	sub	sp, #16
 8010a94:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010a96:	4b1b      	ldr	r3, [pc, #108]	; (8010b04 <AckTimeoutRetriesProcess+0x74>)
 8010a98:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010a9c:	4b19      	ldr	r3, [pc, #100]	; (8010b04 <AckTimeoutRetriesProcess+0x74>)
 8010a9e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d229      	bcs.n	8010afa <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010aa6:	4b17      	ldr	r3, [pc, #92]	; (8010b04 <AckTimeoutRetriesProcess+0x74>)
 8010aa8:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010aac:	3301      	adds	r3, #1
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	4b14      	ldr	r3, [pc, #80]	; (8010b04 <AckTimeoutRetriesProcess+0x74>)
 8010ab2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8010ab6:	4b13      	ldr	r3, [pc, #76]	; (8010b04 <AckTimeoutRetriesProcess+0x74>)
 8010ab8:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010abc:	f003 0301 	and.w	r3, r3, #1
 8010ac0:	b2db      	uxtb	r3, r3
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d019      	beq.n	8010afa <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010ac6:	2322      	movs	r3, #34	; 0x22
 8010ac8:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010aca:	4b0f      	ldr	r3, [pc, #60]	; (8010b08 <AckTimeoutRetriesProcess+0x78>)
 8010acc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010ad0:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010ad2:	4b0d      	ldr	r3, [pc, #52]	; (8010b08 <AckTimeoutRetriesProcess+0x78>)
 8010ad4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010ad8:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ada:	4b0b      	ldr	r3, [pc, #44]	; (8010b08 <AckTimeoutRetriesProcess+0x78>)
 8010adc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ae0:	f107 0208 	add.w	r2, r7, #8
 8010ae4:	4611      	mov	r1, r2
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f003 fae2 	bl	80140b0 <RegionGetPhyParam>
 8010aec:	4603      	mov	r3, r0
 8010aee:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	b25a      	sxtb	r2, r3
 8010af4:	4b04      	ldr	r3, [pc, #16]	; (8010b08 <AckTimeoutRetriesProcess+0x78>)
 8010af6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8010afa:	bf00      	nop
 8010afc:	3710      	adds	r7, #16
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	2000054c 	.word	0x2000054c
 8010b08:	20000a54 	.word	0x20000a54

08010b0c <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b084      	sub	sp, #16
 8010b10:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8010b12:	4b14      	ldr	r3, [pc, #80]	; (8010b64 <AckTimeoutRetriesFinalize+0x58>)
 8010b14:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010b18:	f083 0301 	eor.w	r3, r3, #1
 8010b1c:	b2db      	uxtb	r3, r3
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d015      	beq.n	8010b4e <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010b22:	2302      	movs	r3, #2
 8010b24:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8010b26:	4b10      	ldr	r3, [pc, #64]	; (8010b68 <AckTimeoutRetriesFinalize+0x5c>)
 8010b28:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8010b2a:	4b10      	ldr	r3, [pc, #64]	; (8010b6c <AckTimeoutRetriesFinalize+0x60>)
 8010b2c:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010b2e:	4b10      	ldr	r3, [pc, #64]	; (8010b70 <AckTimeoutRetriesFinalize+0x64>)
 8010b30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b34:	1d3a      	adds	r2, r7, #4
 8010b36:	4611      	mov	r1, r2
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f003 fae3 	bl	8014104 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8010b3e:	4b09      	ldr	r3, [pc, #36]	; (8010b64 <AckTimeoutRetriesFinalize+0x58>)
 8010b40:	2200      	movs	r2, #0
 8010b42:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8010b46:	4b07      	ldr	r3, [pc, #28]	; (8010b64 <AckTimeoutRetriesFinalize+0x58>)
 8010b48:	2200      	movs	r2, #0
 8010b4a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010b4e:	4b05      	ldr	r3, [pc, #20]	; (8010b64 <AckTimeoutRetriesFinalize+0x58>)
 8010b50:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010b54:	4b03      	ldr	r3, [pc, #12]	; (8010b64 <AckTimeoutRetriesFinalize+0x58>)
 8010b56:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8010b5a:	bf00      	nop
 8010b5c:	3710      	adds	r7, #16
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	2000054c 	.word	0x2000054c
 8010b68:	20000c2c 	.word	0x20000c2c
 8010b6c:	20000cc0 	.word	0x20000cc0
 8010b70:	20000a54 	.word	0x20000a54

08010b74 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8010b74:	b480      	push	{r7}
 8010b76:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010b78:	4b0b      	ldr	r3, [pc, #44]	; (8010ba8 <IsRequestPending+0x34>)
 8010b7a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010b7e:	f003 0304 	and.w	r3, r3, #4
 8010b82:	b2db      	uxtb	r3, r3
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d107      	bne.n	8010b98 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010b88:	4b07      	ldr	r3, [pc, #28]	; (8010ba8 <IsRequestPending+0x34>)
 8010b8a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010b8e:	f003 0301 	and.w	r3, r3, #1
 8010b92:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d001      	beq.n	8010b9c <IsRequestPending+0x28>
    {
        return 1;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e000      	b.n	8010b9e <IsRequestPending+0x2a>
    }
    return 0;
 8010b9c:	2300      	movs	r3, #0
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bc80      	pop	{r7}
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop
 8010ba8:	2000054c 	.word	0x2000054c

08010bac <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010bac:	b590      	push	{r4, r7, lr}
 8010bae:	b08f      	sub	sp, #60	; 0x3c
 8010bb0:	af02      	add	r7, sp, #8
 8010bb2:	6178      	str	r0, [r7, #20]
 8010bb4:	6139      	str	r1, [r7, #16]
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d002      	beq.n	8010bc6 <LoRaMacInitialization+0x1a>
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d101      	bne.n	8010bca <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010bc6:	2303      	movs	r3, #3
 8010bc8:	e275      	b.n	80110b6 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00b      	beq.n	8010bea <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d007      	beq.n	8010bea <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d003      	beq.n	8010bea <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d101      	bne.n	8010bee <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010bea:	2303      	movs	r3, #3
 8010bec:	e263      	b.n	80110b6 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010bee:	7bfb      	ldrb	r3, [r7, #15]
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f003 fa4d 	bl	8014090 <RegionIsActive>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	f083 0301 	eor.w	r3, r3, #1
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d001      	beq.n	8010c06 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010c02:	2309      	movs	r3, #9
 8010c04:	e257      	b.n	80110b6 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010c06:	6978      	ldr	r0, [r7, #20]
 8010c08:	f001 fef6 	bl	80129f8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010c0c:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8010c10:	2100      	movs	r1, #0
 8010c12:	48c7      	ldr	r0, [pc, #796]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010c14:	f005 fd92 	bl	801673c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010c18:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8010c1c:	2100      	movs	r1, #0
 8010c1e:	48c5      	ldr	r0, [pc, #788]	; (8010f34 <LoRaMacInitialization+0x388>)
 8010c20:	f005 fd8c 	bl	801673c <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010c24:	4bc3      	ldr	r3, [pc, #780]	; (8010f34 <LoRaMacInitialization+0x388>)
 8010c26:	2201      	movs	r2, #1
 8010c28:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8010c2c:	4bc1      	ldr	r3, [pc, #772]	; (8010f34 <LoRaMacInitialization+0x388>)
 8010c2e:	2201      	movs	r2, #1
 8010c30:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8010c34:	4abe      	ldr	r2, [pc, #760]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010c36:	7bfb      	ldrb	r3, [r7, #15]
 8010c38:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010c3c:	4bbc      	ldr	r3, [pc, #752]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010c3e:	2200      	movs	r2, #0
 8010c40:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010c44:	4bba      	ldr	r3, [pc, #744]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010c46:	2200      	movs	r2, #0
 8010c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010c4c:	4bb8      	ldr	r3, [pc, #736]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010c4e:	4aba      	ldr	r2, [pc, #744]	; (8010f38 <LoRaMacInitialization+0x38c>)
 8010c50:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010c54:	230f      	movs	r3, #15
 8010c56:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c5a:	4bb5      	ldr	r3, [pc, #724]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010c5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c64:	4611      	mov	r1, r2
 8010c66:	4618      	mov	r0, r3
 8010c68:	f003 fa22 	bl	80140b0 <RegionGetPhyParam>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	bf14      	ite	ne
 8010c76:	2301      	movne	r3, #1
 8010c78:	2300      	moveq	r3, #0
 8010c7a:	b2da      	uxtb	r2, r3
 8010c7c:	4bac      	ldr	r3, [pc, #688]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010c7e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010c82:	230a      	movs	r3, #10
 8010c84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c88:	4ba9      	ldr	r3, [pc, #676]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c92:	4611      	mov	r1, r2
 8010c94:	4618      	mov	r0, r3
 8010c96:	f003 fa0b 	bl	80140b0 <RegionGetPhyParam>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca0:	b25a      	sxtb	r2, r3
 8010ca2:	4ba3      	ldr	r3, [pc, #652]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010ca4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010ca8:	2306      	movs	r3, #6
 8010caa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cae:	4ba0      	ldr	r3, [pc, #640]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010cb8:	4611      	mov	r1, r2
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f003 f9f8 	bl	80140b0 <RegionGetPhyParam>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc6:	b25a      	sxtb	r2, r3
 8010cc8:	4b99      	ldr	r3, [pc, #612]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010cca:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010cce:	2310      	movs	r3, #16
 8010cd0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cd4:	4b96      	ldr	r3, [pc, #600]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010cde:	4611      	mov	r1, r2
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f003 f9e5 	bl	80140b0 <RegionGetPhyParam>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cec:	4a90      	ldr	r2, [pc, #576]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010cee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010cf2:	2311      	movs	r3, #17
 8010cf4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cf8:	4b8d      	ldr	r3, [pc, #564]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d02:	4611      	mov	r1, r2
 8010d04:	4618      	mov	r0, r3
 8010d06:	f003 f9d3 	bl	80140b0 <RegionGetPhyParam>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d10:	4a87      	ldr	r2, [pc, #540]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010d16:	2312      	movs	r3, #18
 8010d18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d1c:	4b84      	ldr	r3, [pc, #528]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d26:	4611      	mov	r1, r2
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f003 f9c1 	bl	80140b0 <RegionGetPhyParam>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d34:	4a7e      	ldr	r2, [pc, #504]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010d36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010d3a:	2313      	movs	r3, #19
 8010d3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d40:	4b7b      	ldr	r3, [pc, #492]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d4a:	4611      	mov	r1, r2
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f003 f9af 	bl	80140b0 <RegionGetPhyParam>
 8010d52:	4603      	mov	r3, r0
 8010d54:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d58:	4a75      	ldr	r2, [pc, #468]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010d5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010d5e:	2314      	movs	r3, #20
 8010d60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d64:	4b72      	ldr	r3, [pc, #456]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d6e:	4611      	mov	r1, r2
 8010d70:	4618      	mov	r0, r3
 8010d72:	f003 f99d 	bl	80140b0 <RegionGetPhyParam>
 8010d76:	4603      	mov	r3, r0
 8010d78:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d7c:	4a6c      	ldr	r2, [pc, #432]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010d7e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010d82:	2317      	movs	r3, #23
 8010d84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d88:	4b69      	ldr	r3, [pc, #420]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d92:	4611      	mov	r1, r2
 8010d94:	4618      	mov	r0, r3
 8010d96:	f003 f98b 	bl	80140b0 <RegionGetPhyParam>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da0:	b2da      	uxtb	r2, r3
 8010da2:	4b63      	ldr	r3, [pc, #396]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010da4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010da8:	2318      	movs	r3, #24
 8010daa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dae:	4b60      	ldr	r3, [pc, #384]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010db0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010db4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010db8:	4611      	mov	r1, r2
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f003 f978 	bl	80140b0 <RegionGetPhyParam>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc6:	4a5a      	ldr	r2, [pc, #360]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010dc8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dce:	4a58      	ldr	r2, [pc, #352]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010dd0:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010dd4:	2319      	movs	r3, #25
 8010dd6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dda:	4b55      	ldr	r3, [pc, #340]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010de0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010de4:	4611      	mov	r1, r2
 8010de6:	4618      	mov	r0, r3
 8010de8:	f003 f962 	bl	80140b0 <RegionGetPhyParam>
 8010dec:	4603      	mov	r3, r0
 8010dee:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df2:	b2da      	uxtb	r2, r3
 8010df4:	4b4e      	ldr	r3, [pc, #312]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010df6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfc:	b2da      	uxtb	r2, r3
 8010dfe:	4b4c      	ldr	r3, [pc, #304]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010e00:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010e04:	231e      	movs	r3, #30
 8010e06:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e0a:	4b49      	ldr	r3, [pc, #292]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e14:	4611      	mov	r1, r2
 8010e16:	4618      	mov	r0, r3
 8010e18:	f003 f94a 	bl	80140b0 <RegionGetPhyParam>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e22:	b2da      	uxtb	r2, r3
 8010e24:	4b42      	ldr	r3, [pc, #264]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010e26:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010e2a:	231f      	movs	r3, #31
 8010e2c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e30:	4b3f      	ldr	r3, [pc, #252]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e3a:	4611      	mov	r1, r2
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f003 f937 	bl	80140b0 <RegionGetPhyParam>
 8010e42:	4603      	mov	r3, r0
 8010e44:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e48:	b2da      	uxtb	r2, r3
 8010e4a:	4b39      	ldr	r3, [pc, #228]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010e4c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010e50:	2320      	movs	r3, #32
 8010e52:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e56:	4b36      	ldr	r3, [pc, #216]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e60:	4611      	mov	r1, r2
 8010e62:	4618      	mov	r0, r3
 8010e64:	f003 f924 	bl	80140b0 <RegionGetPhyParam>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6e:	4a30      	ldr	r2, [pc, #192]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010e70:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010e74:	2321      	movs	r3, #33	; 0x21
 8010e76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e7a:	4b2d      	ldr	r3, [pc, #180]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010e7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e80:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e84:	4611      	mov	r1, r2
 8010e86:	4618      	mov	r0, r3
 8010e88:	f003 f912 	bl	80140b0 <RegionGetPhyParam>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e92:	4a27      	ldr	r2, [pc, #156]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010e94:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010e98:	230b      	movs	r3, #11
 8010e9a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e9e:	4b24      	ldr	r3, [pc, #144]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ea4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ea8:	4611      	mov	r1, r2
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f003 f900 	bl	80140b0 <RegionGetPhyParam>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	4b1e      	ldr	r3, [pc, #120]	; (8010f34 <LoRaMacInitialization+0x388>)
 8010eba:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010ebe:	230c      	movs	r3, #12
 8010ec0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ec4:	4b1a      	ldr	r3, [pc, #104]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010eca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ece:	4611      	mov	r1, r2
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f003 f8ed 	bl	80140b0 <RegionGetPhyParam>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8010eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010edc:	b29a      	uxth	r2, r3
 8010ede:	4b15      	ldr	r3, [pc, #84]	; (8010f34 <LoRaMacInitialization+0x388>)
 8010ee0:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010ee4:	4b12      	ldr	r3, [pc, #72]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010eec:	4b10      	ldr	r3, [pc, #64]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010eee:	220a      	movs	r2, #10
 8010ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010ef4:	4b0e      	ldr	r3, [pc, #56]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010ef6:	2206      	movs	r2, #6
 8010ef8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010efc:	4b0c      	ldr	r3, [pc, #48]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f02:	4a0b      	ldr	r2, [pc, #44]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010f04:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010f06:	4b0a      	ldr	r3, [pc, #40]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010f08:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010f0c:	4b08      	ldr	r3, [pc, #32]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010f0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010f12:	4b07      	ldr	r3, [pc, #28]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f18:	4a05      	ldr	r2, [pc, #20]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010f1c:	4b04      	ldr	r3, [pc, #16]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f22:	4a03      	ldr	r2, [pc, #12]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010f24:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010f26:	4b02      	ldr	r3, [pc, #8]	; (8010f30 <LoRaMacInitialization+0x384>)
 8010f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f2c:	e006      	b.n	8010f3c <LoRaMacInitialization+0x390>
 8010f2e:	bf00      	nop
 8010f30:	20000a54 	.word	0x20000a54
 8010f34:	2000054c 	.word	0x2000054c
 8010f38:	01000300 	.word	0x01000300
 8010f3c:	4a60      	ldr	r2, [pc, #384]	; (80110c0 <LoRaMacInitialization+0x514>)
 8010f3e:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010f40:	4b5f      	ldr	r3, [pc, #380]	; (80110c0 <LoRaMacInitialization+0x514>)
 8010f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010f46:	4a5e      	ldr	r2, [pc, #376]	; (80110c0 <LoRaMacInitialization+0x514>)
 8010f48:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010f4a:	4b5d      	ldr	r3, [pc, #372]	; (80110c0 <LoRaMacInitialization+0x514>)
 8010f4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010f50:	4a5b      	ldr	r2, [pc, #364]	; (80110c0 <LoRaMacInitialization+0x514>)
 8010f52:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010f54:	4b5a      	ldr	r3, [pc, #360]	; (80110c0 <LoRaMacInitialization+0x514>)
 8010f56:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8010f5a:	4b59      	ldr	r3, [pc, #356]	; (80110c0 <LoRaMacInitialization+0x514>)
 8010f5c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010f60:	2300      	movs	r3, #0
 8010f62:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010f66:	4b57      	ldr	r3, [pc, #348]	; (80110c4 <LoRaMacInitialization+0x518>)
 8010f68:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010f6a:	4b57      	ldr	r3, [pc, #348]	; (80110c8 <LoRaMacInitialization+0x51c>)
 8010f6c:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010f6e:	4b54      	ldr	r3, [pc, #336]	; (80110c0 <LoRaMacInitialization+0x514>)
 8010f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f74:	f107 0218 	add.w	r2, r7, #24
 8010f78:	4611      	mov	r1, r2
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f003 f8c2 	bl	8014104 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8010f80:	4a52      	ldr	r2, [pc, #328]	; (80110cc <LoRaMacInitialization+0x520>)
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010f88:	f7ff f85a 	bl	8010040 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010f8c:	4b4c      	ldr	r3, [pc, #304]	; (80110c0 <LoRaMacInitialization+0x514>)
 8010f8e:	2201      	movs	r2, #1
 8010f90:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8010f94:	4a4d      	ldr	r2, [pc, #308]	; (80110cc <LoRaMacInitialization+0x520>)
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010f9c:	4b4b      	ldr	r3, [pc, #300]	; (80110cc <LoRaMacInitialization+0x520>)
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010fa4:	4b49      	ldr	r3, [pc, #292]	; (80110cc <LoRaMacInitialization+0x520>)
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010fac:	4b44      	ldr	r3, [pc, #272]	; (80110c0 <LoRaMacInitialization+0x514>)
 8010fae:	2200      	movs	r2, #0
 8010fb0:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010fb2:	4b43      	ldr	r3, [pc, #268]	; (80110c0 <LoRaMacInitialization+0x514>)
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010fb8:	2300      	movs	r3, #0
 8010fba:	9300      	str	r3, [sp, #0]
 8010fbc:	4b44      	ldr	r3, [pc, #272]	; (80110d0 <LoRaMacInitialization+0x524>)
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8010fc4:	4843      	ldr	r0, [pc, #268]	; (80110d4 <LoRaMacInitialization+0x528>)
 8010fc6:	f009 facb 	bl	801a560 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010fca:	2300      	movs	r3, #0
 8010fcc:	9300      	str	r3, [sp, #0]
 8010fce:	4b42      	ldr	r3, [pc, #264]	; (80110d8 <LoRaMacInitialization+0x52c>)
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8010fd6:	4841      	ldr	r0, [pc, #260]	; (80110dc <LoRaMacInitialization+0x530>)
 8010fd8:	f009 fac2 	bl	801a560 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010fdc:	2300      	movs	r3, #0
 8010fde:	9300      	str	r3, [sp, #0]
 8010fe0:	4b3f      	ldr	r3, [pc, #252]	; (80110e0 <LoRaMacInitialization+0x534>)
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8010fe8:	483e      	ldr	r0, [pc, #248]	; (80110e4 <LoRaMacInitialization+0x538>)
 8010fea:	f009 fab9 	bl	801a560 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010fee:	2300      	movs	r3, #0
 8010ff0:	9300      	str	r3, [sp, #0]
 8010ff2:	4b3d      	ldr	r3, [pc, #244]	; (80110e8 <LoRaMacInitialization+0x53c>)
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	f04f 31ff 	mov.w	r1, #4294967295
 8010ffa:	483c      	ldr	r0, [pc, #240]	; (80110ec <LoRaMacInitialization+0x540>)
 8010ffc:	f009 fab0 	bl	801a560 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011000:	4c2f      	ldr	r4, [pc, #188]	; (80110c0 <LoRaMacInitialization+0x514>)
 8011002:	463b      	mov	r3, r7
 8011004:	4618      	mov	r0, r3
 8011006:	f008 fe33 	bl	8019c70 <SysTimeGetMcuTime>
 801100a:	f504 7382 	add.w	r3, r4, #260	; 0x104
 801100e:	463a      	mov	r2, r7
 8011010:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011014:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011018:	4b2c      	ldr	r3, [pc, #176]	; (80110cc <LoRaMacInitialization+0x520>)
 801101a:	4a35      	ldr	r2, [pc, #212]	; (80110f0 <LoRaMacInitialization+0x544>)
 801101c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011020:	4b2a      	ldr	r3, [pc, #168]	; (80110cc <LoRaMacInitialization+0x520>)
 8011022:	4a34      	ldr	r2, [pc, #208]	; (80110f4 <LoRaMacInitialization+0x548>)
 8011024:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011028:	4b28      	ldr	r3, [pc, #160]	; (80110cc <LoRaMacInitialization+0x520>)
 801102a:	4a33      	ldr	r2, [pc, #204]	; (80110f8 <LoRaMacInitialization+0x54c>)
 801102c:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011030:	4b26      	ldr	r3, [pc, #152]	; (80110cc <LoRaMacInitialization+0x520>)
 8011032:	4a32      	ldr	r2, [pc, #200]	; (80110fc <LoRaMacInitialization+0x550>)
 8011034:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011038:	4b24      	ldr	r3, [pc, #144]	; (80110cc <LoRaMacInitialization+0x520>)
 801103a:	4a31      	ldr	r2, [pc, #196]	; (8011100 <LoRaMacInitialization+0x554>)
 801103c:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011040:	4b30      	ldr	r3, [pc, #192]	; (8011104 <LoRaMacInitialization+0x558>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	4830      	ldr	r0, [pc, #192]	; (8011108 <LoRaMacInitialization+0x55c>)
 8011046:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	689b      	ldr	r3, [r3, #8]
 801104c:	4619      	mov	r1, r3
 801104e:	482f      	ldr	r0, [pc, #188]	; (801110c <LoRaMacInitialization+0x560>)
 8011050:	f7fa ff52 	bl	800bef8 <SecureElementInit>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	d001      	beq.n	801105e <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801105a:	2311      	movs	r3, #17
 801105c:	e02b      	b.n	80110b6 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801105e:	4818      	ldr	r0, [pc, #96]	; (80110c0 <LoRaMacInitialization+0x514>)
 8011060:	f002 f950 	bl	8013304 <LoRaMacCryptoInit>
 8011064:	4603      	mov	r3, r0
 8011066:	2b00      	cmp	r3, #0
 8011068:	d001      	beq.n	801106e <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801106a:	2311      	movs	r3, #17
 801106c:	e023      	b.n	80110b6 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801106e:	f001 fa95 	bl	801259c <LoRaMacCommandsInit>
 8011072:	4603      	mov	r3, r0
 8011074:	2b00      	cmp	r3, #0
 8011076:	d001      	beq.n	801107c <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011078:	2313      	movs	r3, #19
 801107a:	e01c      	b.n	80110b6 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801107c:	4824      	ldr	r0, [pc, #144]	; (8011110 <LoRaMacInitialization+0x564>)
 801107e:	f002 f9ff 	bl	8013480 <LoRaMacCryptoSetMulticastReference>
 8011082:	4603      	mov	r3, r0
 8011084:	2b00      	cmp	r3, #0
 8011086:	d001      	beq.n	801108c <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011088:	2311      	movs	r3, #17
 801108a:	e014      	b.n	80110b6 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 801108c:	4b1d      	ldr	r3, [pc, #116]	; (8011104 <LoRaMacInitialization+0x558>)
 801108e:	695b      	ldr	r3, [r3, #20]
 8011090:	4798      	blx	r3
 8011092:	4603      	mov	r3, r0
 8011094:	4618      	mov	r0, r3
 8011096:	f005 faf1 	bl	801667c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801109a:	4b1a      	ldr	r3, [pc, #104]	; (8011104 <LoRaMacInitialization+0x558>)
 801109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801109e:	4a08      	ldr	r2, [pc, #32]	; (80110c0 <LoRaMacInitialization+0x514>)
 80110a0:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 80110a4:	4610      	mov	r0, r2
 80110a6:	4798      	blx	r3
    Radio.Sleep( );
 80110a8:	4b16      	ldr	r3, [pc, #88]	; (8011104 <LoRaMacInitialization+0x558>)
 80110aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110ac:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80110ae:	2001      	movs	r0, #1
 80110b0:	f7fd faaa 	bl	800e608 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80110b4:	2300      	movs	r3, #0
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3734      	adds	r7, #52	; 0x34
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd90      	pop	{r4, r7, pc}
 80110be:	bf00      	nop
 80110c0:	20000a54 	.word	0x20000a54
 80110c4:	20000c2c 	.word	0x20000c2c
 80110c8:	20000cc0 	.word	0x20000cc0
 80110cc:	2000054c 	.word	0x2000054c
 80110d0:	0800eb91 	.word	0x0800eb91
 80110d4:	200008b4 	.word	0x200008b4
 80110d8:	0800ec05 	.word	0x0800ec05
 80110dc:	200008cc 	.word	0x200008cc
 80110e0:	0800ec71 	.word	0x0800ec71
 80110e4:	200008e4 	.word	0x200008e4
 80110e8:	0800ece5 	.word	0x0800ece5
 80110ec:	20000944 	.word	0x20000944
 80110f0:	0800d795 	.word	0x0800d795
 80110f4:	0800d80d 	.word	0x0800d80d
 80110f8:	0800d8e5 	.word	0x0800d8e5
 80110fc:	0800d899 	.word	0x0800d899
 8011100:	0800d921 	.word	0x0800d921
 8011104:	0801bed4 	.word	0x0801bed4
 8011108:	20000898 	.word	0x20000898
 801110c:	20000b6c 	.word	0x20000b6c
 8011110:	20000b24 	.word	0x20000b24

08011114 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011114:	b480      	push	{r7}
 8011116:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011118:	4b04      	ldr	r3, [pc, #16]	; (801112c <LoRaMacStart+0x18>)
 801111a:	2200      	movs	r2, #0
 801111c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8011120:	2300      	movs	r3, #0
}
 8011122:	4618      	mov	r0, r3
 8011124:	46bd      	mov	sp, r7
 8011126:	bc80      	pop	{r7}
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop
 801112c:	2000054c 	.word	0x2000054c

08011130 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b08a      	sub	sp, #40	; 0x28
 8011134:	af00      	add	r7, sp, #0
 8011136:	4603      	mov	r3, r0
 8011138:	6039      	str	r1, [r7, #0]
 801113a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801113c:	4b3e      	ldr	r3, [pc, #248]	; (8011238 <LoRaMacQueryTxPossible+0x108>)
 801113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011140:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011142:	4b3d      	ldr	r3, [pc, #244]	; (8011238 <LoRaMacQueryTxPossible+0x108>)
 8011144:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8011148:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801114a:	4b3b      	ldr	r3, [pc, #236]	; (8011238 <LoRaMacQueryTxPossible+0x108>)
 801114c:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8011150:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 8011152:	2300      	movs	r3, #0
 8011154:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d101      	bne.n	8011160 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801115c:	2303      	movs	r3, #3
 801115e:	e066      	b.n	801122e <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8011160:	4b35      	ldr	r3, [pc, #212]	; (8011238 <LoRaMacQueryTxPossible+0x108>)
 8011162:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8011166:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8011168:	2300      	movs	r3, #0
 801116a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801116c:	4b32      	ldr	r3, [pc, #200]	; (8011238 <LoRaMacQueryTxPossible+0x108>)
 801116e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011172:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011174:	4b30      	ldr	r3, [pc, #192]	; (8011238 <LoRaMacQueryTxPossible+0x108>)
 8011176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011178:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801117a:	4b30      	ldr	r3, [pc, #192]	; (801123c <LoRaMacQueryTxPossible+0x10c>)
 801117c:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8011180:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011182:	4b2e      	ldr	r3, [pc, #184]	; (801123c <LoRaMacQueryTxPossible+0x10c>)
 8011184:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8011188:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801118a:	4b2b      	ldr	r3, [pc, #172]	; (8011238 <LoRaMacQueryTxPossible+0x108>)
 801118c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011190:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011194:	4b28      	ldr	r3, [pc, #160]	; (8011238 <LoRaMacQueryTxPossible+0x108>)
 8011196:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801119a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801119e:	4b26      	ldr	r3, [pc, #152]	; (8011238 <LoRaMacQueryTxPossible+0x108>)
 80111a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80111a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80111a8:	4b23      	ldr	r3, [pc, #140]	; (8011238 <LoRaMacQueryTxPossible+0x108>)
 80111aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80111b2:	f107 0310 	add.w	r3, r7, #16
 80111b6:	f107 020e 	add.w	r2, r7, #14
 80111ba:	f107 010f 	add.w	r1, r7, #15
 80111be:	f107 0014 	add.w	r0, r7, #20
 80111c2:	f000 ffe1 	bl	8012188 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80111c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fd fed2 	bl	800ef74 <GetMaxAppPayloadWithoutFOptsLength>
 80111d0:	4603      	mov	r3, r0
 80111d2:	461a      	mov	r2, r3
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80111d8:	f107 0308 	add.w	r3, r7, #8
 80111dc:	4618      	mov	r0, r3
 80111de:	f001 faab 	bl	8012738 <LoRaMacCommandsGetSizeSerializedCmds>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d001      	beq.n	80111ec <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80111e8:	2313      	movs	r3, #19
 80111ea:	e020      	b.n	801122e <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	2b0f      	cmp	r3, #15
 80111f0:	d819      	bhi.n	8011226 <LoRaMacQueryTxPossible+0xf6>
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	785b      	ldrb	r3, [r3, #1]
 80111f6:	461a      	mov	r2, r3
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d313      	bcc.n	8011226 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	785a      	ldrb	r2, [r3, #1]
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	b2db      	uxtb	r3, r3
 8011206:	1ad3      	subs	r3, r2, r3
 8011208:	b2da      	uxtb	r2, r3
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	785b      	ldrb	r3, [r3, #1]
 8011212:	4619      	mov	r1, r3
 8011214:	79fa      	ldrb	r2, [r7, #7]
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	4413      	add	r3, r2
 801121a:	4299      	cmp	r1, r3
 801121c:	d301      	bcc.n	8011222 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801121e:	2300      	movs	r3, #0
 8011220:	e005      	b.n	801122e <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011222:	2308      	movs	r3, #8
 8011224:	e003      	b.n	801122e <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	2200      	movs	r2, #0
 801122a:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801122c:	2308      	movs	r3, #8
    }
}
 801122e:	4618      	mov	r0, r3
 8011230:	3728      	adds	r7, #40	; 0x28
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}
 8011236:	bf00      	nop
 8011238:	20000a54 	.word	0x20000a54
 801123c:	2000054c 	.word	0x2000054c

08011240 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011240:	b590      	push	{r4, r7, lr}
 8011242:	b087      	sub	sp, #28
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011248:	2300      	movs	r3, #0
 801124a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d101      	bne.n	8011256 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011252:	2303      	movs	r3, #3
 8011254:	e14b      	b.n	80114ee <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	781b      	ldrb	r3, [r3, #0]
 801125a:	2b28      	cmp	r3, #40	; 0x28
 801125c:	f200 8140 	bhi.w	80114e0 <LoRaMacMibGetRequestConfirm+0x2a0>
 8011260:	a201      	add	r2, pc, #4	; (adr r2, 8011268 <LoRaMacMibGetRequestConfirm+0x28>)
 8011262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011266:	bf00      	nop
 8011268:	0801130d 	.word	0x0801130d
 801126c:	08011319 	.word	0x08011319
 8011270:	08011325 	.word	0x08011325
 8011274:	08011331 	.word	0x08011331
 8011278:	0801133d 	.word	0x0801133d
 801127c:	08011349 	.word	0x08011349
 8011280:	08011355 	.word	0x08011355
 8011284:	080114e1 	.word	0x080114e1
 8011288:	080114e1 	.word	0x080114e1
 801128c:	080114e1 	.word	0x080114e1
 8011290:	080114e1 	.word	0x080114e1
 8011294:	080114e1 	.word	0x080114e1
 8011298:	080114e1 	.word	0x080114e1
 801129c:	080114e1 	.word	0x080114e1
 80112a0:	080114e1 	.word	0x080114e1
 80112a4:	08011361 	.word	0x08011361
 80112a8:	0801136d 	.word	0x0801136d
 80112ac:	08011379 	.word	0x08011379
 80112b0:	0801139b 	.word	0x0801139b
 80112b4:	080113ad 	.word	0x080113ad
 80112b8:	080113bf 	.word	0x080113bf
 80112bc:	080113d1 	.word	0x080113d1
 80112c0:	08011405 	.word	0x08011405
 80112c4:	080113e3 	.word	0x080113e3
 80112c8:	08011427 	.word	0x08011427
 80112cc:	08011433 	.word	0x08011433
 80112d0:	0801143d 	.word	0x0801143d
 80112d4:	08011447 	.word	0x08011447
 80112d8:	08011451 	.word	0x08011451
 80112dc:	0801145b 	.word	0x0801145b
 80112e0:	08011465 	.word	0x08011465
 80112e4:	08011471 	.word	0x08011471
 80112e8:	08011489 	.word	0x08011489
 80112ec:	0801147d 	.word	0x0801147d
 80112f0:	08011495 	.word	0x08011495
 80112f4:	0801149f 	.word	0x0801149f
 80112f8:	080114ab 	.word	0x080114ab
 80112fc:	080114c1 	.word	0x080114c1
 8011300:	080114b5 	.word	0x080114b5
 8011304:	080114e1 	.word	0x080114e1
 8011308:	080114cd 	.word	0x080114cd
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 801130c:	4b7a      	ldr	r3, [pc, #488]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801130e:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	711a      	strb	r2, [r3, #4]
            break;
 8011316:	e0e9      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011318:	4b77      	ldr	r3, [pc, #476]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801131a:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	711a      	strb	r2, [r3, #4]
            break;
 8011322:	e0e3      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011324:	f7fb f88e 	bl	800c444 <SecureElementGetDevEui>
 8011328:	4602      	mov	r2, r0
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	605a      	str	r2, [r3, #4]
            break;
 801132e:	e0dd      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011330:	f7fb f8aa 	bl	800c488 <SecureElementGetJoinEui>
 8011334:	4602      	mov	r2, r0
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	605a      	str	r2, [r3, #4]
            break;
 801133a:	e0d7      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 801133c:	4b6e      	ldr	r3, [pc, #440]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801133e:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	711a      	strb	r2, [r3, #4]
            break;
 8011346:	e0d1      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011348:	4b6b      	ldr	r3, [pc, #428]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801134a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	605a      	str	r2, [r3, #4]
            break;
 8011352:	e0cb      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011354:	4b68      	ldr	r3, [pc, #416]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011356:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	605a      	str	r2, [r3, #4]
            break;
 801135e:	e0c5      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011360:	4b65      	ldr	r3, [pc, #404]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011362:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	711a      	strb	r2, [r3, #4]
            break;
 801136a:	e0bf      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801136c:	4b62      	ldr	r3, [pc, #392]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801136e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	711a      	strb	r2, [r3, #4]
            break;
 8011376:	e0b9      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011378:	231d      	movs	r3, #29
 801137a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801137c:	4b5e      	ldr	r3, [pc, #376]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801137e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011382:	f107 0210 	add.w	r2, r7, #16
 8011386:	4611      	mov	r1, r2
 8011388:	4618      	mov	r0, r3
 801138a:	f002 fe91 	bl	80140b0 <RegionGetPhyParam>
 801138e:	4603      	mov	r3, r0
 8011390:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011392:	68fa      	ldr	r2, [r7, #12]
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	605a      	str	r2, [r3, #4]
            break;
 8011398:	e0a8      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	4a56      	ldr	r2, [pc, #344]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801139e:	3304      	adds	r3, #4
 80113a0:	3264      	adds	r2, #100	; 0x64
 80113a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113a6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113aa:	e09f      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4a52      	ldr	r2, [pc, #328]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113b0:	3304      	adds	r3, #4
 80113b2:	32a4      	adds	r2, #164	; 0xa4
 80113b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113b8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113bc:	e096      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	4a4d      	ldr	r2, [pc, #308]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113c2:	3304      	adds	r3, #4
 80113c4:	326c      	adds	r2, #108	; 0x6c
 80113c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113ca:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113ce:	e08d      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	4a49      	ldr	r2, [pc, #292]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113d4:	3304      	adds	r3, #4
 80113d6:	32ac      	adds	r2, #172	; 0xac
 80113d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113dc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113e0:	e084      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80113e2:	231b      	movs	r3, #27
 80113e4:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113e6:	4b44      	ldr	r3, [pc, #272]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113ec:	f107 0210 	add.w	r2, r7, #16
 80113f0:	4611      	mov	r1, r2
 80113f2:	4618      	mov	r0, r3
 80113f4:	f002 fe5c 	bl	80140b0 <RegionGetPhyParam>
 80113f8:	4603      	mov	r3, r0
 80113fa:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80113fc:	68fa      	ldr	r2, [r7, #12]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	605a      	str	r2, [r3, #4]
            break;
 8011402:	e073      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011404:	231a      	movs	r3, #26
 8011406:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011408:	4b3b      	ldr	r3, [pc, #236]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801140a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801140e:	f107 0210 	add.w	r2, r7, #16
 8011412:	4611      	mov	r1, r2
 8011414:	4618      	mov	r0, r3
 8011416:	f002 fe4b 	bl	80140b0 <RegionGetPhyParam>
 801141a:	4603      	mov	r3, r0
 801141c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801141e:	68fa      	ldr	r2, [r7, #12]
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	605a      	str	r2, [r3, #4]
            break;
 8011424:	e062      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011426:	4b34      	ldr	r3, [pc, #208]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011428:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	711a      	strb	r2, [r3, #4]
            break;
 8011430:	e05c      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011432:	4b31      	ldr	r3, [pc, #196]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011434:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	605a      	str	r2, [r3, #4]
            break;
 801143a:	e057      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 801143c:	4b2e      	ldr	r3, [pc, #184]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801143e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	605a      	str	r2, [r3, #4]
            break;
 8011444:	e052      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011446:	4b2c      	ldr	r3, [pc, #176]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	605a      	str	r2, [r3, #4]
            break;
 801144e:	e04d      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011450:	4b29      	ldr	r3, [pc, #164]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011452:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	605a      	str	r2, [r3, #4]
            break;
 8011458:	e048      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801145a:	4b27      	ldr	r3, [pc, #156]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801145c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	605a      	str	r2, [r3, #4]
            break;
 8011462:	e043      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011464:	4b24      	ldr	r3, [pc, #144]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011466:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	711a      	strb	r2, [r3, #4]
            break;
 801146e:	e03d      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011470:	4b21      	ldr	r3, [pc, #132]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011472:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	711a      	strb	r2, [r3, #4]
            break;
 801147a:	e037      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801147c:	4b1e      	ldr	r3, [pc, #120]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801147e:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	711a      	strb	r2, [r3, #4]
            break;
 8011486:	e031      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011488:	4b1b      	ldr	r3, [pc, #108]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801148a:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	711a      	strb	r2, [r3, #4]
            break;
 8011492:	e02b      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011494:	4b18      	ldr	r3, [pc, #96]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	605a      	str	r2, [r3, #4]
            break;
 801149c:	e026      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801149e:	4b16      	ldr	r3, [pc, #88]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	711a      	strb	r2, [r3, #4]
            break;
 80114a8:	e020      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80114aa:	4b13      	ldr	r3, [pc, #76]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114ac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	605a      	str	r2, [r3, #4]
            break;
 80114b2:	e01b      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 80114b4:	f7ff f934 	bl	8010720 <GetNvmData>
 80114b8:	4602      	mov	r2, r0
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	605a      	str	r2, [r3, #4]
            break;
 80114be:	e015      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80114c0:	4b0d      	ldr	r3, [pc, #52]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114c2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	605a      	str	r2, [r3, #4]
            break;
 80114ca:	e00f      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	4a0a      	ldr	r2, [pc, #40]	; (80114f8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114d0:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80114d4:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80114d6:	687c      	ldr	r4, [r7, #4]
 80114d8:	f002 ff74 	bl	80143c4 <RegionGetVersion>
 80114dc:	60a0      	str	r0, [r4, #8]
            break;
 80114de:	e005      	b.n	80114ec <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f000 fefd 	bl	80122e0 <LoRaMacClassBMibGetRequestConfirm>
 80114e6:	4603      	mov	r3, r0
 80114e8:	75fb      	strb	r3, [r7, #23]
            break;
 80114ea:	bf00      	nop
        }
    }
    return status;
 80114ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	371c      	adds	r7, #28
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd90      	pop	{r4, r7, pc}
 80114f6:	bf00      	nop
 80114f8:	20000a54 	.word	0x20000a54

080114fc <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b086      	sub	sp, #24
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011504:	2300      	movs	r3, #0
 8011506:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d101      	bne.n	8011512 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801150e:	2303      	movs	r3, #3
 8011510:	e32b      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011512:	4bbe      	ldr	r3, [pc, #760]	; (801180c <LoRaMacMibSetRequestConfirm+0x310>)
 8011514:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011518:	f003 0302 	and.w	r3, r3, #2
 801151c:	2b00      	cmp	r3, #0
 801151e:	d001      	beq.n	8011524 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011520:	2301      	movs	r3, #1
 8011522:	e322      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	2b27      	cmp	r3, #39	; 0x27
 801152a:	f200 82fc 	bhi.w	8011b26 <LoRaMacMibSetRequestConfirm+0x62a>
 801152e:	a201      	add	r2, pc, #4	; (adr r2, 8011534 <LoRaMacMibSetRequestConfirm+0x38>)
 8011530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011534:	080115d5 	.word	0x080115d5
 8011538:	080115e5 	.word	0x080115e5
 801153c:	080115ff 	.word	0x080115ff
 8011540:	08011617 	.word	0x08011617
 8011544:	0801162f 	.word	0x0801162f
 8011548:	0801163b 	.word	0x0801163b
 801154c:	08011647 	.word	0x08011647
 8011550:	08011653 	.word	0x08011653
 8011554:	08011679 	.word	0x08011679
 8011558:	0801169f 	.word	0x0801169f
 801155c:	080116c5 	.word	0x080116c5
 8011560:	080116eb 	.word	0x080116eb
 8011564:	08011711 	.word	0x08011711
 8011568:	08011737 	.word	0x08011737
 801156c:	0801175d 	.word	0x0801175d
 8011570:	08011783 	.word	0x08011783
 8011574:	080117a3 	.word	0x080117a3
 8011578:	08011b27 	.word	0x08011b27
 801157c:	080117af 	.word	0x080117af
 8011580:	0801182b 	.word	0x0801182b
 8011584:	0801186b 	.word	0x0801186b
 8011588:	080118cd 	.word	0x080118cd
 801158c:	0801193d 	.word	0x0801193d
 8011590:	0801190d 	.word	0x0801190d
 8011594:	0801196d 	.word	0x0801196d
 8011598:	0801198f 	.word	0x0801198f
 801159c:	08011999 	.word	0x08011999
 80115a0:	080119a3 	.word	0x080119a3
 80115a4:	080119ad 	.word	0x080119ad
 80115a8:	080119b7 	.word	0x080119b7
 80115ac:	080119c1 	.word	0x080119c1
 80115b0:	080119f3 	.word	0x080119f3
 80115b4:	08011a5f 	.word	0x08011a5f
 80115b8:	08011a2d 	.word	0x08011a2d
 80115bc:	08011a91 	.word	0x08011a91
 80115c0:	08011aa7 	.word	0x08011aa7
 80115c4:	08011abf 	.word	0x08011abf
 80115c8:	08011ac9 	.word	0x08011ac9
 80115cc:	08011ad5 	.word	0x08011ad5
 80115d0:	08011afd 	.word	0x08011afd
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	791b      	ldrb	r3, [r3, #4]
 80115d8:	4618      	mov	r0, r3
 80115da:	f7fd fbfb 	bl	800edd4 <SwitchClass>
 80115de:	4603      	mov	r3, r0
 80115e0:	75fb      	strb	r3, [r7, #23]
            break;
 80115e2:	e2c1      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	791b      	ldrb	r3, [r3, #4]
 80115e8:	2b02      	cmp	r3, #2
 80115ea:	d005      	beq.n	80115f8 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	791a      	ldrb	r2, [r3, #4]
 80115f0:	4b87      	ldr	r3, [pc, #540]	; (8011810 <LoRaMacMibSetRequestConfirm+0x314>)
 80115f2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80115f6:	e2b7      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80115f8:	2303      	movs	r3, #3
 80115fa:	75fb      	strb	r3, [r7, #23]
            break;
 80115fc:	e2b4      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	4618      	mov	r0, r3
 8011604:	f7fa ff06 	bl	800c414 <SecureElementSetDevEui>
 8011608:	4603      	mov	r3, r0
 801160a:	2b00      	cmp	r3, #0
 801160c:	f000 8291 	beq.w	8011b32 <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011610:	2303      	movs	r3, #3
 8011612:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011614:	e28d      	b.n	8011b32 <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	4618      	mov	r0, r3
 801161c:	f7fa ff1c 	bl	800c458 <SecureElementSetJoinEui>
 8011620:	4603      	mov	r3, r0
 8011622:	2b00      	cmp	r3, #0
 8011624:	f000 8287 	beq.w	8011b36 <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011628:	2303      	movs	r3, #3
 801162a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801162c:	e283      	b.n	8011b36 <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	791a      	ldrb	r2, [r3, #4]
 8011632:	4b77      	ldr	r3, [pc, #476]	; (8011810 <LoRaMacMibSetRequestConfirm+0x314>)
 8011634:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 8011638:	e296      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	4a74      	ldr	r2, [pc, #464]	; (8011810 <LoRaMacMibSetRequestConfirm+0x314>)
 8011640:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 8011644:	e290      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	4a71      	ldr	r2, [pc, #452]	; (8011810 <LoRaMacMibSetRequestConfirm+0x314>)
 801164c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8011650:	e28a      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d00b      	beq.n	8011672 <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	685b      	ldr	r3, [r3, #4]
 801165e:	4619      	mov	r1, r3
 8011660:	2000      	movs	r0, #0
 8011662:	f001 ff35 	bl	80134d0 <LoRaMacCryptoSetKey>
 8011666:	4603      	mov	r3, r0
 8011668:	2b00      	cmp	r3, #0
 801166a:	f000 8266 	beq.w	8011b3a <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801166e:	2311      	movs	r3, #17
 8011670:	e27b      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011672:	2303      	movs	r3, #3
 8011674:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011676:	e260      	b.n	8011b3a <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d00b      	beq.n	8011698 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	4619      	mov	r1, r3
 8011686:	2001      	movs	r0, #1
 8011688:	f001 ff22 	bl	80134d0 <LoRaMacCryptoSetKey>
 801168c:	4603      	mov	r3, r0
 801168e:	2b00      	cmp	r3, #0
 8011690:	f000 8255 	beq.w	8011b3e <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011694:	2311      	movs	r3, #17
 8011696:	e268      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011698:	2303      	movs	r3, #3
 801169a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801169c:	e24f      	b.n	8011b3e <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d00b      	beq.n	80116be <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	4619      	mov	r1, r3
 80116ac:	2002      	movs	r0, #2
 80116ae:	f001 ff0f 	bl	80134d0 <LoRaMacCryptoSetKey>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	f000 8244 	beq.w	8011b42 <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80116ba:	2311      	movs	r3, #17
 80116bc:	e255      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116be:	2303      	movs	r3, #3
 80116c0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116c2:	e23e      	b.n	8011b42 <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d00b      	beq.n	80116e4 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	685b      	ldr	r3, [r3, #4]
 80116d0:	4619      	mov	r1, r3
 80116d2:	2003      	movs	r0, #3
 80116d4:	f001 fefc 	bl	80134d0 <LoRaMacCryptoSetKey>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	f000 8233 	beq.w	8011b46 <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80116e0:	2311      	movs	r3, #17
 80116e2:	e242      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116e4:	2303      	movs	r3, #3
 80116e6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116e8:	e22d      	b.n	8011b46 <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d00b      	beq.n	801170a <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	4619      	mov	r1, r3
 80116f8:	207f      	movs	r0, #127	; 0x7f
 80116fa:	f001 fee9 	bl	80134d0 <LoRaMacCryptoSetKey>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	f000 8222 	beq.w	8011b4a <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011706:	2311      	movs	r3, #17
 8011708:	e22f      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801170a:	2303      	movs	r3, #3
 801170c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801170e:	e21c      	b.n	8011b4a <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00b      	beq.n	8011730 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	4619      	mov	r1, r3
 801171e:	2080      	movs	r0, #128	; 0x80
 8011720:	f001 fed6 	bl	80134d0 <LoRaMacCryptoSetKey>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	f000 8211 	beq.w	8011b4e <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801172c:	2311      	movs	r3, #17
 801172e:	e21c      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011730:	2303      	movs	r3, #3
 8011732:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011734:	e20b      	b.n	8011b4e <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d00b      	beq.n	8011756 <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	4619      	mov	r1, r3
 8011744:	2081      	movs	r0, #129	; 0x81
 8011746:	f001 fec3 	bl	80134d0 <LoRaMacCryptoSetKey>
 801174a:	4603      	mov	r3, r0
 801174c:	2b00      	cmp	r3, #0
 801174e:	f000 8200 	beq.w	8011b52 <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011752:	2311      	movs	r3, #17
 8011754:	e209      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011756:	2303      	movs	r3, #3
 8011758:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801175a:	e1fa      	b.n	8011b52 <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d00b      	beq.n	801177c <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	4619      	mov	r1, r3
 801176a:	2082      	movs	r0, #130	; 0x82
 801176c:	f001 feb0 	bl	80134d0 <LoRaMacCryptoSetKey>
 8011770:	4603      	mov	r3, r0
 8011772:	2b00      	cmp	r3, #0
 8011774:	f000 81ef 	beq.w	8011b56 <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011778:	2311      	movs	r3, #17
 801177a:	e1f6      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801177c:	2303      	movs	r3, #3
 801177e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011780:	e1e9      	b.n	8011b56 <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	791a      	ldrb	r2, [r3, #4]
 8011786:	4b22      	ldr	r3, [pc, #136]	; (8011810 <LoRaMacMibSetRequestConfirm+0x314>)
 8011788:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801178c:	4b21      	ldr	r3, [pc, #132]	; (8011814 <LoRaMacMibSetRequestConfirm+0x318>)
 801178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011790:	4a1f      	ldr	r2, [pc, #124]	; (8011810 <LoRaMacMibSetRequestConfirm+0x314>)
 8011792:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8011796:	4610      	mov	r0, r2
 8011798:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801179a:	4b1e      	ldr	r3, [pc, #120]	; (8011814 <LoRaMacMibSetRequestConfirm+0x318>)
 801179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801179e:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80117a0:	e1e2      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	791a      	ldrb	r2, [r3, #4]
 80117a6:	4b1a      	ldr	r3, [pc, #104]	; (8011810 <LoRaMacMibSetRequestConfirm+0x314>)
 80117a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80117ac:	e1dc      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	7a1b      	ldrb	r3, [r3, #8]
 80117b2:	b25b      	sxtb	r3, r3
 80117b4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80117b6:	4b16      	ldr	r3, [pc, #88]	; (8011810 <LoRaMacMibSetRequestConfirm+0x314>)
 80117b8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80117bc:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80117be:	4b14      	ldr	r3, [pc, #80]	; (8011810 <LoRaMacMibSetRequestConfirm+0x314>)
 80117c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117c4:	f107 0108 	add.w	r1, r7, #8
 80117c8:	2207      	movs	r2, #7
 80117ca:	4618      	mov	r0, r3
 80117cc:	f002 fcac 	bl	8014128 <RegionVerify>
 80117d0:	4603      	mov	r3, r0
 80117d2:	f083 0301 	eor.w	r3, r3, #1
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d002      	beq.n	80117e2 <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117dc:	2303      	movs	r3, #3
 80117de:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80117e0:	e1c2      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80117e8:	4b09      	ldr	r3, [pc, #36]	; (8011810 <LoRaMacMibSetRequestConfirm+0x314>)
 80117ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117ee:	f107 0108 	add.w	r1, r7, #8
 80117f2:	2200      	movs	r2, #0
 80117f4:	4618      	mov	r0, r3
 80117f6:	f002 fc97 	bl	8014128 <RegionVerify>
 80117fa:	4603      	mov	r3, r0
 80117fc:	f083 0301 	eor.w	r3, r3, #1
 8011800:	b2db      	uxtb	r3, r3
 8011802:	2b00      	cmp	r3, #0
 8011804:	d008      	beq.n	8011818 <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011806:	2303      	movs	r3, #3
 8011808:	75fb      	strb	r3, [r7, #23]
            break;
 801180a:	e1ad      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
 801180c:	2000054c 	.word	0x2000054c
 8011810:	20000a54 	.word	0x20000a54
 8011814:	0801bed4 	.word	0x0801bed4
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011818:	4bb6      	ldr	r3, [pc, #728]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801181a:	687a      	ldr	r2, [r7, #4]
 801181c:	3364      	adds	r3, #100	; 0x64
 801181e:	3204      	adds	r2, #4
 8011820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011824:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011828:	e19e      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	7a1b      	ldrb	r3, [r3, #8]
 801182e:	b25b      	sxtb	r3, r3
 8011830:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011832:	4bb0      	ldr	r3, [pc, #704]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011834:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011838:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801183a:	4bae      	ldr	r3, [pc, #696]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801183c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011840:	f107 0108 	add.w	r1, r7, #8
 8011844:	2207      	movs	r2, #7
 8011846:	4618      	mov	r0, r3
 8011848:	f002 fc6e 	bl	8014128 <RegionVerify>
 801184c:	4603      	mov	r3, r0
 801184e:	2b00      	cmp	r3, #0
 8011850:	d008      	beq.n	8011864 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011852:	4ba8      	ldr	r3, [pc, #672]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	33a4      	adds	r3, #164	; 0xa4
 8011858:	3204      	adds	r2, #4
 801185a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801185e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011862:	e181      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011864:	2303      	movs	r3, #3
 8011866:	75fb      	strb	r3, [r7, #23]
            break;
 8011868:	e17e      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	7a1b      	ldrb	r3, [r3, #8]
 801186e:	b25b      	sxtb	r3, r3
 8011870:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011872:	4ba0      	ldr	r3, [pc, #640]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011874:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011878:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801187a:	4b9e      	ldr	r3, [pc, #632]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801187c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011880:	f107 0108 	add.w	r1, r7, #8
 8011884:	2207      	movs	r2, #7
 8011886:	4618      	mov	r0, r3
 8011888:	f002 fc4e 	bl	8014128 <RegionVerify>
 801188c:	4603      	mov	r3, r0
 801188e:	2b00      	cmp	r3, #0
 8011890:	d019      	beq.n	80118c6 <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011892:	4b98      	ldr	r3, [pc, #608]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	336c      	adds	r3, #108	; 0x6c
 8011898:	3204      	adds	r2, #4
 801189a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801189e:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80118a2:	4b94      	ldr	r3, [pc, #592]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118a4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80118a8:	2b02      	cmp	r3, #2
 80118aa:	f040 8156 	bne.w	8011b5a <LoRaMacMibSetRequestConfirm+0x65e>
 80118ae:	4b91      	ldr	r3, [pc, #580]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118b0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f000 8150 	beq.w	8011b5a <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80118ba:	4b8f      	ldr	r3, [pc, #572]	; (8011af8 <LoRaMacMibSetRequestConfirm+0x5fc>)
 80118bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118be:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80118c0:	f7fe fcda 	bl	8010278 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80118c4:	e149      	b.n	8011b5a <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118c6:	2303      	movs	r3, #3
 80118c8:	75fb      	strb	r3, [r7, #23]
            break;
 80118ca:	e146      	b.n	8011b5a <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	7a1b      	ldrb	r3, [r3, #8]
 80118d0:	b25b      	sxtb	r3, r3
 80118d2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80118d4:	4b87      	ldr	r3, [pc, #540]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118d6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80118da:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80118dc:	4b85      	ldr	r3, [pc, #532]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80118e2:	f107 0108 	add.w	r1, r7, #8
 80118e6:	2207      	movs	r2, #7
 80118e8:	4618      	mov	r0, r3
 80118ea:	f002 fc1d 	bl	8014128 <RegionVerify>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d008      	beq.n	8011906 <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80118f4:	4b7f      	ldr	r3, [pc, #508]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	33ac      	adds	r3, #172	; 0xac
 80118fa:	3204      	adds	r2, #4
 80118fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011900:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011904:	e130      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011906:	2303      	movs	r3, #3
 8011908:	75fb      	strb	r3, [r7, #23]
            break;
 801190a:	e12d      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011912:	2301      	movs	r3, #1
 8011914:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011916:	4b77      	ldr	r3, [pc, #476]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011918:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801191c:	f107 020c 	add.w	r2, r7, #12
 8011920:	4611      	mov	r1, r2
 8011922:	4618      	mov	r0, r3
 8011924:	f002 fc29 	bl	801417a <RegionChanMaskSet>
 8011928:	4603      	mov	r3, r0
 801192a:	f083 0301 	eor.w	r3, r3, #1
 801192e:	b2db      	uxtb	r3, r3
 8011930:	2b00      	cmp	r3, #0
 8011932:	f000 8114 	beq.w	8011b5e <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011936:	2303      	movs	r3, #3
 8011938:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801193a:	e110      	b.n	8011b5e <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	685b      	ldr	r3, [r3, #4]
 8011940:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011942:	2300      	movs	r3, #0
 8011944:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011946:	4b6b      	ldr	r3, [pc, #428]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011948:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801194c:	f107 020c 	add.w	r2, r7, #12
 8011950:	4611      	mov	r1, r2
 8011952:	4618      	mov	r0, r3
 8011954:	f002 fc11 	bl	801417a <RegionChanMaskSet>
 8011958:	4603      	mov	r3, r0
 801195a:	f083 0301 	eor.w	r3, r3, #1
 801195e:	b2db      	uxtb	r3, r3
 8011960:	2b00      	cmp	r3, #0
 8011962:	f000 80fe 	beq.w	8011b62 <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011966:	2303      	movs	r3, #3
 8011968:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801196a:	e0fa      	b.n	8011b62 <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	791b      	ldrb	r3, [r3, #4]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d009      	beq.n	8011988 <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011978:	2b0f      	cmp	r3, #15
 801197a:	d805      	bhi.n	8011988 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	791a      	ldrb	r2, [r3, #4]
 8011980:	4b5c      	ldr	r3, [pc, #368]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011982:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011986:	e0ef      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011988:	2303      	movs	r3, #3
 801198a:	75fb      	strb	r3, [r7, #23]
            break;
 801198c:	e0ec      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	4a58      	ldr	r2, [pc, #352]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011994:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8011996:	e0e7      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	685b      	ldr	r3, [r3, #4]
 801199c:	4a55      	ldr	r2, [pc, #340]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801199e:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80119a0:	e0e2      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	4a53      	ldr	r2, [pc, #332]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119a8:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80119aa:	e0dd      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	4a50      	ldr	r2, [pc, #320]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119b2:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80119b4:	e0d8      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	4a4e      	ldr	r2, [pc, #312]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119bc:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80119be:	e0d3      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80119c6:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80119c8:	4b4a      	ldr	r3, [pc, #296]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80119ce:	f107 0108 	add.w	r1, r7, #8
 80119d2:	2206      	movs	r2, #6
 80119d4:	4618      	mov	r0, r3
 80119d6:	f002 fba7 	bl	8014128 <RegionVerify>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d005      	beq.n	80119ec <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80119e0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80119e4:	4b43      	ldr	r3, [pc, #268]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119e6:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80119ea:	e0bd      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119ec:	2303      	movs	r3, #3
 80119ee:	75fb      	strb	r3, [r7, #23]
            break;
 80119f0:	e0ba      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80119f8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80119fa:	4b3e      	ldr	r3, [pc, #248]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011a00:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011a02:	4b3c      	ldr	r3, [pc, #240]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a08:	f107 0108 	add.w	r1, r7, #8
 8011a0c:	2205      	movs	r2, #5
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f002 fb8a 	bl	8014128 <RegionVerify>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d005      	beq.n	8011a26 <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011a1a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a1e:	4b35      	ldr	r3, [pc, #212]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a24:	e0a0      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a26:	2303      	movs	r3, #3
 8011a28:	75fb      	strb	r3, [r7, #23]
            break;
 8011a2a:	e09d      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a32:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011a34:	4b2f      	ldr	r3, [pc, #188]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a3a:	f107 0108 	add.w	r1, r7, #8
 8011a3e:	220a      	movs	r2, #10
 8011a40:	4618      	mov	r0, r3
 8011a42:	f002 fb71 	bl	8014128 <RegionVerify>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d005      	beq.n	8011a58 <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011a4c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a50:	4b28      	ldr	r3, [pc, #160]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a52:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a56:	e087      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a58:	2303      	movs	r3, #3
 8011a5a:	75fb      	strb	r3, [r7, #23]
            break;
 8011a5c:	e084      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a64:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011a66:	4b23      	ldr	r3, [pc, #140]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a6c:	f107 0108 	add.w	r1, r7, #8
 8011a70:	2209      	movs	r2, #9
 8011a72:	4618      	mov	r0, r3
 8011a74:	f002 fb58 	bl	8014128 <RegionVerify>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d005      	beq.n	8011a8a <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011a7e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a82:	4b1c      	ldr	r3, [pc, #112]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a88:	e06e      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a8a:	2303      	movs	r3, #3
 8011a8c:	75fb      	strb	r3, [r7, #23]
            break;
 8011a8e:	e06b      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	4a17      	ldr	r2, [pc, #92]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8011a9a:	4b16      	ldr	r3, [pc, #88]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011aa0:	4a14      	ldr	r2, [pc, #80]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011aa2:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011aa4:	e060      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	791a      	ldrb	r2, [r3, #4]
 8011aaa:	4b12      	ldr	r3, [pc, #72]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011aac:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8011ab0:	4b10      	ldr	r3, [pc, #64]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ab2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8011ab6:	4b0f      	ldr	r3, [pc, #60]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8011abc:	e054      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	4a0c      	ldr	r2, [pc, #48]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ac4:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8011ac6:	e04f      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	685b      	ldr	r3, [r3, #4]
 8011acc:	4a09      	ldr	r2, [pc, #36]	; (8011af4 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ace:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 8011ad2:	e049      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	685b      	ldr	r3, [r3, #4]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d007      	beq.n	8011aec <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f7fe fe27 	bl	8010734 <RestoreNvmData>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011aea:	e03d      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011aec:	2303      	movs	r3, #3
 8011aee:	75fb      	strb	r3, [r7, #23]
            break;
 8011af0:	e03a      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
 8011af2:	bf00      	nop
 8011af4:	20000a54 	.word	0x20000a54
 8011af8:	0801bed4 	.word	0x0801bed4
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	799b      	ldrb	r3, [r3, #6]
 8011b00:	2b01      	cmp	r3, #1
 8011b02:	d80d      	bhi.n	8011b20 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011b04:	4a1b      	ldr	r2, [pc, #108]	; (8011b74 <LoRaMacMibSetRequestConfirm+0x678>)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6858      	ldr	r0, [r3, #4]
 8011b12:	f001 fc23 	bl	801335c <LoRaMacCryptoSetLrWanVersion>
 8011b16:	4603      	mov	r3, r0
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d024      	beq.n	8011b66 <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b1c:	2311      	movs	r3, #17
 8011b1e:	e024      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b20:	2303      	movs	r3, #3
 8011b22:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011b24:	e01f      	b.n	8011b66 <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	f000 fbe4 	bl	80122f4 <LoRaMacMibClassBSetRequestConfirm>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	75fb      	strb	r3, [r7, #23]
            break;
 8011b30:	e01a      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b32:	bf00      	nop
 8011b34:	e018      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b36:	bf00      	nop
 8011b38:	e016      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b3a:	bf00      	nop
 8011b3c:	e014      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b3e:	bf00      	nop
 8011b40:	e012      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b42:	bf00      	nop
 8011b44:	e010      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b46:	bf00      	nop
 8011b48:	e00e      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b4a:	bf00      	nop
 8011b4c:	e00c      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b4e:	bf00      	nop
 8011b50:	e00a      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b52:	bf00      	nop
 8011b54:	e008      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b56:	bf00      	nop
 8011b58:	e006      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b5a:	bf00      	nop
 8011b5c:	e004      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b5e:	bf00      	nop
 8011b60:	e002      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b62:	bf00      	nop
 8011b64:	e000      	b.n	8011b68 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b66:	bf00      	nop
        }
    }
    return status;
 8011b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3718      	adds	r7, #24
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop
 8011b74:	20000a54 	.word	0x20000a54

08011b78 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b086      	sub	sp, #24
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011b80:	2302      	movs	r3, #2
 8011b82:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011b84:	2300      	movs	r3, #0
 8011b86:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d101      	bne.n	8011b92 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b8e:	2303      	movs	r3, #3
 8011b90:	e127      	b.n	8011de2 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 8011b92:	f7fc fd23 	bl	800e5dc <LoRaMacIsBusy>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d001      	beq.n	8011ba0 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	e120      	b.n	8011de2 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011ba0:	f001 f8a6 	bl	8012cf0 <LoRaMacConfirmQueueIsFull>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d001      	beq.n	8011bae <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8011baa:	2301      	movs	r3, #1
 8011bac:	e119      	b.n	8011de2 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011bae:	f001 f893 	bl	8012cd8 <LoRaMacConfirmQueueGetCnt>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d104      	bne.n	8011bc2 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011bb8:	2214      	movs	r2, #20
 8011bba:	2100      	movs	r1, #0
 8011bbc:	488b      	ldr	r0, [pc, #556]	; (8011dec <LoRaMacMlmeRequest+0x274>)
 8011bbe:	f004 fdbd 	bl	801673c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011bc2:	4b8b      	ldr	r3, [pc, #556]	; (8011df0 <LoRaMacMlmeRequest+0x278>)
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011bca:	4a89      	ldr	r2, [pc, #548]	; (8011df0 <LoRaMacMlmeRequest+0x278>)
 8011bcc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bd0:	f043 0304 	orr.w	r3, r3, #4
 8011bd4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011bde:	2301      	movs	r3, #1
 8011be0:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8011be2:	2300      	movs	r3, #0
 8011be4:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	3b01      	subs	r3, #1
 8011bec:	2b0d      	cmp	r3, #13
 8011bee:	f200 80ce 	bhi.w	8011d8e <LoRaMacMlmeRequest+0x216>
 8011bf2:	a201      	add	r2, pc, #4	; (adr r2, 8011bf8 <LoRaMacMlmeRequest+0x80>)
 8011bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bf8:	08011c31 	.word	0x08011c31
 8011bfc:	08011d8f 	.word	0x08011d8f
 8011c00:	08011d8f 	.word	0x08011d8f
 8011c04:	08011c9b 	.word	0x08011c9b
 8011c08:	08011cb9 	.word	0x08011cb9
 8011c0c:	08011cc9 	.word	0x08011cc9
 8011c10:	08011d8f 	.word	0x08011d8f
 8011c14:	08011d8f 	.word	0x08011d8f
 8011c18:	08011d8f 	.word	0x08011d8f
 8011c1c:	08011ce5 	.word	0x08011ce5
 8011c20:	08011d8f 	.word	0x08011d8f
 8011c24:	08011d63 	.word	0x08011d63
 8011c28:	08011d03 	.word	0x08011d03
 8011c2c:	08011d45 	.word	0x08011d45
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011c30:	4b6f      	ldr	r3, [pc, #444]	; (8011df0 <LoRaMacMlmeRequest+0x278>)
 8011c32:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011c36:	f003 0320 	and.w	r3, r3, #32
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d001      	beq.n	8011c42 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	e0cf      	b.n	8011de2 <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 8011c42:	f7fe f9fd 	bl	8010040 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011c46:	4b6b      	ldr	r3, [pc, #428]	; (8011df4 <LoRaMacMlmeRequest+0x27c>)
 8011c48:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	791b      	ldrb	r3, [r3, #4]
 8011c50:	b25b      	sxtb	r3, r3
 8011c52:	2200      	movs	r2, #0
 8011c54:	4619      	mov	r1, r3
 8011c56:	f002 fb4f 	bl	80142f8 <RegionAlternateDr>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	4b65      	ldr	r3, [pc, #404]	; (8011df4 <LoRaMacMlmeRequest+0x27c>)
 8011c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011c64:	2307      	movs	r3, #7
 8011c66:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8011c68:	20ff      	movs	r0, #255	; 0xff
 8011c6a:	f7fd ff61 	bl	800fb30 <SendReJoinReq>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011c72:	7dfb      	ldrb	r3, [r7, #23]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	f000 808c 	beq.w	8011d92 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011c7a:	4b5e      	ldr	r3, [pc, #376]	; (8011df4 <LoRaMacMlmeRequest+0x27c>)
 8011c7c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	791b      	ldrb	r3, [r3, #4]
 8011c84:	b25b      	sxtb	r3, r3
 8011c86:	2201      	movs	r2, #1
 8011c88:	4619      	mov	r1, r3
 8011c8a:	f002 fb35 	bl	80142f8 <RegionAlternateDr>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	461a      	mov	r2, r3
 8011c92:	4b58      	ldr	r3, [pc, #352]	; (8011df4 <LoRaMacMlmeRequest+0x27c>)
 8011c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8011c98:	e07b      	b.n	8011d92 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011c9e:	f107 030c 	add.w	r3, r7, #12
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	2002      	movs	r0, #2
 8011ca8:	f000 fc88 	bl	80125bc <LoRaMacCommandsAddCmd>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d071      	beq.n	8011d96 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011cb2:	2313      	movs	r3, #19
 8011cb4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011cb6:	e06e      	b.n	8011d96 <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	889b      	ldrh	r3, [r3, #4]
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7fe fcdb 	bl	8010678 <SetTxContinuousWave>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	75fb      	strb	r3, [r7, #23]
            break;
 8011cc6:	e06d      	b.n	8011da4 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	8898      	ldrh	r0, [r3, #4]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6899      	ldr	r1, [r3, #8]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011cd6:	b2db      	uxtb	r3, r3
 8011cd8:	461a      	mov	r2, r3
 8011cda:	f7fe fd01 	bl	80106e0 <SetTxContinuousWave1>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	75fb      	strb	r3, [r7, #23]
            break;
 8011ce2:	e05f      	b.n	8011da4 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011ce8:	f107 030c 	add.w	r3, r7, #12
 8011cec:	2200      	movs	r2, #0
 8011cee:	4619      	mov	r1, r3
 8011cf0:	200d      	movs	r0, #13
 8011cf2:	f000 fc63 	bl	80125bc <LoRaMacCommandsAddCmd>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d04e      	beq.n	8011d9a <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011cfc:	2313      	movs	r3, #19
 8011cfe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d00:	e04b      	b.n	8011d9a <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011d02:	4b3c      	ldr	r3, [pc, #240]	; (8011df4 <LoRaMacMlmeRequest+0x27c>)
 8011d04:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d148      	bne.n	8011d9e <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	791b      	ldrb	r3, [r3, #4]
 8011d10:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	791b      	ldrb	r3, [r3, #4]
 8011d16:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011d1a:	b2db      	uxtb	r3, r3
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f000 fabe 	bl	801229e <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011d22:	7dbb      	ldrb	r3, [r7, #22]
 8011d24:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011d26:	2300      	movs	r3, #0
 8011d28:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011d2a:	f107 030c 	add.w	r3, r7, #12
 8011d2e:	2201      	movs	r2, #1
 8011d30:	4619      	mov	r1, r3
 8011d32:	2010      	movs	r0, #16
 8011d34:	f000 fc42 	bl	80125bc <LoRaMacCommandsAddCmd>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d02f      	beq.n	8011d9e <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d3e:	2313      	movs	r3, #19
 8011d40:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011d42:	e02c      	b.n	8011d9e <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011d44:	2300      	movs	r3, #0
 8011d46:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011d48:	f107 030c 	add.w	r3, r7, #12
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	4619      	mov	r1, r3
 8011d50:	2012      	movs	r0, #18
 8011d52:	f000 fc33 	bl	80125bc <LoRaMacCommandsAddCmd>
 8011d56:	4603      	mov	r3, r0
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d022      	beq.n	8011da2 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d5c:	2313      	movs	r3, #19
 8011d5e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d60:	e01f      	b.n	8011da2 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011d62:	2301      	movs	r3, #1
 8011d64:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011d66:	f000 fa50 	bl	801220a <LoRaMacClassBIsAcquisitionInProgress>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	f083 0301 	eor.w	r3, r3, #1
 8011d70:	b2db      	uxtb	r3, r3
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d008      	beq.n	8011d88 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011d76:	2000      	movs	r0, #0
 8011d78:	f000 fa29 	bl	80121ce <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011d7c:	2000      	movs	r0, #0
 8011d7e:	f000 fa4b 	bl	8012218 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011d82:	2300      	movs	r3, #0
 8011d84:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011d86:	e00d      	b.n	8011da4 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8011d88:	2301      	movs	r3, #1
 8011d8a:	75fb      	strb	r3, [r7, #23]
            break;
 8011d8c:	e00a      	b.n	8011da4 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8011d8e:	bf00      	nop
 8011d90:	e008      	b.n	8011da4 <LoRaMacMlmeRequest+0x22c>
            break;
 8011d92:	bf00      	nop
 8011d94:	e006      	b.n	8011da4 <LoRaMacMlmeRequest+0x22c>
            break;
 8011d96:	bf00      	nop
 8011d98:	e004      	b.n	8011da4 <LoRaMacMlmeRequest+0x22c>
            break;
 8011d9a:	bf00      	nop
 8011d9c:	e002      	b.n	8011da4 <LoRaMacMlmeRequest+0x22c>
            break;
 8011d9e:	bf00      	nop
 8011da0:	e000      	b.n	8011da4 <LoRaMacMlmeRequest+0x22c>
            break;
 8011da2:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011da4:	4b12      	ldr	r3, [pc, #72]	; (8011df0 <LoRaMacMlmeRequest+0x278>)
 8011da6:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011dae:	7dfb      	ldrb	r3, [r7, #23]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d010      	beq.n	8011dd6 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011db4:	f000 ff90 	bl	8012cd8 <LoRaMacConfirmQueueGetCnt>
 8011db8:	4603      	mov	r3, r0
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d110      	bne.n	8011de0 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011dbe:	4b0c      	ldr	r3, [pc, #48]	; (8011df0 <LoRaMacMlmeRequest+0x278>)
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011dc6:	4a0a      	ldr	r2, [pc, #40]	; (8011df0 <LoRaMacMlmeRequest+0x278>)
 8011dc8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011dcc:	f36f 0382 	bfc	r3, #2, #1
 8011dd0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011dd4:	e004      	b.n	8011de0 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011dd6:	f107 0310 	add.w	r3, r7, #16
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f000 fe2e 	bl	8012a3c <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3718      	adds	r7, #24
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	bf00      	nop
 8011dec:	20000998 	.word	0x20000998
 8011df0:	2000054c 	.word	0x2000054c
 8011df4:	20000a54 	.word	0x20000a54

08011df8 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b08c      	sub	sp, #48	; 0x30
 8011dfc:	af02      	add	r7, sp, #8
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	460b      	mov	r3, r1
 8011e02:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011e04:	2302      	movs	r3, #2
 8011e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011e10:	2300      	movs	r3, #0
 8011e12:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011e14:	2300      	movs	r3, #0
 8011e16:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d101      	bne.n	8011e26 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e22:	2303      	movs	r3, #3
 8011e24:	e0d4      	b.n	8011fd0 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8011e26:	f7fc fbd9 	bl	800e5dc <LoRaMacIsBusy>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d001      	beq.n	8011e34 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011e30:	2301      	movs	r3, #1
 8011e32:	e0cd      	b.n	8011fd0 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011e34:	2300      	movs	r3, #0
 8011e36:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011e38:	2214      	movs	r2, #20
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	4866      	ldr	r0, [pc, #408]	; (8011fd8 <LoRaMacMcpsRequest+0x1e0>)
 8011e3e:	f004 fc7d 	bl	801673c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011e42:	4b66      	ldr	r3, [pc, #408]	; (8011fdc <LoRaMacMcpsRequest+0x1e4>)
 8011e44:	2201      	movs	r2, #1
 8011e46:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011e4a:	4b64      	ldr	r3, [pc, #400]	; (8011fdc <LoRaMacMcpsRequest+0x1e4>)
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	2b03      	cmp	r3, #3
 8011e58:	d03d      	beq.n	8011ed6 <LoRaMacMcpsRequest+0xde>
 8011e5a:	2b03      	cmp	r3, #3
 8011e5c:	dc4f      	bgt.n	8011efe <LoRaMacMcpsRequest+0x106>
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d002      	beq.n	8011e68 <LoRaMacMcpsRequest+0x70>
 8011e62:	2b01      	cmp	r3, #1
 8011e64:	d019      	beq.n	8011e9a <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011e66:	e04a      	b.n	8011efe <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011e68:	2301      	movs	r3, #1
 8011e6a:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011e6c:	4b5b      	ldr	r3, [pc, #364]	; (8011fdc <LoRaMacMcpsRequest+0x1e4>)
 8011e6e:	2201      	movs	r2, #1
 8011e70:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011e74:	7b3b      	ldrb	r3, [r7, #12]
 8011e76:	2202      	movs	r2, #2
 8011e78:	f362 1347 	bfi	r3, r2, #5, #3
 8011e7c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	791b      	ldrb	r3, [r3, #4]
 8011e82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	689b      	ldr	r3, [r3, #8]
 8011e8a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	899b      	ldrh	r3, [r3, #12]
 8011e90:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	7b9b      	ldrb	r3, [r3, #14]
 8011e96:	777b      	strb	r3, [r7, #29]
            break;
 8011e98:	e032      	b.n	8011f00 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	7bdb      	ldrb	r3, [r3, #15]
 8011ea2:	2b08      	cmp	r3, #8
 8011ea4:	bf28      	it	cs
 8011ea6:	2308      	movcs	r3, #8
 8011ea8:	b2da      	uxtb	r2, r3
 8011eaa:	4b4c      	ldr	r3, [pc, #304]	; (8011fdc <LoRaMacMcpsRequest+0x1e4>)
 8011eac:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011eb0:	7b3b      	ldrb	r3, [r7, #12]
 8011eb2:	2204      	movs	r2, #4
 8011eb4:	f362 1347 	bfi	r3, r2, #5, #3
 8011eb8:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	791b      	ldrb	r3, [r3, #4]
 8011ebe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	689b      	ldr	r3, [r3, #8]
 8011ec6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	899b      	ldrh	r3, [r3, #12]
 8011ecc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	7b9b      	ldrb	r3, [r3, #14]
 8011ed2:	777b      	strb	r3, [r7, #29]
            break;
 8011ed4:	e014      	b.n	8011f00 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011eda:	4b40      	ldr	r3, [pc, #256]	; (8011fdc <LoRaMacMcpsRequest+0x1e4>)
 8011edc:	2201      	movs	r2, #1
 8011ede:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011ee2:	7b3b      	ldrb	r3, [r7, #12]
 8011ee4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011ee8:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	891b      	ldrh	r3, [r3, #8]
 8011ef4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	7a9b      	ldrb	r3, [r3, #10]
 8011efa:	777b      	strb	r3, [r7, #29]
            break;
 8011efc:	e000      	b.n	8011f00 <LoRaMacMcpsRequest+0x108>
            break;
 8011efe:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011f00:	2302      	movs	r3, #2
 8011f02:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011f04:	4b36      	ldr	r3, [pc, #216]	; (8011fe0 <LoRaMacMcpsRequest+0x1e8>)
 8011f06:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011f0a:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f0c:	4b34      	ldr	r3, [pc, #208]	; (8011fe0 <LoRaMacMcpsRequest+0x1e8>)
 8011f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f12:	f107 0214 	add.w	r2, r7, #20
 8011f16:	4611      	mov	r1, r2
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f002 f8c9 	bl	80140b0 <RegionGetPhyParam>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011f22:	693b      	ldr	r3, [r7, #16]
 8011f24:	b25b      	sxtb	r3, r3
 8011f26:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011f2a:	4293      	cmp	r3, r2
 8011f2c:	bfb8      	it	lt
 8011f2e:	4613      	movlt	r3, r2
 8011f30:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011f32:	7f3b      	ldrb	r3, [r7, #28]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d044      	beq.n	8011fc2 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011f38:	4b29      	ldr	r3, [pc, #164]	; (8011fe0 <LoRaMacMcpsRequest+0x1e8>)
 8011f3a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011f3e:	f083 0301 	eor.w	r3, r3, #1
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d019      	beq.n	8011f7c <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011f48:	7f7b      	ldrb	r3, [r7, #29]
 8011f4a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011f4c:	4b24      	ldr	r3, [pc, #144]	; (8011fe0 <LoRaMacMcpsRequest+0x1e8>)
 8011f4e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011f52:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011f54:	4b22      	ldr	r3, [pc, #136]	; (8011fe0 <LoRaMacMcpsRequest+0x1e8>)
 8011f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f5a:	f107 0108 	add.w	r1, r7, #8
 8011f5e:	2205      	movs	r2, #5
 8011f60:	4618      	mov	r0, r3
 8011f62:	f002 f8e1 	bl	8014128 <RegionVerify>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d005      	beq.n	8011f78 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011f6c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011f70:	4b1b      	ldr	r3, [pc, #108]	; (8011fe0 <LoRaMacMcpsRequest+0x1e8>)
 8011f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011f76:	e001      	b.n	8011f7c <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f78:	2303      	movs	r3, #3
 8011f7a:	e029      	b.n	8011fd0 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011f7c:	8bfa      	ldrh	r2, [r7, #30]
 8011f7e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8011f82:	f107 000c 	add.w	r0, r7, #12
 8011f86:	78fb      	ldrb	r3, [r7, #3]
 8011f88:	9300      	str	r3, [sp, #0]
 8011f8a:	4613      	mov	r3, r2
 8011f8c:	6a3a      	ldr	r2, [r7, #32]
 8011f8e:	f7fd fcef 	bl	800f970 <Send>
 8011f92:	4603      	mov	r3, r0
 8011f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8011f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d10c      	bne.n	8011fba <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	781a      	ldrb	r2, [r3, #0]
 8011fa4:	4b0d      	ldr	r3, [pc, #52]	; (8011fdc <LoRaMacMcpsRequest+0x1e4>)
 8011fa6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011faa:	4a0c      	ldr	r2, [pc, #48]	; (8011fdc <LoRaMacMcpsRequest+0x1e4>)
 8011fac:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011fb0:	f043 0301 	orr.w	r3, r3, #1
 8011fb4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011fb8:	e003      	b.n	8011fc2 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011fba:	4b08      	ldr	r3, [pc, #32]	; (8011fdc <LoRaMacMcpsRequest+0x1e4>)
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011fc2:	4b06      	ldr	r3, [pc, #24]	; (8011fdc <LoRaMacMcpsRequest+0x1e4>)
 8011fc4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	611a      	str	r2, [r3, #16]

    return status;
 8011fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3728      	adds	r7, #40	; 0x28
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}
 8011fd8:	20000984 	.word	0x20000984
 8011fdc:	2000054c 	.word	0x2000054c
 8011fe0:	20000a54 	.word	0x20000a54

08011fe4 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b084      	sub	sp, #16
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	4603      	mov	r3, r0
 8011fec:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011fee:	79fb      	ldrb	r3, [r7, #7]
 8011ff0:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011ff2:	4b0a      	ldr	r3, [pc, #40]	; (801201c <LoRaMacTestSetDutyCycleOn+0x38>)
 8011ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ff8:	f107 010c 	add.w	r1, r7, #12
 8011ffc:	220f      	movs	r2, #15
 8011ffe:	4618      	mov	r0, r3
 8012000:	f002 f892 	bl	8014128 <RegionVerify>
 8012004:	4603      	mov	r3, r0
 8012006:	2b00      	cmp	r3, #0
 8012008:	d003      	beq.n	8012012 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801200a:	4a04      	ldr	r2, [pc, #16]	; (801201c <LoRaMacTestSetDutyCycleOn+0x38>)
 801200c:	79fb      	ldrb	r3, [r7, #7]
 801200e:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 8012012:	bf00      	nop
 8012014:	3710      	adds	r7, #16
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
 801201a:	bf00      	nop
 801201c:	20000a54 	.word	0x20000a54

08012020 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b08c      	sub	sp, #48	; 0x30
 8012024:	af00      	add	r7, sp, #0
 8012026:	60f8      	str	r0, [r7, #12]
 8012028:	60b9      	str	r1, [r7, #8]
 801202a:	607a      	str	r2, [r7, #4]
 801202c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801202e:	2300      	movs	r3, #0
 8012030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	7c1b      	ldrb	r3, [r3, #16]
 8012038:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	7c5b      	ldrb	r3, [r3, #17]
 8012040:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	689a      	ldr	r2, [r3, #8]
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	795b      	ldrb	r3, [r3, #5]
 8012050:	2b00      	cmp	r3, #0
 8012052:	f000 808b 	beq.w	801216c <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8012056:	2302      	movs	r3, #2
 8012058:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	7c9b      	ldrb	r3, [r3, #18]
 8012060:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	7cdb      	ldrb	r3, [r3, #19]
 8012068:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801206c:	4611      	mov	r1, r2
 801206e:	4618      	mov	r0, r3
 8012070:	f002 f81e 	bl	80140b0 <RegionGetPhyParam>
 8012074:	4603      	mov	r3, r0
 8012076:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012078:	6a3b      	ldr	r3, [r7, #32]
 801207a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 801207e:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8012082:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8012086:	4293      	cmp	r3, r2
 8012088:	bfb8      	it	lt
 801208a:	4613      	movlt	r3, r2
 801208c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8012090:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8012094:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8012098:	429a      	cmp	r2, r3
 801209a:	d106      	bne.n	80120aa <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	2200      	movs	r2, #0
 80120a0:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80120a2:	2300      	movs	r3, #0
 80120a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120a8:	e060      	b.n	801216c <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	689b      	ldr	r3, [r3, #8]
 80120ae:	68fa      	ldr	r2, [r7, #12]
 80120b0:	8992      	ldrh	r2, [r2, #12]
 80120b2:	4293      	cmp	r3, r2
 80120b4:	d303      	bcc.n	80120be <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80120b6:	2301      	movs	r3, #1
 80120b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120bc:	e002      	b.n	80120c4 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80120be:	2300      	movs	r3, #0
 80120c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	689b      	ldr	r3, [r3, #8]
 80120c8:	68fa      	ldr	r2, [r7, #12]
 80120ca:	8992      	ldrh	r2, [r2, #12]
 80120cc:	4611      	mov	r1, r2
 80120ce:	68fa      	ldr	r2, [r7, #12]
 80120d0:	89d2      	ldrh	r2, [r2, #14]
 80120d2:	440a      	add	r2, r1
 80120d4:	4293      	cmp	r3, r2
 80120d6:	d349      	bcc.n	801216c <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80120d8:	2308      	movs	r3, #8
 80120da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	7cdb      	ldrb	r3, [r3, #19]
 80120e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80120e6:	4611      	mov	r1, r2
 80120e8:	4618      	mov	r0, r3
 80120ea:	f001 ffe1 	bl	80140b0 <RegionGetPhyParam>
 80120ee:	4603      	mov	r3, r0
 80120f0:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80120f2:	6a3b      	ldr	r3, [r7, #32]
 80120f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	689b      	ldr	r3, [r3, #8]
 80120fc:	68fa      	ldr	r2, [r7, #12]
 80120fe:	89d2      	ldrh	r2, [r2, #14]
 8012100:	fbb3 f1f2 	udiv	r1, r3, r2
 8012104:	fb02 f201 	mul.w	r2, r2, r1
 8012108:	1a9b      	subs	r3, r3, r2
 801210a:	2b01      	cmp	r3, #1
 801210c:	d12e      	bne.n	801216c <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801210e:	2322      	movs	r3, #34	; 0x22
 8012110:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8012114:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012118:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	7c9b      	ldrb	r3, [r3, #18]
 8012120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	7cdb      	ldrb	r3, [r3, #19]
 8012128:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801212c:	4611      	mov	r1, r2
 801212e:	4618      	mov	r0, r3
 8012130:	f001 ffbe 	bl	80140b0 <RegionGetPhyParam>
 8012134:	4603      	mov	r3, r0
 8012136:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8012138:	6a3b      	ldr	r3, [r7, #32]
 801213a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801213e:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8012142:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8012146:	429a      	cmp	r2, r3
 8012148:	d110      	bne.n	801216c <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801214a:	2300      	movs	r3, #0
 801214c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	791b      	ldrb	r3, [r3, #4]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d009      	beq.n	801216c <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012158:	2302      	movs	r3, #2
 801215a:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	7cdb      	ldrb	r3, [r3, #19]
 8012160:	f107 0214 	add.w	r2, r7, #20
 8012164:	4611      	mov	r1, r2
 8012166:	4618      	mov	r0, r3
 8012168:	f001 ffcc 	bl	8014104 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8012172:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801217a:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801217c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012180:	4618      	mov	r0, r3
 8012182:	3730      	adds	r7, #48	; 0x30
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b084      	sub	sp, #16
 801218c:	af00      	add	r7, sp, #0
 801218e:	60f8      	str	r0, [r7, #12]
 8012190:	60b9      	str	r1, [r7, #8]
 8012192:	607a      	str	r2, [r7, #4]
 8012194:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	789b      	ldrb	r3, [r3, #2]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d107      	bne.n	80121ae <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	68b9      	ldr	r1, [r7, #8]
 80121a4:	68f8      	ldr	r0, [r7, #12]
 80121a6:	f7ff ff3b 	bl	8012020 <CalcNextV10X>
 80121aa:	4603      	mov	r3, r0
 80121ac:	e000      	b.n	80121b0 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80121ae:	2300      	movs	r3, #0
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3710      	adds	r7, #16
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 80121b8:	b480      	push	{r7}
 80121ba:	b085      	sub	sp, #20
 80121bc:	af00      	add	r7, sp, #0
 80121be:	60f8      	str	r0, [r7, #12]
 80121c0:	60b9      	str	r1, [r7, #8]
 80121c2:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121c4:	bf00      	nop
 80121c6:	3714      	adds	r7, #20
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bc80      	pop	{r7}
 80121cc:	4770      	bx	lr

080121ce <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80121ce:	b480      	push	{r7}
 80121d0:	b083      	sub	sp, #12
 80121d2:	af00      	add	r7, sp, #0
 80121d4:	4603      	mov	r3, r0
 80121d6:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121d8:	bf00      	nop
 80121da:	370c      	adds	r7, #12
 80121dc:	46bd      	mov	sp, r7
 80121de:	bc80      	pop	{r7}
 80121e0:	4770      	bx	lr

080121e2 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80121e2:	b480      	push	{r7}
 80121e4:	b083      	sub	sp, #12
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	4603      	mov	r3, r0
 80121ea:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121ec:	bf00      	nop
 80121ee:	370c      	adds	r7, #12
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bc80      	pop	{r7}
 80121f4:	4770      	bx	lr

080121f6 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80121f6:	b480      	push	{r7}
 80121f8:	b083      	sub	sp, #12
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	4603      	mov	r3, r0
 80121fe:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012200:	bf00      	nop
 8012202:	370c      	adds	r7, #12
 8012204:	46bd      	mov	sp, r7
 8012206:	bc80      	pop	{r7}
 8012208:	4770      	bx	lr

0801220a <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801220a:	b480      	push	{r7}
 801220c:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801220e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012210:	4618      	mov	r0, r3
 8012212:	46bd      	mov	sp, r7
 8012214:	bc80      	pop	{r7}
 8012216:	4770      	bx	lr

08012218 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012218:	b480      	push	{r7}
 801221a:	b083      	sub	sp, #12
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012220:	bf00      	nop
 8012222:	370c      	adds	r7, #12
 8012224:	46bd      	mov	sp, r7
 8012226:	bc80      	pop	{r7}
 8012228:	4770      	bx	lr

0801222a <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801222a:	b480      	push	{r7}
 801222c:	b083      	sub	sp, #12
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012232:	bf00      	nop
 8012234:	370c      	adds	r7, #12
 8012236:	46bd      	mov	sp, r7
 8012238:	bc80      	pop	{r7}
 801223a:	4770      	bx	lr

0801223c <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801223c:	b480      	push	{r7}
 801223e:	b083      	sub	sp, #12
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012244:	bf00      	nop
 8012246:	370c      	adds	r7, #12
 8012248:	46bd      	mov	sp, r7
 801224a:	bc80      	pop	{r7}
 801224c:	4770      	bx	lr

0801224e <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801224e:	b480      	push	{r7}
 8012250:	b083      	sub	sp, #12
 8012252:	af00      	add	r7, sp, #0
 8012254:	6078      	str	r0, [r7, #4]
 8012256:	460b      	mov	r3, r1
 8012258:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 801225a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801225c:	4618      	mov	r0, r3
 801225e:	370c      	adds	r7, #12
 8012260:	46bd      	mov	sp, r7
 8012262:	bc80      	pop	{r7}
 8012264:	4770      	bx	lr

08012266 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012266:	b480      	push	{r7}
 8012268:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801226a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801226c:	4618      	mov	r0, r3
 801226e:	46bd      	mov	sp, r7
 8012270:	bc80      	pop	{r7}
 8012272:	4770      	bx	lr

08012274 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012274:	b480      	push	{r7}
 8012276:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012278:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801227a:	4618      	mov	r0, r3
 801227c:	46bd      	mov	sp, r7
 801227e:	bc80      	pop	{r7}
 8012280:	4770      	bx	lr

08012282 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012282:	b480      	push	{r7}
 8012284:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012286:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012288:	4618      	mov	r0, r3
 801228a:	46bd      	mov	sp, r7
 801228c:	bc80      	pop	{r7}
 801228e:	4770      	bx	lr

08012290 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012290:	b480      	push	{r7}
 8012292:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012294:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012296:	4618      	mov	r0, r3
 8012298:	46bd      	mov	sp, r7
 801229a:	bc80      	pop	{r7}
 801229c:	4770      	bx	lr

0801229e <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801229e:	b480      	push	{r7}
 80122a0:	b083      	sub	sp, #12
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	4603      	mov	r3, r0
 80122a6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122a8:	bf00      	nop
 80122aa:	370c      	adds	r7, #12
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bc80      	pop	{r7}
 80122b0:	4770      	bx	lr

080122b2 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80122b2:	b480      	push	{r7}
 80122b4:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122b6:	bf00      	nop
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bc80      	pop	{r7}
 80122bc:	4770      	bx	lr

080122be <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80122be:	b480      	push	{r7}
 80122c0:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122c2:	bf00      	nop
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bc80      	pop	{r7}
 80122c8:	4770      	bx	lr

080122ca <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80122ca:	b480      	push	{r7}
 80122cc:	b083      	sub	sp, #12
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	4603      	mov	r3, r0
 80122d2:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80122d4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	370c      	adds	r7, #12
 80122da:	46bd      	mov	sp, r7
 80122dc:	bc80      	pop	{r7}
 80122de:	4770      	bx	lr

080122e0 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80122e8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	370c      	adds	r7, #12
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bc80      	pop	{r7}
 80122f2:	4770      	bx	lr

080122f4 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80122f4:	b480      	push	{r7}
 80122f6:	b083      	sub	sp, #12
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80122fc:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122fe:	4618      	mov	r0, r3
 8012300:	370c      	adds	r7, #12
 8012302:	46bd      	mov	sp, r7
 8012304:	bc80      	pop	{r7}
 8012306:	4770      	bx	lr

08012308 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012308:	b480      	push	{r7}
 801230a:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801230c:	bf00      	nop
 801230e:	46bd      	mov	sp, r7
 8012310:	bc80      	pop	{r7}
 8012312:	4770      	bx	lr

08012314 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012314:	b480      	push	{r7}
 8012316:	b083      	sub	sp, #12
 8012318:	af00      	add	r7, sp, #0
 801231a:	4603      	mov	r3, r0
 801231c:	6039      	str	r1, [r7, #0]
 801231e:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012320:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012322:	4618      	mov	r0, r3
 8012324:	370c      	adds	r7, #12
 8012326:	46bd      	mov	sp, r7
 8012328:	bc80      	pop	{r7}
 801232a:	4770      	bx	lr

0801232c <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801232c:	b480      	push	{r7}
 801232e:	b083      	sub	sp, #12
 8012330:	af00      	add	r7, sp, #0
 8012332:	4603      	mov	r3, r0
 8012334:	603a      	str	r2, [r7, #0]
 8012336:	80fb      	strh	r3, [r7, #6]
 8012338:	460b      	mov	r3, r1
 801233a:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801233c:	bf00      	nop
 801233e:	370c      	adds	r7, #12
 8012340:	46bd      	mov	sp, r7
 8012342:	bc80      	pop	{r7}
 8012344:	4770      	bx	lr

08012346 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012346:	b480      	push	{r7}
 8012348:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801234a:	bf00      	nop
 801234c:	46bd      	mov	sp, r7
 801234e:	bc80      	pop	{r7}
 8012350:	4770      	bx	lr

08012352 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012352:	b480      	push	{r7}
 8012354:	b083      	sub	sp, #12
 8012356:	af00      	add	r7, sp, #0
 8012358:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801235a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801235c:	4618      	mov	r0, r3
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	bc80      	pop	{r7}
 8012364:	4770      	bx	lr

08012366 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012366:	b480      	push	{r7}
 8012368:	b083      	sub	sp, #12
 801236a:	af00      	add	r7, sp, #0
 801236c:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801236e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012370:	4618      	mov	r0, r3
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	bc80      	pop	{r7}
 8012378:	4770      	bx	lr

0801237a <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801237a:	b480      	push	{r7}
 801237c:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801237e:	bf00      	nop
 8012380:	46bd      	mov	sp, r7
 8012382:	bc80      	pop	{r7}
 8012384:	4770      	bx	lr

08012386 <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 8012386:	b480      	push	{r7}
 8012388:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801238a:	bf00      	nop
 801238c:	46bd      	mov	sp, r7
 801238e:	bc80      	pop	{r7}
 8012390:	4770      	bx	lr

08012392 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012392:	b480      	push	{r7}
 8012394:	b085      	sub	sp, #20
 8012396:	af00      	add	r7, sp, #0
 8012398:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801239e:	2300      	movs	r3, #0
 80123a0:	81fb      	strh	r3, [r7, #14]
 80123a2:	e00a      	b.n	80123ba <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80123a4:	89fb      	ldrh	r3, [r7, #14]
 80123a6:	68ba      	ldr	r2, [r7, #8]
 80123a8:	4413      	add	r3, r2
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d001      	beq.n	80123b4 <IsSlotFree+0x22>
        {
            return false;
 80123b0:	2300      	movs	r3, #0
 80123b2:	e006      	b.n	80123c2 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80123b4:	89fb      	ldrh	r3, [r7, #14]
 80123b6:	3301      	adds	r3, #1
 80123b8:	81fb      	strh	r3, [r7, #14]
 80123ba:	89fb      	ldrh	r3, [r7, #14]
 80123bc:	2b0f      	cmp	r3, #15
 80123be:	d9f1      	bls.n	80123a4 <IsSlotFree+0x12>
        }
    }
    return true;
 80123c0:	2301      	movs	r3, #1
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3714      	adds	r7, #20
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bc80      	pop	{r7}
 80123ca:	4770      	bx	lr

080123cc <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80123d2:	2300      	movs	r3, #0
 80123d4:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80123d6:	e007      	b.n	80123e8 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80123d8:	79fb      	ldrb	r3, [r7, #7]
 80123da:	3301      	adds	r3, #1
 80123dc:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80123de:	79fb      	ldrb	r3, [r7, #7]
 80123e0:	2b0f      	cmp	r3, #15
 80123e2:	d101      	bne.n	80123e8 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80123e4:	2300      	movs	r3, #0
 80123e6:	e012      	b.n	801240e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80123e8:	79fb      	ldrb	r3, [r7, #7]
 80123ea:	011b      	lsls	r3, r3, #4
 80123ec:	3308      	adds	r3, #8
 80123ee:	4a0a      	ldr	r2, [pc, #40]	; (8012418 <MallocNewMacCommandSlot+0x4c>)
 80123f0:	4413      	add	r3, r2
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7ff ffcd 	bl	8012392 <IsSlotFree>
 80123f8:	4603      	mov	r3, r0
 80123fa:	f083 0301 	eor.w	r3, r3, #1
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	2b00      	cmp	r3, #0
 8012402:	d1e9      	bne.n	80123d8 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012404:	79fb      	ldrb	r3, [r7, #7]
 8012406:	011b      	lsls	r3, r3, #4
 8012408:	3308      	adds	r3, #8
 801240a:	4a03      	ldr	r2, [pc, #12]	; (8012418 <MallocNewMacCommandSlot+0x4c>)
 801240c:	4413      	add	r3, r2
}
 801240e:	4618      	mov	r0, r3
 8012410:	3708      	adds	r7, #8
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	20000da4 	.word	0x20000da4

0801241c <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d101      	bne.n	801242e <FreeMacCommandSlot+0x12>
    {
        return false;
 801242a:	2300      	movs	r3, #0
 801242c:	e005      	b.n	801243a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801242e:	2210      	movs	r2, #16
 8012430:	2100      	movs	r1, #0
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f004 f982 	bl	801673c <memset1>

    return true;
 8012438:	2301      	movs	r3, #1
}
 801243a:	4618      	mov	r0, r3
 801243c:	3708      	adds	r7, #8
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}

08012442 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012442:	b480      	push	{r7}
 8012444:	b083      	sub	sp, #12
 8012446:	af00      	add	r7, sp, #0
 8012448:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d101      	bne.n	8012454 <LinkedListInit+0x12>
    {
        return false;
 8012450:	2300      	movs	r3, #0
 8012452:	e006      	b.n	8012462 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2200      	movs	r2, #0
 8012458:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2200      	movs	r2, #0
 801245e:	605a      	str	r2, [r3, #4]

    return true;
 8012460:	2301      	movs	r3, #1
}
 8012462:	4618      	mov	r0, r3
 8012464:	370c      	adds	r7, #12
 8012466:	46bd      	mov	sp, r7
 8012468:	bc80      	pop	{r7}
 801246a:	4770      	bx	lr

0801246c <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d002      	beq.n	8012482 <LinkedListAdd+0x16>
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d101      	bne.n	8012486 <LinkedListAdd+0x1a>
    {
        return false;
 8012482:	2300      	movs	r3, #0
 8012484:	e015      	b.n	80124b2 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d102      	bne.n	8012494 <LinkedListAdd+0x28>
    {
        list->First = element;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	683a      	ldr	r2, [r7, #0]
 8012492:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d003      	beq.n	80124a4 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	683a      	ldr	r2, [r7, #0]
 80124a2:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	2200      	movs	r2, #0
 80124a8:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	683a      	ldr	r2, [r7, #0]
 80124ae:	605a      	str	r2, [r3, #4]

    return true;
 80124b0:	2301      	movs	r3, #1
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	370c      	adds	r7, #12
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bc80      	pop	{r7}
 80124ba:	4770      	bx	lr

080124bc <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80124bc:	b480      	push	{r7}
 80124be:	b085      	sub	sp, #20
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d002      	beq.n	80124d2 <LinkedListGetPrevious+0x16>
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d101      	bne.n	80124d6 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80124d2:	2300      	movs	r3, #0
 80124d4:	e016      	b.n	8012504 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80124dc:	683a      	ldr	r2, [r7, #0]
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d00c      	beq.n	80124fe <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80124e4:	e002      	b.n	80124ec <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d007      	beq.n	8012502 <LinkedListGetPrevious+0x46>
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	683a      	ldr	r2, [r7, #0]
 80124f8:	429a      	cmp	r2, r3
 80124fa:	d1f4      	bne.n	80124e6 <LinkedListGetPrevious+0x2a>
 80124fc:	e001      	b.n	8012502 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80124fe:	2300      	movs	r3, #0
 8012500:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012502:	68fb      	ldr	r3, [r7, #12]
}
 8012504:	4618      	mov	r0, r3
 8012506:	3714      	adds	r7, #20
 8012508:	46bd      	mov	sp, r7
 801250a:	bc80      	pop	{r7}
 801250c:	4770      	bx	lr

0801250e <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801250e:	b580      	push	{r7, lr}
 8012510:	b084      	sub	sp, #16
 8012512:	af00      	add	r7, sp, #0
 8012514:	6078      	str	r0, [r7, #4]
 8012516:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d002      	beq.n	8012524 <LinkedListRemove+0x16>
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d101      	bne.n	8012528 <LinkedListRemove+0x1a>
    {
        return false;
 8012524:	2300      	movs	r3, #0
 8012526:	e020      	b.n	801256a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012528:	6839      	ldr	r1, [r7, #0]
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f7ff ffc6 	bl	80124bc <LinkedListGetPrevious>
 8012530:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	683a      	ldr	r2, [r7, #0]
 8012538:	429a      	cmp	r2, r3
 801253a:	d103      	bne.n	8012544 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	683a      	ldr	r2, [r7, #0]
 801254a:	429a      	cmp	r2, r3
 801254c:	d102      	bne.n	8012554 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	68fa      	ldr	r2, [r7, #12]
 8012552:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d003      	beq.n	8012562 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	681a      	ldr	r2, [r3, #0]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	2200      	movs	r2, #0
 8012566:	601a      	str	r2, [r3, #0]

    return true;
 8012568:	2301      	movs	r3, #1
}
 801256a:	4618      	mov	r0, r3
 801256c:	3710      	adds	r7, #16
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8012572:	b480      	push	{r7}
 8012574:	b083      	sub	sp, #12
 8012576:	af00      	add	r7, sp, #0
 8012578:	4603      	mov	r3, r0
 801257a:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801257c:	79fb      	ldrb	r3, [r7, #7]
 801257e:	2b05      	cmp	r3, #5
 8012580:	d004      	beq.n	801258c <IsSticky+0x1a>
 8012582:	2b05      	cmp	r3, #5
 8012584:	db04      	blt.n	8012590 <IsSticky+0x1e>
 8012586:	3b08      	subs	r3, #8
 8012588:	2b02      	cmp	r3, #2
 801258a:	d801      	bhi.n	8012590 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 801258c:	2301      	movs	r3, #1
 801258e:	e000      	b.n	8012592 <IsSticky+0x20>
        default:
            return false;
 8012590:	2300      	movs	r3, #0
    }
}
 8012592:	4618      	mov	r0, r3
 8012594:	370c      	adds	r7, #12
 8012596:	46bd      	mov	sp, r7
 8012598:	bc80      	pop	{r7}
 801259a:	4770      	bx	lr

0801259c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 801259c:	b580      	push	{r7, lr}
 801259e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80125a0:	22fc      	movs	r2, #252	; 0xfc
 80125a2:	2100      	movs	r1, #0
 80125a4:	4804      	ldr	r0, [pc, #16]	; (80125b8 <LoRaMacCommandsInit+0x1c>)
 80125a6:	f004 f8c9 	bl	801673c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80125aa:	4803      	ldr	r0, [pc, #12]	; (80125b8 <LoRaMacCommandsInit+0x1c>)
 80125ac:	f7ff ff49 	bl	8012442 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80125b0:	2300      	movs	r3, #0
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	20000da4 	.word	0x20000da4

080125bc <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b086      	sub	sp, #24
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	4603      	mov	r3, r0
 80125c4:	60b9      	str	r1, [r7, #8]
 80125c6:	607a      	str	r2, [r7, #4]
 80125c8:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d101      	bne.n	80125d4 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80125d0:	2301      	movs	r3, #1
 80125d2:	e033      	b.n	801263c <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80125d4:	f7ff fefa 	bl	80123cc <MallocNewMacCommandSlot>
 80125d8:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d101      	bne.n	80125e4 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80125e0:	2302      	movs	r3, #2
 80125e2:	e02b      	b.n	801263c <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80125e4:	6979      	ldr	r1, [r7, #20]
 80125e6:	4817      	ldr	r0, [pc, #92]	; (8012644 <LoRaMacCommandsAddCmd+0x88>)
 80125e8:	f7ff ff40 	bl	801246c <LinkedListAdd>
 80125ec:	4603      	mov	r3, r0
 80125ee:	f083 0301 	eor.w	r3, r3, #1
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d001      	beq.n	80125fc <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80125f8:	2305      	movs	r3, #5
 80125fa:	e01f      	b.n	801263c <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	7bfa      	ldrb	r2, [r7, #15]
 8012600:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	3305      	adds	r3, #5
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	b292      	uxth	r2, r2
 8012610:	68b9      	ldr	r1, [r7, #8]
 8012612:	4618      	mov	r0, r3
 8012614:	f004 f857 	bl	80166c6 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012618:	7bfb      	ldrb	r3, [r7, #15]
 801261a:	4618      	mov	r0, r3
 801261c:	f7ff ffa9 	bl	8012572 <IsSticky>
 8012620:	4603      	mov	r3, r0
 8012622:	461a      	mov	r2, r3
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012628:	4b06      	ldr	r3, [pc, #24]	; (8012644 <LoRaMacCommandsAddCmd+0x88>)
 801262a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	4413      	add	r3, r2
 8012632:	3301      	adds	r3, #1
 8012634:	4a03      	ldr	r2, [pc, #12]	; (8012644 <LoRaMacCommandsAddCmd+0x88>)
 8012636:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 801263a:	2300      	movs	r3, #0
}
 801263c:	4618      	mov	r0, r3
 801263e:	3718      	adds	r7, #24
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	20000da4 	.word	0x20000da4

08012648 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b082      	sub	sp, #8
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d101      	bne.n	801265a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012656:	2301      	movs	r3, #1
 8012658:	e021      	b.n	801269e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801265a:	6879      	ldr	r1, [r7, #4]
 801265c:	4812      	ldr	r0, [pc, #72]	; (80126a8 <LoRaMacCommandsRemoveCmd+0x60>)
 801265e:	f7ff ff56 	bl	801250e <LinkedListRemove>
 8012662:	4603      	mov	r3, r0
 8012664:	f083 0301 	eor.w	r3, r3, #1
 8012668:	b2db      	uxtb	r3, r3
 801266a:	2b00      	cmp	r3, #0
 801266c:	d001      	beq.n	8012672 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801266e:	2303      	movs	r3, #3
 8012670:	e015      	b.n	801269e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012672:	4b0d      	ldr	r3, [pc, #52]	; (80126a8 <LoRaMacCommandsRemoveCmd+0x60>)
 8012674:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	689b      	ldr	r3, [r3, #8]
 801267c:	1ad3      	subs	r3, r2, r3
 801267e:	3b01      	subs	r3, #1
 8012680:	4a09      	ldr	r2, [pc, #36]	; (80126a8 <LoRaMacCommandsRemoveCmd+0x60>)
 8012682:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7ff fec8 	bl	801241c <FreeMacCommandSlot>
 801268c:	4603      	mov	r3, r0
 801268e:	f083 0301 	eor.w	r3, r3, #1
 8012692:	b2db      	uxtb	r3, r3
 8012694:	2b00      	cmp	r3, #0
 8012696:	d001      	beq.n	801269c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012698:	2305      	movs	r3, #5
 801269a:	e000      	b.n	801269e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801269c:	2300      	movs	r3, #0
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3708      	adds	r7, #8
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	20000da4 	.word	0x20000da4

080126ac <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b082      	sub	sp, #8
 80126b0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80126b2:	4b0f      	ldr	r3, [pc, #60]	; (80126f0 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80126b8:	e012      	b.n	80126e0 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	7b1b      	ldrb	r3, [r3, #12]
 80126be:	f083 0301 	eor.w	r3, r3, #1
 80126c2:	b2db      	uxtb	r3, r3
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d008      	beq.n	80126da <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f7ff ffba 	bl	8012648 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	607b      	str	r3, [r7, #4]
 80126d8:	e002      	b.n	80126e0 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d1e9      	bne.n	80126ba <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80126e6:	2300      	movs	r3, #0
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}
 80126f0:	20000da4 	.word	0x20000da4

080126f4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80126fa:	4b0e      	ldr	r3, [pc, #56]	; (8012734 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012700:	e00f      	b.n	8012722 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	791b      	ldrb	r3, [r3, #4]
 801270c:	4618      	mov	r0, r3
 801270e:	f7ff ff30 	bl	8012572 <IsSticky>
 8012712:	4603      	mov	r3, r0
 8012714:	2b00      	cmp	r3, #0
 8012716:	d002      	beq.n	801271e <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7ff ff95 	bl	8012648 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d1ec      	bne.n	8012702 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012728:	2300      	movs	r3, #0
}
 801272a:	4618      	mov	r0, r3
 801272c:	3708      	adds	r7, #8
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	20000da4 	.word	0x20000da4

08012738 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012738:	b480      	push	{r7}
 801273a:	b083      	sub	sp, #12
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d101      	bne.n	801274a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012746:	2301      	movs	r3, #1
 8012748:	e005      	b.n	8012756 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801274a:	4b05      	ldr	r3, [pc, #20]	; (8012760 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 801274c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012754:	2300      	movs	r3, #0
}
 8012756:	4618      	mov	r0, r3
 8012758:	370c      	adds	r7, #12
 801275a:	46bd      	mov	sp, r7
 801275c:	bc80      	pop	{r7}
 801275e:	4770      	bx	lr
 8012760:	20000da4 	.word	0x20000da4

08012764 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b088      	sub	sp, #32
 8012768:	af00      	add	r7, sp, #0
 801276a:	60f8      	str	r0, [r7, #12]
 801276c:	60b9      	str	r1, [r7, #8]
 801276e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012770:	4b25      	ldr	r3, [pc, #148]	; (8012808 <LoRaMacCommandsSerializeCmds+0xa4>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012776:	2300      	movs	r3, #0
 8012778:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d002      	beq.n	8012786 <LoRaMacCommandsSerializeCmds+0x22>
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d126      	bne.n	80127d4 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012786:	2301      	movs	r3, #1
 8012788:	e039      	b.n	80127fe <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801278a:	7efb      	ldrb	r3, [r7, #27]
 801278c:	68fa      	ldr	r2, [r7, #12]
 801278e:	1ad2      	subs	r2, r2, r3
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	689b      	ldr	r3, [r3, #8]
 8012794:	3301      	adds	r3, #1
 8012796:	429a      	cmp	r2, r3
 8012798:	d320      	bcc.n	80127dc <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801279a:	7efb      	ldrb	r3, [r7, #27]
 801279c:	1c5a      	adds	r2, r3, #1
 801279e:	76fa      	strb	r2, [r7, #27]
 80127a0:	461a      	mov	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	4413      	add	r3, r2
 80127a6:	69fa      	ldr	r2, [r7, #28]
 80127a8:	7912      	ldrb	r2, [r2, #4]
 80127aa:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80127ac:	7efb      	ldrb	r3, [r7, #27]
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	18d0      	adds	r0, r2, r3
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	1d59      	adds	r1, r3, #5
 80127b6:	69fb      	ldr	r3, [r7, #28]
 80127b8:	689b      	ldr	r3, [r3, #8]
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	461a      	mov	r2, r3
 80127be:	f003 ff82 	bl	80166c6 <memcpy1>
            itr += curElement->PayloadSize;
 80127c2:	69fb      	ldr	r3, [r7, #28]
 80127c4:	689b      	ldr	r3, [r3, #8]
 80127c6:	b2da      	uxtb	r2, r3
 80127c8:	7efb      	ldrb	r3, [r7, #27]
 80127ca:	4413      	add	r3, r2
 80127cc:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80127d4:	69fb      	ldr	r3, [r7, #28]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d1d7      	bne.n	801278a <LoRaMacCommandsSerializeCmds+0x26>
 80127da:	e009      	b.n	80127f0 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80127dc:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80127de:	e007      	b.n	80127f0 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80127e6:	69f8      	ldr	r0, [r7, #28]
 80127e8:	f7ff ff2e 	bl	8012648 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d1f4      	bne.n	80127e0 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80127f6:	68b8      	ldr	r0, [r7, #8]
 80127f8:	f7ff ff9e 	bl	8012738 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80127fc:	2300      	movs	r3, #0
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3720      	adds	r7, #32
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	20000da4 	.word	0x20000da4

0801280c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 801280c:	b480      	push	{r7}
 801280e:	b085      	sub	sp, #20
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d101      	bne.n	801281e <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801281a:	2301      	movs	r3, #1
 801281c:	e016      	b.n	801284c <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 801281e:	4b0e      	ldr	r3, [pc, #56]	; (8012858 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2200      	movs	r2, #0
 8012828:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801282a:	e00b      	b.n	8012844 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	7b1b      	ldrb	r3, [r3, #12]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d004      	beq.n	801283e <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2201      	movs	r2, #1
 8012838:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 801283a:	2300      	movs	r3, #0
 801283c:	e006      	b.n	801284c <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d1f0      	bne.n	801282c <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801284a:	2300      	movs	r3, #0
}
 801284c:	4618      	mov	r0, r3
 801284e:	3714      	adds	r7, #20
 8012850:	46bd      	mov	sp, r7
 8012852:	bc80      	pop	{r7}
 8012854:	4770      	bx	lr
 8012856:	bf00      	nop
 8012858:	20000da4 	.word	0x20000da4

0801285c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 801285c:	b480      	push	{r7}
 801285e:	b085      	sub	sp, #20
 8012860:	af00      	add	r7, sp, #0
 8012862:	4603      	mov	r3, r0
 8012864:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012866:	2300      	movs	r3, #0
 8012868:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801286a:	79fb      	ldrb	r3, [r7, #7]
 801286c:	3b02      	subs	r3, #2
 801286e:	2b11      	cmp	r3, #17
 8012870:	d850      	bhi.n	8012914 <LoRaMacCommandsGetCmdSize+0xb8>
 8012872:	a201      	add	r2, pc, #4	; (adr r2, 8012878 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012878:	080128c1 	.word	0x080128c1
 801287c:	080128c7 	.word	0x080128c7
 8012880:	080128cd 	.word	0x080128cd
 8012884:	080128d3 	.word	0x080128d3
 8012888:	080128d9 	.word	0x080128d9
 801288c:	080128df 	.word	0x080128df
 8012890:	080128e5 	.word	0x080128e5
 8012894:	080128eb 	.word	0x080128eb
 8012898:	080128f1 	.word	0x080128f1
 801289c:	08012915 	.word	0x08012915
 80128a0:	08012915 	.word	0x08012915
 80128a4:	080128f7 	.word	0x080128f7
 80128a8:	08012915 	.word	0x08012915
 80128ac:	08012915 	.word	0x08012915
 80128b0:	080128fd 	.word	0x080128fd
 80128b4:	08012903 	.word	0x08012903
 80128b8:	08012909 	.word	0x08012909
 80128bc:	0801290f 	.word	0x0801290f
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80128c0:	2303      	movs	r3, #3
 80128c2:	73fb      	strb	r3, [r7, #15]
            break;
 80128c4:	e027      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80128c6:	2305      	movs	r3, #5
 80128c8:	73fb      	strb	r3, [r7, #15]
            break;
 80128ca:	e024      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80128cc:	2302      	movs	r3, #2
 80128ce:	73fb      	strb	r3, [r7, #15]
            break;
 80128d0:	e021      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80128d2:	2305      	movs	r3, #5
 80128d4:	73fb      	strb	r3, [r7, #15]
            break;
 80128d6:	e01e      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80128d8:	2301      	movs	r3, #1
 80128da:	73fb      	strb	r3, [r7, #15]
            break;
 80128dc:	e01b      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80128de:	2306      	movs	r3, #6
 80128e0:	73fb      	strb	r3, [r7, #15]
            break;
 80128e2:	e018      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80128e4:	2302      	movs	r3, #2
 80128e6:	73fb      	strb	r3, [r7, #15]
            break;
 80128e8:	e015      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80128ea:	2302      	movs	r3, #2
 80128ec:	73fb      	strb	r3, [r7, #15]
            break;
 80128ee:	e012      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80128f0:	2305      	movs	r3, #5
 80128f2:	73fb      	strb	r3, [r7, #15]
            break;
 80128f4:	e00f      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80128f6:	2306      	movs	r3, #6
 80128f8:	73fb      	strb	r3, [r7, #15]
            break;
 80128fa:	e00c      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80128fc:	2301      	movs	r3, #1
 80128fe:	73fb      	strb	r3, [r7, #15]
            break;
 8012900:	e009      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012902:	2305      	movs	r3, #5
 8012904:	73fb      	strb	r3, [r7, #15]
            break;
 8012906:	e006      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012908:	2304      	movs	r3, #4
 801290a:	73fb      	strb	r3, [r7, #15]
            break;
 801290c:	e003      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801290e:	2304      	movs	r3, #4
 8012910:	73fb      	strb	r3, [r7, #15]
            break;
 8012912:	e000      	b.n	8012916 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012914:	bf00      	nop
        }
    }
    return cidSize;
 8012916:	7bfb      	ldrb	r3, [r7, #15]
}
 8012918:	4618      	mov	r0, r3
 801291a:	3714      	adds	r7, #20
 801291c:	46bd      	mov	sp, r7
 801291e:	bc80      	pop	{r7}
 8012920:	4770      	bx	lr
 8012922:	bf00      	nop

08012924 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	4a07      	ldr	r2, [pc, #28]	; (801294c <IncreaseBufferPointer+0x28>)
 8012930:	4293      	cmp	r3, r2
 8012932:	d102      	bne.n	801293a <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012934:	4b06      	ldr	r3, [pc, #24]	; (8012950 <IncreaseBufferPointer+0x2c>)
 8012936:	607b      	str	r3, [r7, #4]
 8012938:	e002      	b.n	8012940 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	3304      	adds	r3, #4
 801293e:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012940:	687b      	ldr	r3, [r7, #4]
}
 8012942:	4618      	mov	r0, r3
 8012944:	370c      	adds	r7, #12
 8012946:	46bd      	mov	sp, r7
 8012948:	bc80      	pop	{r7}
 801294a:	4770      	bx	lr
 801294c:	20000ebc 	.word	0x20000ebc
 8012950:	20000eac 	.word	0x20000eac

08012954 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
 801295a:	4603      	mov	r3, r0
 801295c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801295e:	79fb      	ldrb	r3, [r7, #7]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d101      	bne.n	8012968 <IsListEmpty+0x14>
    {
        return true;
 8012964:	2301      	movs	r3, #1
 8012966:	e000      	b.n	801296a <IsListEmpty+0x16>
    }
    return false;
 8012968:	2300      	movs	r3, #0
}
 801296a:	4618      	mov	r0, r3
 801296c:	370c      	adds	r7, #12
 801296e:	46bd      	mov	sp, r7
 8012970:	bc80      	pop	{r7}
 8012972:	4770      	bx	lr

08012974 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	4603      	mov	r3, r0
 801297c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801297e:	79fb      	ldrb	r3, [r7, #7]
 8012980:	2b04      	cmp	r3, #4
 8012982:	d901      	bls.n	8012988 <IsListFull+0x14>
    {
        return true;
 8012984:	2301      	movs	r3, #1
 8012986:	e000      	b.n	801298a <IsListFull+0x16>
    }
    return false;
 8012988:	2300      	movs	r3, #0
}
 801298a:	4618      	mov	r0, r3
 801298c:	370c      	adds	r7, #12
 801298e:	46bd      	mov	sp, r7
 8012990:	bc80      	pop	{r7}
 8012992:	4770      	bx	lr

08012994 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b086      	sub	sp, #24
 8012998:	af00      	add	r7, sp, #0
 801299a:	4603      	mov	r3, r0
 801299c:	60b9      	str	r1, [r7, #8]
 801299e:	607a      	str	r2, [r7, #4]
 80129a0:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80129a6:	4b13      	ldr	r3, [pc, #76]	; (80129f4 <GetElement+0x60>)
 80129a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7ff ffd1 	bl	8012954 <IsListEmpty>
 80129b2:	4603      	mov	r3, r0
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d001      	beq.n	80129bc <GetElement+0x28>
    {
        return NULL;
 80129b8:	2300      	movs	r3, #0
 80129ba:	e017      	b.n	80129ec <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80129bc:	2300      	movs	r3, #0
 80129be:	74fb      	strb	r3, [r7, #19]
 80129c0:	e00d      	b.n	80129de <GetElement+0x4a>
    {
        if( element->Request == request )
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	781b      	ldrb	r3, [r3, #0]
 80129c6:	7bfa      	ldrb	r2, [r7, #15]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d101      	bne.n	80129d0 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	e00d      	b.n	80129ec <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80129d0:	6978      	ldr	r0, [r7, #20]
 80129d2:	f7ff ffa7 	bl	8012924 <IncreaseBufferPointer>
 80129d6:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80129d8:	7cfb      	ldrb	r3, [r7, #19]
 80129da:	3301      	adds	r3, #1
 80129dc:	74fb      	strb	r3, [r7, #19]
 80129de:	4b05      	ldr	r3, [pc, #20]	; (80129f4 <GetElement+0x60>)
 80129e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129e4:	7cfa      	ldrb	r2, [r7, #19]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d3eb      	bcc.n	80129c2 <GetElement+0x2e>
    }

    return NULL;
 80129ea:	2300      	movs	r3, #0
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3718      	adds	r7, #24
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	20000ea0 	.word	0x20000ea0

080129f8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012a00:	4a0c      	ldr	r2, [pc, #48]	; (8012a34 <LoRaMacConfirmQueueInit+0x3c>)
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012a06:	4b0b      	ldr	r3, [pc, #44]	; (8012a34 <LoRaMacConfirmQueueInit+0x3c>)
 8012a08:	2200      	movs	r2, #0
 8012a0a:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012a0e:	4b09      	ldr	r3, [pc, #36]	; (8012a34 <LoRaMacConfirmQueueInit+0x3c>)
 8012a10:	4a09      	ldr	r2, [pc, #36]	; (8012a38 <LoRaMacConfirmQueueInit+0x40>)
 8012a12:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012a14:	4b07      	ldr	r3, [pc, #28]	; (8012a34 <LoRaMacConfirmQueueInit+0x3c>)
 8012a16:	4a08      	ldr	r2, [pc, #32]	; (8012a38 <LoRaMacConfirmQueueInit+0x40>)
 8012a18:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012a1a:	2214      	movs	r2, #20
 8012a1c:	21ff      	movs	r1, #255	; 0xff
 8012a1e:	4806      	ldr	r0, [pc, #24]	; (8012a38 <LoRaMacConfirmQueueInit+0x40>)
 8012a20:	f003 fe8c 	bl	801673c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012a24:	4b03      	ldr	r3, [pc, #12]	; (8012a34 <LoRaMacConfirmQueueInit+0x3c>)
 8012a26:	2201      	movs	r2, #1
 8012a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8012a2c:	bf00      	nop
 8012a2e:	3708      	adds	r7, #8
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}
 8012a34:	20000ea0 	.word	0x20000ea0
 8012a38:	20000eac 	.word	0x20000eac

08012a3c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012a44:	4b19      	ldr	r3, [pc, #100]	; (8012aac <LoRaMacConfirmQueueAdd+0x70>)
 8012a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7ff ff92 	bl	8012974 <IsListFull>
 8012a50:	4603      	mov	r3, r0
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d001      	beq.n	8012a5a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012a56:	2300      	movs	r3, #0
 8012a58:	e023      	b.n	8012aa2 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012a5a:	4b14      	ldr	r3, [pc, #80]	; (8012aac <LoRaMacConfirmQueueAdd+0x70>)
 8012a5c:	689b      	ldr	r3, [r3, #8]
 8012a5e:	687a      	ldr	r2, [r7, #4]
 8012a60:	7812      	ldrb	r2, [r2, #0]
 8012a62:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012a64:	4b11      	ldr	r3, [pc, #68]	; (8012aac <LoRaMacConfirmQueueAdd+0x70>)
 8012a66:	689b      	ldr	r3, [r3, #8]
 8012a68:	687a      	ldr	r2, [r7, #4]
 8012a6a:	7852      	ldrb	r2, [r2, #1]
 8012a6c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012a6e:	4b0f      	ldr	r3, [pc, #60]	; (8012aac <LoRaMacConfirmQueueAdd+0x70>)
 8012a70:	689b      	ldr	r3, [r3, #8]
 8012a72:	687a      	ldr	r2, [r7, #4]
 8012a74:	78d2      	ldrb	r2, [r2, #3]
 8012a76:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012a78:	4b0c      	ldr	r3, [pc, #48]	; (8012aac <LoRaMacConfirmQueueAdd+0x70>)
 8012a7a:	689b      	ldr	r3, [r3, #8]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012a80:	4b0a      	ldr	r3, [pc, #40]	; (8012aac <LoRaMacConfirmQueueAdd+0x70>)
 8012a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a86:	3301      	adds	r3, #1
 8012a88:	b2da      	uxtb	r2, r3
 8012a8a:	4b08      	ldr	r3, [pc, #32]	; (8012aac <LoRaMacConfirmQueueAdd+0x70>)
 8012a8c:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012a90:	4b06      	ldr	r3, [pc, #24]	; (8012aac <LoRaMacConfirmQueueAdd+0x70>)
 8012a92:	689b      	ldr	r3, [r3, #8]
 8012a94:	4618      	mov	r0, r3
 8012a96:	f7ff ff45 	bl	8012924 <IncreaseBufferPointer>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	4a03      	ldr	r2, [pc, #12]	; (8012aac <LoRaMacConfirmQueueAdd+0x70>)
 8012a9e:	6093      	str	r3, [r2, #8]

    return true;
 8012aa0:	2301      	movs	r3, #1
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3708      	adds	r7, #8
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}
 8012aaa:	bf00      	nop
 8012aac:	20000ea0 	.word	0x20000ea0

08012ab0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012ab4:	4b0e      	ldr	r3, [pc, #56]	; (8012af0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7ff ff4a 	bl	8012954 <IsListEmpty>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d001      	beq.n	8012aca <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	e010      	b.n	8012aec <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012aca:	4b09      	ldr	r3, [pc, #36]	; (8012af0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ad0:	3b01      	subs	r3, #1
 8012ad2:	b2da      	uxtb	r2, r3
 8012ad4:	4b06      	ldr	r3, [pc, #24]	; (8012af0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ad6:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012ada:	4b05      	ldr	r3, [pc, #20]	; (8012af0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7ff ff20 	bl	8012924 <IncreaseBufferPointer>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	4a02      	ldr	r2, [pc, #8]	; (8012af0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ae8:	6053      	str	r3, [r2, #4]

    return true;
 8012aea:	2301      	movs	r3, #1
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	bd80      	pop	{r7, pc}
 8012af0:	20000ea0 	.word	0x20000ea0

08012af4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b084      	sub	sp, #16
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	4603      	mov	r3, r0
 8012afc:	460a      	mov	r2, r1
 8012afe:	71fb      	strb	r3, [r7, #7]
 8012b00:	4613      	mov	r3, r2
 8012b02:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012b04:	2300      	movs	r3, #0
 8012b06:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012b08:	4b10      	ldr	r3, [pc, #64]	; (8012b4c <LoRaMacConfirmQueueSetStatus+0x58>)
 8012b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7ff ff20 	bl	8012954 <IsListEmpty>
 8012b14:	4603      	mov	r3, r0
 8012b16:	f083 0301 	eor.w	r3, r3, #1
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d011      	beq.n	8012b44 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012b20:	4b0a      	ldr	r3, [pc, #40]	; (8012b4c <LoRaMacConfirmQueueSetStatus+0x58>)
 8012b22:	6859      	ldr	r1, [r3, #4]
 8012b24:	4b09      	ldr	r3, [pc, #36]	; (8012b4c <LoRaMacConfirmQueueSetStatus+0x58>)
 8012b26:	689a      	ldr	r2, [r3, #8]
 8012b28:	79bb      	ldrb	r3, [r7, #6]
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7ff ff32 	bl	8012994 <GetElement>
 8012b30:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d005      	beq.n	8012b44 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	79fa      	ldrb	r2, [r7, #7]
 8012b3c:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	2201      	movs	r2, #1
 8012b42:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012b44:	bf00      	nop
 8012b46:	3710      	adds	r7, #16
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	20000ea0 	.word	0x20000ea0

08012b50 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	4603      	mov	r3, r0
 8012b58:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012b5e:	4b10      	ldr	r3, [pc, #64]	; (8012ba0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b64:	4618      	mov	r0, r3
 8012b66:	f7ff fef5 	bl	8012954 <IsListEmpty>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	f083 0301 	eor.w	r3, r3, #1
 8012b70:	b2db      	uxtb	r3, r3
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d00e      	beq.n	8012b94 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012b76:	4b0a      	ldr	r3, [pc, #40]	; (8012ba0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012b78:	6859      	ldr	r1, [r3, #4]
 8012b7a:	4b09      	ldr	r3, [pc, #36]	; (8012ba0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012b7c:	689a      	ldr	r2, [r3, #8]
 8012b7e:	79fb      	ldrb	r3, [r7, #7]
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7ff ff07 	bl	8012994 <GetElement>
 8012b86:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d002      	beq.n	8012b94 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	785b      	ldrb	r3, [r3, #1]
 8012b92:	e000      	b.n	8012b96 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b94:	2301      	movs	r3, #1
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3710      	adds	r7, #16
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	20000ea0 	.word	0x20000ea0

08012ba4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b084      	sub	sp, #16
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	4603      	mov	r3, r0
 8012bac:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012bae:	4b16      	ldr	r3, [pc, #88]	; (8012c08 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012bb4:	4a14      	ldr	r2, [pc, #80]	; (8012c08 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012bb6:	79fb      	ldrb	r3, [r7, #7]
 8012bb8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012bbc:	4b12      	ldr	r3, [pc, #72]	; (8012c08 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7ff fec6 	bl	8012954 <IsListEmpty>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	f083 0301 	eor.w	r3, r3, #1
 8012bce:	b2db      	uxtb	r3, r3
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d015      	beq.n	8012c00 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	79fa      	ldrb	r2, [r7, #7]
 8012bd8:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	78db      	ldrb	r3, [r3, #3]
 8012bde:	f083 0301 	eor.w	r3, r3, #1
 8012be2:	b2db      	uxtb	r3, r3
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d002      	beq.n	8012bee <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	2201      	movs	r2, #1
 8012bec:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012bee:	68f8      	ldr	r0, [r7, #12]
 8012bf0:	f7ff fe98 	bl	8012924 <IncreaseBufferPointer>
 8012bf4:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012bf6:	4b04      	ldr	r3, [pc, #16]	; (8012c08 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012bf8:	689b      	ldr	r3, [r3, #8]
 8012bfa:	68fa      	ldr	r2, [r7, #12]
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d1e9      	bne.n	8012bd4 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012c00:	bf00      	nop
 8012c02:	3710      	adds	r7, #16
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	20000ea0 	.word	0x20000ea0

08012c0c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	4603      	mov	r3, r0
 8012c14:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012c16:	4b09      	ldr	r3, [pc, #36]	; (8012c3c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012c18:	6859      	ldr	r1, [r3, #4]
 8012c1a:	4b08      	ldr	r3, [pc, #32]	; (8012c3c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012c1c:	689a      	ldr	r2, [r3, #8]
 8012c1e:	79fb      	ldrb	r3, [r7, #7]
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7ff feb7 	bl	8012994 <GetElement>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d001      	beq.n	8012c30 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	e000      	b.n	8012c32 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012c30:	2300      	movs	r3, #0
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3708      	adds	r7, #8
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}
 8012c3a:	bf00      	nop
 8012c3c:	20000ea0 	.word	0x20000ea0

08012c40 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b084      	sub	sp, #16
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012c48:	4b22      	ldr	r3, [pc, #136]	; (8012cd4 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c4e:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012c50:	2300      	movs	r3, #0
 8012c52:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8012c54:	2300      	movs	r3, #0
 8012c56:	73fb      	strb	r3, [r7, #15]
 8012c58:	e032      	b.n	8012cc0 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012c5a:	4b1e      	ldr	r3, [pc, #120]	; (8012cd4 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c5c:	685b      	ldr	r3, [r3, #4]
 8012c5e:	781a      	ldrb	r2, [r3, #0]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012c64:	4b1b      	ldr	r3, [pc, #108]	; (8012cd4 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c66:	685b      	ldr	r3, [r3, #4]
 8012c68:	785a      	ldrb	r2, [r3, #1]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012c6e:	4b19      	ldr	r3, [pc, #100]	; (8012cd4 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c70:	685b      	ldr	r3, [r3, #4]
 8012c72:	789b      	ldrb	r3, [r3, #2]
 8012c74:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8012c76:	7b7b      	ldrb	r3, [r7, #13]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d005      	beq.n	8012c88 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012c7c:	4b15      	ldr	r3, [pc, #84]	; (8012cd4 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	689b      	ldr	r3, [r3, #8]
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	4798      	blx	r3
 8012c86:	e00b      	b.n	8012ca0 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8012c88:	4b12      	ldr	r3, [pc, #72]	; (8012cd4 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c8a:	685b      	ldr	r3, [r3, #4]
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012c90:	4b10      	ldr	r3, [pc, #64]	; (8012cd4 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	785b      	ldrb	r3, [r3, #1]
 8012c96:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012c98:	4b0e      	ldr	r3, [pc, #56]	; (8012cd4 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c9a:	685b      	ldr	r3, [r3, #4]
 8012c9c:	78db      	ldrb	r3, [r3, #3]
 8012c9e:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012ca0:	f7ff ff06 	bl	8012ab0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012ca4:	7b7b      	ldrb	r3, [r7, #13]
 8012ca6:	f083 0301 	eor.w	r3, r3, #1
 8012caa:	b2db      	uxtb	r3, r3
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d004      	beq.n	8012cba <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012cb0:	f107 0308 	add.w	r3, r7, #8
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7ff fec1 	bl	8012a3c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012cba:	7bfb      	ldrb	r3, [r7, #15]
 8012cbc:	3301      	adds	r3, #1
 8012cbe:	73fb      	strb	r3, [r7, #15]
 8012cc0:	7bfa      	ldrb	r2, [r7, #15]
 8012cc2:	7bbb      	ldrb	r3, [r7, #14]
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d3c8      	bcc.n	8012c5a <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8012cc8:	bf00      	nop
 8012cca:	bf00      	nop
 8012ccc:	3710      	adds	r7, #16
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}
 8012cd2:	bf00      	nop
 8012cd4:	20000ea0 	.word	0x20000ea0

08012cd8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012cd8:	b480      	push	{r7}
 8012cda:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012cdc:	4b03      	ldr	r3, [pc, #12]	; (8012cec <LoRaMacConfirmQueueGetCnt+0x14>)
 8012cde:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bc80      	pop	{r7}
 8012ce8:	4770      	bx	lr
 8012cea:	bf00      	nop
 8012cec:	20000ea0 	.word	0x20000ea0

08012cf0 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012cf4:	4b06      	ldr	r3, [pc, #24]	; (8012d10 <LoRaMacConfirmQueueIsFull+0x20>)
 8012cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7ff fe3a 	bl	8012974 <IsListFull>
 8012d00:	4603      	mov	r3, r0
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d001      	beq.n	8012d0a <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012d06:	2301      	movs	r3, #1
 8012d08:	e000      	b.n	8012d0c <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012d0a:	2300      	movs	r3, #0
    }
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	bd80      	pop	{r7, pc}
 8012d10:	20000ea0 	.word	0x20000ea0

08012d14 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b08e      	sub	sp, #56	; 0x38
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	607b      	str	r3, [r7, #4]
 8012d1e:	460b      	mov	r3, r1
 8012d20:	817b      	strh	r3, [r7, #10]
 8012d22:	4613      	mov	r3, r2
 8012d24:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d101      	bne.n	8012d30 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012d2c:	230a      	movs	r3, #10
 8012d2e:	e087      	b.n	8012e40 <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8012d30:	2300      	movs	r3, #0
 8012d32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8012d36:	2301      	movs	r3, #1
 8012d38:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	623b      	str	r3, [r7, #32]
 8012d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d42:	2200      	movs	r2, #0
 8012d44:	601a      	str	r2, [r3, #0]
 8012d46:	605a      	str	r2, [r3, #4]
 8012d48:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	613b      	str	r3, [r7, #16]
 8012d4e:	f107 0314 	add.w	r3, r7, #20
 8012d52:	2200      	movs	r2, #0
 8012d54:	601a      	str	r2, [r3, #0]
 8012d56:	605a      	str	r2, [r3, #4]
 8012d58:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012d5a:	2301      	movs	r3, #1
 8012d5c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012d5e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012d62:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	0a1b      	lsrs	r3, r3, #8
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	0c1b      	lsrs	r3, r3, #16
 8012d76:	b2db      	uxtb	r3, r3
 8012d78:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	0e1b      	lsrs	r3, r3, #24
 8012d7e:	b2db      	uxtb	r3, r3
 8012d80:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d84:	b2db      	uxtb	r3, r3
 8012d86:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d8a:	0a1b      	lsrs	r3, r3, #8
 8012d8c:	b2db      	uxtb	r3, r3
 8012d8e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d92:	0c1b      	lsrs	r3, r3, #16
 8012d94:	b2db      	uxtb	r3, r3
 8012d96:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d9a:	0e1b      	lsrs	r3, r3, #24
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012da0:	e049      	b.n	8012e36 <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8012da2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012da4:	b2db      	uxtb	r3, r3
 8012da6:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012da8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012daa:	3301      	adds	r3, #1
 8012dac:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012dae:	f107 0320 	add.w	r3, r7, #32
 8012db2:	7a7a      	ldrb	r2, [r7, #9]
 8012db4:	f107 0010 	add.w	r0, r7, #16
 8012db8:	2110      	movs	r1, #16
 8012dba:	f7f9 f9fa 	bl	800c1b2 <SecureElementAesEncrypt>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d001      	beq.n	8012dc8 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012dc4:	230f      	movs	r3, #15
 8012dc6:	e03b      	b.n	8012e40 <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012dc8:	2300      	movs	r3, #0
 8012dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012dce:	e01f      	b.n	8012e10 <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012dd0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012dd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012dd8:	4413      	add	r3, r2
 8012dda:	461a      	mov	r2, r3
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	4413      	add	r3, r2
 8012de0:	7819      	ldrb	r1, [r3, #0]
 8012de2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012de6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012dea:	4413      	add	r3, r2
 8012dec:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012df0:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012df4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012df8:	4403      	add	r3, r0
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	4403      	add	r3, r0
 8012e00:	404a      	eors	r2, r1
 8012e02:	b2d2      	uxtb	r2, r2
 8012e04:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012e06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e0a:	3301      	adds	r3, #1
 8012e0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012e10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e14:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012e18:	2a10      	cmp	r2, #16
 8012e1a:	bfa8      	it	ge
 8012e1c:	2210      	movge	r2, #16
 8012e1e:	b212      	sxth	r2, r2
 8012e20:	4293      	cmp	r3, r2
 8012e22:	dbd5      	blt.n	8012dd0 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012e24:	897b      	ldrh	r3, [r7, #10]
 8012e26:	3b10      	subs	r3, #16
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e30:	3310      	adds	r3, #16
 8012e32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012e36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	dcb1      	bgt.n	8012da2 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012e3e:	2300      	movs	r3, #0
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3738      	adds	r7, #56	; 0x38
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}

08012e48 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012e48:	b490      	push	{r4, r7}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	4604      	mov	r4, r0
 8012e50:	4608      	mov	r0, r1
 8012e52:	4611      	mov	r1, r2
 8012e54:	461a      	mov	r2, r3
 8012e56:	4623      	mov	r3, r4
 8012e58:	80fb      	strh	r3, [r7, #6]
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	717b      	strb	r3, [r7, #5]
 8012e5e:	460b      	mov	r3, r1
 8012e60:	713b      	strb	r3, [r7, #4]
 8012e62:	4613      	mov	r3, r2
 8012e64:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012e66:	69bb      	ldr	r3, [r7, #24]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d101      	bne.n	8012e70 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e6c:	230a      	movs	r3, #10
 8012e6e:	e04e      	b.n	8012f0e <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012e70:	69bb      	ldr	r3, [r7, #24]
 8012e72:	2249      	movs	r2, #73	; 0x49
 8012e74:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012e76:	69bb      	ldr	r3, [r7, #24]
 8012e78:	3301      	adds	r3, #1
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012e7e:	69bb      	ldr	r3, [r7, #24]
 8012e80:	3302      	adds	r3, #2
 8012e82:	2200      	movs	r2, #0
 8012e84:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012e86:	69bb      	ldr	r3, [r7, #24]
 8012e88:	3303      	adds	r3, #3
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012e8e:	69bb      	ldr	r3, [r7, #24]
 8012e90:	3304      	adds	r3, #4
 8012e92:	2200      	movs	r2, #0
 8012e94:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	3305      	adds	r3, #5
 8012e9a:	78fa      	ldrb	r2, [r7, #3]
 8012e9c:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012e9e:	69bb      	ldr	r3, [r7, #24]
 8012ea0:	3306      	adds	r3, #6
 8012ea2:	693a      	ldr	r2, [r7, #16]
 8012ea4:	b2d2      	uxtb	r2, r2
 8012ea6:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012ea8:	693b      	ldr	r3, [r7, #16]
 8012eaa:	0a1a      	lsrs	r2, r3, #8
 8012eac:	69bb      	ldr	r3, [r7, #24]
 8012eae:	3307      	adds	r3, #7
 8012eb0:	b2d2      	uxtb	r2, r2
 8012eb2:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	0c1a      	lsrs	r2, r3, #16
 8012eb8:	69bb      	ldr	r3, [r7, #24]
 8012eba:	3308      	adds	r3, #8
 8012ebc:	b2d2      	uxtb	r2, r2
 8012ebe:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	0e1a      	lsrs	r2, r3, #24
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	3309      	adds	r3, #9
 8012ec8:	b2d2      	uxtb	r2, r2
 8012eca:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012ecc:	69bb      	ldr	r3, [r7, #24]
 8012ece:	330a      	adds	r3, #10
 8012ed0:	697a      	ldr	r2, [r7, #20]
 8012ed2:	b2d2      	uxtb	r2, r2
 8012ed4:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	0a1a      	lsrs	r2, r3, #8
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	330b      	adds	r3, #11
 8012ede:	b2d2      	uxtb	r2, r2
 8012ee0:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012ee2:	697b      	ldr	r3, [r7, #20]
 8012ee4:	0c1a      	lsrs	r2, r3, #16
 8012ee6:	69bb      	ldr	r3, [r7, #24]
 8012ee8:	330c      	adds	r3, #12
 8012eea:	b2d2      	uxtb	r2, r2
 8012eec:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	0e1a      	lsrs	r2, r3, #24
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	330d      	adds	r3, #13
 8012ef6:	b2d2      	uxtb	r2, r2
 8012ef8:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012efa:	69bb      	ldr	r3, [r7, #24]
 8012efc:	330e      	adds	r3, #14
 8012efe:	2200      	movs	r2, #0
 8012f00:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	330f      	adds	r3, #15
 8012f06:	88fa      	ldrh	r2, [r7, #6]
 8012f08:	b2d2      	uxtb	r2, r2
 8012f0a:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012f0c:	2300      	movs	r3, #0
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3708      	adds	r7, #8
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bc90      	pop	{r4, r7}
 8012f16:	4770      	bx	lr

08012f18 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012f18:	b590      	push	{r4, r7, lr}
 8012f1a:	b08b      	sub	sp, #44	; 0x2c
 8012f1c:	af04      	add	r7, sp, #16
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	4608      	mov	r0, r1
 8012f22:	4611      	mov	r1, r2
 8012f24:	461a      	mov	r2, r3
 8012f26:	4603      	mov	r3, r0
 8012f28:	807b      	strh	r3, [r7, #2]
 8012f2a:	460b      	mov	r3, r1
 8012f2c:	707b      	strb	r3, [r7, #1]
 8012f2e:	4613      	mov	r3, r2
 8012f30:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d002      	beq.n	8012f3e <ComputeCmacB0+0x26>
 8012f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d101      	bne.n	8012f42 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012f3e:	230a      	movs	r3, #10
 8012f40:	e024      	b.n	8012f8c <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012f42:	887b      	ldrh	r3, [r7, #2]
 8012f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f48:	d901      	bls.n	8012f4e <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012f4a:	230e      	movs	r3, #14
 8012f4c:	e01e      	b.n	8012f8c <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012f4e:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8012f52:	783a      	ldrb	r2, [r7, #0]
 8012f54:	7879      	ldrb	r1, [r7, #1]
 8012f56:	8878      	ldrh	r0, [r7, #2]
 8012f58:	f107 0308 	add.w	r3, r7, #8
 8012f5c:	9302      	str	r3, [sp, #8]
 8012f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f60:	9301      	str	r3, [sp, #4]
 8012f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f64:	9300      	str	r3, [sp, #0]
 8012f66:	4623      	mov	r3, r4
 8012f68:	f7ff ff6e 	bl	8012e48 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012f6c:	7879      	ldrb	r1, [r7, #1]
 8012f6e:	887a      	ldrh	r2, [r7, #2]
 8012f70:	f107 0008 	add.w	r0, r7, #8
 8012f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f76:	9300      	str	r3, [sp, #0]
 8012f78:	460b      	mov	r3, r1
 8012f7a:	6879      	ldr	r1, [r7, #4]
 8012f7c:	f7f9 f8cc 	bl	800c118 <SecureElementComputeAesCmac>
 8012f80:	4603      	mov	r3, r0
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d001      	beq.n	8012f8a <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012f86:	230f      	movs	r3, #15
 8012f88:	e000      	b.n	8012f8c <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012f8a:	2300      	movs	r3, #0
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	371c      	adds	r7, #28
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd90      	pop	{r4, r7, pc}

08012f94 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012f94:	b590      	push	{r4, r7, lr}
 8012f96:	b0cd      	sub	sp, #308	; 0x134
 8012f98:	af04      	add	r7, sp, #16
 8012f9a:	1d3c      	adds	r4, r7, #4
 8012f9c:	6020      	str	r0, [r4, #0]
 8012f9e:	460c      	mov	r4, r1
 8012fa0:	4610      	mov	r0, r2
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	1cbb      	adds	r3, r7, #2
 8012fa6:	4622      	mov	r2, r4
 8012fa8:	801a      	strh	r2, [r3, #0]
 8012faa:	1c7b      	adds	r3, r7, #1
 8012fac:	4602      	mov	r2, r0
 8012fae:	701a      	strb	r2, [r3, #0]
 8012fb0:	463b      	mov	r3, r7
 8012fb2:	460a      	mov	r2, r1
 8012fb4:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012fb6:	1d3b      	adds	r3, r7, #4
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d101      	bne.n	8012fc2 <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012fbe:	230a      	movs	r3, #10
 8012fc0:	e04b      	b.n	801305a <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012fc2:	1cbb      	adds	r3, r7, #2
 8012fc4:	881b      	ldrh	r3, [r3, #0]
 8012fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012fca:	d901      	bls.n	8012fd0 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012fcc:	230e      	movs	r3, #14
 8012fce:	e044      	b.n	801305a <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012fd0:	f107 030c 	add.w	r3, r7, #12
 8012fd4:	f44f 7288 	mov.w	r2, #272	; 0x110
 8012fd8:	2100      	movs	r1, #0
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f003 fbae 	bl	801673c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012fe0:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8012fe4:	463b      	mov	r3, r7
 8012fe6:	781a      	ldrb	r2, [r3, #0]
 8012fe8:	1c7b      	adds	r3, r7, #1
 8012fea:	7819      	ldrb	r1, [r3, #0]
 8012fec:	1cbb      	adds	r3, r7, #2
 8012fee:	8818      	ldrh	r0, [r3, #0]
 8012ff0:	f107 030c 	add.w	r3, r7, #12
 8012ff4:	9302      	str	r3, [sp, #8]
 8012ff6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012ffa:	9301      	str	r3, [sp, #4]
 8012ffc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013000:	9300      	str	r3, [sp, #0]
 8013002:	4623      	mov	r3, r4
 8013004:	f7ff ff20 	bl	8012e48 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013008:	f107 030c 	add.w	r3, r7, #12
 801300c:	3310      	adds	r3, #16
 801300e:	1cba      	adds	r2, r7, #2
 8013010:	8812      	ldrh	r2, [r2, #0]
 8013012:	1d39      	adds	r1, r7, #4
 8013014:	6809      	ldr	r1, [r1, #0]
 8013016:	4618      	mov	r0, r3
 8013018:	f003 fb55 	bl	80166c6 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801301c:	2306      	movs	r3, #6
 801301e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8013022:	1cbb      	adds	r3, r7, #2
 8013024:	881b      	ldrh	r3, [r3, #0]
 8013026:	3310      	adds	r3, #16
 8013028:	b299      	uxth	r1, r3
 801302a:	1c7b      	adds	r3, r7, #1
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	f107 000c 	add.w	r0, r7, #12
 8013032:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8013036:	f7f9 f88d 	bl	800c154 <SecureElementVerifyAesCmac>
 801303a:	4603      	mov	r3, r0
 801303c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013040:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013044:	2b00      	cmp	r3, #0
 8013046:	d101      	bne.n	801304c <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013048:	2300      	movs	r3, #0
 801304a:	e006      	b.n	801305a <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801304c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013050:	2b01      	cmp	r3, #1
 8013052:	d101      	bne.n	8013058 <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013054:	2301      	movs	r3, #1
 8013056:	e000      	b.n	801305a <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013058:	230f      	movs	r3, #15
}
 801305a:	4618      	mov	r0, r3
 801305c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8013060:	46bd      	mov	sp, r7
 8013062:	bd90      	pop	{r4, r7, pc}

08013064 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013064:	b480      	push	{r7}
 8013066:	b085      	sub	sp, #20
 8013068:	af00      	add	r7, sp, #0
 801306a:	4603      	mov	r3, r0
 801306c:	6039      	str	r1, [r7, #0]
 801306e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013070:	2300      	movs	r3, #0
 8013072:	73fb      	strb	r3, [r7, #15]
 8013074:	e011      	b.n	801309a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013076:	7bfb      	ldrb	r3, [r7, #15]
 8013078:	4a0c      	ldr	r2, [pc, #48]	; (80130ac <GetKeyAddrItem+0x48>)
 801307a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801307e:	79fa      	ldrb	r2, [r7, #7]
 8013080:	429a      	cmp	r2, r3
 8013082:	d107      	bne.n	8013094 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013084:	7bfb      	ldrb	r3, [r7, #15]
 8013086:	009b      	lsls	r3, r3, #2
 8013088:	4a08      	ldr	r2, [pc, #32]	; (80130ac <GetKeyAddrItem+0x48>)
 801308a:	441a      	add	r2, r3
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013090:	2300      	movs	r3, #0
 8013092:	e006      	b.n	80130a2 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013094:	7bfb      	ldrb	r3, [r7, #15]
 8013096:	3301      	adds	r3, #1
 8013098:	73fb      	strb	r3, [r7, #15]
 801309a:	7bfb      	ldrb	r3, [r7, #15]
 801309c:	2b01      	cmp	r3, #1
 801309e:	d9ea      	bls.n	8013076 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80130a0:	230c      	movs	r3, #12
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3714      	adds	r7, #20
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bc80      	pop	{r7}
 80130aa:	4770      	bx	lr
 80130ac:	20000114 	.word	0x20000114

080130b0 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b088      	sub	sp, #32
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	60b9      	str	r1, [r7, #8]
 80130b8:	607a      	str	r2, [r7, #4]
 80130ba:	461a      	mov	r2, r3
 80130bc:	4603      	mov	r3, r0
 80130be:	73fb      	strb	r3, [r7, #15]
 80130c0:	4613      	mov	r3, r2
 80130c2:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80130c4:	2300      	movs	r3, #0
 80130c6:	613b      	str	r3, [r7, #16]
 80130c8:	f107 0314 	add.w	r3, r7, #20
 80130cc:	2200      	movs	r2, #0
 80130ce:	601a      	str	r2, [r3, #0]
 80130d0:	605a      	str	r2, [r3, #4]
 80130d2:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80130d4:	7bfb      	ldrb	r3, [r7, #15]
 80130d6:	2b02      	cmp	r3, #2
 80130d8:	d002      	beq.n	80130e0 <DeriveSessionKey10x+0x30>
 80130da:	2b03      	cmp	r3, #3
 80130dc:	d003      	beq.n	80130e6 <DeriveSessionKey10x+0x36>
 80130de:	e005      	b.n	80130ec <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80130e0:	2301      	movs	r3, #1
 80130e2:	743b      	strb	r3, [r7, #16]
            break;
 80130e4:	e004      	b.n	80130f0 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80130e6:	2302      	movs	r3, #2
 80130e8:	743b      	strb	r3, [r7, #16]
            break;
 80130ea:	e001      	b.n	80130f0 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80130ec:	230b      	movs	r3, #11
 80130ee:	e02a      	b.n	8013146 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	b2db      	uxtb	r3, r3
 80130f4:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	0a1b      	lsrs	r3, r3, #8
 80130fa:	b2db      	uxtb	r3, r3
 80130fc:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	0c1b      	lsrs	r3, r3, #16
 8013102:	b2db      	uxtb	r3, r3
 8013104:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	b2db      	uxtb	r3, r3
 801310a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	0a1b      	lsrs	r3, r3, #8
 8013110:	b2db      	uxtb	r3, r3
 8013112:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	0c1b      	lsrs	r3, r3, #16
 8013118:	b2db      	uxtb	r3, r3
 801311a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801311c:	89bb      	ldrh	r3, [r7, #12]
 801311e:	b2db      	uxtb	r3, r3
 8013120:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013122:	89bb      	ldrh	r3, [r7, #12]
 8013124:	0a1b      	lsrs	r3, r3, #8
 8013126:	b29b      	uxth	r3, r3
 8013128:	b2db      	uxtb	r3, r3
 801312a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801312c:	7bfa      	ldrb	r2, [r7, #15]
 801312e:	f107 0310 	add.w	r3, r7, #16
 8013132:	2101      	movs	r1, #1
 8013134:	4618      	mov	r0, r3
 8013136:	f7f9 f89a 	bl	800c26e <SecureElementDeriveAndStoreKey>
 801313a:	4603      	mov	r3, r0
 801313c:	2b00      	cmp	r3, #0
 801313e:	d001      	beq.n	8013144 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013140:	230f      	movs	r3, #15
 8013142:	e000      	b.n	8013146 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013144:	2300      	movs	r3, #0
}
 8013146:	4618      	mov	r0, r3
 8013148:	3720      	adds	r7, #32
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}
	...

08013150 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	4603      	mov	r3, r0
 8013158:	6039      	str	r1, [r7, #0]
 801315a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d101      	bne.n	8013166 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013162:	230a      	movs	r3, #10
 8013164:	e03b      	b.n	80131de <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8013166:	79fb      	ldrb	r3, [r7, #7]
 8013168:	3b01      	subs	r3, #1
 801316a:	2b03      	cmp	r3, #3
 801316c:	d834      	bhi.n	80131d8 <GetLastFcntDown+0x88>
 801316e:	a201      	add	r2, pc, #4	; (adr r2, 8013174 <GetLastFcntDown+0x24>)
 8013170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013174:	08013185 	.word	0x08013185
 8013178:	0801319d 	.word	0x0801319d
 801317c:	080131b5 	.word	0x080131b5
 8013180:	080131cd 	.word	0x080131cd
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013184:	4b18      	ldr	r3, [pc, #96]	; (80131e8 <GetLastFcntDown+0x98>)
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	691a      	ldr	r2, [r3, #16]
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801318e:	4b16      	ldr	r3, [pc, #88]	; (80131e8 <GetLastFcntDown+0x98>)
 8013190:	681a      	ldr	r2, [r3, #0]
 8013192:	4b15      	ldr	r3, [pc, #84]	; (80131e8 <GetLastFcntDown+0x98>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	6912      	ldr	r2, [r2, #16]
 8013198:	621a      	str	r2, [r3, #32]
            break;
 801319a:	e01f      	b.n	80131dc <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801319c:	4b12      	ldr	r3, [pc, #72]	; (80131e8 <GetLastFcntDown+0x98>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	695a      	ldr	r2, [r3, #20]
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80131a6:	4b10      	ldr	r3, [pc, #64]	; (80131e8 <GetLastFcntDown+0x98>)
 80131a8:	681a      	ldr	r2, [r3, #0]
 80131aa:	4b0f      	ldr	r3, [pc, #60]	; (80131e8 <GetLastFcntDown+0x98>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	6952      	ldr	r2, [r2, #20]
 80131b0:	621a      	str	r2, [r3, #32]
            break;
 80131b2:	e013      	b.n	80131dc <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80131b4:	4b0c      	ldr	r3, [pc, #48]	; (80131e8 <GetLastFcntDown+0x98>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	699a      	ldr	r2, [r3, #24]
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80131be:	4b0a      	ldr	r3, [pc, #40]	; (80131e8 <GetLastFcntDown+0x98>)
 80131c0:	681a      	ldr	r2, [r3, #0]
 80131c2:	4b09      	ldr	r3, [pc, #36]	; (80131e8 <GetLastFcntDown+0x98>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	6992      	ldr	r2, [r2, #24]
 80131c8:	621a      	str	r2, [r3, #32]
            break;
 80131ca:	e007      	b.n	80131dc <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80131cc:	4b06      	ldr	r3, [pc, #24]	; (80131e8 <GetLastFcntDown+0x98>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	69da      	ldr	r2, [r3, #28]
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	601a      	str	r2, [r3, #0]
            break;
 80131d6:	e001      	b.n	80131dc <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80131d8:	2305      	movs	r3, #5
 80131da:	e000      	b.n	80131de <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80131dc:	2300      	movs	r3, #0
}
 80131de:	4618      	mov	r0, r3
 80131e0:	370c      	adds	r7, #12
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bc80      	pop	{r7}
 80131e6:	4770      	bx	lr
 80131e8:	20000ec4 	.word	0x20000ec4

080131ec <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b084      	sub	sp, #16
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	4603      	mov	r3, r0
 80131f4:	6039      	str	r1, [r7, #0]
 80131f6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80131f8:	2300      	movs	r3, #0
 80131fa:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80131fc:	f107 020c 	add.w	r2, r7, #12
 8013200:	79fb      	ldrb	r3, [r7, #7]
 8013202:	4611      	mov	r1, r2
 8013204:	4618      	mov	r0, r3
 8013206:	f7ff ffa3 	bl	8013150 <GetLastFcntDown>
 801320a:	4603      	mov	r3, r0
 801320c:	2b00      	cmp	r3, #0
 801320e:	d001      	beq.n	8013214 <CheckFCntDown+0x28>
    {
        return false;
 8013210:	2300      	movs	r3, #0
 8013212:	e00a      	b.n	801322a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	683a      	ldr	r2, [r7, #0]
 8013218:	429a      	cmp	r2, r3
 801321a:	d803      	bhi.n	8013224 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 801321c:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013222:	d101      	bne.n	8013228 <CheckFCntDown+0x3c>
    {
        return true;
 8013224:	2301      	movs	r3, #1
 8013226:	e000      	b.n	801322a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013228:	2300      	movs	r3, #0
    }
}
 801322a:	4618      	mov	r0, r3
 801322c:	3710      	adds	r7, #16
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
	...

08013234 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013234:	b480      	push	{r7}
 8013236:	b083      	sub	sp, #12
 8013238:	af00      	add	r7, sp, #0
 801323a:	4603      	mov	r3, r0
 801323c:	6039      	str	r1, [r7, #0]
 801323e:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013240:	79fb      	ldrb	r3, [r7, #7]
 8013242:	3b01      	subs	r3, #1
 8013244:	2b03      	cmp	r3, #3
 8013246:	d81f      	bhi.n	8013288 <UpdateFCntDown+0x54>
 8013248:	a201      	add	r2, pc, #4	; (adr r2, 8013250 <UpdateFCntDown+0x1c>)
 801324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801324e:	bf00      	nop
 8013250:	08013261 	.word	0x08013261
 8013254:	0801326b 	.word	0x0801326b
 8013258:	08013275 	.word	0x08013275
 801325c:	0801327f 	.word	0x0801327f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013260:	4b0c      	ldr	r3, [pc, #48]	; (8013294 <UpdateFCntDown+0x60>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	683a      	ldr	r2, [r7, #0]
 8013266:	611a      	str	r2, [r3, #16]
            break;
 8013268:	e00f      	b.n	801328a <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801326a:	4b0a      	ldr	r3, [pc, #40]	; (8013294 <UpdateFCntDown+0x60>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	683a      	ldr	r2, [r7, #0]
 8013270:	615a      	str	r2, [r3, #20]
            break;
 8013272:	e00a      	b.n	801328a <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013274:	4b07      	ldr	r3, [pc, #28]	; (8013294 <UpdateFCntDown+0x60>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	683a      	ldr	r2, [r7, #0]
 801327a:	619a      	str	r2, [r3, #24]
            break;
 801327c:	e005      	b.n	801328a <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801327e:	4b05      	ldr	r3, [pc, #20]	; (8013294 <UpdateFCntDown+0x60>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	683a      	ldr	r2, [r7, #0]
 8013284:	61da      	str	r2, [r3, #28]
            break;
 8013286:	e000      	b.n	801328a <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013288:	bf00      	nop
    }
}
 801328a:	bf00      	nop
 801328c:	370c      	adds	r7, #12
 801328e:	46bd      	mov	sp, r7
 8013290:	bc80      	pop	{r7}
 8013292:	4770      	bx	lr
 8013294:	20000ec4 	.word	0x20000ec4

08013298 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801329e:	4b18      	ldr	r3, [pc, #96]	; (8013300 <ResetFCnts+0x68>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	2200      	movs	r2, #0
 80132a4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80132a6:	4b16      	ldr	r3, [pc, #88]	; (8013300 <ResetFCnts+0x68>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	f04f 32ff 	mov.w	r2, #4294967295
 80132ae:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80132b0:	4b13      	ldr	r3, [pc, #76]	; (8013300 <ResetFCnts+0x68>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	f04f 32ff 	mov.w	r2, #4294967295
 80132b8:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80132ba:	4b11      	ldr	r3, [pc, #68]	; (8013300 <ResetFCnts+0x68>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f04f 32ff 	mov.w	r2, #4294967295
 80132c2:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80132c4:	4b0e      	ldr	r3, [pc, #56]	; (8013300 <ResetFCnts+0x68>)
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	4b0d      	ldr	r3, [pc, #52]	; (8013300 <ResetFCnts+0x68>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	6992      	ldr	r2, [r2, #24]
 80132ce:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80132d0:	2300      	movs	r3, #0
 80132d2:	607b      	str	r3, [r7, #4]
 80132d4:	e00b      	b.n	80132ee <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80132d6:	4b0a      	ldr	r3, [pc, #40]	; (8013300 <ResetFCnts+0x68>)
 80132d8:	681a      	ldr	r2, [r3, #0]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	3306      	adds	r3, #6
 80132de:	009b      	lsls	r3, r3, #2
 80132e0:	4413      	add	r3, r2
 80132e2:	f04f 32ff 	mov.w	r2, #4294967295
 80132e6:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	3301      	adds	r3, #1
 80132ec:	607b      	str	r3, [r7, #4]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	ddf0      	ble.n	80132d6 <ResetFCnts+0x3e>
    }
}
 80132f4:	bf00      	nop
 80132f6:	bf00      	nop
 80132f8:	370c      	adds	r7, #12
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bc80      	pop	{r7}
 80132fe:	4770      	bx	lr
 8013300:	20000ec4 	.word	0x20000ec4

08013304 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d101      	bne.n	8013316 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013312:	2309      	movs	r3, #9
 8013314:	e01c      	b.n	8013350 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013316:	4a10      	ldr	r2, [pc, #64]	; (8013358 <LoRaMacCryptoInit+0x54>)
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801331c:	4b0e      	ldr	r3, [pc, #56]	; (8013358 <LoRaMacCryptoInit+0x54>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	2228      	movs	r2, #40	; 0x28
 8013322:	2100      	movs	r1, #0
 8013324:	4618      	mov	r0, r3
 8013326:	f003 fa09 	bl	801673c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801332a:	4b0b      	ldr	r3, [pc, #44]	; (8013358 <LoRaMacCryptoInit+0x54>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	2201      	movs	r2, #1
 8013330:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013332:	4b09      	ldr	r3, [pc, #36]	; (8013358 <LoRaMacCryptoInit+0x54>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2201      	movs	r2, #1
 8013338:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801333a:	4b07      	ldr	r3, [pc, #28]	; (8013358 <LoRaMacCryptoInit+0x54>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	2201      	movs	r2, #1
 8013340:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013342:	4b05      	ldr	r3, [pc, #20]	; (8013358 <LoRaMacCryptoInit+0x54>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	2200      	movs	r2, #0
 8013348:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801334a:	f7ff ffa5 	bl	8013298 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801334e:	2300      	movs	r3, #0
}
 8013350:	4618      	mov	r0, r3
 8013352:	3708      	adds	r7, #8
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}
 8013358:	20000ec4 	.word	0x20000ec4

0801335c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801335c:	b480      	push	{r7}
 801335e:	b083      	sub	sp, #12
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013364:	4b04      	ldr	r3, [pc, #16]	; (8013378 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	687a      	ldr	r2, [r7, #4]
 801336a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801336c:	2300      	movs	r3, #0
}
 801336e:	4618      	mov	r0, r3
 8013370:	370c      	adds	r7, #12
 8013372:	46bd      	mov	sp, r7
 8013374:	bc80      	pop	{r7}
 8013376:	4770      	bx	lr
 8013378:	20000ec4 	.word	0x20000ec4

0801337c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801337c:	b480      	push	{r7}
 801337e:	b083      	sub	sp, #12
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d101      	bne.n	801338e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801338a:	230a      	movs	r3, #10
 801338c:	e006      	b.n	801339c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801338e:	4b06      	ldr	r3, [pc, #24]	; (80133a8 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	68db      	ldr	r3, [r3, #12]
 8013394:	1c5a      	adds	r2, r3, #1
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801339a:	2300      	movs	r3, #0
}
 801339c:	4618      	mov	r0, r3
 801339e:	370c      	adds	r7, #12
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bc80      	pop	{r7}
 80133a4:	4770      	bx	lr
 80133a6:	bf00      	nop
 80133a8:	20000ec4 	.word	0x20000ec4

080133ac <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80133ac:	b5b0      	push	{r4, r5, r7, lr}
 80133ae:	b088      	sub	sp, #32
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	60ba      	str	r2, [r7, #8]
 80133b4:	607b      	str	r3, [r7, #4]
 80133b6:	4603      	mov	r3, r0
 80133b8:	73fb      	strb	r3, [r7, #15]
 80133ba:	460b      	mov	r3, r1
 80133bc:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 80133be:	2300      	movs	r3, #0
 80133c0:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80133c2:	2300      	movs	r3, #0
 80133c4:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80133c6:	2313      	movs	r3, #19
 80133c8:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d101      	bne.n	80133d4 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80133d0:	230a      	movs	r3, #10
 80133d2:	e04f      	b.n	8013474 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80133d4:	f107 0214 	add.w	r2, r7, #20
 80133d8:	7bfb      	ldrb	r3, [r7, #15]
 80133da:	4611      	mov	r1, r2
 80133dc:	4618      	mov	r0, r3
 80133de:	f7ff feb7 	bl	8013150 <GetLastFcntDown>
 80133e2:	4603      	mov	r3, r0
 80133e4:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80133e6:	7efb      	ldrb	r3, [r7, #27]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d001      	beq.n	80133f0 <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 80133ec:	7efb      	ldrb	r3, [r7, #27]
 80133ee:	e041      	b.n	8013474 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80133f0:	697b      	ldr	r3, [r7, #20]
 80133f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133f6:	d103      	bne.n	8013400 <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	68ba      	ldr	r2, [r7, #8]
 80133fc:	601a      	str	r2, [r3, #0]
 80133fe:	e01e      	b.n	801343e <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	b29b      	uxth	r3, r3
 8013404:	68ba      	ldr	r2, [r7, #8]
 8013406:	1ad3      	subs	r3, r2, r3
 8013408:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 801340a:	69fb      	ldr	r3, [r7, #28]
 801340c:	2b00      	cmp	r3, #0
 801340e:	dd05      	ble.n	801341c <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013410:	697a      	ldr	r2, [r7, #20]
 8013412:	69fb      	ldr	r3, [r7, #28]
 8013414:	441a      	add	r2, r3
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	601a      	str	r2, [r3, #0]
 801341a:	e010      	b.n	801343e <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d104      	bne.n	801342c <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013422:	697a      	ldr	r2, [r7, #20]
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013428:	2307      	movs	r3, #7
 801342a:	e023      	b.n	8013474 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	0c1b      	lsrs	r3, r3, #16
 8013430:	041b      	lsls	r3, r3, #16
 8013432:	68ba      	ldr	r2, [r7, #8]
 8013434:	4413      	add	r3, r2
 8013436:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801343e:	4b0f      	ldr	r3, [pc, #60]	; (801347c <LoRaMacCryptoGetFCntDown+0xd0>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	789b      	ldrb	r3, [r3, #2]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d114      	bne.n	8013472 <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	4618      	mov	r0, r3
 801344e:	f04f 0100 	mov.w	r1, #0
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	461a      	mov	r2, r3
 8013456:	f04f 0300 	mov.w	r3, #0
 801345a:	1a84      	subs	r4, r0, r2
 801345c:	eb61 0503 	sbc.w	r5, r1, r3
 8013460:	89ba      	ldrh	r2, [r7, #12]
 8013462:	f04f 0300 	mov.w	r3, #0
 8013466:	4294      	cmp	r4, r2
 8013468:	eb75 0303 	sbcs.w	r3, r5, r3
 801346c:	db01      	blt.n	8013472 <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801346e:	2308      	movs	r3, #8
 8013470:	e000      	b.n	8013474 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013472:	2300      	movs	r3, #0
}
 8013474:	4618      	mov	r0, r3
 8013476:	3720      	adds	r7, #32
 8013478:	46bd      	mov	sp, r7
 801347a:	bdb0      	pop	{r4, r5, r7, pc}
 801347c:	20000ec4 	.word	0x20000ec4

08013480 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013480:	b480      	push	{r7}
 8013482:	b085      	sub	sp, #20
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d101      	bne.n	8013492 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801348e:	230a      	movs	r3, #10
 8013490:	e017      	b.n	80134c2 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013492:	2300      	movs	r3, #0
 8013494:	60fb      	str	r3, [r7, #12]
 8013496:	e010      	b.n	80134ba <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013498:	4b0c      	ldr	r3, [pc, #48]	; (80134cc <LoRaMacCryptoSetMulticastReference+0x4c>)
 801349a:	6819      	ldr	r1, [r3, #0]
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	222c      	movs	r2, #44	; 0x2c
 80134a0:	fb02 f303 	mul.w	r3, r2, r3
 80134a4:	687a      	ldr	r2, [r7, #4]
 80134a6:	4413      	add	r3, r2
 80134a8:	68fa      	ldr	r2, [r7, #12]
 80134aa:	3206      	adds	r2, #6
 80134ac:	0092      	lsls	r2, r2, #2
 80134ae:	440a      	add	r2, r1
 80134b0:	3204      	adds	r2, #4
 80134b2:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	3301      	adds	r3, #1
 80134b8:	60fb      	str	r3, [r7, #12]
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	ddeb      	ble.n	8013498 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80134c0:	2300      	movs	r3, #0
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	3714      	adds	r7, #20
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bc80      	pop	{r7}
 80134ca:	4770      	bx	lr
 80134cc:	20000ec4 	.word	0x20000ec4

080134d0 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b082      	sub	sp, #8
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	4603      	mov	r3, r0
 80134d8:	6039      	str	r1, [r7, #0]
 80134da:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80134dc:	79fb      	ldrb	r3, [r7, #7]
 80134de:	6839      	ldr	r1, [r7, #0]
 80134e0:	4618      	mov	r0, r3
 80134e2:	f7f8 fdbb 	bl	800c05c <SecureElementSetKey>
 80134e6:	4603      	mov	r3, r0
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d001      	beq.n	80134f0 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80134ec:	230f      	movs	r3, #15
 80134ee:	e018      	b.n	8013522 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80134f0:	79fb      	ldrb	r3, [r7, #7]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d114      	bne.n	8013520 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80134f6:	4b0d      	ldr	r3, [pc, #52]	; (801352c <LoRaMacCryptoSetKey+0x5c>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	789b      	ldrb	r3, [r3, #2]
 80134fc:	79fa      	ldrb	r2, [r7, #7]
 80134fe:	4611      	mov	r1, r2
 8013500:	4618      	mov	r0, r3
 8013502:	f000 fa3f 	bl	8013984 <LoRaMacCryptoDeriveMcRootKey>
 8013506:	4603      	mov	r3, r0
 8013508:	2b00      	cmp	r3, #0
 801350a:	d001      	beq.n	8013510 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801350c:	230f      	movs	r3, #15
 801350e:	e008      	b.n	8013522 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013510:	2004      	movs	r0, #4
 8013512:	f000 fa62 	bl	80139da <LoRaMacCryptoDeriveMcKEKey>
 8013516:	4603      	mov	r3, r0
 8013518:	2b00      	cmp	r3, #0
 801351a:	d001      	beq.n	8013520 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801351c:	230f      	movs	r3, #15
 801351e:	e000      	b.n	8013522 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013520:	2300      	movs	r3, #0
}
 8013522:	4618      	mov	r0, r3
 8013524:	3708      	adds	r7, #8
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
 801352a:	bf00      	nop
 801352c:	20000ec4 	.word	0x20000ec4

08013530 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b086      	sub	sp, #24
 8013534:	af02      	add	r7, sp, #8
 8013536:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d101      	bne.n	8013542 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801353e:	230a      	movs	r3, #10
 8013540:	e033      	b.n	80135aa <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8013542:	2301      	movs	r3, #1
 8013544:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8013546:	2300      	movs	r3, #0
 8013548:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 801354a:	f107 0308 	add.w	r3, r7, #8
 801354e:	4618      	mov	r0, r3
 8013550:	f7f8 ff4a 	bl	800c3e8 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8013554:	68ba      	ldr	r2, [r7, #8]
 8013556:	4b17      	ldr	r3, [pc, #92]	; (80135b4 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	b292      	uxth	r2, r2
 801355c:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801355e:	4b15      	ldr	r3, [pc, #84]	; (80135b4 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	889a      	ldrh	r2, [r3, #4]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f000 fc18 	bl	8013d9e <LoRaMacSerializerJoinRequest>
 801356e:	4603      	mov	r3, r0
 8013570:	2b00      	cmp	r3, #0
 8013572:	d001      	beq.n	8013578 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013574:	2311      	movs	r3, #17
 8013576:	e018      	b.n	80135aa <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6819      	ldr	r1, [r3, #0]
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	3318      	adds	r3, #24
 8013580:	7bfa      	ldrb	r2, [r7, #15]
 8013582:	9300      	str	r3, [sp, #0]
 8013584:	4613      	mov	r3, r2
 8013586:	2213      	movs	r2, #19
 8013588:	2000      	movs	r0, #0
 801358a:	f7f8 fdc5 	bl	800c118 <SecureElementComputeAesCmac>
 801358e:	4603      	mov	r3, r0
 8013590:	2b00      	cmp	r3, #0
 8013592:	d001      	beq.n	8013598 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013594:	230f      	movs	r3, #15
 8013596:	e008      	b.n	80135aa <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	f000 fc00 	bl	8013d9e <LoRaMacSerializerJoinRequest>
 801359e:	4603      	mov	r3, r0
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d001      	beq.n	80135a8 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80135a4:	2311      	movs	r3, #17
 80135a6:	e000      	b.n	80135aa <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80135a8:	2300      	movs	r3, #0
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	3710      	adds	r7, #16
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}
 80135b2:	bf00      	nop
 80135b4:	20000ec4 	.word	0x20000ec4

080135b8 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80135b8:	b590      	push	{r4, r7, lr}
 80135ba:	b097      	sub	sp, #92	; 0x5c
 80135bc:	af04      	add	r7, sp, #16
 80135be:	4603      	mov	r3, r0
 80135c0:	60b9      	str	r1, [r7, #8]
 80135c2:	607a      	str	r2, [r7, #4]
 80135c4:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d002      	beq.n	80135d2 <LoRaMacCryptoHandleJoinAccept+0x1a>
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d101      	bne.n	80135d6 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80135d2:	230a      	movs	r3, #10
 80135d4:	e0bd      	b.n	8013752 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80135d6:	2313      	movs	r3, #19
 80135d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80135dc:	2300      	movs	r3, #0
 80135de:	61bb      	str	r3, [r7, #24]
 80135e0:	f107 031c 	add.w	r3, r7, #28
 80135e4:	221d      	movs	r2, #29
 80135e6:	2100      	movs	r1, #0
 80135e8:	4618      	mov	r0, r3
 80135ea:	f007 fd05 	bl	801aff8 <memset>
    uint8_t versionMinor         = 0;
 80135ee:	2300      	movs	r3, #0
 80135f0:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80135f2:	4b5a      	ldr	r3, [pc, #360]	; (801375c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	889b      	ldrh	r3, [r3, #4]
 80135f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681c      	ldr	r4, [r3, #0]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	791b      	ldrb	r3, [r3, #4]
 8013604:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013608:	7bf8      	ldrb	r0, [r7, #15]
 801360a:	f107 0217 	add.w	r2, r7, #23
 801360e:	9202      	str	r2, [sp, #8]
 8013610:	f107 0218 	add.w	r2, r7, #24
 8013614:	9201      	str	r2, [sp, #4]
 8013616:	9300      	str	r3, [sp, #0]
 8013618:	4623      	mov	r3, r4
 801361a:	460a      	mov	r2, r1
 801361c:	68b9      	ldr	r1, [r7, #8]
 801361e:	f7f8 fe66 	bl	800c2ee <SecureElementProcessJoinAccept>
 8013622:	4603      	mov	r3, r0
 8013624:	2b00      	cmp	r3, #0
 8013626:	d001      	beq.n	801362c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013628:	230f      	movs	r3, #15
 801362a:	e092      	b.n	8013752 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6818      	ldr	r0, [r3, #0]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	791b      	ldrb	r3, [r3, #4]
 8013634:	b29a      	uxth	r2, r3
 8013636:	f107 0318 	add.w	r3, r7, #24
 801363a:	4619      	mov	r1, r3
 801363c:	f003 f843 	bl	80166c6 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f000 f9ed 	bl	8013a20 <LoRaMacParserJoinAccept>
 8013646:	4603      	mov	r3, r0
 8013648:	2b00      	cmp	r3, #0
 801364a:	d001      	beq.n	8013650 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801364c:	2310      	movs	r3, #16
 801364e:	e080      	b.n	8013752 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	799b      	ldrb	r3, [r3, #6]
 8013654:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	79db      	ldrb	r3, [r3, #7]
 801365a:	021b      	lsls	r3, r3, #8
 801365c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801365e:	4313      	orrs	r3, r2
 8013660:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	7a1b      	ldrb	r3, [r3, #8]
 8013666:	041b      	lsls	r3, r3, #16
 8013668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801366a:	4313      	orrs	r3, r2
 801366c:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801366e:	4b3b      	ldr	r3, [pc, #236]	; (801375c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	689b      	ldr	r3, [r3, #8]
 8013674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013676:	429a      	cmp	r2, r3
 8013678:	d010      	beq.n	801369c <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801367a:	4b38      	ldr	r3, [pc, #224]	; (801375c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013680:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8013682:	7dfb      	ldrb	r3, [r7, #23]
 8013684:	2100      	movs	r1, #0
 8013686:	4618      	mov	r0, r3
 8013688:	f000 f97c 	bl	8013984 <LoRaMacCryptoDeriveMcRootKey>
 801368c:	4603      	mov	r3, r0
 801368e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013692:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013696:	2b00      	cmp	r3, #0
 8013698:	d005      	beq.n	80136a6 <LoRaMacCryptoHandleJoinAccept+0xee>
 801369a:	e001      	b.n	80136a0 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801369c:	2303      	movs	r3, #3
 801369e:	e058      	b.n	8013752 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80136a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136a4:	e055      	b.n	8013752 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80136a6:	2004      	movs	r0, #4
 80136a8:	f000 f997 	bl	80139da <LoRaMacCryptoDeriveMcKEKey>
 80136ac:	4603      	mov	r3, r0
 80136ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d002      	beq.n	80136c0 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 80136ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136be:	e048      	b.n	8013752 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	7a5b      	ldrb	r3, [r3, #9]
 80136c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	7a9b      	ldrb	r3, [r3, #10]
 80136ca:	021b      	lsls	r3, r3, #8
 80136cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80136ce:	4313      	orrs	r3, r2
 80136d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	7adb      	ldrb	r3, [r3, #11]
 80136d6:	041b      	lsls	r3, r3, #16
 80136d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80136da:	4313      	orrs	r3, r2
 80136dc:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80136de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80136e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80136e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80136e6:	2003      	movs	r0, #3
 80136e8:	f7ff fce2 	bl	80130b0 <DeriveSessionKey10x>
 80136ec:	4603      	mov	r3, r0
 80136ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d002      	beq.n	8013700 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 80136fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136fe:	e028      	b.n	8013752 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013700:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013706:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013708:	2002      	movs	r0, #2
 801370a:	f7ff fcd1 	bl	80130b0 <DeriveSessionKey10x>
 801370e:	4603      	mov	r3, r0
 8013710:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013714:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013718:	2b00      	cmp	r3, #0
 801371a:	d002      	beq.n	8013722 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 801371c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013720:	e017      	b.n	8013752 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013722:	4b0e      	ldr	r3, [pc, #56]	; (801375c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	7dfa      	ldrb	r2, [r7, #23]
 8013728:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 801372a:	4b0c      	ldr	r3, [pc, #48]	; (801375c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	2200      	movs	r2, #0
 8013730:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013732:	4b0a      	ldr	r3, [pc, #40]	; (801375c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	f04f 32ff 	mov.w	r2, #4294967295
 801373a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801373c:	4b07      	ldr	r3, [pc, #28]	; (801375c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	f04f 32ff 	mov.w	r2, #4294967295
 8013744:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013746:	4b05      	ldr	r3, [pc, #20]	; (801375c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	f04f 32ff 	mov.w	r2, #4294967295
 801374e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013750:	2300      	movs	r3, #0
}
 8013752:	4618      	mov	r0, r3
 8013754:	374c      	adds	r7, #76	; 0x4c
 8013756:	46bd      	mov	sp, r7
 8013758:	bd90      	pop	{r4, r7, pc}
 801375a:	bf00      	nop
 801375c:	20000ec4 	.word	0x20000ec4

08013760 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013760:	b590      	push	{r4, r7, lr}
 8013762:	b08b      	sub	sp, #44	; 0x2c
 8013764:	af04      	add	r7, sp, #16
 8013766:	60f8      	str	r0, [r7, #12]
 8013768:	607b      	str	r3, [r7, #4]
 801376a:	460b      	mov	r3, r1
 801376c:	72fb      	strb	r3, [r7, #11]
 801376e:	4613      	mov	r3, r2
 8013770:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013772:	2313      	movs	r3, #19
 8013774:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013776:	2303      	movs	r3, #3
 8013778:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d101      	bne.n	8013784 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013780:	230a      	movs	r3, #10
 8013782:	e05f      	b.n	8013844 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013784:	4b31      	ldr	r3, [pc, #196]	; (801384c <LoRaMacCryptoSecureMessage+0xec>)
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	68db      	ldr	r3, [r3, #12]
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	429a      	cmp	r2, r3
 801378e:	d201      	bcs.n	8013794 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013790:	2306      	movs	r3, #6
 8013792:	e057      	b.n	8013844 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f893 3020 	ldrb.w	r3, [r3, #32]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d101      	bne.n	80137a2 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801379e:	2302      	movs	r3, #2
 80137a0:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80137a2:	4b2a      	ldr	r3, [pc, #168]	; (801384c <LoRaMacCryptoSecureMessage+0xec>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	68fa      	ldr	r2, [r7, #12]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d916      	bls.n	80137dc <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137b8:	b219      	sxth	r1, r3
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	689c      	ldr	r4, [r3, #8]
 80137be:	7dfa      	ldrb	r2, [r7, #23]
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	9301      	str	r3, [sp, #4]
 80137c4:	2300      	movs	r3, #0
 80137c6:	9300      	str	r3, [sp, #0]
 80137c8:	4623      	mov	r3, r4
 80137ca:	f7ff faa3 	bl	8012d14 <PayloadEncrypt>
 80137ce:	4603      	mov	r3, r0
 80137d0:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80137d2:	7dbb      	ldrb	r3, [r7, #22]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d001      	beq.n	80137dc <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80137d8:	7dbb      	ldrb	r3, [r7, #22]
 80137da:	e033      	b.n	8013844 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f000 fb60 	bl	8013ea2 <LoRaMacSerializerData>
 80137e2:	4603      	mov	r3, r0
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d001      	beq.n	80137ec <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80137e8:	2311      	movs	r3, #17
 80137ea:	e02b      	b.n	8013844 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80137ec:	2302      	movs	r3, #2
 80137ee:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	6818      	ldr	r0, [r3, #0]
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	791b      	ldrb	r3, [r3, #4]
 80137f8:	b29b      	uxth	r3, r3
 80137fa:	3b04      	subs	r3, #4
 80137fc:	b299      	uxth	r1, r3
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	689b      	ldr	r3, [r3, #8]
 8013802:	687a      	ldr	r2, [r7, #4]
 8013804:	322c      	adds	r2, #44	; 0x2c
 8013806:	7dfc      	ldrb	r4, [r7, #23]
 8013808:	9203      	str	r2, [sp, #12]
 801380a:	68fa      	ldr	r2, [r7, #12]
 801380c:	9202      	str	r2, [sp, #8]
 801380e:	9301      	str	r3, [sp, #4]
 8013810:	2300      	movs	r3, #0
 8013812:	9300      	str	r3, [sp, #0]
 8013814:	2300      	movs	r3, #0
 8013816:	4622      	mov	r2, r4
 8013818:	f7ff fb7e 	bl	8012f18 <ComputeCmacB0>
 801381c:	4603      	mov	r3, r0
 801381e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013820:	7dbb      	ldrb	r3, [r7, #22]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d001      	beq.n	801382a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8013826:	7dbb      	ldrb	r3, [r7, #22]
 8013828:	e00c      	b.n	8013844 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f000 fb39 	bl	8013ea2 <LoRaMacSerializerData>
 8013830:	4603      	mov	r3, r0
 8013832:	2b00      	cmp	r3, #0
 8013834:	d001      	beq.n	801383a <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013836:	2311      	movs	r3, #17
 8013838:	e004      	b.n	8013844 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801383a:	4b04      	ldr	r3, [pc, #16]	; (801384c <LoRaMacCryptoSecureMessage+0xec>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	68fa      	ldr	r2, [r7, #12]
 8013840:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8013842:	2300      	movs	r3, #0
}
 8013844:	4618      	mov	r0, r3
 8013846:	371c      	adds	r7, #28
 8013848:	46bd      	mov	sp, r7
 801384a:	bd90      	pop	{r4, r7, pc}
 801384c:	20000ec4 	.word	0x20000ec4

08013850 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013850:	b590      	push	{r4, r7, lr}
 8013852:	b08b      	sub	sp, #44	; 0x2c
 8013854:	af04      	add	r7, sp, #16
 8013856:	60b9      	str	r1, [r7, #8]
 8013858:	607b      	str	r3, [r7, #4]
 801385a:	4603      	mov	r3, r0
 801385c:	73fb      	strb	r3, [r7, #15]
 801385e:	4613      	mov	r3, r2
 8013860:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013864:	2b00      	cmp	r3, #0
 8013866:	d101      	bne.n	801386c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013868:	230a      	movs	r3, #10
 801386a:	e084      	b.n	8013976 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801386c:	7bbb      	ldrb	r3, [r7, #14]
 801386e:	6879      	ldr	r1, [r7, #4]
 8013870:	4618      	mov	r0, r3
 8013872:	f7ff fcbb 	bl	80131ec <CheckFCntDown>
 8013876:	4603      	mov	r3, r0
 8013878:	f083 0301 	eor.w	r3, r3, #1
 801387c:	b2db      	uxtb	r3, r3
 801387e:	2b00      	cmp	r3, #0
 8013880:	d001      	beq.n	8013886 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013882:	2306      	movs	r3, #6
 8013884:	e077      	b.n	8013976 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013886:	2313      	movs	r3, #19
 8013888:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801388a:	2303      	movs	r3, #3
 801388c:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801388e:	2302      	movs	r3, #2
 8013890:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013894:	f000 f98f 	bl	8013bb6 <LoRaMacParserData>
 8013898:	4603      	mov	r3, r0
 801389a:	2b00      	cmp	r3, #0
 801389c:	d001      	beq.n	80138a2 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801389e:	2310      	movs	r3, #16
 80138a0:	e069      	b.n	8013976 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80138a2:	f107 0210 	add.w	r2, r7, #16
 80138a6:	7bfb      	ldrb	r3, [r7, #15]
 80138a8:	4611      	mov	r1, r2
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7ff fbda 	bl	8013064 <GetKeyAddrItem>
 80138b0:	4603      	mov	r3, r0
 80138b2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80138b4:	7d7b      	ldrb	r3, [r7, #21]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d001      	beq.n	80138be <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80138ba:	7d7b      	ldrb	r3, [r7, #21]
 80138bc:	e05b      	b.n	8013976 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	785b      	ldrb	r3, [r3, #1]
 80138c2:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	789b      	ldrb	r3, [r3, #2]
 80138c8:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80138ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138cc:	689b      	ldr	r3, [r3, #8]
 80138ce:	68ba      	ldr	r2, [r7, #8]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d001      	beq.n	80138d8 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80138d4:	2302      	movs	r3, #2
 80138d6:	e04e      	b.n	8013976 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80138d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138da:	7b1b      	ldrb	r3, [r3, #12]
 80138dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80138e0:	b2db      	uxtb	r3, r3
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	bf14      	ite	ne
 80138e6:	2301      	movne	r3, #1
 80138e8:	2300      	moveq	r3, #0
 80138ea:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80138ec:	4b24      	ldr	r3, [pc, #144]	; (8013980 <LoRaMacCryptoUnsecureMessage+0x130>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	789b      	ldrb	r3, [r3, #2]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d101      	bne.n	80138fa <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80138f6:	2300      	movs	r3, #0
 80138f8:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80138fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138fc:	6818      	ldr	r0, [r3, #0]
 80138fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013900:	791b      	ldrb	r3, [r3, #4]
 8013902:	b29b      	uxth	r3, r3
 8013904:	3b04      	subs	r3, #4
 8013906:	b299      	uxth	r1, r3
 8013908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801390c:	7dbc      	ldrb	r4, [r7, #22]
 801390e:	7d3a      	ldrb	r2, [r7, #20]
 8013910:	9303      	str	r3, [sp, #12]
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	9302      	str	r3, [sp, #8]
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	9301      	str	r3, [sp, #4]
 801391a:	2301      	movs	r3, #1
 801391c:	9300      	str	r3, [sp, #0]
 801391e:	4623      	mov	r3, r4
 8013920:	f7ff fb38 	bl	8012f94 <VerifyCmacB0>
 8013924:	4603      	mov	r3, r0
 8013926:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013928:	7d7b      	ldrb	r3, [r7, #21]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d001      	beq.n	8013932 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801392e:	7d7b      	ldrb	r3, [r7, #21]
 8013930:	e021      	b.n	8013976 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d101      	bne.n	8013940 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801393c:	2302      	movs	r3, #2
 801393e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013942:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801394a:	b219      	sxth	r1, r3
 801394c:	7dfa      	ldrb	r2, [r7, #23]
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	9301      	str	r3, [sp, #4]
 8013952:	2301      	movs	r3, #1
 8013954:	9300      	str	r3, [sp, #0]
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	f7ff f9dc 	bl	8012d14 <PayloadEncrypt>
 801395c:	4603      	mov	r3, r0
 801395e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013960:	7d7b      	ldrb	r3, [r7, #21]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d001      	beq.n	801396a <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8013966:	7d7b      	ldrb	r3, [r7, #21]
 8013968:	e005      	b.n	8013976 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801396a:	7bbb      	ldrb	r3, [r7, #14]
 801396c:	6879      	ldr	r1, [r7, #4]
 801396e:	4618      	mov	r0, r3
 8013970:	f7ff fc60 	bl	8013234 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013974:	2300      	movs	r3, #0
}
 8013976:	4618      	mov	r0, r3
 8013978:	371c      	adds	r7, #28
 801397a:	46bd      	mov	sp, r7
 801397c:	bd90      	pop	{r4, r7, pc}
 801397e:	bf00      	nop
 8013980:	20000ec4 	.word	0x20000ec4

08013984 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b086      	sub	sp, #24
 8013988:	af00      	add	r7, sp, #0
 801398a:	4603      	mov	r3, r0
 801398c:	460a      	mov	r2, r1
 801398e:	71fb      	strb	r3, [r7, #7]
 8013990:	4613      	mov	r3, r2
 8013992:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8013994:	79bb      	ldrb	r3, [r7, #6]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d001      	beq.n	801399e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801399a:	230b      	movs	r3, #11
 801399c:	e019      	b.n	80139d2 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 801399e:	2300      	movs	r3, #0
 80139a0:	60bb      	str	r3, [r7, #8]
 80139a2:	f107 030c 	add.w	r3, r7, #12
 80139a6:	2200      	movs	r2, #0
 80139a8:	601a      	str	r2, [r3, #0]
 80139aa:	605a      	str	r2, [r3, #4]
 80139ac:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80139ae:	79fb      	ldrb	r3, [r7, #7]
 80139b0:	2b01      	cmp	r3, #1
 80139b2:	d101      	bne.n	80139b8 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80139b4:	2320      	movs	r3, #32
 80139b6:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80139b8:	79b9      	ldrb	r1, [r7, #6]
 80139ba:	f107 0308 	add.w	r3, r7, #8
 80139be:	2204      	movs	r2, #4
 80139c0:	4618      	mov	r0, r3
 80139c2:	f7f8 fc54 	bl	800c26e <SecureElementDeriveAndStoreKey>
 80139c6:	4603      	mov	r3, r0
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d001      	beq.n	80139d0 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80139cc:	230f      	movs	r3, #15
 80139ce:	e000      	b.n	80139d2 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80139d0:	2300      	movs	r3, #0
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3718      	adds	r7, #24
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}

080139da <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80139da:	b580      	push	{r7, lr}
 80139dc:	b086      	sub	sp, #24
 80139de:	af00      	add	r7, sp, #0
 80139e0:	4603      	mov	r3, r0
 80139e2:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80139e4:	79fb      	ldrb	r3, [r7, #7]
 80139e6:	2b04      	cmp	r3, #4
 80139e8:	d001      	beq.n	80139ee <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80139ea:	230b      	movs	r3, #11
 80139ec:	e014      	b.n	8013a18 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80139ee:	2300      	movs	r3, #0
 80139f0:	60bb      	str	r3, [r7, #8]
 80139f2:	f107 030c 	add.w	r3, r7, #12
 80139f6:	2200      	movs	r2, #0
 80139f8:	601a      	str	r2, [r3, #0]
 80139fa:	605a      	str	r2, [r3, #4]
 80139fc:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80139fe:	79f9      	ldrb	r1, [r7, #7]
 8013a00:	f107 0308 	add.w	r3, r7, #8
 8013a04:	227f      	movs	r2, #127	; 0x7f
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7f8 fc31 	bl	800c26e <SecureElementDeriveAndStoreKey>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d001      	beq.n	8013a16 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a12:	230f      	movs	r3, #15
 8013a14:	e000      	b.n	8013a18 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013a16:	2300      	movs	r3, #0
}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	3718      	adds	r7, #24
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bd80      	pop	{r7, pc}

08013a20 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b084      	sub	sp, #16
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d003      	beq.n	8013a36 <LoRaMacParserJoinAccept+0x16>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d101      	bne.n	8013a3a <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013a36:	2302      	movs	r3, #2
 8013a38:	e0b9      	b.n	8013bae <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	89fb      	ldrh	r3, [r7, #14]
 8013a44:	1c59      	adds	r1, r3, #1
 8013a46:	81f9      	strh	r1, [r7, #14]
 8013a48:	4413      	add	r3, r2
 8013a4a:	781a      	ldrb	r2, [r3, #0]
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	1d98      	adds	r0, r3, #6
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681a      	ldr	r2, [r3, #0]
 8013a58:	89fb      	ldrh	r3, [r7, #14]
 8013a5a:	4413      	add	r3, r2
 8013a5c:	2203      	movs	r2, #3
 8013a5e:	4619      	mov	r1, r3
 8013a60:	f002 fe31 	bl	80166c6 <memcpy1>
    bufItr = bufItr + 3;
 8013a64:	89fb      	ldrh	r3, [r7, #14]
 8013a66:	3303      	adds	r3, #3
 8013a68:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f103 0009 	add.w	r0, r3, #9
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	681a      	ldr	r2, [r3, #0]
 8013a74:	89fb      	ldrh	r3, [r7, #14]
 8013a76:	4413      	add	r3, r2
 8013a78:	2203      	movs	r2, #3
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	f002 fe23 	bl	80166c6 <memcpy1>
    bufItr = bufItr + 3;
 8013a80:	89fb      	ldrh	r3, [r7, #14]
 8013a82:	3303      	adds	r3, #3
 8013a84:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	89fb      	ldrh	r3, [r7, #14]
 8013a8c:	1c59      	adds	r1, r3, #1
 8013a8e:	81f9      	strh	r1, [r7, #14]
 8013a90:	4413      	add	r3, r2
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	461a      	mov	r2, r3
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681a      	ldr	r2, [r3, #0]
 8013a9e:	89fb      	ldrh	r3, [r7, #14]
 8013aa0:	1c59      	adds	r1, r3, #1
 8013aa2:	81f9      	strh	r1, [r7, #14]
 8013aa4:	4413      	add	r3, r2
 8013aa6:	781b      	ldrb	r3, [r3, #0]
 8013aa8:	021a      	lsls	r2, r3, #8
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	68db      	ldr	r3, [r3, #12]
 8013aae:	431a      	orrs	r2, r3
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	681a      	ldr	r2, [r3, #0]
 8013ab8:	89fb      	ldrh	r3, [r7, #14]
 8013aba:	1c59      	adds	r1, r3, #1
 8013abc:	81f9      	strh	r1, [r7, #14]
 8013abe:	4413      	add	r3, r2
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	041a      	lsls	r2, r3, #16
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	68db      	ldr	r3, [r3, #12]
 8013ac8:	431a      	orrs	r2, r3
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681a      	ldr	r2, [r3, #0]
 8013ad2:	89fb      	ldrh	r3, [r7, #14]
 8013ad4:	1c59      	adds	r1, r3, #1
 8013ad6:	81f9      	strh	r1, [r7, #14]
 8013ad8:	4413      	add	r3, r2
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	061a      	lsls	r2, r3, #24
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	68db      	ldr	r3, [r3, #12]
 8013ae2:	431a      	orrs	r2, r3
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	681a      	ldr	r2, [r3, #0]
 8013aec:	89fb      	ldrh	r3, [r7, #14]
 8013aee:	1c59      	adds	r1, r3, #1
 8013af0:	81f9      	strh	r1, [r7, #14]
 8013af2:	4413      	add	r3, r2
 8013af4:	781a      	ldrb	r2, [r3, #0]
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	89fb      	ldrh	r3, [r7, #14]
 8013b00:	1c59      	adds	r1, r3, #1
 8013b02:	81f9      	strh	r1, [r7, #14]
 8013b04:	4413      	add	r3, r2
 8013b06:	781a      	ldrb	r2, [r3, #0]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	791b      	ldrb	r3, [r3, #4]
 8013b10:	1f1a      	subs	r2, r3, #4
 8013b12:	89fb      	ldrh	r3, [r7, #14]
 8013b14:	1ad3      	subs	r3, r2, r3
 8013b16:	2b10      	cmp	r3, #16
 8013b18:	d10e      	bne.n	8013b38 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f103 0012 	add.w	r0, r3, #18
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	681a      	ldr	r2, [r3, #0]
 8013b24:	89fb      	ldrh	r3, [r7, #14]
 8013b26:	4413      	add	r3, r2
 8013b28:	2210      	movs	r2, #16
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	f002 fdcb 	bl	80166c6 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013b30:	89fb      	ldrh	r3, [r7, #14]
 8013b32:	3310      	adds	r3, #16
 8013b34:	81fb      	strh	r3, [r7, #14]
 8013b36:	e008      	b.n	8013b4a <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	791b      	ldrb	r3, [r3, #4]
 8013b3c:	1f1a      	subs	r2, r3, #4
 8013b3e:	89fb      	ldrh	r3, [r7, #14]
 8013b40:	1ad3      	subs	r3, r2, r3
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	dd01      	ble.n	8013b4a <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013b46:	2301      	movs	r3, #1
 8013b48:	e031      	b.n	8013bae <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681a      	ldr	r2, [r3, #0]
 8013b4e:	89fb      	ldrh	r3, [r7, #14]
 8013b50:	1c59      	adds	r1, r3, #1
 8013b52:	81f9      	strh	r1, [r7, #14]
 8013b54:	4413      	add	r3, r2
 8013b56:	781b      	ldrb	r3, [r3, #0]
 8013b58:	461a      	mov	r2, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	89fb      	ldrh	r3, [r7, #14]
 8013b64:	1c59      	adds	r1, r3, #1
 8013b66:	81f9      	strh	r1, [r7, #14]
 8013b68:	4413      	add	r3, r2
 8013b6a:	781b      	ldrb	r3, [r3, #0]
 8013b6c:	021a      	lsls	r2, r3, #8
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b72:	431a      	orrs	r2, r3
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681a      	ldr	r2, [r3, #0]
 8013b7c:	89fb      	ldrh	r3, [r7, #14]
 8013b7e:	1c59      	adds	r1, r3, #1
 8013b80:	81f9      	strh	r1, [r7, #14]
 8013b82:	4413      	add	r3, r2
 8013b84:	781b      	ldrb	r3, [r3, #0]
 8013b86:	041a      	lsls	r2, r3, #16
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b8c:	431a      	orrs	r2, r3
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681a      	ldr	r2, [r3, #0]
 8013b96:	89fb      	ldrh	r3, [r7, #14]
 8013b98:	1c59      	adds	r1, r3, #1
 8013b9a:	81f9      	strh	r1, [r7, #14]
 8013b9c:	4413      	add	r3, r2
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	061a      	lsls	r2, r3, #24
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ba6:	431a      	orrs	r2, r3
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013bac:	2300      	movs	r3, #0
}
 8013bae:	4618      	mov	r0, r3
 8013bb0:	3710      	adds	r7, #16
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}

08013bb6 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8013bb6:	b580      	push	{r7, lr}
 8013bb8:	b084      	sub	sp, #16
 8013bba:	af00      	add	r7, sp, #0
 8013bbc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d003      	beq.n	8013bcc <LoRaMacParserData+0x16>
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d101      	bne.n	8013bd0 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013bcc:	2302      	movs	r3, #2
 8013bce:	e0e2      	b.n	8013d96 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681a      	ldr	r2, [r3, #0]
 8013bd8:	89fb      	ldrh	r3, [r7, #14]
 8013bda:	1c59      	adds	r1, r3, #1
 8013bdc:	81f9      	strh	r1, [r7, #14]
 8013bde:	4413      	add	r3, r2
 8013be0:	781a      	ldrb	r2, [r3, #0]
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681a      	ldr	r2, [r3, #0]
 8013bea:	89fb      	ldrh	r3, [r7, #14]
 8013bec:	1c59      	adds	r1, r3, #1
 8013bee:	81f9      	strh	r1, [r7, #14]
 8013bf0:	4413      	add	r3, r2
 8013bf2:	781b      	ldrb	r3, [r3, #0]
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681a      	ldr	r2, [r3, #0]
 8013bfe:	89fb      	ldrh	r3, [r7, #14]
 8013c00:	1c59      	adds	r1, r3, #1
 8013c02:	81f9      	strh	r1, [r7, #14]
 8013c04:	4413      	add	r3, r2
 8013c06:	781b      	ldrb	r3, [r3, #0]
 8013c08:	021a      	lsls	r2, r3, #8
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	689b      	ldr	r3, [r3, #8]
 8013c0e:	431a      	orrs	r2, r3
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681a      	ldr	r2, [r3, #0]
 8013c18:	89fb      	ldrh	r3, [r7, #14]
 8013c1a:	1c59      	adds	r1, r3, #1
 8013c1c:	81f9      	strh	r1, [r7, #14]
 8013c1e:	4413      	add	r3, r2
 8013c20:	781b      	ldrb	r3, [r3, #0]
 8013c22:	041a      	lsls	r2, r3, #16
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	689b      	ldr	r3, [r3, #8]
 8013c28:	431a      	orrs	r2, r3
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	89fb      	ldrh	r3, [r7, #14]
 8013c34:	1c59      	adds	r1, r3, #1
 8013c36:	81f9      	strh	r1, [r7, #14]
 8013c38:	4413      	add	r3, r2
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	061a      	lsls	r2, r3, #24
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	689b      	ldr	r3, [r3, #8]
 8013c42:	431a      	orrs	r2, r3
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681a      	ldr	r2, [r3, #0]
 8013c4c:	89fb      	ldrh	r3, [r7, #14]
 8013c4e:	1c59      	adds	r1, r3, #1
 8013c50:	81f9      	strh	r1, [r7, #14]
 8013c52:	4413      	add	r3, r2
 8013c54:	781a      	ldrb	r2, [r3, #0]
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681a      	ldr	r2, [r3, #0]
 8013c5e:	89fb      	ldrh	r3, [r7, #14]
 8013c60:	1c59      	adds	r1, r3, #1
 8013c62:	81f9      	strh	r1, [r7, #14]
 8013c64:	4413      	add	r3, r2
 8013c66:	781b      	ldrb	r3, [r3, #0]
 8013c68:	b29a      	uxth	r2, r3
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681a      	ldr	r2, [r3, #0]
 8013c72:	89fb      	ldrh	r3, [r7, #14]
 8013c74:	1c59      	adds	r1, r3, #1
 8013c76:	81f9      	strh	r1, [r7, #14]
 8013c78:	4413      	add	r3, r2
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	0219      	lsls	r1, r3, #8
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	89db      	ldrh	r3, [r3, #14]
 8013c82:	b21a      	sxth	r2, r3
 8013c84:	b20b      	sxth	r3, r1
 8013c86:	4313      	orrs	r3, r2
 8013c88:	b21b      	sxth	r3, r3
 8013c8a:	b29a      	uxth	r2, r3
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f103 0010 	add.w	r0, r3, #16
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681a      	ldr	r2, [r3, #0]
 8013c9a:	89fb      	ldrh	r3, [r7, #14]
 8013c9c:	18d1      	adds	r1, r2, r3
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	7b1b      	ldrb	r3, [r3, #12]
 8013ca2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ca6:	b2db      	uxtb	r3, r3
 8013ca8:	b29b      	uxth	r3, r3
 8013caa:	461a      	mov	r2, r3
 8013cac:	f002 fd0b 	bl	80166c6 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	7b1b      	ldrb	r3, [r3, #12]
 8013cb4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013cb8:	b2db      	uxtb	r3, r3
 8013cba:	b29a      	uxth	r2, r3
 8013cbc:	89fb      	ldrh	r3, [r7, #14]
 8013cbe:	4413      	add	r3, r2
 8013cc0:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	791b      	ldrb	r3, [r3, #4]
 8013cd6:	461a      	mov	r2, r3
 8013cd8:	89fb      	ldrh	r3, [r7, #14]
 8013cda:	1ad3      	subs	r3, r2, r3
 8013cdc:	2b04      	cmp	r3, #4
 8013cde:	dd28      	ble.n	8013d32 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681a      	ldr	r2, [r3, #0]
 8013ce4:	89fb      	ldrh	r3, [r7, #14]
 8013ce6:	1c59      	adds	r1, r3, #1
 8013ce8:	81f9      	strh	r1, [r7, #14]
 8013cea:	4413      	add	r3, r2
 8013cec:	781a      	ldrb	r2, [r3, #0]
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	791a      	ldrb	r2, [r3, #4]
 8013cf8:	89fb      	ldrh	r3, [r7, #14]
 8013cfa:	b2db      	uxtb	r3, r3
 8013cfc:	1ad3      	subs	r3, r2, r3
 8013cfe:	b2db      	uxtb	r3, r3
 8013d00:	3b04      	subs	r3, #4
 8013d02:	b2da      	uxtb	r2, r3
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681a      	ldr	r2, [r3, #0]
 8013d12:	89fb      	ldrh	r3, [r7, #14]
 8013d14:	18d1      	adds	r1, r2, r3
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d1c:	b29b      	uxth	r3, r3
 8013d1e:	461a      	mov	r2, r3
 8013d20:	f002 fcd1 	bl	80166c6 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d2a:	b29a      	uxth	r2, r3
 8013d2c:	89fb      	ldrh	r3, [r7, #14]
 8013d2e:	4413      	add	r3, r2
 8013d30:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	681a      	ldr	r2, [r3, #0]
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	791b      	ldrb	r3, [r3, #4]
 8013d3a:	3b04      	subs	r3, #4
 8013d3c:	4413      	add	r3, r2
 8013d3e:	781b      	ldrb	r3, [r3, #0]
 8013d40:	461a      	mov	r2, r3
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6819      	ldr	r1, [r3, #0]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	791b      	ldrb	r3, [r3, #4]
 8013d52:	3b03      	subs	r3, #3
 8013d54:	440b      	add	r3, r1
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	021b      	lsls	r3, r3, #8
 8013d5a:	431a      	orrs	r2, r3
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6819      	ldr	r1, [r3, #0]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	791b      	ldrb	r3, [r3, #4]
 8013d6c:	3b02      	subs	r3, #2
 8013d6e:	440b      	add	r3, r1
 8013d70:	781b      	ldrb	r3, [r3, #0]
 8013d72:	041b      	lsls	r3, r3, #16
 8013d74:	431a      	orrs	r2, r3
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	6819      	ldr	r1, [r3, #0]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	791b      	ldrb	r3, [r3, #4]
 8013d86:	3b01      	subs	r3, #1
 8013d88:	440b      	add	r3, r1
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	061b      	lsls	r3, r3, #24
 8013d8e:	431a      	orrs	r2, r3
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013d94:	2300      	movs	r3, #0
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3710      	adds	r7, #16
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}

08013d9e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013d9e:	b580      	push	{r7, lr}
 8013da0:	b084      	sub	sp, #16
 8013da2:	af00      	add	r7, sp, #0
 8013da4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d003      	beq.n	8013db4 <LoRaMacSerializerJoinRequest+0x16>
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d101      	bne.n	8013db8 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013db4:	2301      	movs	r3, #1
 8013db6:	e070      	b.n	8013e9a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013db8:	2300      	movs	r3, #0
 8013dba:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	791b      	ldrb	r3, [r3, #4]
 8013dc0:	2b16      	cmp	r3, #22
 8013dc2:	d801      	bhi.n	8013dc8 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013dc4:	2302      	movs	r3, #2
 8013dc6:	e068      	b.n	8013e9a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681a      	ldr	r2, [r3, #0]
 8013dcc:	89fb      	ldrh	r3, [r7, #14]
 8013dce:	1c59      	adds	r1, r3, #1
 8013dd0:	81f9      	strh	r1, [r7, #14]
 8013dd2:	4413      	add	r3, r2
 8013dd4:	687a      	ldr	r2, [r7, #4]
 8013dd6:	7952      	ldrb	r2, [r2, #5]
 8013dd8:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681a      	ldr	r2, [r3, #0]
 8013dde:	89fb      	ldrh	r3, [r7, #14]
 8013de0:	18d0      	adds	r0, r2, r3
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	3306      	adds	r3, #6
 8013de6:	2208      	movs	r2, #8
 8013de8:	4619      	mov	r1, r3
 8013dea:	f002 fc87 	bl	80166fc <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013dee:	89fb      	ldrh	r3, [r7, #14]
 8013df0:	3308      	adds	r3, #8
 8013df2:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681a      	ldr	r2, [r3, #0]
 8013df8:	89fb      	ldrh	r3, [r7, #14]
 8013dfa:	18d0      	adds	r0, r2, r3
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	330e      	adds	r3, #14
 8013e00:	2208      	movs	r2, #8
 8013e02:	4619      	mov	r1, r3
 8013e04:	f002 fc7a 	bl	80166fc <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013e08:	89fb      	ldrh	r3, [r7, #14]
 8013e0a:	3308      	adds	r3, #8
 8013e0c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	8ad9      	ldrh	r1, [r3, #22]
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681a      	ldr	r2, [r3, #0]
 8013e16:	89fb      	ldrh	r3, [r7, #14]
 8013e18:	1c58      	adds	r0, r3, #1
 8013e1a:	81f8      	strh	r0, [r7, #14]
 8013e1c:	4413      	add	r3, r2
 8013e1e:	b2ca      	uxtb	r2, r1
 8013e20:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	8adb      	ldrh	r3, [r3, #22]
 8013e26:	0a1b      	lsrs	r3, r3, #8
 8013e28:	b299      	uxth	r1, r3
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681a      	ldr	r2, [r3, #0]
 8013e2e:	89fb      	ldrh	r3, [r7, #14]
 8013e30:	1c58      	adds	r0, r3, #1
 8013e32:	81f8      	strh	r0, [r7, #14]
 8013e34:	4413      	add	r3, r2
 8013e36:	b2ca      	uxtb	r2, r1
 8013e38:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	6999      	ldr	r1, [r3, #24]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681a      	ldr	r2, [r3, #0]
 8013e42:	89fb      	ldrh	r3, [r7, #14]
 8013e44:	1c58      	adds	r0, r3, #1
 8013e46:	81f8      	strh	r0, [r7, #14]
 8013e48:	4413      	add	r3, r2
 8013e4a:	b2ca      	uxtb	r2, r1
 8013e4c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	699b      	ldr	r3, [r3, #24]
 8013e52:	0a19      	lsrs	r1, r3, #8
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	681a      	ldr	r2, [r3, #0]
 8013e58:	89fb      	ldrh	r3, [r7, #14]
 8013e5a:	1c58      	adds	r0, r3, #1
 8013e5c:	81f8      	strh	r0, [r7, #14]
 8013e5e:	4413      	add	r3, r2
 8013e60:	b2ca      	uxtb	r2, r1
 8013e62:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	699b      	ldr	r3, [r3, #24]
 8013e68:	0c19      	lsrs	r1, r3, #16
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681a      	ldr	r2, [r3, #0]
 8013e6e:	89fb      	ldrh	r3, [r7, #14]
 8013e70:	1c58      	adds	r0, r3, #1
 8013e72:	81f8      	strh	r0, [r7, #14]
 8013e74:	4413      	add	r3, r2
 8013e76:	b2ca      	uxtb	r2, r1
 8013e78:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	699b      	ldr	r3, [r3, #24]
 8013e7e:	0e19      	lsrs	r1, r3, #24
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	681a      	ldr	r2, [r3, #0]
 8013e84:	89fb      	ldrh	r3, [r7, #14]
 8013e86:	1c58      	adds	r0, r3, #1
 8013e88:	81f8      	strh	r0, [r7, #14]
 8013e8a:	4413      	add	r3, r2
 8013e8c:	b2ca      	uxtb	r2, r1
 8013e8e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013e90:	89fb      	ldrh	r3, [r7, #14]
 8013e92:	b2da      	uxtb	r2, r3
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013e98:	2300      	movs	r3, #0
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3710      	adds	r7, #16
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}

08013ea2 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013ea2:	b580      	push	{r7, lr}
 8013ea4:	b084      	sub	sp, #16
 8013ea6:	af00      	add	r7, sp, #0
 8013ea8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d003      	beq.n	8013eb8 <LoRaMacSerializerData+0x16>
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d101      	bne.n	8013ebc <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013eb8:	2301      	movs	r3, #1
 8013eba:	e0e5      	b.n	8014088 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013ec0:	2308      	movs	r3, #8
 8013ec2:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	7b1b      	ldrb	r3, [r3, #12]
 8013ec8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ecc:	b2db      	uxtb	r3, r3
 8013ece:	b29a      	uxth	r2, r3
 8013ed0:	89bb      	ldrh	r3, [r7, #12]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d002      	beq.n	8013ee6 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013ee0:	89bb      	ldrh	r3, [r7, #12]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013eec:	b29a      	uxth	r2, r3
 8013eee:	89bb      	ldrh	r3, [r7, #12]
 8013ef0:	4413      	add	r3, r2
 8013ef2:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013ef4:	89bb      	ldrh	r3, [r7, #12]
 8013ef6:	3304      	adds	r3, #4
 8013ef8:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	791b      	ldrb	r3, [r3, #4]
 8013efe:	b29b      	uxth	r3, r3
 8013f00:	89ba      	ldrh	r2, [r7, #12]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d901      	bls.n	8013f0a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013f06:	2302      	movs	r3, #2
 8013f08:	e0be      	b.n	8014088 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	89fb      	ldrh	r3, [r7, #14]
 8013f10:	1c59      	adds	r1, r3, #1
 8013f12:	81f9      	strh	r1, [r7, #14]
 8013f14:	4413      	add	r3, r2
 8013f16:	687a      	ldr	r2, [r7, #4]
 8013f18:	7952      	ldrb	r2, [r2, #5]
 8013f1a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6899      	ldr	r1, [r3, #8]
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681a      	ldr	r2, [r3, #0]
 8013f24:	89fb      	ldrh	r3, [r7, #14]
 8013f26:	1c58      	adds	r0, r3, #1
 8013f28:	81f8      	strh	r0, [r7, #14]
 8013f2a:	4413      	add	r3, r2
 8013f2c:	b2ca      	uxtb	r2, r1
 8013f2e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	689b      	ldr	r3, [r3, #8]
 8013f34:	0a19      	lsrs	r1, r3, #8
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681a      	ldr	r2, [r3, #0]
 8013f3a:	89fb      	ldrh	r3, [r7, #14]
 8013f3c:	1c58      	adds	r0, r3, #1
 8013f3e:	81f8      	strh	r0, [r7, #14]
 8013f40:	4413      	add	r3, r2
 8013f42:	b2ca      	uxtb	r2, r1
 8013f44:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	689b      	ldr	r3, [r3, #8]
 8013f4a:	0c19      	lsrs	r1, r3, #16
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	89fb      	ldrh	r3, [r7, #14]
 8013f52:	1c58      	adds	r0, r3, #1
 8013f54:	81f8      	strh	r0, [r7, #14]
 8013f56:	4413      	add	r3, r2
 8013f58:	b2ca      	uxtb	r2, r1
 8013f5a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	0e19      	lsrs	r1, r3, #24
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681a      	ldr	r2, [r3, #0]
 8013f66:	89fb      	ldrh	r3, [r7, #14]
 8013f68:	1c58      	adds	r0, r3, #1
 8013f6a:	81f8      	strh	r0, [r7, #14]
 8013f6c:	4413      	add	r3, r2
 8013f6e:	b2ca      	uxtb	r2, r1
 8013f70:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681a      	ldr	r2, [r3, #0]
 8013f76:	89fb      	ldrh	r3, [r7, #14]
 8013f78:	1c59      	adds	r1, r3, #1
 8013f7a:	81f9      	strh	r1, [r7, #14]
 8013f7c:	4413      	add	r3, r2
 8013f7e:	687a      	ldr	r2, [r7, #4]
 8013f80:	7b12      	ldrb	r2, [r2, #12]
 8013f82:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	89d9      	ldrh	r1, [r3, #14]
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681a      	ldr	r2, [r3, #0]
 8013f8c:	89fb      	ldrh	r3, [r7, #14]
 8013f8e:	1c58      	adds	r0, r3, #1
 8013f90:	81f8      	strh	r0, [r7, #14]
 8013f92:	4413      	add	r3, r2
 8013f94:	b2ca      	uxtb	r2, r1
 8013f96:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	89db      	ldrh	r3, [r3, #14]
 8013f9c:	0a1b      	lsrs	r3, r3, #8
 8013f9e:	b299      	uxth	r1, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681a      	ldr	r2, [r3, #0]
 8013fa4:	89fb      	ldrh	r3, [r7, #14]
 8013fa6:	1c58      	adds	r0, r3, #1
 8013fa8:	81f8      	strh	r0, [r7, #14]
 8013faa:	4413      	add	r3, r2
 8013fac:	b2ca      	uxtb	r2, r1
 8013fae:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681a      	ldr	r2, [r3, #0]
 8013fb4:	89fb      	ldrh	r3, [r7, #14]
 8013fb6:	18d0      	adds	r0, r2, r3
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f103 0110 	add.w	r1, r3, #16
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	7b1b      	ldrb	r3, [r3, #12]
 8013fc2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013fc6:	b2db      	uxtb	r3, r3
 8013fc8:	b29b      	uxth	r3, r3
 8013fca:	461a      	mov	r2, r3
 8013fcc:	f002 fb7b 	bl	80166c6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	7b1b      	ldrb	r3, [r3, #12]
 8013fd4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013fd8:	b2db      	uxtb	r3, r3
 8013fda:	b29a      	uxth	r2, r3
 8013fdc:	89fb      	ldrh	r3, [r7, #14]
 8013fde:	4413      	add	r3, r2
 8013fe0:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d009      	beq.n	8014000 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681a      	ldr	r2, [r3, #0]
 8013ff0:	89fb      	ldrh	r3, [r7, #14]
 8013ff2:	1c59      	adds	r1, r3, #1
 8013ff4:	81f9      	strh	r1, [r7, #14]
 8013ff6:	4413      	add	r3, r2
 8013ff8:	687a      	ldr	r2, [r7, #4]
 8013ffa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013ffe:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	681a      	ldr	r2, [r3, #0]
 8014004:	89fb      	ldrh	r3, [r7, #14]
 8014006:	18d0      	adds	r0, r2, r3
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014012:	b29b      	uxth	r3, r3
 8014014:	461a      	mov	r2, r3
 8014016:	f002 fb56 	bl	80166c6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014020:	b29a      	uxth	r2, r3
 8014022:	89fb      	ldrh	r3, [r7, #14]
 8014024:	4413      	add	r3, r2
 8014026:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681a      	ldr	r2, [r3, #0]
 8014030:	89fb      	ldrh	r3, [r7, #14]
 8014032:	1c58      	adds	r0, r3, #1
 8014034:	81f8      	strh	r0, [r7, #14]
 8014036:	4413      	add	r3, r2
 8014038:	b2ca      	uxtb	r2, r1
 801403a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014040:	0a19      	lsrs	r1, r3, #8
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681a      	ldr	r2, [r3, #0]
 8014046:	89fb      	ldrh	r3, [r7, #14]
 8014048:	1c58      	adds	r0, r3, #1
 801404a:	81f8      	strh	r0, [r7, #14]
 801404c:	4413      	add	r3, r2
 801404e:	b2ca      	uxtb	r2, r1
 8014050:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014056:	0c19      	lsrs	r1, r3, #16
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	681a      	ldr	r2, [r3, #0]
 801405c:	89fb      	ldrh	r3, [r7, #14]
 801405e:	1c58      	adds	r0, r3, #1
 8014060:	81f8      	strh	r0, [r7, #14]
 8014062:	4413      	add	r3, r2
 8014064:	b2ca      	uxtb	r2, r1
 8014066:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801406c:	0e19      	lsrs	r1, r3, #24
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681a      	ldr	r2, [r3, #0]
 8014072:	89fb      	ldrh	r3, [r7, #14]
 8014074:	1c58      	adds	r0, r3, #1
 8014076:	81f8      	strh	r0, [r7, #14]
 8014078:	4413      	add	r3, r2
 801407a:	b2ca      	uxtb	r2, r1
 801407c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801407e:	89fb      	ldrh	r3, [r7, #14]
 8014080:	b2da      	uxtb	r2, r3
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014086:	2300      	movs	r3, #0
}
 8014088:	4618      	mov	r0, r3
 801408a:	3710      	adds	r7, #16
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}

08014090 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014090:	b480      	push	{r7}
 8014092:	b083      	sub	sp, #12
 8014094:	af00      	add	r7, sp, #0
 8014096:	4603      	mov	r3, r0
 8014098:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801409a:	79fb      	ldrb	r3, [r7, #7]
 801409c:	2b05      	cmp	r3, #5
 801409e:	d101      	bne.n	80140a4 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80140a0:	2301      	movs	r3, #1
 80140a2:	e000      	b.n	80140a6 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80140a4:	2300      	movs	r3, #0
        }
    }
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	370c      	adds	r7, #12
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bc80      	pop	{r7}
 80140ae:	4770      	bx	lr

080140b0 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	4603      	mov	r3, r0
 80140b8:	6039      	str	r1, [r7, #0]
 80140ba:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80140bc:	2300      	movs	r3, #0
 80140be:	60bb      	str	r3, [r7, #8]
    switch( region )
 80140c0:	79fb      	ldrb	r3, [r7, #7]
 80140c2:	2b05      	cmp	r3, #5
 80140c4:	d105      	bne.n	80140d2 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80140c6:	6838      	ldr	r0, [r7, #0]
 80140c8:	f001 f992 	bl	80153f0 <RegionEU868GetPhyParam>
 80140cc:	4603      	mov	r3, r0
 80140ce:	60fb      	str	r3, [r7, #12]
 80140d0:	e001      	b.n	80140d6 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	60fb      	str	r3, [r7, #12]
 80140d6:	2300      	movs	r3, #0
 80140d8:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80140da:	4618      	mov	r0, r3
 80140dc:	3710      	adds	r7, #16
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}

080140e2 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80140e2:	b580      	push	{r7, lr}
 80140e4:	b082      	sub	sp, #8
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	4603      	mov	r3, r0
 80140ea:	6039      	str	r1, [r7, #0]
 80140ec:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80140ee:	79fb      	ldrb	r3, [r7, #7]
 80140f0:	2b05      	cmp	r3, #5
 80140f2:	d103      	bne.n	80140fc <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80140f4:	6838      	ldr	r0, [r7, #0]
 80140f6:	f001 fac5 	bl	8015684 <RegionEU868SetBandTxDone>
 80140fa:	e000      	b.n	80140fe <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80140fc:	bf00      	nop
        }
    }
}
 80140fe:	3708      	adds	r7, #8
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}

08014104 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b082      	sub	sp, #8
 8014108:	af00      	add	r7, sp, #0
 801410a:	4603      	mov	r3, r0
 801410c:	6039      	str	r1, [r7, #0]
 801410e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014110:	79fb      	ldrb	r3, [r7, #7]
 8014112:	2b05      	cmp	r3, #5
 8014114:	d103      	bne.n	801411e <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8014116:	6838      	ldr	r0, [r7, #0]
 8014118:	f001 fae0 	bl	80156dc <RegionEU868InitDefaults>
 801411c:	e000      	b.n	8014120 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801411e:	bf00      	nop
        }
    }
}
 8014120:	bf00      	nop
 8014122:	3708      	adds	r7, #8
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b082      	sub	sp, #8
 801412c:	af00      	add	r7, sp, #0
 801412e:	4603      	mov	r3, r0
 8014130:	6039      	str	r1, [r7, #0]
 8014132:	71fb      	strb	r3, [r7, #7]
 8014134:	4613      	mov	r3, r2
 8014136:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014138:	79fb      	ldrb	r3, [r7, #7]
 801413a:	2b05      	cmp	r3, #5
 801413c:	d106      	bne.n	801414c <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801413e:	79bb      	ldrb	r3, [r7, #6]
 8014140:	4619      	mov	r1, r3
 8014142:	6838      	ldr	r0, [r7, #0]
 8014144:	f001 fb66 	bl	8015814 <RegionEU868Verify>
 8014148:	4603      	mov	r3, r0
 801414a:	e000      	b.n	801414e <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801414c:	2300      	movs	r3, #0
        }
    }
}
 801414e:	4618      	mov	r0, r3
 8014150:	3708      	adds	r7, #8
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}

08014156 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014156:	b580      	push	{r7, lr}
 8014158:	b082      	sub	sp, #8
 801415a:	af00      	add	r7, sp, #0
 801415c:	4603      	mov	r3, r0
 801415e:	6039      	str	r1, [r7, #0]
 8014160:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014162:	79fb      	ldrb	r3, [r7, #7]
 8014164:	2b05      	cmp	r3, #5
 8014166:	d103      	bne.n	8014170 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8014168:	6838      	ldr	r0, [r7, #0]
 801416a:	f001 fbcf 	bl	801590c <RegionEU868ApplyCFList>
 801416e:	e000      	b.n	8014172 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014170:	bf00      	nop
        }
    }
}
 8014172:	bf00      	nop
 8014174:	3708      	adds	r7, #8
 8014176:	46bd      	mov	sp, r7
 8014178:	bd80      	pop	{r7, pc}

0801417a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801417a:	b580      	push	{r7, lr}
 801417c:	b082      	sub	sp, #8
 801417e:	af00      	add	r7, sp, #0
 8014180:	4603      	mov	r3, r0
 8014182:	6039      	str	r1, [r7, #0]
 8014184:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014186:	79fb      	ldrb	r3, [r7, #7]
 8014188:	2b05      	cmp	r3, #5
 801418a:	d104      	bne.n	8014196 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801418c:	6838      	ldr	r0, [r7, #0]
 801418e:	f001 fc31 	bl	80159f4 <RegionEU868ChanMaskSet>
 8014192:	4603      	mov	r3, r0
 8014194:	e000      	b.n	8014198 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014196:	2300      	movs	r3, #0
        }
    }
}
 8014198:	4618      	mov	r0, r3
 801419a:	3708      	adds	r7, #8
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}

080141a0 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	603b      	str	r3, [r7, #0]
 80141a8:	4603      	mov	r3, r0
 80141aa:	71fb      	strb	r3, [r7, #7]
 80141ac:	460b      	mov	r3, r1
 80141ae:	71bb      	strb	r3, [r7, #6]
 80141b0:	4613      	mov	r3, r2
 80141b2:	717b      	strb	r3, [r7, #5]
    switch( region )
 80141b4:	79fb      	ldrb	r3, [r7, #7]
 80141b6:	2b05      	cmp	r3, #5
 80141b8:	d107      	bne.n	80141ca <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80141ba:	7979      	ldrb	r1, [r7, #5]
 80141bc:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80141c0:	693b      	ldr	r3, [r7, #16]
 80141c2:	683a      	ldr	r2, [r7, #0]
 80141c4:	f001 fc40 	bl	8015a48 <RegionEU868ComputeRxWindowParameters>
 80141c8:	e000      	b.n	80141cc <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80141ca:	bf00      	nop
        }
    }
}
 80141cc:	bf00      	nop
 80141ce:	3708      	adds	r7, #8
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bd80      	pop	{r7, pc}

080141d4 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b084      	sub	sp, #16
 80141d8:	af00      	add	r7, sp, #0
 80141da:	4603      	mov	r3, r0
 80141dc:	60b9      	str	r1, [r7, #8]
 80141de:	607a      	str	r2, [r7, #4]
 80141e0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80141e2:	7bfb      	ldrb	r3, [r7, #15]
 80141e4:	2b05      	cmp	r3, #5
 80141e6:	d105      	bne.n	80141f4 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80141e8:	6879      	ldr	r1, [r7, #4]
 80141ea:	68b8      	ldr	r0, [r7, #8]
 80141ec:	f001 fc86 	bl	8015afc <RegionEU868RxConfig>
 80141f0:	4603      	mov	r3, r0
 80141f2:	e000      	b.n	80141f6 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80141f4:	2300      	movs	r3, #0
        }
    }
}
 80141f6:	4618      	mov	r0, r3
 80141f8:	3710      	adds	r7, #16
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}

080141fe <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80141fe:	b580      	push	{r7, lr}
 8014200:	b084      	sub	sp, #16
 8014202:	af00      	add	r7, sp, #0
 8014204:	60b9      	str	r1, [r7, #8]
 8014206:	607a      	str	r2, [r7, #4]
 8014208:	603b      	str	r3, [r7, #0]
 801420a:	4603      	mov	r3, r0
 801420c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801420e:	7bfb      	ldrb	r3, [r7, #15]
 8014210:	2b05      	cmp	r3, #5
 8014212:	d106      	bne.n	8014222 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8014214:	683a      	ldr	r2, [r7, #0]
 8014216:	6879      	ldr	r1, [r7, #4]
 8014218:	68b8      	ldr	r0, [r7, #8]
 801421a:	f001 fd3f 	bl	8015c9c <RegionEU868TxConfig>
 801421e:	4603      	mov	r3, r0
 8014220:	e000      	b.n	8014224 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014222:	2300      	movs	r3, #0
        }
    }
}
 8014224:	4618      	mov	r0, r3
 8014226:	3710      	adds	r7, #16
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}

0801422c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b086      	sub	sp, #24
 8014230:	af02      	add	r7, sp, #8
 8014232:	60b9      	str	r1, [r7, #8]
 8014234:	607a      	str	r2, [r7, #4]
 8014236:	603b      	str	r3, [r7, #0]
 8014238:	4603      	mov	r3, r0
 801423a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801423c:	7bfb      	ldrb	r3, [r7, #15]
 801423e:	2b05      	cmp	r3, #5
 8014240:	d109      	bne.n	8014256 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8014242:	69fb      	ldr	r3, [r7, #28]
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	69bb      	ldr	r3, [r7, #24]
 8014248:	683a      	ldr	r2, [r7, #0]
 801424a:	6879      	ldr	r1, [r7, #4]
 801424c:	68b8      	ldr	r0, [r7, #8]
 801424e:	f001 fdf5 	bl	8015e3c <RegionEU868LinkAdrReq>
 8014252:	4603      	mov	r3, r0
 8014254:	e000      	b.n	8014258 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014256:	2300      	movs	r3, #0
        }
    }
}
 8014258:	4618      	mov	r0, r3
 801425a:	3710      	adds	r7, #16
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b082      	sub	sp, #8
 8014264:	af00      	add	r7, sp, #0
 8014266:	4603      	mov	r3, r0
 8014268:	6039      	str	r1, [r7, #0]
 801426a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801426c:	79fb      	ldrb	r3, [r7, #7]
 801426e:	2b05      	cmp	r3, #5
 8014270:	d104      	bne.n	801427c <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8014272:	6838      	ldr	r0, [r7, #0]
 8014274:	f001 ff04 	bl	8016080 <RegionEU868RxParamSetupReq>
 8014278:	4603      	mov	r3, r0
 801427a:	e000      	b.n	801427e <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801427c:	2300      	movs	r3, #0
        }
    }
}
 801427e:	4618      	mov	r0, r3
 8014280:	3708      	adds	r7, #8
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}

08014286 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8014286:	b580      	push	{r7, lr}
 8014288:	b082      	sub	sp, #8
 801428a:	af00      	add	r7, sp, #0
 801428c:	4603      	mov	r3, r0
 801428e:	6039      	str	r1, [r7, #0]
 8014290:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014292:	79fb      	ldrb	r3, [r7, #7]
 8014294:	2b05      	cmp	r3, #5
 8014296:	d104      	bne.n	80142a2 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8014298:	6838      	ldr	r0, [r7, #0]
 801429a:	f001 ff2f 	bl	80160fc <RegionEU868NewChannelReq>
 801429e:	4603      	mov	r3, r0
 80142a0:	e000      	b.n	80142a4 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80142a2:	2300      	movs	r3, #0
        }
    }
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3708      	adds	r7, #8
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}

080142ac <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	4603      	mov	r3, r0
 80142b4:	6039      	str	r1, [r7, #0]
 80142b6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142b8:	79fb      	ldrb	r3, [r7, #7]
 80142ba:	2b05      	cmp	r3, #5
 80142bc:	d104      	bne.n	80142c8 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80142be:	6838      	ldr	r0, [r7, #0]
 80142c0:	f001 ff7a 	bl	80161b8 <RegionEU868TxParamSetupReq>
 80142c4:	4603      	mov	r3, r0
 80142c6:	e000      	b.n	80142ca <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80142c8:	2300      	movs	r3, #0
        }
    }
}
 80142ca:	4618      	mov	r0, r3
 80142cc:	3708      	adds	r7, #8
 80142ce:	46bd      	mov	sp, r7
 80142d0:	bd80      	pop	{r7, pc}

080142d2 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80142d2:	b580      	push	{r7, lr}
 80142d4:	b082      	sub	sp, #8
 80142d6:	af00      	add	r7, sp, #0
 80142d8:	4603      	mov	r3, r0
 80142da:	6039      	str	r1, [r7, #0]
 80142dc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142de:	79fb      	ldrb	r3, [r7, #7]
 80142e0:	2b05      	cmp	r3, #5
 80142e2:	d104      	bne.n	80142ee <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80142e4:	6838      	ldr	r0, [r7, #0]
 80142e6:	f001 ff73 	bl	80161d0 <RegionEU868DlChannelReq>
 80142ea:	4603      	mov	r3, r0
 80142ec:	e000      	b.n	80142f0 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80142ee:	2300      	movs	r3, #0
        }
    }
}
 80142f0:	4618      	mov	r0, r3
 80142f2:	3708      	adds	r7, #8
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}

080142f8 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	4603      	mov	r3, r0
 8014300:	71fb      	strb	r3, [r7, #7]
 8014302:	460b      	mov	r3, r1
 8014304:	71bb      	strb	r3, [r7, #6]
 8014306:	4613      	mov	r3, r2
 8014308:	717b      	strb	r3, [r7, #5]
    switch( region )
 801430a:	79fb      	ldrb	r3, [r7, #7]
 801430c:	2b05      	cmp	r3, #5
 801430e:	d108      	bne.n	8014322 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8014310:	797a      	ldrb	r2, [r7, #5]
 8014312:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014316:	4611      	mov	r1, r2
 8014318:	4618      	mov	r0, r3
 801431a:	f001 ff9d 	bl	8016258 <RegionEU868AlternateDr>
 801431e:	4603      	mov	r3, r0
 8014320:	e000      	b.n	8014324 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014322:	2300      	movs	r3, #0
        }
    }
}
 8014324:	4618      	mov	r0, r3
 8014326:	3708      	adds	r7, #8
 8014328:	46bd      	mov	sp, r7
 801432a:	bd80      	pop	{r7, pc}

0801432c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b084      	sub	sp, #16
 8014330:	af00      	add	r7, sp, #0
 8014332:	60b9      	str	r1, [r7, #8]
 8014334:	607a      	str	r2, [r7, #4]
 8014336:	603b      	str	r3, [r7, #0]
 8014338:	4603      	mov	r3, r0
 801433a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801433c:	7bfb      	ldrb	r3, [r7, #15]
 801433e:	2b05      	cmp	r3, #5
 8014340:	d107      	bne.n	8014352 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8014342:	69bb      	ldr	r3, [r7, #24]
 8014344:	683a      	ldr	r2, [r7, #0]
 8014346:	6879      	ldr	r1, [r7, #4]
 8014348:	68b8      	ldr	r0, [r7, #8]
 801434a:	f001 ff95 	bl	8016278 <RegionEU868NextChannel>
 801434e:	4603      	mov	r3, r0
 8014350:	e000      	b.n	8014354 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014352:	2309      	movs	r3, #9
        }
    }
}
 8014354:	4618      	mov	r0, r3
 8014356:	3710      	adds	r7, #16
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}

0801435c <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b082      	sub	sp, #8
 8014360:	af00      	add	r7, sp, #0
 8014362:	4603      	mov	r3, r0
 8014364:	6039      	str	r1, [r7, #0]
 8014366:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014368:	79fb      	ldrb	r3, [r7, #7]
 801436a:	2b05      	cmp	r3, #5
 801436c:	d103      	bne.n	8014376 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 801436e:	6838      	ldr	r0, [r7, #0]
 8014370:	f002 f8fa 	bl	8016568 <RegionEU868SetContinuousWave>
 8014374:	e000      	b.n	8014378 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8014376:	bf00      	nop
        }
    }
}
 8014378:	bf00      	nop
 801437a:	3708      	adds	r7, #8
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}

08014380 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014380:	b590      	push	{r4, r7, lr}
 8014382:	b083      	sub	sp, #12
 8014384:	af00      	add	r7, sp, #0
 8014386:	4604      	mov	r4, r0
 8014388:	4608      	mov	r0, r1
 801438a:	4611      	mov	r1, r2
 801438c:	461a      	mov	r2, r3
 801438e:	4623      	mov	r3, r4
 8014390:	71fb      	strb	r3, [r7, #7]
 8014392:	4603      	mov	r3, r0
 8014394:	71bb      	strb	r3, [r7, #6]
 8014396:	460b      	mov	r3, r1
 8014398:	717b      	strb	r3, [r7, #5]
 801439a:	4613      	mov	r3, r2
 801439c:	713b      	strb	r3, [r7, #4]
    switch( region )
 801439e:	79fb      	ldrb	r3, [r7, #7]
 80143a0:	2b05      	cmp	r3, #5
 80143a2:	d109      	bne.n	80143b8 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80143a4:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80143a8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80143ac:	79bb      	ldrb	r3, [r7, #6]
 80143ae:	4618      	mov	r0, r3
 80143b0:	f002 f928 	bl	8016604 <RegionEU868ApplyDrOffset>
 80143b4:	4603      	mov	r3, r0
 80143b6:	e000      	b.n	80143ba <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80143b8:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80143ba:	4618      	mov	r0, r3
 80143bc:	370c      	adds	r7, #12
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd90      	pop	{r4, r7, pc}
	...

080143c4 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80143c4:	b480      	push	{r7}
 80143c6:	b083      	sub	sp, #12
 80143c8:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80143ca:	4b04      	ldr	r3, [pc, #16]	; (80143dc <RegionGetVersion+0x18>)
 80143cc:	607b      	str	r3, [r7, #4]

    return version;
 80143ce:	687b      	ldr	r3, [r7, #4]
}
 80143d0:	4618      	mov	r0, r3
 80143d2:	370c      	adds	r7, #12
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bc80      	pop	{r7}
 80143d8:	4770      	bx	lr
 80143da:	bf00      	nop
 80143dc:	01000300 	.word	0x01000300

080143e0 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80143e0:	b480      	push	{r7}
 80143e2:	b087      	sub	sp, #28
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	60f8      	str	r0, [r7, #12]
 80143e8:	4608      	mov	r0, r1
 80143ea:	4639      	mov	r1, r7
 80143ec:	e881 000c 	stmia.w	r1, {r2, r3}
 80143f0:	4603      	mov	r3, r0
 80143f2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	881b      	ldrh	r3, [r3, #0]
 80143f8:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80143fa:	7afb      	ldrb	r3, [r7, #11]
 80143fc:	f083 0301 	eor.w	r3, r3, #1
 8014400:	b2db      	uxtb	r3, r3
 8014402:	2b00      	cmp	r3, #0
 8014404:	d01b      	beq.n	801443e <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014406:	f242 7310 	movw	r3, #10000	; 0x2710
 801440a:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8014412:	d202      	bcs.n	801441a <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014414:	2364      	movs	r3, #100	; 0x64
 8014416:	82bb      	strh	r3, [r7, #20]
 8014418:	e00b      	b.n	8014432 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8014420:	4293      	cmp	r3, r2
 8014422:	d803      	bhi.n	801442c <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014428:	82bb      	strh	r3, [r7, #20]
 801442a:	e002      	b.n	8014432 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801442c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014430:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8014432:	8aba      	ldrh	r2, [r7, #20]
 8014434:	8afb      	ldrh	r3, [r7, #22]
 8014436:	4293      	cmp	r3, r2
 8014438:	bf38      	it	cc
 801443a:	4613      	movcc	r3, r2
 801443c:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801443e:	8afb      	ldrh	r3, [r7, #22]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d101      	bne.n	8014448 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014444:	2301      	movs	r3, #1
 8014446:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014448:	8afb      	ldrh	r3, [r7, #22]
}
 801444a:	4618      	mov	r0, r3
 801444c:	371c      	adds	r7, #28
 801444e:	46bd      	mov	sp, r7
 8014450:	bc80      	pop	{r7}
 8014452:	4770      	bx	lr

08014454 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b08e      	sub	sp, #56	; 0x38
 8014458:	af02      	add	r7, sp, #8
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	4608      	mov	r0, r1
 801445e:	4639      	mov	r1, r7
 8014460:	e881 000c 	stmia.w	r1, {r2, r3}
 8014464:	4603      	mov	r3, r0
 8014466:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	881b      	ldrh	r3, [r3, #0]
 801446c:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801446e:	4b4b      	ldr	r3, [pc, #300]	; (801459c <SetMaxTimeCredits+0x148>)
 8014470:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8014472:	463b      	mov	r3, r7
 8014474:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014478:	f005 fc1a 	bl	8019cb0 <SysTimeToMs>
 801447c:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 801447e:	f107 0314 	add.w	r3, r7, #20
 8014482:	2200      	movs	r2, #0
 8014484:	601a      	str	r2, [r3, #0]
 8014486:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014488:	7af9      	ldrb	r1, [r7, #11]
 801448a:	463b      	mov	r3, r7
 801448c:	cb0c      	ldmia	r3, {r2, r3}
 801448e:	68f8      	ldr	r0, [r7, #12]
 8014490:	f7ff ffa6 	bl	80143e0 <GetDutyCycle>
 8014494:	4603      	mov	r3, r0
 8014496:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8014498:	7afb      	ldrb	r3, [r7, #11]
 801449a:	f083 0301 	eor.w	r3, r3, #1
 801449e:	b2db      	uxtb	r3, r3
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d062      	beq.n	801456a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80144a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80144a6:	2b64      	cmp	r3, #100	; 0x64
 80144a8:	d105      	bne.n	80144b6 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80144aa:	4b3c      	ldr	r3, [pc, #240]	; (801459c <SetMaxTimeCredits+0x148>)
 80144ac:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144b2:	609a      	str	r2, [r3, #8]
 80144b4:	e00b      	b.n	80144ce <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80144b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80144b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80144bc:	d105      	bne.n	80144ca <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80144be:	4b38      	ldr	r3, [pc, #224]	; (80145a0 <SetMaxTimeCredits+0x14c>)
 80144c0:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144c6:	609a      	str	r2, [r3, #8]
 80144c8:	e001      	b.n	80144ce <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80144ca:	4b36      	ldr	r3, [pc, #216]	; (80145a4 <SetMaxTimeCredits+0x150>)
 80144cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	689a      	ldr	r2, [r3, #8]
 80144d2:	f107 031c 	add.w	r3, r7, #28
 80144d6:	4611      	mov	r1, r2
 80144d8:	4618      	mov	r0, r3
 80144da:	f005 fc11 	bl	8019d00 <SysTimeFromMs>
 80144de:	f107 0014 	add.w	r0, r7, #20
 80144e2:	6a3b      	ldr	r3, [r7, #32]
 80144e4:	9300      	str	r3, [sp, #0]
 80144e6:	69fb      	ldr	r3, [r7, #28]
 80144e8:	463a      	mov	r2, r7
 80144ea:	ca06      	ldmia	r2, {r1, r2}
 80144ec:	f005 fb21 	bl	8019b32 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80144f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80144f4:	f083 0301 	eor.w	r3, r3, #1
 80144f8:	b2db      	uxtb	r3, r3
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d006      	beq.n	801450c <SetMaxTimeCredits+0xb8>
 80144fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014502:	f083 0301 	eor.w	r3, r3, #1
 8014506:	b2db      	uxtb	r3, r3
 8014508:	2b00      	cmp	r3, #0
 801450a:	d108      	bne.n	801451e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014512:	429a      	cmp	r2, r3
 8014514:	d103      	bne.n	801451e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8014516:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014518:	4a23      	ldr	r2, [pc, #140]	; (80145a8 <SetMaxTimeCredits+0x154>)
 801451a:	4293      	cmp	r3, r2
 801451c:	d92f      	bls.n	801457e <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014522:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	4a21      	ldr	r2, [pc, #132]	; (80145ac <SetMaxTimeCredits+0x158>)
 8014528:	4293      	cmp	r3, r2
 801452a:	d928      	bls.n	801457e <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801452c:	683b      	ldr	r3, [r7, #0]
 801452e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014532:	3b30      	subs	r3, #48	; 0x30
 8014534:	4a1e      	ldr	r2, [pc, #120]	; (80145b0 <SetMaxTimeCredits+0x15c>)
 8014536:	fba2 2303 	umull	r2, r3, r2, r3
 801453a:	0c1b      	lsrs	r3, r3, #16
 801453c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801453e:	697b      	ldr	r3, [r7, #20]
 8014540:	4a1c      	ldr	r2, [pc, #112]	; (80145b4 <SetMaxTimeCredits+0x160>)
 8014542:	fb02 f303 	mul.w	r3, r2, r3
 8014546:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014548:	697b      	ldr	r3, [r7, #20]
 801454a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801454e:	3330      	adds	r3, #48	; 0x30
 8014550:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8014552:	2300      	movs	r3, #0
 8014554:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8014556:	f107 0314 	add.w	r3, r7, #20
 801455a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801455e:	f005 fba7 	bl	8019cb0 <SysTimeToMs>
 8014562:	4602      	mov	r2, r0
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	609a      	str	r2, [r3, #8]
 8014568:	e009      	b.n	801457e <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801456a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801456e:	f083 0301 	eor.w	r3, r3, #1
 8014572:	b2db      	uxtb	r3, r3
 8014574:	2b00      	cmp	r3, #0
 8014576:	d002      	beq.n	801457e <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801457c:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	685b      	ldr	r3, [r3, #4]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d102      	bne.n	801458c <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801458a:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014590:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8014592:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8014594:	4618      	mov	r0, r3
 8014596:	3730      	adds	r7, #48	; 0x30
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	001b7740 	.word	0x001b7740
 80145a0:	0112a880 	.word	0x0112a880
 80145a4:	02932e00 	.word	0x02932e00
 80145a8:	0001517f 	.word	0x0001517f
 80145ac:	0001ec2f 	.word	0x0001ec2f
 80145b0:	c22e4507 	.word	0xc22e4507
 80145b4:	00015180 	.word	0x00015180

080145b8 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b086      	sub	sp, #24
 80145bc:	af02      	add	r7, sp, #8
 80145be:	6078      	str	r0, [r7, #4]
 80145c0:	4608      	mov	r0, r1
 80145c2:	4611      	mov	r1, r2
 80145c4:	461a      	mov	r2, r3
 80145c6:	4603      	mov	r3, r0
 80145c8:	70fb      	strb	r3, [r7, #3]
 80145ca:	460b      	mov	r3, r1
 80145cc:	70bb      	strb	r3, [r7, #2]
 80145ce:	4613      	mov	r3, r2
 80145d0:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80145d2:	78f9      	ldrb	r1, [r7, #3]
 80145d4:	787b      	ldrb	r3, [r7, #1]
 80145d6:	9301      	str	r3, [sp, #4]
 80145d8:	78bb      	ldrb	r3, [r7, #2]
 80145da:	9300      	str	r3, [sp, #0]
 80145dc:	f107 0318 	add.w	r3, r7, #24
 80145e0:	cb0c      	ldmia	r3, {r2, r3}
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f7ff ff36 	bl	8014454 <SetMaxTimeCredits>
 80145e8:	4603      	mov	r3, r0
 80145ea:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80145ec:	78fb      	ldrb	r3, [r7, #3]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d00a      	beq.n	8014608 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	685b      	ldr	r3, [r3, #4]
 80145f6:	4618      	mov	r0, r3
 80145f8:	f006 f982 	bl	801a900 <UTIL_TIMER_GetElapsedTime>
 80145fc:	4602      	mov	r2, r0
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	68db      	ldr	r3, [r3, #12]
 8014602:	441a      	add	r2, r3
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	68da      	ldr	r2, [r3, #12]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	691b      	ldr	r3, [r3, #16]
 8014610:	429a      	cmp	r2, r3
 8014612:	d903      	bls.n	801461c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	691a      	ldr	r2, [r3, #16]
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6a3a      	ldr	r2, [r7, #32]
 8014620:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8014622:	89fb      	ldrh	r3, [r7, #14]
}
 8014624:	4618      	mov	r0, r3
 8014626:	3710      	adds	r7, #16
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}

0801462c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801462c:	b480      	push	{r7}
 801462e:	b085      	sub	sp, #20
 8014630:	af00      	add	r7, sp, #0
 8014632:	4603      	mov	r3, r0
 8014634:	460a      	mov	r2, r1
 8014636:	80fb      	strh	r3, [r7, #6]
 8014638:	4613      	mov	r3, r2
 801463a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 801463c:	2300      	movs	r3, #0
 801463e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014640:	2300      	movs	r3, #0
 8014642:	73bb      	strb	r3, [r7, #14]
 8014644:	e011      	b.n	801466a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8014646:	88fa      	ldrh	r2, [r7, #6]
 8014648:	7bbb      	ldrb	r3, [r7, #14]
 801464a:	2101      	movs	r1, #1
 801464c:	fa01 f303 	lsl.w	r3, r1, r3
 8014650:	401a      	ands	r2, r3
 8014652:	7bbb      	ldrb	r3, [r7, #14]
 8014654:	2101      	movs	r1, #1
 8014656:	fa01 f303 	lsl.w	r3, r1, r3
 801465a:	429a      	cmp	r2, r3
 801465c:	d102      	bne.n	8014664 <CountChannels+0x38>
        {
            nbActiveBits++;
 801465e:	7bfb      	ldrb	r3, [r7, #15]
 8014660:	3301      	adds	r3, #1
 8014662:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014664:	7bbb      	ldrb	r3, [r7, #14]
 8014666:	3301      	adds	r3, #1
 8014668:	73bb      	strb	r3, [r7, #14]
 801466a:	7bba      	ldrb	r2, [r7, #14]
 801466c:	797b      	ldrb	r3, [r7, #5]
 801466e:	429a      	cmp	r2, r3
 8014670:	d3e9      	bcc.n	8014646 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8014672:	7bfb      	ldrb	r3, [r7, #15]
}
 8014674:	4618      	mov	r0, r3
 8014676:	3714      	adds	r7, #20
 8014678:	46bd      	mov	sp, r7
 801467a:	bc80      	pop	{r7}
 801467c:	4770      	bx	lr

0801467e <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801467e:	b580      	push	{r7, lr}
 8014680:	b084      	sub	sp, #16
 8014682:	af00      	add	r7, sp, #0
 8014684:	6039      	str	r1, [r7, #0]
 8014686:	4611      	mov	r1, r2
 8014688:	461a      	mov	r2, r3
 801468a:	4603      	mov	r3, r0
 801468c:	71fb      	strb	r3, [r7, #7]
 801468e:	460b      	mov	r3, r1
 8014690:	71bb      	strb	r3, [r7, #6]
 8014692:	4613      	mov	r3, r2
 8014694:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8014696:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801469a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801469e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80146a2:	4618      	mov	r0, r3
 80146a4:	f000 f85d 	bl	8014762 <RegionCommonValueInRange>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d101      	bne.n	80146b2 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80146ae:	2300      	movs	r3, #0
 80146b0:	e053      	b.n	801475a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80146b2:	2300      	movs	r3, #0
 80146b4:	73fb      	strb	r3, [r7, #15]
 80146b6:	2300      	movs	r3, #0
 80146b8:	73bb      	strb	r3, [r7, #14]
 80146ba:	e049      	b.n	8014750 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80146bc:	2300      	movs	r3, #0
 80146be:	737b      	strb	r3, [r7, #13]
 80146c0:	e03d      	b.n	801473e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80146c2:	7bbb      	ldrb	r3, [r7, #14]
 80146c4:	005b      	lsls	r3, r3, #1
 80146c6:	683a      	ldr	r2, [r7, #0]
 80146c8:	4413      	add	r3, r2
 80146ca:	881b      	ldrh	r3, [r3, #0]
 80146cc:	461a      	mov	r2, r3
 80146ce:	7b7b      	ldrb	r3, [r7, #13]
 80146d0:	fa42 f303 	asr.w	r3, r2, r3
 80146d4:	f003 0301 	and.w	r3, r3, #1
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d02d      	beq.n	8014738 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80146dc:	7bfa      	ldrb	r2, [r7, #15]
 80146de:	7b7b      	ldrb	r3, [r7, #13]
 80146e0:	4413      	add	r3, r2
 80146e2:	461a      	mov	r2, r3
 80146e4:	4613      	mov	r3, r2
 80146e6:	005b      	lsls	r3, r3, #1
 80146e8:	4413      	add	r3, r2
 80146ea:	009b      	lsls	r3, r3, #2
 80146ec:	461a      	mov	r2, r3
 80146ee:	69fb      	ldr	r3, [r7, #28]
 80146f0:	4413      	add	r3, r2
 80146f2:	7a1b      	ldrb	r3, [r3, #8]
 80146f4:	f343 0303 	sbfx	r3, r3, #0, #4
 80146f8:	b25b      	sxtb	r3, r3
 80146fa:	f003 030f 	and.w	r3, r3, #15
 80146fe:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8014700:	7bfa      	ldrb	r2, [r7, #15]
 8014702:	7b7b      	ldrb	r3, [r7, #13]
 8014704:	4413      	add	r3, r2
 8014706:	461a      	mov	r2, r3
 8014708:	4613      	mov	r3, r2
 801470a:	005b      	lsls	r3, r3, #1
 801470c:	4413      	add	r3, r2
 801470e:	009b      	lsls	r3, r3, #2
 8014710:	461a      	mov	r2, r3
 8014712:	69fb      	ldr	r3, [r7, #28]
 8014714:	4413      	add	r3, r2
 8014716:	7a1b      	ldrb	r3, [r3, #8]
 8014718:	f343 1303 	sbfx	r3, r3, #4, #4
 801471c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801471e:	f003 030f 	and.w	r3, r3, #15
 8014722:	b25a      	sxtb	r2, r3
 8014724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014728:	4618      	mov	r0, r3
 801472a:	f000 f81a 	bl	8014762 <RegionCommonValueInRange>
 801472e:	4603      	mov	r3, r0
 8014730:	2b01      	cmp	r3, #1
 8014732:	d101      	bne.n	8014738 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014734:	2301      	movs	r3, #1
 8014736:	e010      	b.n	801475a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014738:	7b7b      	ldrb	r3, [r7, #13]
 801473a:	3301      	adds	r3, #1
 801473c:	737b      	strb	r3, [r7, #13]
 801473e:	7b7b      	ldrb	r3, [r7, #13]
 8014740:	2b0f      	cmp	r3, #15
 8014742:	d9be      	bls.n	80146c2 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014744:	7bfb      	ldrb	r3, [r7, #15]
 8014746:	3310      	adds	r3, #16
 8014748:	73fb      	strb	r3, [r7, #15]
 801474a:	7bbb      	ldrb	r3, [r7, #14]
 801474c:	3301      	adds	r3, #1
 801474e:	73bb      	strb	r3, [r7, #14]
 8014750:	7bfa      	ldrb	r2, [r7, #15]
 8014752:	79fb      	ldrb	r3, [r7, #7]
 8014754:	429a      	cmp	r2, r3
 8014756:	d3b1      	bcc.n	80146bc <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014758:	2300      	movs	r3, #0
}
 801475a:	4618      	mov	r0, r3
 801475c:	3710      	adds	r7, #16
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}

08014762 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014762:	b480      	push	{r7}
 8014764:	b083      	sub	sp, #12
 8014766:	af00      	add	r7, sp, #0
 8014768:	4603      	mov	r3, r0
 801476a:	71fb      	strb	r3, [r7, #7]
 801476c:	460b      	mov	r3, r1
 801476e:	71bb      	strb	r3, [r7, #6]
 8014770:	4613      	mov	r3, r2
 8014772:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014774:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014778:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801477c:	429a      	cmp	r2, r3
 801477e:	db07      	blt.n	8014790 <RegionCommonValueInRange+0x2e>
 8014780:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014784:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014788:	429a      	cmp	r2, r3
 801478a:	dc01      	bgt.n	8014790 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 801478c:	2301      	movs	r3, #1
 801478e:	e000      	b.n	8014792 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8014790:	2300      	movs	r3, #0
}
 8014792:	4618      	mov	r0, r3
 8014794:	370c      	adds	r7, #12
 8014796:	46bd      	mov	sp, r7
 8014798:	bc80      	pop	{r7}
 801479a:	4770      	bx	lr

0801479c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801479c:	b480      	push	{r7}
 801479e:	b085      	sub	sp, #20
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
 80147a4:	460b      	mov	r3, r1
 80147a6:	70fb      	strb	r3, [r7, #3]
 80147a8:	4613      	mov	r3, r2
 80147aa:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80147ac:	78fb      	ldrb	r3, [r7, #3]
 80147ae:	091b      	lsrs	r3, r3, #4
 80147b0:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80147b2:	78bb      	ldrb	r3, [r7, #2]
 80147b4:	091b      	lsrs	r3, r3, #4
 80147b6:	b2db      	uxtb	r3, r3
 80147b8:	7bfa      	ldrb	r2, [r7, #15]
 80147ba:	429a      	cmp	r2, r3
 80147bc:	d803      	bhi.n	80147c6 <RegionCommonChanDisable+0x2a>
 80147be:	78fa      	ldrb	r2, [r7, #3]
 80147c0:	78bb      	ldrb	r3, [r7, #2]
 80147c2:	429a      	cmp	r2, r3
 80147c4:	d301      	bcc.n	80147ca <RegionCommonChanDisable+0x2e>
    {
        return false;
 80147c6:	2300      	movs	r3, #0
 80147c8:	e017      	b.n	80147fa <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80147ca:	7bfb      	ldrb	r3, [r7, #15]
 80147cc:	005b      	lsls	r3, r3, #1
 80147ce:	687a      	ldr	r2, [r7, #4]
 80147d0:	4413      	add	r3, r2
 80147d2:	881b      	ldrh	r3, [r3, #0]
 80147d4:	b21a      	sxth	r2, r3
 80147d6:	78fb      	ldrb	r3, [r7, #3]
 80147d8:	f003 030f 	and.w	r3, r3, #15
 80147dc:	2101      	movs	r1, #1
 80147de:	fa01 f303 	lsl.w	r3, r1, r3
 80147e2:	b21b      	sxth	r3, r3
 80147e4:	43db      	mvns	r3, r3
 80147e6:	b21b      	sxth	r3, r3
 80147e8:	4013      	ands	r3, r2
 80147ea:	b219      	sxth	r1, r3
 80147ec:	7bfb      	ldrb	r3, [r7, #15]
 80147ee:	005b      	lsls	r3, r3, #1
 80147f0:	687a      	ldr	r2, [r7, #4]
 80147f2:	4413      	add	r3, r2
 80147f4:	b28a      	uxth	r2, r1
 80147f6:	801a      	strh	r2, [r3, #0]

    return true;
 80147f8:	2301      	movs	r3, #1
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3714      	adds	r7, #20
 80147fe:	46bd      	mov	sp, r7
 8014800:	bc80      	pop	{r7}
 8014802:	4770      	bx	lr

08014804 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b084      	sub	sp, #16
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
 801480c:	460b      	mov	r3, r1
 801480e:	70fb      	strb	r3, [r7, #3]
 8014810:	4613      	mov	r3, r2
 8014812:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014814:	2300      	movs	r3, #0
 8014816:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d101      	bne.n	8014822 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801481e:	2300      	movs	r3, #0
 8014820:	e018      	b.n	8014854 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014822:	78fb      	ldrb	r3, [r7, #3]
 8014824:	73bb      	strb	r3, [r7, #14]
 8014826:	e010      	b.n	801484a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014828:	7bbb      	ldrb	r3, [r7, #14]
 801482a:	005b      	lsls	r3, r3, #1
 801482c:	687a      	ldr	r2, [r7, #4]
 801482e:	4413      	add	r3, r2
 8014830:	881b      	ldrh	r3, [r3, #0]
 8014832:	2110      	movs	r1, #16
 8014834:	4618      	mov	r0, r3
 8014836:	f7ff fef9 	bl	801462c <CountChannels>
 801483a:	4603      	mov	r3, r0
 801483c:	461a      	mov	r2, r3
 801483e:	7bfb      	ldrb	r3, [r7, #15]
 8014840:	4413      	add	r3, r2
 8014842:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014844:	7bbb      	ldrb	r3, [r7, #14]
 8014846:	3301      	adds	r3, #1
 8014848:	73bb      	strb	r3, [r7, #14]
 801484a:	7bba      	ldrb	r2, [r7, #14]
 801484c:	78bb      	ldrb	r3, [r7, #2]
 801484e:	429a      	cmp	r2, r3
 8014850:	d3ea      	bcc.n	8014828 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8014852:	7bfb      	ldrb	r3, [r7, #15]
}
 8014854:	4618      	mov	r0, r3
 8014856:	3710      	adds	r7, #16
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}

0801485c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 801485c:	b480      	push	{r7}
 801485e:	b087      	sub	sp, #28
 8014860:	af00      	add	r7, sp, #0
 8014862:	60f8      	str	r0, [r7, #12]
 8014864:	60b9      	str	r1, [r7, #8]
 8014866:	4613      	mov	r3, r2
 8014868:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d016      	beq.n	801489e <RegionCommonChanMaskCopy+0x42>
 8014870:	68bb      	ldr	r3, [r7, #8]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d013      	beq.n	801489e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8014876:	2300      	movs	r3, #0
 8014878:	75fb      	strb	r3, [r7, #23]
 801487a:	e00c      	b.n	8014896 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801487c:	7dfb      	ldrb	r3, [r7, #23]
 801487e:	005b      	lsls	r3, r3, #1
 8014880:	68ba      	ldr	r2, [r7, #8]
 8014882:	441a      	add	r2, r3
 8014884:	7dfb      	ldrb	r3, [r7, #23]
 8014886:	005b      	lsls	r3, r3, #1
 8014888:	68f9      	ldr	r1, [r7, #12]
 801488a:	440b      	add	r3, r1
 801488c:	8812      	ldrh	r2, [r2, #0]
 801488e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8014890:	7dfb      	ldrb	r3, [r7, #23]
 8014892:	3301      	adds	r3, #1
 8014894:	75fb      	strb	r3, [r7, #23]
 8014896:	7dfa      	ldrb	r2, [r7, #23]
 8014898:	79fb      	ldrb	r3, [r7, #7]
 801489a:	429a      	cmp	r2, r3
 801489c:	d3ee      	bcc.n	801487c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801489e:	bf00      	nop
 80148a0:	371c      	adds	r7, #28
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bc80      	pop	{r7}
 80148a6:	4770      	bx	lr

080148a8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80148a8:	b082      	sub	sp, #8
 80148aa:	b580      	push	{r7, lr}
 80148ac:	b086      	sub	sp, #24
 80148ae:	af00      	add	r7, sp, #0
 80148b0:	60f8      	str	r0, [r7, #12]
 80148b2:	60b9      	str	r1, [r7, #8]
 80148b4:	627b      	str	r3, [r7, #36]	; 0x24
 80148b6:	4613      	mov	r3, r2
 80148b8:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80148ba:	79f9      	ldrb	r1, [r7, #7]
 80148bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80148c0:	cb0c      	ldmia	r3, {r2, r3}
 80148c2:	68f8      	ldr	r0, [r7, #12]
 80148c4:	f7ff fd8c 	bl	80143e0 <GetDutyCycle>
 80148c8:	4603      	mov	r3, r0
 80148ca:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	68da      	ldr	r2, [r3, #12]
 80148d0:	8afb      	ldrh	r3, [r7, #22]
 80148d2:	68b9      	ldr	r1, [r7, #8]
 80148d4:	fb01 f303 	mul.w	r3, r1, r3
 80148d8:	429a      	cmp	r2, r3
 80148da:	d909      	bls.n	80148f0 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	68da      	ldr	r2, [r3, #12]
 80148e0:	8afb      	ldrh	r3, [r7, #22]
 80148e2:	68b9      	ldr	r1, [r7, #8]
 80148e4:	fb01 f303 	mul.w	r3, r1, r3
 80148e8:	1ad2      	subs	r2, r2, r3
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80148ee:	e002      	b.n	80148f6 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	2200      	movs	r2, #0
 80148f4:	60da      	str	r2, [r3, #12]
}
 80148f6:	bf00      	nop
 80148f8:	3718      	adds	r7, #24
 80148fa:	46bd      	mov	sp, r7
 80148fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014900:	b002      	add	sp, #8
 8014902:	4770      	bx	lr

08014904 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014906:	b08f      	sub	sp, #60	; 0x3c
 8014908:	af04      	add	r7, sp, #16
 801490a:	6039      	str	r1, [r7, #0]
 801490c:	4611      	mov	r1, r2
 801490e:	461a      	mov	r2, r3
 8014910:	4603      	mov	r3, r0
 8014912:	71fb      	strb	r3, [r7, #7]
 8014914:	460b      	mov	r3, r1
 8014916:	71bb      	strb	r3, [r7, #6]
 8014918:	4613      	mov	r3, r2
 801491a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801491c:	f04f 33ff 	mov.w	r3, #4294967295
 8014920:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8014922:	f005 ffdb 	bl	801a8dc <UTIL_TIMER_GetCurrentTime>
 8014926:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8014928:	2300      	movs	r3, #0
 801492a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 801492c:	2301      	movs	r3, #1
 801492e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8014930:	2300      	movs	r3, #0
 8014932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8014936:	2300      	movs	r3, #0
 8014938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801493c:	e0ba      	b.n	8014ab4 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801493e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014942:	4613      	mov	r3, r2
 8014944:	005b      	lsls	r3, r3, #1
 8014946:	4413      	add	r3, r2
 8014948:	00db      	lsls	r3, r3, #3
 801494a:	461a      	mov	r2, r3
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	189c      	adds	r4, r3, r2
 8014950:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8014954:	797a      	ldrb	r2, [r7, #5]
 8014956:	79fd      	ldrb	r5, [r7, #7]
 8014958:	69fb      	ldr	r3, [r7, #28]
 801495a:	9302      	str	r3, [sp, #8]
 801495c:	46ec      	mov	ip, sp
 801495e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014962:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014966:	e88c 0003 	stmia.w	ip, {r0, r1}
 801496a:	4633      	mov	r3, r6
 801496c:	4629      	mov	r1, r5
 801496e:	4620      	mov	r0, r4
 8014970:	f7ff fe22 	bl	80145b8 <UpdateTimeCredits>
 8014974:	4603      	mov	r3, r0
 8014976:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8014978:	8afa      	ldrh	r2, [r7, #22]
 801497a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801497c:	fb02 f303 	mul.w	r3, r2, r3
 8014980:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014982:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014986:	4613      	mov	r3, r2
 8014988:	005b      	lsls	r3, r3, #1
 801498a:	4413      	add	r3, r2
 801498c:	00db      	lsls	r3, r3, #3
 801498e:	461a      	mov	r2, r3
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	4413      	add	r3, r2
 8014994:	68db      	ldr	r3, [r3, #12]
 8014996:	69ba      	ldr	r2, [r7, #24]
 8014998:	429a      	cmp	r2, r3
 801499a:	d308      	bcc.n	80149ae <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801499c:	797b      	ldrb	r3, [r7, #5]
 801499e:	f083 0301 	eor.w	r3, r3, #1
 80149a2:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d013      	beq.n	80149d0 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80149a8:	79fb      	ldrb	r3, [r7, #7]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d010      	beq.n	80149d0 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80149ae:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149b2:	4613      	mov	r3, r2
 80149b4:	005b      	lsls	r3, r3, #1
 80149b6:	4413      	add	r3, r2
 80149b8:	00db      	lsls	r3, r3, #3
 80149ba:	461a      	mov	r2, r3
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	4413      	add	r3, r2
 80149c0:	2201      	movs	r2, #1
 80149c2:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80149c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80149c8:	3301      	adds	r3, #1
 80149ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80149ce:	e06c      	b.n	8014aaa <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80149d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149d4:	4613      	mov	r3, r2
 80149d6:	005b      	lsls	r3, r3, #1
 80149d8:	4413      	add	r3, r2
 80149da:	00db      	lsls	r3, r3, #3
 80149dc:	461a      	mov	r2, r3
 80149de:	683b      	ldr	r3, [r7, #0]
 80149e0:	4413      	add	r3, r2
 80149e2:	2200      	movs	r2, #0
 80149e4:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80149e6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149ea:	4613      	mov	r3, r2
 80149ec:	005b      	lsls	r3, r3, #1
 80149ee:	4413      	add	r3, r2
 80149f0:	00db      	lsls	r3, r3, #3
 80149f2:	461a      	mov	r2, r3
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	4413      	add	r3, r2
 80149f8:	691b      	ldr	r3, [r3, #16]
 80149fa:	69ba      	ldr	r2, [r7, #24]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d215      	bcs.n	8014a2c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8014a00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014a04:	4613      	mov	r3, r2
 8014a06:	005b      	lsls	r3, r3, #1
 8014a08:	4413      	add	r3, r2
 8014a0a:	00db      	lsls	r3, r3, #3
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	4413      	add	r3, r2
 8014a12:	68db      	ldr	r3, [r3, #12]
 8014a14:	69ba      	ldr	r2, [r7, #24]
 8014a16:	1ad3      	subs	r3, r2, r3
 8014a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a1a:	4293      	cmp	r3, r2
 8014a1c:	bf28      	it	cs
 8014a1e:	4613      	movcs	r3, r2
 8014a20:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014a22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014a26:	3301      	adds	r3, #1
 8014a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014a2c:	79fb      	ldrb	r3, [r7, #7]
 8014a2e:	f083 0301 	eor.w	r3, r3, #1
 8014a32:	b2db      	uxtb	r3, r3
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d038      	beq.n	8014aaa <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8014a38:	2300      	movs	r3, #0
 8014a3a:	60fb      	str	r3, [r7, #12]
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014a40:	8afb      	ldrh	r3, [r7, #22]
 8014a42:	2b64      	cmp	r3, #100	; 0x64
 8014a44:	d103      	bne.n	8014a4e <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8014a46:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014a4a:	60fb      	str	r3, [r7, #12]
 8014a4c:	e009      	b.n	8014a62 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014a4e:	8afb      	ldrh	r3, [r7, #22]
 8014a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014a54:	d103      	bne.n	8014a5e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8014a56:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8014a5a:	60fb      	str	r3, [r7, #12]
 8014a5c:	e001      	b.n	8014a62 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014a5e:	4b1e      	ldr	r3, [pc, #120]	; (8014ad8 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014a60:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a64:	4a1c      	ldr	r2, [pc, #112]	; (8014ad8 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014a66:	4293      	cmp	r3, r2
 8014a68:	d90e      	bls.n	8014a88 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8014a6a:	68fa      	ldr	r2, [r7, #12]
 8014a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a6e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014a72:	3b30      	subs	r3, #48	; 0x30
 8014a74:	4919      	ldr	r1, [pc, #100]	; (8014adc <RegionCommonUpdateBandTimeOff+0x1d8>)
 8014a76:	fba1 1303 	umull	r1, r3, r1, r3
 8014a7a:	0c1b      	lsrs	r3, r3, #16
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	4918      	ldr	r1, [pc, #96]	; (8014ae0 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8014a80:	fb01 f303 	mul.w	r3, r1, r3
 8014a84:	4413      	add	r3, r2
 8014a86:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8014a88:	f107 000c 	add.w	r0, r7, #12
 8014a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a8e:	9300      	str	r3, [sp, #0]
 8014a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a92:	f107 020c 	add.w	r2, r7, #12
 8014a96:	ca06      	ldmia	r2, {r1, r2}
 8014a98:	f005 f84b 	bl	8019b32 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014a9c:	f107 030c 	add.w	r3, r7, #12
 8014aa0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014aa4:	f005 f904 	bl	8019cb0 <SysTimeToMs>
 8014aa8:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8014aaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014aae:	3301      	adds	r3, #1
 8014ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014ab4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014ab8:	79bb      	ldrb	r3, [r7, #6]
 8014aba:	429a      	cmp	r2, r3
 8014abc:	f4ff af3f 	bcc.w	801493e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8014ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d102      	bne.n	8014ace <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8014acc:	e000      	b.n	8014ad0 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8014ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	372c      	adds	r7, #44	; 0x2c
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ad8:	0001ec30 	.word	0x0001ec30
 8014adc:	c22e4507 	.word	0xc22e4507
 8014ae0:	00015180 	.word	0x00015180

08014ae4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014ae4:	b480      	push	{r7}
 8014ae6:	b085      	sub	sp, #20
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8014aee:	2300      	movs	r3, #0
 8014af0:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	781b      	ldrb	r3, [r3, #0]
 8014af6:	2b03      	cmp	r3, #3
 8014af8:	d13f      	bne.n	8014b7a <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	3301      	adds	r3, #1
 8014afe:	781b      	ldrb	r3, [r3, #0]
 8014b00:	b25a      	sxtb	r2, r3
 8014b02:	683b      	ldr	r3, [r7, #0]
 8014b04:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b0c:	f003 030f 	and.w	r3, r3, #15
 8014b10:	b25a      	sxtb	r2, r3
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b1c:	b2db      	uxtb	r3, r3
 8014b1e:	091b      	lsrs	r3, r3, #4
 8014b20:	b2db      	uxtb	r3, r3
 8014b22:	b25a      	sxtb	r2, r3
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	3302      	adds	r3, #2
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	b29a      	uxth	r2, r3
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	889b      	ldrh	r3, [r3, #4]
 8014b38:	b21a      	sxth	r2, r3
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	3303      	adds	r3, #3
 8014b3e:	781b      	ldrb	r3, [r3, #0]
 8014b40:	021b      	lsls	r3, r3, #8
 8014b42:	b21b      	sxth	r3, r3
 8014b44:	4313      	orrs	r3, r2
 8014b46:	b21b      	sxth	r3, r3
 8014b48:	b29a      	uxth	r2, r3
 8014b4a:	683b      	ldr	r3, [r7, #0]
 8014b4c:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	791a      	ldrb	r2, [r3, #4]
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	091b      	lsrs	r3, r3, #4
 8014b5c:	b2db      	uxtb	r3, r3
 8014b5e:	f003 0307 	and.w	r3, r3, #7
 8014b62:	b2da      	uxtb	r2, r3
 8014b64:	683b      	ldr	r3, [r7, #0]
 8014b66:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014b68:	683b      	ldr	r3, [r7, #0]
 8014b6a:	781b      	ldrb	r3, [r3, #0]
 8014b6c:	f003 030f 	and.w	r3, r3, #15
 8014b70:	b2da      	uxtb	r2, r3
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8014b76:	2305      	movs	r3, #5
 8014b78:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8014b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	3714      	adds	r7, #20
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bc80      	pop	{r7}
 8014b84:	4770      	bx	lr

08014b86 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8014b86:	b5b0      	push	{r4, r5, r7, lr}
 8014b88:	b088      	sub	sp, #32
 8014b8a:	af02      	add	r7, sp, #8
 8014b8c:	60f8      	str	r0, [r7, #12]
 8014b8e:	60b9      	str	r1, [r7, #8]
 8014b90:	607a      	str	r2, [r7, #4]
 8014b92:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	791b      	ldrb	r3, [r3, #4]
 8014b98:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	799b      	ldrb	r3, [r3, #6]
 8014b9e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	79db      	ldrb	r3, [r3, #7]
 8014ba4:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	7a1b      	ldrb	r3, [r3, #8]
 8014baa:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	795b      	ldrb	r3, [r3, #5]
 8014bb0:	f083 0301 	eor.w	r3, r3, #1
 8014bb4:	b2db      	uxtb	r3, r3
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d008      	beq.n	8014bcc <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	7adb      	ldrb	r3, [r3, #11]
 8014bbe:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	7a5b      	ldrb	r3, [r3, #9]
 8014bc4:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	7a9b      	ldrb	r3, [r3, #10]
 8014bca:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014bcc:	7dfb      	ldrb	r3, [r7, #23]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d03a      	beq.n	8014c48 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	7b18      	ldrb	r0, [r3, #12]
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	6919      	ldr	r1, [r3, #16]
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8014be6:	68fa      	ldr	r2, [r7, #12]
 8014be8:	6992      	ldr	r2, [r2, #24]
 8014bea:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8014bee:	9201      	str	r2, [sp, #4]
 8014bf0:	9300      	str	r3, [sp, #0]
 8014bf2:	462b      	mov	r3, r5
 8014bf4:	4622      	mov	r2, r4
 8014bf6:	f7ff fd42 	bl	801467e <RegionCommonChanVerifyDr>
 8014bfa:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8014bfc:	f083 0301 	eor.w	r3, r3, #1
 8014c00:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d003      	beq.n	8014c0e <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8014c06:	7dfb      	ldrb	r3, [r7, #23]
 8014c08:	f023 0302 	bic.w	r3, r3, #2
 8014c0c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8014c1a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f7ff fd9f 	bl	8014762 <RegionCommonValueInRange>
 8014c24:	4603      	mov	r3, r0
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d10e      	bne.n	8014c48 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8014c30:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014c34:	429a      	cmp	r2, r3
 8014c36:	da03      	bge.n	8014c40 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	7f5b      	ldrb	r3, [r3, #29]
 8014c3c:	757b      	strb	r3, [r7, #21]
 8014c3e:	e003      	b.n	8014c48 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8014c40:	7dfb      	ldrb	r3, [r7, #23]
 8014c42:	f023 0304 	bic.w	r3, r3, #4
 8014c46:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8014c48:	7dfb      	ldrb	r3, [r7, #23]
 8014c4a:	2b07      	cmp	r3, #7
 8014c4c:	d105      	bne.n	8014c5a <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8014c4e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d101      	bne.n	8014c5a <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8014c56:	2301      	movs	r3, #1
 8014c58:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	7dba      	ldrb	r2, [r7, #22]
 8014c5e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	7d7a      	ldrb	r2, [r7, #21]
 8014c64:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8014c66:	7d3a      	ldrb	r2, [r7, #20]
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	701a      	strb	r2, [r3, #0]

    return status;
 8014c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3718      	adds	r7, #24
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014c78 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8014c78:	b480      	push	{r7}
 8014c7a:	b083      	sub	sp, #12
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	4603      	mov	r3, r0
 8014c80:	6039      	str	r1, [r7, #0]
 8014c82:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014c84:	79fb      	ldrb	r3, [r7, #7]
 8014c86:	4a06      	ldr	r2, [pc, #24]	; (8014ca0 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8014c88:	fa02 f303 	lsl.w	r3, r2, r3
 8014c8c:	461a      	mov	r2, r3
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	370c      	adds	r7, #12
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bc80      	pop	{r7}
 8014c9c:	4770      	bx	lr
 8014c9e:	bf00      	nop
 8014ca0:	000f4240 	.word	0x000f4240

08014ca4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014ca4:	b480      	push	{r7}
 8014ca6:	b083      	sub	sp, #12
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	4603      	mov	r3, r0
 8014cac:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8014cae:	79fb      	ldrb	r3, [r7, #7]
 8014cb0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014cb4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	370c      	adds	r7, #12
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bc80      	pop	{r7}
 8014cc0:	4770      	bx	lr
	...

08014cc4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	b085      	sub	sp, #20
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	607a      	str	r2, [r7, #4]
 8014cce:	603b      	str	r3, [r7, #0]
 8014cd0:	460b      	mov	r3, r1
 8014cd2:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014cd4:	7afa      	ldrb	r2, [r7, #11]
 8014cd6:	7afb      	ldrb	r3, [r7, #11]
 8014cd8:	3b04      	subs	r3, #4
 8014cda:	4619      	mov	r1, r3
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	fb03 f101 	mul.w	r1, r3, r1
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014ce8:	fb00 f303 	mul.w	r3, r0, r3
 8014cec:	440b      	add	r3, r1
 8014cee:	005b      	lsls	r3, r3, #1
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d013      	beq.n	8014d1c <RegionCommonComputeRxWindowParameters+0x58>
 8014cf4:	7afb      	ldrb	r3, [r7, #11]
 8014cf6:	3b04      	subs	r3, #4
 8014cf8:	4619      	mov	r1, r3
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	fb03 f101 	mul.w	r1, r3, r1
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014d06:	fb00 f303 	mul.w	r3, r0, r3
 8014d0a:	440b      	add	r3, r1
 8014d0c:	0059      	lsls	r1, r3, #1
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	440b      	add	r3, r1
 8014d12:	1e59      	subs	r1, r3, #1
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8014d1a:	e00f      	b.n	8014d3c <RegionCommonComputeRxWindowParameters+0x78>
 8014d1c:	7afb      	ldrb	r3, [r7, #11]
 8014d1e:	3b04      	subs	r3, #4
 8014d20:	4619      	mov	r1, r3
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	fb03 f101 	mul.w	r1, r3, r1
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014d2e:	fb00 f303 	mul.w	r3, r0, r3
 8014d32:	440b      	add	r3, r1
 8014d34:	0059      	lsls	r1, r3, #1
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	fbb1 f3f3 	udiv	r3, r1, r3
 8014d3c:	429a      	cmp	r2, r3
 8014d3e:	bf38      	it	cc
 8014d40:	461a      	movcc	r2, r3
 8014d42:	69bb      	ldr	r3, [r7, #24]
 8014d44:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	009b      	lsls	r3, r3, #2
 8014d4a:	4619      	mov	r1, r3
 8014d4c:	69bb      	ldr	r3, [r7, #24]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	68fa      	ldr	r2, [r7, #12]
 8014d52:	fb02 f303 	mul.w	r3, r2, r3
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d007      	beq.n	8014d6a <RegionCommonComputeRxWindowParameters+0xa6>
 8014d5a:	69bb      	ldr	r3, [r7, #24]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	68fa      	ldr	r2, [r7, #12]
 8014d60:	fb02 f303 	mul.w	r3, r2, r3
 8014d64:	3301      	adds	r3, #1
 8014d66:	085b      	lsrs	r3, r3, #1
 8014d68:	e005      	b.n	8014d76 <RegionCommonComputeRxWindowParameters+0xb2>
 8014d6a:	69bb      	ldr	r3, [r7, #24]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	68fa      	ldr	r2, [r7, #12]
 8014d70:	fb02 f303 	mul.w	r3, r2, r3
 8014d74:	085b      	lsrs	r3, r3, #1
 8014d76:	1acb      	subs	r3, r1, r3
 8014d78:	683a      	ldr	r2, [r7, #0]
 8014d7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014d7e:	fb01 f202 	mul.w	r2, r1, r2
 8014d82:	1a9b      	subs	r3, r3, r2
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	dd27      	ble.n	8014dd8 <RegionCommonComputeRxWindowParameters+0x114>
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	009b      	lsls	r3, r3, #2
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	69bb      	ldr	r3, [r7, #24]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	68fa      	ldr	r2, [r7, #12]
 8014d94:	fb02 f303 	mul.w	r3, r2, r3
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d007      	beq.n	8014dac <RegionCommonComputeRxWindowParameters+0xe8>
 8014d9c:	69bb      	ldr	r3, [r7, #24]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	68fa      	ldr	r2, [r7, #12]
 8014da2:	fb02 f303 	mul.w	r3, r2, r3
 8014da6:	3301      	adds	r3, #1
 8014da8:	085b      	lsrs	r3, r3, #1
 8014daa:	e005      	b.n	8014db8 <RegionCommonComputeRxWindowParameters+0xf4>
 8014dac:	69bb      	ldr	r3, [r7, #24]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	68fa      	ldr	r2, [r7, #12]
 8014db2:	fb02 f303 	mul.w	r3, r2, r3
 8014db6:	085b      	lsrs	r3, r3, #1
 8014db8:	1acb      	subs	r3, r1, r3
 8014dba:	683a      	ldr	r2, [r7, #0]
 8014dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014dc0:	fb01 f202 	mul.w	r2, r1, r2
 8014dc4:	1a9b      	subs	r3, r3, r2
 8014dc6:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8014dca:	4a19      	ldr	r2, [pc, #100]	; (8014e30 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014dcc:	fb82 1203 	smull	r1, r2, r2, r3
 8014dd0:	1192      	asrs	r2, r2, #6
 8014dd2:	17db      	asrs	r3, r3, #31
 8014dd4:	1ad3      	subs	r3, r2, r3
 8014dd6:	e024      	b.n	8014e22 <RegionCommonComputeRxWindowParameters+0x15e>
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	009b      	lsls	r3, r3, #2
 8014ddc:	4619      	mov	r1, r3
 8014dde:	69bb      	ldr	r3, [r7, #24]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	68fa      	ldr	r2, [r7, #12]
 8014de4:	fb02 f303 	mul.w	r3, r2, r3
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d007      	beq.n	8014dfc <RegionCommonComputeRxWindowParameters+0x138>
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	68fa      	ldr	r2, [r7, #12]
 8014df2:	fb02 f303 	mul.w	r3, r2, r3
 8014df6:	3301      	adds	r3, #1
 8014df8:	085b      	lsrs	r3, r3, #1
 8014dfa:	e005      	b.n	8014e08 <RegionCommonComputeRxWindowParameters+0x144>
 8014dfc:	69bb      	ldr	r3, [r7, #24]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	68fa      	ldr	r2, [r7, #12]
 8014e02:	fb02 f303 	mul.w	r3, r2, r3
 8014e06:	085b      	lsrs	r3, r3, #1
 8014e08:	1acb      	subs	r3, r1, r3
 8014e0a:	683a      	ldr	r2, [r7, #0]
 8014e0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014e10:	fb01 f202 	mul.w	r2, r1, r2
 8014e14:	1a9b      	subs	r3, r3, r2
 8014e16:	4a06      	ldr	r2, [pc, #24]	; (8014e30 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014e18:	fb82 1203 	smull	r1, r2, r2, r3
 8014e1c:	1192      	asrs	r2, r2, #6
 8014e1e:	17db      	asrs	r3, r3, #31
 8014e20:	1ad3      	subs	r3, r2, r3
 8014e22:	69fa      	ldr	r2, [r7, #28]
 8014e24:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014e26:	bf00      	nop
 8014e28:	3714      	adds	r7, #20
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bc80      	pop	{r7}
 8014e2e:	4770      	bx	lr
 8014e30:	10624dd3 	.word	0x10624dd3

08014e34 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b086      	sub	sp, #24
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	60b9      	str	r1, [r7, #8]
 8014e3e:	607a      	str	r2, [r7, #4]
 8014e40:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014e42:	2300      	movs	r3, #0
 8014e44:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e4a:	005b      	lsls	r3, r3, #1
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7eb fcbd 	bl	80007cc <__aeabi_ui2f>
 8014e52:	4603      	mov	r3, r0
 8014e54:	4619      	mov	r1, r3
 8014e56:	68b8      	ldr	r0, [r7, #8]
 8014e58:	f7eb fc06 	bl	8000668 <__aeabi_fsub>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	6879      	ldr	r1, [r7, #4]
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7eb fc01 	bl	8000668 <__aeabi_fsub>
 8014e66:	4603      	mov	r3, r0
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f7eb faf1 	bl	8000450 <__aeabi_f2d>
 8014e6e:	4602      	mov	r2, r0
 8014e70:	460b      	mov	r3, r1
 8014e72:	4610      	mov	r0, r2
 8014e74:	4619      	mov	r1, r3
 8014e76:	f006 f8c7 	bl	801b008 <floor>
 8014e7a:	4602      	mov	r2, r0
 8014e7c:	460b      	mov	r3, r1
 8014e7e:	4610      	mov	r0, r2
 8014e80:	4619      	mov	r1, r3
 8014e82:	f7eb fbc5 	bl	8000610 <__aeabi_d2iz>
 8014e86:	4603      	mov	r3, r0
 8014e88:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3718      	adds	r7, #24
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}

08014e96 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014e96:	b590      	push	{r4, r7, lr}
 8014e98:	b087      	sub	sp, #28
 8014e9a:	af00      	add	r7, sp, #0
 8014e9c:	60f8      	str	r0, [r7, #12]
 8014e9e:	60b9      	str	r1, [r7, #8]
 8014ea0:	607a      	str	r2, [r7, #4]
 8014ea2:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014eac:	2300      	movs	r3, #0
 8014eae:	757b      	strb	r3, [r7, #21]
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	753b      	strb	r3, [r7, #20]
 8014eb4:	e09c      	b.n	8014ff0 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	74fb      	strb	r3, [r7, #19]
 8014eba:	e08f      	b.n	8014fdc <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	685a      	ldr	r2, [r3, #4]
 8014ec0:	7d3b      	ldrb	r3, [r7, #20]
 8014ec2:	005b      	lsls	r3, r3, #1
 8014ec4:	4413      	add	r3, r2
 8014ec6:	881b      	ldrh	r3, [r3, #0]
 8014ec8:	461a      	mov	r2, r3
 8014eca:	7cfb      	ldrb	r3, [r7, #19]
 8014ecc:	fa42 f303 	asr.w	r3, r2, r3
 8014ed0:	f003 0301 	and.w	r3, r3, #1
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d07e      	beq.n	8014fd6 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	689a      	ldr	r2, [r3, #8]
 8014edc:	7d79      	ldrb	r1, [r7, #21]
 8014ede:	7cfb      	ldrb	r3, [r7, #19]
 8014ee0:	440b      	add	r3, r1
 8014ee2:	4619      	mov	r1, r3
 8014ee4:	460b      	mov	r3, r1
 8014ee6:	005b      	lsls	r3, r3, #1
 8014ee8:	440b      	add	r3, r1
 8014eea:	009b      	lsls	r3, r3, #2
 8014eec:	4413      	add	r3, r2
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d06b      	beq.n	8014fcc <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	781b      	ldrb	r3, [r3, #0]
 8014ef8:	f083 0301 	eor.w	r3, r3, #1
 8014efc:	b2db      	uxtb	r3, r3
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d011      	beq.n	8014f26 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d00d      	beq.n	8014f26 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	695a      	ldr	r2, [r3, #20]
 8014f0e:	7d3b      	ldrb	r3, [r7, #20]
 8014f10:	005b      	lsls	r3, r3, #1
 8014f12:	4413      	add	r3, r2
 8014f14:	881b      	ldrh	r3, [r3, #0]
 8014f16:	461a      	mov	r2, r3
 8014f18:	7cfb      	ldrb	r3, [r7, #19]
 8014f1a:	fa42 f303 	asr.w	r3, r2, r3
 8014f1e:	f003 0301 	and.w	r3, r3, #1
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d054      	beq.n	8014fd0 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	785b      	ldrb	r3, [r3, #1]
 8014f2a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	689a      	ldr	r2, [r3, #8]
 8014f30:	7d79      	ldrb	r1, [r7, #21]
 8014f32:	7cfb      	ldrb	r3, [r7, #19]
 8014f34:	440b      	add	r3, r1
 8014f36:	4619      	mov	r1, r3
 8014f38:	460b      	mov	r3, r1
 8014f3a:	005b      	lsls	r3, r3, #1
 8014f3c:	440b      	add	r3, r1
 8014f3e:	009b      	lsls	r3, r3, #2
 8014f40:	4413      	add	r3, r2
 8014f42:	7a1b      	ldrb	r3, [r3, #8]
 8014f44:	f343 0303 	sbfx	r3, r3, #0, #4
 8014f48:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014f4a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	689a      	ldr	r2, [r3, #8]
 8014f50:	7d79      	ldrb	r1, [r7, #21]
 8014f52:	7cfb      	ldrb	r3, [r7, #19]
 8014f54:	440b      	add	r3, r1
 8014f56:	4619      	mov	r1, r3
 8014f58:	460b      	mov	r3, r1
 8014f5a:	005b      	lsls	r3, r3, #1
 8014f5c:	440b      	add	r3, r1
 8014f5e:	009b      	lsls	r3, r3, #2
 8014f60:	4413      	add	r3, r2
 8014f62:	7a1b      	ldrb	r3, [r3, #8]
 8014f64:	f343 1303 	sbfx	r3, r3, #4, #4
 8014f68:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	4621      	mov	r1, r4
 8014f6e:	f7ff fbf8 	bl	8014762 <RegionCommonValueInRange>
 8014f72:	4603      	mov	r3, r0
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d02d      	beq.n	8014fd4 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	68da      	ldr	r2, [r3, #12]
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	6899      	ldr	r1, [r3, #8]
 8014f80:	7d78      	ldrb	r0, [r7, #21]
 8014f82:	7cfb      	ldrb	r3, [r7, #19]
 8014f84:	4403      	add	r3, r0
 8014f86:	4618      	mov	r0, r3
 8014f88:	4603      	mov	r3, r0
 8014f8a:	005b      	lsls	r3, r3, #1
 8014f8c:	4403      	add	r3, r0
 8014f8e:	009b      	lsls	r3, r3, #2
 8014f90:	440b      	add	r3, r1
 8014f92:	7a5b      	ldrb	r3, [r3, #9]
 8014f94:	4619      	mov	r1, r3
 8014f96:	460b      	mov	r3, r1
 8014f98:	005b      	lsls	r3, r3, #1
 8014f9a:	440b      	add	r3, r1
 8014f9c:	00db      	lsls	r3, r3, #3
 8014f9e:	4413      	add	r3, r2
 8014fa0:	7d1b      	ldrb	r3, [r3, #20]
 8014fa2:	f083 0301 	eor.w	r3, r3, #1
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d003      	beq.n	8014fb4 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014fac:	7dbb      	ldrb	r3, [r7, #22]
 8014fae:	3301      	adds	r3, #1
 8014fb0:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014fb2:	e010      	b.n	8014fd6 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014fb4:	7dfb      	ldrb	r3, [r7, #23]
 8014fb6:	1c5a      	adds	r2, r3, #1
 8014fb8:	75fa      	strb	r2, [r7, #23]
 8014fba:	461a      	mov	r2, r3
 8014fbc:	68bb      	ldr	r3, [r7, #8]
 8014fbe:	4413      	add	r3, r2
 8014fc0:	7d79      	ldrb	r1, [r7, #21]
 8014fc2:	7cfa      	ldrb	r2, [r7, #19]
 8014fc4:	440a      	add	r2, r1
 8014fc6:	b2d2      	uxtb	r2, r2
 8014fc8:	701a      	strb	r2, [r3, #0]
 8014fca:	e004      	b.n	8014fd6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014fcc:	bf00      	nop
 8014fce:	e002      	b.n	8014fd6 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014fd0:	bf00      	nop
 8014fd2:	e000      	b.n	8014fd6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014fd4:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014fd6:	7cfb      	ldrb	r3, [r7, #19]
 8014fd8:	3301      	adds	r3, #1
 8014fda:	74fb      	strb	r3, [r7, #19]
 8014fdc:	7cfb      	ldrb	r3, [r7, #19]
 8014fde:	2b0f      	cmp	r3, #15
 8014fe0:	f67f af6c 	bls.w	8014ebc <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014fe4:	7d7b      	ldrb	r3, [r7, #21]
 8014fe6:	3310      	adds	r3, #16
 8014fe8:	757b      	strb	r3, [r7, #21]
 8014fea:	7d3b      	ldrb	r3, [r7, #20]
 8014fec:	3301      	adds	r3, #1
 8014fee:	753b      	strb	r3, [r7, #20]
 8014ff0:	7d7b      	ldrb	r3, [r7, #21]
 8014ff2:	b29a      	uxth	r2, r3
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	8a1b      	ldrh	r3, [r3, #16]
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	f4ff af5c 	bcc.w	8014eb6 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	7dfa      	ldrb	r2, [r7, #23]
 8015002:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	7dba      	ldrb	r2, [r7, #22]
 8015008:	701a      	strb	r2, [r3, #0]
}
 801500a:	bf00      	nop
 801500c:	371c      	adds	r7, #28
 801500e:	46bd      	mov	sp, r7
 8015010:	bd90      	pop	{r4, r7, pc}

08015012 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8015012:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015014:	b08b      	sub	sp, #44	; 0x2c
 8015016:	af04      	add	r7, sp, #16
 8015018:	60f8      	str	r0, [r7, #12]
 801501a:	60b9      	str	r1, [r7, #8]
 801501c:	607a      	str	r2, [r7, #4]
 801501e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	4618      	mov	r0, r3
 8015026:	f005 fc6b 	bl	801a900 <UTIL_TIMER_GetElapsedTime>
 801502a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	681a      	ldr	r2, [r3, #0]
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	1ad2      	subs	r2, r2, r3
 8015034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015036:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801503a:	2201      	movs	r2, #1
 801503c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	2200      	movs	r2, #0
 8015042:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	685b      	ldr	r3, [r3, #4]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d004      	beq.n	8015056 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015050:	697a      	ldr	r2, [r7, #20]
 8015052:	429a      	cmp	r2, r3
 8015054:	d32b      	bcc.n	80150ae <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	2200      	movs	r2, #0
 801505a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	69db      	ldr	r3, [r3, #28]
 8015060:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015066:	68dd      	ldr	r5, [r3, #12]
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	7a5e      	ldrb	r6, [r3, #9]
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	7d1b      	ldrb	r3, [r3, #20]
 8015076:	68fa      	ldr	r2, [r7, #12]
 8015078:	6992      	ldr	r2, [r2, #24]
 801507a:	9203      	str	r2, [sp, #12]
 801507c:	68fa      	ldr	r2, [r7, #12]
 801507e:	f10d 0e04 	add.w	lr, sp, #4
 8015082:	320c      	adds	r2, #12
 8015084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015088:	e88e 0003 	stmia.w	lr, {r0, r1}
 801508c:	9300      	str	r3, [sp, #0]
 801508e:	4663      	mov	r3, ip
 8015090:	4632      	mov	r2, r6
 8015092:	4629      	mov	r1, r5
 8015094:	4620      	mov	r0, r4
 8015096:	f7ff fc35 	bl	8014904 <RegionCommonUpdateBandTimeOff>
 801509a:	4602      	mov	r2, r0
 801509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801509e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	69d8      	ldr	r0, [r3, #28]
 80150a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150a6:	683a      	ldr	r2, [r7, #0]
 80150a8:	6879      	ldr	r1, [r7, #4]
 80150aa:	f7ff fef4 	bl	8014e96 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	781b      	ldrb	r3, [r3, #0]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d004      	beq.n	80150c0 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80150b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150b8:	2200      	movs	r2, #0
 80150ba:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80150bc:	2300      	movs	r3, #0
 80150be:	e006      	b.n	80150ce <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80150c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150c2:	781b      	ldrb	r3, [r3, #0]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d001      	beq.n	80150cc <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80150c8:	230b      	movs	r3, #11
 80150ca:	e000      	b.n	80150ce <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80150cc:	230c      	movs	r3, #12
    }
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	371c      	adds	r7, #28
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150d6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80150d6:	b5b0      	push	{r4, r5, r7, lr}
 80150d8:	b086      	sub	sp, #24
 80150da:	af02      	add	r7, sp, #8
 80150dc:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	781b      	ldrb	r3, [r3, #0]
 80150e2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	f993 2000 	ldrsb.w	r2, [r3]
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80150f0:	429a      	cmp	r2, r3
 80150f2:	d103      	bne.n	80150fc <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80150fa:	e026      	b.n	801514a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80150fc:	7bfb      	ldrb	r3, [r7, #15]
 80150fe:	3b01      	subs	r3, #1
 8015100:	b2db      	uxtb	r3, r3
 8015102:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801510a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801510e:	429a      	cmp	r2, r3
 8015110:	d019      	beq.n	8015146 <RegionCommonGetNextLowerTxDr+0x70>
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	78d8      	ldrb	r0, [r3, #3]
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6859      	ldr	r1, [r3, #4]
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015126:	687a      	ldr	r2, [r7, #4]
 8015128:	6892      	ldr	r2, [r2, #8]
 801512a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801512e:	9201      	str	r2, [sp, #4]
 8015130:	9300      	str	r3, [sp, #0]
 8015132:	462b      	mov	r3, r5
 8015134:	4622      	mov	r2, r4
 8015136:	f7ff faa2 	bl	801467e <RegionCommonChanVerifyDr>
 801513a:	4603      	mov	r3, r0
 801513c:	f083 0301 	eor.w	r3, r3, #1
 8015140:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8015142:	2b00      	cmp	r3, #0
 8015144:	d1da      	bne.n	80150fc <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8015146:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801514a:	4618      	mov	r0, r3
 801514c:	3710      	adds	r7, #16
 801514e:	46bd      	mov	sp, r7
 8015150:	bdb0      	pop	{r4, r5, r7, pc}

08015152 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8015152:	b480      	push	{r7}
 8015154:	b083      	sub	sp, #12
 8015156:	af00      	add	r7, sp, #0
 8015158:	4603      	mov	r3, r0
 801515a:	460a      	mov	r2, r1
 801515c:	71fb      	strb	r3, [r7, #7]
 801515e:	4613      	mov	r3, r2
 8015160:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8015162:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801516a:	4293      	cmp	r3, r2
 801516c:	bfb8      	it	lt
 801516e:	4613      	movlt	r3, r2
 8015170:	b25b      	sxtb	r3, r3
}
 8015172:	4618      	mov	r0, r3
 8015174:	370c      	adds	r7, #12
 8015176:	46bd      	mov	sp, r7
 8015178:	bc80      	pop	{r7}
 801517a:	4770      	bx	lr

0801517c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801517c:	b480      	push	{r7}
 801517e:	b083      	sub	sp, #12
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
 8015184:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	009b      	lsls	r3, r3, #2
 801518a:	683a      	ldr	r2, [r7, #0]
 801518c:	4413      	add	r3, r2
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	4a07      	ldr	r2, [pc, #28]	; (80151b0 <RegionCommonGetBandwidth+0x34>)
 8015192:	4293      	cmp	r3, r2
 8015194:	d004      	beq.n	80151a0 <RegionCommonGetBandwidth+0x24>
 8015196:	4a07      	ldr	r2, [pc, #28]	; (80151b4 <RegionCommonGetBandwidth+0x38>)
 8015198:	4293      	cmp	r3, r2
 801519a:	d003      	beq.n	80151a4 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801519c:	2300      	movs	r3, #0
 801519e:	e002      	b.n	80151a6 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80151a0:	2301      	movs	r3, #1
 80151a2:	e000      	b.n	80151a6 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80151a4:	2302      	movs	r3, #2
    }
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	370c      	adds	r7, #12
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bc80      	pop	{r7}
 80151ae:	4770      	bx	lr
 80151b0:	0003d090 	.word	0x0003d090
 80151b4:	0007a120 	.word	0x0007a120

080151b8 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80151b8:	b5b0      	push	{r4, r5, r7, lr}
 80151ba:	b08c      	sub	sp, #48	; 0x30
 80151bc:	af04      	add	r7, sp, #16
 80151be:	4603      	mov	r3, r0
 80151c0:	6039      	str	r1, [r7, #0]
 80151c2:	71fb      	strb	r3, [r7, #7]
 80151c4:	4613      	mov	r3, r2
 80151c6:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 80151c8:	4b17      	ldr	r3, [pc, #92]	; (8015228 <RegionCommonRxConfigPrint+0x70>)
 80151ca:	f107 0408 	add.w	r4, r7, #8
 80151ce:	461d      	mov	r5, r3
 80151d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151d8:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 80151dc:	79fb      	ldrb	r3, [r7, #7]
 80151de:	2b05      	cmp	r3, #5
 80151e0:	d813      	bhi.n	801520a <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 80151e2:	79fb      	ldrb	r3, [r7, #7]
 80151e4:	009b      	lsls	r3, r3, #2
 80151e6:	f107 0220 	add.w	r2, r7, #32
 80151ea:	4413      	add	r3, r2
 80151ec:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80151f0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80151f4:	9202      	str	r2, [sp, #8]
 80151f6:	683a      	ldr	r2, [r7, #0]
 80151f8:	9201      	str	r2, [sp, #4]
 80151fa:	9300      	str	r3, [sp, #0]
 80151fc:	4b0b      	ldr	r3, [pc, #44]	; (801522c <RegionCommonRxConfigPrint+0x74>)
 80151fe:	2201      	movs	r2, #1
 8015200:	2100      	movs	r1, #0
 8015202:	2002      	movs	r0, #2
 8015204:	f005 fc5a 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8015208:	e00a      	b.n	8015220 <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801520a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801520e:	9301      	str	r3, [sp, #4]
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	9300      	str	r3, [sp, #0]
 8015214:	4b06      	ldr	r3, [pc, #24]	; (8015230 <RegionCommonRxConfigPrint+0x78>)
 8015216:	2201      	movs	r2, #1
 8015218:	2100      	movs	r1, #0
 801521a:	2002      	movs	r0, #2
 801521c:	f005 fc4e 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
}
 8015220:	bf00      	nop
 8015222:	3720      	adds	r7, #32
 8015224:	46bd      	mov	sp, r7
 8015226:	bdb0      	pop	{r4, r5, r7, pc}
 8015228:	0801b8f8 	.word	0x0801b8f8
 801522c:	0801b8bc 	.word	0x0801b8bc
 8015230:	0801b8dc 	.word	0x0801b8dc

08015234 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b084      	sub	sp, #16
 8015238:	af02      	add	r7, sp, #8
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	460b      	mov	r3, r1
 801523e:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015244:	9301      	str	r3, [sp, #4]
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	9300      	str	r3, [sp, #0]
 801524a:	4b05      	ldr	r3, [pc, #20]	; (8015260 <RegionCommonTxConfigPrint+0x2c>)
 801524c:	2201      	movs	r2, #1
 801524e:	2100      	movs	r1, #0
 8015250:	2002      	movs	r0, #2
 8015252:	f005 fc33 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
}
 8015256:	bf00      	nop
 8015258:	3708      	adds	r7, #8
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}
 801525e:	bf00      	nop
 8015260:	0801b910 	.word	0x0801b910

08015264 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b082      	sub	sp, #8
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
 801526c:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801526e:	4b2d      	ldr	r3, [pc, #180]	; (8015324 <VerifyRfFreq+0xc0>)
 8015270:	6a1b      	ldr	r3, [r3, #32]
 8015272:	6878      	ldr	r0, [r7, #4]
 8015274:	4798      	blx	r3
 8015276:	4603      	mov	r3, r0
 8015278:	f083 0301 	eor.w	r3, r3, #1
 801527c:	b2db      	uxtb	r3, r3
 801527e:	2b00      	cmp	r3, #0
 8015280:	d001      	beq.n	8015286 <VerifyRfFreq+0x22>
    {
        return false;
 8015282:	2300      	movs	r3, #0
 8015284:	e04a      	b.n	801531c <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	4a27      	ldr	r2, [pc, #156]	; (8015328 <VerifyRfFreq+0xc4>)
 801528a:	4293      	cmp	r3, r2
 801528c:	d307      	bcc.n	801529e <VerifyRfFreq+0x3a>
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	4a26      	ldr	r2, [pc, #152]	; (801532c <VerifyRfFreq+0xc8>)
 8015292:	4293      	cmp	r3, r2
 8015294:	d803      	bhi.n	801529e <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8015296:	683b      	ldr	r3, [r7, #0]
 8015298:	2202      	movs	r2, #2
 801529a:	701a      	strb	r2, [r3, #0]
 801529c:	e03d      	b.n	801531a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	4a22      	ldr	r2, [pc, #136]	; (801532c <VerifyRfFreq+0xc8>)
 80152a2:	4293      	cmp	r3, r2
 80152a4:	d907      	bls.n	80152b6 <VerifyRfFreq+0x52>
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	4a21      	ldr	r2, [pc, #132]	; (8015330 <VerifyRfFreq+0xcc>)
 80152aa:	4293      	cmp	r3, r2
 80152ac:	d803      	bhi.n	80152b6 <VerifyRfFreq+0x52>
    {
        *band = 0;
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	2200      	movs	r2, #0
 80152b2:	701a      	strb	r2, [r3, #0]
 80152b4:	e031      	b.n	801531a <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	4a1d      	ldr	r2, [pc, #116]	; (8015330 <VerifyRfFreq+0xcc>)
 80152ba:	4293      	cmp	r3, r2
 80152bc:	d907      	bls.n	80152ce <VerifyRfFreq+0x6a>
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	4a1c      	ldr	r2, [pc, #112]	; (8015334 <VerifyRfFreq+0xd0>)
 80152c2:	4293      	cmp	r3, r2
 80152c4:	d803      	bhi.n	80152ce <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	2201      	movs	r2, #1
 80152ca:	701a      	strb	r2, [r3, #0]
 80152cc:	e025      	b.n	801531a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	4a19      	ldr	r2, [pc, #100]	; (8015338 <VerifyRfFreq+0xd4>)
 80152d2:	4293      	cmp	r3, r2
 80152d4:	d907      	bls.n	80152e6 <VerifyRfFreq+0x82>
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	4a18      	ldr	r2, [pc, #96]	; (801533c <VerifyRfFreq+0xd8>)
 80152da:	4293      	cmp	r3, r2
 80152dc:	d803      	bhi.n	80152e6 <VerifyRfFreq+0x82>
    {
        *band = 5;
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	2205      	movs	r2, #5
 80152e2:	701a      	strb	r2, [r3, #0]
 80152e4:	e019      	b.n	801531a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	4a15      	ldr	r2, [pc, #84]	; (8015340 <VerifyRfFreq+0xdc>)
 80152ea:	4293      	cmp	r3, r2
 80152ec:	d907      	bls.n	80152fe <VerifyRfFreq+0x9a>
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	4a14      	ldr	r2, [pc, #80]	; (8015344 <VerifyRfFreq+0xe0>)
 80152f2:	4293      	cmp	r3, r2
 80152f4:	d803      	bhi.n	80152fe <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80152f6:	683b      	ldr	r3, [r7, #0]
 80152f8:	2203      	movs	r2, #3
 80152fa:	701a      	strb	r2, [r3, #0]
 80152fc:	e00d      	b.n	801531a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	4a11      	ldr	r2, [pc, #68]	; (8015348 <VerifyRfFreq+0xe4>)
 8015302:	4293      	cmp	r3, r2
 8015304:	d307      	bcc.n	8015316 <VerifyRfFreq+0xb2>
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	4a10      	ldr	r2, [pc, #64]	; (801534c <VerifyRfFreq+0xe8>)
 801530a:	4293      	cmp	r3, r2
 801530c:	d803      	bhi.n	8015316 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801530e:	683b      	ldr	r3, [r7, #0]
 8015310:	2204      	movs	r2, #4
 8015312:	701a      	strb	r2, [r3, #0]
 8015314:	e001      	b.n	801531a <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8015316:	2300      	movs	r3, #0
 8015318:	e000      	b.n	801531c <VerifyRfFreq+0xb8>
    }
    return true;
 801531a:	2301      	movs	r3, #1
}
 801531c:	4618      	mov	r0, r3
 801531e:	3708      	adds	r7, #8
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	0801bed4 	.word	0x0801bed4
 8015328:	337055c0 	.word	0x337055c0
 801532c:	338eda3f 	.word	0x338eda3f
 8015330:	33bca100 	.word	0x33bca100
 8015334:	33c5c8c0 	.word	0x33c5c8c0
 8015338:	33c74f5f 	.word	0x33c74f5f
 801533c:	33cef080 	.word	0x33cef080
 8015340:	33d1fdbf 	.word	0x33d1fdbf
 8015344:	33d5ce50 	.word	0x33d5ce50
 8015348:	33d691a0 	.word	0x33d691a0
 801534c:	33db2580 	.word	0x33db2580

08015350 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015350:	b590      	push	{r4, r7, lr}
 8015352:	b08b      	sub	sp, #44	; 0x2c
 8015354:	af04      	add	r7, sp, #16
 8015356:	4603      	mov	r3, r0
 8015358:	460a      	mov	r2, r1
 801535a:	71fb      	strb	r3, [r7, #7]
 801535c:	4613      	mov	r3, r2
 801535e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8015360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015364:	4a1f      	ldr	r2, [pc, #124]	; (80153e4 <GetTimeOnAir+0x94>)
 8015366:	5cd3      	ldrb	r3, [r2, r3]
 8015368:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801536a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801536e:	491e      	ldr	r1, [pc, #120]	; (80153e8 <GetTimeOnAir+0x98>)
 8015370:	4618      	mov	r0, r3
 8015372:	f7ff ff03 	bl	801517c <RegionCommonGetBandwidth>
 8015376:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015378:	2300      	movs	r3, #0
 801537a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 801537c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015380:	2b07      	cmp	r3, #7
 8015382:	d118      	bne.n	80153b6 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015384:	4b19      	ldr	r3, [pc, #100]	; (80153ec <GetTimeOnAir+0x9c>)
 8015386:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015388:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801538c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015390:	fb02 f303 	mul.w	r3, r2, r3
 8015394:	4619      	mov	r1, r3
 8015396:	88bb      	ldrh	r3, [r7, #4]
 8015398:	b2db      	uxtb	r3, r3
 801539a:	2201      	movs	r2, #1
 801539c:	9203      	str	r2, [sp, #12]
 801539e:	9302      	str	r3, [sp, #8]
 80153a0:	2300      	movs	r3, #0
 80153a2:	9301      	str	r3, [sp, #4]
 80153a4:	2305      	movs	r3, #5
 80153a6:	9300      	str	r3, [sp, #0]
 80153a8:	2300      	movs	r3, #0
 80153aa:	460a      	mov	r2, r1
 80153ac:	68f9      	ldr	r1, [r7, #12]
 80153ae:	2000      	movs	r0, #0
 80153b0:	47a0      	blx	r4
 80153b2:	6178      	str	r0, [r7, #20]
 80153b4:	e011      	b.n	80153da <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80153b6:	4b0d      	ldr	r3, [pc, #52]	; (80153ec <GetTimeOnAir+0x9c>)
 80153b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80153ba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80153be:	88bb      	ldrh	r3, [r7, #4]
 80153c0:	b2db      	uxtb	r3, r3
 80153c2:	2101      	movs	r1, #1
 80153c4:	9103      	str	r1, [sp, #12]
 80153c6:	9302      	str	r3, [sp, #8]
 80153c8:	2300      	movs	r3, #0
 80153ca:	9301      	str	r3, [sp, #4]
 80153cc:	2308      	movs	r3, #8
 80153ce:	9300      	str	r3, [sp, #0]
 80153d0:	2301      	movs	r3, #1
 80153d2:	68f9      	ldr	r1, [r7, #12]
 80153d4:	2001      	movs	r0, #1
 80153d6:	47a0      	blx	r4
 80153d8:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80153da:	697b      	ldr	r3, [r7, #20]
}
 80153dc:	4618      	mov	r0, r3
 80153de:	371c      	adds	r7, #28
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd90      	pop	{r4, r7, pc}
 80153e4:	0801be9c 	.word	0x0801be9c
 80153e8:	0801bea4 	.word	0x0801bea4
 80153ec:	0801bed4 	.word	0x0801bed4

080153f0 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b088      	sub	sp, #32
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80153f8:	2300      	movs	r3, #0
 80153fa:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	781b      	ldrb	r3, [r3, #0]
 8015400:	3b01      	subs	r3, #1
 8015402:	2b38      	cmp	r3, #56	; 0x38
 8015404:	f200 8125 	bhi.w	8015652 <RegionEU868GetPhyParam+0x262>
 8015408:	a201      	add	r2, pc, #4	; (adr r2, 8015410 <RegionEU868GetPhyParam+0x20>)
 801540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801540e:	bf00      	nop
 8015410:	080154f5 	.word	0x080154f5
 8015414:	080154fb 	.word	0x080154fb
 8015418:	08015653 	.word	0x08015653
 801541c:	08015653 	.word	0x08015653
 8015420:	08015653 	.word	0x08015653
 8015424:	08015501 	.word	0x08015501
 8015428:	08015653 	.word	0x08015653
 801542c:	08015539 	.word	0x08015539
 8015430:	08015653 	.word	0x08015653
 8015434:	0801553f 	.word	0x0801553f
 8015438:	08015545 	.word	0x08015545
 801543c:	0801554b 	.word	0x0801554b
 8015440:	08015551 	.word	0x08015551
 8015444:	08015561 	.word	0x08015561
 8015448:	08015571 	.word	0x08015571
 801544c:	08015577 	.word	0x08015577
 8015450:	0801557f 	.word	0x0801557f
 8015454:	08015587 	.word	0x08015587
 8015458:	0801558f 	.word	0x0801558f
 801545c:	08015597 	.word	0x08015597
 8015460:	0801559f 	.word	0x0801559f
 8015464:	080155a7 	.word	0x080155a7
 8015468:	080155bb 	.word	0x080155bb
 801546c:	080155c1 	.word	0x080155c1
 8015470:	080155c7 	.word	0x080155c7
 8015474:	080155cd 	.word	0x080155cd
 8015478:	080155d7 	.word	0x080155d7
 801547c:	080155e1 	.word	0x080155e1
 8015480:	080155e7 	.word	0x080155e7
 8015484:	080155ef 	.word	0x080155ef
 8015488:	080155f5 	.word	0x080155f5
 801548c:	080155fb 	.word	0x080155fb
 8015490:	08015603 	.word	0x08015603
 8015494:	08015507 	.word	0x08015507
 8015498:	08015653 	.word	0x08015653
 801549c:	08015653 	.word	0x08015653
 80154a0:	08015653 	.word	0x08015653
 80154a4:	08015653 	.word	0x08015653
 80154a8:	08015653 	.word	0x08015653
 80154ac:	08015653 	.word	0x08015653
 80154b0:	08015653 	.word	0x08015653
 80154b4:	08015653 	.word	0x08015653
 80154b8:	08015653 	.word	0x08015653
 80154bc:	08015653 	.word	0x08015653
 80154c0:	08015653 	.word	0x08015653
 80154c4:	08015653 	.word	0x08015653
 80154c8:	08015653 	.word	0x08015653
 80154cc:	08015609 	.word	0x08015609
 80154d0:	0801560f 	.word	0x0801560f
 80154d4:	0801561d 	.word	0x0801561d
 80154d8:	08015653 	.word	0x08015653
 80154dc:	08015653 	.word	0x08015653
 80154e0:	08015623 	.word	0x08015623
 80154e4:	08015629 	.word	0x08015629
 80154e8:	08015653 	.word	0x08015653
 80154ec:	0801562f 	.word	0x0801562f
 80154f0:	0801563f 	.word	0x0801563f
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80154f4:	2300      	movs	r3, #0
 80154f6:	61bb      	str	r3, [r7, #24]
            break;
 80154f8:	e0ac      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80154fa:	2303      	movs	r3, #3
 80154fc:	61bb      	str	r3, [r7, #24]
            break;
 80154fe:	e0a9      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8015500:	2303      	movs	r3, #3
 8015502:	61bb      	str	r3, [r7, #24]
            break;
 8015504:	e0a6      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801550c:	733b      	strb	r3, [r7, #12]
 801550e:	2307      	movs	r3, #7
 8015510:	737b      	strb	r3, [r7, #13]
 8015512:	2303      	movs	r3, #3
 8015514:	73bb      	strb	r3, [r7, #14]
 8015516:	2310      	movs	r3, #16
 8015518:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801551a:	4b52      	ldr	r3, [pc, #328]	; (8015664 <RegionEU868GetPhyParam+0x274>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015520:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015522:	4b50      	ldr	r3, [pc, #320]	; (8015664 <RegionEU868GetPhyParam+0x274>)
 8015524:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015526:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015528:	f107 030c 	add.w	r3, r7, #12
 801552c:	4618      	mov	r0, r3
 801552e:	f7ff fdd2 	bl	80150d6 <RegionCommonGetNextLowerTxDr>
 8015532:	4603      	mov	r3, r0
 8015534:	61bb      	str	r3, [r7, #24]
            break;
 8015536:	e08d      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8015538:	2300      	movs	r3, #0
 801553a:	61bb      	str	r3, [r7, #24]
            break;
 801553c:	e08a      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801553e:	2300      	movs	r3, #0
 8015540:	61bb      	str	r3, [r7, #24]
            break;
 8015542:	e087      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015544:	2340      	movs	r3, #64	; 0x40
 8015546:	61bb      	str	r3, [r7, #24]
            break;
 8015548:	e084      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801554a:	2320      	movs	r3, #32
 801554c:	61bb      	str	r3, [r7, #24]
            break;
 801554e:	e081      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015556:	461a      	mov	r2, r3
 8015558:	4b43      	ldr	r3, [pc, #268]	; (8015668 <RegionEU868GetPhyParam+0x278>)
 801555a:	5c9b      	ldrb	r3, [r3, r2]
 801555c:	61bb      	str	r3, [r7, #24]
            break;
 801555e:	e079      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015566:	461a      	mov	r2, r3
 8015568:	4b40      	ldr	r3, [pc, #256]	; (801566c <RegionEU868GetPhyParam+0x27c>)
 801556a:	5c9b      	ldrb	r3, [r3, r2]
 801556c:	61bb      	str	r3, [r7, #24]
            break;
 801556e:	e071      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8015570:	2301      	movs	r3, #1
 8015572:	61bb      	str	r3, [r7, #24]
            break;
 8015574:	e06e      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8015576:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801557a:	61bb      	str	r3, [r7, #24]
            break;
 801557c:	e06a      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801557e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015582:	61bb      	str	r3, [r7, #24]
            break;
 8015584:	e066      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015586:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801558a:	61bb      	str	r3, [r7, #24]
            break;
 801558c:	e062      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801558e:	f241 3388 	movw	r3, #5000	; 0x1388
 8015592:	61bb      	str	r3, [r7, #24]
            break;
 8015594:	e05e      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015596:	f241 7370 	movw	r3, #6000	; 0x1770
 801559a:	61bb      	str	r3, [r7, #24]
            break;
 801559c:	e05a      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801559e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80155a2:	61bb      	str	r3, [r7, #24]
            break;
 80155a4:	e056      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80155a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80155aa:	4831      	ldr	r0, [pc, #196]	; (8015670 <RegionEU868GetPhyParam+0x280>)
 80155ac:	f001 f874 	bl	8016698 <randr>
 80155b0:	4603      	mov	r3, r0
 80155b2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80155b6:	61bb      	str	r3, [r7, #24]
            break;
 80155b8:	e04c      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80155ba:	2300      	movs	r3, #0
 80155bc:	61bb      	str	r3, [r7, #24]
            break;
 80155be:	e049      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80155c0:	4b2c      	ldr	r3, [pc, #176]	; (8015674 <RegionEU868GetPhyParam+0x284>)
 80155c2:	61bb      	str	r3, [r7, #24]
            break;
 80155c4:	e046      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80155c6:	2300      	movs	r3, #0
 80155c8:	61bb      	str	r3, [r7, #24]
            break;
 80155ca:	e043      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80155cc:	4b25      	ldr	r3, [pc, #148]	; (8015664 <RegionEU868GetPhyParam+0x274>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	33c0      	adds	r3, #192	; 0xc0
 80155d2:	61bb      	str	r3, [r7, #24]
            break;
 80155d4:	e03e      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80155d6:	4b23      	ldr	r3, [pc, #140]	; (8015664 <RegionEU868GetPhyParam+0x274>)
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	33c2      	adds	r3, #194	; 0xc2
 80155dc:	61bb      	str	r3, [r7, #24]
            break;
 80155de:	e039      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80155e0:	2310      	movs	r3, #16
 80155e2:	61bb      	str	r3, [r7, #24]
            break;
 80155e4:	e036      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80155e6:	4b1f      	ldr	r3, [pc, #124]	; (8015664 <RegionEU868GetPhyParam+0x274>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	61bb      	str	r3, [r7, #24]
            break;
 80155ec:	e032      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80155ee:	2300      	movs	r3, #0
 80155f0:	61bb      	str	r3, [r7, #24]
            break;
 80155f2:	e02f      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80155f4:	2300      	movs	r3, #0
 80155f6:	61bb      	str	r3, [r7, #24]
            break;
 80155f8:	e02c      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80155fa:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80155fe:	61bb      	str	r3, [r7, #24]
            break;
 8015600:	e028      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8015602:	4b1d      	ldr	r3, [pc, #116]	; (8015678 <RegionEU868GetPhyParam+0x288>)
 8015604:	61bb      	str	r3, [r7, #24]
            break;
 8015606:	e025      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015608:	4b1a      	ldr	r3, [pc, #104]	; (8015674 <RegionEU868GetPhyParam+0x284>)
 801560a:	61bb      	str	r3, [r7, #24]
            break;
 801560c:	e022      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801560e:	2311      	movs	r3, #17
 8015610:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8015612:	2302      	movs	r3, #2
 8015614:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015616:	2300      	movs	r3, #0
 8015618:	76bb      	strb	r3, [r7, #26]
            break;
 801561a:	e01b      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801561c:	2303      	movs	r3, #3
 801561e:	61bb      	str	r3, [r7, #24]
            break;
 8015620:	e018      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015622:	4b14      	ldr	r3, [pc, #80]	; (8015674 <RegionEU868GetPhyParam+0x284>)
 8015624:	61bb      	str	r3, [r7, #24]
            break;
 8015626:	e015      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015628:	2303      	movs	r3, #3
 801562a:	61bb      	str	r3, [r7, #24]
            break;
 801562c:	e012      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015634:	461a      	mov	r2, r3
 8015636:	4b11      	ldr	r3, [pc, #68]	; (801567c <RegionEU868GetPhyParam+0x28c>)
 8015638:	5c9b      	ldrb	r3, [r3, r2]
 801563a:	61bb      	str	r3, [r7, #24]
            break;
 801563c:	e00a      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015644:	490e      	ldr	r1, [pc, #56]	; (8015680 <RegionEU868GetPhyParam+0x290>)
 8015646:	4618      	mov	r0, r3
 8015648:	f7ff fd98 	bl	801517c <RegionCommonGetBandwidth>
 801564c:	4603      	mov	r3, r0
 801564e:	61bb      	str	r3, [r7, #24]
            break;
 8015650:	e000      	b.n	8015654 <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 8015652:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	61fb      	str	r3, [r7, #28]
 8015658:	2300      	movs	r3, #0
 801565a:	69fb      	ldr	r3, [r7, #28]
}
 801565c:	4618      	mov	r0, r3
 801565e:	3720      	adds	r7, #32
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}
 8015664:	20000ecc 	.word	0x20000ecc
 8015668:	0801bec4 	.word	0x0801bec4
 801566c:	0801becc 	.word	0x0801becc
 8015670:	fffffc18 	.word	0xfffffc18
 8015674:	33d3e608 	.word	0x33d3e608
 8015678:	4009999a 	.word	0x4009999a
 801567c:	0801be9c 	.word	0x0801be9c
 8015680:	0801bea4 	.word	0x0801bea4

08015684 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015684:	b590      	push	{r4, r7, lr}
 8015686:	b085      	sub	sp, #20
 8015688:	af02      	add	r7, sp, #8
 801568a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801568c:	4b11      	ldr	r3, [pc, #68]	; (80156d4 <RegionEU868SetBandTxDone+0x50>)
 801568e:	681a      	ldr	r2, [r3, #0]
 8015690:	4b11      	ldr	r3, [pc, #68]	; (80156d8 <RegionEU868SetBandTxDone+0x54>)
 8015692:	6819      	ldr	r1, [r3, #0]
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	781b      	ldrb	r3, [r3, #0]
 8015698:	4618      	mov	r0, r3
 801569a:	4603      	mov	r3, r0
 801569c:	005b      	lsls	r3, r3, #1
 801569e:	4403      	add	r3, r0
 80156a0:	009b      	lsls	r3, r3, #2
 80156a2:	440b      	add	r3, r1
 80156a4:	3309      	adds	r3, #9
 80156a6:	781b      	ldrb	r3, [r3, #0]
 80156a8:	4619      	mov	r1, r3
 80156aa:	460b      	mov	r3, r1
 80156ac:	005b      	lsls	r3, r3, #1
 80156ae:	440b      	add	r3, r1
 80156b0:	00db      	lsls	r3, r3, #3
 80156b2:	18d0      	adds	r0, r2, r3
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	6899      	ldr	r1, [r3, #8]
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	785c      	ldrb	r4, [r3, #1]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	691a      	ldr	r2, [r3, #16]
 80156c0:	9200      	str	r2, [sp, #0]
 80156c2:	68db      	ldr	r3, [r3, #12]
 80156c4:	4622      	mov	r2, r4
 80156c6:	f7ff f8ef 	bl	80148a8 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 80156ca:	bf00      	nop
 80156cc:	370c      	adds	r7, #12
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd90      	pop	{r4, r7, pc}
 80156d2:	bf00      	nop
 80156d4:	20000ec8 	.word	0x20000ec8
 80156d8:	20000ecc 	.word	0x20000ecc

080156dc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b0b0      	sub	sp, #192	; 0xc0
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80156e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80156e8:	2290      	movs	r2, #144	; 0x90
 80156ea:	2100      	movs	r1, #0
 80156ec:	4618      	mov	r0, r3
 80156ee:	f005 fc83 	bl	801aff8 <memset>
 80156f2:	2364      	movs	r3, #100	; 0x64
 80156f4:	863b      	strh	r3, [r7, #48]	; 0x30
 80156f6:	2364      	movs	r3, #100	; 0x64
 80156f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80156fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015700:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8015704:	230a      	movs	r3, #10
 8015706:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801570a:	2364      	movs	r3, #100	; 0x64
 801570c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8015710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015714:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	7a1b      	ldrb	r3, [r3, #8]
 801571c:	2b02      	cmp	r3, #2
 801571e:	d05c      	beq.n	80157da <RegionEU868InitDefaults+0xfe>
 8015720:	2b02      	cmp	r3, #2
 8015722:	dc69      	bgt.n	80157f8 <RegionEU868InitDefaults+0x11c>
 8015724:	2b00      	cmp	r3, #0
 8015726:	d002      	beq.n	801572e <RegionEU868InitDefaults+0x52>
 8015728:	2b01      	cmp	r3, #1
 801572a:	d03e      	beq.n	80157aa <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801572c:	e064      	b.n	80157f8 <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d061      	beq.n	80157fa <RegionEU868InitDefaults+0x11e>
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	685b      	ldr	r3, [r3, #4]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d05d      	beq.n	80157fa <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	4a2f      	ldr	r2, [pc, #188]	; (8015800 <RegionEU868InitDefaults+0x124>)
 8015744:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	685b      	ldr	r3, [r3, #4]
 801574a:	4a2e      	ldr	r2, [pc, #184]	; (8015804 <RegionEU868InitDefaults+0x128>)
 801574c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801574e:	4b2c      	ldr	r3, [pc, #176]	; (8015800 <RegionEU868InitDefaults+0x124>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	4618      	mov	r0, r3
 8015754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015758:	2290      	movs	r2, #144	; 0x90
 801575a:	4619      	mov	r1, r3
 801575c:	f000 ffb3 	bl	80166c6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8015760:	4b28      	ldr	r3, [pc, #160]	; (8015804 <RegionEU868InitDefaults+0x128>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	4a28      	ldr	r2, [pc, #160]	; (8015808 <RegionEU868InitDefaults+0x12c>)
 8015766:	ca07      	ldmia	r2, {r0, r1, r2}
 8015768:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801576c:	4b25      	ldr	r3, [pc, #148]	; (8015804 <RegionEU868InitDefaults+0x128>)
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	4a26      	ldr	r2, [pc, #152]	; (801580c <RegionEU868InitDefaults+0x130>)
 8015772:	330c      	adds	r3, #12
 8015774:	ca07      	ldmia	r2, {r0, r1, r2}
 8015776:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801577a:	4b22      	ldr	r3, [pc, #136]	; (8015804 <RegionEU868InitDefaults+0x128>)
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	4a24      	ldr	r2, [pc, #144]	; (8015810 <RegionEU868InitDefaults+0x134>)
 8015780:	3318      	adds	r3, #24
 8015782:	ca07      	ldmia	r2, {r0, r1, r2}
 8015784:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015788:	4b1e      	ldr	r3, [pc, #120]	; (8015804 <RegionEU868InitDefaults+0x128>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	2207      	movs	r2, #7
 801578e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015792:	4b1c      	ldr	r3, [pc, #112]	; (8015804 <RegionEU868InitDefaults+0x128>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 801579a:	4b1a      	ldr	r3, [pc, #104]	; (8015804 <RegionEU868InitDefaults+0x128>)
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	33c2      	adds	r3, #194	; 0xc2
 80157a0:	2201      	movs	r2, #1
 80157a2:	4619      	mov	r1, r3
 80157a4:	f7ff f85a 	bl	801485c <RegionCommonChanMaskCopy>
 80157a8:	e027      	b.n	80157fa <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80157aa:	4b16      	ldr	r3, [pc, #88]	; (8015804 <RegionEU868InitDefaults+0x128>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	2200      	movs	r2, #0
 80157b0:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80157b2:	4b14      	ldr	r3, [pc, #80]	; (8015804 <RegionEU868InitDefaults+0x128>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	2200      	movs	r2, #0
 80157b8:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80157ba:	4b12      	ldr	r3, [pc, #72]	; (8015804 <RegionEU868InitDefaults+0x128>)
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	2200      	movs	r2, #0
 80157c0:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80157c2:	4b10      	ldr	r3, [pc, #64]	; (8015804 <RegionEU868InitDefaults+0x128>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80157ca:	4b0e      	ldr	r3, [pc, #56]	; (8015804 <RegionEU868InitDefaults+0x128>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	33c2      	adds	r3, #194	; 0xc2
 80157d0:	2201      	movs	r2, #1
 80157d2:	4619      	mov	r1, r3
 80157d4:	f7ff f842 	bl	801485c <RegionCommonChanMaskCopy>
            break;
 80157d8:	e00f      	b.n	80157fa <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80157da:	4b0a      	ldr	r3, [pc, #40]	; (8015804 <RegionEU868InitDefaults+0x128>)
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80157e2:	4b08      	ldr	r3, [pc, #32]	; (8015804 <RegionEU868InitDefaults+0x128>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 80157ea:	4b06      	ldr	r3, [pc, #24]	; (8015804 <RegionEU868InitDefaults+0x128>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	430a      	orrs	r2, r1
 80157f0:	b292      	uxth	r2, r2
 80157f2:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 80157f6:	e000      	b.n	80157fa <RegionEU868InitDefaults+0x11e>
            break;
 80157f8:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80157fa:	37c0      	adds	r7, #192	; 0xc0
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}
 8015800:	20000ec8 	.word	0x20000ec8
 8015804:	20000ecc 	.word	0x20000ecc
 8015808:	0801b92c 	.word	0x0801b92c
 801580c:	0801b938 	.word	0x0801b938
 8015810:	0801b944 	.word	0x0801b944

08015814 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b084      	sub	sp, #16
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
 801581c:	460b      	mov	r3, r1
 801581e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015820:	78fb      	ldrb	r3, [r7, #3]
 8015822:	2b0f      	cmp	r3, #15
 8015824:	d86c      	bhi.n	8015900 <RegionEU868Verify+0xec>
 8015826:	a201      	add	r2, pc, #4	; (adr r2, 801582c <RegionEU868Verify+0x18>)
 8015828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801582c:	0801586d 	.word	0x0801586d
 8015830:	08015901 	.word	0x08015901
 8015834:	08015901 	.word	0x08015901
 8015838:	08015901 	.word	0x08015901
 801583c:	08015901 	.word	0x08015901
 8015840:	08015885 	.word	0x08015885
 8015844:	080158a3 	.word	0x080158a3
 8015848:	080158c1 	.word	0x080158c1
 801584c:	08015901 	.word	0x08015901
 8015850:	080158df 	.word	0x080158df
 8015854:	080158df 	.word	0x080158df
 8015858:	08015901 	.word	0x08015901
 801585c:	08015901 	.word	0x08015901
 8015860:	08015901 	.word	0x08015901
 8015864:	08015901 	.word	0x08015901
 8015868:	080158fd 	.word	0x080158fd
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 801586c:	2300      	movs	r3, #0
 801586e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	f107 020f 	add.w	r2, r7, #15
 8015878:	4611      	mov	r1, r2
 801587a:	4618      	mov	r0, r3
 801587c:	f7ff fcf2 	bl	8015264 <VerifyRfFreq>
 8015880:	4603      	mov	r3, r0
 8015882:	e03e      	b.n	8015902 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f993 3000 	ldrsb.w	r3, [r3]
 801588a:	2207      	movs	r2, #7
 801588c:	2103      	movs	r1, #3
 801588e:	4618      	mov	r0, r3
 8015890:	f7fe ff67 	bl	8014762 <RegionCommonValueInRange>
 8015894:	4603      	mov	r3, r0
 8015896:	2b00      	cmp	r3, #0
 8015898:	bf14      	ite	ne
 801589a:	2301      	movne	r3, #1
 801589c:	2300      	moveq	r3, #0
 801589e:	b2db      	uxtb	r3, r3
 80158a0:	e02f      	b.n	8015902 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f993 3000 	ldrsb.w	r3, [r3]
 80158a8:	2205      	movs	r2, #5
 80158aa:	2100      	movs	r1, #0
 80158ac:	4618      	mov	r0, r3
 80158ae:	f7fe ff58 	bl	8014762 <RegionCommonValueInRange>
 80158b2:	4603      	mov	r3, r0
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	bf14      	ite	ne
 80158b8:	2301      	movne	r3, #1
 80158ba:	2300      	moveq	r3, #0
 80158bc:	b2db      	uxtb	r3, r3
 80158be:	e020      	b.n	8015902 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	f993 3000 	ldrsb.w	r3, [r3]
 80158c6:	2207      	movs	r2, #7
 80158c8:	2100      	movs	r1, #0
 80158ca:	4618      	mov	r0, r3
 80158cc:	f7fe ff49 	bl	8014762 <RegionCommonValueInRange>
 80158d0:	4603      	mov	r3, r0
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	bf14      	ite	ne
 80158d6:	2301      	movne	r3, #1
 80158d8:	2300      	moveq	r3, #0
 80158da:	b2db      	uxtb	r3, r3
 80158dc:	e011      	b.n	8015902 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	f993 3000 	ldrsb.w	r3, [r3]
 80158e4:	2207      	movs	r2, #7
 80158e6:	2100      	movs	r1, #0
 80158e8:	4618      	mov	r0, r3
 80158ea:	f7fe ff3a 	bl	8014762 <RegionCommonValueInRange>
 80158ee:	4603      	mov	r3, r0
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	bf14      	ite	ne
 80158f4:	2301      	movne	r3, #1
 80158f6:	2300      	moveq	r3, #0
 80158f8:	b2db      	uxtb	r3, r3
 80158fa:	e002      	b.n	8015902 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80158fc:	2301      	movs	r3, #1
 80158fe:	e000      	b.n	8015902 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8015900:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8015902:	4618      	mov	r0, r3
 8015904:	3710      	adds	r7, #16
 8015906:	46bd      	mov	sp, r7
 8015908:	bd80      	pop	{r7, pc}
 801590a:	bf00      	nop

0801590c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b08a      	sub	sp, #40	; 0x28
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015914:	2350      	movs	r3, #80	; 0x50
 8015916:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	791b      	ldrb	r3, [r3, #4]
 801591e:	2b10      	cmp	r3, #16
 8015920:	d162      	bne.n	80159e8 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	330f      	adds	r3, #15
 8015928:	781b      	ldrb	r3, [r3, #0]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d15e      	bne.n	80159ec <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801592e:	2300      	movs	r3, #0
 8015930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015934:	2303      	movs	r3, #3
 8015936:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801593a:	e050      	b.n	80159de <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801593c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015940:	2b07      	cmp	r3, #7
 8015942:	d824      	bhi.n	801598e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681a      	ldr	r2, [r3, #0]
 8015948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801594c:	4413      	add	r3, r2
 801594e:	781b      	ldrb	r3, [r3, #0]
 8015950:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015952:	69ba      	ldr	r2, [r7, #24]
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	6819      	ldr	r1, [r3, #0]
 8015958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801595c:	3301      	adds	r3, #1
 801595e:	440b      	add	r3, r1
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	021b      	lsls	r3, r3, #8
 8015964:	4313      	orrs	r3, r2
 8015966:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015968:	69ba      	ldr	r2, [r7, #24]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	6819      	ldr	r1, [r3, #0]
 801596e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015972:	3302      	adds	r3, #2
 8015974:	440b      	add	r3, r1
 8015976:	781b      	ldrb	r3, [r3, #0]
 8015978:	041b      	lsls	r3, r3, #16
 801597a:	4313      	orrs	r3, r2
 801597c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801597e:	69bb      	ldr	r3, [r7, #24]
 8015980:	2264      	movs	r2, #100	; 0x64
 8015982:	fb02 f303 	mul.w	r3, r2, r3
 8015986:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015988:	2300      	movs	r3, #0
 801598a:	61fb      	str	r3, [r7, #28]
 801598c:	e006      	b.n	801599c <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801598e:	2300      	movs	r3, #0
 8015990:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015992:	2300      	movs	r3, #0
 8015994:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015998:	2300      	movs	r3, #0
 801599a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 801599c:	69bb      	ldr	r3, [r7, #24]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d00b      	beq.n	80159ba <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80159a2:	f107 0318 	add.w	r3, r7, #24
 80159a6:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80159a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159ac:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80159ae:	f107 0310 	add.w	r3, r7, #16
 80159b2:	4618      	mov	r0, r3
 80159b4:	f000 fd0e 	bl	80163d4 <RegionEU868ChannelAdd>
 80159b8:	e007      	b.n	80159ca <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80159ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159be:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80159c0:	f107 030c 	add.w	r3, r7, #12
 80159c4:	4618      	mov	r0, r3
 80159c6:	f000 fda7 	bl	8016518 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80159ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159ce:	3303      	adds	r3, #3
 80159d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80159d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159d8:	3301      	adds	r3, #1
 80159da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80159de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159e2:	2b0f      	cmp	r3, #15
 80159e4:	d9aa      	bls.n	801593c <RegionEU868ApplyCFList+0x30>
 80159e6:	e002      	b.n	80159ee <RegionEU868ApplyCFList+0xe2>
        return;
 80159e8:	bf00      	nop
 80159ea:	e000      	b.n	80159ee <RegionEU868ApplyCFList+0xe2>
        return;
 80159ec:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80159ee:	3728      	adds	r7, #40	; 0x28
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}

080159f4 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b082      	sub	sp, #8
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	791b      	ldrb	r3, [r3, #4]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d002      	beq.n	8015a0a <RegionEU868ChanMaskSet+0x16>
 8015a04:	2b01      	cmp	r3, #1
 8015a06:	d00b      	beq.n	8015a20 <RegionEU868ChanMaskSet+0x2c>
 8015a08:	e015      	b.n	8015a36 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015a0a:	4b0e      	ldr	r3, [pc, #56]	; (8015a44 <RegionEU868ChanMaskSet+0x50>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	2201      	movs	r2, #1
 8015a18:	4619      	mov	r1, r3
 8015a1a:	f7fe ff1f 	bl	801485c <RegionCommonChanMaskCopy>
            break;
 8015a1e:	e00c      	b.n	8015a3a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015a20:	4b08      	ldr	r3, [pc, #32]	; (8015a44 <RegionEU868ChanMaskSet+0x50>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	2201      	movs	r2, #1
 8015a2e:	4619      	mov	r1, r3
 8015a30:	f7fe ff14 	bl	801485c <RegionCommonChanMaskCopy>
            break;
 8015a34:	e001      	b.n	8015a3a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8015a36:	2300      	movs	r3, #0
 8015a38:	e000      	b.n	8015a3c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8015a3a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	3708      	adds	r7, #8
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bd80      	pop	{r7, pc}
 8015a44:	20000ecc 	.word	0x20000ecc

08015a48 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b088      	sub	sp, #32
 8015a4c:	af02      	add	r7, sp, #8
 8015a4e:	60ba      	str	r2, [r7, #8]
 8015a50:	607b      	str	r3, [r7, #4]
 8015a52:	4603      	mov	r3, r0
 8015a54:	73fb      	strb	r3, [r7, #15]
 8015a56:	460b      	mov	r3, r1
 8015a58:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a62:	2b07      	cmp	r3, #7
 8015a64:	bfa8      	it	ge
 8015a66:	2307      	movge	r3, #7
 8015a68:	b25a      	sxtb	r2, r3
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a74:	491e      	ldr	r1, [pc, #120]	; (8015af0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7ff fb80 	bl	801517c <RegionCommonGetBandwidth>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	b2da      	uxtb	r2, r3
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a8a:	2b07      	cmp	r3, #7
 8015a8c:	d10a      	bne.n	8015aa4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a94:	461a      	mov	r2, r3
 8015a96:	4b17      	ldr	r3, [pc, #92]	; (8015af4 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015a98:	5c9b      	ldrb	r3, [r3, r2]
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7ff f902 	bl	8014ca4 <RegionCommonComputeSymbolTimeFsk>
 8015aa0:	6178      	str	r0, [r7, #20]
 8015aa2:	e011      	b.n	8015ac8 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015aaa:	461a      	mov	r2, r3
 8015aac:	4b11      	ldr	r3, [pc, #68]	; (8015af4 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015aae:	5c9a      	ldrb	r2, [r3, r2]
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ab6:	4619      	mov	r1, r3
 8015ab8:	4b0d      	ldr	r3, [pc, #52]	; (8015af0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015aba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015abe:	4619      	mov	r1, r3
 8015ac0:	4610      	mov	r0, r2
 8015ac2:	f7ff f8d9 	bl	8014c78 <RegionCommonComputeSymbolTimeLoRa>
 8015ac6:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015ac8:	4b0b      	ldr	r3, [pc, #44]	; (8015af8 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8015aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015acc:	4798      	blx	r3
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	3308      	adds	r3, #8
 8015ad2:	687a      	ldr	r2, [r7, #4]
 8015ad4:	320c      	adds	r2, #12
 8015ad6:	7bb9      	ldrb	r1, [r7, #14]
 8015ad8:	9201      	str	r2, [sp, #4]
 8015ada:	9300      	str	r3, [sp, #0]
 8015adc:	4603      	mov	r3, r0
 8015ade:	68ba      	ldr	r2, [r7, #8]
 8015ae0:	6978      	ldr	r0, [r7, #20]
 8015ae2:	f7ff f8ef 	bl	8014cc4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015ae6:	bf00      	nop
 8015ae8:	3718      	adds	r7, #24
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}
 8015aee:	bf00      	nop
 8015af0:	0801bea4 	.word	0x0801bea4
 8015af4:	0801be9c 	.word	0x0801be9c
 8015af8:	0801bed4 	.word	0x0801bed4

08015afc <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015afc:	b5b0      	push	{r4, r5, r7, lr}
 8015afe:	b090      	sub	sp, #64	; 0x40
 8015b00:	af0a      	add	r7, sp, #40	; 0x28
 8015b02:	6078      	str	r0, [r7, #4]
 8015b04:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	785b      	ldrb	r3, [r3, #1]
 8015b0a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015b10:	2300      	movs	r3, #0
 8015b12:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	685b      	ldr	r3, [r3, #4]
 8015b18:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015b1a:	4b5a      	ldr	r3, [pc, #360]	; (8015c84 <RegionEU868RxConfig+0x188>)
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	4798      	blx	r3
 8015b20:	4603      	mov	r3, r0
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d001      	beq.n	8015b2a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8015b26:	2300      	movs	r3, #0
 8015b28:	e0a8      	b.n	8015c7c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	7cdb      	ldrb	r3, [r3, #19]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d126      	bne.n	8015b80 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015b32:	4b55      	ldr	r3, [pc, #340]	; (8015c88 <RegionEU868RxConfig+0x18c>)
 8015b34:	681a      	ldr	r2, [r3, #0]
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	781b      	ldrb	r3, [r3, #0]
 8015b3a:	4619      	mov	r1, r3
 8015b3c:	460b      	mov	r3, r1
 8015b3e:	005b      	lsls	r3, r3, #1
 8015b40:	440b      	add	r3, r1
 8015b42:	009b      	lsls	r3, r3, #2
 8015b44:	4413      	add	r3, r2
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015b4a:	4b4f      	ldr	r3, [pc, #316]	; (8015c88 <RegionEU868RxConfig+0x18c>)
 8015b4c:	681a      	ldr	r2, [r3, #0]
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	781b      	ldrb	r3, [r3, #0]
 8015b52:	4619      	mov	r1, r3
 8015b54:	460b      	mov	r3, r1
 8015b56:	005b      	lsls	r3, r3, #1
 8015b58:	440b      	add	r3, r1
 8015b5a:	009b      	lsls	r3, r3, #2
 8015b5c:	4413      	add	r3, r2
 8015b5e:	3304      	adds	r3, #4
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d00c      	beq.n	8015b80 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015b66:	4b48      	ldr	r3, [pc, #288]	; (8015c88 <RegionEU868RxConfig+0x18c>)
 8015b68:	681a      	ldr	r2, [r3, #0]
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	4619      	mov	r1, r3
 8015b70:	460b      	mov	r3, r1
 8015b72:	005b      	lsls	r3, r3, #1
 8015b74:	440b      	add	r3, r1
 8015b76:	009b      	lsls	r3, r3, #2
 8015b78:	4413      	add	r3, r2
 8015b7a:	3304      	adds	r3, #4
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b84:	4a41      	ldr	r2, [pc, #260]	; (8015c8c <RegionEU868RxConfig+0x190>)
 8015b86:	5cd3      	ldrb	r3, [r2, r3]
 8015b88:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015b8a:	4b3e      	ldr	r3, [pc, #248]	; (8015c84 <RegionEU868RxConfig+0x188>)
 8015b8c:	68db      	ldr	r3, [r3, #12]
 8015b8e:	6938      	ldr	r0, [r7, #16]
 8015b90:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b96:	2b07      	cmp	r3, #7
 8015b98:	d128      	bne.n	8015bec <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015b9e:	4b39      	ldr	r3, [pc, #228]	; (8015c84 <RegionEU868RxConfig+0x188>)
 8015ba0:	699c      	ldr	r4, [r3, #24]
 8015ba2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015baa:	fb02 f303 	mul.w	r3, r2, r3
 8015bae:	4619      	mov	r1, r3
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	689b      	ldr	r3, [r3, #8]
 8015bb4:	b29b      	uxth	r3, r3
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	7c92      	ldrb	r2, [r2, #18]
 8015bba:	7df8      	ldrb	r0, [r7, #23]
 8015bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	9208      	str	r2, [sp, #32]
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	9207      	str	r2, [sp, #28]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	9206      	str	r2, [sp, #24]
 8015bca:	2201      	movs	r2, #1
 8015bcc:	9205      	str	r2, [sp, #20]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	9204      	str	r2, [sp, #16]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	9203      	str	r2, [sp, #12]
 8015bd6:	9302      	str	r3, [sp, #8]
 8015bd8:	2305      	movs	r3, #5
 8015bda:	9301      	str	r3, [sp, #4]
 8015bdc:	4b2c      	ldr	r3, [pc, #176]	; (8015c90 <RegionEU868RxConfig+0x194>)
 8015bde:	9300      	str	r3, [sp, #0]
 8015be0:	2300      	movs	r3, #0
 8015be2:	460a      	mov	r2, r1
 8015be4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8015be8:	47a0      	blx	r4
 8015bea:	e024      	b.n	8015c36 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015bec:	2301      	movs	r3, #1
 8015bee:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015bf0:	4b24      	ldr	r3, [pc, #144]	; (8015c84 <RegionEU868RxConfig+0x188>)
 8015bf2:	699c      	ldr	r4, [r3, #24]
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	789b      	ldrb	r3, [r3, #2]
 8015bf8:	461d      	mov	r5, r3
 8015bfa:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	689b      	ldr	r3, [r3, #8]
 8015c02:	b29b      	uxth	r3, r3
 8015c04:	687a      	ldr	r2, [r7, #4]
 8015c06:	7c92      	ldrb	r2, [r2, #18]
 8015c08:	7df8      	ldrb	r0, [r7, #23]
 8015c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8015c0c:	2201      	movs	r2, #1
 8015c0e:	9208      	str	r2, [sp, #32]
 8015c10:	2200      	movs	r2, #0
 8015c12:	9207      	str	r2, [sp, #28]
 8015c14:	2200      	movs	r2, #0
 8015c16:	9206      	str	r2, [sp, #24]
 8015c18:	2200      	movs	r2, #0
 8015c1a:	9205      	str	r2, [sp, #20]
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	9204      	str	r2, [sp, #16]
 8015c20:	2200      	movs	r2, #0
 8015c22:	9203      	str	r2, [sp, #12]
 8015c24:	9302      	str	r3, [sp, #8]
 8015c26:	2308      	movs	r3, #8
 8015c28:	9301      	str	r3, [sp, #4]
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	9300      	str	r3, [sp, #0]
 8015c2e:	2301      	movs	r3, #1
 8015c30:	460a      	mov	r2, r1
 8015c32:	4629      	mov	r1, r5
 8015c34:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	7c5b      	ldrb	r3, [r3, #17]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d005      	beq.n	8015c4a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8015c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c42:	4a14      	ldr	r2, [pc, #80]	; (8015c94 <RegionEU868RxConfig+0x198>)
 8015c44:	5cd3      	ldrb	r3, [r2, r3]
 8015c46:	75bb      	strb	r3, [r7, #22]
 8015c48:	e004      	b.n	8015c54 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8015c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c4e:	4a12      	ldr	r2, [pc, #72]	; (8015c98 <RegionEU868RxConfig+0x19c>)
 8015c50:	5cd3      	ldrb	r3, [r2, r3]
 8015c52:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015c54:	4b0b      	ldr	r3, [pc, #44]	; (8015c84 <RegionEU868RxConfig+0x188>)
 8015c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015c58:	7dba      	ldrb	r2, [r7, #22]
 8015c5a:	320d      	adds	r2, #13
 8015c5c:	b2d1      	uxtb	r1, r2
 8015c5e:	7dfa      	ldrb	r2, [r7, #23]
 8015c60:	4610      	mov	r0, r2
 8015c62:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	7cdb      	ldrb	r3, [r3, #19]
 8015c68:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015c6c:	6939      	ldr	r1, [r7, #16]
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f7ff faa2 	bl	80151b8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	7bfa      	ldrb	r2, [r7, #15]
 8015c78:	701a      	strb	r2, [r3, #0]
    return true;
 8015c7a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	3718      	adds	r7, #24
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bdb0      	pop	{r4, r5, r7, pc}
 8015c84:	0801bed4 	.word	0x0801bed4
 8015c88:	20000ecc 	.word	0x20000ecc
 8015c8c:	0801be9c 	.word	0x0801be9c
 8015c90:	00014585 	.word	0x00014585
 8015c94:	0801becc 	.word	0x0801becc
 8015c98:	0801bec4 	.word	0x0801bec4

08015c9c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015c9c:	b590      	push	{r4, r7, lr}
 8015c9e:	b093      	sub	sp, #76	; 0x4c
 8015ca0:	af0a      	add	r7, sp, #40	; 0x28
 8015ca2:	60f8      	str	r0, [r7, #12]
 8015ca4:	60b9      	str	r1, [r7, #8]
 8015ca6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015cae:	461a      	mov	r2, r3
 8015cb0:	4b5d      	ldr	r3, [pc, #372]	; (8015e28 <RegionEU868TxConfig+0x18c>)
 8015cb2:	5c9b      	ldrb	r3, [r3, r2]
 8015cb4:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015cbc:	4b5b      	ldr	r3, [pc, #364]	; (8015e2c <RegionEU868TxConfig+0x190>)
 8015cbe:	681a      	ldr	r2, [r3, #0]
 8015cc0:	4b5b      	ldr	r3, [pc, #364]	; (8015e30 <RegionEU868TxConfig+0x194>)
 8015cc2:	6819      	ldr	r1, [r3, #0]
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	781b      	ldrb	r3, [r3, #0]
 8015cc8:	461c      	mov	r4, r3
 8015cca:	4623      	mov	r3, r4
 8015ccc:	005b      	lsls	r3, r3, #1
 8015cce:	4423      	add	r3, r4
 8015cd0:	009b      	lsls	r3, r3, #2
 8015cd2:	440b      	add	r3, r1
 8015cd4:	3309      	adds	r3, #9
 8015cd6:	781b      	ldrb	r3, [r3, #0]
 8015cd8:	4619      	mov	r1, r3
 8015cda:	460b      	mov	r3, r1
 8015cdc:	005b      	lsls	r3, r3, #1
 8015cde:	440b      	add	r3, r1
 8015ce0:	00db      	lsls	r3, r3, #3
 8015ce2:	4413      	add	r3, r2
 8015ce4:	3302      	adds	r3, #2
 8015ce6:	f993 3000 	ldrsb.w	r3, [r3]
 8015cea:	4619      	mov	r1, r3
 8015cec:	f7ff fa31 	bl	8015152 <RegionCommonLimitTxPower>
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015cfa:	494e      	ldr	r1, [pc, #312]	; (8015e34 <RegionEU868TxConfig+0x198>)
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f7ff fa3d 	bl	801517c <RegionCommonGetBandwidth>
 8015d02:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015d04:	2300      	movs	r3, #0
 8015d06:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	6859      	ldr	r1, [r3, #4]
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	689a      	ldr	r2, [r3, #8]
 8015d10:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7ff f88d 	bl	8014e34 <RegionCommonComputeTxPower>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015d1e:	4b46      	ldr	r3, [pc, #280]	; (8015e38 <RegionEU868TxConfig+0x19c>)
 8015d20:	68da      	ldr	r2, [r3, #12]
 8015d22:	4b43      	ldr	r3, [pc, #268]	; (8015e30 <RegionEU868TxConfig+0x194>)
 8015d24:	6819      	ldr	r1, [r3, #0]
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	781b      	ldrb	r3, [r3, #0]
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	005b      	lsls	r3, r3, #1
 8015d30:	4403      	add	r3, r0
 8015d32:	009b      	lsls	r3, r3, #2
 8015d34:	440b      	add	r3, r1
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	4618      	mov	r0, r3
 8015d3a:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d42:	2b07      	cmp	r3, #7
 8015d44:	d124      	bne.n	8015d90 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015d46:	2300      	movs	r3, #0
 8015d48:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015d4a:	4b3b      	ldr	r3, [pc, #236]	; (8015e38 <RegionEU868TxConfig+0x19c>)
 8015d4c:	69dc      	ldr	r4, [r3, #28]
 8015d4e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015d56:	fb02 f303 	mul.w	r3, r2, r3
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015d60:	7ff8      	ldrb	r0, [r7, #31]
 8015d62:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8015d66:	9308      	str	r3, [sp, #32]
 8015d68:	2300      	movs	r3, #0
 8015d6a:	9307      	str	r3, [sp, #28]
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	9306      	str	r3, [sp, #24]
 8015d70:	2300      	movs	r3, #0
 8015d72:	9305      	str	r3, [sp, #20]
 8015d74:	2301      	movs	r3, #1
 8015d76:	9304      	str	r3, [sp, #16]
 8015d78:	2300      	movs	r3, #0
 8015d7a:	9303      	str	r3, [sp, #12]
 8015d7c:	2305      	movs	r3, #5
 8015d7e:	9302      	str	r3, [sp, #8]
 8015d80:	2300      	movs	r3, #0
 8015d82:	9301      	str	r3, [sp, #4]
 8015d84:	9200      	str	r2, [sp, #0]
 8015d86:	69bb      	ldr	r3, [r7, #24]
 8015d88:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015d8c:	47a0      	blx	r4
 8015d8e:	e01d      	b.n	8015dcc <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015d90:	2301      	movs	r3, #1
 8015d92:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015d94:	4b28      	ldr	r3, [pc, #160]	; (8015e38 <RegionEU868TxConfig+0x19c>)
 8015d96:	69dc      	ldr	r4, [r3, #28]
 8015d98:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015d9c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015da0:	7ff8      	ldrb	r0, [r7, #31]
 8015da2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8015da6:	9208      	str	r2, [sp, #32]
 8015da8:	2200      	movs	r2, #0
 8015daa:	9207      	str	r2, [sp, #28]
 8015dac:	2200      	movs	r2, #0
 8015dae:	9206      	str	r2, [sp, #24]
 8015db0:	2200      	movs	r2, #0
 8015db2:	9205      	str	r2, [sp, #20]
 8015db4:	2201      	movs	r2, #1
 8015db6:	9204      	str	r2, [sp, #16]
 8015db8:	2200      	movs	r2, #0
 8015dba:	9203      	str	r2, [sp, #12]
 8015dbc:	2208      	movs	r2, #8
 8015dbe:	9202      	str	r2, [sp, #8]
 8015dc0:	2201      	movs	r2, #1
 8015dc2:	9201      	str	r2, [sp, #4]
 8015dc4:	9300      	str	r3, [sp, #0]
 8015dc6:	69bb      	ldr	r3, [r7, #24]
 8015dc8:	2200      	movs	r2, #0
 8015dca:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015dcc:	4b18      	ldr	r3, [pc, #96]	; (8015e30 <RegionEU868TxConfig+0x194>)
 8015dce:	681a      	ldr	r2, [r3, #0]
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	781b      	ldrb	r3, [r3, #0]
 8015dd4:	4619      	mov	r1, r3
 8015dd6:	460b      	mov	r3, r1
 8015dd8:	005b      	lsls	r3, r3, #1
 8015dda:	440b      	add	r3, r1
 8015ddc:	009b      	lsls	r3, r3, #2
 8015dde:	4413      	add	r3, r2
 8015de0:	681a      	ldr	r2, [r3, #0]
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015de8:	4619      	mov	r1, r3
 8015dea:	4610      	mov	r0, r2
 8015dec:	f7ff fa22 	bl	8015234 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	899b      	ldrh	r3, [r3, #12]
 8015dfa:	4619      	mov	r1, r3
 8015dfc:	4610      	mov	r0, r2
 8015dfe:	f7ff faa7 	bl	8015350 <GetTimeOnAir>
 8015e02:	4602      	mov	r2, r0
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015e08:	4b0b      	ldr	r3, [pc, #44]	; (8015e38 <RegionEU868TxConfig+0x19c>)
 8015e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015e0c:	68fa      	ldr	r2, [r7, #12]
 8015e0e:	8992      	ldrh	r2, [r2, #12]
 8015e10:	b2d1      	uxtb	r1, r2
 8015e12:	7ffa      	ldrb	r2, [r7, #31]
 8015e14:	4610      	mov	r0, r2
 8015e16:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	7f7a      	ldrb	r2, [r7, #29]
 8015e1c:	701a      	strb	r2, [r3, #0]
    return true;
 8015e1e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015e20:	4618      	mov	r0, r3
 8015e22:	3724      	adds	r7, #36	; 0x24
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bd90      	pop	{r4, r7, pc}
 8015e28:	0801be9c 	.word	0x0801be9c
 8015e2c:	20000ec8 	.word	0x20000ec8
 8015e30:	20000ecc 	.word	0x20000ecc
 8015e34:	0801bea4 	.word	0x0801bea4
 8015e38:	0801bed4 	.word	0x0801bed4

08015e3c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015e3c:	b590      	push	{r4, r7, lr}
 8015e3e:	b093      	sub	sp, #76	; 0x4c
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	60f8      	str	r0, [r7, #12]
 8015e44:	60b9      	str	r1, [r7, #8]
 8015e46:	607a      	str	r2, [r7, #4]
 8015e48:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015e4a:	2307      	movs	r3, #7
 8015e4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015e50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015e54:	2200      	movs	r2, #0
 8015e56:	601a      	str	r2, [r3, #0]
 8015e58:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015e60:	2300      	movs	r3, #0
 8015e62:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015e66:	2300      	movs	r3, #0
 8015e68:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015e6a:	e085      	b.n	8015f78 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	685a      	ldr	r2, [r3, #4]
 8015e70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015e74:	4413      	add	r3, r2
 8015e76:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015e7a:	4611      	mov	r1, r2
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f7fe fe31 	bl	8014ae4 <RegionCommonParseLinkAdrReq>
 8015e82:	4603      	mov	r3, r0
 8015e84:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015e88:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d07b      	beq.n	8015f88 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015e90:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015e94:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015e98:	4413      	add	r3, r2
 8015e9a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015e9e:	2307      	movs	r3, #7
 8015ea0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015ea4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015ea8:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015eaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d109      	bne.n	8015ec6 <RegionEU868LinkAdrReq+0x8a>
 8015eb2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d106      	bne.n	8015ec6 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015eb8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ebc:	f023 0301 	bic.w	r3, r3, #1
 8015ec0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015ec4:	e058      	b.n	8015f78 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015ec6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d003      	beq.n	8015ed6 <RegionEU868LinkAdrReq+0x9a>
 8015ece:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015ed2:	2b05      	cmp	r3, #5
 8015ed4:	d903      	bls.n	8015ede <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015ed6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015eda:	2b06      	cmp	r3, #6
 8015edc:	d906      	bls.n	8015eec <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015ede:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ee2:	f023 0301 	bic.w	r3, r3, #1
 8015ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015eea:	e045      	b.n	8015f78 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015eec:	2300      	movs	r3, #0
 8015eee:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015ef2:	e03d      	b.n	8015f70 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015ef4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015ef8:	2b06      	cmp	r3, #6
 8015efa:	d118      	bne.n	8015f2e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015efc:	4b5f      	ldr	r3, [pc, #380]	; (801607c <RegionEU868LinkAdrReq+0x240>)
 8015efe:	6819      	ldr	r1, [r3, #0]
 8015f00:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015f04:	4613      	mov	r3, r2
 8015f06:	005b      	lsls	r3, r3, #1
 8015f08:	4413      	add	r3, r2
 8015f0a:	009b      	lsls	r3, r3, #2
 8015f0c:	440b      	add	r3, r1
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d028      	beq.n	8015f66 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015f14:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f18:	2201      	movs	r2, #1
 8015f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8015f1e:	b21a      	sxth	r2, r3
 8015f20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f22:	b21b      	sxth	r3, r3
 8015f24:	4313      	orrs	r3, r2
 8015f26:	b21b      	sxth	r3, r3
 8015f28:	b29b      	uxth	r3, r3
 8015f2a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015f2c:	e01b      	b.n	8015f66 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015f2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f30:	461a      	mov	r2, r3
 8015f32:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f36:	fa42 f303 	asr.w	r3, r2, r3
 8015f3a:	f003 0301 	and.w	r3, r3, #1
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d011      	beq.n	8015f66 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015f42:	4b4e      	ldr	r3, [pc, #312]	; (801607c <RegionEU868LinkAdrReq+0x240>)
 8015f44:	6819      	ldr	r1, [r3, #0]
 8015f46:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015f4a:	4613      	mov	r3, r2
 8015f4c:	005b      	lsls	r3, r3, #1
 8015f4e:	4413      	add	r3, r2
 8015f50:	009b      	lsls	r3, r3, #2
 8015f52:	440b      	add	r3, r1
 8015f54:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d105      	bne.n	8015f66 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015f5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015f5e:	f023 0301 	bic.w	r3, r3, #1
 8015f62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015f66:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f6a:	3301      	adds	r3, #1
 8015f6c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015f70:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f74:	2b0f      	cmp	r3, #15
 8015f76:	d9bd      	bls.n	8015ef4 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	7a1b      	ldrb	r3, [r3, #8]
 8015f7c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015f80:	429a      	cmp	r2, r3
 8015f82:	f4ff af73 	bcc.w	8015e6c <RegionEU868LinkAdrReq+0x30>
 8015f86:	e000      	b.n	8015f8a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015f88:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015f8a:	2302      	movs	r3, #2
 8015f8c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	7a5b      	ldrb	r3, [r3, #9]
 8015f94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015f98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7ff fa27 	bl	80153f0 <RegionEU868GetPhyParam>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015fa6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015faa:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	7a9b      	ldrb	r3, [r3, #10]
 8015fb0:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015fb2:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015fb6:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015fb8:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015fbc:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015fbe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015fc2:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015fca:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015fd2:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	7b5b      	ldrb	r3, [r3, #13]
 8015fd8:	b25b      	sxtb	r3, r3
 8015fda:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015fdc:	2310      	movs	r3, #16
 8015fde:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015fe0:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8015fe4:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fe8:	b25b      	sxtb	r3, r3
 8015fea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015fee:	2307      	movs	r3, #7
 8015ff0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015ff4:	4b21      	ldr	r3, [pc, #132]	; (801607c <RegionEU868LinkAdrReq+0x240>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015ffa:	2307      	movs	r3, #7
 8015ffc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8016000:	2300      	movs	r3, #0
 8016002:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801600c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8016010:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016014:	1c9a      	adds	r2, r3, #2
 8016016:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801601a:	1c59      	adds	r1, r3, #1
 801601c:	f107 0010 	add.w	r0, r7, #16
 8016020:	4623      	mov	r3, r4
 8016022:	f7fe fdb0 	bl	8014b86 <RegionCommonLinkAdrReqVerifyParams>
 8016026:	4603      	mov	r3, r0
 8016028:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801602c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016030:	2b07      	cmp	r3, #7
 8016032:	d10c      	bne.n	801604e <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8016034:	4b11      	ldr	r3, [pc, #68]	; (801607c <RegionEU868LinkAdrReq+0x240>)
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	33c0      	adds	r3, #192	; 0xc0
 801603a:	2202      	movs	r2, #2
 801603c:	2100      	movs	r1, #0
 801603e:	4618      	mov	r0, r3
 8016040:	f000 fb7c 	bl	801673c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8016044:	4b0d      	ldr	r3, [pc, #52]	; (801607c <RegionEU868LinkAdrReq+0x240>)
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801604a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801604e:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016056:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801605e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016062:	683b      	ldr	r3, [r7, #0]
 8016064:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016068:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801606c:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 801606e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8016072:	4618      	mov	r0, r3
 8016074:	374c      	adds	r7, #76	; 0x4c
 8016076:	46bd      	mov	sp, r7
 8016078:	bd90      	pop	{r4, r7, pc}
 801607a:	bf00      	nop
 801607c:	20000ecc 	.word	0x20000ecc

08016080 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b084      	sub	sp, #16
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016088:	2307      	movs	r3, #7
 801608a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801608c:	2300      	movs	r3, #0
 801608e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	685b      	ldr	r3, [r3, #4]
 8016094:	f107 020e 	add.w	r2, r7, #14
 8016098:	4611      	mov	r1, r2
 801609a:	4618      	mov	r0, r3
 801609c:	f7ff f8e2 	bl	8015264 <VerifyRfFreq>
 80160a0:	4603      	mov	r3, r0
 80160a2:	f083 0301 	eor.w	r3, r3, #1
 80160a6:	b2db      	uxtb	r3, r3
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d003      	beq.n	80160b4 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80160ac:	7bfb      	ldrb	r3, [r7, #15]
 80160ae:	f023 0301 	bic.w	r3, r3, #1
 80160b2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f993 3000 	ldrsb.w	r3, [r3]
 80160ba:	2207      	movs	r2, #7
 80160bc:	2100      	movs	r1, #0
 80160be:	4618      	mov	r0, r3
 80160c0:	f7fe fb4f 	bl	8014762 <RegionCommonValueInRange>
 80160c4:	4603      	mov	r3, r0
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d103      	bne.n	80160d2 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80160ca:	7bfb      	ldrb	r3, [r7, #15]
 80160cc:	f023 0302 	bic.w	r3, r3, #2
 80160d0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160d8:	2205      	movs	r2, #5
 80160da:	2100      	movs	r1, #0
 80160dc:	4618      	mov	r0, r3
 80160de:	f7fe fb40 	bl	8014762 <RegionCommonValueInRange>
 80160e2:	4603      	mov	r3, r0
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d103      	bne.n	80160f0 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80160e8:	7bfb      	ldrb	r3, [r7, #15]
 80160ea:	f023 0304 	bic.w	r3, r3, #4
 80160ee:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80160f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80160f2:	4618      	mov	r0, r3
 80160f4:	3710      	adds	r7, #16
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}
	...

080160fc <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b086      	sub	sp, #24
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016104:	2303      	movs	r3, #3
 8016106:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d114      	bne.n	801613c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016118:	b2db      	uxtb	r3, r3
 801611a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801611c:	f107 0308 	add.w	r3, r7, #8
 8016120:	4618      	mov	r0, r3
 8016122:	f000 f9f9 	bl	8016518 <RegionEU868ChannelsRemove>
 8016126:	4603      	mov	r3, r0
 8016128:	f083 0301 	eor.w	r3, r3, #1
 801612c:	b2db      	uxtb	r3, r3
 801612e:	2b00      	cmp	r3, #0
 8016130:	d03b      	beq.n	80161aa <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8016132:	7dfb      	ldrb	r3, [r7, #23]
 8016134:	f023 0303 	bic.w	r3, r3, #3
 8016138:	75fb      	strb	r3, [r7, #23]
 801613a:	e036      	b.n	80161aa <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016148:	b2db      	uxtb	r3, r3
 801614a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801614c:	f107 030c 	add.w	r3, r7, #12
 8016150:	4618      	mov	r0, r3
 8016152:	f000 f93f 	bl	80163d4 <RegionEU868ChannelAdd>
 8016156:	4603      	mov	r3, r0
 8016158:	2b06      	cmp	r3, #6
 801615a:	d820      	bhi.n	801619e <RegionEU868NewChannelReq+0xa2>
 801615c:	a201      	add	r2, pc, #4	; (adr r2, 8016164 <RegionEU868NewChannelReq+0x68>)
 801615e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016162:	bf00      	nop
 8016164:	080161a9 	.word	0x080161a9
 8016168:	0801619f 	.word	0x0801619f
 801616c:	0801619f 	.word	0x0801619f
 8016170:	0801619f 	.word	0x0801619f
 8016174:	08016181 	.word	0x08016181
 8016178:	0801618b 	.word	0x0801618b
 801617c:	08016195 	.word	0x08016195
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8016180:	7dfb      	ldrb	r3, [r7, #23]
 8016182:	f023 0301 	bic.w	r3, r3, #1
 8016186:	75fb      	strb	r3, [r7, #23]
                break;
 8016188:	e00f      	b.n	80161aa <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801618a:	7dfb      	ldrb	r3, [r7, #23]
 801618c:	f023 0302 	bic.w	r3, r3, #2
 8016190:	75fb      	strb	r3, [r7, #23]
                break;
 8016192:	e00a      	b.n	80161aa <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8016194:	7dfb      	ldrb	r3, [r7, #23]
 8016196:	f023 0303 	bic.w	r3, r3, #3
 801619a:	75fb      	strb	r3, [r7, #23]
                break;
 801619c:	e005      	b.n	80161aa <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801619e:	7dfb      	ldrb	r3, [r7, #23]
 80161a0:	f023 0303 	bic.w	r3, r3, #3
 80161a4:	75fb      	strb	r3, [r7, #23]
                break;
 80161a6:	e000      	b.n	80161aa <RegionEU868NewChannelReq+0xae>
                break;
 80161a8:	bf00      	nop
            }
        }
    }

    return status;
 80161aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161ae:	4618      	mov	r0, r3
 80161b0:	3718      	adds	r7, #24
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd80      	pop	{r7, pc}
 80161b6:	bf00      	nop

080161b8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80161b8:	b480      	push	{r7}
 80161ba:	b083      	sub	sp, #12
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80161c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80161c4:	4618      	mov	r0, r3
 80161c6:	370c      	adds	r7, #12
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bc80      	pop	{r7}
 80161cc:	4770      	bx	lr
	...

080161d0 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80161d0:	b580      	push	{r7, lr}
 80161d2:	b084      	sub	sp, #16
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80161d8:	2303      	movs	r3, #3
 80161da:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80161dc:	2300      	movs	r3, #0
 80161de:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	685b      	ldr	r3, [r3, #4]
 80161e4:	f107 020e 	add.w	r2, r7, #14
 80161e8:	4611      	mov	r1, r2
 80161ea:	4618      	mov	r0, r3
 80161ec:	f7ff f83a 	bl	8015264 <VerifyRfFreq>
 80161f0:	4603      	mov	r3, r0
 80161f2:	f083 0301 	eor.w	r3, r3, #1
 80161f6:	b2db      	uxtb	r3, r3
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d003      	beq.n	8016204 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 80161fc:	7bfb      	ldrb	r3, [r7, #15]
 80161fe:	f023 0301 	bic.w	r3, r3, #1
 8016202:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016204:	4b13      	ldr	r3, [pc, #76]	; (8016254 <RegionEU868DlChannelReq+0x84>)
 8016206:	681a      	ldr	r2, [r3, #0]
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	4619      	mov	r1, r3
 801620e:	460b      	mov	r3, r1
 8016210:	005b      	lsls	r3, r3, #1
 8016212:	440b      	add	r3, r1
 8016214:	009b      	lsls	r3, r3, #2
 8016216:	4413      	add	r3, r2
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d103      	bne.n	8016226 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 801621e:	7bfb      	ldrb	r3, [r7, #15]
 8016220:	f023 0302 	bic.w	r3, r3, #2
 8016224:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016226:	7bfb      	ldrb	r3, [r7, #15]
 8016228:	2b03      	cmp	r3, #3
 801622a:	d10d      	bne.n	8016248 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801622c:	4b09      	ldr	r3, [pc, #36]	; (8016254 <RegionEU868DlChannelReq+0x84>)
 801622e:	6819      	ldr	r1, [r3, #0]
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	781b      	ldrb	r3, [r3, #0]
 8016234:	4618      	mov	r0, r3
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	685a      	ldr	r2, [r3, #4]
 801623a:	4603      	mov	r3, r0
 801623c:	005b      	lsls	r3, r3, #1
 801623e:	4403      	add	r3, r0
 8016240:	009b      	lsls	r3, r3, #2
 8016242:	440b      	add	r3, r1
 8016244:	3304      	adds	r3, #4
 8016246:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801624c:	4618      	mov	r0, r3
 801624e:	3710      	adds	r7, #16
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}
 8016254:	20000ecc 	.word	0x20000ecc

08016258 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016258:	b480      	push	{r7}
 801625a:	b083      	sub	sp, #12
 801625c:	af00      	add	r7, sp, #0
 801625e:	4603      	mov	r3, r0
 8016260:	460a      	mov	r2, r1
 8016262:	71fb      	strb	r3, [r7, #7]
 8016264:	4613      	mov	r3, r2
 8016266:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016268:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801626c:	4618      	mov	r0, r3
 801626e:	370c      	adds	r7, #12
 8016270:	46bd      	mov	sp, r7
 8016272:	bc80      	pop	{r7}
 8016274:	4770      	bx	lr
	...

08016278 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b09a      	sub	sp, #104	; 0x68
 801627c:	af02      	add	r7, sp, #8
 801627e:	60f8      	str	r0, [r7, #12]
 8016280:	60b9      	str	r1, [r7, #8]
 8016282:	607a      	str	r2, [r7, #4]
 8016284:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8016286:	2300      	movs	r3, #0
 8016288:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 801628c:	2300      	movs	r3, #0
 801628e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8016292:	2300      	movs	r3, #0
 8016294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016296:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801629a:	2200      	movs	r2, #0
 801629c:	601a      	str	r2, [r3, #0]
 801629e:	605a      	str	r2, [r3, #4]
 80162a0:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80162a2:	230c      	movs	r3, #12
 80162a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80162a8:	2307      	movs	r3, #7
 80162aa:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80162ac:	4b47      	ldr	r3, [pc, #284]	; (80163cc <RegionEU868NextChannel+0x154>)
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	33c0      	adds	r3, #192	; 0xc0
 80162b2:	2201      	movs	r2, #1
 80162b4:	2100      	movs	r1, #0
 80162b6:	4618      	mov	r0, r3
 80162b8:	f7fe faa4 	bl	8014804 <RegionCommonCountChannels>
 80162bc:	4603      	mov	r3, r0
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d10a      	bne.n	80162d8 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80162c2:	4b42      	ldr	r3, [pc, #264]	; (80163cc <RegionEU868NextChannel+0x154>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 80162ca:	4b40      	ldr	r3, [pc, #256]	; (80163cc <RegionEU868NextChannel+0x154>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	f042 0207 	orr.w	r2, r2, #7
 80162d2:	b292      	uxth	r2, r2
 80162d4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	7a5b      	ldrb	r3, [r3, #9]
 80162dc:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80162e4:	b2db      	uxtb	r3, r3
 80162e6:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80162e8:	4b38      	ldr	r3, [pc, #224]	; (80163cc <RegionEU868NextChannel+0x154>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	33c0      	adds	r3, #192	; 0xc0
 80162ee:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80162f0:	4b36      	ldr	r3, [pc, #216]	; (80163cc <RegionEU868NextChannel+0x154>)
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80162f6:	4b36      	ldr	r3, [pc, #216]	; (80163d0 <RegionEU868NextChannel+0x158>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80162fc:	2310      	movs	r3, #16
 80162fe:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8016300:	f107 0312 	add.w	r3, r7, #18
 8016304:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	685b      	ldr	r3, [r3, #4]
 8016310:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	7a9b      	ldrb	r3, [r3, #10]
 8016316:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801631a:	2306      	movs	r3, #6
 801631c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016320:	68fa      	ldr	r2, [r7, #12]
 8016322:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016326:	320c      	adds	r2, #12
 8016328:	e892 0003 	ldmia.w	r2, {r0, r1}
 801632c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	7d1b      	ldrb	r3, [r3, #20]
 8016334:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	8adb      	ldrh	r3, [r3, #22]
 8016342:	4619      	mov	r1, r3
 8016344:	4610      	mov	r0, r2
 8016346:	f7ff f803 	bl	8015350 <GetTimeOnAir>
 801634a:	4603      	mov	r3, r0
 801634c:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801634e:	f107 0314 	add.w	r3, r7, #20
 8016352:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016354:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8016358:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801635c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	9301      	str	r3, [sp, #4]
 8016364:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8016368:	9300      	str	r3, [sp, #0]
 801636a:	460b      	mov	r3, r1
 801636c:	6839      	ldr	r1, [r7, #0]
 801636e:	f7fe fe50 	bl	8015012 <RegionCommonIdentifyChannels>
 8016372:	4603      	mov	r3, r0
 8016374:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801637c:	2b00      	cmp	r3, #0
 801637e:	d10f      	bne.n	80163a0 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016380:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8016384:	3b01      	subs	r3, #1
 8016386:	4619      	mov	r1, r3
 8016388:	2000      	movs	r0, #0
 801638a:	f000 f985 	bl	8016698 <randr>
 801638e:	4603      	mov	r3, r0
 8016390:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8016394:	4413      	add	r3, r2
 8016396:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801639a:	68bb      	ldr	r3, [r7, #8]
 801639c:	701a      	strb	r2, [r3, #0]
 801639e:	e00e      	b.n	80163be <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80163a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80163a4:	2b0c      	cmp	r3, #12
 80163a6:	d10a      	bne.n	80163be <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80163a8:	4b08      	ldr	r3, [pc, #32]	; (80163cc <RegionEU868NextChannel+0x154>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 80163b0:	4b06      	ldr	r3, [pc, #24]	; (80163cc <RegionEU868NextChannel+0x154>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	f042 0207 	orr.w	r2, r2, #7
 80163b8:	b292      	uxth	r2, r2
 80163ba:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 80163be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80163c2:	4618      	mov	r0, r3
 80163c4:	3760      	adds	r7, #96	; 0x60
 80163c6:	46bd      	mov	sp, r7
 80163c8:	bd80      	pop	{r7, pc}
 80163ca:	bf00      	nop
 80163cc:	20000ecc 	.word	0x20000ecc
 80163d0:	20000ec8 	.word	0x20000ec8

080163d4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b084      	sub	sp, #16
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80163dc:	2300      	movs	r3, #0
 80163de:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80163e0:	2300      	movs	r3, #0
 80163e2:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80163e4:	2300      	movs	r3, #0
 80163e6:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	791b      	ldrb	r3, [r3, #4]
 80163ec:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80163ee:	7b7b      	ldrb	r3, [r7, #13]
 80163f0:	2b02      	cmp	r3, #2
 80163f2:	d801      	bhi.n	80163f8 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80163f4:	2306      	movs	r3, #6
 80163f6:	e089      	b.n	801650c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80163f8:	7b7b      	ldrb	r3, [r7, #13]
 80163fa:	2b0f      	cmp	r3, #15
 80163fc:	d901      	bls.n	8016402 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80163fe:	2303      	movs	r3, #3
 8016400:	e084      	b.n	801650c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	7a1b      	ldrb	r3, [r3, #8]
 8016408:	f343 0303 	sbfx	r3, r3, #0, #4
 801640c:	b25b      	sxtb	r3, r3
 801640e:	2207      	movs	r2, #7
 8016410:	2103      	movs	r1, #3
 8016412:	4618      	mov	r0, r3
 8016414:	f7fe f9a5 	bl	8014762 <RegionCommonValueInRange>
 8016418:	4603      	mov	r3, r0
 801641a:	2b00      	cmp	r3, #0
 801641c:	d101      	bne.n	8016422 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801641e:	2301      	movs	r3, #1
 8016420:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	7a1b      	ldrb	r3, [r3, #8]
 8016428:	f343 1303 	sbfx	r3, r3, #4, #4
 801642c:	b25b      	sxtb	r3, r3
 801642e:	2207      	movs	r2, #7
 8016430:	2103      	movs	r1, #3
 8016432:	4618      	mov	r0, r3
 8016434:	f7fe f995 	bl	8014762 <RegionCommonValueInRange>
 8016438:	4603      	mov	r3, r0
 801643a:	2b00      	cmp	r3, #0
 801643c:	d101      	bne.n	8016442 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801643e:	2301      	movs	r3, #1
 8016440:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	7a1b      	ldrb	r3, [r3, #8]
 8016448:	f343 0303 	sbfx	r3, r3, #0, #4
 801644c:	b25a      	sxtb	r2, r3
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	7a1b      	ldrb	r3, [r3, #8]
 8016454:	f343 1303 	sbfx	r3, r3, #4, #4
 8016458:	b25b      	sxtb	r3, r3
 801645a:	429a      	cmp	r2, r3
 801645c:	dd01      	ble.n	8016462 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801645e:	2301      	movs	r3, #1
 8016460:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8016462:	7bbb      	ldrb	r3, [r7, #14]
 8016464:	f083 0301 	eor.w	r3, r3, #1
 8016468:	b2db      	uxtb	r3, r3
 801646a:	2b00      	cmp	r3, #0
 801646c:	d010      	beq.n	8016490 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	f107 020c 	add.w	r2, r7, #12
 8016478:	4611      	mov	r1, r2
 801647a:	4618      	mov	r0, r3
 801647c:	f7fe fef2 	bl	8015264 <VerifyRfFreq>
 8016480:	4603      	mov	r3, r0
 8016482:	f083 0301 	eor.w	r3, r3, #1
 8016486:	b2db      	uxtb	r3, r3
 8016488:	2b00      	cmp	r3, #0
 801648a:	d001      	beq.n	8016490 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801648c:	2301      	movs	r3, #1
 801648e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016490:	7bfb      	ldrb	r3, [r7, #15]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d004      	beq.n	80164a0 <RegionEU868ChannelAdd+0xcc>
 8016496:	7bbb      	ldrb	r3, [r7, #14]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d001      	beq.n	80164a0 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801649c:	2306      	movs	r3, #6
 801649e:	e035      	b.n	801650c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80164a0:	7bfb      	ldrb	r3, [r7, #15]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d001      	beq.n	80164aa <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80164a6:	2305      	movs	r3, #5
 80164a8:	e030      	b.n	801650c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80164aa:	7bbb      	ldrb	r3, [r7, #14]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d001      	beq.n	80164b4 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80164b0:	2304      	movs	r3, #4
 80164b2:	e02b      	b.n	801650c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80164b4:	4b17      	ldr	r3, [pc, #92]	; (8016514 <RegionEU868ChannelAdd+0x140>)
 80164b6:	6819      	ldr	r1, [r3, #0]
 80164b8:	7b7a      	ldrb	r2, [r7, #13]
 80164ba:	4613      	mov	r3, r2
 80164bc:	005b      	lsls	r3, r3, #1
 80164be:	4413      	add	r3, r2
 80164c0:	009b      	lsls	r3, r3, #2
 80164c2:	18c8      	adds	r0, r1, r3
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	220c      	movs	r2, #12
 80164ca:	4619      	mov	r1, r3
 80164cc:	f000 f8fb 	bl	80166c6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80164d0:	4b10      	ldr	r3, [pc, #64]	; (8016514 <RegionEU868ChannelAdd+0x140>)
 80164d2:	6819      	ldr	r1, [r3, #0]
 80164d4:	7b7a      	ldrb	r2, [r7, #13]
 80164d6:	7b38      	ldrb	r0, [r7, #12]
 80164d8:	4613      	mov	r3, r2
 80164da:	005b      	lsls	r3, r3, #1
 80164dc:	4413      	add	r3, r2
 80164de:	009b      	lsls	r3, r3, #2
 80164e0:	440b      	add	r3, r1
 80164e2:	3309      	adds	r3, #9
 80164e4:	4602      	mov	r2, r0
 80164e6:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80164e8:	4b0a      	ldr	r3, [pc, #40]	; (8016514 <RegionEU868ChannelAdd+0x140>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80164f0:	b21a      	sxth	r2, r3
 80164f2:	7b7b      	ldrb	r3, [r7, #13]
 80164f4:	2101      	movs	r1, #1
 80164f6:	fa01 f303 	lsl.w	r3, r1, r3
 80164fa:	b21b      	sxth	r3, r3
 80164fc:	4313      	orrs	r3, r2
 80164fe:	b21a      	sxth	r2, r3
 8016500:	4b04      	ldr	r3, [pc, #16]	; (8016514 <RegionEU868ChannelAdd+0x140>)
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	b292      	uxth	r2, r2
 8016506:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 801650a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801650c:	4618      	mov	r0, r3
 801650e:	3710      	adds	r7, #16
 8016510:	46bd      	mov	sp, r7
 8016512:	bd80      	pop	{r7, pc}
 8016514:	20000ecc 	.word	0x20000ecc

08016518 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b086      	sub	sp, #24
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	781b      	ldrb	r3, [r3, #0]
 8016524:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016526:	7dfb      	ldrb	r3, [r7, #23]
 8016528:	2b02      	cmp	r3, #2
 801652a:	d801      	bhi.n	8016530 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801652c:	2300      	movs	r3, #0
 801652e:	e015      	b.n	801655c <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016530:	4b0c      	ldr	r3, [pc, #48]	; (8016564 <RegionEU868ChannelsRemove+0x4c>)
 8016532:	6819      	ldr	r1, [r3, #0]
 8016534:	7dfa      	ldrb	r2, [r7, #23]
 8016536:	4613      	mov	r3, r2
 8016538:	005b      	lsls	r3, r3, #1
 801653a:	4413      	add	r3, r2
 801653c:	009b      	lsls	r3, r3, #2
 801653e:	440b      	add	r3, r1
 8016540:	461a      	mov	r2, r3
 8016542:	2300      	movs	r3, #0
 8016544:	6013      	str	r3, [r2, #0]
 8016546:	6053      	str	r3, [r2, #4]
 8016548:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801654a:	4b06      	ldr	r3, [pc, #24]	; (8016564 <RegionEU868ChannelsRemove+0x4c>)
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	33c0      	adds	r3, #192	; 0xc0
 8016550:	7df9      	ldrb	r1, [r7, #23]
 8016552:	2210      	movs	r2, #16
 8016554:	4618      	mov	r0, r3
 8016556:	f7fe f921 	bl	801479c <RegionCommonChanDisable>
 801655a:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801655c:	4618      	mov	r0, r3
 801655e:	3718      	adds	r7, #24
 8016560:	46bd      	mov	sp, r7
 8016562:	bd80      	pop	{r7, pc}
 8016564:	20000ecc 	.word	0x20000ecc

08016568 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8016568:	b590      	push	{r4, r7, lr}
 801656a:	b085      	sub	sp, #20
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016576:	4b20      	ldr	r3, [pc, #128]	; (80165f8 <RegionEU868SetContinuousWave+0x90>)
 8016578:	681a      	ldr	r2, [r3, #0]
 801657a:	4b20      	ldr	r3, [pc, #128]	; (80165fc <RegionEU868SetContinuousWave+0x94>)
 801657c:	6819      	ldr	r1, [r3, #0]
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	781b      	ldrb	r3, [r3, #0]
 8016582:	461c      	mov	r4, r3
 8016584:	4623      	mov	r3, r4
 8016586:	005b      	lsls	r3, r3, #1
 8016588:	4423      	add	r3, r4
 801658a:	009b      	lsls	r3, r3, #2
 801658c:	440b      	add	r3, r1
 801658e:	3309      	adds	r3, #9
 8016590:	781b      	ldrb	r3, [r3, #0]
 8016592:	4619      	mov	r1, r3
 8016594:	460b      	mov	r3, r1
 8016596:	005b      	lsls	r3, r3, #1
 8016598:	440b      	add	r3, r1
 801659a:	00db      	lsls	r3, r3, #3
 801659c:	4413      	add	r3, r2
 801659e:	3302      	adds	r3, #2
 80165a0:	f993 3000 	ldrsb.w	r3, [r3]
 80165a4:	4619      	mov	r1, r3
 80165a6:	f7fe fdd4 	bl	8015152 <RegionCommonLimitTxPower>
 80165aa:	4603      	mov	r3, r0
 80165ac:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80165ae:	2300      	movs	r3, #0
 80165b0:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80165b2:	4b12      	ldr	r3, [pc, #72]	; (80165fc <RegionEU868SetContinuousWave+0x94>)
 80165b4:	681a      	ldr	r2, [r3, #0]
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	781b      	ldrb	r3, [r3, #0]
 80165ba:	4619      	mov	r1, r3
 80165bc:	460b      	mov	r3, r1
 80165be:	005b      	lsls	r3, r3, #1
 80165c0:	440b      	add	r3, r1
 80165c2:	009b      	lsls	r3, r3, #2
 80165c4:	4413      	add	r3, r2
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6859      	ldr	r1, [r3, #4]
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	689a      	ldr	r2, [r3, #8]
 80165d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7fe fc2c 	bl	8014e34 <RegionCommonComputeTxPower>
 80165dc:	4603      	mov	r3, r0
 80165de:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80165e0:	4b07      	ldr	r3, [pc, #28]	; (8016600 <RegionEU868SetContinuousWave+0x98>)
 80165e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165e4:	687a      	ldr	r2, [r7, #4]
 80165e6:	8992      	ldrh	r2, [r2, #12]
 80165e8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80165ec:	68b8      	ldr	r0, [r7, #8]
 80165ee:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80165f0:	bf00      	nop
 80165f2:	3714      	adds	r7, #20
 80165f4:	46bd      	mov	sp, r7
 80165f6:	bd90      	pop	{r4, r7, pc}
 80165f8:	20000ec8 	.word	0x20000ec8
 80165fc:	20000ecc 	.word	0x20000ecc
 8016600:	0801bed4 	.word	0x0801bed4

08016604 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016604:	b480      	push	{r7}
 8016606:	b085      	sub	sp, #20
 8016608:	af00      	add	r7, sp, #0
 801660a:	4603      	mov	r3, r0
 801660c:	71fb      	strb	r3, [r7, #7]
 801660e:	460b      	mov	r3, r1
 8016610:	71bb      	strb	r3, [r7, #6]
 8016612:	4613      	mov	r3, r2
 8016614:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8016616:	79ba      	ldrb	r2, [r7, #6]
 8016618:	797b      	ldrb	r3, [r7, #5]
 801661a:	1ad3      	subs	r3, r2, r3
 801661c:	b2db      	uxtb	r3, r3
 801661e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8016620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016624:	2b00      	cmp	r3, #0
 8016626:	da01      	bge.n	801662c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8016628:	2300      	movs	r3, #0
 801662a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801662c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801662e:	4618      	mov	r0, r3
 8016630:	3714      	adds	r7, #20
 8016632:	46bd      	mov	sp, r7
 8016634:	bc80      	pop	{r7}
 8016636:	4770      	bx	lr

08016638 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8016638:	b480      	push	{r7}
 801663a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801663c:	4b0d      	ldr	r3, [pc, #52]	; (8016674 <rand1+0x3c>)
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	4a0d      	ldr	r2, [pc, #52]	; (8016678 <rand1+0x40>)
 8016642:	fb02 f303 	mul.w	r3, r2, r3
 8016646:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801664a:	3339      	adds	r3, #57	; 0x39
 801664c:	4a09      	ldr	r2, [pc, #36]	; (8016674 <rand1+0x3c>)
 801664e:	6013      	str	r3, [r2, #0]
 8016650:	4b08      	ldr	r3, [pc, #32]	; (8016674 <rand1+0x3c>)
 8016652:	681a      	ldr	r2, [r3, #0]
 8016654:	2303      	movs	r3, #3
 8016656:	fba3 1302 	umull	r1, r3, r3, r2
 801665a:	1ad1      	subs	r1, r2, r3
 801665c:	0849      	lsrs	r1, r1, #1
 801665e:	440b      	add	r3, r1
 8016660:	0f99      	lsrs	r1, r3, #30
 8016662:	460b      	mov	r3, r1
 8016664:	07db      	lsls	r3, r3, #31
 8016666:	1a5b      	subs	r3, r3, r1
 8016668:	1ad1      	subs	r1, r2, r3
 801666a:	460b      	mov	r3, r1
}
 801666c:	4618      	mov	r0, r3
 801666e:	46bd      	mov	sp, r7
 8016670:	bc80      	pop	{r7}
 8016672:	4770      	bx	lr
 8016674:	2000011c 	.word	0x2000011c
 8016678:	41c64e6d 	.word	0x41c64e6d

0801667c <srand1>:

void srand1( uint32_t seed )
{
 801667c:	b480      	push	{r7}
 801667e:	b083      	sub	sp, #12
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
    next = seed;
 8016684:	4a03      	ldr	r2, [pc, #12]	; (8016694 <srand1+0x18>)
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	6013      	str	r3, [r2, #0]
}
 801668a:	bf00      	nop
 801668c:	370c      	adds	r7, #12
 801668e:	46bd      	mov	sp, r7
 8016690:	bc80      	pop	{r7}
 8016692:	4770      	bx	lr
 8016694:	2000011c 	.word	0x2000011c

08016698 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b082      	sub	sp, #8
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
 80166a0:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80166a2:	f7ff ffc9 	bl	8016638 <rand1>
 80166a6:	4602      	mov	r2, r0
 80166a8:	6839      	ldr	r1, [r7, #0]
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	1acb      	subs	r3, r1, r3
 80166ae:	3301      	adds	r3, #1
 80166b0:	fb92 f1f3 	sdiv	r1, r2, r3
 80166b4:	fb03 f301 	mul.w	r3, r3, r1
 80166b8:	1ad2      	subs	r2, r2, r3
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	4413      	add	r3, r2
}
 80166be:	4618      	mov	r0, r3
 80166c0:	3708      	adds	r7, #8
 80166c2:	46bd      	mov	sp, r7
 80166c4:	bd80      	pop	{r7, pc}

080166c6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80166c6:	b480      	push	{r7}
 80166c8:	b085      	sub	sp, #20
 80166ca:	af00      	add	r7, sp, #0
 80166cc:	60f8      	str	r0, [r7, #12]
 80166ce:	60b9      	str	r1, [r7, #8]
 80166d0:	4613      	mov	r3, r2
 80166d2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80166d4:	e007      	b.n	80166e6 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80166d6:	68ba      	ldr	r2, [r7, #8]
 80166d8:	1c53      	adds	r3, r2, #1
 80166da:	60bb      	str	r3, [r7, #8]
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	1c59      	adds	r1, r3, #1
 80166e0:	60f9      	str	r1, [r7, #12]
 80166e2:	7812      	ldrb	r2, [r2, #0]
 80166e4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80166e6:	88fb      	ldrh	r3, [r7, #6]
 80166e8:	1e5a      	subs	r2, r3, #1
 80166ea:	80fa      	strh	r2, [r7, #6]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d1f2      	bne.n	80166d6 <memcpy1+0x10>
    }
}
 80166f0:	bf00      	nop
 80166f2:	bf00      	nop
 80166f4:	3714      	adds	r7, #20
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bc80      	pop	{r7}
 80166fa:	4770      	bx	lr

080166fc <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80166fc:	b480      	push	{r7}
 80166fe:	b085      	sub	sp, #20
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	4613      	mov	r3, r2
 8016708:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801670a:	88fb      	ldrh	r3, [r7, #6]
 801670c:	3b01      	subs	r3, #1
 801670e:	68fa      	ldr	r2, [r7, #12]
 8016710:	4413      	add	r3, r2
 8016712:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016714:	e007      	b.n	8016726 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016716:	68ba      	ldr	r2, [r7, #8]
 8016718:	1c53      	adds	r3, r2, #1
 801671a:	60bb      	str	r3, [r7, #8]
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	1e59      	subs	r1, r3, #1
 8016720:	60f9      	str	r1, [r7, #12]
 8016722:	7812      	ldrb	r2, [r2, #0]
 8016724:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016726:	88fb      	ldrh	r3, [r7, #6]
 8016728:	1e5a      	subs	r2, r3, #1
 801672a:	80fa      	strh	r2, [r7, #6]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d1f2      	bne.n	8016716 <memcpyr+0x1a>
    }
}
 8016730:	bf00      	nop
 8016732:	bf00      	nop
 8016734:	3714      	adds	r7, #20
 8016736:	46bd      	mov	sp, r7
 8016738:	bc80      	pop	{r7}
 801673a:	4770      	bx	lr

0801673c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801673c:	b480      	push	{r7}
 801673e:	b083      	sub	sp, #12
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
 8016744:	460b      	mov	r3, r1
 8016746:	70fb      	strb	r3, [r7, #3]
 8016748:	4613      	mov	r3, r2
 801674a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801674c:	e004      	b.n	8016758 <memset1+0x1c>
    {
        *dst++ = value;
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	1c5a      	adds	r2, r3, #1
 8016752:	607a      	str	r2, [r7, #4]
 8016754:	78fa      	ldrb	r2, [r7, #3]
 8016756:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016758:	883b      	ldrh	r3, [r7, #0]
 801675a:	1e5a      	subs	r2, r3, #1
 801675c:	803a      	strh	r2, [r7, #0]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d1f5      	bne.n	801674e <memset1+0x12>
    }
}
 8016762:	bf00      	nop
 8016764:	bf00      	nop
 8016766:	370c      	adds	r7, #12
 8016768:	46bd      	mov	sp, r7
 801676a:	bc80      	pop	{r7}
 801676c:	4770      	bx	lr
	...

08016770 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016770:	b480      	push	{r7}
 8016772:	b087      	sub	sp, #28
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
 8016778:	460b      	mov	r3, r1
 801677a:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 801677c:	4b1a      	ldr	r3, [pc, #104]	; (80167e8 <Crc32+0x78>)
 801677e:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016780:	f04f 33ff 	mov.w	r3, #4294967295
 8016784:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d101      	bne.n	8016790 <Crc32+0x20>
    {
        return 0;
 801678c:	2300      	movs	r3, #0
 801678e:	e026      	b.n	80167de <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016790:	2300      	movs	r3, #0
 8016792:	827b      	strh	r3, [r7, #18]
 8016794:	e01d      	b.n	80167d2 <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 8016796:	8a7b      	ldrh	r3, [r7, #18]
 8016798:	687a      	ldr	r2, [r7, #4]
 801679a:	4413      	add	r3, r2
 801679c:	781b      	ldrb	r3, [r3, #0]
 801679e:	461a      	mov	r2, r3
 80167a0:	697b      	ldr	r3, [r7, #20]
 80167a2:	4053      	eors	r3, r2
 80167a4:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80167a6:	2300      	movs	r3, #0
 80167a8:	823b      	strh	r3, [r7, #16]
 80167aa:	e00c      	b.n	80167c6 <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80167ac:	697b      	ldr	r3, [r7, #20]
 80167ae:	085a      	lsrs	r2, r3, #1
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	f003 0301 	and.w	r3, r3, #1
 80167b6:	4259      	negs	r1, r3
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	400b      	ands	r3, r1
 80167bc:	4053      	eors	r3, r2
 80167be:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80167c0:	8a3b      	ldrh	r3, [r7, #16]
 80167c2:	3301      	adds	r3, #1
 80167c4:	823b      	strh	r3, [r7, #16]
 80167c6:	8a3b      	ldrh	r3, [r7, #16]
 80167c8:	2b07      	cmp	r3, #7
 80167ca:	d9ef      	bls.n	80167ac <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 80167cc:	8a7b      	ldrh	r3, [r7, #18]
 80167ce:	3301      	adds	r3, #1
 80167d0:	827b      	strh	r3, [r7, #18]
 80167d2:	8a7a      	ldrh	r2, [r7, #18]
 80167d4:	887b      	ldrh	r3, [r7, #2]
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d3dd      	bcc.n	8016796 <Crc32+0x26>
        }
    }

    return ~crc;
 80167da:	697b      	ldr	r3, [r7, #20]
 80167dc:	43db      	mvns	r3, r3
}
 80167de:	4618      	mov	r0, r3
 80167e0:	371c      	adds	r7, #28
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bc80      	pop	{r7}
 80167e6:	4770      	bx	lr
 80167e8:	edb88320 	.word	0xedb88320

080167ec <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b084      	sub	sp, #16
 80167f0:	af02      	add	r7, sp, #8
 80167f2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80167f4:	4a21      	ldr	r2, [pc, #132]	; (801687c <RadioInit+0x90>)
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80167fa:	4b21      	ldr	r3, [pc, #132]	; (8016880 <RadioInit+0x94>)
 80167fc:	2200      	movs	r2, #0
 80167fe:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016800:	4b1f      	ldr	r3, [pc, #124]	; (8016880 <RadioInit+0x94>)
 8016802:	2200      	movs	r2, #0
 8016804:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016806:	4b1e      	ldr	r3, [pc, #120]	; (8016880 <RadioInit+0x94>)
 8016808:	2200      	movs	r2, #0
 801680a:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 801680c:	481d      	ldr	r0, [pc, #116]	; (8016884 <RadioInit+0x98>)
 801680e:	f001 feb7 	bl	8018580 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8016812:	2000      	movs	r0, #0
 8016814:	f001 f81e 	bl	8017854 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8016818:	f002 f948 	bl	8018aac <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801681c:	2100      	movs	r1, #0
 801681e:	2000      	movs	r0, #0
 8016820:	f002 fc9e 	bl	8019160 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8016824:	2204      	movs	r2, #4
 8016826:	2100      	movs	r1, #0
 8016828:	2001      	movs	r0, #1
 801682a:	f002 fac9 	bl	8018dc0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801682e:	2300      	movs	r3, #0
 8016830:	2200      	movs	r2, #0
 8016832:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016836:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801683a:	f002 f9fd 	bl	8018c38 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801683e:	f000 fe9b 	bl	8017578 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016842:	2300      	movs	r3, #0
 8016844:	9300      	str	r3, [sp, #0]
 8016846:	4b10      	ldr	r3, [pc, #64]	; (8016888 <RadioInit+0x9c>)
 8016848:	2200      	movs	r2, #0
 801684a:	f04f 31ff 	mov.w	r1, #4294967295
 801684e:	480f      	ldr	r0, [pc, #60]	; (801688c <RadioInit+0xa0>)
 8016850:	f003 fe86 	bl	801a560 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016854:	2300      	movs	r3, #0
 8016856:	9300      	str	r3, [sp, #0]
 8016858:	4b0d      	ldr	r3, [pc, #52]	; (8016890 <RadioInit+0xa4>)
 801685a:	2200      	movs	r2, #0
 801685c:	f04f 31ff 	mov.w	r1, #4294967295
 8016860:	480c      	ldr	r0, [pc, #48]	; (8016894 <RadioInit+0xa8>)
 8016862:	f003 fe7d 	bl	801a560 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016866:	4809      	ldr	r0, [pc, #36]	; (801688c <RadioInit+0xa0>)
 8016868:	f003 ff1e 	bl	801a6a8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801686c:	4809      	ldr	r0, [pc, #36]	; (8016894 <RadioInit+0xa8>)
 801686e:	f003 ff1b 	bl	801a6a8 <UTIL_TIMER_Stop>
}
 8016872:	bf00      	nop
 8016874:	3708      	adds	r7, #8
 8016876:	46bd      	mov	sp, r7
 8016878:	bd80      	pop	{r7, pc}
 801687a:	bf00      	nop
 801687c:	20000fd0 	.word	0x20000fd0
 8016880:	200018bc 	.word	0x200018bc
 8016884:	08017939 	.word	0x08017939
 8016888:	080178c1 	.word	0x080178c1
 801688c:	20001914 	.word	0x20001914
 8016890:	080178d5 	.word	0x080178d5
 8016894:	2000192c 	.word	0x2000192c

08016898 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016898:	b580      	push	{r7, lr}
 801689a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801689c:	f001 feb2 	bl	8018604 <SUBGRF_GetOperatingMode>
 80168a0:	4603      	mov	r3, r0
 80168a2:	2b07      	cmp	r3, #7
 80168a4:	d00a      	beq.n	80168bc <RadioGetStatus+0x24>
 80168a6:	2b07      	cmp	r3, #7
 80168a8:	dc0a      	bgt.n	80168c0 <RadioGetStatus+0x28>
 80168aa:	2b04      	cmp	r3, #4
 80168ac:	d002      	beq.n	80168b4 <RadioGetStatus+0x1c>
 80168ae:	2b05      	cmp	r3, #5
 80168b0:	d002      	beq.n	80168b8 <RadioGetStatus+0x20>
 80168b2:	e005      	b.n	80168c0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80168b4:	2302      	movs	r3, #2
 80168b6:	e004      	b.n	80168c2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80168b8:	2301      	movs	r3, #1
 80168ba:	e002      	b.n	80168c2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80168bc:	2303      	movs	r3, #3
 80168be:	e000      	b.n	80168c2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80168c0:	2300      	movs	r3, #0
    }
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	bd80      	pop	{r7, pc}
	...

080168c8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	4603      	mov	r3, r0
 80168d0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80168d2:	4a25      	ldr	r2, [pc, #148]	; (8016968 <RadioSetModem+0xa0>)
 80168d4:	79fb      	ldrb	r3, [r7, #7]
 80168d6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80168d8:	79fb      	ldrb	r3, [r7, #7]
 80168da:	4618      	mov	r0, r3
 80168dc:	f003 f805 	bl	80198ea <RFW_SetRadioModem>
    switch( modem )
 80168e0:	79fb      	ldrb	r3, [r7, #7]
 80168e2:	3b01      	subs	r3, #1
 80168e4:	2b03      	cmp	r3, #3
 80168e6:	d80b      	bhi.n	8016900 <RadioSetModem+0x38>
 80168e8:	a201      	add	r2, pc, #4	; (adr r2, 80168f0 <RadioSetModem+0x28>)
 80168ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168ee:	bf00      	nop
 80168f0:	0801690f 	.word	0x0801690f
 80168f4:	08016935 	.word	0x08016935
 80168f8:	08016943 	.word	0x08016943
 80168fc:	08016951 	.word	0x08016951
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016900:	2000      	movs	r0, #0
 8016902:	f002 fa37 	bl	8018d74 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016906:	4b18      	ldr	r3, [pc, #96]	; (8016968 <RadioSetModem+0xa0>)
 8016908:	2200      	movs	r2, #0
 801690a:	735a      	strb	r2, [r3, #13]
        break;
 801690c:	e028      	b.n	8016960 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801690e:	2001      	movs	r0, #1
 8016910:	f002 fa30 	bl	8018d74 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016914:	4b14      	ldr	r3, [pc, #80]	; (8016968 <RadioSetModem+0xa0>)
 8016916:	7b5a      	ldrb	r2, [r3, #13]
 8016918:	4b13      	ldr	r3, [pc, #76]	; (8016968 <RadioSetModem+0xa0>)
 801691a:	7b1b      	ldrb	r3, [r3, #12]
 801691c:	429a      	cmp	r2, r3
 801691e:	d01e      	beq.n	801695e <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016920:	4b11      	ldr	r3, [pc, #68]	; (8016968 <RadioSetModem+0xa0>)
 8016922:	7b1a      	ldrb	r2, [r3, #12]
 8016924:	4b10      	ldr	r3, [pc, #64]	; (8016968 <RadioSetModem+0xa0>)
 8016926:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016928:	4b0f      	ldr	r3, [pc, #60]	; (8016968 <RadioSetModem+0xa0>)
 801692a:	7b5b      	ldrb	r3, [r3, #13]
 801692c:	4618      	mov	r0, r3
 801692e:	f000 ff91 	bl	8017854 <RadioSetPublicNetwork>
        }
        break;
 8016932:	e014      	b.n	801695e <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016934:	2002      	movs	r0, #2
 8016936:	f002 fa1d 	bl	8018d74 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801693a:	4b0b      	ldr	r3, [pc, #44]	; (8016968 <RadioSetModem+0xa0>)
 801693c:	2200      	movs	r2, #0
 801693e:	735a      	strb	r2, [r3, #13]
        break;
 8016940:	e00e      	b.n	8016960 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016942:	2002      	movs	r0, #2
 8016944:	f002 fa16 	bl	8018d74 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016948:	4b07      	ldr	r3, [pc, #28]	; (8016968 <RadioSetModem+0xa0>)
 801694a:	2200      	movs	r2, #0
 801694c:	735a      	strb	r2, [r3, #13]
        break;
 801694e:	e007      	b.n	8016960 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016950:	2000      	movs	r0, #0
 8016952:	f002 fa0f 	bl	8018d74 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016956:	4b04      	ldr	r3, [pc, #16]	; (8016968 <RadioSetModem+0xa0>)
 8016958:	2200      	movs	r2, #0
 801695a:	735a      	strb	r2, [r3, #13]
        break;
 801695c:	e000      	b.n	8016960 <RadioSetModem+0x98>
        break;
 801695e:	bf00      	nop
    }
}
 8016960:	bf00      	nop
 8016962:	3708      	adds	r7, #8
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}
 8016968:	200018bc 	.word	0x200018bc

0801696c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b082      	sub	sp, #8
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016974:	6878      	ldr	r0, [r7, #4]
 8016976:	f002 f9bb 	bl	8018cf0 <SUBGRF_SetRfFrequency>
}
 801697a:	bf00      	nop
 801697c:	3708      	adds	r7, #8
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}

08016982 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016982:	b580      	push	{r7, lr}
 8016984:	b090      	sub	sp, #64	; 0x40
 8016986:	af0a      	add	r7, sp, #40	; 0x28
 8016988:	60f8      	str	r0, [r7, #12]
 801698a:	60b9      	str	r1, [r7, #8]
 801698c:	603b      	str	r3, [r7, #0]
 801698e:	4613      	mov	r3, r2
 8016990:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016992:	2301      	movs	r3, #1
 8016994:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016996:	2300      	movs	r3, #0
 8016998:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801699a:	2300      	movs	r3, #0
 801699c:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 801699e:	f000 fdfe 	bl	801759e <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 80169a2:	2000      	movs	r0, #0
 80169a4:	f7ff ff90 	bl	80168c8 <RadioSetModem>

    RadioSetChannel( freq );
 80169a8:	68f8      	ldr	r0, [r7, #12]
 80169aa:	f7ff ffdf 	bl	801696c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80169ae:	2301      	movs	r3, #1
 80169b0:	9309      	str	r3, [sp, #36]	; 0x24
 80169b2:	2300      	movs	r3, #0
 80169b4:	9308      	str	r3, [sp, #32]
 80169b6:	2300      	movs	r3, #0
 80169b8:	9307      	str	r3, [sp, #28]
 80169ba:	2300      	movs	r3, #0
 80169bc:	9306      	str	r3, [sp, #24]
 80169be:	2300      	movs	r3, #0
 80169c0:	9305      	str	r3, [sp, #20]
 80169c2:	2300      	movs	r3, #0
 80169c4:	9304      	str	r3, [sp, #16]
 80169c6:	2300      	movs	r3, #0
 80169c8:	9303      	str	r3, [sp, #12]
 80169ca:	2300      	movs	r3, #0
 80169cc:	9302      	str	r3, [sp, #8]
 80169ce:	2303      	movs	r3, #3
 80169d0:	9301      	str	r3, [sp, #4]
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	9300      	str	r3, [sp, #0]
 80169d6:	2300      	movs	r3, #0
 80169d8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80169dc:	68b9      	ldr	r1, [r7, #8]
 80169de:	2000      	movs	r0, #0
 80169e0:	f000 f840 	bl	8016a64 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80169e4:	2000      	movs	r0, #0
 80169e6:	f000 fde1 	bl	80175ac <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80169ea:	f000 ff61 	bl	80178b0 <RadioGetWakeupTime>
 80169ee:	4603      	mov	r3, r0
 80169f0:	4618      	mov	r0, r3
 80169f2:	f7eb faf8 	bl	8001fe6 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80169f6:	f003 ff71 	bl	801a8dc <UTIL_TIMER_GetCurrentTime>
 80169fa:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80169fc:	e00d      	b.n	8016a1a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80169fe:	2000      	movs	r0, #0
 8016a00:	f000 fea6 	bl	8017750 <RadioRssi>
 8016a04:	4603      	mov	r3, r0
 8016a06:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016a08:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016a10:	429a      	cmp	r2, r3
 8016a12:	dd02      	ble.n	8016a1a <RadioIsChannelFree+0x98>
        {
            status = false;
 8016a14:	2300      	movs	r3, #0
 8016a16:	75fb      	strb	r3, [r7, #23]
            break;
 8016a18:	e006      	b.n	8016a28 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016a1a:	6938      	ldr	r0, [r7, #16]
 8016a1c:	f003 ff70 	bl	801a900 <UTIL_TIMER_GetElapsedTime>
 8016a20:	4602      	mov	r2, r0
 8016a22:	683b      	ldr	r3, [r7, #0]
 8016a24:	4293      	cmp	r3, r2
 8016a26:	d8ea      	bhi.n	80169fe <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8016a28:	f000 fdb9 	bl	801759e <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8016a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a2e:	4618      	mov	r0, r3
 8016a30:	3718      	adds	r7, #24
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}

08016a36 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016a36:	b580      	push	{r7, lr}
 8016a38:	b082      	sub	sp, #8
 8016a3a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8016a40:	2001      	movs	r0, #1
 8016a42:	f7ff ff41 	bl	80168c8 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016a46:	2300      	movs	r3, #0
 8016a48:	2200      	movs	r2, #0
 8016a4a:	2100      	movs	r1, #0
 8016a4c:	2000      	movs	r0, #0
 8016a4e:	f002 f8f3 	bl	8018c38 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016a52:	f001 fea8 	bl	80187a6 <SUBGRF_GetRandom>
 8016a56:	6078      	str	r0, [r7, #4]

    return rnd;
 8016a58:	687b      	ldr	r3, [r7, #4]
}
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	3708      	adds	r7, #8
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	bd80      	pop	{r7, pc}
	...

08016a64 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b08a      	sub	sp, #40	; 0x28
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	60b9      	str	r1, [r7, #8]
 8016a6c:	607a      	str	r2, [r7, #4]
 8016a6e:	461a      	mov	r2, r3
 8016a70:	4603      	mov	r3, r0
 8016a72:	73fb      	strb	r3, [r7, #15]
 8016a74:	4613      	mov	r3, r2
 8016a76:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8016a78:	4abd      	ldr	r2, [pc, #756]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016a7a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016a7e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016a80:	f002 fef1 	bl	8019866 <RFW_DeInit>
    if( rxContinuous == true )
 8016a84:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d001      	beq.n	8016a90 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8016a90:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d004      	beq.n	8016aa2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016a98:	4ab6      	ldr	r2, [pc, #728]	; (8016d74 <RadioSetRxConfig+0x310>)
 8016a9a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016a9e:	7013      	strb	r3, [r2, #0]
 8016aa0:	e002      	b.n	8016aa8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016aa2:	4bb4      	ldr	r3, [pc, #720]	; (8016d74 <RadioSetRxConfig+0x310>)
 8016aa4:	22ff      	movs	r2, #255	; 0xff
 8016aa6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016aa8:	7bfb      	ldrb	r3, [r7, #15]
 8016aaa:	2b04      	cmp	r3, #4
 8016aac:	d009      	beq.n	8016ac2 <RadioSetRxConfig+0x5e>
 8016aae:	2b04      	cmp	r3, #4
 8016ab0:	f300 81da 	bgt.w	8016e68 <RadioSetRxConfig+0x404>
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	f000 80bf 	beq.w	8016c38 <RadioSetRxConfig+0x1d4>
 8016aba:	2b01      	cmp	r3, #1
 8016abc:	f000 812c 	beq.w	8016d18 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016ac0:	e1d2      	b.n	8016e68 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016ac2:	2001      	movs	r0, #1
 8016ac4:	f001 ffb4 	bl	8018a30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016ac8:	4ba9      	ldr	r3, [pc, #676]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016aca:	2200      	movs	r2, #0
 8016acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016ad0:	4aa7      	ldr	r2, [pc, #668]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016ad6:	4ba6      	ldr	r3, [pc, #664]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016ad8:	2209      	movs	r2, #9
 8016ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016ade:	4ba4      	ldr	r3, [pc, #656]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016ae0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016ae4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016ae6:	68b8      	ldr	r0, [r7, #8]
 8016ae8:	f002 fdee 	bl	80196c8 <SUBGRF_GetFskBandwidthRegValue>
 8016aec:	4603      	mov	r3, r0
 8016aee:	461a      	mov	r2, r3
 8016af0:	4b9f      	ldr	r3, [pc, #636]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016af6:	4b9e      	ldr	r3, [pc, #632]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016af8:	2200      	movs	r2, #0
 8016afa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016afc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016afe:	00db      	lsls	r3, r3, #3
 8016b00:	b29a      	uxth	r2, r3
 8016b02:	4b9b      	ldr	r3, [pc, #620]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016b04:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016b06:	4b9a      	ldr	r3, [pc, #616]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016b08:	2200      	movs	r2, #0
 8016b0a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016b0c:	4b98      	ldr	r3, [pc, #608]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016b0e:	2210      	movs	r2, #16
 8016b10:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016b12:	4b97      	ldr	r3, [pc, #604]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016b14:	2200      	movs	r2, #0
 8016b16:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016b18:	4b95      	ldr	r3, [pc, #596]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016b1e:	4b95      	ldr	r3, [pc, #596]	; (8016d74 <RadioSetRxConfig+0x310>)
 8016b20:	781a      	ldrb	r2, [r3, #0]
 8016b22:	4b93      	ldr	r3, [pc, #588]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016b24:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016b26:	4b92      	ldr	r3, [pc, #584]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016b28:	2201      	movs	r2, #1
 8016b2a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016b2c:	4b90      	ldr	r3, [pc, #576]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016b2e:	2200      	movs	r2, #0
 8016b30:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016b32:	2004      	movs	r0, #4
 8016b34:	f7ff fec8 	bl	80168c8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016b38:	488f      	ldr	r0, [pc, #572]	; (8016d78 <RadioSetRxConfig+0x314>)
 8016b3a:	f002 f9a7 	bl	8018e8c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b3e:	488f      	ldr	r0, [pc, #572]	; (8016d7c <RadioSetRxConfig+0x318>)
 8016b40:	f002 fa70 	bl	8019024 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016b44:	4a8e      	ldr	r2, [pc, #568]	; (8016d80 <RadioSetRxConfig+0x31c>)
 8016b46:	f107 031c 	add.w	r3, r7, #28
 8016b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016b4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8016b52:	f107 031c 	add.w	r3, r7, #28
 8016b56:	4618      	mov	r0, r3
 8016b58:	f001 fda3 	bl	80186a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016b5c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016b60:	f001 fdee 	bl	8018740 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8016b64:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016b68:	f000 fe11 	bl	801778e <RadioRead>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b76:	f023 0310 	bic.w	r3, r3, #16
 8016b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8016b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b82:	4619      	mov	r1, r3
 8016b84:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016b88:	f000 fdef 	bl	801776a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8016b8c:	2104      	movs	r1, #4
 8016b8e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8016b92:	f000 fdea 	bl	801776a <RadioWrite>
            modReg= RadioRead(0x89b);
 8016b96:	f640 009b 	movw	r0, #2203	; 0x89b
 8016b9a:	f000 fdf8 	bl	801778e <RadioRead>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ba8:	f023 031c 	bic.w	r3, r3, #28
 8016bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8016bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bb4:	f043 0308 	orr.w	r3, r3, #8
 8016bb8:	b2db      	uxtb	r3, r3
 8016bba:	4619      	mov	r1, r3
 8016bbc:	f640 009b 	movw	r0, #2203	; 0x89b
 8016bc0:	f000 fdd3 	bl	801776a <RadioWrite>
            modReg= RadioRead(0x6d1);
 8016bc4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016bc8:	f000 fde1 	bl	801778e <RadioRead>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bd6:	f023 0318 	bic.w	r3, r3, #24
 8016bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8016bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016be2:	f043 0318 	orr.w	r3, r3, #24
 8016be6:	b2db      	uxtb	r3, r3
 8016be8:	4619      	mov	r1, r3
 8016bea:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016bee:	f000 fdbc 	bl	801776a <RadioWrite>
            modReg= RadioRead(0x6ac);
 8016bf2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016bf6:	f000 fdca 	bl	801778e <RadioRead>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8016c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c10:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8016c14:	b2db      	uxtb	r3, r3
 8016c16:	4619      	mov	r1, r3
 8016c18:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016c1c:	f000 fda5 	bl	801776a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016c20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016c22:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016c26:	fb02 f303 	mul.w	r3, r2, r3
 8016c2a:	461a      	mov	r2, r3
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c32:	4a4f      	ldr	r2, [pc, #316]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016c34:	6093      	str	r3, [r2, #8]
            break;
 8016c36:	e118      	b.n	8016e6a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016c38:	2000      	movs	r0, #0
 8016c3a:	f001 fef9 	bl	8018a30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016c3e:	4b4c      	ldr	r3, [pc, #304]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016c40:	2200      	movs	r2, #0
 8016c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016c46:	4a4a      	ldr	r2, [pc, #296]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016c4c:	4b48      	ldr	r3, [pc, #288]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016c4e:	220b      	movs	r2, #11
 8016c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016c54:	68b8      	ldr	r0, [r7, #8]
 8016c56:	f002 fd37 	bl	80196c8 <SUBGRF_GetFskBandwidthRegValue>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	461a      	mov	r2, r3
 8016c5e:	4b44      	ldr	r3, [pc, #272]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016c64:	4b42      	ldr	r3, [pc, #264]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016c66:	2200      	movs	r2, #0
 8016c68:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016c6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016c6c:	00db      	lsls	r3, r3, #3
 8016c6e:	b29a      	uxth	r2, r3
 8016c70:	4b3f      	ldr	r3, [pc, #252]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016c72:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016c74:	4b3e      	ldr	r3, [pc, #248]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016c76:	2204      	movs	r2, #4
 8016c78:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016c7a:	4b3d      	ldr	r3, [pc, #244]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016c7c:	2218      	movs	r2, #24
 8016c7e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016c80:	4b3b      	ldr	r3, [pc, #236]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016c82:	2200      	movs	r2, #0
 8016c84:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016c86:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016c8a:	f083 0301 	eor.w	r3, r3, #1
 8016c8e:	b2db      	uxtb	r3, r3
 8016c90:	461a      	mov	r2, r3
 8016c92:	4b37      	ldr	r3, [pc, #220]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016c94:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016c96:	4b37      	ldr	r3, [pc, #220]	; (8016d74 <RadioSetRxConfig+0x310>)
 8016c98:	781a      	ldrb	r2, [r3, #0]
 8016c9a:	4b35      	ldr	r3, [pc, #212]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016c9c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016c9e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d003      	beq.n	8016cae <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016ca6:	4b32      	ldr	r3, [pc, #200]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016ca8:	22f2      	movs	r2, #242	; 0xf2
 8016caa:	75da      	strb	r2, [r3, #23]
 8016cac:	e002      	b.n	8016cb4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016cae:	4b30      	ldr	r3, [pc, #192]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016cb0:	2201      	movs	r2, #1
 8016cb2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016cb4:	4b2e      	ldr	r3, [pc, #184]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016cb6:	2201      	movs	r2, #1
 8016cb8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016cba:	f000 fc70 	bl	801759e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016cbe:	4b2c      	ldr	r3, [pc, #176]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	bf14      	ite	ne
 8016cc8:	2301      	movne	r3, #1
 8016cca:	2300      	moveq	r3, #0
 8016ccc:	b2db      	uxtb	r3, r3
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7ff fdfa 	bl	80168c8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016cd4:	4828      	ldr	r0, [pc, #160]	; (8016d78 <RadioSetRxConfig+0x314>)
 8016cd6:	f002 f8d9 	bl	8018e8c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016cda:	4828      	ldr	r0, [pc, #160]	; (8016d7c <RadioSetRxConfig+0x318>)
 8016cdc:	f002 f9a2 	bl	8019024 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016ce0:	4a28      	ldr	r2, [pc, #160]	; (8016d84 <RadioSetRxConfig+0x320>)
 8016ce2:	f107 0314 	add.w	r3, r7, #20
 8016ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016cea:	e883 0003 	stmia.w	r3, {r0, r1}
 8016cee:	f107 0314 	add.w	r3, r7, #20
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f001 fcd5 	bl	80186a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016cf8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016cfc:	f001 fd20 	bl	8018740 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016d00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016d02:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016d06:	fb02 f303 	mul.w	r3, r2, r3
 8016d0a:	461a      	mov	r2, r3
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016d12:	4a17      	ldr	r2, [pc, #92]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016d14:	6093      	str	r3, [r2, #8]
            break;
 8016d16:	e0a8      	b.n	8016e6a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016d18:	2000      	movs	r0, #0
 8016d1a:	f001 fe89 	bl	8018a30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016d1e:	4b14      	ldr	r3, [pc, #80]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016d20:	2201      	movs	r2, #1
 8016d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	b2da      	uxtb	r2, r3
 8016d2a:	4b11      	ldr	r3, [pc, #68]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016d30:	4a15      	ldr	r2, [pc, #84]	; (8016d88 <RadioSetRxConfig+0x324>)
 8016d32:	68bb      	ldr	r3, [r7, #8]
 8016d34:	4413      	add	r3, r2
 8016d36:	781a      	ldrb	r2, [r3, #0]
 8016d38:	4b0d      	ldr	r3, [pc, #52]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016d3e:	4a0c      	ldr	r2, [pc, #48]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016d40:	7bbb      	ldrb	r3, [r7, #14]
 8016d42:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016d46:	68bb      	ldr	r3, [r7, #8]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d105      	bne.n	8016d58 <RadioSetRxConfig+0x2f4>
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	2b0b      	cmp	r3, #11
 8016d50:	d008      	beq.n	8016d64 <RadioSetRxConfig+0x300>
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	2b0c      	cmp	r3, #12
 8016d56:	d005      	beq.n	8016d64 <RadioSetRxConfig+0x300>
 8016d58:	68bb      	ldr	r3, [r7, #8]
 8016d5a:	2b01      	cmp	r3, #1
 8016d5c:	d116      	bne.n	8016d8c <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	2b0c      	cmp	r3, #12
 8016d62:	d113      	bne.n	8016d8c <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016d64:	4b02      	ldr	r3, [pc, #8]	; (8016d70 <RadioSetRxConfig+0x30c>)
 8016d66:	2201      	movs	r2, #1
 8016d68:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016d6c:	e012      	b.n	8016d94 <RadioSetRxConfig+0x330>
 8016d6e:	bf00      	nop
 8016d70:	200018bc 	.word	0x200018bc
 8016d74:	20000120 	.word	0x20000120
 8016d78:	200018f4 	.word	0x200018f4
 8016d7c:	200018ca 	.word	0x200018ca
 8016d80:	0801b950 	.word	0x0801b950
 8016d84:	0801b958 	.word	0x0801b958
 8016d88:	0801bf58 	.word	0x0801bf58
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016d8c:	4b39      	ldr	r3, [pc, #228]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016d8e:	2200      	movs	r2, #0
 8016d90:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016d94:	4b37      	ldr	r3, [pc, #220]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016d96:	2201      	movs	r2, #1
 8016d98:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016d9a:	4b36      	ldr	r3, [pc, #216]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016d9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016da0:	2b05      	cmp	r3, #5
 8016da2:	d004      	beq.n	8016dae <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016da4:	4b33      	ldr	r3, [pc, #204]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016daa:	2b06      	cmp	r3, #6
 8016dac:	d10a      	bne.n	8016dc4 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8016dae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016db0:	2b0b      	cmp	r3, #11
 8016db2:	d803      	bhi.n	8016dbc <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016db4:	4b2f      	ldr	r3, [pc, #188]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016db6:	220c      	movs	r2, #12
 8016db8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016dba:	e006      	b.n	8016dca <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016dbc:	4a2d      	ldr	r2, [pc, #180]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016dbe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016dc0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016dc2:	e002      	b.n	8016dca <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016dc4:	4a2b      	ldr	r2, [pc, #172]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016dc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016dc8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016dca:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016dce:	4b29      	ldr	r3, [pc, #164]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016dd0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016dd2:	4b29      	ldr	r3, [pc, #164]	; (8016e78 <RadioSetRxConfig+0x414>)
 8016dd4:	781a      	ldrb	r2, [r3, #0]
 8016dd6:	4b27      	ldr	r3, [pc, #156]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016dd8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016dda:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016dde:	4b25      	ldr	r3, [pc, #148]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016de0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016de4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016de8:	4b22      	ldr	r3, [pc, #136]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016dea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016dee:	f000 fbd6 	bl	801759e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016df2:	4b20      	ldr	r3, [pc, #128]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016df4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	bf14      	ite	ne
 8016dfc:	2301      	movne	r3, #1
 8016dfe:	2300      	moveq	r3, #0
 8016e00:	b2db      	uxtb	r3, r3
 8016e02:	4618      	mov	r0, r3
 8016e04:	f7ff fd60 	bl	80168c8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016e08:	481c      	ldr	r0, [pc, #112]	; (8016e7c <RadioSetRxConfig+0x418>)
 8016e0a:	f002 f83f 	bl	8018e8c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016e0e:	481c      	ldr	r0, [pc, #112]	; (8016e80 <RadioSetRxConfig+0x41c>)
 8016e10:	f002 f908 	bl	8019024 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016e14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016e16:	b2db      	uxtb	r3, r3
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f001 fe18 	bl	8018a4e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016e1e:	4b15      	ldr	r3, [pc, #84]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016e20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016e24:	2b01      	cmp	r3, #1
 8016e26:	d10d      	bne.n	8016e44 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8016e28:	f240 7036 	movw	r0, #1846	; 0x736
 8016e2c:	f002 fa56 	bl	80192dc <SUBGRF_ReadRegister>
 8016e30:	4603      	mov	r3, r0
 8016e32:	f023 0304 	bic.w	r3, r3, #4
 8016e36:	b2db      	uxtb	r3, r3
 8016e38:	4619      	mov	r1, r3
 8016e3a:	f240 7036 	movw	r0, #1846	; 0x736
 8016e3e:	f002 fa39 	bl	80192b4 <SUBGRF_WriteRegister>
 8016e42:	e00c      	b.n	8016e5e <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8016e44:	f240 7036 	movw	r0, #1846	; 0x736
 8016e48:	f002 fa48 	bl	80192dc <SUBGRF_ReadRegister>
 8016e4c:	4603      	mov	r3, r0
 8016e4e:	f043 0304 	orr.w	r3, r3, #4
 8016e52:	b2db      	uxtb	r3, r3
 8016e54:	4619      	mov	r1, r3
 8016e56:	f240 7036 	movw	r0, #1846	; 0x736
 8016e5a:	f002 fa2b 	bl	80192b4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016e5e:	4b05      	ldr	r3, [pc, #20]	; (8016e74 <RadioSetRxConfig+0x410>)
 8016e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e64:	609a      	str	r2, [r3, #8]
            break;
 8016e66:	e000      	b.n	8016e6a <RadioSetRxConfig+0x406>
            break;
 8016e68:	bf00      	nop
    }
}
 8016e6a:	bf00      	nop
 8016e6c:	3728      	adds	r7, #40	; 0x28
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}
 8016e72:	bf00      	nop
 8016e74:	200018bc 	.word	0x200018bc
 8016e78:	20000120 	.word	0x20000120
 8016e7c:	200018f4 	.word	0x200018f4
 8016e80:	200018ca 	.word	0x200018ca

08016e84 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b086      	sub	sp, #24
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	60ba      	str	r2, [r7, #8]
 8016e8c:	607b      	str	r3, [r7, #4]
 8016e8e:	4603      	mov	r3, r0
 8016e90:	73fb      	strb	r3, [r7, #15]
 8016e92:	460b      	mov	r3, r1
 8016e94:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016e96:	f002 fce6 	bl	8019866 <RFW_DeInit>
    switch( modem )
 8016e9a:	7bfb      	ldrb	r3, [r7, #15]
 8016e9c:	2b03      	cmp	r3, #3
 8016e9e:	f000 80d7 	beq.w	8017050 <RadioSetTxConfig+0x1cc>
 8016ea2:	2b03      	cmp	r3, #3
 8016ea4:	f300 80e6 	bgt.w	8017074 <RadioSetTxConfig+0x1f0>
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d002      	beq.n	8016eb2 <RadioSetTxConfig+0x2e>
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	d061      	beq.n	8016f74 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8016eb0:	e0e0      	b.n	8017074 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016eb2:	4b7c      	ldr	r3, [pc, #496]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016eba:	4a7a      	ldr	r2, [pc, #488]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016ebc:	6a3b      	ldr	r3, [r7, #32]
 8016ebe:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016ec0:	4b78      	ldr	r3, [pc, #480]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016ec2:	220b      	movs	r2, #11
 8016ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016ec8:	6878      	ldr	r0, [r7, #4]
 8016eca:	f002 fbfd 	bl	80196c8 <SUBGRF_GetFskBandwidthRegValue>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	461a      	mov	r2, r3
 8016ed2:	4b74      	ldr	r3, [pc, #464]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016ed8:	4a72      	ldr	r2, [pc, #456]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016eda:	68bb      	ldr	r3, [r7, #8]
 8016edc:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016ede:	4b71      	ldr	r3, [pc, #452]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016ee4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016ee6:	00db      	lsls	r3, r3, #3
 8016ee8:	b29a      	uxth	r2, r3
 8016eea:	4b6e      	ldr	r3, [pc, #440]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016eec:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016eee:	4b6d      	ldr	r3, [pc, #436]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016ef0:	2204      	movs	r2, #4
 8016ef2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016ef4:	4b6b      	ldr	r3, [pc, #428]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016ef6:	2218      	movs	r2, #24
 8016ef8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016efa:	4b6a      	ldr	r3, [pc, #424]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016efc:	2200      	movs	r2, #0
 8016efe:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016f00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016f04:	f083 0301 	eor.w	r3, r3, #1
 8016f08:	b2db      	uxtb	r3, r3
 8016f0a:	461a      	mov	r2, r3
 8016f0c:	4b65      	ldr	r3, [pc, #404]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016f0e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016f10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d003      	beq.n	8016f20 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016f18:	4b62      	ldr	r3, [pc, #392]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016f1a:	22f2      	movs	r2, #242	; 0xf2
 8016f1c:	75da      	strb	r2, [r3, #23]
 8016f1e:	e002      	b.n	8016f26 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016f20:	4b60      	ldr	r3, [pc, #384]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016f22:	2201      	movs	r2, #1
 8016f24:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016f26:	4b5f      	ldr	r3, [pc, #380]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016f28:	2201      	movs	r2, #1
 8016f2a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016f2c:	f000 fb37 	bl	801759e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016f30:	4b5c      	ldr	r3, [pc, #368]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016f32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	bf14      	ite	ne
 8016f3a:	2301      	movne	r3, #1
 8016f3c:	2300      	moveq	r3, #0
 8016f3e:	b2db      	uxtb	r3, r3
 8016f40:	4618      	mov	r0, r3
 8016f42:	f7ff fcc1 	bl	80168c8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016f46:	4858      	ldr	r0, [pc, #352]	; (80170a8 <RadioSetTxConfig+0x224>)
 8016f48:	f001 ffa0 	bl	8018e8c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016f4c:	4857      	ldr	r0, [pc, #348]	; (80170ac <RadioSetTxConfig+0x228>)
 8016f4e:	f002 f869 	bl	8019024 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016f52:	4a57      	ldr	r2, [pc, #348]	; (80170b0 <RadioSetTxConfig+0x22c>)
 8016f54:	f107 0310 	add.w	r3, r7, #16
 8016f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016f60:	f107 0310 	add.w	r3, r7, #16
 8016f64:	4618      	mov	r0, r3
 8016f66:	f001 fb9c 	bl	80186a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016f6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016f6e:	f001 fbe7 	bl	8018740 <SUBGRF_SetWhiteningSeed>
            break;
 8016f72:	e080      	b.n	8017076 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016f74:	4b4b      	ldr	r3, [pc, #300]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016f76:	2201      	movs	r2, #1
 8016f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016f7c:	6a3b      	ldr	r3, [r7, #32]
 8016f7e:	b2da      	uxtb	r2, r3
 8016f80:	4b48      	ldr	r3, [pc, #288]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016f86:	4a4b      	ldr	r2, [pc, #300]	; (80170b4 <RadioSetTxConfig+0x230>)
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	4413      	add	r3, r2
 8016f8c:	781a      	ldrb	r2, [r3, #0]
 8016f8e:	4b45      	ldr	r3, [pc, #276]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016f94:	4a43      	ldr	r2, [pc, #268]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016f96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016f9a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d105      	bne.n	8016fb0 <RadioSetTxConfig+0x12c>
 8016fa4:	6a3b      	ldr	r3, [r7, #32]
 8016fa6:	2b0b      	cmp	r3, #11
 8016fa8:	d008      	beq.n	8016fbc <RadioSetTxConfig+0x138>
 8016faa:	6a3b      	ldr	r3, [r7, #32]
 8016fac:	2b0c      	cmp	r3, #12
 8016fae:	d005      	beq.n	8016fbc <RadioSetTxConfig+0x138>
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	2b01      	cmp	r3, #1
 8016fb4:	d107      	bne.n	8016fc6 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016fb6:	6a3b      	ldr	r3, [r7, #32]
 8016fb8:	2b0c      	cmp	r3, #12
 8016fba:	d104      	bne.n	8016fc6 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016fbc:	4b39      	ldr	r3, [pc, #228]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016fbe:	2201      	movs	r2, #1
 8016fc0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016fc4:	e003      	b.n	8016fce <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016fc6:	4b37      	ldr	r3, [pc, #220]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016fc8:	2200      	movs	r2, #0
 8016fca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016fce:	4b35      	ldr	r3, [pc, #212]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016fd0:	2201      	movs	r2, #1
 8016fd2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016fd4:	4b33      	ldr	r3, [pc, #204]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016fda:	2b05      	cmp	r3, #5
 8016fdc:	d004      	beq.n	8016fe8 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016fde:	4b31      	ldr	r3, [pc, #196]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016fe0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016fe4:	2b06      	cmp	r3, #6
 8016fe6:	d10a      	bne.n	8016ffe <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8016fe8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016fea:	2b0b      	cmp	r3, #11
 8016fec:	d803      	bhi.n	8016ff6 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016fee:	4b2d      	ldr	r3, [pc, #180]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016ff0:	220c      	movs	r2, #12
 8016ff2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016ff4:	e006      	b.n	8017004 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016ff6:	4a2b      	ldr	r2, [pc, #172]	; (80170a4 <RadioSetTxConfig+0x220>)
 8016ff8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016ffa:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016ffc:	e002      	b.n	8017004 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016ffe:	4a29      	ldr	r2, [pc, #164]	; (80170a4 <RadioSetTxConfig+0x220>)
 8017000:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017002:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017004:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017008:	4b26      	ldr	r3, [pc, #152]	; (80170a4 <RadioSetTxConfig+0x220>)
 801700a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801700c:	4b2a      	ldr	r3, [pc, #168]	; (80170b8 <RadioSetTxConfig+0x234>)
 801700e:	781a      	ldrb	r2, [r3, #0]
 8017010:	4b24      	ldr	r3, [pc, #144]	; (80170a4 <RadioSetTxConfig+0x220>)
 8017012:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017014:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017018:	4b22      	ldr	r3, [pc, #136]	; (80170a4 <RadioSetTxConfig+0x220>)
 801701a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801701e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017022:	4b20      	ldr	r3, [pc, #128]	; (80170a4 <RadioSetTxConfig+0x220>)
 8017024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8017028:	f000 fab9 	bl	801759e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801702c:	4b1d      	ldr	r3, [pc, #116]	; (80170a4 <RadioSetTxConfig+0x220>)
 801702e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017032:	2b00      	cmp	r3, #0
 8017034:	bf14      	ite	ne
 8017036:	2301      	movne	r3, #1
 8017038:	2300      	moveq	r3, #0
 801703a:	b2db      	uxtb	r3, r3
 801703c:	4618      	mov	r0, r3
 801703e:	f7ff fc43 	bl	80168c8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017042:	4819      	ldr	r0, [pc, #100]	; (80170a8 <RadioSetTxConfig+0x224>)
 8017044:	f001 ff22 	bl	8018e8c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017048:	4818      	ldr	r0, [pc, #96]	; (80170ac <RadioSetTxConfig+0x228>)
 801704a:	f001 ffeb 	bl	8019024 <SUBGRF_SetPacketParams>
            break;
 801704e:	e012      	b.n	8017076 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8017050:	2003      	movs	r0, #3
 8017052:	f7ff fc39 	bl	80168c8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8017056:	4b13      	ldr	r3, [pc, #76]	; (80170a4 <RadioSetTxConfig+0x220>)
 8017058:	2202      	movs	r2, #2
 801705a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801705e:	4a11      	ldr	r2, [pc, #68]	; (80170a4 <RadioSetTxConfig+0x220>)
 8017060:	6a3b      	ldr	r3, [r7, #32]
 8017062:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8017064:	4b0f      	ldr	r3, [pc, #60]	; (80170a4 <RadioSetTxConfig+0x220>)
 8017066:	2216      	movs	r2, #22
 8017068:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801706c:	480e      	ldr	r0, [pc, #56]	; (80170a8 <RadioSetTxConfig+0x224>)
 801706e:	f001 ff0d 	bl	8018e8c <SUBGRF_SetModulationParams>
            break;
 8017072:	e000      	b.n	8017076 <RadioSetTxConfig+0x1f2>
            break;
 8017074:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8017076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801707a:	4618      	mov	r0, r3
 801707c:	f002 fa36 	bl	80194ec <SUBGRF_SetRfTxPower>
 8017080:	4603      	mov	r3, r0
 8017082:	461a      	mov	r2, r3
 8017084:	4b07      	ldr	r3, [pc, #28]	; (80170a4 <RadioSetTxConfig+0x220>)
 8017086:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801708a:	4b06      	ldr	r3, [pc, #24]	; (80170a4 <RadioSetTxConfig+0x220>)
 801708c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017090:	4618      	mov	r0, r3
 8017092:	f002 fbfc 	bl	801988e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017096:	4a03      	ldr	r2, [pc, #12]	; (80170a4 <RadioSetTxConfig+0x220>)
 8017098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801709a:	6053      	str	r3, [r2, #4]
}
 801709c:	bf00      	nop
 801709e:	3718      	adds	r7, #24
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd80      	pop	{r7, pc}
 80170a4:	200018bc 	.word	0x200018bc
 80170a8:	200018f4 	.word	0x200018f4
 80170ac:	200018ca 	.word	0x200018ca
 80170b0:	0801b958 	.word	0x0801b958
 80170b4:	0801bf58 	.word	0x0801bf58
 80170b8:	20000120 	.word	0x20000120

080170bc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80170bc:	b480      	push	{r7}
 80170be:	b083      	sub	sp, #12
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	6078      	str	r0, [r7, #4]
    return true;
 80170c4:	2301      	movs	r3, #1
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	370c      	adds	r7, #12
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bc80      	pop	{r7}
 80170ce:	4770      	bx	lr

080170d0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80170d0:	b480      	push	{r7}
 80170d2:	b085      	sub	sp, #20
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	4603      	mov	r3, r0
 80170d8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80170da:	2300      	movs	r3, #0
 80170dc:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80170de:	79fb      	ldrb	r3, [r7, #7]
 80170e0:	2b0a      	cmp	r3, #10
 80170e2:	d83e      	bhi.n	8017162 <RadioGetLoRaBandwidthInHz+0x92>
 80170e4:	a201      	add	r2, pc, #4	; (adr r2, 80170ec <RadioGetLoRaBandwidthInHz+0x1c>)
 80170e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170ea:	bf00      	nop
 80170ec:	08017119 	.word	0x08017119
 80170f0:	08017129 	.word	0x08017129
 80170f4:	08017139 	.word	0x08017139
 80170f8:	08017149 	.word	0x08017149
 80170fc:	08017151 	.word	0x08017151
 8017100:	08017157 	.word	0x08017157
 8017104:	0801715d 	.word	0x0801715d
 8017108:	08017163 	.word	0x08017163
 801710c:	08017121 	.word	0x08017121
 8017110:	08017131 	.word	0x08017131
 8017114:	08017141 	.word	0x08017141
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017118:	f641 6384 	movw	r3, #7812	; 0x1e84
 801711c:	60fb      	str	r3, [r7, #12]
        break;
 801711e:	e020      	b.n	8017162 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017120:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8017124:	60fb      	str	r3, [r7, #12]
        break;
 8017126:	e01c      	b.n	8017162 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017128:	f643 5309 	movw	r3, #15625	; 0x3d09
 801712c:	60fb      	str	r3, [r7, #12]
        break;
 801712e:	e018      	b.n	8017162 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017130:	f245 1361 	movw	r3, #20833	; 0x5161
 8017134:	60fb      	str	r3, [r7, #12]
        break;
 8017136:	e014      	b.n	8017162 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017138:	f647 2312 	movw	r3, #31250	; 0x7a12
 801713c:	60fb      	str	r3, [r7, #12]
        break;
 801713e:	e010      	b.n	8017162 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8017140:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8017144:	60fb      	str	r3, [r7, #12]
        break;
 8017146:	e00c      	b.n	8017162 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8017148:	f24f 4324 	movw	r3, #62500	; 0xf424
 801714c:	60fb      	str	r3, [r7, #12]
        break;
 801714e:	e008      	b.n	8017162 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8017150:	4b07      	ldr	r3, [pc, #28]	; (8017170 <RadioGetLoRaBandwidthInHz+0xa0>)
 8017152:	60fb      	str	r3, [r7, #12]
        break;
 8017154:	e005      	b.n	8017162 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8017156:	4b07      	ldr	r3, [pc, #28]	; (8017174 <RadioGetLoRaBandwidthInHz+0xa4>)
 8017158:	60fb      	str	r3, [r7, #12]
        break;
 801715a:	e002      	b.n	8017162 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801715c:	4b06      	ldr	r3, [pc, #24]	; (8017178 <RadioGetLoRaBandwidthInHz+0xa8>)
 801715e:	60fb      	str	r3, [r7, #12]
        break;
 8017160:	bf00      	nop
    }

    return bandwidthInHz;
 8017162:	68fb      	ldr	r3, [r7, #12]
}
 8017164:	4618      	mov	r0, r3
 8017166:	3714      	adds	r7, #20
 8017168:	46bd      	mov	sp, r7
 801716a:	bc80      	pop	{r7}
 801716c:	4770      	bx	lr
 801716e:	bf00      	nop
 8017170:	0001e848 	.word	0x0001e848
 8017174:	0003d090 	.word	0x0003d090
 8017178:	0007a120 	.word	0x0007a120

0801717c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801717c:	b480      	push	{r7}
 801717e:	b083      	sub	sp, #12
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
 8017184:	4608      	mov	r0, r1
 8017186:	4611      	mov	r1, r2
 8017188:	461a      	mov	r2, r3
 801718a:	4603      	mov	r3, r0
 801718c:	70fb      	strb	r3, [r7, #3]
 801718e:	460b      	mov	r3, r1
 8017190:	803b      	strh	r3, [r7, #0]
 8017192:	4613      	mov	r3, r2
 8017194:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8017196:	883b      	ldrh	r3, [r7, #0]
 8017198:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801719a:	78ba      	ldrb	r2, [r7, #2]
 801719c:	f082 0201 	eor.w	r2, r2, #1
 80171a0:	b2d2      	uxtb	r2, r2
 80171a2:	2a00      	cmp	r2, #0
 80171a4:	d001      	beq.n	80171aa <RadioGetGfskTimeOnAirNumerator+0x2e>
 80171a6:	2208      	movs	r2, #8
 80171a8:	e000      	b.n	80171ac <RadioGetGfskTimeOnAirNumerator+0x30>
 80171aa:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80171ac:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80171ae:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80171b2:	7c3b      	ldrb	r3, [r7, #16]
 80171b4:	7d39      	ldrb	r1, [r7, #20]
 80171b6:	2900      	cmp	r1, #0
 80171b8:	d001      	beq.n	80171be <RadioGetGfskTimeOnAirNumerator+0x42>
 80171ba:	2102      	movs	r1, #2
 80171bc:	e000      	b.n	80171c0 <RadioGetGfskTimeOnAirNumerator+0x44>
 80171be:	2100      	movs	r1, #0
 80171c0:	440b      	add	r3, r1
 80171c2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80171c4:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	370c      	adds	r7, #12
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bc80      	pop	{r7}
 80171ce:	4770      	bx	lr

080171d0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80171d0:	b480      	push	{r7}
 80171d2:	b08b      	sub	sp, #44	; 0x2c
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	60f8      	str	r0, [r7, #12]
 80171d8:	60b9      	str	r1, [r7, #8]
 80171da:	4611      	mov	r1, r2
 80171dc:	461a      	mov	r2, r3
 80171de:	460b      	mov	r3, r1
 80171e0:	71fb      	strb	r3, [r7, #7]
 80171e2:	4613      	mov	r3, r2
 80171e4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80171e6:	79fb      	ldrb	r3, [r7, #7]
 80171e8:	3304      	adds	r3, #4
 80171ea:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80171ec:	2300      	movs	r3, #0
 80171ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80171f2:	68bb      	ldr	r3, [r7, #8]
 80171f4:	2b05      	cmp	r3, #5
 80171f6:	d002      	beq.n	80171fe <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80171f8:	68bb      	ldr	r3, [r7, #8]
 80171fa:	2b06      	cmp	r3, #6
 80171fc:	d104      	bne.n	8017208 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80171fe:	88bb      	ldrh	r3, [r7, #4]
 8017200:	2b0b      	cmp	r3, #11
 8017202:	d801      	bhi.n	8017208 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017204:	230c      	movs	r3, #12
 8017206:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d105      	bne.n	801721a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801720e:	68bb      	ldr	r3, [r7, #8]
 8017210:	2b0b      	cmp	r3, #11
 8017212:	d008      	beq.n	8017226 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017214:	68bb      	ldr	r3, [r7, #8]
 8017216:	2b0c      	cmp	r3, #12
 8017218:	d005      	beq.n	8017226 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	2b01      	cmp	r3, #1
 801721e:	d105      	bne.n	801722c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017220:	68bb      	ldr	r3, [r7, #8]
 8017222:	2b0c      	cmp	r3, #12
 8017224:	d102      	bne.n	801722c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017226:	2301      	movs	r3, #1
 8017228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801722c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017230:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017232:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017236:	2a00      	cmp	r2, #0
 8017238:	d001      	beq.n	801723e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801723a:	2210      	movs	r2, #16
 801723c:	e000      	b.n	8017240 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801723e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017240:	4413      	add	r3, r2
 8017242:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017244:	68bb      	ldr	r3, [r7, #8]
 8017246:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017248:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801724a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801724e:	2a00      	cmp	r2, #0
 8017250:	d001      	beq.n	8017256 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8017252:	2200      	movs	r2, #0
 8017254:	e000      	b.n	8017258 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8017256:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017258:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801725a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801725c:	68bb      	ldr	r3, [r7, #8]
 801725e:	2b06      	cmp	r3, #6
 8017260:	d803      	bhi.n	801726a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8017262:	68bb      	ldr	r3, [r7, #8]
 8017264:	009b      	lsls	r3, r3, #2
 8017266:	623b      	str	r3, [r7, #32]
 8017268:	e00e      	b.n	8017288 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801726a:	69fb      	ldr	r3, [r7, #28]
 801726c:	3308      	adds	r3, #8
 801726e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017274:	2b00      	cmp	r3, #0
 8017276:	d004      	beq.n	8017282 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017278:	68bb      	ldr	r3, [r7, #8]
 801727a:	3b02      	subs	r3, #2
 801727c:	009b      	lsls	r3, r3, #2
 801727e:	623b      	str	r3, [r7, #32]
 8017280:	e002      	b.n	8017288 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	009b      	lsls	r3, r3, #2
 8017286:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017288:	69fb      	ldr	r3, [r7, #28]
 801728a:	2b00      	cmp	r3, #0
 801728c:	da01      	bge.n	8017292 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801728e:	2300      	movs	r3, #0
 8017290:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8017292:	69fa      	ldr	r2, [r7, #28]
 8017294:	6a3b      	ldr	r3, [r7, #32]
 8017296:	4413      	add	r3, r2
 8017298:	1e5a      	subs	r2, r3, #1
 801729a:	6a3b      	ldr	r3, [r7, #32]
 801729c:	fb92 f3f3 	sdiv	r3, r2, r3
 80172a0:	697a      	ldr	r2, [r7, #20]
 80172a2:	fb02 f203 	mul.w	r2, r2, r3
 80172a6:	88bb      	ldrh	r3, [r7, #4]
 80172a8:	4413      	add	r3, r2
    int32_t intermediate =
 80172aa:	330c      	adds	r3, #12
 80172ac:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80172ae:	68bb      	ldr	r3, [r7, #8]
 80172b0:	2b06      	cmp	r3, #6
 80172b2:	d802      	bhi.n	80172ba <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80172b4:	69bb      	ldr	r3, [r7, #24]
 80172b6:	3302      	adds	r3, #2
 80172b8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80172ba:	69bb      	ldr	r3, [r7, #24]
 80172bc:	009b      	lsls	r3, r3, #2
 80172be:	1c5a      	adds	r2, r3, #1
 80172c0:	68bb      	ldr	r3, [r7, #8]
 80172c2:	3b02      	subs	r3, #2
 80172c4:	fa02 f303 	lsl.w	r3, r2, r3
}
 80172c8:	4618      	mov	r0, r3
 80172ca:	372c      	adds	r7, #44	; 0x2c
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bc80      	pop	{r7}
 80172d0:	4770      	bx	lr
	...

080172d4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b08a      	sub	sp, #40	; 0x28
 80172d8:	af04      	add	r7, sp, #16
 80172da:	60b9      	str	r1, [r7, #8]
 80172dc:	607a      	str	r2, [r7, #4]
 80172de:	461a      	mov	r2, r3
 80172e0:	4603      	mov	r3, r0
 80172e2:	73fb      	strb	r3, [r7, #15]
 80172e4:	4613      	mov	r3, r2
 80172e6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80172e8:	2300      	movs	r3, #0
 80172ea:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80172ec:	2301      	movs	r3, #1
 80172ee:	613b      	str	r3, [r7, #16]

    switch( modem )
 80172f0:	7bfb      	ldrb	r3, [r7, #15]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d002      	beq.n	80172fc <RadioTimeOnAir+0x28>
 80172f6:	2b01      	cmp	r3, #1
 80172f8:	d017      	beq.n	801732a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80172fa:	e035      	b.n	8017368 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80172fc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8017300:	8c3a      	ldrh	r2, [r7, #32]
 8017302:	7bb9      	ldrb	r1, [r7, #14]
 8017304:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017308:	9301      	str	r3, [sp, #4]
 801730a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801730e:	9300      	str	r3, [sp, #0]
 8017310:	4603      	mov	r3, r0
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f7ff ff32 	bl	801717c <RadioGetGfskTimeOnAirNumerator>
 8017318:	4603      	mov	r3, r0
 801731a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801731e:	fb02 f303 	mul.w	r3, r2, r3
 8017322:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	613b      	str	r3, [r7, #16]
        break;
 8017328:	e01e      	b.n	8017368 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801732a:	8c39      	ldrh	r1, [r7, #32]
 801732c:	7bba      	ldrb	r2, [r7, #14]
 801732e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017332:	9302      	str	r3, [sp, #8]
 8017334:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017338:	9301      	str	r3, [sp, #4]
 801733a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801733e:	9300      	str	r3, [sp, #0]
 8017340:	460b      	mov	r3, r1
 8017342:	6879      	ldr	r1, [r7, #4]
 8017344:	68b8      	ldr	r0, [r7, #8]
 8017346:	f7ff ff43 	bl	80171d0 <RadioGetLoRaTimeOnAirNumerator>
 801734a:	4603      	mov	r3, r0
 801734c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017350:	fb02 f303 	mul.w	r3, r2, r3
 8017354:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8017356:	4a0a      	ldr	r2, [pc, #40]	; (8017380 <RadioTimeOnAir+0xac>)
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	4413      	add	r3, r2
 801735c:	781b      	ldrb	r3, [r3, #0]
 801735e:	4618      	mov	r0, r3
 8017360:	f7ff feb6 	bl	80170d0 <RadioGetLoRaBandwidthInHz>
 8017364:	6138      	str	r0, [r7, #16]
        break;
 8017366:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017368:	697a      	ldr	r2, [r7, #20]
 801736a:	693b      	ldr	r3, [r7, #16]
 801736c:	4413      	add	r3, r2
 801736e:	1e5a      	subs	r2, r3, #1
 8017370:	693b      	ldr	r3, [r7, #16]
 8017372:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017376:	4618      	mov	r0, r3
 8017378:	3718      	adds	r7, #24
 801737a:	46bd      	mov	sp, r7
 801737c:	bd80      	pop	{r7, pc}
 801737e:	bf00      	nop
 8017380:	0801bf58 	.word	0x0801bf58

08017384 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b084      	sub	sp, #16
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
 801738c:	460b      	mov	r3, r1
 801738e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017390:	2300      	movs	r3, #0
 8017392:	2200      	movs	r2, #0
 8017394:	f240 2101 	movw	r1, #513	; 0x201
 8017398:	f240 2001 	movw	r0, #513	; 0x201
 801739c:	f001 fc4c 	bl	8018c38 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 80173a0:	4b70      	ldr	r3, [pc, #448]	; (8017564 <RadioSend+0x1e0>)
 80173a2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80173a6:	2101      	movs	r1, #1
 80173a8:	4618      	mov	r0, r3
 80173aa:	f002 f877 	bl	801949c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 80173ae:	4b6d      	ldr	r3, [pc, #436]	; (8017564 <RadioSend+0x1e0>)
 80173b0:	781b      	ldrb	r3, [r3, #0]
 80173b2:	2b01      	cmp	r3, #1
 80173b4:	d112      	bne.n	80173dc <RadioSend+0x58>
 80173b6:	4b6b      	ldr	r3, [pc, #428]	; (8017564 <RadioSend+0x1e0>)
 80173b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80173bc:	2b06      	cmp	r3, #6
 80173be:	d10d      	bne.n	80173dc <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80173c0:	f640 0089 	movw	r0, #2185	; 0x889
 80173c4:	f001 ff8a 	bl	80192dc <SUBGRF_ReadRegister>
 80173c8:	4603      	mov	r3, r0
 80173ca:	f023 0304 	bic.w	r3, r3, #4
 80173ce:	b2db      	uxtb	r3, r3
 80173d0:	4619      	mov	r1, r3
 80173d2:	f640 0089 	movw	r0, #2185	; 0x889
 80173d6:	f001 ff6d 	bl	80192b4 <SUBGRF_WriteRegister>
 80173da:	e00c      	b.n	80173f6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80173dc:	f640 0089 	movw	r0, #2185	; 0x889
 80173e0:	f001 ff7c 	bl	80192dc <SUBGRF_ReadRegister>
 80173e4:	4603      	mov	r3, r0
 80173e6:	f043 0304 	orr.w	r3, r3, #4
 80173ea:	b2db      	uxtb	r3, r3
 80173ec:	4619      	mov	r1, r3
 80173ee:	f640 0089 	movw	r0, #2185	; 0x889
 80173f2:	f001 ff5f 	bl	80192b4 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 80173f6:	4b5b      	ldr	r3, [pc, #364]	; (8017564 <RadioSend+0x1e0>)
 80173f8:	781b      	ldrb	r3, [r3, #0]
 80173fa:	2b03      	cmp	r3, #3
 80173fc:	f200 80a5 	bhi.w	801754a <RadioSend+0x1c6>
 8017400:	a201      	add	r2, pc, #4	; (adr r2, 8017408 <RadioSend+0x84>)
 8017402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017406:	bf00      	nop
 8017408:	08017433 	.word	0x08017433
 801740c:	08017419 	.word	0x08017419
 8017410:	08017493 	.word	0x08017493
 8017414:	080174b3 	.word	0x080174b3
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017418:	4a52      	ldr	r2, [pc, #328]	; (8017564 <RadioSend+0x1e0>)
 801741a:	78fb      	ldrb	r3, [r7, #3]
 801741c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801741e:	4852      	ldr	r0, [pc, #328]	; (8017568 <RadioSend+0x1e4>)
 8017420:	f001 fe00 	bl	8019024 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017424:	78fb      	ldrb	r3, [r7, #3]
 8017426:	2200      	movs	r2, #0
 8017428:	4619      	mov	r1, r3
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f001 f926 	bl	801867c <SUBGRF_SendPayload>
            break;
 8017430:	e08c      	b.n	801754c <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017432:	f002 fa1e 	bl	8019872 <RFW_Is_Init>
 8017436:	4603      	mov	r3, r0
 8017438:	2b01      	cmp	r3, #1
 801743a:	d11d      	bne.n	8017478 <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801743c:	f107 020d 	add.w	r2, r7, #13
 8017440:	78fb      	ldrb	r3, [r7, #3]
 8017442:	4619      	mov	r1, r3
 8017444:	6878      	ldr	r0, [r7, #4]
 8017446:	f002 fa2c 	bl	80198a2 <RFW_TransmitInit>
 801744a:	4603      	mov	r3, r0
 801744c:	2b00      	cmp	r3, #0
 801744e:	d10c      	bne.n	801746a <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017450:	7b7a      	ldrb	r2, [r7, #13]
 8017452:	4b44      	ldr	r3, [pc, #272]	; (8017564 <RadioSend+0x1e0>)
 8017454:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017456:	4844      	ldr	r0, [pc, #272]	; (8017568 <RadioSend+0x1e4>)
 8017458:	f001 fde4 	bl	8019024 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801745c:	7b7b      	ldrb	r3, [r7, #13]
 801745e:	2200      	movs	r2, #0
 8017460:	4619      	mov	r1, r3
 8017462:	6878      	ldr	r0, [r7, #4]
 8017464:	f001 f90a 	bl	801867c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017468:	e070      	b.n	801754c <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801746a:	4b40      	ldr	r3, [pc, #256]	; (801756c <RadioSend+0x1e8>)
 801746c:	2201      	movs	r2, #1
 801746e:	2100      	movs	r1, #0
 8017470:	2002      	movs	r0, #2
 8017472:	f003 fb23 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
 8017476:	e072      	b.n	801755e <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017478:	4a3a      	ldr	r2, [pc, #232]	; (8017564 <RadioSend+0x1e0>)
 801747a:	78fb      	ldrb	r3, [r7, #3]
 801747c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801747e:	483a      	ldr	r0, [pc, #232]	; (8017568 <RadioSend+0x1e4>)
 8017480:	f001 fdd0 	bl	8019024 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8017484:	78fb      	ldrb	r3, [r7, #3]
 8017486:	2200      	movs	r2, #0
 8017488:	4619      	mov	r1, r3
 801748a:	6878      	ldr	r0, [r7, #4]
 801748c:	f001 f8f6 	bl	801867c <SUBGRF_SendPayload>
            break;
 8017490:	e05c      	b.n	801754c <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017492:	4b34      	ldr	r3, [pc, #208]	; (8017564 <RadioSend+0x1e0>)
 8017494:	2202      	movs	r2, #2
 8017496:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017498:	4a32      	ldr	r2, [pc, #200]	; (8017564 <RadioSend+0x1e0>)
 801749a:	78fb      	ldrb	r3, [r7, #3]
 801749c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801749e:	4832      	ldr	r0, [pc, #200]	; (8017568 <RadioSend+0x1e4>)
 80174a0:	f001 fdc0 	bl	8019024 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80174a4:	78fb      	ldrb	r3, [r7, #3]
 80174a6:	2200      	movs	r2, #0
 80174a8:	4619      	mov	r1, r3
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f001 f8e6 	bl	801867c <SUBGRF_SendPayload>
            break;
 80174b0:	e04c      	b.n	801754c <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80174b2:	78fb      	ldrb	r3, [r7, #3]
 80174b4:	461a      	mov	r2, r3
 80174b6:	6879      	ldr	r1, [r7, #4]
 80174b8:	482d      	ldr	r0, [pc, #180]	; (8017570 <RadioSend+0x1ec>)
 80174ba:	f000 fc66 	bl	8017d8a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80174be:	4b29      	ldr	r3, [pc, #164]	; (8017564 <RadioSend+0x1e0>)
 80174c0:	2202      	movs	r2, #2
 80174c2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80174c4:	78fb      	ldrb	r3, [r7, #3]
 80174c6:	3301      	adds	r3, #1
 80174c8:	b2da      	uxtb	r2, r3
 80174ca:	4b26      	ldr	r3, [pc, #152]	; (8017564 <RadioSend+0x1e0>)
 80174cc:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174ce:	4826      	ldr	r0, [pc, #152]	; (8017568 <RadioSend+0x1e4>)
 80174d0:	f001 fda8 	bl	8019024 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 80174d4:	2100      	movs	r1, #0
 80174d6:	20f1      	movs	r0, #241	; 0xf1
 80174d8:	f000 f947 	bl	801776a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 80174dc:	2100      	movs	r1, #0
 80174de:	20f0      	movs	r0, #240	; 0xf0
 80174e0:	f000 f943 	bl	801776a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80174e4:	4b1f      	ldr	r3, [pc, #124]	; (8017564 <RadioSend+0x1e0>)
 80174e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80174e8:	2b64      	cmp	r3, #100	; 0x64
 80174ea:	d108      	bne.n	80174fe <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 80174ec:	2170      	movs	r1, #112	; 0x70
 80174ee:	20f3      	movs	r0, #243	; 0xf3
 80174f0:	f000 f93b 	bl	801776a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 80174f4:	211d      	movs	r1, #29
 80174f6:	20f2      	movs	r0, #242	; 0xf2
 80174f8:	f000 f937 	bl	801776a <RadioWrite>
 80174fc:	e007      	b.n	801750e <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80174fe:	21e1      	movs	r1, #225	; 0xe1
 8017500:	20f3      	movs	r0, #243	; 0xf3
 8017502:	f000 f932 	bl	801776a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8017506:	2104      	movs	r1, #4
 8017508:	20f2      	movs	r0, #242	; 0xf2
 801750a:	f000 f92e 	bl	801776a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801750e:	78fb      	ldrb	r3, [r7, #3]
 8017510:	b29b      	uxth	r3, r3
 8017512:	00db      	lsls	r3, r3, #3
 8017514:	b29b      	uxth	r3, r3
 8017516:	3302      	adds	r3, #2
 8017518:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801751a:	89fb      	ldrh	r3, [r7, #14]
 801751c:	0a1b      	lsrs	r3, r3, #8
 801751e:	b29b      	uxth	r3, r3
 8017520:	b2db      	uxtb	r3, r3
 8017522:	4619      	mov	r1, r3
 8017524:	20f4      	movs	r0, #244	; 0xf4
 8017526:	f000 f920 	bl	801776a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 801752a:	89fb      	ldrh	r3, [r7, #14]
 801752c:	b2db      	uxtb	r3, r3
 801752e:	4619      	mov	r1, r3
 8017530:	20f5      	movs	r0, #245	; 0xf5
 8017532:	f000 f91a 	bl	801776a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8017536:	78fb      	ldrb	r3, [r7, #3]
 8017538:	3301      	adds	r3, #1
 801753a:	b2db      	uxtb	r3, r3
 801753c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017540:	4619      	mov	r1, r3
 8017542:	480b      	ldr	r0, [pc, #44]	; (8017570 <RadioSend+0x1ec>)
 8017544:	f001 f89a 	bl	801867c <SUBGRF_SendPayload>
            break;
 8017548:	e000      	b.n	801754c <RadioSend+0x1c8>
        }
        default:
            break;
 801754a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801754c:	4b05      	ldr	r3, [pc, #20]	; (8017564 <RadioSend+0x1e0>)
 801754e:	685b      	ldr	r3, [r3, #4]
 8017550:	4619      	mov	r1, r3
 8017552:	4808      	ldr	r0, [pc, #32]	; (8017574 <RadioSend+0x1f0>)
 8017554:	f003 f918 	bl	801a788 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017558:	4806      	ldr	r0, [pc, #24]	; (8017574 <RadioSend+0x1f0>)
 801755a:	f003 f837 	bl	801a5cc <UTIL_TIMER_Start>
}
 801755e:	3710      	adds	r7, #16
 8017560:	46bd      	mov	sp, r7
 8017562:	bd80      	pop	{r7, pc}
 8017564:	200018bc 	.word	0x200018bc
 8017568:	200018ca 	.word	0x200018ca
 801756c:	0801b960 	.word	0x0801b960
 8017570:	20000ed0 	.word	0x20000ed0
 8017574:	20001914 	.word	0x20001914

08017578 <RadioSleep>:

static void RadioSleep( void )
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b082      	sub	sp, #8
 801757c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801757e:	2300      	movs	r3, #0
 8017580:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8017582:	793b      	ldrb	r3, [r7, #4]
 8017584:	f043 0304 	orr.w	r3, r3, #4
 8017588:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801758a:	7938      	ldrb	r0, [r7, #4]
 801758c:	f001 f952 	bl	8018834 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017590:	2002      	movs	r0, #2
 8017592:	f7ea fd28 	bl	8001fe6 <HAL_Delay>
}
 8017596:	bf00      	nop
 8017598:	3708      	adds	r7, #8
 801759a:	46bd      	mov	sp, r7
 801759c:	bd80      	pop	{r7, pc}

0801759e <RadioStandby>:

static void RadioStandby( void )
{
 801759e:	b580      	push	{r7, lr}
 80175a0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80175a2:	2000      	movs	r0, #0
 80175a4:	f001 f978 	bl	8018898 <SUBGRF_SetStandby>
}
 80175a8:	bf00      	nop
 80175aa:	bd80      	pop	{r7, pc}

080175ac <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b082      	sub	sp, #8
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 80175b4:	f002 f95d 	bl	8019872 <RFW_Is_Init>
 80175b8:	4603      	mov	r3, r0
 80175ba:	2b01      	cmp	r3, #1
 80175bc:	d102      	bne.n	80175c4 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 80175be:	f002 f980 	bl	80198c2 <RFW_ReceiveInit>
 80175c2:	e007      	b.n	80175d4 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80175c4:	2300      	movs	r3, #0
 80175c6:	2200      	movs	r2, #0
 80175c8:	f240 2162 	movw	r1, #610	; 0x262
 80175cc:	f240 2062 	movw	r0, #610	; 0x262
 80175d0:	f001 fb32 	bl	8018c38 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d006      	beq.n	80175e8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80175da:	6879      	ldr	r1, [r7, #4]
 80175dc:	480f      	ldr	r0, [pc, #60]	; (801761c <RadioRx+0x70>)
 80175de:	f003 f8d3 	bl	801a788 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80175e2:	480e      	ldr	r0, [pc, #56]	; (801761c <RadioRx+0x70>)
 80175e4:	f002 fff2 	bl	801a5cc <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80175e8:	4b0d      	ldr	r3, [pc, #52]	; (8017620 <RadioRx+0x74>)
 80175ea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80175ee:	2100      	movs	r1, #0
 80175f0:	4618      	mov	r0, r3
 80175f2:	f001 ff53 	bl	801949c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80175f6:	4b0a      	ldr	r3, [pc, #40]	; (8017620 <RadioRx+0x74>)
 80175f8:	785b      	ldrb	r3, [r3, #1]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d004      	beq.n	8017608 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80175fe:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017602:	f001 f985 	bl	8018910 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017606:	e005      	b.n	8017614 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8017608:	4b05      	ldr	r3, [pc, #20]	; (8017620 <RadioRx+0x74>)
 801760a:	689b      	ldr	r3, [r3, #8]
 801760c:	019b      	lsls	r3, r3, #6
 801760e:	4618      	mov	r0, r3
 8017610:	f001 f97e 	bl	8018910 <SUBGRF_SetRx>
}
 8017614:	bf00      	nop
 8017616:	3708      	adds	r7, #8
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}
 801761c:	2000192c 	.word	0x2000192c
 8017620:	200018bc 	.word	0x200018bc

08017624 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 801762c:	f002 f921 	bl	8019872 <RFW_Is_Init>
 8017630:	4603      	mov	r3, r0
 8017632:	2b01      	cmp	r3, #1
 8017634:	d102      	bne.n	801763c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8017636:	f002 f944 	bl	80198c2 <RFW_ReceiveInit>
 801763a:	e007      	b.n	801764c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801763c:	2300      	movs	r3, #0
 801763e:	2200      	movs	r2, #0
 8017640:	f240 2162 	movw	r1, #610	; 0x262
 8017644:	f240 2062 	movw	r0, #610	; 0x262
 8017648:	f001 faf6 	bl	8018c38 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d006      	beq.n	8017660 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017652:	6879      	ldr	r1, [r7, #4]
 8017654:	480f      	ldr	r0, [pc, #60]	; (8017694 <RadioRxBoosted+0x70>)
 8017656:	f003 f897 	bl	801a788 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801765a:	480e      	ldr	r0, [pc, #56]	; (8017694 <RadioRxBoosted+0x70>)
 801765c:	f002 ffb6 	bl	801a5cc <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017660:	4b0d      	ldr	r3, [pc, #52]	; (8017698 <RadioRxBoosted+0x74>)
 8017662:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017666:	2100      	movs	r1, #0
 8017668:	4618      	mov	r0, r3
 801766a:	f001 ff17 	bl	801949c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801766e:	4b0a      	ldr	r3, [pc, #40]	; (8017698 <RadioRxBoosted+0x74>)
 8017670:	785b      	ldrb	r3, [r3, #1]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d004      	beq.n	8017680 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8017676:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801767a:	f001 f969 	bl	8018950 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801767e:	e005      	b.n	801768c <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8017680:	4b05      	ldr	r3, [pc, #20]	; (8017698 <RadioRxBoosted+0x74>)
 8017682:	689b      	ldr	r3, [r3, #8]
 8017684:	019b      	lsls	r3, r3, #6
 8017686:	4618      	mov	r0, r3
 8017688:	f001 f962 	bl	8018950 <SUBGRF_SetRxBoosted>
}
 801768c:	bf00      	nop
 801768e:	3708      	adds	r7, #8
 8017690:	46bd      	mov	sp, r7
 8017692:	bd80      	pop	{r7, pc}
 8017694:	2000192c 	.word	0x2000192c
 8017698:	200018bc 	.word	0x200018bc

0801769c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b082      	sub	sp, #8
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
 80176a4:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80176a6:	4b07      	ldr	r3, [pc, #28]	; (80176c4 <RadioSetRxDutyCycle+0x28>)
 80176a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80176ac:	2100      	movs	r1, #0
 80176ae:	4618      	mov	r0, r3
 80176b0:	f001 fef4 	bl	801949c <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80176b4:	6839      	ldr	r1, [r7, #0]
 80176b6:	6878      	ldr	r0, [r7, #4]
 80176b8:	f001 f96e 	bl	8018998 <SUBGRF_SetRxDutyCycle>
}
 80176bc:	bf00      	nop
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}
 80176c4:	200018bc 	.word	0x200018bc

080176c8 <RadioStartCad>:

static void RadioStartCad( void )
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80176cc:	4b09      	ldr	r3, [pc, #36]	; (80176f4 <RadioStartCad+0x2c>)
 80176ce:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80176d2:	2100      	movs	r1, #0
 80176d4:	4618      	mov	r0, r3
 80176d6:	f001 fee1 	bl	801949c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80176da:	2300      	movs	r3, #0
 80176dc:	2200      	movs	r2, #0
 80176de:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80176e2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80176e6:	f001 faa7 	bl	8018c38 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80176ea:	f001 f981 	bl	80189f0 <SUBGRF_SetCad>
}
 80176ee:	bf00      	nop
 80176f0:	bd80      	pop	{r7, pc}
 80176f2:	bf00      	nop
 80176f4:	200018bc 	.word	0x200018bc

080176f8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b084      	sub	sp, #16
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
 8017700:	460b      	mov	r3, r1
 8017702:	70fb      	strb	r3, [r7, #3]
 8017704:	4613      	mov	r3, r2
 8017706:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8017708:	883b      	ldrh	r3, [r7, #0]
 801770a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801770e:	fb02 f303 	mul.w	r3, r2, r3
 8017712:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f001 faeb 	bl	8018cf0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801771a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801771e:	4618      	mov	r0, r3
 8017720:	f001 fee4 	bl	80194ec <SUBGRF_SetRfTxPower>
 8017724:	4603      	mov	r3, r0
 8017726:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8017728:	7afb      	ldrb	r3, [r7, #11]
 801772a:	2101      	movs	r1, #1
 801772c:	4618      	mov	r0, r3
 801772e:	f001 feb5 	bl	801949c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017732:	f001 f96b 	bl	8018a0c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017736:	68f9      	ldr	r1, [r7, #12]
 8017738:	4804      	ldr	r0, [pc, #16]	; (801774c <RadioSetTxContinuousWave+0x54>)
 801773a:	f003 f825 	bl	801a788 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801773e:	4803      	ldr	r0, [pc, #12]	; (801774c <RadioSetTxContinuousWave+0x54>)
 8017740:	f002 ff44 	bl	801a5cc <UTIL_TIMER_Start>
}
 8017744:	bf00      	nop
 8017746:	3710      	adds	r7, #16
 8017748:	46bd      	mov	sp, r7
 801774a:	bd80      	pop	{r7, pc}
 801774c:	20001914 	.word	0x20001914

08017750 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b082      	sub	sp, #8
 8017754:	af00      	add	r7, sp, #0
 8017756:	4603      	mov	r3, r0
 8017758:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801775a:	f001 fd18 	bl	801918e <SUBGRF_GetRssiInst>
 801775e:	4603      	mov	r3, r0
 8017760:	b21b      	sxth	r3, r3
}
 8017762:	4618      	mov	r0, r3
 8017764:	3708      	adds	r7, #8
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}

0801776a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801776a:	b580      	push	{r7, lr}
 801776c:	b082      	sub	sp, #8
 801776e:	af00      	add	r7, sp, #0
 8017770:	4603      	mov	r3, r0
 8017772:	460a      	mov	r2, r1
 8017774:	80fb      	strh	r3, [r7, #6]
 8017776:	4613      	mov	r3, r2
 8017778:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 801777a:	797a      	ldrb	r2, [r7, #5]
 801777c:	88fb      	ldrh	r3, [r7, #6]
 801777e:	4611      	mov	r1, r2
 8017780:	4618      	mov	r0, r3
 8017782:	f001 fd97 	bl	80192b4 <SUBGRF_WriteRegister>
}
 8017786:	bf00      	nop
 8017788:	3708      	adds	r7, #8
 801778a:	46bd      	mov	sp, r7
 801778c:	bd80      	pop	{r7, pc}

0801778e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801778e:	b580      	push	{r7, lr}
 8017790:	b082      	sub	sp, #8
 8017792:	af00      	add	r7, sp, #0
 8017794:	4603      	mov	r3, r0
 8017796:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8017798:	88fb      	ldrh	r3, [r7, #6]
 801779a:	4618      	mov	r0, r3
 801779c:	f001 fd9e 	bl	80192dc <SUBGRF_ReadRegister>
 80177a0:	4603      	mov	r3, r0
}
 80177a2:	4618      	mov	r0, r3
 80177a4:	3708      	adds	r7, #8
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bd80      	pop	{r7, pc}

080177aa <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80177aa:	b580      	push	{r7, lr}
 80177ac:	b082      	sub	sp, #8
 80177ae:	af00      	add	r7, sp, #0
 80177b0:	4603      	mov	r3, r0
 80177b2:	6039      	str	r1, [r7, #0]
 80177b4:	80fb      	strh	r3, [r7, #6]
 80177b6:	4613      	mov	r3, r2
 80177b8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80177ba:	797b      	ldrb	r3, [r7, #5]
 80177bc:	b29a      	uxth	r2, r3
 80177be:	88fb      	ldrh	r3, [r7, #6]
 80177c0:	6839      	ldr	r1, [r7, #0]
 80177c2:	4618      	mov	r0, r3
 80177c4:	f001 fd9e 	bl	8019304 <SUBGRF_WriteRegisters>
}
 80177c8:	bf00      	nop
 80177ca:	3708      	adds	r7, #8
 80177cc:	46bd      	mov	sp, r7
 80177ce:	bd80      	pop	{r7, pc}

080177d0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b082      	sub	sp, #8
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	4603      	mov	r3, r0
 80177d8:	6039      	str	r1, [r7, #0]
 80177da:	80fb      	strh	r3, [r7, #6]
 80177dc:	4613      	mov	r3, r2
 80177de:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80177e0:	797b      	ldrb	r3, [r7, #5]
 80177e2:	b29a      	uxth	r2, r3
 80177e4:	88fb      	ldrh	r3, [r7, #6]
 80177e6:	6839      	ldr	r1, [r7, #0]
 80177e8:	4618      	mov	r0, r3
 80177ea:	f001 fdad 	bl	8019348 <SUBGRF_ReadRegisters>
}
 80177ee:	bf00      	nop
 80177f0:	3708      	adds	r7, #8
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd80      	pop	{r7, pc}
	...

080177f8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	4603      	mov	r3, r0
 8017800:	460a      	mov	r2, r1
 8017802:	71fb      	strb	r3, [r7, #7]
 8017804:	4613      	mov	r3, r2
 8017806:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017808:	79fb      	ldrb	r3, [r7, #7]
 801780a:	2b01      	cmp	r3, #1
 801780c:	d10a      	bne.n	8017824 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801780e:	4a0e      	ldr	r2, [pc, #56]	; (8017848 <RadioSetMaxPayloadLength+0x50>)
 8017810:	79bb      	ldrb	r3, [r7, #6]
 8017812:	7013      	strb	r3, [r2, #0]
 8017814:	4b0c      	ldr	r3, [pc, #48]	; (8017848 <RadioSetMaxPayloadLength+0x50>)
 8017816:	781a      	ldrb	r2, [r3, #0]
 8017818:	4b0c      	ldr	r3, [pc, #48]	; (801784c <RadioSetMaxPayloadLength+0x54>)
 801781a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801781c:	480c      	ldr	r0, [pc, #48]	; (8017850 <RadioSetMaxPayloadLength+0x58>)
 801781e:	f001 fc01 	bl	8019024 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8017822:	e00d      	b.n	8017840 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017824:	4b09      	ldr	r3, [pc, #36]	; (801784c <RadioSetMaxPayloadLength+0x54>)
 8017826:	7d5b      	ldrb	r3, [r3, #21]
 8017828:	2b01      	cmp	r3, #1
 801782a:	d109      	bne.n	8017840 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801782c:	4a06      	ldr	r2, [pc, #24]	; (8017848 <RadioSetMaxPayloadLength+0x50>)
 801782e:	79bb      	ldrb	r3, [r7, #6]
 8017830:	7013      	strb	r3, [r2, #0]
 8017832:	4b05      	ldr	r3, [pc, #20]	; (8017848 <RadioSetMaxPayloadLength+0x50>)
 8017834:	781a      	ldrb	r2, [r3, #0]
 8017836:	4b05      	ldr	r3, [pc, #20]	; (801784c <RadioSetMaxPayloadLength+0x54>)
 8017838:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801783a:	4805      	ldr	r0, [pc, #20]	; (8017850 <RadioSetMaxPayloadLength+0x58>)
 801783c:	f001 fbf2 	bl	8019024 <SUBGRF_SetPacketParams>
}
 8017840:	bf00      	nop
 8017842:	3708      	adds	r7, #8
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}
 8017848:	20000120 	.word	0x20000120
 801784c:	200018bc 	.word	0x200018bc
 8017850:	200018ca 	.word	0x200018ca

08017854 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b082      	sub	sp, #8
 8017858:	af00      	add	r7, sp, #0
 801785a:	4603      	mov	r3, r0
 801785c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801785e:	4a13      	ldr	r2, [pc, #76]	; (80178ac <RadioSetPublicNetwork+0x58>)
 8017860:	79fb      	ldrb	r3, [r7, #7]
 8017862:	7313      	strb	r3, [r2, #12]
 8017864:	4b11      	ldr	r3, [pc, #68]	; (80178ac <RadioSetPublicNetwork+0x58>)
 8017866:	7b1a      	ldrb	r2, [r3, #12]
 8017868:	4b10      	ldr	r3, [pc, #64]	; (80178ac <RadioSetPublicNetwork+0x58>)
 801786a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801786c:	2001      	movs	r0, #1
 801786e:	f7ff f82b 	bl	80168c8 <RadioSetModem>
    if( enable == true )
 8017872:	79fb      	ldrb	r3, [r7, #7]
 8017874:	2b00      	cmp	r3, #0
 8017876:	d00a      	beq.n	801788e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017878:	2134      	movs	r1, #52	; 0x34
 801787a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801787e:	f001 fd19 	bl	80192b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8017882:	2144      	movs	r1, #68	; 0x44
 8017884:	f240 7041 	movw	r0, #1857	; 0x741
 8017888:	f001 fd14 	bl	80192b4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801788c:	e009      	b.n	80178a2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801788e:	2114      	movs	r1, #20
 8017890:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017894:	f001 fd0e 	bl	80192b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017898:	2124      	movs	r1, #36	; 0x24
 801789a:	f240 7041 	movw	r0, #1857	; 0x741
 801789e:	f001 fd09 	bl	80192b4 <SUBGRF_WriteRegister>
}
 80178a2:	bf00      	nop
 80178a4:	3708      	adds	r7, #8
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
 80178aa:	bf00      	nop
 80178ac:	200018bc 	.word	0x200018bc

080178b0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80178b4:	f001 fe4e 	bl	8019554 <SUBGRF_GetRadioWakeUpTime>
 80178b8:	4603      	mov	r3, r0
 80178ba:	3303      	adds	r3, #3
}
 80178bc:	4618      	mov	r0, r3
 80178be:	bd80      	pop	{r7, pc}

080178c0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b082      	sub	sp, #8
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80178c8:	f000 f80e 	bl	80178e8 <RadioOnTxTimeoutProcess>
}
 80178cc:	bf00      	nop
 80178ce:	3708      	adds	r7, #8
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}

080178d4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b082      	sub	sp, #8
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80178dc:	f000 f818 	bl	8017910 <RadioOnRxTimeoutProcess>
}
 80178e0:	bf00      	nop
 80178e2:	3708      	adds	r7, #8
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}

080178e8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80178ec:	4b07      	ldr	r3, [pc, #28]	; (801790c <RadioOnTxTimeoutProcess+0x24>)
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d008      	beq.n	8017906 <RadioOnTxTimeoutProcess+0x1e>
 80178f4:	4b05      	ldr	r3, [pc, #20]	; (801790c <RadioOnTxTimeoutProcess+0x24>)
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	685b      	ldr	r3, [r3, #4]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d003      	beq.n	8017906 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80178fe:	4b03      	ldr	r3, [pc, #12]	; (801790c <RadioOnTxTimeoutProcess+0x24>)
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	685b      	ldr	r3, [r3, #4]
 8017904:	4798      	blx	r3
    }
}
 8017906:	bf00      	nop
 8017908:	bd80      	pop	{r7, pc}
 801790a:	bf00      	nop
 801790c:	20000fd0 	.word	0x20000fd0

08017910 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017910:	b580      	push	{r7, lr}
 8017912:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017914:	4b07      	ldr	r3, [pc, #28]	; (8017934 <RadioOnRxTimeoutProcess+0x24>)
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d008      	beq.n	801792e <RadioOnRxTimeoutProcess+0x1e>
 801791c:	4b05      	ldr	r3, [pc, #20]	; (8017934 <RadioOnRxTimeoutProcess+0x24>)
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	68db      	ldr	r3, [r3, #12]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d003      	beq.n	801792e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8017926:	4b03      	ldr	r3, [pc, #12]	; (8017934 <RadioOnRxTimeoutProcess+0x24>)
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	68db      	ldr	r3, [r3, #12]
 801792c:	4798      	blx	r3
    }
}
 801792e:	bf00      	nop
 8017930:	bd80      	pop	{r7, pc}
 8017932:	bf00      	nop
 8017934:	20000fd0 	.word	0x20000fd0

08017938 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b082      	sub	sp, #8
 801793c:	af00      	add	r7, sp, #0
 801793e:	4603      	mov	r3, r0
 8017940:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017942:	4a05      	ldr	r2, [pc, #20]	; (8017958 <RadioOnDioIrq+0x20>)
 8017944:	88fb      	ldrh	r3, [r7, #6]
 8017946:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801794a:	f000 f807 	bl	801795c <RadioIrqProcess>
}
 801794e:	bf00      	nop
 8017950:	3708      	adds	r7, #8
 8017952:	46bd      	mov	sp, r7
 8017954:	bd80      	pop	{r7, pc}
 8017956:	bf00      	nop
 8017958:	200018bc 	.word	0x200018bc

0801795c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801795c:	b590      	push	{r4, r7, lr}
 801795e:	b083      	sub	sp, #12
 8017960:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8017962:	2300      	movs	r3, #0
 8017964:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017966:	2300      	movs	r3, #0
 8017968:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 801796a:	4bb5      	ldr	r3, [pc, #724]	; (8017c40 <RadioIrqProcess+0x2e4>)
 801796c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017974:	f000 810c 	beq.w	8017b90 <RadioIrqProcess+0x234>
 8017978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801797c:	f300 81b5 	bgt.w	8017cea <RadioIrqProcess+0x38e>
 8017980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017984:	f000 80f0 	beq.w	8017b68 <RadioIrqProcess+0x20c>
 8017988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801798c:	f300 81ad 	bgt.w	8017cea <RadioIrqProcess+0x38e>
 8017990:	2b80      	cmp	r3, #128	; 0x80
 8017992:	f000 80d5 	beq.w	8017b40 <RadioIrqProcess+0x1e4>
 8017996:	2b80      	cmp	r3, #128	; 0x80
 8017998:	f300 81a7 	bgt.w	8017cea <RadioIrqProcess+0x38e>
 801799c:	2b20      	cmp	r3, #32
 801799e:	dc49      	bgt.n	8017a34 <RadioIrqProcess+0xd8>
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	f340 81a2 	ble.w	8017cea <RadioIrqProcess+0x38e>
 80179a6:	3b01      	subs	r3, #1
 80179a8:	2b1f      	cmp	r3, #31
 80179aa:	f200 819e 	bhi.w	8017cea <RadioIrqProcess+0x38e>
 80179ae:	a201      	add	r2, pc, #4	; (adr r2, 80179b4 <RadioIrqProcess+0x58>)
 80179b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179b4:	08017a3d 	.word	0x08017a3d
 80179b8:	08017a77 	.word	0x08017a77
 80179bc:	08017ceb 	.word	0x08017ceb
 80179c0:	08017c09 	.word	0x08017c09
 80179c4:	08017ceb 	.word	0x08017ceb
 80179c8:	08017ceb 	.word	0x08017ceb
 80179cc:	08017ceb 	.word	0x08017ceb
 80179d0:	08017c17 	.word	0x08017c17
 80179d4:	08017ceb 	.word	0x08017ceb
 80179d8:	08017ceb 	.word	0x08017ceb
 80179dc:	08017ceb 	.word	0x08017ceb
 80179e0:	08017ceb 	.word	0x08017ceb
 80179e4:	08017ceb 	.word	0x08017ceb
 80179e8:	08017ceb 	.word	0x08017ceb
 80179ec:	08017ceb 	.word	0x08017ceb
 80179f0:	08017c33 	.word	0x08017c33
 80179f4:	08017ceb 	.word	0x08017ceb
 80179f8:	08017ceb 	.word	0x08017ceb
 80179fc:	08017ceb 	.word	0x08017ceb
 8017a00:	08017ceb 	.word	0x08017ceb
 8017a04:	08017ceb 	.word	0x08017ceb
 8017a08:	08017ceb 	.word	0x08017ceb
 8017a0c:	08017ceb 	.word	0x08017ceb
 8017a10:	08017ceb 	.word	0x08017ceb
 8017a14:	08017ceb 	.word	0x08017ceb
 8017a18:	08017ceb 	.word	0x08017ceb
 8017a1c:	08017ceb 	.word	0x08017ceb
 8017a20:	08017ceb 	.word	0x08017ceb
 8017a24:	08017ceb 	.word	0x08017ceb
 8017a28:	08017ceb 	.word	0x08017ceb
 8017a2c:	08017ceb 	.word	0x08017ceb
 8017a30:	08017c6d 	.word	0x08017c6d
 8017a34:	2b40      	cmp	r3, #64	; 0x40
 8017a36:	f000 813a 	beq.w	8017cae <RadioIrqProcess+0x352>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8017a3a:	e156      	b.n	8017cea <RadioIrqProcess+0x38e>
        TimerStop( &TxTimeoutTimer );
 8017a3c:	4881      	ldr	r0, [pc, #516]	; (8017c44 <RadioIrqProcess+0x2e8>)
 8017a3e:	f002 fe33 	bl	801a6a8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017a42:	2000      	movs	r0, #0
 8017a44:	f000 ff28 	bl	8018898 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8017a48:	f001 ff1a 	bl	8019880 <RFW_Is_LongPacketModeEnabled>
 8017a4c:	4603      	mov	r3, r0
 8017a4e:	2b01      	cmp	r3, #1
 8017a50:	d101      	bne.n	8017a56 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8017a52:	f001 ff3e 	bl	80198d2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017a56:	4b7c      	ldr	r3, [pc, #496]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	f000 8147 	beq.w	8017cee <RadioIrqProcess+0x392>
 8017a60:	4b79      	ldr	r3, [pc, #484]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	f000 8141 	beq.w	8017cee <RadioIrqProcess+0x392>
            RadioEvents->TxDone( );
 8017a6c:	4b76      	ldr	r3, [pc, #472]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	4798      	blx	r3
        break;
 8017a74:	e13b      	b.n	8017cee <RadioIrqProcess+0x392>
        TimerStop( &RxTimeoutTimer );
 8017a76:	4875      	ldr	r0, [pc, #468]	; (8017c4c <RadioIrqProcess+0x2f0>)
 8017a78:	f002 fe16 	bl	801a6a8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017a7c:	4b70      	ldr	r3, [pc, #448]	; (8017c40 <RadioIrqProcess+0x2e4>)
 8017a7e:	785b      	ldrb	r3, [r3, #1]
 8017a80:	f083 0301 	eor.w	r3, r3, #1
 8017a84:	b2db      	uxtb	r3, r3
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d014      	beq.n	8017ab4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8017a8a:	2000      	movs	r0, #0
 8017a8c:	f000 ff04 	bl	8018898 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8017a90:	2100      	movs	r1, #0
 8017a92:	f640 1002 	movw	r0, #2306	; 0x902
 8017a96:	f001 fc0d 	bl	80192b4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8017a9a:	f640 1044 	movw	r0, #2372	; 0x944
 8017a9e:	f001 fc1d 	bl	80192dc <SUBGRF_ReadRegister>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	f043 0302 	orr.w	r3, r3, #2
 8017aa8:	b2db      	uxtb	r3, r3
 8017aaa:	4619      	mov	r1, r3
 8017aac:	f640 1044 	movw	r0, #2372	; 0x944
 8017ab0:	f001 fc00 	bl	80192b4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8017ab4:	1dfb      	adds	r3, r7, #7
 8017ab6:	22ff      	movs	r2, #255	; 0xff
 8017ab8:	4619      	mov	r1, r3
 8017aba:	4865      	ldr	r0, [pc, #404]	; (8017c50 <RadioIrqProcess+0x2f4>)
 8017abc:	f000 fdbc 	bl	8018638 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8017ac0:	4864      	ldr	r0, [pc, #400]	; (8017c54 <RadioIrqProcess+0x2f8>)
 8017ac2:	f001 fba5 	bl	8019210 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017ac6:	4b60      	ldr	r3, [pc, #384]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d036      	beq.n	8017b3c <RadioIrqProcess+0x1e0>
 8017ace:	4b5e      	ldr	r3, [pc, #376]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	689b      	ldr	r3, [r3, #8]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d031      	beq.n	8017b3c <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 8017ad8:	4b59      	ldr	r3, [pc, #356]	; (8017c40 <RadioIrqProcess+0x2e4>)
 8017ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017ade:	2b01      	cmp	r3, #1
 8017ae0:	d10e      	bne.n	8017b00 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8017ae2:	4b59      	ldr	r3, [pc, #356]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	689c      	ldr	r4, [r3, #8]
 8017ae8:	79fb      	ldrb	r3, [r7, #7]
 8017aea:	b299      	uxth	r1, r3
 8017aec:	4b54      	ldr	r3, [pc, #336]	; (8017c40 <RadioIrqProcess+0x2e4>)
 8017aee:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8017af2:	b21a      	sxth	r2, r3
 8017af4:	4b52      	ldr	r3, [pc, #328]	; (8017c40 <RadioIrqProcess+0x2e4>)
 8017af6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8017afa:	4855      	ldr	r0, [pc, #340]	; (8017c50 <RadioIrqProcess+0x2f4>)
 8017afc:	47a0      	blx	r4
                break;
 8017afe:	e01e      	b.n	8017b3e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017b00:	4b4f      	ldr	r3, [pc, #316]	; (8017c40 <RadioIrqProcess+0x2e4>)
 8017b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b04:	463a      	mov	r2, r7
 8017b06:	4611      	mov	r1, r2
 8017b08:	4618      	mov	r0, r3
 8017b0a:	f001 fe05 	bl	8019718 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8017b0e:	4b4e      	ldr	r3, [pc, #312]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	689c      	ldr	r4, [r3, #8]
 8017b14:	79fb      	ldrb	r3, [r7, #7]
 8017b16:	b299      	uxth	r1, r3
 8017b18:	4b49      	ldr	r3, [pc, #292]	; (8017c40 <RadioIrqProcess+0x2e4>)
 8017b1a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8017b1e:	b218      	sxth	r0, r3
 8017b20:	683b      	ldr	r3, [r7, #0]
 8017b22:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017b26:	4a4c      	ldr	r2, [pc, #304]	; (8017c58 <RadioIrqProcess+0x2fc>)
 8017b28:	fb82 c203 	smull	ip, r2, r2, r3
 8017b2c:	1192      	asrs	r2, r2, #6
 8017b2e:	17db      	asrs	r3, r3, #31
 8017b30:	1ad3      	subs	r3, r2, r3
 8017b32:	b25b      	sxtb	r3, r3
 8017b34:	4602      	mov	r2, r0
 8017b36:	4846      	ldr	r0, [pc, #280]	; (8017c50 <RadioIrqProcess+0x2f4>)
 8017b38:	47a0      	blx	r4
                break;
 8017b3a:	e000      	b.n	8017b3e <RadioIrqProcess+0x1e2>
        }
 8017b3c:	bf00      	nop
        break;
 8017b3e:	e0e3      	b.n	8017d08 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8017b40:	2000      	movs	r0, #0
 8017b42:	f000 fea9 	bl	8018898 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017b46:	4b40      	ldr	r3, [pc, #256]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	f000 80d1 	beq.w	8017cf2 <RadioIrqProcess+0x396>
 8017b50:	4b3d      	ldr	r3, [pc, #244]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	699b      	ldr	r3, [r3, #24]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	f000 80cb 	beq.w	8017cf2 <RadioIrqProcess+0x396>
            RadioEvents->CadDone( false );
 8017b5c:	4b3a      	ldr	r3, [pc, #232]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	699b      	ldr	r3, [r3, #24]
 8017b62:	2000      	movs	r0, #0
 8017b64:	4798      	blx	r3
        break;
 8017b66:	e0c4      	b.n	8017cf2 <RadioIrqProcess+0x396>
        SUBGRF_SetStandby( STDBY_RC );
 8017b68:	2000      	movs	r0, #0
 8017b6a:	f000 fe95 	bl	8018898 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017b6e:	4b36      	ldr	r3, [pc, #216]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	f000 80bf 	beq.w	8017cf6 <RadioIrqProcess+0x39a>
 8017b78:	4b33      	ldr	r3, [pc, #204]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	699b      	ldr	r3, [r3, #24]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	f000 80b9 	beq.w	8017cf6 <RadioIrqProcess+0x39a>
            RadioEvents->CadDone( true );
 8017b84:	4b30      	ldr	r3, [pc, #192]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	699b      	ldr	r3, [r3, #24]
 8017b8a:	2001      	movs	r0, #1
 8017b8c:	4798      	blx	r3
        break;
 8017b8e:	e0b2      	b.n	8017cf6 <RadioIrqProcess+0x39a>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017b90:	4b32      	ldr	r3, [pc, #200]	; (8017c5c <RadioIrqProcess+0x300>)
 8017b92:	2201      	movs	r2, #1
 8017b94:	2100      	movs	r1, #0
 8017b96:	2002      	movs	r0, #2
 8017b98:	f002 ff90 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017b9c:	f000 fd32 	bl	8018604 <SUBGRF_GetOperatingMode>
 8017ba0:	4603      	mov	r3, r0
 8017ba2:	2b04      	cmp	r3, #4
 8017ba4:	d115      	bne.n	8017bd2 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 8017ba6:	4827      	ldr	r0, [pc, #156]	; (8017c44 <RadioIrqProcess+0x2e8>)
 8017ba8:	f002 fd7e 	bl	801a6a8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017bac:	2000      	movs	r0, #0
 8017bae:	f000 fe73 	bl	8018898 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017bb2:	4b25      	ldr	r3, [pc, #148]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	f000 809f 	beq.w	8017cfa <RadioIrqProcess+0x39e>
 8017bbc:	4b22      	ldr	r3, [pc, #136]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	685b      	ldr	r3, [r3, #4]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	f000 8099 	beq.w	8017cfa <RadioIrqProcess+0x39e>
                RadioEvents->TxTimeout( );
 8017bc8:	4b1f      	ldr	r3, [pc, #124]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	685b      	ldr	r3, [r3, #4]
 8017bce:	4798      	blx	r3
        break;
 8017bd0:	e093      	b.n	8017cfa <RadioIrqProcess+0x39e>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017bd2:	f000 fd17 	bl	8018604 <SUBGRF_GetOperatingMode>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	2b05      	cmp	r3, #5
 8017bda:	f040 808e 	bne.w	8017cfa <RadioIrqProcess+0x39e>
            TimerStop( &RxTimeoutTimer );
 8017bde:	481b      	ldr	r0, [pc, #108]	; (8017c4c <RadioIrqProcess+0x2f0>)
 8017be0:	f002 fd62 	bl	801a6a8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017be4:	2000      	movs	r0, #0
 8017be6:	f000 fe57 	bl	8018898 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017bea:	4b17      	ldr	r3, [pc, #92]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	f000 8083 	beq.w	8017cfa <RadioIrqProcess+0x39e>
 8017bf4:	4b14      	ldr	r3, [pc, #80]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	68db      	ldr	r3, [r3, #12]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d07d      	beq.n	8017cfa <RadioIrqProcess+0x39e>
                RadioEvents->RxTimeout( );
 8017bfe:	4b12      	ldr	r3, [pc, #72]	; (8017c48 <RadioIrqProcess+0x2ec>)
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	68db      	ldr	r3, [r3, #12]
 8017c04:	4798      	blx	r3
        break;
 8017c06:	e078      	b.n	8017cfa <RadioIrqProcess+0x39e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017c08:	4b15      	ldr	r3, [pc, #84]	; (8017c60 <RadioIrqProcess+0x304>)
 8017c0a:	2201      	movs	r2, #1
 8017c0c:	2100      	movs	r1, #0
 8017c0e:	2002      	movs	r0, #2
 8017c10:	f002 ff54 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017c14:	e078      	b.n	8017d08 <RadioIrqProcess+0x3ac>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017c16:	4b13      	ldr	r3, [pc, #76]	; (8017c64 <RadioIrqProcess+0x308>)
 8017c18:	2201      	movs	r2, #1
 8017c1a:	2100      	movs	r1, #0
 8017c1c:	2002      	movs	r0, #2
 8017c1e:	f002 ff4d 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 8017c22:	f001 fe26 	bl	8019872 <RFW_Is_Init>
 8017c26:	4603      	mov	r3, r0
 8017c28:	2b01      	cmp	r3, #1
 8017c2a:	d168      	bne.n	8017cfe <RadioIrqProcess+0x3a2>
            RFW_ReceivePayload( );
 8017c2c:	f001 fe57 	bl	80198de <RFW_ReceivePayload>
        break;
 8017c30:	e065      	b.n	8017cfe <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8017c32:	4b0d      	ldr	r3, [pc, #52]	; (8017c68 <RadioIrqProcess+0x30c>)
 8017c34:	2201      	movs	r2, #1
 8017c36:	2100      	movs	r1, #0
 8017c38:	2002      	movs	r0, #2
 8017c3a:	f002 ff3f 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017c3e:	e063      	b.n	8017d08 <RadioIrqProcess+0x3ac>
 8017c40:	200018bc 	.word	0x200018bc
 8017c44:	20001914 	.word	0x20001914
 8017c48:	20000fd0 	.word	0x20000fd0
 8017c4c:	2000192c 	.word	0x2000192c
 8017c50:	20000ed0 	.word	0x20000ed0
 8017c54:	200018e0 	.word	0x200018e0
 8017c58:	10624dd3 	.word	0x10624dd3
 8017c5c:	0801b978 	.word	0x0801b978
 8017c60:	0801b98c 	.word	0x0801b98c
 8017c64:	0801b998 	.word	0x0801b998
 8017c68:	0801b9a4 	.word	0x0801b9a4
        TimerStop( &RxTimeoutTimer );
 8017c6c:	4828      	ldr	r0, [pc, #160]	; (8017d10 <RadioIrqProcess+0x3b4>)
 8017c6e:	f002 fd1b 	bl	801a6a8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017c72:	4b28      	ldr	r3, [pc, #160]	; (8017d14 <RadioIrqProcess+0x3b8>)
 8017c74:	785b      	ldrb	r3, [r3, #1]
 8017c76:	f083 0301 	eor.w	r3, r3, #1
 8017c7a:	b2db      	uxtb	r3, r3
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d002      	beq.n	8017c86 <RadioIrqProcess+0x32a>
            SUBGRF_SetStandby( STDBY_RC );
 8017c80:	2000      	movs	r0, #0
 8017c82:	f000 fe09 	bl	8018898 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017c86:	4b24      	ldr	r3, [pc, #144]	; (8017d18 <RadioIrqProcess+0x3bc>)
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d039      	beq.n	8017d02 <RadioIrqProcess+0x3a6>
 8017c8e:	4b22      	ldr	r3, [pc, #136]	; (8017d18 <RadioIrqProcess+0x3bc>)
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	68db      	ldr	r3, [r3, #12]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d034      	beq.n	8017d02 <RadioIrqProcess+0x3a6>
            RadioEvents->RxTimeout( );
 8017c98:	4b1f      	ldr	r3, [pc, #124]	; (8017d18 <RadioIrqProcess+0x3bc>)
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	68db      	ldr	r3, [r3, #12]
 8017c9e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017ca0:	4b1e      	ldr	r3, [pc, #120]	; (8017d1c <RadioIrqProcess+0x3c0>)
 8017ca2:	2201      	movs	r2, #1
 8017ca4:	2100      	movs	r1, #0
 8017ca6:	2002      	movs	r0, #2
 8017ca8:	f002 ff08 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017cac:	e029      	b.n	8017d02 <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017cae:	4b1c      	ldr	r3, [pc, #112]	; (8017d20 <RadioIrqProcess+0x3c4>)
 8017cb0:	2201      	movs	r2, #1
 8017cb2:	2100      	movs	r1, #0
 8017cb4:	2002      	movs	r0, #2
 8017cb6:	f002 ff01 	bl	801aabc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017cba:	4b16      	ldr	r3, [pc, #88]	; (8017d14 <RadioIrqProcess+0x3b8>)
 8017cbc:	785b      	ldrb	r3, [r3, #1]
 8017cbe:	f083 0301 	eor.w	r3, r3, #1
 8017cc2:	b2db      	uxtb	r3, r3
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d002      	beq.n	8017cce <RadioIrqProcess+0x372>
            SUBGRF_SetStandby( STDBY_RC );
 8017cc8:	2000      	movs	r0, #0
 8017cca:	f000 fde5 	bl	8018898 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017cce:	4b12      	ldr	r3, [pc, #72]	; (8017d18 <RadioIrqProcess+0x3bc>)
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d017      	beq.n	8017d06 <RadioIrqProcess+0x3aa>
 8017cd6:	4b10      	ldr	r3, [pc, #64]	; (8017d18 <RadioIrqProcess+0x3bc>)
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	691b      	ldr	r3, [r3, #16]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d012      	beq.n	8017d06 <RadioIrqProcess+0x3aa>
            RadioEvents->RxError( );
 8017ce0:	4b0d      	ldr	r3, [pc, #52]	; (8017d18 <RadioIrqProcess+0x3bc>)
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	691b      	ldr	r3, [r3, #16]
 8017ce6:	4798      	blx	r3
        break;
 8017ce8:	e00d      	b.n	8017d06 <RadioIrqProcess+0x3aa>
        break;
 8017cea:	bf00      	nop
 8017cec:	e00c      	b.n	8017d08 <RadioIrqProcess+0x3ac>
        break;
 8017cee:	bf00      	nop
 8017cf0:	e00a      	b.n	8017d08 <RadioIrqProcess+0x3ac>
        break;
 8017cf2:	bf00      	nop
 8017cf4:	e008      	b.n	8017d08 <RadioIrqProcess+0x3ac>
        break;
 8017cf6:	bf00      	nop
 8017cf8:	e006      	b.n	8017d08 <RadioIrqProcess+0x3ac>
        break;
 8017cfa:	bf00      	nop
 8017cfc:	e004      	b.n	8017d08 <RadioIrqProcess+0x3ac>
        break;
 8017cfe:	bf00      	nop
 8017d00:	e002      	b.n	8017d08 <RadioIrqProcess+0x3ac>
        break;
 8017d02:	bf00      	nop
 8017d04:	e000      	b.n	8017d08 <RadioIrqProcess+0x3ac>
        break;
 8017d06:	bf00      	nop
  }
}
 8017d08:	bf00      	nop
 8017d0a:	370c      	adds	r7, #12
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	bd90      	pop	{r4, r7, pc}
 8017d10:	2000192c 	.word	0x2000192c
 8017d14:	200018bc 	.word	0x200018bc
 8017d18:	20000fd0 	.word	0x20000fd0
 8017d1c:	0801b9b0 	.word	0x0801b9b0
 8017d20:	0801b9bc 	.word	0x0801b9bc

08017d24 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017d28:	4b09      	ldr	r3, [pc, #36]	; (8017d50 <RadioTxPrbs+0x2c>)
 8017d2a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017d2e:	2101      	movs	r1, #1
 8017d30:	4618      	mov	r0, r3
 8017d32:	f001 fbb3 	bl	801949c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8017d36:	4b07      	ldr	r3, [pc, #28]	; (8017d54 <RadioTxPrbs+0x30>)
 8017d38:	212d      	movs	r1, #45	; 0x2d
 8017d3a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017d3e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017d40:	f000 fe6d 	bl	8018a1e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017d44:	4804      	ldr	r0, [pc, #16]	; (8017d58 <RadioTxPrbs+0x34>)
 8017d46:	f000 fdc3 	bl	80188d0 <SUBGRF_SetTx>
}
 8017d4a:	bf00      	nop
 8017d4c:	bd80      	pop	{r7, pc}
 8017d4e:	bf00      	nop
 8017d50:	200018bc 	.word	0x200018bc
 8017d54:	0801776b 	.word	0x0801776b
 8017d58:	000fffff 	.word	0x000fffff

08017d5c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b084      	sub	sp, #16
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	4603      	mov	r3, r0
 8017d64:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f001 fbbe 	bl	80194ec <SUBGRF_SetRfTxPower>
 8017d70:	4603      	mov	r3, r0
 8017d72:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017d74:	7bfb      	ldrb	r3, [r7, #15]
 8017d76:	2101      	movs	r1, #1
 8017d78:	4618      	mov	r0, r3
 8017d7a:	f001 fb8f 	bl	801949c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017d7e:	f000 fe45 	bl	8018a0c <SUBGRF_SetTxContinuousWave>
}
 8017d82:	bf00      	nop
 8017d84:	3710      	adds	r7, #16
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}

08017d8a <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017d8a:	b480      	push	{r7}
 8017d8c:	b089      	sub	sp, #36	; 0x24
 8017d8e:	af00      	add	r7, sp, #0
 8017d90:	60f8      	str	r0, [r7, #12]
 8017d92:	60b9      	str	r1, [r7, #8]
 8017d94:	4613      	mov	r3, r2
 8017d96:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017d98:	2300      	movs	r3, #0
 8017d9a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8017da0:	2300      	movs	r3, #0
 8017da2:	61bb      	str	r3, [r7, #24]
 8017da4:	e011      	b.n	8017dca <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017da6:	69bb      	ldr	r3, [r7, #24]
 8017da8:	68ba      	ldr	r2, [r7, #8]
 8017daa:	4413      	add	r3, r2
 8017dac:	781a      	ldrb	r2, [r3, #0]
 8017dae:	69bb      	ldr	r3, [r7, #24]
 8017db0:	68b9      	ldr	r1, [r7, #8]
 8017db2:	440b      	add	r3, r1
 8017db4:	43d2      	mvns	r2, r2
 8017db6:	b2d2      	uxtb	r2, r2
 8017db8:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017dba:	69bb      	ldr	r3, [r7, #24]
 8017dbc:	68fa      	ldr	r2, [r7, #12]
 8017dbe:	4413      	add	r3, r2
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8017dc4:	69bb      	ldr	r3, [r7, #24]
 8017dc6:	3301      	adds	r3, #1
 8017dc8:	61bb      	str	r3, [r7, #24]
 8017dca:	79fb      	ldrb	r3, [r7, #7]
 8017dcc:	69ba      	ldr	r2, [r7, #24]
 8017dce:	429a      	cmp	r2, r3
 8017dd0:	dbe9      	blt.n	8017da6 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	61bb      	str	r3, [r7, #24]
 8017dd6:	e049      	b.n	8017e6c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017dd8:	69bb      	ldr	r3, [r7, #24]
 8017dda:	425a      	negs	r2, r3
 8017ddc:	f003 0307 	and.w	r3, r3, #7
 8017de0:	f002 0207 	and.w	r2, r2, #7
 8017de4:	bf58      	it	pl
 8017de6:	4253      	negpl	r3, r2
 8017de8:	b2db      	uxtb	r3, r3
 8017dea:	f1c3 0307 	rsb	r3, r3, #7
 8017dee:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017df0:	69bb      	ldr	r3, [r7, #24]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	da00      	bge.n	8017df8 <payload_integration+0x6e>
 8017df6:	3307      	adds	r3, #7
 8017df8:	10db      	asrs	r3, r3, #3
 8017dfa:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017dfc:	69bb      	ldr	r3, [r7, #24]
 8017dfe:	3301      	adds	r3, #1
 8017e00:	425a      	negs	r2, r3
 8017e02:	f003 0307 	and.w	r3, r3, #7
 8017e06:	f002 0207 	and.w	r2, r2, #7
 8017e0a:	bf58      	it	pl
 8017e0c:	4253      	negpl	r3, r2
 8017e0e:	b2db      	uxtb	r3, r3
 8017e10:	f1c3 0307 	rsb	r3, r3, #7
 8017e14:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017e16:	69bb      	ldr	r3, [r7, #24]
 8017e18:	3301      	adds	r3, #1
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	da00      	bge.n	8017e20 <payload_integration+0x96>
 8017e1e:	3307      	adds	r3, #7
 8017e20:	10db      	asrs	r3, r3, #3
 8017e22:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017e24:	7dbb      	ldrb	r3, [r7, #22]
 8017e26:	68ba      	ldr	r2, [r7, #8]
 8017e28:	4413      	add	r3, r2
 8017e2a:	781b      	ldrb	r3, [r3, #0]
 8017e2c:	461a      	mov	r2, r3
 8017e2e:	7dfb      	ldrb	r3, [r7, #23]
 8017e30:	fa42 f303 	asr.w	r3, r2, r3
 8017e34:	b2db      	uxtb	r3, r3
 8017e36:	f003 0301 	and.w	r3, r3, #1
 8017e3a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017e3c:	7ffa      	ldrb	r2, [r7, #31]
 8017e3e:	7cfb      	ldrb	r3, [r7, #19]
 8017e40:	4053      	eors	r3, r2
 8017e42:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017e44:	7d3b      	ldrb	r3, [r7, #20]
 8017e46:	68fa      	ldr	r2, [r7, #12]
 8017e48:	4413      	add	r3, r2
 8017e4a:	781b      	ldrb	r3, [r3, #0]
 8017e4c:	b25a      	sxtb	r2, r3
 8017e4e:	7ff9      	ldrb	r1, [r7, #31]
 8017e50:	7d7b      	ldrb	r3, [r7, #21]
 8017e52:	fa01 f303 	lsl.w	r3, r1, r3
 8017e56:	b25b      	sxtb	r3, r3
 8017e58:	4313      	orrs	r3, r2
 8017e5a:	b259      	sxtb	r1, r3
 8017e5c:	7d3b      	ldrb	r3, [r7, #20]
 8017e5e:	68fa      	ldr	r2, [r7, #12]
 8017e60:	4413      	add	r3, r2
 8017e62:	b2ca      	uxtb	r2, r1
 8017e64:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8017e66:	69bb      	ldr	r3, [r7, #24]
 8017e68:	3301      	adds	r3, #1
 8017e6a:	61bb      	str	r3, [r7, #24]
 8017e6c:	79fb      	ldrb	r3, [r7, #7]
 8017e6e:	00db      	lsls	r3, r3, #3
 8017e70:	69ba      	ldr	r2, [r7, #24]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	dbb0      	blt.n	8017dd8 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017e76:	7ffb      	ldrb	r3, [r7, #31]
 8017e78:	01db      	lsls	r3, r3, #7
 8017e7a:	b25a      	sxtb	r2, r3
 8017e7c:	7ffb      	ldrb	r3, [r7, #31]
 8017e7e:	019b      	lsls	r3, r3, #6
 8017e80:	b25b      	sxtb	r3, r3
 8017e82:	4313      	orrs	r3, r2
 8017e84:	b25b      	sxtb	r3, r3
 8017e86:	7ffa      	ldrb	r2, [r7, #31]
 8017e88:	2a00      	cmp	r2, #0
 8017e8a:	d101      	bne.n	8017e90 <payload_integration+0x106>
 8017e8c:	2220      	movs	r2, #32
 8017e8e:	e000      	b.n	8017e92 <payload_integration+0x108>
 8017e90:	2200      	movs	r2, #0
 8017e92:	4313      	orrs	r3, r2
 8017e94:	b259      	sxtb	r1, r3
 8017e96:	79fb      	ldrb	r3, [r7, #7]
 8017e98:	68fa      	ldr	r2, [r7, #12]
 8017e9a:	4413      	add	r3, r2
 8017e9c:	b2ca      	uxtb	r2, r1
 8017e9e:	701a      	strb	r2, [r3, #0]
}
 8017ea0:	bf00      	nop
 8017ea2:	3724      	adds	r7, #36	; 0x24
 8017ea4:	46bd      	mov	sp, r7
 8017ea6:	bc80      	pop	{r7}
 8017ea8:	4770      	bx	lr
	...

08017eac <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b08c      	sub	sp, #48	; 0x30
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	60b9      	str	r1, [r7, #8]
 8017eb4:	607a      	str	r2, [r7, #4]
 8017eb6:	603b      	str	r3, [r7, #0]
 8017eb8:	4603      	mov	r3, r0
 8017eba:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	61fb      	str	r3, [r7, #28]
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017ec8:	f001 fccd 	bl	8019866 <RFW_DeInit>

    if( rxContinuous != 0 )
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d001      	beq.n	8017ed6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	bf14      	ite	ne
 8017edc:	2301      	movne	r3, #1
 8017ede:	2300      	moveq	r3, #0
 8017ee0:	b2da      	uxtb	r2, r3
 8017ee2:	4ba9      	ldr	r3, [pc, #676]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017ee4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017ee6:	7bfb      	ldrb	r3, [r7, #15]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d003      	beq.n	8017ef4 <RadioSetRxGenericConfig+0x48>
 8017eec:	2b01      	cmp	r3, #1
 8017eee:	f000 80e8 	beq.w	80180c2 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017ef2:	e1a0      	b.n	8018236 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017ef4:	68bb      	ldr	r3, [r7, #8]
 8017ef6:	68db      	ldr	r3, [r3, #12]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d003      	beq.n	8017f04 <RadioSetRxGenericConfig+0x58>
 8017efc:	68bb      	ldr	r3, [r7, #8]
 8017efe:	691b      	ldr	r3, [r3, #16]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d102      	bne.n	8017f0a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017f04:	f04f 33ff 	mov.w	r3, #4294967295
 8017f08:	e196      	b.n	8018238 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8017f0a:	68bb      	ldr	r3, [r7, #8]
 8017f0c:	7d5b      	ldrb	r3, [r3, #21]
 8017f0e:	2b08      	cmp	r3, #8
 8017f10:	d902      	bls.n	8017f18 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017f12:	f04f 33ff 	mov.w	r3, #4294967295
 8017f16:	e18f      	b.n	8018238 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017f18:	2300      	movs	r3, #0
 8017f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017f1c:	e00d      	b.n	8017f3a <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8017f1e:	68bb      	ldr	r3, [r7, #8]
 8017f20:	699a      	ldr	r2, [r3, #24]
 8017f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f24:	4413      	add	r3, r2
 8017f26:	7819      	ldrb	r1, [r3, #0]
 8017f28:	f107 021c 	add.w	r2, r7, #28
 8017f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f2e:	4413      	add	r3, r2
 8017f30:	460a      	mov	r2, r1
 8017f32:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f36:	3301      	adds	r3, #1
 8017f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8017f3a:	68bb      	ldr	r3, [r7, #8]
 8017f3c:	7d5b      	ldrb	r3, [r3, #21]
 8017f3e:	461a      	mov	r2, r3
 8017f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f42:	4293      	cmp	r3, r2
 8017f44:	dbeb      	blt.n	8017f1e <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017f46:	68bb      	ldr	r3, [r7, #8]
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	bf14      	ite	ne
 8017f4e:	2301      	movne	r3, #1
 8017f50:	2300      	moveq	r3, #0
 8017f52:	b2db      	uxtb	r3, r3
 8017f54:	4618      	mov	r0, r3
 8017f56:	f000 fd6b 	bl	8018a30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017f5a:	4b8b      	ldr	r3, [pc, #556]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017f62:	68bb      	ldr	r3, [r7, #8]
 8017f64:	68db      	ldr	r3, [r3, #12]
 8017f66:	4a88      	ldr	r2, [pc, #544]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017f68:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8017f6a:	68bb      	ldr	r3, [r7, #8]
 8017f6c:	791a      	ldrb	r2, [r3, #4]
 8017f6e:	4b86      	ldr	r3, [pc, #536]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017f74:	68bb      	ldr	r3, [r7, #8]
 8017f76:	689b      	ldr	r3, [r3, #8]
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f001 fba5 	bl	80196c8 <SUBGRF_GetFskBandwidthRegValue>
 8017f7e:	4603      	mov	r3, r0
 8017f80:	461a      	mov	r2, r3
 8017f82:	4b81      	ldr	r3, [pc, #516]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017f88:	4b7f      	ldr	r3, [pc, #508]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8017f8e:	68bb      	ldr	r3, [r7, #8]
 8017f90:	691b      	ldr	r3, [r3, #16]
 8017f92:	b29b      	uxth	r3, r3
 8017f94:	00db      	lsls	r3, r3, #3
 8017f96:	b29a      	uxth	r2, r3
 8017f98:	4b7b      	ldr	r3, [pc, #492]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017f9a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8017f9c:	68bb      	ldr	r3, [r7, #8]
 8017f9e:	7d1a      	ldrb	r2, [r3, #20]
 8017fa0:	4b79      	ldr	r3, [pc, #484]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017fa2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	7d5b      	ldrb	r3, [r3, #21]
 8017fa8:	00db      	lsls	r3, r3, #3
 8017faa:	b2da      	uxtb	r2, r3
 8017fac:	4b76      	ldr	r3, [pc, #472]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017fae:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8017fb0:	68bb      	ldr	r3, [r7, #8]
 8017fb2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8017fb6:	4b74      	ldr	r3, [pc, #464]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017fb8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8017fba:	68bb      	ldr	r3, [r7, #8]
 8017fbc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d105      	bne.n	8017fd0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8017fc4:	68bb      	ldr	r3, [r7, #8]
 8017fc6:	69db      	ldr	r3, [r3, #28]
 8017fc8:	b2da      	uxtb	r2, r3
 8017fca:	4b6f      	ldr	r3, [pc, #444]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017fcc:	759a      	strb	r2, [r3, #22]
 8017fce:	e00b      	b.n	8017fe8 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8017fd0:	68bb      	ldr	r3, [r7, #8]
 8017fd2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017fd6:	2b02      	cmp	r3, #2
 8017fd8:	d103      	bne.n	8017fe2 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017fda:	4b6b      	ldr	r3, [pc, #428]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017fdc:	22ff      	movs	r2, #255	; 0xff
 8017fde:	759a      	strb	r2, [r3, #22]
 8017fe0:	e002      	b.n	8017fe8 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017fe2:	4b69      	ldr	r3, [pc, #420]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8017fe4:	22ff      	movs	r2, #255	; 0xff
 8017fe6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017fe8:	68bb      	ldr	r3, [r7, #8]
 8017fea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8017fee:	2b02      	cmp	r3, #2
 8017ff0:	d004      	beq.n	8017ffc <RadioSetRxGenericConfig+0x150>
 8017ff2:	68bb      	ldr	r3, [r7, #8]
 8017ff4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017ff8:	2b02      	cmp	r3, #2
 8017ffa:	d12d      	bne.n	8018058 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017ffc:	68bb      	ldr	r3, [r7, #8]
 8017ffe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018002:	2bf1      	cmp	r3, #241	; 0xf1
 8018004:	d00c      	beq.n	8018020 <RadioSetRxGenericConfig+0x174>
 8018006:	68bb      	ldr	r3, [r7, #8]
 8018008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801800c:	2bf2      	cmp	r3, #242	; 0xf2
 801800e:	d007      	beq.n	8018020 <RadioSetRxGenericConfig+0x174>
 8018010:	68bb      	ldr	r3, [r7, #8]
 8018012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018016:	2b01      	cmp	r3, #1
 8018018:	d002      	beq.n	8018020 <RadioSetRxGenericConfig+0x174>
            return -1;
 801801a:	f04f 33ff 	mov.w	r3, #4294967295
 801801e:	e10b      	b.n	8018238 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8018020:	2300      	movs	r3, #0
 8018022:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8018024:	68bb      	ldr	r3, [r7, #8]
 8018026:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018028:	4b58      	ldr	r3, [pc, #352]	; (801818c <RadioSetRxGenericConfig+0x2e0>)
 801802a:	6819      	ldr	r1, [r3, #0]
 801802c:	f107 0310 	add.w	r3, r7, #16
 8018030:	4a57      	ldr	r2, [pc, #348]	; (8018190 <RadioSetRxGenericConfig+0x2e4>)
 8018032:	4618      	mov	r0, r3
 8018034:	f001 fc0a 	bl	801984c <RFW_Init>
 8018038:	4603      	mov	r3, r0
 801803a:	2b00      	cmp	r3, #0
 801803c:	d002      	beq.n	8018044 <RadioSetRxGenericConfig+0x198>
            return -1;
 801803e:	f04f 33ff 	mov.w	r3, #4294967295
 8018042:	e0f9      	b.n	8018238 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018044:	4b50      	ldr	r3, [pc, #320]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8018046:	2200      	movs	r2, #0
 8018048:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801804a:	4b4f      	ldr	r3, [pc, #316]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 801804c:	2201      	movs	r2, #1
 801804e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018050:	4b4d      	ldr	r3, [pc, #308]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8018052:	2200      	movs	r2, #0
 8018054:	755a      	strb	r2, [r3, #21]
        {
 8018056:	e00e      	b.n	8018076 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801805e:	4b4a      	ldr	r3, [pc, #296]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8018060:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018062:	68bb      	ldr	r3, [r7, #8]
 8018064:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018068:	4b47      	ldr	r3, [pc, #284]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 801806a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801806c:	68bb      	ldr	r3, [r7, #8]
 801806e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8018072:	4b45      	ldr	r3, [pc, #276]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8018074:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018076:	f7ff fa92 	bl	801759e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801807a:	2000      	movs	r0, #0
 801807c:	f7fe fc24 	bl	80168c8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018080:	4844      	ldr	r0, [pc, #272]	; (8018194 <RadioSetRxGenericConfig+0x2e8>)
 8018082:	f000 ff03 	bl	8018e8c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018086:	4844      	ldr	r0, [pc, #272]	; (8018198 <RadioSetRxGenericConfig+0x2ec>)
 8018088:	f000 ffcc 	bl	8019024 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801808c:	f107 031c 	add.w	r3, r7, #28
 8018090:	4618      	mov	r0, r3
 8018092:	f000 fb06 	bl	80186a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	8c1b      	ldrh	r3, [r3, #32]
 801809a:	4618      	mov	r0, r3
 801809c:	f000 fb50 	bl	8018740 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80180a0:	68bb      	ldr	r3, [r7, #8]
 80180a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80180a4:	4618      	mov	r0, r3
 80180a6:	f000 fb2b 	bl	8018700 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80180aa:	683b      	ldr	r3, [r7, #0]
 80180ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80180b0:	fb02 f203 	mul.w	r2, r2, r3
 80180b4:	68bb      	ldr	r3, [r7, #8]
 80180b6:	68db      	ldr	r3, [r3, #12]
 80180b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80180bc:	4a32      	ldr	r2, [pc, #200]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 80180be:	6093      	str	r3, [r2, #8]
        break;
 80180c0:	e0b9      	b.n	8018236 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 80180c2:	68bb      	ldr	r3, [r7, #8]
 80180c4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d102      	bne.n	80180d0 <RadioSetRxGenericConfig+0x224>
            return -1;
 80180ca:	f04f 33ff 	mov.w	r3, #4294967295
 80180ce:	e0b3      	b.n	8018238 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80180d0:	68bb      	ldr	r3, [r7, #8]
 80180d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80180d6:	2b01      	cmp	r3, #1
 80180d8:	d104      	bne.n	80180e4 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80180da:	68bb      	ldr	r3, [r7, #8]
 80180dc:	69db      	ldr	r3, [r3, #28]
 80180de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80180e2:	e002      	b.n	80180ea <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 80180e4:	23ff      	movs	r3, #255	; 0xff
 80180e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80180ea:	68bb      	ldr	r3, [r7, #8]
 80180ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	bf14      	ite	ne
 80180f2:	2301      	movne	r3, #1
 80180f4:	2300      	moveq	r3, #0
 80180f6:	b2db      	uxtb	r3, r3
 80180f8:	4618      	mov	r0, r3
 80180fa:	f000 fc99 	bl	8018a30 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80180fe:	683b      	ldr	r3, [r7, #0]
 8018100:	b2db      	uxtb	r3, r3
 8018102:	4618      	mov	r0, r3
 8018104:	f000 fca3 	bl	8018a4e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018108:	4b1f      	ldr	r3, [pc, #124]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 801810a:	2201      	movs	r2, #1
 801810c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018110:	68bb      	ldr	r3, [r7, #8]
 8018112:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018116:	4b1c      	ldr	r3, [pc, #112]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8018118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801811c:	68bb      	ldr	r3, [r7, #8]
 801811e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8018122:	4b19      	ldr	r3, [pc, #100]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8018124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801812e:	4b16      	ldr	r3, [pc, #88]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8018130:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8018134:	68bb      	ldr	r3, [r7, #8]
 8018136:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801813a:	2b02      	cmp	r3, #2
 801813c:	d010      	beq.n	8018160 <RadioSetRxGenericConfig+0x2b4>
 801813e:	2b02      	cmp	r3, #2
 8018140:	dc2c      	bgt.n	801819c <RadioSetRxGenericConfig+0x2f0>
 8018142:	2b00      	cmp	r3, #0
 8018144:	d002      	beq.n	801814c <RadioSetRxGenericConfig+0x2a0>
 8018146:	2b01      	cmp	r3, #1
 8018148:	d005      	beq.n	8018156 <RadioSetRxGenericConfig+0x2aa>
            break;
 801814a:	e027      	b.n	801819c <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801814c:	4b0e      	ldr	r3, [pc, #56]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 801814e:	2200      	movs	r2, #0
 8018150:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018154:	e023      	b.n	801819e <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018156:	4b0c      	ldr	r3, [pc, #48]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8018158:	2201      	movs	r2, #1
 801815a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801815e:	e01e      	b.n	801819e <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018160:	68bb      	ldr	r3, [r7, #8]
 8018162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018166:	2b0b      	cmp	r3, #11
 8018168:	d004      	beq.n	8018174 <RadioSetRxGenericConfig+0x2c8>
 801816a:	68bb      	ldr	r3, [r7, #8]
 801816c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018170:	2b0c      	cmp	r3, #12
 8018172:	d104      	bne.n	801817e <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018174:	4b04      	ldr	r3, [pc, #16]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8018176:	2201      	movs	r2, #1
 8018178:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801817c:	e00f      	b.n	801819e <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801817e:	4b02      	ldr	r3, [pc, #8]	; (8018188 <RadioSetRxGenericConfig+0x2dc>)
 8018180:	2200      	movs	r2, #0
 8018182:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018186:	e00a      	b.n	801819e <RadioSetRxGenericConfig+0x2f2>
 8018188:	200018bc 	.word	0x200018bc
 801818c:	20000fd0 	.word	0x20000fd0
 8018190:	2000192c 	.word	0x2000192c
 8018194:	200018f4 	.word	0x200018f4
 8018198:	200018ca 	.word	0x200018ca
            break;
 801819c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801819e:	4b28      	ldr	r3, [pc, #160]	; (8018240 <RadioSetRxGenericConfig+0x394>)
 80181a0:	2201      	movs	r2, #1
 80181a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80181a4:	68bb      	ldr	r3, [r7, #8]
 80181a6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80181a8:	4b25      	ldr	r3, [pc, #148]	; (8018240 <RadioSetRxGenericConfig+0x394>)
 80181aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80181ac:	68bb      	ldr	r3, [r7, #8]
 80181ae:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80181b2:	4b23      	ldr	r3, [pc, #140]	; (8018240 <RadioSetRxGenericConfig+0x394>)
 80181b4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80181b6:	4a22      	ldr	r2, [pc, #136]	; (8018240 <RadioSetRxGenericConfig+0x394>)
 80181b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80181bc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80181be:	68bb      	ldr	r3, [r7, #8]
 80181c0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80181c4:	4b1e      	ldr	r3, [pc, #120]	; (8018240 <RadioSetRxGenericConfig+0x394>)
 80181c6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80181ca:	68bb      	ldr	r3, [r7, #8]
 80181cc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80181d0:	4b1b      	ldr	r3, [pc, #108]	; (8018240 <RadioSetRxGenericConfig+0x394>)
 80181d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80181d6:	f7ff f9e2 	bl	801759e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80181da:	2001      	movs	r0, #1
 80181dc:	f7fe fb74 	bl	80168c8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80181e0:	4818      	ldr	r0, [pc, #96]	; (8018244 <RadioSetRxGenericConfig+0x398>)
 80181e2:	f000 fe53 	bl	8018e8c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80181e6:	4818      	ldr	r0, [pc, #96]	; (8018248 <RadioSetRxGenericConfig+0x39c>)
 80181e8:	f000 ff1c 	bl	8019024 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80181ec:	4b14      	ldr	r3, [pc, #80]	; (8018240 <RadioSetRxGenericConfig+0x394>)
 80181ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80181f2:	2b01      	cmp	r3, #1
 80181f4:	d10d      	bne.n	8018212 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80181f6:	f240 7036 	movw	r0, #1846	; 0x736
 80181fa:	f001 f86f 	bl	80192dc <SUBGRF_ReadRegister>
 80181fe:	4603      	mov	r3, r0
 8018200:	f023 0304 	bic.w	r3, r3, #4
 8018204:	b2db      	uxtb	r3, r3
 8018206:	4619      	mov	r1, r3
 8018208:	f240 7036 	movw	r0, #1846	; 0x736
 801820c:	f001 f852 	bl	80192b4 <SUBGRF_WriteRegister>
 8018210:	e00c      	b.n	801822c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8018212:	f240 7036 	movw	r0, #1846	; 0x736
 8018216:	f001 f861 	bl	80192dc <SUBGRF_ReadRegister>
 801821a:	4603      	mov	r3, r0
 801821c:	f043 0304 	orr.w	r3, r3, #4
 8018220:	b2db      	uxtb	r3, r3
 8018222:	4619      	mov	r1, r3
 8018224:	f240 7036 	movw	r0, #1846	; 0x736
 8018228:	f001 f844 	bl	80192b4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801822c:	4b04      	ldr	r3, [pc, #16]	; (8018240 <RadioSetRxGenericConfig+0x394>)
 801822e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018232:	609a      	str	r2, [r3, #8]
        break;
 8018234:	bf00      	nop
    }
    return status;
 8018236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018238:	4618      	mov	r0, r3
 801823a:	3730      	adds	r7, #48	; 0x30
 801823c:	46bd      	mov	sp, r7
 801823e:	bd80      	pop	{r7, pc}
 8018240:	200018bc 	.word	0x200018bc
 8018244:	200018f4 	.word	0x200018f4
 8018248:	200018ca 	.word	0x200018ca

0801824c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b08a      	sub	sp, #40	; 0x28
 8018250:	af00      	add	r7, sp, #0
 8018252:	60b9      	str	r1, [r7, #8]
 8018254:	607b      	str	r3, [r7, #4]
 8018256:	4603      	mov	r3, r0
 8018258:	73fb      	strb	r3, [r7, #15]
 801825a:	4613      	mov	r3, r2
 801825c:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 801825e:	2300      	movs	r3, #0
 8018260:	61fb      	str	r3, [r7, #28]
 8018262:	2300      	movs	r3, #0
 8018264:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018266:	f001 fafe 	bl	8019866 <RFW_DeInit>
    switch( modem )
 801826a:	7bfb      	ldrb	r3, [r7, #15]
 801826c:	2b02      	cmp	r3, #2
 801826e:	f000 8144 	beq.w	80184fa <RadioSetTxGenericConfig+0x2ae>
 8018272:	2b02      	cmp	r3, #2
 8018274:	f300 8160 	bgt.w	8018538 <RadioSetTxGenericConfig+0x2ec>
 8018278:	2b00      	cmp	r3, #0
 801827a:	d003      	beq.n	8018284 <RadioSetTxGenericConfig+0x38>
 801827c:	2b01      	cmp	r3, #1
 801827e:	f000 80b7 	beq.w	80183f0 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8018282:	e159      	b.n	8018538 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018284:	68bb      	ldr	r3, [r7, #8]
 8018286:	689b      	ldr	r3, [r3, #8]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d003      	beq.n	8018294 <RadioSetTxGenericConfig+0x48>
 801828c:	68bb      	ldr	r3, [r7, #8]
 801828e:	691b      	ldr	r3, [r3, #16]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d102      	bne.n	801829a <RadioSetTxGenericConfig+0x4e>
            return -1;
 8018294:	f04f 33ff 	mov.w	r3, #4294967295
 8018298:	e163      	b.n	8018562 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 801829a:	68bb      	ldr	r3, [r7, #8]
 801829c:	7d1b      	ldrb	r3, [r3, #20]
 801829e:	2b08      	cmp	r3, #8
 80182a0:	d902      	bls.n	80182a8 <RadioSetTxGenericConfig+0x5c>
            return -1;
 80182a2:	f04f 33ff 	mov.w	r3, #4294967295
 80182a6:	e15c      	b.n	8018562 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80182a8:	2300      	movs	r3, #0
 80182aa:	627b      	str	r3, [r7, #36]	; 0x24
 80182ac:	e00d      	b.n	80182ca <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 80182ae:	68bb      	ldr	r3, [r7, #8]
 80182b0:	699a      	ldr	r2, [r3, #24]
 80182b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182b4:	4413      	add	r3, r2
 80182b6:	7819      	ldrb	r1, [r3, #0]
 80182b8:	f107 021c 	add.w	r2, r7, #28
 80182bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182be:	4413      	add	r3, r2
 80182c0:	460a      	mov	r2, r1
 80182c2:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80182c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182c6:	3301      	adds	r3, #1
 80182c8:	627b      	str	r3, [r7, #36]	; 0x24
 80182ca:	68bb      	ldr	r3, [r7, #8]
 80182cc:	7d1b      	ldrb	r3, [r3, #20]
 80182ce:	461a      	mov	r2, r3
 80182d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182d2:	4293      	cmp	r3, r2
 80182d4:	dbeb      	blt.n	80182ae <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80182d6:	4ba5      	ldr	r3, [pc, #660]	; (801856c <RadioSetTxGenericConfig+0x320>)
 80182d8:	2200      	movs	r2, #0
 80182da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80182de:	68bb      	ldr	r3, [r7, #8]
 80182e0:	689b      	ldr	r3, [r3, #8]
 80182e2:	4aa2      	ldr	r2, [pc, #648]	; (801856c <RadioSetTxGenericConfig+0x320>)
 80182e4:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80182e6:	68bb      	ldr	r3, [r7, #8]
 80182e8:	781a      	ldrb	r2, [r3, #0]
 80182ea:	4ba0      	ldr	r3, [pc, #640]	; (801856c <RadioSetTxGenericConfig+0x320>)
 80182ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80182f0:	68bb      	ldr	r3, [r7, #8]
 80182f2:	685b      	ldr	r3, [r3, #4]
 80182f4:	4618      	mov	r0, r3
 80182f6:	f001 f9e7 	bl	80196c8 <SUBGRF_GetFskBandwidthRegValue>
 80182fa:	4603      	mov	r3, r0
 80182fc:	461a      	mov	r2, r3
 80182fe:	4b9b      	ldr	r3, [pc, #620]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	68db      	ldr	r3, [r3, #12]
 8018308:	4a98      	ldr	r2, [pc, #608]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801830a:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801830c:	4b97      	ldr	r3, [pc, #604]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801830e:	2200      	movs	r2, #0
 8018310:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	691b      	ldr	r3, [r3, #16]
 8018316:	b29b      	uxth	r3, r3
 8018318:	00db      	lsls	r3, r3, #3
 801831a:	b29a      	uxth	r2, r3
 801831c:	4b93      	ldr	r3, [pc, #588]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801831e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018320:	4b92      	ldr	r3, [pc, #584]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018322:	2204      	movs	r2, #4
 8018324:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	7d1b      	ldrb	r3, [r3, #20]
 801832a:	00db      	lsls	r3, r3, #3
 801832c:	b2da      	uxtb	r2, r3
 801832e:	4b8f      	ldr	r3, [pc, #572]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018330:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018332:	4b8e      	ldr	r3, [pc, #568]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018334:	2200      	movs	r2, #0
 8018336:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801833e:	2b02      	cmp	r3, #2
 8018340:	d003      	beq.n	801834a <RadioSetTxGenericConfig+0xfe>
 8018342:	68bb      	ldr	r3, [r7, #8]
 8018344:	7f9b      	ldrb	r3, [r3, #30]
 8018346:	2b02      	cmp	r3, #2
 8018348:	d12a      	bne.n	80183a0 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801834a:	68bb      	ldr	r3, [r7, #8]
 801834c:	7fdb      	ldrb	r3, [r3, #31]
 801834e:	2bf1      	cmp	r3, #241	; 0xf1
 8018350:	d00a      	beq.n	8018368 <RadioSetTxGenericConfig+0x11c>
 8018352:	68bb      	ldr	r3, [r7, #8]
 8018354:	7fdb      	ldrb	r3, [r3, #31]
 8018356:	2bf2      	cmp	r3, #242	; 0xf2
 8018358:	d006      	beq.n	8018368 <RadioSetTxGenericConfig+0x11c>
 801835a:	68bb      	ldr	r3, [r7, #8]
 801835c:	7fdb      	ldrb	r3, [r3, #31]
 801835e:	2b01      	cmp	r3, #1
 8018360:	d002      	beq.n	8018368 <RadioSetTxGenericConfig+0x11c>
                return -1;
 8018362:	f04f 33ff 	mov.w	r3, #4294967295
 8018366:	e0fc      	b.n	8018562 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8018368:	2301      	movs	r3, #1
 801836a:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 801836c:	68bb      	ldr	r3, [r7, #8]
 801836e:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018370:	4b7f      	ldr	r3, [pc, #508]	; (8018570 <RadioSetTxGenericConfig+0x324>)
 8018372:	6819      	ldr	r1, [r3, #0]
 8018374:	f107 0310 	add.w	r3, r7, #16
 8018378:	4a7e      	ldr	r2, [pc, #504]	; (8018574 <RadioSetTxGenericConfig+0x328>)
 801837a:	4618      	mov	r0, r3
 801837c:	f001 fa66 	bl	801984c <RFW_Init>
 8018380:	4603      	mov	r3, r0
 8018382:	2b00      	cmp	r3, #0
 8018384:	d002      	beq.n	801838c <RadioSetTxGenericConfig+0x140>
              return -1;
 8018386:	f04f 33ff 	mov.w	r3, #4294967295
 801838a:	e0ea      	b.n	8018562 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801838c:	4b77      	ldr	r3, [pc, #476]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801838e:	2200      	movs	r2, #0
 8018390:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018392:	4b76      	ldr	r3, [pc, #472]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018394:	2201      	movs	r2, #1
 8018396:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018398:	4b74      	ldr	r3, [pc, #464]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801839a:	2200      	movs	r2, #0
 801839c:	755a      	strb	r2, [r3, #21]
        {
 801839e:	e00c      	b.n	80183ba <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80183a0:	68bb      	ldr	r3, [r7, #8]
 80183a2:	7fda      	ldrb	r2, [r3, #31]
 80183a4:	4b71      	ldr	r3, [pc, #452]	; (801856c <RadioSetTxGenericConfig+0x320>)
 80183a6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80183a8:	68bb      	ldr	r3, [r7, #8]
 80183aa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80183ae:	4b6f      	ldr	r3, [pc, #444]	; (801856c <RadioSetTxGenericConfig+0x320>)
 80183b0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80183b2:	68bb      	ldr	r3, [r7, #8]
 80183b4:	7f9a      	ldrb	r2, [r3, #30]
 80183b6:	4b6d      	ldr	r3, [pc, #436]	; (801856c <RadioSetTxGenericConfig+0x320>)
 80183b8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80183ba:	f7ff f8f0 	bl	801759e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80183be:	2000      	movs	r0, #0
 80183c0:	f7fe fa82 	bl	80168c8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80183c4:	486c      	ldr	r0, [pc, #432]	; (8018578 <RadioSetTxGenericConfig+0x32c>)
 80183c6:	f000 fd61 	bl	8018e8c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80183ca:	486c      	ldr	r0, [pc, #432]	; (801857c <RadioSetTxGenericConfig+0x330>)
 80183cc:	f000 fe2a 	bl	8019024 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80183d0:	f107 031c 	add.w	r3, r7, #28
 80183d4:	4618      	mov	r0, r3
 80183d6:	f000 f964 	bl	80186a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	8b9b      	ldrh	r3, [r3, #28]
 80183de:	4618      	mov	r0, r3
 80183e0:	f000 f9ae 	bl	8018740 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 80183e4:	68bb      	ldr	r3, [r7, #8]
 80183e6:	8c1b      	ldrh	r3, [r3, #32]
 80183e8:	4618      	mov	r0, r3
 80183ea:	f000 f989 	bl	8018700 <SUBGRF_SetCrcPolynomial>
        break;
 80183ee:	e0a4      	b.n	801853a <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80183f0:	4b5e      	ldr	r3, [pc, #376]	; (801856c <RadioSetTxGenericConfig+0x320>)
 80183f2:	2201      	movs	r2, #1
 80183f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80183f8:	68bb      	ldr	r3, [r7, #8]
 80183fa:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80183fe:	4b5b      	ldr	r3, [pc, #364]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018404:	68bb      	ldr	r3, [r7, #8]
 8018406:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801840a:	4b58      	ldr	r3, [pc, #352]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801840c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018410:	68bb      	ldr	r3, [r7, #8]
 8018412:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018416:	4b55      	ldr	r3, [pc, #340]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018418:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801841c:	68bb      	ldr	r3, [r7, #8]
 801841e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018422:	2b02      	cmp	r3, #2
 8018424:	d010      	beq.n	8018448 <RadioSetTxGenericConfig+0x1fc>
 8018426:	2b02      	cmp	r3, #2
 8018428:	dc22      	bgt.n	8018470 <RadioSetTxGenericConfig+0x224>
 801842a:	2b00      	cmp	r3, #0
 801842c:	d002      	beq.n	8018434 <RadioSetTxGenericConfig+0x1e8>
 801842e:	2b01      	cmp	r3, #1
 8018430:	d005      	beq.n	801843e <RadioSetTxGenericConfig+0x1f2>
            break;
 8018432:	e01d      	b.n	8018470 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018434:	4b4d      	ldr	r3, [pc, #308]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018436:	2200      	movs	r2, #0
 8018438:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801843c:	e019      	b.n	8018472 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801843e:	4b4b      	ldr	r3, [pc, #300]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018440:	2201      	movs	r2, #1
 8018442:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018446:	e014      	b.n	8018472 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018448:	68bb      	ldr	r3, [r7, #8]
 801844a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801844e:	2b0b      	cmp	r3, #11
 8018450:	d004      	beq.n	801845c <RadioSetTxGenericConfig+0x210>
 8018452:	68bb      	ldr	r3, [r7, #8]
 8018454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018458:	2b0c      	cmp	r3, #12
 801845a:	d104      	bne.n	8018466 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801845c:	4b43      	ldr	r3, [pc, #268]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801845e:	2201      	movs	r2, #1
 8018460:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018464:	e005      	b.n	8018472 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018466:	4b41      	ldr	r3, [pc, #260]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018468:	2200      	movs	r2, #0
 801846a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801846e:	e000      	b.n	8018472 <RadioSetTxGenericConfig+0x226>
            break;
 8018470:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018472:	4b3e      	ldr	r3, [pc, #248]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018474:	2201      	movs	r2, #1
 8018476:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018478:	68bb      	ldr	r3, [r7, #8]
 801847a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801847c:	4b3b      	ldr	r3, [pc, #236]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801847e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018480:	68bb      	ldr	r3, [r7, #8]
 8018482:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8018486:	4b39      	ldr	r3, [pc, #228]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018488:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801848a:	68bb      	ldr	r3, [r7, #8]
 801848c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018490:	4b36      	ldr	r3, [pc, #216]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018492:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018496:	68bb      	ldr	r3, [r7, #8]
 8018498:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801849c:	4b33      	ldr	r3, [pc, #204]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801849e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80184a2:	f7ff f87c 	bl	801759e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80184a6:	2001      	movs	r0, #1
 80184a8:	f7fe fa0e 	bl	80168c8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80184ac:	4832      	ldr	r0, [pc, #200]	; (8018578 <RadioSetTxGenericConfig+0x32c>)
 80184ae:	f000 fced 	bl	8018e8c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80184b2:	4832      	ldr	r0, [pc, #200]	; (801857c <RadioSetTxGenericConfig+0x330>)
 80184b4:	f000 fdb6 	bl	8019024 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80184b8:	4b2c      	ldr	r3, [pc, #176]	; (801856c <RadioSetTxGenericConfig+0x320>)
 80184ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80184be:	2b06      	cmp	r3, #6
 80184c0:	d10d      	bne.n	80184de <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80184c2:	f640 0089 	movw	r0, #2185	; 0x889
 80184c6:	f000 ff09 	bl	80192dc <SUBGRF_ReadRegister>
 80184ca:	4603      	mov	r3, r0
 80184cc:	f023 0304 	bic.w	r3, r3, #4
 80184d0:	b2db      	uxtb	r3, r3
 80184d2:	4619      	mov	r1, r3
 80184d4:	f640 0089 	movw	r0, #2185	; 0x889
 80184d8:	f000 feec 	bl	80192b4 <SUBGRF_WriteRegister>
        break;
 80184dc:	e02d      	b.n	801853a <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80184de:	f640 0089 	movw	r0, #2185	; 0x889
 80184e2:	f000 fefb 	bl	80192dc <SUBGRF_ReadRegister>
 80184e6:	4603      	mov	r3, r0
 80184e8:	f043 0304 	orr.w	r3, r3, #4
 80184ec:	b2db      	uxtb	r3, r3
 80184ee:	4619      	mov	r1, r3
 80184f0:	f640 0089 	movw	r0, #2185	; 0x889
 80184f4:	f000 fede 	bl	80192b4 <SUBGRF_WriteRegister>
        break;
 80184f8:	e01f      	b.n	801853a <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80184fa:	68bb      	ldr	r3, [r7, #8]
 80184fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d004      	beq.n	801850c <RadioSetTxGenericConfig+0x2c0>
 8018502:	68bb      	ldr	r3, [r7, #8]
 8018504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801850a:	d902      	bls.n	8018512 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 801850c:	f04f 33ff 	mov.w	r3, #4294967295
 8018510:	e027      	b.n	8018562 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8018512:	2002      	movs	r0, #2
 8018514:	f7fe f9d8 	bl	80168c8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018518:	4b14      	ldr	r3, [pc, #80]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801851a:	2202      	movs	r2, #2
 801851c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018520:	68bb      	ldr	r3, [r7, #8]
 8018522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018524:	4a11      	ldr	r2, [pc, #68]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018526:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018528:	4b10      	ldr	r3, [pc, #64]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801852a:	2216      	movs	r2, #22
 801852c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018530:	4811      	ldr	r0, [pc, #68]	; (8018578 <RadioSetTxGenericConfig+0x32c>)
 8018532:	f000 fcab 	bl	8018e8c <SUBGRF_SetModulationParams>
        break;
 8018536:	e000      	b.n	801853a <RadioSetTxGenericConfig+0x2ee>
        break;
 8018538:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801853a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801853e:	4618      	mov	r0, r3
 8018540:	f000 ffd4 	bl	80194ec <SUBGRF_SetRfTxPower>
 8018544:	4603      	mov	r3, r0
 8018546:	461a      	mov	r2, r3
 8018548:	4b08      	ldr	r3, [pc, #32]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801854a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801854e:	4b07      	ldr	r3, [pc, #28]	; (801856c <RadioSetTxGenericConfig+0x320>)
 8018550:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018554:	4618      	mov	r0, r3
 8018556:	f001 f99a 	bl	801988e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801855a:	4a04      	ldr	r2, [pc, #16]	; (801856c <RadioSetTxGenericConfig+0x320>)
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	6053      	str	r3, [r2, #4]
    return 0;
 8018560:	2300      	movs	r3, #0
}
 8018562:	4618      	mov	r0, r3
 8018564:	3728      	adds	r7, #40	; 0x28
 8018566:	46bd      	mov	sp, r7
 8018568:	bd80      	pop	{r7, pc}
 801856a:	bf00      	nop
 801856c:	200018bc 	.word	0x200018bc
 8018570:	20000fd0 	.word	0x20000fd0
 8018574:	20001914 	.word	0x20001914
 8018578:	200018f4 	.word	0x200018f4
 801857c:	200018ca 	.word	0x200018ca

08018580 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b084      	sub	sp, #16
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d002      	beq.n	8018594 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801858e:	4a1a      	ldr	r2, [pc, #104]	; (80185f8 <SUBGRF_Init+0x78>)
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018594:	f7e9 fb6a 	bl	8001c6c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018598:	2002      	movs	r0, #2
 801859a:	f001 f873 	bl	8019684 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801859e:	4b17      	ldr	r3, [pc, #92]	; (80185fc <SUBGRF_Init+0x7c>)
 80185a0:	2200      	movs	r2, #0
 80185a2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80185a4:	2000      	movs	r0, #0
 80185a6:	f000 f977 	bl	8018898 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80185aa:	f7f2 fb6b 	bl	800ac84 <RBI_IsTCXO>
 80185ae:	4603      	mov	r3, r0
 80185b0:	2b01      	cmp	r3, #1
 80185b2:	d10e      	bne.n	80185d2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80185b4:	2140      	movs	r1, #64	; 0x40
 80185b6:	2001      	movs	r0, #1
 80185b8:	f000 fb78 	bl	8018cac <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80185bc:	2100      	movs	r1, #0
 80185be:	f640 1011 	movw	r0, #2321	; 0x911
 80185c2:	f000 fe77 	bl	80192b4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80185c6:	237f      	movs	r3, #127	; 0x7f
 80185c8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80185ca:	7b38      	ldrb	r0, [r7, #12]
 80185cc:	f000 fa85 	bl	8018ada <SUBGRF_Calibrate>
 80185d0:	e009      	b.n	80185e6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80185d2:	2120      	movs	r1, #32
 80185d4:	f640 1011 	movw	r0, #2321	; 0x911
 80185d8:	f000 fe6c 	bl	80192b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80185dc:	2120      	movs	r1, #32
 80185de:	f640 1012 	movw	r0, #2322	; 0x912
 80185e2:	f000 fe67 	bl	80192b4 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 80185e6:	f7f2 fb31 	bl	800ac4c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80185ea:	4b05      	ldr	r3, [pc, #20]	; (8018600 <SUBGRF_Init+0x80>)
 80185ec:	2201      	movs	r2, #1
 80185ee:	701a      	strb	r2, [r3, #0]
}
 80185f0:	bf00      	nop
 80185f2:	3710      	adds	r7, #16
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}
 80185f8:	20000fe0 	.word	0x20000fe0
 80185fc:	20000fdc 	.word	0x20000fdc
 8018600:	20000fd4 	.word	0x20000fd4

08018604 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018604:	b480      	push	{r7}
 8018606:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018608:	4b02      	ldr	r3, [pc, #8]	; (8018614 <SUBGRF_GetOperatingMode+0x10>)
 801860a:	781b      	ldrb	r3, [r3, #0]
}
 801860c:	4618      	mov	r0, r3
 801860e:	46bd      	mov	sp, r7
 8018610:	bc80      	pop	{r7}
 8018612:	4770      	bx	lr
 8018614:	20000fd4 	.word	0x20000fd4

08018618 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b082      	sub	sp, #8
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
 8018620:	460b      	mov	r3, r1
 8018622:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018624:	78fb      	ldrb	r3, [r7, #3]
 8018626:	461a      	mov	r2, r3
 8018628:	6879      	ldr	r1, [r7, #4]
 801862a:	2000      	movs	r0, #0
 801862c:	f000 feae 	bl	801938c <SUBGRF_WriteBuffer>
}
 8018630:	bf00      	nop
 8018632:	3708      	adds	r7, #8
 8018634:	46bd      	mov	sp, r7
 8018636:	bd80      	pop	{r7, pc}

08018638 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b086      	sub	sp, #24
 801863c:	af00      	add	r7, sp, #0
 801863e:	60f8      	str	r0, [r7, #12]
 8018640:	60b9      	str	r1, [r7, #8]
 8018642:	4613      	mov	r3, r2
 8018644:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018646:	2300      	movs	r3, #0
 8018648:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801864a:	f107 0317 	add.w	r3, r7, #23
 801864e:	4619      	mov	r1, r3
 8018650:	68b8      	ldr	r0, [r7, #8]
 8018652:	f000 fdb1 	bl	80191b8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8018656:	68bb      	ldr	r3, [r7, #8]
 8018658:	781b      	ldrb	r3, [r3, #0]
 801865a:	79fa      	ldrb	r2, [r7, #7]
 801865c:	429a      	cmp	r2, r3
 801865e:	d201      	bcs.n	8018664 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018660:	2301      	movs	r3, #1
 8018662:	e007      	b.n	8018674 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018664:	7df8      	ldrb	r0, [r7, #23]
 8018666:	68bb      	ldr	r3, [r7, #8]
 8018668:	781b      	ldrb	r3, [r3, #0]
 801866a:	461a      	mov	r2, r3
 801866c:	68f9      	ldr	r1, [r7, #12]
 801866e:	f000 feaf 	bl	80193d0 <SUBGRF_ReadBuffer>

    return 0;
 8018672:	2300      	movs	r3, #0
}
 8018674:	4618      	mov	r0, r3
 8018676:	3718      	adds	r7, #24
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}

0801867c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b084      	sub	sp, #16
 8018680:	af00      	add	r7, sp, #0
 8018682:	60f8      	str	r0, [r7, #12]
 8018684:	460b      	mov	r3, r1
 8018686:	607a      	str	r2, [r7, #4]
 8018688:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801868a:	7afb      	ldrb	r3, [r7, #11]
 801868c:	4619      	mov	r1, r3
 801868e:	68f8      	ldr	r0, [r7, #12]
 8018690:	f7ff ffc2 	bl	8018618 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018694:	6878      	ldr	r0, [r7, #4]
 8018696:	f000 f91b 	bl	80188d0 <SUBGRF_SetTx>
}
 801869a:	bf00      	nop
 801869c:	3710      	adds	r7, #16
 801869e:	46bd      	mov	sp, r7
 80186a0:	bd80      	pop	{r7, pc}

080186a2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80186a2:	b580      	push	{r7, lr}
 80186a4:	b082      	sub	sp, #8
 80186a6:	af00      	add	r7, sp, #0
 80186a8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80186aa:	2208      	movs	r2, #8
 80186ac:	6879      	ldr	r1, [r7, #4]
 80186ae:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80186b2:	f000 fe27 	bl	8019304 <SUBGRF_WriteRegisters>
    return 0;
 80186b6:	2300      	movs	r3, #0
}
 80186b8:	4618      	mov	r0, r3
 80186ba:	3708      	adds	r7, #8
 80186bc:	46bd      	mov	sp, r7
 80186be:	bd80      	pop	{r7, pc}

080186c0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b084      	sub	sp, #16
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	4603      	mov	r3, r0
 80186c8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80186ca:	88fb      	ldrh	r3, [r7, #6]
 80186cc:	0a1b      	lsrs	r3, r3, #8
 80186ce:	b29b      	uxth	r3, r3
 80186d0:	b2db      	uxtb	r3, r3
 80186d2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80186d4:	88fb      	ldrh	r3, [r7, #6]
 80186d6:	b2db      	uxtb	r3, r3
 80186d8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80186da:	f000 fb67 	bl	8018dac <SUBGRF_GetPacketType>
 80186de:	4603      	mov	r3, r0
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d108      	bne.n	80186f6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80186e4:	f107 030c 	add.w	r3, r7, #12
 80186e8:	2202      	movs	r2, #2
 80186ea:	4619      	mov	r1, r3
 80186ec:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80186f0:	f000 fe08 	bl	8019304 <SUBGRF_WriteRegisters>
            break;
 80186f4:	e000      	b.n	80186f8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80186f6:	bf00      	nop
    }
}
 80186f8:	bf00      	nop
 80186fa:	3710      	adds	r7, #16
 80186fc:	46bd      	mov	sp, r7
 80186fe:	bd80      	pop	{r7, pc}

08018700 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b084      	sub	sp, #16
 8018704:	af00      	add	r7, sp, #0
 8018706:	4603      	mov	r3, r0
 8018708:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801870a:	88fb      	ldrh	r3, [r7, #6]
 801870c:	0a1b      	lsrs	r3, r3, #8
 801870e:	b29b      	uxth	r3, r3
 8018710:	b2db      	uxtb	r3, r3
 8018712:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018714:	88fb      	ldrh	r3, [r7, #6]
 8018716:	b2db      	uxtb	r3, r3
 8018718:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801871a:	f000 fb47 	bl	8018dac <SUBGRF_GetPacketType>
 801871e:	4603      	mov	r3, r0
 8018720:	2b00      	cmp	r3, #0
 8018722:	d108      	bne.n	8018736 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8018724:	f107 030c 	add.w	r3, r7, #12
 8018728:	2202      	movs	r2, #2
 801872a:	4619      	mov	r1, r3
 801872c:	f240 60be 	movw	r0, #1726	; 0x6be
 8018730:	f000 fde8 	bl	8019304 <SUBGRF_WriteRegisters>
            break;
 8018734:	e000      	b.n	8018738 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8018736:	bf00      	nop
    }
}
 8018738:	bf00      	nop
 801873a:	3710      	adds	r7, #16
 801873c:	46bd      	mov	sp, r7
 801873e:	bd80      	pop	{r7, pc}

08018740 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b084      	sub	sp, #16
 8018744:	af00      	add	r7, sp, #0
 8018746:	4603      	mov	r3, r0
 8018748:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801874a:	2300      	movs	r3, #0
 801874c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801874e:	f000 fb2d 	bl	8018dac <SUBGRF_GetPacketType>
 8018752:	4603      	mov	r3, r0
 8018754:	2b00      	cmp	r3, #0
 8018756:	d121      	bne.n	801879c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018758:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801875c:	f000 fdbe 	bl	80192dc <SUBGRF_ReadRegister>
 8018760:	4603      	mov	r3, r0
 8018762:	f023 0301 	bic.w	r3, r3, #1
 8018766:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018768:	88fb      	ldrh	r3, [r7, #6]
 801876a:	0a1b      	lsrs	r3, r3, #8
 801876c:	b29b      	uxth	r3, r3
 801876e:	b25b      	sxtb	r3, r3
 8018770:	f003 0301 	and.w	r3, r3, #1
 8018774:	b25a      	sxtb	r2, r3
 8018776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801877a:	4313      	orrs	r3, r2
 801877c:	b25b      	sxtb	r3, r3
 801877e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018780:	7bfb      	ldrb	r3, [r7, #15]
 8018782:	4619      	mov	r1, r3
 8018784:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018788:	f000 fd94 	bl	80192b4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801878c:	88fb      	ldrh	r3, [r7, #6]
 801878e:	b2db      	uxtb	r3, r3
 8018790:	4619      	mov	r1, r3
 8018792:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8018796:	f000 fd8d 	bl	80192b4 <SUBGRF_WriteRegister>
            break;
 801879a:	e000      	b.n	801879e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801879c:	bf00      	nop
    }
}
 801879e:	bf00      	nop
 80187a0:	3710      	adds	r7, #16
 80187a2:	46bd      	mov	sp, r7
 80187a4:	bd80      	pop	{r7, pc}

080187a6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80187a6:	b580      	push	{r7, lr}
 80187a8:	b082      	sub	sp, #8
 80187aa:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80187ac:	2300      	movs	r3, #0
 80187ae:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80187b0:	2300      	movs	r3, #0
 80187b2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80187b4:	2300      	movs	r3, #0
 80187b6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80187b8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80187bc:	f000 fd8e 	bl	80192dc <SUBGRF_ReadRegister>
 80187c0:	4603      	mov	r3, r0
 80187c2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80187c4:	79fb      	ldrb	r3, [r7, #7]
 80187c6:	f023 0301 	bic.w	r3, r3, #1
 80187ca:	b2db      	uxtb	r3, r3
 80187cc:	4619      	mov	r1, r3
 80187ce:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80187d2:	f000 fd6f 	bl	80192b4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80187d6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80187da:	f000 fd7f 	bl	80192dc <SUBGRF_ReadRegister>
 80187de:	4603      	mov	r3, r0
 80187e0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80187e2:	79bb      	ldrb	r3, [r7, #6]
 80187e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80187e8:	b2db      	uxtb	r3, r3
 80187ea:	4619      	mov	r1, r3
 80187ec:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80187f0:	f000 fd60 	bl	80192b4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80187f4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80187f8:	f000 f88a 	bl	8018910 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80187fc:	463b      	mov	r3, r7
 80187fe:	2204      	movs	r2, #4
 8018800:	4619      	mov	r1, r3
 8018802:	f640 0019 	movw	r0, #2073	; 0x819
 8018806:	f000 fd9f 	bl	8019348 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801880a:	2000      	movs	r0, #0
 801880c:	f000 f844 	bl	8018898 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018810:	79fb      	ldrb	r3, [r7, #7]
 8018812:	4619      	mov	r1, r3
 8018814:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018818:	f000 fd4c 	bl	80192b4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801881c:	79bb      	ldrb	r3, [r7, #6]
 801881e:	4619      	mov	r1, r3
 8018820:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018824:	f000 fd46 	bl	80192b4 <SUBGRF_WriteRegister>

    return number;
 8018828:	683b      	ldr	r3, [r7, #0]
}
 801882a:	4618      	mov	r0, r3
 801882c:	3708      	adds	r7, #8
 801882e:	46bd      	mov	sp, r7
 8018830:	bd80      	pop	{r7, pc}
	...

08018834 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b084      	sub	sp, #16
 8018838:	af00      	add	r7, sp, #0
 801883a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801883c:	2000      	movs	r0, #0
 801883e:	f7f2 fa0c 	bl	800ac5a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018842:	2002      	movs	r0, #2
 8018844:	f000 ff1e 	bl	8019684 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018848:	793b      	ldrb	r3, [r7, #4]
 801884a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801884e:	b2db      	uxtb	r3, r3
 8018850:	009b      	lsls	r3, r3, #2
 8018852:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018854:	793b      	ldrb	r3, [r7, #4]
 8018856:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801885a:	b2db      	uxtb	r3, r3
 801885c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801885e:	b25b      	sxtb	r3, r3
 8018860:	4313      	orrs	r3, r2
 8018862:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018864:	793b      	ldrb	r3, [r7, #4]
 8018866:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801886a:	b2db      	uxtb	r3, r3
 801886c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801886e:	4313      	orrs	r3, r2
 8018870:	b25b      	sxtb	r3, r3
 8018872:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018874:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018876:	f107 030f 	add.w	r3, r7, #15
 801887a:	2201      	movs	r2, #1
 801887c:	4619      	mov	r1, r3
 801887e:	2084      	movs	r0, #132	; 0x84
 8018880:	f000 fdc8 	bl	8019414 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018884:	4b03      	ldr	r3, [pc, #12]	; (8018894 <SUBGRF_SetSleep+0x60>)
 8018886:	2200      	movs	r2, #0
 8018888:	701a      	strb	r2, [r3, #0]
}
 801888a:	bf00      	nop
 801888c:	3710      	adds	r7, #16
 801888e:	46bd      	mov	sp, r7
 8018890:	bd80      	pop	{r7, pc}
 8018892:	bf00      	nop
 8018894:	20000fd4 	.word	0x20000fd4

08018898 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b082      	sub	sp, #8
 801889c:	af00      	add	r7, sp, #0
 801889e:	4603      	mov	r3, r0
 80188a0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80188a2:	1dfb      	adds	r3, r7, #7
 80188a4:	2201      	movs	r2, #1
 80188a6:	4619      	mov	r1, r3
 80188a8:	2080      	movs	r0, #128	; 0x80
 80188aa:	f000 fdb3 	bl	8019414 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80188ae:	79fb      	ldrb	r3, [r7, #7]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d103      	bne.n	80188bc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80188b4:	4b05      	ldr	r3, [pc, #20]	; (80188cc <SUBGRF_SetStandby+0x34>)
 80188b6:	2201      	movs	r2, #1
 80188b8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80188ba:	e002      	b.n	80188c2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80188bc:	4b03      	ldr	r3, [pc, #12]	; (80188cc <SUBGRF_SetStandby+0x34>)
 80188be:	2202      	movs	r2, #2
 80188c0:	701a      	strb	r2, [r3, #0]
}
 80188c2:	bf00      	nop
 80188c4:	3708      	adds	r7, #8
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bd80      	pop	{r7, pc}
 80188ca:	bf00      	nop
 80188cc:	20000fd4 	.word	0x20000fd4

080188d0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b084      	sub	sp, #16
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80188d8:	4b0c      	ldr	r3, [pc, #48]	; (801890c <SUBGRF_SetTx+0x3c>)
 80188da:	2204      	movs	r2, #4
 80188dc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	0c1b      	lsrs	r3, r3, #16
 80188e2:	b2db      	uxtb	r3, r3
 80188e4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	0a1b      	lsrs	r3, r3, #8
 80188ea:	b2db      	uxtb	r3, r3
 80188ec:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	b2db      	uxtb	r3, r3
 80188f2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80188f4:	f107 030c 	add.w	r3, r7, #12
 80188f8:	2203      	movs	r2, #3
 80188fa:	4619      	mov	r1, r3
 80188fc:	2083      	movs	r0, #131	; 0x83
 80188fe:	f000 fd89 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018902:	bf00      	nop
 8018904:	3710      	adds	r7, #16
 8018906:	46bd      	mov	sp, r7
 8018908:	bd80      	pop	{r7, pc}
 801890a:	bf00      	nop
 801890c:	20000fd4 	.word	0x20000fd4

08018910 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b084      	sub	sp, #16
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018918:	4b0c      	ldr	r3, [pc, #48]	; (801894c <SUBGRF_SetRx+0x3c>)
 801891a:	2205      	movs	r2, #5
 801891c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	0c1b      	lsrs	r3, r3, #16
 8018922:	b2db      	uxtb	r3, r3
 8018924:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	0a1b      	lsrs	r3, r3, #8
 801892a:	b2db      	uxtb	r3, r3
 801892c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	b2db      	uxtb	r3, r3
 8018932:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018934:	f107 030c 	add.w	r3, r7, #12
 8018938:	2203      	movs	r2, #3
 801893a:	4619      	mov	r1, r3
 801893c:	2082      	movs	r0, #130	; 0x82
 801893e:	f000 fd69 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018942:	bf00      	nop
 8018944:	3710      	adds	r7, #16
 8018946:	46bd      	mov	sp, r7
 8018948:	bd80      	pop	{r7, pc}
 801894a:	bf00      	nop
 801894c:	20000fd4 	.word	0x20000fd4

08018950 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b084      	sub	sp, #16
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018958:	4b0e      	ldr	r3, [pc, #56]	; (8018994 <SUBGRF_SetRxBoosted+0x44>)
 801895a:	2205      	movs	r2, #5
 801895c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801895e:	2197      	movs	r1, #151	; 0x97
 8018960:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8018964:	f000 fca6 	bl	80192b4 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	0c1b      	lsrs	r3, r3, #16
 801896c:	b2db      	uxtb	r3, r3
 801896e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	0a1b      	lsrs	r3, r3, #8
 8018974:	b2db      	uxtb	r3, r3
 8018976:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	b2db      	uxtb	r3, r3
 801897c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801897e:	f107 030c 	add.w	r3, r7, #12
 8018982:	2203      	movs	r2, #3
 8018984:	4619      	mov	r1, r3
 8018986:	2082      	movs	r0, #130	; 0x82
 8018988:	f000 fd44 	bl	8019414 <SUBGRF_WriteCommand>
}
 801898c:	bf00      	nop
 801898e:	3710      	adds	r7, #16
 8018990:	46bd      	mov	sp, r7
 8018992:	bd80      	pop	{r7, pc}
 8018994:	20000fd4 	.word	0x20000fd4

08018998 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b084      	sub	sp, #16
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
 80189a0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	0c1b      	lsrs	r3, r3, #16
 80189a6:	b2db      	uxtb	r3, r3
 80189a8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	0a1b      	lsrs	r3, r3, #8
 80189ae:	b2db      	uxtb	r3, r3
 80189b0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	b2db      	uxtb	r3, r3
 80189b6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80189b8:	683b      	ldr	r3, [r7, #0]
 80189ba:	0c1b      	lsrs	r3, r3, #16
 80189bc:	b2db      	uxtb	r3, r3
 80189be:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80189c0:	683b      	ldr	r3, [r7, #0]
 80189c2:	0a1b      	lsrs	r3, r3, #8
 80189c4:	b2db      	uxtb	r3, r3
 80189c6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80189c8:	683b      	ldr	r3, [r7, #0]
 80189ca:	b2db      	uxtb	r3, r3
 80189cc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80189ce:	f107 0308 	add.w	r3, r7, #8
 80189d2:	2206      	movs	r2, #6
 80189d4:	4619      	mov	r1, r3
 80189d6:	2094      	movs	r0, #148	; 0x94
 80189d8:	f000 fd1c 	bl	8019414 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80189dc:	4b03      	ldr	r3, [pc, #12]	; (80189ec <SUBGRF_SetRxDutyCycle+0x54>)
 80189de:	2206      	movs	r2, #6
 80189e0:	701a      	strb	r2, [r3, #0]
}
 80189e2:	bf00      	nop
 80189e4:	3710      	adds	r7, #16
 80189e6:	46bd      	mov	sp, r7
 80189e8:	bd80      	pop	{r7, pc}
 80189ea:	bf00      	nop
 80189ec:	20000fd4 	.word	0x20000fd4

080189f0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80189f0:	b580      	push	{r7, lr}
 80189f2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80189f4:	2200      	movs	r2, #0
 80189f6:	2100      	movs	r1, #0
 80189f8:	20c5      	movs	r0, #197	; 0xc5
 80189fa:	f000 fd0b 	bl	8019414 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80189fe:	4b02      	ldr	r3, [pc, #8]	; (8018a08 <SUBGRF_SetCad+0x18>)
 8018a00:	2207      	movs	r2, #7
 8018a02:	701a      	strb	r2, [r3, #0]
}
 8018a04:	bf00      	nop
 8018a06:	bd80      	pop	{r7, pc}
 8018a08:	20000fd4 	.word	0x20000fd4

08018a0c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018a10:	2200      	movs	r2, #0
 8018a12:	2100      	movs	r1, #0
 8018a14:	20d1      	movs	r0, #209	; 0xd1
 8018a16:	f000 fcfd 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018a1a:	bf00      	nop
 8018a1c:	bd80      	pop	{r7, pc}

08018a1e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018a1e:	b580      	push	{r7, lr}
 8018a20:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018a22:	2200      	movs	r2, #0
 8018a24:	2100      	movs	r1, #0
 8018a26:	20d2      	movs	r0, #210	; 0xd2
 8018a28:	f000 fcf4 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018a2c:	bf00      	nop
 8018a2e:	bd80      	pop	{r7, pc}

08018a30 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b082      	sub	sp, #8
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	4603      	mov	r3, r0
 8018a38:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018a3a:	1dfb      	adds	r3, r7, #7
 8018a3c:	2201      	movs	r2, #1
 8018a3e:	4619      	mov	r1, r3
 8018a40:	209f      	movs	r0, #159	; 0x9f
 8018a42:	f000 fce7 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018a46:	bf00      	nop
 8018a48:	3708      	adds	r7, #8
 8018a4a:	46bd      	mov	sp, r7
 8018a4c:	bd80      	pop	{r7, pc}

08018a4e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018a4e:	b580      	push	{r7, lr}
 8018a50:	b084      	sub	sp, #16
 8018a52:	af00      	add	r7, sp, #0
 8018a54:	4603      	mov	r3, r0
 8018a56:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018a58:	1dfb      	adds	r3, r7, #7
 8018a5a:	2201      	movs	r2, #1
 8018a5c:	4619      	mov	r1, r3
 8018a5e:	20a0      	movs	r0, #160	; 0xa0
 8018a60:	f000 fcd8 	bl	8019414 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018a64:	79fb      	ldrb	r3, [r7, #7]
 8018a66:	2b3f      	cmp	r3, #63	; 0x3f
 8018a68:	d91c      	bls.n	8018aa4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018a6a:	79fb      	ldrb	r3, [r7, #7]
 8018a6c:	085b      	lsrs	r3, r3, #1
 8018a6e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018a70:	2300      	movs	r3, #0
 8018a72:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018a74:	2300      	movs	r3, #0
 8018a76:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018a78:	e005      	b.n	8018a86 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018a7a:	7bfb      	ldrb	r3, [r7, #15]
 8018a7c:	089b      	lsrs	r3, r3, #2
 8018a7e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018a80:	7bbb      	ldrb	r3, [r7, #14]
 8018a82:	3301      	adds	r3, #1
 8018a84:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018a86:	7bfb      	ldrb	r3, [r7, #15]
 8018a88:	2b1f      	cmp	r3, #31
 8018a8a:	d8f6      	bhi.n	8018a7a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018a8c:	7bfb      	ldrb	r3, [r7, #15]
 8018a8e:	00db      	lsls	r3, r3, #3
 8018a90:	b2da      	uxtb	r2, r3
 8018a92:	7bbb      	ldrb	r3, [r7, #14]
 8018a94:	4413      	add	r3, r2
 8018a96:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018a98:	7b7b      	ldrb	r3, [r7, #13]
 8018a9a:	4619      	mov	r1, r3
 8018a9c:	f240 7006 	movw	r0, #1798	; 0x706
 8018aa0:	f000 fc08 	bl	80192b4 <SUBGRF_WriteRegister>
    }
}
 8018aa4:	bf00      	nop
 8018aa6:	3710      	adds	r7, #16
 8018aa8:	46bd      	mov	sp, r7
 8018aaa:	bd80      	pop	{r7, pc}

08018aac <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b082      	sub	sp, #8
 8018ab0:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018ab2:	f7f2 f8ee 	bl	800ac92 <RBI_IsDCDC>
 8018ab6:	4603      	mov	r3, r0
 8018ab8:	2b01      	cmp	r3, #1
 8018aba:	d102      	bne.n	8018ac2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018abc:	2301      	movs	r3, #1
 8018abe:	71fb      	strb	r3, [r7, #7]
 8018ac0:	e001      	b.n	8018ac6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018ac6:	1dfb      	adds	r3, r7, #7
 8018ac8:	2201      	movs	r2, #1
 8018aca:	4619      	mov	r1, r3
 8018acc:	2096      	movs	r0, #150	; 0x96
 8018ace:	f000 fca1 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018ad2:	bf00      	nop
 8018ad4:	3708      	adds	r7, #8
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	bd80      	pop	{r7, pc}

08018ada <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8018ada:	b580      	push	{r7, lr}
 8018adc:	b084      	sub	sp, #16
 8018ade:	af00      	add	r7, sp, #0
 8018ae0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018ae2:	793b      	ldrb	r3, [r7, #4]
 8018ae4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018ae8:	b2db      	uxtb	r3, r3
 8018aea:	019b      	lsls	r3, r3, #6
 8018aec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018aee:	793b      	ldrb	r3, [r7, #4]
 8018af0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018af4:	b2db      	uxtb	r3, r3
 8018af6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018af8:	b25b      	sxtb	r3, r3
 8018afa:	4313      	orrs	r3, r2
 8018afc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018afe:	793b      	ldrb	r3, [r7, #4]
 8018b00:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018b04:	b2db      	uxtb	r3, r3
 8018b06:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018b08:	b25b      	sxtb	r3, r3
 8018b0a:	4313      	orrs	r3, r2
 8018b0c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018b0e:	793b      	ldrb	r3, [r7, #4]
 8018b10:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018b14:	b2db      	uxtb	r3, r3
 8018b16:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018b18:	b25b      	sxtb	r3, r3
 8018b1a:	4313      	orrs	r3, r2
 8018b1c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018b1e:	793b      	ldrb	r3, [r7, #4]
 8018b20:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018b24:	b2db      	uxtb	r3, r3
 8018b26:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018b28:	b25b      	sxtb	r3, r3
 8018b2a:	4313      	orrs	r3, r2
 8018b2c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018b2e:	793b      	ldrb	r3, [r7, #4]
 8018b30:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018b34:	b2db      	uxtb	r3, r3
 8018b36:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018b38:	b25b      	sxtb	r3, r3
 8018b3a:	4313      	orrs	r3, r2
 8018b3c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8018b3e:	793b      	ldrb	r3, [r7, #4]
 8018b40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018b44:	b2db      	uxtb	r3, r3
 8018b46:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018b48:	4313      	orrs	r3, r2
 8018b4a:	b25b      	sxtb	r3, r3
 8018b4c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018b4e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018b50:	f107 030f 	add.w	r3, r7, #15
 8018b54:	2201      	movs	r2, #1
 8018b56:	4619      	mov	r1, r3
 8018b58:	2089      	movs	r0, #137	; 0x89
 8018b5a:	f000 fc5b 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018b5e:	bf00      	nop
 8018b60:	3710      	adds	r7, #16
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}
	...

08018b68 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	b084      	sub	sp, #16
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	4a1b      	ldr	r2, [pc, #108]	; (8018be0 <SUBGRF_CalibrateImage+0x78>)
 8018b74:	4293      	cmp	r3, r2
 8018b76:	d904      	bls.n	8018b82 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018b78:	23e1      	movs	r3, #225	; 0xe1
 8018b7a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8018b7c:	23e9      	movs	r3, #233	; 0xe9
 8018b7e:	737b      	strb	r3, [r7, #13]
 8018b80:	e022      	b.n	8018bc8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	4a17      	ldr	r2, [pc, #92]	; (8018be4 <SUBGRF_CalibrateImage+0x7c>)
 8018b86:	4293      	cmp	r3, r2
 8018b88:	d904      	bls.n	8018b94 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8018b8a:	23d7      	movs	r3, #215	; 0xd7
 8018b8c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8018b8e:	23db      	movs	r3, #219	; 0xdb
 8018b90:	737b      	strb	r3, [r7, #13]
 8018b92:	e019      	b.n	8018bc8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	4a14      	ldr	r2, [pc, #80]	; (8018be8 <SUBGRF_CalibrateImage+0x80>)
 8018b98:	4293      	cmp	r3, r2
 8018b9a:	d904      	bls.n	8018ba6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8018b9c:	23c1      	movs	r3, #193	; 0xc1
 8018b9e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018ba0:	23c5      	movs	r3, #197	; 0xc5
 8018ba2:	737b      	strb	r3, [r7, #13]
 8018ba4:	e010      	b.n	8018bc8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	4a10      	ldr	r2, [pc, #64]	; (8018bec <SUBGRF_CalibrateImage+0x84>)
 8018baa:	4293      	cmp	r3, r2
 8018bac:	d904      	bls.n	8018bb8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8018bae:	2375      	movs	r3, #117	; 0x75
 8018bb0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018bb2:	2381      	movs	r3, #129	; 0x81
 8018bb4:	737b      	strb	r3, [r7, #13]
 8018bb6:	e007      	b.n	8018bc8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	4a0d      	ldr	r2, [pc, #52]	; (8018bf0 <SUBGRF_CalibrateImage+0x88>)
 8018bbc:	4293      	cmp	r3, r2
 8018bbe:	d903      	bls.n	8018bc8 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018bc0:	236b      	movs	r3, #107	; 0x6b
 8018bc2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018bc4:	236f      	movs	r3, #111	; 0x6f
 8018bc6:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018bc8:	f107 030c 	add.w	r3, r7, #12
 8018bcc:	2202      	movs	r2, #2
 8018bce:	4619      	mov	r1, r3
 8018bd0:	2098      	movs	r0, #152	; 0x98
 8018bd2:	f000 fc1f 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018bd6:	bf00      	nop
 8018bd8:	3710      	adds	r7, #16
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd80      	pop	{r7, pc}
 8018bde:	bf00      	nop
 8018be0:	35a4e900 	.word	0x35a4e900
 8018be4:	32a9f880 	.word	0x32a9f880
 8018be8:	2de54480 	.word	0x2de54480
 8018bec:	1b6b0b00 	.word	0x1b6b0b00
 8018bf0:	1954fc40 	.word	0x1954fc40

08018bf4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018bf4:	b590      	push	{r4, r7, lr}
 8018bf6:	b085      	sub	sp, #20
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	4604      	mov	r4, r0
 8018bfc:	4608      	mov	r0, r1
 8018bfe:	4611      	mov	r1, r2
 8018c00:	461a      	mov	r2, r3
 8018c02:	4623      	mov	r3, r4
 8018c04:	71fb      	strb	r3, [r7, #7]
 8018c06:	4603      	mov	r3, r0
 8018c08:	71bb      	strb	r3, [r7, #6]
 8018c0a:	460b      	mov	r3, r1
 8018c0c:	717b      	strb	r3, [r7, #5]
 8018c0e:	4613      	mov	r3, r2
 8018c10:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018c12:	79fb      	ldrb	r3, [r7, #7]
 8018c14:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018c16:	79bb      	ldrb	r3, [r7, #6]
 8018c18:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018c1a:	797b      	ldrb	r3, [r7, #5]
 8018c1c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018c1e:	793b      	ldrb	r3, [r7, #4]
 8018c20:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018c22:	f107 030c 	add.w	r3, r7, #12
 8018c26:	2204      	movs	r2, #4
 8018c28:	4619      	mov	r1, r3
 8018c2a:	2095      	movs	r0, #149	; 0x95
 8018c2c:	f000 fbf2 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018c30:	bf00      	nop
 8018c32:	3714      	adds	r7, #20
 8018c34:	46bd      	mov	sp, r7
 8018c36:	bd90      	pop	{r4, r7, pc}

08018c38 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018c38:	b590      	push	{r4, r7, lr}
 8018c3a:	b085      	sub	sp, #20
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	4604      	mov	r4, r0
 8018c40:	4608      	mov	r0, r1
 8018c42:	4611      	mov	r1, r2
 8018c44:	461a      	mov	r2, r3
 8018c46:	4623      	mov	r3, r4
 8018c48:	80fb      	strh	r3, [r7, #6]
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	80bb      	strh	r3, [r7, #4]
 8018c4e:	460b      	mov	r3, r1
 8018c50:	807b      	strh	r3, [r7, #2]
 8018c52:	4613      	mov	r3, r2
 8018c54:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018c56:	88fb      	ldrh	r3, [r7, #6]
 8018c58:	0a1b      	lsrs	r3, r3, #8
 8018c5a:	b29b      	uxth	r3, r3
 8018c5c:	b2db      	uxtb	r3, r3
 8018c5e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018c60:	88fb      	ldrh	r3, [r7, #6]
 8018c62:	b2db      	uxtb	r3, r3
 8018c64:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018c66:	88bb      	ldrh	r3, [r7, #4]
 8018c68:	0a1b      	lsrs	r3, r3, #8
 8018c6a:	b29b      	uxth	r3, r3
 8018c6c:	b2db      	uxtb	r3, r3
 8018c6e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018c70:	88bb      	ldrh	r3, [r7, #4]
 8018c72:	b2db      	uxtb	r3, r3
 8018c74:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018c76:	887b      	ldrh	r3, [r7, #2]
 8018c78:	0a1b      	lsrs	r3, r3, #8
 8018c7a:	b29b      	uxth	r3, r3
 8018c7c:	b2db      	uxtb	r3, r3
 8018c7e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018c80:	887b      	ldrh	r3, [r7, #2]
 8018c82:	b2db      	uxtb	r3, r3
 8018c84:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018c86:	883b      	ldrh	r3, [r7, #0]
 8018c88:	0a1b      	lsrs	r3, r3, #8
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	b2db      	uxtb	r3, r3
 8018c8e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018c90:	883b      	ldrh	r3, [r7, #0]
 8018c92:	b2db      	uxtb	r3, r3
 8018c94:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018c96:	f107 0308 	add.w	r3, r7, #8
 8018c9a:	2208      	movs	r2, #8
 8018c9c:	4619      	mov	r1, r3
 8018c9e:	2008      	movs	r0, #8
 8018ca0:	f000 fbb8 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018ca4:	bf00      	nop
 8018ca6:	3714      	adds	r7, #20
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	bd90      	pop	{r4, r7, pc}

08018cac <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b084      	sub	sp, #16
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	6039      	str	r1, [r7, #0]
 8018cb6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018cb8:	79fb      	ldrb	r3, [r7, #7]
 8018cba:	f003 0307 	and.w	r3, r3, #7
 8018cbe:	b2db      	uxtb	r3, r3
 8018cc0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018cc2:	683b      	ldr	r3, [r7, #0]
 8018cc4:	0c1b      	lsrs	r3, r3, #16
 8018cc6:	b2db      	uxtb	r3, r3
 8018cc8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	0a1b      	lsrs	r3, r3, #8
 8018cce:	b2db      	uxtb	r3, r3
 8018cd0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018cd2:	683b      	ldr	r3, [r7, #0]
 8018cd4:	b2db      	uxtb	r3, r3
 8018cd6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018cd8:	f107 030c 	add.w	r3, r7, #12
 8018cdc:	2204      	movs	r2, #4
 8018cde:	4619      	mov	r1, r3
 8018ce0:	2097      	movs	r0, #151	; 0x97
 8018ce2:	f000 fb97 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018ce6:	bf00      	nop
 8018ce8:	3710      	adds	r7, #16
 8018cea:	46bd      	mov	sp, r7
 8018cec:	bd80      	pop	{r7, pc}
	...

08018cf0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018cf0:	b5b0      	push	{r4, r5, r7, lr}
 8018cf2:	b084      	sub	sp, #16
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018cfc:	4b1b      	ldr	r3, [pc, #108]	; (8018d6c <SUBGRF_SetRfFrequency+0x7c>)
 8018cfe:	781b      	ldrb	r3, [r3, #0]
 8018d00:	f083 0301 	eor.w	r3, r3, #1
 8018d04:	b2db      	uxtb	r3, r3
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d005      	beq.n	8018d16 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8018d0a:	6878      	ldr	r0, [r7, #4]
 8018d0c:	f7ff ff2c 	bl	8018b68 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018d10:	4b16      	ldr	r3, [pc, #88]	; (8018d6c <SUBGRF_SetRfFrequency+0x7c>)
 8018d12:	2201      	movs	r2, #1
 8018d14:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	461a      	mov	r2, r3
 8018d1a:	f04f 0300 	mov.w	r3, #0
 8018d1e:	09d5      	lsrs	r5, r2, #7
 8018d20:	0654      	lsls	r4, r2, #25
 8018d22:	4a13      	ldr	r2, [pc, #76]	; (8018d70 <SUBGRF_SetRfFrequency+0x80>)
 8018d24:	f04f 0300 	mov.w	r3, #0
 8018d28:	4620      	mov	r0, r4
 8018d2a:	4629      	mov	r1, r5
 8018d2c:	f7e7 ff16 	bl	8000b5c <__aeabi_uldivmod>
 8018d30:	4602      	mov	r2, r0
 8018d32:	460b      	mov	r3, r1
 8018d34:	4613      	mov	r3, r2
 8018d36:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	0e1b      	lsrs	r3, r3, #24
 8018d3c:	b2db      	uxtb	r3, r3
 8018d3e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	0c1b      	lsrs	r3, r3, #16
 8018d44:	b2db      	uxtb	r3, r3
 8018d46:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	0a1b      	lsrs	r3, r3, #8
 8018d4c:	b2db      	uxtb	r3, r3
 8018d4e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	b2db      	uxtb	r3, r3
 8018d54:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018d56:	f107 0308 	add.w	r3, r7, #8
 8018d5a:	2204      	movs	r2, #4
 8018d5c:	4619      	mov	r1, r3
 8018d5e:	2086      	movs	r0, #134	; 0x86
 8018d60:	f000 fb58 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018d64:	bf00      	nop
 8018d66:	3710      	adds	r7, #16
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8018d6c:	20000fdc 	.word	0x20000fdc
 8018d70:	01e84800 	.word	0x01e84800

08018d74 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018d74:	b580      	push	{r7, lr}
 8018d76:	b082      	sub	sp, #8
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	4603      	mov	r3, r0
 8018d7c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018d7e:	79fa      	ldrb	r2, [r7, #7]
 8018d80:	4b09      	ldr	r3, [pc, #36]	; (8018da8 <SUBGRF_SetPacketType+0x34>)
 8018d82:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018d84:	79fb      	ldrb	r3, [r7, #7]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d104      	bne.n	8018d94 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018d8a:	2100      	movs	r1, #0
 8018d8c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018d90:	f000 fa90 	bl	80192b4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018d94:	1dfb      	adds	r3, r7, #7
 8018d96:	2201      	movs	r2, #1
 8018d98:	4619      	mov	r1, r3
 8018d9a:	208a      	movs	r0, #138	; 0x8a
 8018d9c:	f000 fb3a 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018da0:	bf00      	nop
 8018da2:	3708      	adds	r7, #8
 8018da4:	46bd      	mov	sp, r7
 8018da6:	bd80      	pop	{r7, pc}
 8018da8:	20000fd5 	.word	0x20000fd5

08018dac <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018dac:	b480      	push	{r7}
 8018dae:	af00      	add	r7, sp, #0
    return PacketType;
 8018db0:	4b02      	ldr	r3, [pc, #8]	; (8018dbc <SUBGRF_GetPacketType+0x10>)
 8018db2:	781b      	ldrb	r3, [r3, #0]
}
 8018db4:	4618      	mov	r0, r3
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bc80      	pop	{r7}
 8018dba:	4770      	bx	lr
 8018dbc:	20000fd5 	.word	0x20000fd5

08018dc0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	b084      	sub	sp, #16
 8018dc4:	af00      	add	r7, sp, #0
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	71fb      	strb	r3, [r7, #7]
 8018dca:	460b      	mov	r3, r1
 8018dcc:	71bb      	strb	r3, [r7, #6]
 8018dce:	4613      	mov	r3, r2
 8018dd0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8018dd2:	79fb      	ldrb	r3, [r7, #7]
 8018dd4:	2b01      	cmp	r3, #1
 8018dd6:	d124      	bne.n	8018e22 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8018dd8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018ddc:	2b0f      	cmp	r3, #15
 8018dde:	d106      	bne.n	8018dee <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8018de0:	2301      	movs	r3, #1
 8018de2:	2201      	movs	r2, #1
 8018de4:	2100      	movs	r1, #0
 8018de6:	2006      	movs	r0, #6
 8018de8:	f7ff ff04 	bl	8018bf4 <SUBGRF_SetPaConfig>
 8018dec:	e005      	b.n	8018dfa <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8018dee:	2301      	movs	r3, #1
 8018df0:	2201      	movs	r2, #1
 8018df2:	2100      	movs	r1, #0
 8018df4:	2004      	movs	r0, #4
 8018df6:	f7ff fefd 	bl	8018bf4 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8018dfa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018dfe:	2b0d      	cmp	r3, #13
 8018e00:	dd02      	ble.n	8018e08 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8018e02:	230e      	movs	r3, #14
 8018e04:	71bb      	strb	r3, [r7, #6]
 8018e06:	e006      	b.n	8018e16 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8018e08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018e0c:	f113 0f11 	cmn.w	r3, #17
 8018e10:	da01      	bge.n	8018e16 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8018e12:	23ef      	movs	r3, #239	; 0xef
 8018e14:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8018e16:	2118      	movs	r1, #24
 8018e18:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018e1c:	f000 fa4a 	bl	80192b4 <SUBGRF_WriteRegister>
 8018e20:	e025      	b.n	8018e6e <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8018e22:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018e26:	f000 fa59 	bl	80192dc <SUBGRF_ReadRegister>
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	f043 031e 	orr.w	r3, r3, #30
 8018e30:	b2db      	uxtb	r3, r3
 8018e32:	4619      	mov	r1, r3
 8018e34:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018e38:	f000 fa3c 	bl	80192b4 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8018e3c:	2301      	movs	r3, #1
 8018e3e:	2200      	movs	r2, #0
 8018e40:	2107      	movs	r1, #7
 8018e42:	2004      	movs	r0, #4
 8018e44:	f7ff fed6 	bl	8018bf4 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8018e48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018e4c:	2b16      	cmp	r3, #22
 8018e4e:	dd02      	ble.n	8018e56 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8018e50:	2316      	movs	r3, #22
 8018e52:	71bb      	strb	r3, [r7, #6]
 8018e54:	e006      	b.n	8018e64 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8018e56:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018e5a:	f113 0f09 	cmn.w	r3, #9
 8018e5e:	da01      	bge.n	8018e64 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8018e60:	23f7      	movs	r3, #247	; 0xf7
 8018e62:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8018e64:	2138      	movs	r1, #56	; 0x38
 8018e66:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018e6a:	f000 fa23 	bl	80192b4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018e6e:	79bb      	ldrb	r3, [r7, #6]
 8018e70:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8018e72:	797b      	ldrb	r3, [r7, #5]
 8018e74:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8018e76:	f107 030c 	add.w	r3, r7, #12
 8018e7a:	2202      	movs	r2, #2
 8018e7c:	4619      	mov	r1, r3
 8018e7e:	208e      	movs	r0, #142	; 0x8e
 8018e80:	f000 fac8 	bl	8019414 <SUBGRF_WriteCommand>
}
 8018e84:	bf00      	nop
 8018e86:	3710      	adds	r7, #16
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	bd80      	pop	{r7, pc}

08018e8c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018e8c:	b5b0      	push	{r4, r5, r7, lr}
 8018e8e:	b086      	sub	sp, #24
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018e94:	2300      	movs	r3, #0
 8018e96:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018e98:	4a5e      	ldr	r2, [pc, #376]	; (8019014 <SUBGRF_SetModulationParams+0x188>)
 8018e9a:	f107 0308 	add.w	r3, r7, #8
 8018e9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ea2:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	781a      	ldrb	r2, [r3, #0]
 8018eaa:	4b5b      	ldr	r3, [pc, #364]	; (8019018 <SUBGRF_SetModulationParams+0x18c>)
 8018eac:	781b      	ldrb	r3, [r3, #0]
 8018eae:	429a      	cmp	r2, r3
 8018eb0:	d004      	beq.n	8018ebc <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	781b      	ldrb	r3, [r3, #0]
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	f7ff ff5c 	bl	8018d74 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	781b      	ldrb	r3, [r3, #0]
 8018ec0:	2b03      	cmp	r3, #3
 8018ec2:	f200 80a2 	bhi.w	801900a <SUBGRF_SetModulationParams+0x17e>
 8018ec6:	a201      	add	r2, pc, #4	; (adr r2, 8018ecc <SUBGRF_SetModulationParams+0x40>)
 8018ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ecc:	08018edd 	.word	0x08018edd
 8018ed0:	08018f99 	.word	0x08018f99
 8018ed4:	08018f5b 	.word	0x08018f5b
 8018ed8:	08018fc7 	.word	0x08018fc7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018edc:	2308      	movs	r3, #8
 8018ede:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	685b      	ldr	r3, [r3, #4]
 8018ee4:	4a4d      	ldr	r2, [pc, #308]	; (801901c <SUBGRF_SetModulationParams+0x190>)
 8018ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8018eea:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018eec:	697b      	ldr	r3, [r7, #20]
 8018eee:	0c1b      	lsrs	r3, r3, #16
 8018ef0:	b2db      	uxtb	r3, r3
 8018ef2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018ef4:	697b      	ldr	r3, [r7, #20]
 8018ef6:	0a1b      	lsrs	r3, r3, #8
 8018ef8:	b2db      	uxtb	r3, r3
 8018efa:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018efc:	697b      	ldr	r3, [r7, #20]
 8018efe:	b2db      	uxtb	r3, r3
 8018f00:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	7b1b      	ldrb	r3, [r3, #12]
 8018f06:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	7b5b      	ldrb	r3, [r3, #13]
 8018f0c:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	689b      	ldr	r3, [r3, #8]
 8018f12:	461a      	mov	r2, r3
 8018f14:	f04f 0300 	mov.w	r3, #0
 8018f18:	09d5      	lsrs	r5, r2, #7
 8018f1a:	0654      	lsls	r4, r2, #25
 8018f1c:	4a40      	ldr	r2, [pc, #256]	; (8019020 <SUBGRF_SetModulationParams+0x194>)
 8018f1e:	f04f 0300 	mov.w	r3, #0
 8018f22:	4620      	mov	r0, r4
 8018f24:	4629      	mov	r1, r5
 8018f26:	f7e7 fe19 	bl	8000b5c <__aeabi_uldivmod>
 8018f2a:	4602      	mov	r2, r0
 8018f2c:	460b      	mov	r3, r1
 8018f2e:	4613      	mov	r3, r2
 8018f30:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018f32:	697b      	ldr	r3, [r7, #20]
 8018f34:	0c1b      	lsrs	r3, r3, #16
 8018f36:	b2db      	uxtb	r3, r3
 8018f38:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018f3a:	697b      	ldr	r3, [r7, #20]
 8018f3c:	0a1b      	lsrs	r3, r3, #8
 8018f3e:	b2db      	uxtb	r3, r3
 8018f40:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018f42:	697b      	ldr	r3, [r7, #20]
 8018f44:	b2db      	uxtb	r3, r3
 8018f46:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018f48:	7cfb      	ldrb	r3, [r7, #19]
 8018f4a:	b29a      	uxth	r2, r3
 8018f4c:	f107 0308 	add.w	r3, r7, #8
 8018f50:	4619      	mov	r1, r3
 8018f52:	208b      	movs	r0, #139	; 0x8b
 8018f54:	f000 fa5e 	bl	8019414 <SUBGRF_WriteCommand>
        break;
 8018f58:	e058      	b.n	801900c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8018f5a:	2304      	movs	r3, #4
 8018f5c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	691b      	ldr	r3, [r3, #16]
 8018f62:	4a2e      	ldr	r2, [pc, #184]	; (801901c <SUBGRF_SetModulationParams+0x190>)
 8018f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f68:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018f6a:	697b      	ldr	r3, [r7, #20]
 8018f6c:	0c1b      	lsrs	r3, r3, #16
 8018f6e:	b2db      	uxtb	r3, r3
 8018f70:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018f72:	697b      	ldr	r3, [r7, #20]
 8018f74:	0a1b      	lsrs	r3, r3, #8
 8018f76:	b2db      	uxtb	r3, r3
 8018f78:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018f7a:	697b      	ldr	r3, [r7, #20]
 8018f7c:	b2db      	uxtb	r3, r3
 8018f7e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	7d1b      	ldrb	r3, [r3, #20]
 8018f84:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018f86:	7cfb      	ldrb	r3, [r7, #19]
 8018f88:	b29a      	uxth	r2, r3
 8018f8a:	f107 0308 	add.w	r3, r7, #8
 8018f8e:	4619      	mov	r1, r3
 8018f90:	208b      	movs	r0, #139	; 0x8b
 8018f92:	f000 fa3f 	bl	8019414 <SUBGRF_WriteCommand>
        break;
 8018f96:	e039      	b.n	801900c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8018f98:	2304      	movs	r3, #4
 8018f9a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	7e1b      	ldrb	r3, [r3, #24]
 8018fa0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	7e5b      	ldrb	r3, [r3, #25]
 8018fa6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	7e9b      	ldrb	r3, [r3, #26]
 8018fac:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	7edb      	ldrb	r3, [r3, #27]
 8018fb2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018fb4:	7cfb      	ldrb	r3, [r7, #19]
 8018fb6:	b29a      	uxth	r2, r3
 8018fb8:	f107 0308 	add.w	r3, r7, #8
 8018fbc:	4619      	mov	r1, r3
 8018fbe:	208b      	movs	r0, #139	; 0x8b
 8018fc0:	f000 fa28 	bl	8019414 <SUBGRF_WriteCommand>

        break;
 8018fc4:	e022      	b.n	801900c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018fc6:	2305      	movs	r3, #5
 8018fc8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	685b      	ldr	r3, [r3, #4]
 8018fce:	4a13      	ldr	r2, [pc, #76]	; (801901c <SUBGRF_SetModulationParams+0x190>)
 8018fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8018fd4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018fd6:	697b      	ldr	r3, [r7, #20]
 8018fd8:	0c1b      	lsrs	r3, r3, #16
 8018fda:	b2db      	uxtb	r3, r3
 8018fdc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018fde:	697b      	ldr	r3, [r7, #20]
 8018fe0:	0a1b      	lsrs	r3, r3, #8
 8018fe2:	b2db      	uxtb	r3, r3
 8018fe4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018fe6:	697b      	ldr	r3, [r7, #20]
 8018fe8:	b2db      	uxtb	r3, r3
 8018fea:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	7b1b      	ldrb	r3, [r3, #12]
 8018ff0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	7b5b      	ldrb	r3, [r3, #13]
 8018ff6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018ff8:	7cfb      	ldrb	r3, [r7, #19]
 8018ffa:	b29a      	uxth	r2, r3
 8018ffc:	f107 0308 	add.w	r3, r7, #8
 8019000:	4619      	mov	r1, r3
 8019002:	208b      	movs	r0, #139	; 0x8b
 8019004:	f000 fa06 	bl	8019414 <SUBGRF_WriteCommand>
        break;
 8019008:	e000      	b.n	801900c <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 801900a:	bf00      	nop
    }
}
 801900c:	bf00      	nop
 801900e:	3718      	adds	r7, #24
 8019010:	46bd      	mov	sp, r7
 8019012:	bdb0      	pop	{r4, r5, r7, pc}
 8019014:	0801b9cc 	.word	0x0801b9cc
 8019018:	20000fd5 	.word	0x20000fd5
 801901c:	3d090000 	.word	0x3d090000
 8019020:	01e84800 	.word	0x01e84800

08019024 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b086      	sub	sp, #24
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801902c:	2300      	movs	r3, #0
 801902e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019030:	4a48      	ldr	r2, [pc, #288]	; (8019154 <SUBGRF_SetPacketParams+0x130>)
 8019032:	f107 030c 	add.w	r3, r7, #12
 8019036:	ca07      	ldmia	r2, {r0, r1, r2}
 8019038:	c303      	stmia	r3!, {r0, r1}
 801903a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	781a      	ldrb	r2, [r3, #0]
 8019040:	4b45      	ldr	r3, [pc, #276]	; (8019158 <SUBGRF_SetPacketParams+0x134>)
 8019042:	781b      	ldrb	r3, [r3, #0]
 8019044:	429a      	cmp	r2, r3
 8019046:	d004      	beq.n	8019052 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	781b      	ldrb	r3, [r3, #0]
 801904c:	4618      	mov	r0, r3
 801904e:	f7ff fe91 	bl	8018d74 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	781b      	ldrb	r3, [r3, #0]
 8019056:	2b03      	cmp	r3, #3
 8019058:	d878      	bhi.n	801914c <SUBGRF_SetPacketParams+0x128>
 801905a:	a201      	add	r2, pc, #4	; (adr r2, 8019060 <SUBGRF_SetPacketParams+0x3c>)
 801905c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019060:	08019071 	.word	0x08019071
 8019064:	08019101 	.word	0x08019101
 8019068:	080190f5 	.word	0x080190f5
 801906c:	08019071 	.word	0x08019071
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	7a5b      	ldrb	r3, [r3, #9]
 8019074:	2bf1      	cmp	r3, #241	; 0xf1
 8019076:	d10a      	bne.n	801908e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019078:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801907c:	f7ff fb20 	bl	80186c0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019080:	f248 0005 	movw	r0, #32773	; 0x8005
 8019084:	f7ff fb3c 	bl	8018700 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8019088:	2302      	movs	r3, #2
 801908a:	75bb      	strb	r3, [r7, #22]
 801908c:	e011      	b.n	80190b2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	7a5b      	ldrb	r3, [r3, #9]
 8019092:	2bf2      	cmp	r3, #242	; 0xf2
 8019094:	d10a      	bne.n	80190ac <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8019096:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801909a:	f7ff fb11 	bl	80186c0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801909e:	f241 0021 	movw	r0, #4129	; 0x1021
 80190a2:	f7ff fb2d 	bl	8018700 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80190a6:	2306      	movs	r3, #6
 80190a8:	75bb      	strb	r3, [r7, #22]
 80190aa:	e002      	b.n	80190b2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	7a5b      	ldrb	r3, [r3, #9]
 80190b0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80190b2:	2309      	movs	r3, #9
 80190b4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	885b      	ldrh	r3, [r3, #2]
 80190ba:	0a1b      	lsrs	r3, r3, #8
 80190bc:	b29b      	uxth	r3, r3
 80190be:	b2db      	uxtb	r3, r3
 80190c0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	885b      	ldrh	r3, [r3, #2]
 80190c6:	b2db      	uxtb	r3, r3
 80190c8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	791b      	ldrb	r3, [r3, #4]
 80190ce:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	795b      	ldrb	r3, [r3, #5]
 80190d4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	799b      	ldrb	r3, [r3, #6]
 80190da:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	79db      	ldrb	r3, [r3, #7]
 80190e0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	7a1b      	ldrb	r3, [r3, #8]
 80190e6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80190e8:	7dbb      	ldrb	r3, [r7, #22]
 80190ea:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	7a9b      	ldrb	r3, [r3, #10]
 80190f0:	753b      	strb	r3, [r7, #20]
        break;
 80190f2:	e022      	b.n	801913a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80190f4:	2301      	movs	r3, #1
 80190f6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	7b1b      	ldrb	r3, [r3, #12]
 80190fc:	733b      	strb	r3, [r7, #12]
        break;
 80190fe:	e01c      	b.n	801913a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019100:	2306      	movs	r3, #6
 8019102:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	89db      	ldrh	r3, [r3, #14]
 8019108:	0a1b      	lsrs	r3, r3, #8
 801910a:	b29b      	uxth	r3, r3
 801910c:	b2db      	uxtb	r3, r3
 801910e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	89db      	ldrh	r3, [r3, #14]
 8019114:	b2db      	uxtb	r3, r3
 8019116:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	7c1a      	ldrb	r2, [r3, #16]
 801911c:	4b0f      	ldr	r3, [pc, #60]	; (801915c <SUBGRF_SetPacketParams+0x138>)
 801911e:	4611      	mov	r1, r2
 8019120:	7019      	strb	r1, [r3, #0]
 8019122:	4613      	mov	r3, r2
 8019124:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	7c5b      	ldrb	r3, [r3, #17]
 801912a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	7c9b      	ldrb	r3, [r3, #18]
 8019130:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	7cdb      	ldrb	r3, [r3, #19]
 8019136:	747b      	strb	r3, [r7, #17]
        break;
 8019138:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801913a:	7dfb      	ldrb	r3, [r7, #23]
 801913c:	b29a      	uxth	r2, r3
 801913e:	f107 030c 	add.w	r3, r7, #12
 8019142:	4619      	mov	r1, r3
 8019144:	208c      	movs	r0, #140	; 0x8c
 8019146:	f000 f965 	bl	8019414 <SUBGRF_WriteCommand>
 801914a:	e000      	b.n	801914e <SUBGRF_SetPacketParams+0x12a>
        return;
 801914c:	bf00      	nop
}
 801914e:	3718      	adds	r7, #24
 8019150:	46bd      	mov	sp, r7
 8019152:	bd80      	pop	{r7, pc}
 8019154:	0801b9d4 	.word	0x0801b9d4
 8019158:	20000fd5 	.word	0x20000fd5
 801915c:	20000fd6 	.word	0x20000fd6

08019160 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b084      	sub	sp, #16
 8019164:	af00      	add	r7, sp, #0
 8019166:	4603      	mov	r3, r0
 8019168:	460a      	mov	r2, r1
 801916a:	71fb      	strb	r3, [r7, #7]
 801916c:	4613      	mov	r3, r2
 801916e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019170:	79fb      	ldrb	r3, [r7, #7]
 8019172:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019174:	79bb      	ldrb	r3, [r7, #6]
 8019176:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019178:	f107 030c 	add.w	r3, r7, #12
 801917c:	2202      	movs	r2, #2
 801917e:	4619      	mov	r1, r3
 8019180:	208f      	movs	r0, #143	; 0x8f
 8019182:	f000 f947 	bl	8019414 <SUBGRF_WriteCommand>
}
 8019186:	bf00      	nop
 8019188:	3710      	adds	r7, #16
 801918a:	46bd      	mov	sp, r7
 801918c:	bd80      	pop	{r7, pc}

0801918e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801918e:	b580      	push	{r7, lr}
 8019190:	b082      	sub	sp, #8
 8019192:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019194:	2300      	movs	r3, #0
 8019196:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019198:	1d3b      	adds	r3, r7, #4
 801919a:	2201      	movs	r2, #1
 801919c:	4619      	mov	r1, r3
 801919e:	2015      	movs	r0, #21
 80191a0:	f000 f95a 	bl	8019458 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80191a4:	793b      	ldrb	r3, [r7, #4]
 80191a6:	425b      	negs	r3, r3
 80191a8:	105b      	asrs	r3, r3, #1
 80191aa:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80191ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80191b0:	4618      	mov	r0, r3
 80191b2:	3708      	adds	r7, #8
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bd80      	pop	{r7, pc}

080191b8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b084      	sub	sp, #16
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
 80191c0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80191c2:	f107 030c 	add.w	r3, r7, #12
 80191c6:	2202      	movs	r2, #2
 80191c8:	4619      	mov	r1, r3
 80191ca:	2013      	movs	r0, #19
 80191cc:	f000 f944 	bl	8019458 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80191d0:	f7ff fdec 	bl	8018dac <SUBGRF_GetPacketType>
 80191d4:	4603      	mov	r3, r0
 80191d6:	2b01      	cmp	r3, #1
 80191d8:	d10d      	bne.n	80191f6 <SUBGRF_GetRxBufferStatus+0x3e>
 80191da:	4b0c      	ldr	r3, [pc, #48]	; (801920c <SUBGRF_GetRxBufferStatus+0x54>)
 80191dc:	781b      	ldrb	r3, [r3, #0]
 80191de:	b2db      	uxtb	r3, r3
 80191e0:	2b01      	cmp	r3, #1
 80191e2:	d108      	bne.n	80191f6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80191e4:	f240 7002 	movw	r0, #1794	; 0x702
 80191e8:	f000 f878 	bl	80192dc <SUBGRF_ReadRegister>
 80191ec:	4603      	mov	r3, r0
 80191ee:	461a      	mov	r2, r3
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	701a      	strb	r2, [r3, #0]
 80191f4:	e002      	b.n	80191fc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80191f6:	7b3a      	ldrb	r2, [r7, #12]
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80191fc:	7b7a      	ldrb	r2, [r7, #13]
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	701a      	strb	r2, [r3, #0]
}
 8019202:	bf00      	nop
 8019204:	3710      	adds	r7, #16
 8019206:	46bd      	mov	sp, r7
 8019208:	bd80      	pop	{r7, pc}
 801920a:	bf00      	nop
 801920c:	20000fd6 	.word	0x20000fd6

08019210 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019210:	b580      	push	{r7, lr}
 8019212:	b084      	sub	sp, #16
 8019214:	af00      	add	r7, sp, #0
 8019216:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019218:	f107 030c 	add.w	r3, r7, #12
 801921c:	2203      	movs	r2, #3
 801921e:	4619      	mov	r1, r3
 8019220:	2014      	movs	r0, #20
 8019222:	f000 f919 	bl	8019458 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019226:	f7ff fdc1 	bl	8018dac <SUBGRF_GetPacketType>
 801922a:	4603      	mov	r3, r0
 801922c:	461a      	mov	r2, r3
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	781b      	ldrb	r3, [r3, #0]
 8019236:	2b00      	cmp	r3, #0
 8019238:	d002      	beq.n	8019240 <SUBGRF_GetPacketStatus+0x30>
 801923a:	2b01      	cmp	r3, #1
 801923c:	d013      	beq.n	8019266 <SUBGRF_GetPacketStatus+0x56>
 801923e:	e02a      	b.n	8019296 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019240:	7b3a      	ldrb	r2, [r7, #12]
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019246:	7b7b      	ldrb	r3, [r7, #13]
 8019248:	425b      	negs	r3, r3
 801924a:	105b      	asrs	r3, r3, #1
 801924c:	b25a      	sxtb	r2, r3
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019252:	7bbb      	ldrb	r3, [r7, #14]
 8019254:	425b      	negs	r3, r3
 8019256:	105b      	asrs	r3, r3, #1
 8019258:	b25a      	sxtb	r2, r3
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	2200      	movs	r2, #0
 8019262:	609a      	str	r2, [r3, #8]
            break;
 8019264:	e020      	b.n	80192a8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019266:	7b3b      	ldrb	r3, [r7, #12]
 8019268:	425b      	negs	r3, r3
 801926a:	105b      	asrs	r3, r3, #1
 801926c:	b25a      	sxtb	r2, r3
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019272:	7b7b      	ldrb	r3, [r7, #13]
 8019274:	b25b      	sxtb	r3, r3
 8019276:	3302      	adds	r3, #2
 8019278:	109b      	asrs	r3, r3, #2
 801927a:	b25a      	sxtb	r2, r3
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019280:	7bbb      	ldrb	r3, [r7, #14]
 8019282:	425b      	negs	r3, r3
 8019284:	105b      	asrs	r3, r3, #1
 8019286:	b25a      	sxtb	r2, r3
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801928c:	4b08      	ldr	r3, [pc, #32]	; (80192b0 <SUBGRF_GetPacketStatus+0xa0>)
 801928e:	681a      	ldr	r2, [r3, #0]
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	611a      	str	r2, [r3, #16]
            break;
 8019294:	e008      	b.n	80192a8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8019296:	2214      	movs	r2, #20
 8019298:	2100      	movs	r1, #0
 801929a:	6878      	ldr	r0, [r7, #4]
 801929c:	f000 fbf5 	bl	8019a8a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	220f      	movs	r2, #15
 80192a4:	701a      	strb	r2, [r3, #0]
            break;
 80192a6:	bf00      	nop
    }
}
 80192a8:	bf00      	nop
 80192aa:	3710      	adds	r7, #16
 80192ac:	46bd      	mov	sp, r7
 80192ae:	bd80      	pop	{r7, pc}
 80192b0:	20000fd8 	.word	0x20000fd8

080192b4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b082      	sub	sp, #8
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	4603      	mov	r3, r0
 80192bc:	460a      	mov	r2, r1
 80192be:	80fb      	strh	r3, [r7, #6]
 80192c0:	4613      	mov	r3, r2
 80192c2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80192c4:	1d7a      	adds	r2, r7, #5
 80192c6:	88f9      	ldrh	r1, [r7, #6]
 80192c8:	2301      	movs	r3, #1
 80192ca:	4803      	ldr	r0, [pc, #12]	; (80192d8 <SUBGRF_WriteRegister+0x24>)
 80192cc:	f7ee faee 	bl	80078ac <HAL_SUBGHZ_WriteRegisters>
}
 80192d0:	bf00      	nop
 80192d2:	3708      	adds	r7, #8
 80192d4:	46bd      	mov	sp, r7
 80192d6:	bd80      	pop	{r7, pc}
 80192d8:	20001790 	.word	0x20001790

080192dc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b084      	sub	sp, #16
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	4603      	mov	r3, r0
 80192e4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80192e6:	f107 020f 	add.w	r2, r7, #15
 80192ea:	88f9      	ldrh	r1, [r7, #6]
 80192ec:	2301      	movs	r3, #1
 80192ee:	4804      	ldr	r0, [pc, #16]	; (8019300 <SUBGRF_ReadRegister+0x24>)
 80192f0:	f7ee fb3b 	bl	800796a <HAL_SUBGHZ_ReadRegisters>
    return data;
 80192f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80192f6:	4618      	mov	r0, r3
 80192f8:	3710      	adds	r7, #16
 80192fa:	46bd      	mov	sp, r7
 80192fc:	bd80      	pop	{r7, pc}
 80192fe:	bf00      	nop
 8019300:	20001790 	.word	0x20001790

08019304 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b086      	sub	sp, #24
 8019308:	af00      	add	r7, sp, #0
 801930a:	4603      	mov	r3, r0
 801930c:	6039      	str	r1, [r7, #0]
 801930e:	80fb      	strh	r3, [r7, #6]
 8019310:	4613      	mov	r3, r2
 8019312:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019314:	f3ef 8310 	mrs	r3, PRIMASK
 8019318:	60fb      	str	r3, [r7, #12]
  return(result);
 801931a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801931c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801931e:	b672      	cpsid	i
}
 8019320:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019322:	88bb      	ldrh	r3, [r7, #4]
 8019324:	88f9      	ldrh	r1, [r7, #6]
 8019326:	683a      	ldr	r2, [r7, #0]
 8019328:	4806      	ldr	r0, [pc, #24]	; (8019344 <SUBGRF_WriteRegisters+0x40>)
 801932a:	f7ee fabf 	bl	80078ac <HAL_SUBGHZ_WriteRegisters>
 801932e:	697b      	ldr	r3, [r7, #20]
 8019330:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019332:	693b      	ldr	r3, [r7, #16]
 8019334:	f383 8810 	msr	PRIMASK, r3
}
 8019338:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801933a:	bf00      	nop
 801933c:	3718      	adds	r7, #24
 801933e:	46bd      	mov	sp, r7
 8019340:	bd80      	pop	{r7, pc}
 8019342:	bf00      	nop
 8019344:	20001790 	.word	0x20001790

08019348 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b086      	sub	sp, #24
 801934c:	af00      	add	r7, sp, #0
 801934e:	4603      	mov	r3, r0
 8019350:	6039      	str	r1, [r7, #0]
 8019352:	80fb      	strh	r3, [r7, #6]
 8019354:	4613      	mov	r3, r2
 8019356:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019358:	f3ef 8310 	mrs	r3, PRIMASK
 801935c:	60fb      	str	r3, [r7, #12]
  return(result);
 801935e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019360:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019362:	b672      	cpsid	i
}
 8019364:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019366:	88bb      	ldrh	r3, [r7, #4]
 8019368:	88f9      	ldrh	r1, [r7, #6]
 801936a:	683a      	ldr	r2, [r7, #0]
 801936c:	4806      	ldr	r0, [pc, #24]	; (8019388 <SUBGRF_ReadRegisters+0x40>)
 801936e:	f7ee fafc 	bl	800796a <HAL_SUBGHZ_ReadRegisters>
 8019372:	697b      	ldr	r3, [r7, #20]
 8019374:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019376:	693b      	ldr	r3, [r7, #16]
 8019378:	f383 8810 	msr	PRIMASK, r3
}
 801937c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801937e:	bf00      	nop
 8019380:	3718      	adds	r7, #24
 8019382:	46bd      	mov	sp, r7
 8019384:	bd80      	pop	{r7, pc}
 8019386:	bf00      	nop
 8019388:	20001790 	.word	0x20001790

0801938c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801938c:	b580      	push	{r7, lr}
 801938e:	b086      	sub	sp, #24
 8019390:	af00      	add	r7, sp, #0
 8019392:	4603      	mov	r3, r0
 8019394:	6039      	str	r1, [r7, #0]
 8019396:	71fb      	strb	r3, [r7, #7]
 8019398:	4613      	mov	r3, r2
 801939a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801939c:	f3ef 8310 	mrs	r3, PRIMASK
 80193a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80193a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80193a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193a6:	b672      	cpsid	i
}
 80193a8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80193aa:	79bb      	ldrb	r3, [r7, #6]
 80193ac:	b29b      	uxth	r3, r3
 80193ae:	79f9      	ldrb	r1, [r7, #7]
 80193b0:	683a      	ldr	r2, [r7, #0]
 80193b2:	4806      	ldr	r0, [pc, #24]	; (80193cc <SUBGRF_WriteBuffer+0x40>)
 80193b4:	f7ee fbed 	bl	8007b92 <HAL_SUBGHZ_WriteBuffer>
 80193b8:	697b      	ldr	r3, [r7, #20]
 80193ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193bc:	693b      	ldr	r3, [r7, #16]
 80193be:	f383 8810 	msr	PRIMASK, r3
}
 80193c2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80193c4:	bf00      	nop
 80193c6:	3718      	adds	r7, #24
 80193c8:	46bd      	mov	sp, r7
 80193ca:	bd80      	pop	{r7, pc}
 80193cc:	20001790 	.word	0x20001790

080193d0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b086      	sub	sp, #24
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	4603      	mov	r3, r0
 80193d8:	6039      	str	r1, [r7, #0]
 80193da:	71fb      	strb	r3, [r7, #7]
 80193dc:	4613      	mov	r3, r2
 80193de:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193e0:	f3ef 8310 	mrs	r3, PRIMASK
 80193e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80193e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80193e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193ea:	b672      	cpsid	i
}
 80193ec:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80193ee:	79bb      	ldrb	r3, [r7, #6]
 80193f0:	b29b      	uxth	r3, r3
 80193f2:	79f9      	ldrb	r1, [r7, #7]
 80193f4:	683a      	ldr	r2, [r7, #0]
 80193f6:	4806      	ldr	r0, [pc, #24]	; (8019410 <SUBGRF_ReadBuffer+0x40>)
 80193f8:	f7ee fc1e 	bl	8007c38 <HAL_SUBGHZ_ReadBuffer>
 80193fc:	697b      	ldr	r3, [r7, #20]
 80193fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019400:	693b      	ldr	r3, [r7, #16]
 8019402:	f383 8810 	msr	PRIMASK, r3
}
 8019406:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019408:	bf00      	nop
 801940a:	3718      	adds	r7, #24
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}
 8019410:	20001790 	.word	0x20001790

08019414 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b086      	sub	sp, #24
 8019418:	af00      	add	r7, sp, #0
 801941a:	4603      	mov	r3, r0
 801941c:	6039      	str	r1, [r7, #0]
 801941e:	71fb      	strb	r3, [r7, #7]
 8019420:	4613      	mov	r3, r2
 8019422:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019424:	f3ef 8310 	mrs	r3, PRIMASK
 8019428:	60fb      	str	r3, [r7, #12]
  return(result);
 801942a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801942c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801942e:	b672      	cpsid	i
}
 8019430:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019432:	88bb      	ldrh	r3, [r7, #4]
 8019434:	79f9      	ldrb	r1, [r7, #7]
 8019436:	683a      	ldr	r2, [r7, #0]
 8019438:	4806      	ldr	r0, [pc, #24]	; (8019454 <SUBGRF_WriteCommand+0x40>)
 801943a:	f7ee faf7 	bl	8007a2c <HAL_SUBGHZ_ExecSetCmd>
 801943e:	697b      	ldr	r3, [r7, #20]
 8019440:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019442:	693b      	ldr	r3, [r7, #16]
 8019444:	f383 8810 	msr	PRIMASK, r3
}
 8019448:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801944a:	bf00      	nop
 801944c:	3718      	adds	r7, #24
 801944e:	46bd      	mov	sp, r7
 8019450:	bd80      	pop	{r7, pc}
 8019452:	bf00      	nop
 8019454:	20001790 	.word	0x20001790

08019458 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b086      	sub	sp, #24
 801945c:	af00      	add	r7, sp, #0
 801945e:	4603      	mov	r3, r0
 8019460:	6039      	str	r1, [r7, #0]
 8019462:	71fb      	strb	r3, [r7, #7]
 8019464:	4613      	mov	r3, r2
 8019466:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019468:	f3ef 8310 	mrs	r3, PRIMASK
 801946c:	60fb      	str	r3, [r7, #12]
  return(result);
 801946e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019472:	b672      	cpsid	i
}
 8019474:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019476:	88bb      	ldrh	r3, [r7, #4]
 8019478:	79f9      	ldrb	r1, [r7, #7]
 801947a:	683a      	ldr	r2, [r7, #0]
 801947c:	4806      	ldr	r0, [pc, #24]	; (8019498 <SUBGRF_ReadCommand+0x40>)
 801947e:	f7ee fb34 	bl	8007aea <HAL_SUBGHZ_ExecGetCmd>
 8019482:	697b      	ldr	r3, [r7, #20]
 8019484:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019486:	693b      	ldr	r3, [r7, #16]
 8019488:	f383 8810 	msr	PRIMASK, r3
}
 801948c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801948e:	bf00      	nop
 8019490:	3718      	adds	r7, #24
 8019492:	46bd      	mov	sp, r7
 8019494:	bd80      	pop	{r7, pc}
 8019496:	bf00      	nop
 8019498:	20001790 	.word	0x20001790

0801949c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801949c:	b580      	push	{r7, lr}
 801949e:	b084      	sub	sp, #16
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	4603      	mov	r3, r0
 80194a4:	460a      	mov	r2, r1
 80194a6:	71fb      	strb	r3, [r7, #7]
 80194a8:	4613      	mov	r3, r2
 80194aa:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80194ac:	2301      	movs	r3, #1
 80194ae:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80194b0:	79bb      	ldrb	r3, [r7, #6]
 80194b2:	2b01      	cmp	r3, #1
 80194b4:	d10d      	bne.n	80194d2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80194b6:	79fb      	ldrb	r3, [r7, #7]
 80194b8:	2b01      	cmp	r3, #1
 80194ba:	d104      	bne.n	80194c6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80194bc:	2302      	movs	r3, #2
 80194be:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80194c0:	2004      	movs	r0, #4
 80194c2:	f000 f8df 	bl	8019684 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80194c6:	79fb      	ldrb	r3, [r7, #7]
 80194c8:	2b02      	cmp	r3, #2
 80194ca:	d107      	bne.n	80194dc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80194cc:	2303      	movs	r3, #3
 80194ce:	73fb      	strb	r3, [r7, #15]
 80194d0:	e004      	b.n	80194dc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80194d2:	79bb      	ldrb	r3, [r7, #6]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d101      	bne.n	80194dc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80194d8:	2301      	movs	r3, #1
 80194da:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80194dc:	7bfb      	ldrb	r3, [r7, #15]
 80194de:	4618      	mov	r0, r3
 80194e0:	f7f1 fbbb 	bl	800ac5a <RBI_ConfigRFSwitch>
}
 80194e4:	bf00      	nop
 80194e6:	3710      	adds	r7, #16
 80194e8:	46bd      	mov	sp, r7
 80194ea:	bd80      	pop	{r7, pc}

080194ec <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b084      	sub	sp, #16
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	4603      	mov	r3, r0
 80194f4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80194f6:	2301      	movs	r3, #1
 80194f8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80194fa:	f7f1 fbbc 	bl	800ac76 <RBI_GetTxConfig>
 80194fe:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019500:	68bb      	ldr	r3, [r7, #8]
 8019502:	2b02      	cmp	r3, #2
 8019504:	d016      	beq.n	8019534 <SUBGRF_SetRfTxPower+0x48>
 8019506:	68bb      	ldr	r3, [r7, #8]
 8019508:	2b02      	cmp	r3, #2
 801950a:	dc16      	bgt.n	801953a <SUBGRF_SetRfTxPower+0x4e>
 801950c:	68bb      	ldr	r3, [r7, #8]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d003      	beq.n	801951a <SUBGRF_SetRfTxPower+0x2e>
 8019512:	68bb      	ldr	r3, [r7, #8]
 8019514:	2b01      	cmp	r3, #1
 8019516:	d00a      	beq.n	801952e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019518:	e00f      	b.n	801953a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801951a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801951e:	2b0f      	cmp	r3, #15
 8019520:	dd02      	ble.n	8019528 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019522:	2302      	movs	r3, #2
 8019524:	73fb      	strb	r3, [r7, #15]
            break;
 8019526:	e009      	b.n	801953c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019528:	2301      	movs	r3, #1
 801952a:	73fb      	strb	r3, [r7, #15]
            break;
 801952c:	e006      	b.n	801953c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801952e:	2301      	movs	r3, #1
 8019530:	73fb      	strb	r3, [r7, #15]
            break;
 8019532:	e003      	b.n	801953c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019534:	2302      	movs	r3, #2
 8019536:	73fb      	strb	r3, [r7, #15]
            break;
 8019538:	e000      	b.n	801953c <SUBGRF_SetRfTxPower+0x50>
            break;
 801953a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801953c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019540:	7bfb      	ldrb	r3, [r7, #15]
 8019542:	2202      	movs	r2, #2
 8019544:	4618      	mov	r0, r3
 8019546:	f7ff fc3b 	bl	8018dc0 <SUBGRF_SetTxParams>

    return paSelect;
 801954a:	7bfb      	ldrb	r3, [r7, #15]
}
 801954c:	4618      	mov	r0, r3
 801954e:	3710      	adds	r7, #16
 8019550:	46bd      	mov	sp, r7
 8019552:	bd80      	pop	{r7, pc}

08019554 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019554:	b480      	push	{r7}
 8019556:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019558:	2301      	movs	r3, #1
}
 801955a:	4618      	mov	r0, r3
 801955c:	46bd      	mov	sp, r7
 801955e:	bc80      	pop	{r7}
 8019560:	4770      	bx	lr
	...

08019564 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b082      	sub	sp, #8
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801956c:	4b03      	ldr	r3, [pc, #12]	; (801957c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	2001      	movs	r0, #1
 8019572:	4798      	blx	r3
}
 8019574:	bf00      	nop
 8019576:	3708      	adds	r7, #8
 8019578:	46bd      	mov	sp, r7
 801957a:	bd80      	pop	{r7, pc}
 801957c:	20000fe0 	.word	0x20000fe0

08019580 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019580:	b580      	push	{r7, lr}
 8019582:	b082      	sub	sp, #8
 8019584:	af00      	add	r7, sp, #0
 8019586:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019588:	4b03      	ldr	r3, [pc, #12]	; (8019598 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	2002      	movs	r0, #2
 801958e:	4798      	blx	r3
}
 8019590:	bf00      	nop
 8019592:	3708      	adds	r7, #8
 8019594:	46bd      	mov	sp, r7
 8019596:	bd80      	pop	{r7, pc}
 8019598:	20000fe0 	.word	0x20000fe0

0801959c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b082      	sub	sp, #8
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80195a4:	4b03      	ldr	r3, [pc, #12]	; (80195b4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	2040      	movs	r0, #64	; 0x40
 80195aa:	4798      	blx	r3
}
 80195ac:	bf00      	nop
 80195ae:	3708      	adds	r7, #8
 80195b0:	46bd      	mov	sp, r7
 80195b2:	bd80      	pop	{r7, pc}
 80195b4:	20000fe0 	.word	0x20000fe0

080195b8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b082      	sub	sp, #8
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
 80195c0:	460b      	mov	r3, r1
 80195c2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80195c4:	78fb      	ldrb	r3, [r7, #3]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d002      	beq.n	80195d0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80195ca:	2b01      	cmp	r3, #1
 80195cc:	d005      	beq.n	80195da <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80195ce:	e00a      	b.n	80195e6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80195d0:	4b07      	ldr	r3, [pc, #28]	; (80195f0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	2080      	movs	r0, #128	; 0x80
 80195d6:	4798      	blx	r3
            break;
 80195d8:	e005      	b.n	80195e6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80195da:	4b05      	ldr	r3, [pc, #20]	; (80195f0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80195e2:	4798      	blx	r3
            break;
 80195e4:	bf00      	nop
    }
}
 80195e6:	bf00      	nop
 80195e8:	3708      	adds	r7, #8
 80195ea:	46bd      	mov	sp, r7
 80195ec:	bd80      	pop	{r7, pc}
 80195ee:	bf00      	nop
 80195f0:	20000fe0 	.word	0x20000fe0

080195f4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b082      	sub	sp, #8
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80195fc:	4b04      	ldr	r3, [pc, #16]	; (8019610 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019604:	4798      	blx	r3
}
 8019606:	bf00      	nop
 8019608:	3708      	adds	r7, #8
 801960a:	46bd      	mov	sp, r7
 801960c:	bd80      	pop	{r7, pc}
 801960e:	bf00      	nop
 8019610:	20000fe0 	.word	0x20000fe0

08019614 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019614:	b580      	push	{r7, lr}
 8019616:	b082      	sub	sp, #8
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801961c:	4b03      	ldr	r3, [pc, #12]	; (801962c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	2020      	movs	r0, #32
 8019622:	4798      	blx	r3
}
 8019624:	bf00      	nop
 8019626:	3708      	adds	r7, #8
 8019628:	46bd      	mov	sp, r7
 801962a:	bd80      	pop	{r7, pc}
 801962c:	20000fe0 	.word	0x20000fe0

08019630 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019630:	b580      	push	{r7, lr}
 8019632:	b082      	sub	sp, #8
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8019638:	4b03      	ldr	r3, [pc, #12]	; (8019648 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	2004      	movs	r0, #4
 801963e:	4798      	blx	r3
}
 8019640:	bf00      	nop
 8019642:	3708      	adds	r7, #8
 8019644:	46bd      	mov	sp, r7
 8019646:	bd80      	pop	{r7, pc}
 8019648:	20000fe0 	.word	0x20000fe0

0801964c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b082      	sub	sp, #8
 8019650:	af00      	add	r7, sp, #0
 8019652:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8019654:	4b03      	ldr	r3, [pc, #12]	; (8019664 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	2008      	movs	r0, #8
 801965a:	4798      	blx	r3
}
 801965c:	bf00      	nop
 801965e:	3708      	adds	r7, #8
 8019660:	46bd      	mov	sp, r7
 8019662:	bd80      	pop	{r7, pc}
 8019664:	20000fe0 	.word	0x20000fe0

08019668 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b082      	sub	sp, #8
 801966c:	af00      	add	r7, sp, #0
 801966e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019670:	4b03      	ldr	r3, [pc, #12]	; (8019680 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	2010      	movs	r0, #16
 8019676:	4798      	blx	r3
}
 8019678:	bf00      	nop
 801967a:	3708      	adds	r7, #8
 801967c:	46bd      	mov	sp, r7
 801967e:	bd80      	pop	{r7, pc}
 8019680:	20000fe0 	.word	0x20000fe0

08019684 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8019684:	b580      	push	{r7, lr}
 8019686:	b084      	sub	sp, #16
 8019688:	af00      	add	r7, sp, #0
 801968a:	4603      	mov	r3, r0
 801968c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801968e:	f7f1 fb00 	bl	800ac92 <RBI_IsDCDC>
 8019692:	4603      	mov	r3, r0
 8019694:	2b01      	cmp	r3, #1
 8019696:	d112      	bne.n	80196be <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019698:	f640 1023 	movw	r0, #2339	; 0x923
 801969c:	f7ff fe1e 	bl	80192dc <SUBGRF_ReadRegister>
 80196a0:	4603      	mov	r3, r0
 80196a2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80196a4:	7bfb      	ldrb	r3, [r7, #15]
 80196a6:	f023 0306 	bic.w	r3, r3, #6
 80196aa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80196ac:	7bfa      	ldrb	r2, [r7, #15]
 80196ae:	79fb      	ldrb	r3, [r7, #7]
 80196b0:	4313      	orrs	r3, r2
 80196b2:	b2db      	uxtb	r3, r3
 80196b4:	4619      	mov	r1, r3
 80196b6:	f640 1023 	movw	r0, #2339	; 0x923
 80196ba:	f7ff fdfb 	bl	80192b4 <SUBGRF_WriteRegister>
  }
}
 80196be:	bf00      	nop
 80196c0:	3710      	adds	r7, #16
 80196c2:	46bd      	mov	sp, r7
 80196c4:	bd80      	pop	{r7, pc}
	...

080196c8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80196c8:	b480      	push	{r7}
 80196ca:	b085      	sub	sp, #20
 80196cc:	af00      	add	r7, sp, #0
 80196ce:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d101      	bne.n	80196da <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80196d6:	231f      	movs	r3, #31
 80196d8:	e016      	b.n	8019708 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80196da:	2300      	movs	r3, #0
 80196dc:	73fb      	strb	r3, [r7, #15]
 80196de:	e00f      	b.n	8019700 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80196e0:	7bfb      	ldrb	r3, [r7, #15]
 80196e2:	4a0c      	ldr	r2, [pc, #48]	; (8019714 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80196e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80196e8:	687a      	ldr	r2, [r7, #4]
 80196ea:	429a      	cmp	r2, r3
 80196ec:	d205      	bcs.n	80196fa <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 80196ee:	7bfb      	ldrb	r3, [r7, #15]
 80196f0:	4a08      	ldr	r2, [pc, #32]	; (8019714 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80196f2:	00db      	lsls	r3, r3, #3
 80196f4:	4413      	add	r3, r2
 80196f6:	791b      	ldrb	r3, [r3, #4]
 80196f8:	e006      	b.n	8019708 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80196fa:	7bfb      	ldrb	r3, [r7, #15]
 80196fc:	3301      	adds	r3, #1
 80196fe:	73fb      	strb	r3, [r7, #15]
 8019700:	7bfb      	ldrb	r3, [r7, #15]
 8019702:	2b15      	cmp	r3, #21
 8019704:	d9ec      	bls.n	80196e0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8019706:	e7fe      	b.n	8019706 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019708:	4618      	mov	r0, r3
 801970a:	3714      	adds	r7, #20
 801970c:	46bd      	mov	sp, r7
 801970e:	bc80      	pop	{r7}
 8019710:	4770      	bx	lr
 8019712:	bf00      	nop
 8019714:	0801bf5c 	.word	0x0801bf5c

08019718 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019718:	b580      	push	{r7, lr}
 801971a:	b08a      	sub	sp, #40	; 0x28
 801971c:	af00      	add	r7, sp, #0
 801971e:	6078      	str	r0, [r7, #4]
 8019720:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019722:	4b36      	ldr	r3, [pc, #216]	; (80197fc <SUBGRF_GetCFO+0xe4>)
 8019724:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8019726:	f640 0007 	movw	r0, #2055	; 0x807
 801972a:	f7ff fdd7 	bl	80192dc <SUBGRF_ReadRegister>
 801972e:	4603      	mov	r3, r0
 8019730:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019732:	7ffb      	ldrb	r3, [r7, #31]
 8019734:	08db      	lsrs	r3, r3, #3
 8019736:	b2db      	uxtb	r3, r3
 8019738:	f003 0303 	and.w	r3, r3, #3
 801973c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019740:	4413      	add	r3, r2
 8019742:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8019746:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019748:	7ffb      	ldrb	r3, [r7, #31]
 801974a:	f003 0307 	and.w	r3, r3, #7
 801974e:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8019750:	7fba      	ldrb	r2, [r7, #30]
 8019752:	7f7b      	ldrb	r3, [r7, #29]
 8019754:	3b01      	subs	r3, #1
 8019756:	fa02 f303 	lsl.w	r3, r2, r3
 801975a:	461a      	mov	r2, r3
 801975c:	4b28      	ldr	r3, [pc, #160]	; (8019800 <SUBGRF_GetCFO+0xe8>)
 801975e:	fbb3 f3f2 	udiv	r3, r3, r2
 8019762:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019764:	69ba      	ldr	r2, [r7, #24]
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	fbb2 f3f3 	udiv	r3, r2, r3
 801976c:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801976e:	2301      	movs	r3, #1
 8019770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019778:	697a      	ldr	r2, [r7, #20]
 801977a:	fb02 f303 	mul.w	r3, r2, r3
 801977e:	2b07      	cmp	r3, #7
 8019780:	d802      	bhi.n	8019788 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8019782:	2302      	movs	r3, #2
 8019784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8019788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801978c:	697a      	ldr	r2, [r7, #20]
 801978e:	fb02 f303 	mul.w	r3, r2, r3
 8019792:	2b03      	cmp	r3, #3
 8019794:	d802      	bhi.n	801979c <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8019796:	2304      	movs	r3, #4
 8019798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801979c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80197a0:	69bb      	ldr	r3, [r7, #24]
 80197a2:	fb02 f303 	mul.w	r3, r2, r3
 80197a6:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 80197a8:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80197ac:	f7ff fd96 	bl	80192dc <SUBGRF_ReadRegister>
 80197b0:	4603      	mov	r3, r0
 80197b2:	021b      	lsls	r3, r3, #8
 80197b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80197b8:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 80197ba:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80197be:	f7ff fd8d 	bl	80192dc <SUBGRF_ReadRegister>
 80197c2:	4603      	mov	r3, r0
 80197c4:	461a      	mov	r2, r3
 80197c6:	6a3b      	ldr	r3, [r7, #32]
 80197c8:	4313      	orrs	r3, r2
 80197ca:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80197cc:	6a3b      	ldr	r3, [r7, #32]
 80197ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d005      	beq.n	80197e2 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 80197d6:	6a3b      	ldr	r3, [r7, #32]
 80197d8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80197dc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80197e0:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80197e2:	693b      	ldr	r3, [r7, #16]
 80197e4:	095b      	lsrs	r3, r3, #5
 80197e6:	6a3a      	ldr	r2, [r7, #32]
 80197e8:	fb02 f303 	mul.w	r3, r2, r3
 80197ec:	11da      	asrs	r2, r3, #7
 80197ee:	683b      	ldr	r3, [r7, #0]
 80197f0:	601a      	str	r2, [r3, #0]
}
 80197f2:	bf00      	nop
 80197f4:	3728      	adds	r7, #40	; 0x28
 80197f6:	46bd      	mov	sp, r7
 80197f8:	bd80      	pop	{r7, pc}
 80197fa:	bf00      	nop
 80197fc:	0c0a0804 	.word	0x0c0a0804
 8019800:	01e84800 	.word	0x01e84800

08019804 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8019804:	b480      	push	{r7}
 8019806:	b087      	sub	sp, #28
 8019808:	af00      	add	r7, sp, #0
 801980a:	4603      	mov	r3, r0
 801980c:	60b9      	str	r1, [r7, #8]
 801980e:	607a      	str	r2, [r7, #4]
 8019810:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8019812:	2300      	movs	r3, #0
 8019814:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8019816:	f04f 33ff 	mov.w	r3, #4294967295
 801981a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801981c:	697b      	ldr	r3, [r7, #20]
}
 801981e:	4618      	mov	r0, r3
 8019820:	371c      	adds	r7, #28
 8019822:	46bd      	mov	sp, r7
 8019824:	bc80      	pop	{r7}
 8019826:	4770      	bx	lr

08019828 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8019828:	b480      	push	{r7}
 801982a:	b087      	sub	sp, #28
 801982c:	af00      	add	r7, sp, #0
 801982e:	4603      	mov	r3, r0
 8019830:	60b9      	str	r1, [r7, #8]
 8019832:	607a      	str	r2, [r7, #4]
 8019834:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8019836:	2300      	movs	r3, #0
 8019838:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801983a:	f04f 33ff 	mov.w	r3, #4294967295
 801983e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019840:	697b      	ldr	r3, [r7, #20]
}
 8019842:	4618      	mov	r0, r3
 8019844:	371c      	adds	r7, #28
 8019846:	46bd      	mov	sp, r7
 8019848:	bc80      	pop	{r7}
 801984a:	4770      	bx	lr

0801984c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801984c:	b480      	push	{r7}
 801984e:	b085      	sub	sp, #20
 8019850:	af00      	add	r7, sp, #0
 8019852:	60f8      	str	r0, [r7, #12]
 8019854:	60b9      	str	r1, [r7, #8]
 8019856:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8019858:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801985c:	4618      	mov	r0, r3
 801985e:	3714      	adds	r7, #20
 8019860:	46bd      	mov	sp, r7
 8019862:	bc80      	pop	{r7}
 8019864:	4770      	bx	lr

08019866 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8019866:	b480      	push	{r7}
 8019868:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801986a:	bf00      	nop
 801986c:	46bd      	mov	sp, r7
 801986e:	bc80      	pop	{r7}
 8019870:	4770      	bx	lr

08019872 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8019872:	b480      	push	{r7}
 8019874:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8019876:	2300      	movs	r3, #0
#endif
}
 8019878:	4618      	mov	r0, r3
 801987a:	46bd      	mov	sp, r7
 801987c:	bc80      	pop	{r7}
 801987e:	4770      	bx	lr

08019880 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8019880:	b480      	push	{r7}
 8019882:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8019884:	2300      	movs	r3, #0
#endif
}
 8019886:	4618      	mov	r0, r3
 8019888:	46bd      	mov	sp, r7
 801988a:	bc80      	pop	{r7}
 801988c:	4770      	bx	lr

0801988e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801988e:	b480      	push	{r7}
 8019890:	b083      	sub	sp, #12
 8019892:	af00      	add	r7, sp, #0
 8019894:	4603      	mov	r3, r0
 8019896:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019898:	bf00      	nop
 801989a:	370c      	adds	r7, #12
 801989c:	46bd      	mov	sp, r7
 801989e:	bc80      	pop	{r7}
 80198a0:	4770      	bx	lr

080198a2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 80198a2:	b480      	push	{r7}
 80198a4:	b087      	sub	sp, #28
 80198a6:	af00      	add	r7, sp, #0
 80198a8:	60f8      	str	r0, [r7, #12]
 80198aa:	460b      	mov	r3, r1
 80198ac:	607a      	str	r2, [r7, #4]
 80198ae:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 80198b0:	f04f 33ff 	mov.w	r3, #4294967295
 80198b4:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 80198b6:	697b      	ldr	r3, [r7, #20]
}
 80198b8:	4618      	mov	r0, r3
 80198ba:	371c      	adds	r7, #28
 80198bc:	46bd      	mov	sp, r7
 80198be:	bc80      	pop	{r7}
 80198c0:	4770      	bx	lr

080198c2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 80198c2:	b480      	push	{r7}
 80198c4:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 80198c6:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80198ca:	4618      	mov	r0, r3
 80198cc:	46bd      	mov	sp, r7
 80198ce:	bc80      	pop	{r7}
 80198d0:	4770      	bx	lr

080198d2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 80198d2:	b480      	push	{r7}
 80198d4:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 80198d6:	bf00      	nop
 80198d8:	46bd      	mov	sp, r7
 80198da:	bc80      	pop	{r7}
 80198dc:	4770      	bx	lr

080198de <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 80198de:	b480      	push	{r7}
 80198e0:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 80198e2:	bf00      	nop
 80198e4:	46bd      	mov	sp, r7
 80198e6:	bc80      	pop	{r7}
 80198e8:	4770      	bx	lr

080198ea <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 80198ea:	b480      	push	{r7}
 80198ec:	b083      	sub	sp, #12
 80198ee:	af00      	add	r7, sp, #0
 80198f0:	4603      	mov	r3, r0
 80198f2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 80198f4:	bf00      	nop
 80198f6:	370c      	adds	r7, #12
 80198f8:	46bd      	mov	sp, r7
 80198fa:	bc80      	pop	{r7}
 80198fc:	4770      	bx	lr
	...

08019900 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019900:	b480      	push	{r7}
 8019902:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019904:	4b04      	ldr	r3, [pc, #16]	; (8019918 <UTIL_LPM_Init+0x18>)
 8019906:	2200      	movs	r2, #0
 8019908:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801990a:	4b04      	ldr	r3, [pc, #16]	; (801991c <UTIL_LPM_Init+0x1c>)
 801990c:	2200      	movs	r2, #0
 801990e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019910:	bf00      	nop
 8019912:	46bd      	mov	sp, r7
 8019914:	bc80      	pop	{r7}
 8019916:	4770      	bx	lr
 8019918:	20000fe4 	.word	0x20000fe4
 801991c:	20000fe8 	.word	0x20000fe8

08019920 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019920:	b480      	push	{r7}
 8019922:	b087      	sub	sp, #28
 8019924:	af00      	add	r7, sp, #0
 8019926:	6078      	str	r0, [r7, #4]
 8019928:	460b      	mov	r3, r1
 801992a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801992c:	f3ef 8310 	mrs	r3, PRIMASK
 8019930:	613b      	str	r3, [r7, #16]
  return(result);
 8019932:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019936:	b672      	cpsid	i
}
 8019938:	bf00      	nop
  
  switch( state )
 801993a:	78fb      	ldrb	r3, [r7, #3]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d008      	beq.n	8019952 <UTIL_LPM_SetStopMode+0x32>
 8019940:	2b01      	cmp	r3, #1
 8019942:	d10e      	bne.n	8019962 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019944:	4b0d      	ldr	r3, [pc, #52]	; (801997c <UTIL_LPM_SetStopMode+0x5c>)
 8019946:	681a      	ldr	r2, [r3, #0]
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	4313      	orrs	r3, r2
 801994c:	4a0b      	ldr	r2, [pc, #44]	; (801997c <UTIL_LPM_SetStopMode+0x5c>)
 801994e:	6013      	str	r3, [r2, #0]
      break;
 8019950:	e008      	b.n	8019964 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	43da      	mvns	r2, r3
 8019956:	4b09      	ldr	r3, [pc, #36]	; (801997c <UTIL_LPM_SetStopMode+0x5c>)
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	4013      	ands	r3, r2
 801995c:	4a07      	ldr	r2, [pc, #28]	; (801997c <UTIL_LPM_SetStopMode+0x5c>)
 801995e:	6013      	str	r3, [r2, #0]
      break;
 8019960:	e000      	b.n	8019964 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8019962:	bf00      	nop
 8019964:	697b      	ldr	r3, [r7, #20]
 8019966:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	f383 8810 	msr	PRIMASK, r3
}
 801996e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019970:	bf00      	nop
 8019972:	371c      	adds	r7, #28
 8019974:	46bd      	mov	sp, r7
 8019976:	bc80      	pop	{r7}
 8019978:	4770      	bx	lr
 801997a:	bf00      	nop
 801997c:	20000fe4 	.word	0x20000fe4

08019980 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019980:	b480      	push	{r7}
 8019982:	b087      	sub	sp, #28
 8019984:	af00      	add	r7, sp, #0
 8019986:	6078      	str	r0, [r7, #4]
 8019988:	460b      	mov	r3, r1
 801998a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801998c:	f3ef 8310 	mrs	r3, PRIMASK
 8019990:	613b      	str	r3, [r7, #16]
  return(result);
 8019992:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019994:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019996:	b672      	cpsid	i
}
 8019998:	bf00      	nop
  
  switch(state)
 801999a:	78fb      	ldrb	r3, [r7, #3]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d008      	beq.n	80199b2 <UTIL_LPM_SetOffMode+0x32>
 80199a0:	2b01      	cmp	r3, #1
 80199a2:	d10e      	bne.n	80199c2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80199a4:	4b0d      	ldr	r3, [pc, #52]	; (80199dc <UTIL_LPM_SetOffMode+0x5c>)
 80199a6:	681a      	ldr	r2, [r3, #0]
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	4313      	orrs	r3, r2
 80199ac:	4a0b      	ldr	r2, [pc, #44]	; (80199dc <UTIL_LPM_SetOffMode+0x5c>)
 80199ae:	6013      	str	r3, [r2, #0]
      break;
 80199b0:	e008      	b.n	80199c4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	43da      	mvns	r2, r3
 80199b6:	4b09      	ldr	r3, [pc, #36]	; (80199dc <UTIL_LPM_SetOffMode+0x5c>)
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	4013      	ands	r3, r2
 80199bc:	4a07      	ldr	r2, [pc, #28]	; (80199dc <UTIL_LPM_SetOffMode+0x5c>)
 80199be:	6013      	str	r3, [r2, #0]
      break;
 80199c0:	e000      	b.n	80199c4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80199c2:	bf00      	nop
 80199c4:	697b      	ldr	r3, [r7, #20]
 80199c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	f383 8810 	msr	PRIMASK, r3
}
 80199ce:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80199d0:	bf00      	nop
 80199d2:	371c      	adds	r7, #28
 80199d4:	46bd      	mov	sp, r7
 80199d6:	bc80      	pop	{r7}
 80199d8:	4770      	bx	lr
 80199da:	bf00      	nop
 80199dc:	20000fe8 	.word	0x20000fe8

080199e0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b084      	sub	sp, #16
 80199e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199e6:	f3ef 8310 	mrs	r3, PRIMASK
 80199ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80199ec:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 80199ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80199f0:	b672      	cpsid	i
}
 80199f2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80199f4:	4b12      	ldr	r3, [pc, #72]	; (8019a40 <UTIL_LPM_EnterLowPower+0x60>)
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d006      	beq.n	8019a0a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80199fc:	4b11      	ldr	r3, [pc, #68]	; (8019a44 <UTIL_LPM_EnterLowPower+0x64>)
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8019a02:	4b10      	ldr	r3, [pc, #64]	; (8019a44 <UTIL_LPM_EnterLowPower+0x64>)
 8019a04:	685b      	ldr	r3, [r3, #4]
 8019a06:	4798      	blx	r3
 8019a08:	e010      	b.n	8019a2c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8019a0a:	4b0f      	ldr	r3, [pc, #60]	; (8019a48 <UTIL_LPM_EnterLowPower+0x68>)
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d006      	beq.n	8019a20 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8019a12:	4b0c      	ldr	r3, [pc, #48]	; (8019a44 <UTIL_LPM_EnterLowPower+0x64>)
 8019a14:	689b      	ldr	r3, [r3, #8]
 8019a16:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019a18:	4b0a      	ldr	r3, [pc, #40]	; (8019a44 <UTIL_LPM_EnterLowPower+0x64>)
 8019a1a:	68db      	ldr	r3, [r3, #12]
 8019a1c:	4798      	blx	r3
 8019a1e:	e005      	b.n	8019a2c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8019a20:	4b08      	ldr	r3, [pc, #32]	; (8019a44 <UTIL_LPM_EnterLowPower+0x64>)
 8019a22:	691b      	ldr	r3, [r3, #16]
 8019a24:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019a26:	4b07      	ldr	r3, [pc, #28]	; (8019a44 <UTIL_LPM_EnterLowPower+0x64>)
 8019a28:	695b      	ldr	r3, [r3, #20]
 8019a2a:	4798      	blx	r3
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	f383 8810 	msr	PRIMASK, r3
}
 8019a36:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8019a38:	bf00      	nop
 8019a3a:	3710      	adds	r7, #16
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	bd80      	pop	{r7, pc}
 8019a40:	20000fe4 	.word	0x20000fe4
 8019a44:	0801ba3c 	.word	0x0801ba3c
 8019a48:	20000fe8 	.word	0x20000fe8

08019a4c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8019a4c:	b480      	push	{r7}
 8019a4e:	b087      	sub	sp, #28
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	60f8      	str	r0, [r7, #12]
 8019a54:	60b9      	str	r1, [r7, #8]
 8019a56:	4613      	mov	r3, r2
 8019a58:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8019a5e:	68bb      	ldr	r3, [r7, #8]
 8019a60:	613b      	str	r3, [r7, #16]

  while( size-- )
 8019a62:	e007      	b.n	8019a74 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8019a64:	693a      	ldr	r2, [r7, #16]
 8019a66:	1c53      	adds	r3, r2, #1
 8019a68:	613b      	str	r3, [r7, #16]
 8019a6a:	697b      	ldr	r3, [r7, #20]
 8019a6c:	1c59      	adds	r1, r3, #1
 8019a6e:	6179      	str	r1, [r7, #20]
 8019a70:	7812      	ldrb	r2, [r2, #0]
 8019a72:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019a74:	88fb      	ldrh	r3, [r7, #6]
 8019a76:	1e5a      	subs	r2, r3, #1
 8019a78:	80fa      	strh	r2, [r7, #6]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d1f2      	bne.n	8019a64 <UTIL_MEM_cpy_8+0x18>
    }
}
 8019a7e:	bf00      	nop
 8019a80:	bf00      	nop
 8019a82:	371c      	adds	r7, #28
 8019a84:	46bd      	mov	sp, r7
 8019a86:	bc80      	pop	{r7}
 8019a88:	4770      	bx	lr

08019a8a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8019a8a:	b480      	push	{r7}
 8019a8c:	b085      	sub	sp, #20
 8019a8e:	af00      	add	r7, sp, #0
 8019a90:	6078      	str	r0, [r7, #4]
 8019a92:	460b      	mov	r3, r1
 8019a94:	70fb      	strb	r3, [r7, #3]
 8019a96:	4613      	mov	r3, r2
 8019a98:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8019a9e:	e004      	b.n	8019aaa <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	1c5a      	adds	r2, r3, #1
 8019aa4:	60fa      	str	r2, [r7, #12]
 8019aa6:	78fa      	ldrb	r2, [r7, #3]
 8019aa8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019aaa:	883b      	ldrh	r3, [r7, #0]
 8019aac:	1e5a      	subs	r2, r3, #1
 8019aae:	803a      	strh	r2, [r7, #0]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d1f5      	bne.n	8019aa0 <UTIL_MEM_set_8+0x16>
  }
}
 8019ab4:	bf00      	nop
 8019ab6:	bf00      	nop
 8019ab8:	3714      	adds	r7, #20
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bc80      	pop	{r7}
 8019abe:	4770      	bx	lr

08019ac0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019ac0:	b082      	sub	sp, #8
 8019ac2:	b480      	push	{r7}
 8019ac4:	b087      	sub	sp, #28
 8019ac6:	af00      	add	r7, sp, #0
 8019ac8:	60f8      	str	r0, [r7, #12]
 8019aca:	1d38      	adds	r0, r7, #4
 8019acc:	e880 0006 	stmia.w	r0, {r1, r2}
 8019ad0:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	613b      	str	r3, [r7, #16]
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8019ada:	687a      	ldr	r2, [r7, #4]
 8019adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ade:	4413      	add	r3, r2
 8019ae0:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019ae2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019ae6:	b29a      	uxth	r2, r3
 8019ae8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019aec:	b29b      	uxth	r3, r3
 8019aee:	4413      	add	r3, r2
 8019af0:	b29b      	uxth	r3, r3
 8019af2:	b21b      	sxth	r3, r3
 8019af4:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019af6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019afe:	db0a      	blt.n	8019b16 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019b00:	693b      	ldr	r3, [r7, #16]
 8019b02:	3301      	adds	r3, #1
 8019b04:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019b06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019b10:	b29b      	uxth	r3, r3
 8019b12:	b21b      	sxth	r3, r3
 8019b14:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	461a      	mov	r2, r3
 8019b1a:	f107 0310 	add.w	r3, r7, #16
 8019b1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019b22:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019b26:	68f8      	ldr	r0, [r7, #12]
 8019b28:	371c      	adds	r7, #28
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	bc80      	pop	{r7}
 8019b2e:	b002      	add	sp, #8
 8019b30:	4770      	bx	lr

08019b32 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8019b32:	b082      	sub	sp, #8
 8019b34:	b480      	push	{r7}
 8019b36:	b087      	sub	sp, #28
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	60f8      	str	r0, [r7, #12]
 8019b3c:	1d38      	adds	r0, r7, #4
 8019b3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8019b42:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019b44:	2300      	movs	r3, #0
 8019b46:	613b      	str	r3, [r7, #16]
 8019b48:	2300      	movs	r3, #0
 8019b4a:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019b4c:	687a      	ldr	r2, [r7, #4]
 8019b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b50:	1ad3      	subs	r3, r2, r3
 8019b52:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019b54:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019b58:	b29a      	uxth	r2, r3
 8019b5a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019b5e:	b29b      	uxth	r3, r3
 8019b60:	1ad3      	subs	r3, r2, r3
 8019b62:	b29b      	uxth	r3, r3
 8019b64:	b21b      	sxth	r3, r3
 8019b66:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019b68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	da0a      	bge.n	8019b86 <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019b70:	693b      	ldr	r3, [r7, #16]
 8019b72:	3b01      	subs	r3, #1
 8019b74:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019b76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019b7a:	b29b      	uxth	r3, r3
 8019b7c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8019b80:	b29b      	uxth	r3, r3
 8019b82:	b21b      	sxth	r3, r3
 8019b84:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	461a      	mov	r2, r3
 8019b8a:	f107 0310 	add.w	r3, r7, #16
 8019b8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019b92:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019b96:	68f8      	ldr	r0, [r7, #12]
 8019b98:	371c      	adds	r7, #28
 8019b9a:	46bd      	mov	sp, r7
 8019b9c:	bc80      	pop	{r7}
 8019b9e:	b002      	add	sp, #8
 8019ba0:	4770      	bx	lr
	...

08019ba4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b088      	sub	sp, #32
 8019ba8:	af02      	add	r7, sp, #8
 8019baa:	463b      	mov	r3, r7
 8019bac:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019bb0:	2300      	movs	r3, #0
 8019bb2:	60bb      	str	r3, [r7, #8]
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019bb8:	4b10      	ldr	r3, [pc, #64]	; (8019bfc <SysTimeSet+0x58>)
 8019bba:	691b      	ldr	r3, [r3, #16]
 8019bbc:	f107 0208 	add.w	r2, r7, #8
 8019bc0:	3204      	adds	r2, #4
 8019bc2:	4610      	mov	r0, r2
 8019bc4:	4798      	blx	r3
 8019bc6:	4603      	mov	r3, r0
 8019bc8:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019bca:	f107 0010 	add.w	r0, r7, #16
 8019bce:	68fb      	ldr	r3, [r7, #12]
 8019bd0:	9300      	str	r3, [sp, #0]
 8019bd2:	68bb      	ldr	r3, [r7, #8]
 8019bd4:	463a      	mov	r2, r7
 8019bd6:	ca06      	ldmia	r2, {r1, r2}
 8019bd8:	f7ff ffab 	bl	8019b32 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019bdc:	4b07      	ldr	r3, [pc, #28]	; (8019bfc <SysTimeSet+0x58>)
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	693a      	ldr	r2, [r7, #16]
 8019be2:	4610      	mov	r0, r2
 8019be4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019be6:	4b05      	ldr	r3, [pc, #20]	; (8019bfc <SysTimeSet+0x58>)
 8019be8:	689b      	ldr	r3, [r3, #8]
 8019bea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019bee:	4610      	mov	r0, r2
 8019bf0:	4798      	blx	r3
}
 8019bf2:	bf00      	nop
 8019bf4:	3718      	adds	r7, #24
 8019bf6:	46bd      	mov	sp, r7
 8019bf8:	bd80      	pop	{r7, pc}
 8019bfa:	bf00      	nop
 8019bfc:	0801bb20 	.word	0x0801bb20

08019c00 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b08a      	sub	sp, #40	; 0x28
 8019c04:	af02      	add	r7, sp, #8
 8019c06:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019c08:	2300      	movs	r3, #0
 8019c0a:	61bb      	str	r3, [r7, #24]
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019c10:	2300      	movs	r3, #0
 8019c12:	613b      	str	r3, [r7, #16]
 8019c14:	2300      	movs	r3, #0
 8019c16:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019c18:	4b14      	ldr	r3, [pc, #80]	; (8019c6c <SysTimeGet+0x6c>)
 8019c1a:	691b      	ldr	r3, [r3, #16]
 8019c1c:	f107 0218 	add.w	r2, r7, #24
 8019c20:	3204      	adds	r2, #4
 8019c22:	4610      	mov	r0, r2
 8019c24:	4798      	blx	r3
 8019c26:	4603      	mov	r3, r0
 8019c28:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019c2a:	4b10      	ldr	r3, [pc, #64]	; (8019c6c <SysTimeGet+0x6c>)
 8019c2c:	68db      	ldr	r3, [r3, #12]
 8019c2e:	4798      	blx	r3
 8019c30:	4603      	mov	r3, r0
 8019c32:	b21b      	sxth	r3, r3
 8019c34:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019c36:	4b0d      	ldr	r3, [pc, #52]	; (8019c6c <SysTimeGet+0x6c>)
 8019c38:	685b      	ldr	r3, [r3, #4]
 8019c3a:	4798      	blx	r3
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8019c40:	f107 0010 	add.w	r0, r7, #16
 8019c44:	69fb      	ldr	r3, [r7, #28]
 8019c46:	9300      	str	r3, [sp, #0]
 8019c48:	69bb      	ldr	r3, [r7, #24]
 8019c4a:	f107 0208 	add.w	r2, r7, #8
 8019c4e:	ca06      	ldmia	r2, {r1, r2}
 8019c50:	f7ff ff36 	bl	8019ac0 <SysTimeAdd>

  return sysTime;
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	461a      	mov	r2, r3
 8019c58:	f107 0310 	add.w	r3, r7, #16
 8019c5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019c60:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019c64:	6878      	ldr	r0, [r7, #4]
 8019c66:	3720      	adds	r7, #32
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}
 8019c6c:	0801bb20 	.word	0x0801bb20

08019c70 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b084      	sub	sp, #16
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019c78:	2300      	movs	r3, #0
 8019c7a:	60bb      	str	r3, [r7, #8]
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019c80:	4b0a      	ldr	r3, [pc, #40]	; (8019cac <SysTimeGetMcuTime+0x3c>)
 8019c82:	691b      	ldr	r3, [r3, #16]
 8019c84:	f107 0208 	add.w	r2, r7, #8
 8019c88:	3204      	adds	r2, #4
 8019c8a:	4610      	mov	r0, r2
 8019c8c:	4798      	blx	r3
 8019c8e:	4603      	mov	r3, r0
 8019c90:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	461a      	mov	r2, r3
 8019c96:	f107 0308 	add.w	r3, r7, #8
 8019c9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019c9e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019ca2:	6878      	ldr	r0, [r7, #4]
 8019ca4:	3710      	adds	r7, #16
 8019ca6:	46bd      	mov	sp, r7
 8019ca8:	bd80      	pop	{r7, pc}
 8019caa:	bf00      	nop
 8019cac:	0801bb20 	.word	0x0801bb20

08019cb0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019cb0:	b580      	push	{r7, lr}
 8019cb2:	b088      	sub	sp, #32
 8019cb4:	af02      	add	r7, sp, #8
 8019cb6:	463b      	mov	r3, r7
 8019cb8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019cbc:	4b0f      	ldr	r3, [pc, #60]	; (8019cfc <SysTimeToMs+0x4c>)
 8019cbe:	68db      	ldr	r3, [r3, #12]
 8019cc0:	4798      	blx	r3
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	b21b      	sxth	r3, r3
 8019cc6:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019cc8:	4b0c      	ldr	r3, [pc, #48]	; (8019cfc <SysTimeToMs+0x4c>)
 8019cca:	685b      	ldr	r3, [r3, #4]
 8019ccc:	4798      	blx	r3
 8019cce:	4603      	mov	r3, r0
 8019cd0:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019cd2:	f107 0008 	add.w	r0, r7, #8
 8019cd6:	697b      	ldr	r3, [r7, #20]
 8019cd8:	9300      	str	r3, [sp, #0]
 8019cda:	693b      	ldr	r3, [r7, #16]
 8019cdc:	463a      	mov	r2, r7
 8019cde:	ca06      	ldmia	r2, {r1, r2}
 8019ce0:	f7ff ff27 	bl	8019b32 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019cea:	fb02 f303 	mul.w	r3, r2, r3
 8019cee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019cf2:	4413      	add	r3, r2
}
 8019cf4:	4618      	mov	r0, r3
 8019cf6:	3718      	adds	r7, #24
 8019cf8:	46bd      	mov	sp, r7
 8019cfa:	bd80      	pop	{r7, pc}
 8019cfc:	0801bb20 	.word	0x0801bb20

08019d00 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019d00:	b580      	push	{r7, lr}
 8019d02:	b08a      	sub	sp, #40	; 0x28
 8019d04:	af02      	add	r7, sp, #8
 8019d06:	6078      	str	r0, [r7, #4]
 8019d08:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019d0a:	683b      	ldr	r3, [r7, #0]
 8019d0c:	4a19      	ldr	r2, [pc, #100]	; (8019d74 <SysTimeFromMs+0x74>)
 8019d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8019d12:	099b      	lsrs	r3, r3, #6
 8019d14:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019d16:	69fb      	ldr	r3, [r7, #28]
 8019d18:	617b      	str	r3, [r7, #20]
 8019d1a:	683b      	ldr	r3, [r7, #0]
 8019d1c:	b29a      	uxth	r2, r3
 8019d1e:	69fb      	ldr	r3, [r7, #28]
 8019d20:	b29b      	uxth	r3, r3
 8019d22:	4619      	mov	r1, r3
 8019d24:	0149      	lsls	r1, r1, #5
 8019d26:	1ac9      	subs	r1, r1, r3
 8019d28:	0089      	lsls	r1, r1, #2
 8019d2a:	440b      	add	r3, r1
 8019d2c:	00db      	lsls	r3, r3, #3
 8019d2e:	b29b      	uxth	r3, r3
 8019d30:	1ad3      	subs	r3, r2, r3
 8019d32:	b29b      	uxth	r3, r3
 8019d34:	b21b      	sxth	r3, r3
 8019d36:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019d38:	f107 030c 	add.w	r3, r7, #12
 8019d3c:	2200      	movs	r2, #0
 8019d3e:	601a      	str	r2, [r3, #0]
 8019d40:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019d42:	4b0d      	ldr	r3, [pc, #52]	; (8019d78 <SysTimeFromMs+0x78>)
 8019d44:	68db      	ldr	r3, [r3, #12]
 8019d46:	4798      	blx	r3
 8019d48:	4603      	mov	r3, r0
 8019d4a:	b21b      	sxth	r3, r3
 8019d4c:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019d4e:	4b0a      	ldr	r3, [pc, #40]	; (8019d78 <SysTimeFromMs+0x78>)
 8019d50:	685b      	ldr	r3, [r3, #4]
 8019d52:	4798      	blx	r3
 8019d54:	4603      	mov	r3, r0
 8019d56:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019d58:	6878      	ldr	r0, [r7, #4]
 8019d5a:	693b      	ldr	r3, [r7, #16]
 8019d5c:	9300      	str	r3, [sp, #0]
 8019d5e:	68fb      	ldr	r3, [r7, #12]
 8019d60:	f107 0214 	add.w	r2, r7, #20
 8019d64:	ca06      	ldmia	r2, {r1, r2}
 8019d66:	f7ff feab 	bl	8019ac0 <SysTimeAdd>
}
 8019d6a:	6878      	ldr	r0, [r7, #4]
 8019d6c:	3720      	adds	r7, #32
 8019d6e:	46bd      	mov	sp, r7
 8019d70:	bd80      	pop	{r7, pc}
 8019d72:	bf00      	nop
 8019d74:	10624dd3 	.word	0x10624dd3
 8019d78:	0801bb20 	.word	0x0801bb20

08019d7c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8019d7c:	b480      	push	{r7}
 8019d7e:	b085      	sub	sp, #20
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	6078      	str	r0, [r7, #4]
  int i = 0;
 8019d84:	2300      	movs	r3, #0
 8019d86:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8019d88:	e00e      	b.n	8019da8 <ee_skip_atoi+0x2c>
 8019d8a:	68fa      	ldr	r2, [r7, #12]
 8019d8c:	4613      	mov	r3, r2
 8019d8e:	009b      	lsls	r3, r3, #2
 8019d90:	4413      	add	r3, r2
 8019d92:	005b      	lsls	r3, r3, #1
 8019d94:	4618      	mov	r0, r3
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	1c59      	adds	r1, r3, #1
 8019d9c:	687a      	ldr	r2, [r7, #4]
 8019d9e:	6011      	str	r1, [r2, #0]
 8019da0:	781b      	ldrb	r3, [r3, #0]
 8019da2:	4403      	add	r3, r0
 8019da4:	3b30      	subs	r3, #48	; 0x30
 8019da6:	60fb      	str	r3, [r7, #12]
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	781b      	ldrb	r3, [r3, #0]
 8019dae:	2b2f      	cmp	r3, #47	; 0x2f
 8019db0:	d904      	bls.n	8019dbc <ee_skip_atoi+0x40>
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	781b      	ldrb	r3, [r3, #0]
 8019db8:	2b39      	cmp	r3, #57	; 0x39
 8019dba:	d9e6      	bls.n	8019d8a <ee_skip_atoi+0xe>
  return i;
 8019dbc:	68fb      	ldr	r3, [r7, #12]
}
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	3714      	adds	r7, #20
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	bc80      	pop	{r7}
 8019dc6:	4770      	bx	lr

08019dc8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8019dc8:	b480      	push	{r7}
 8019dca:	b099      	sub	sp, #100	; 0x64
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	60f8      	str	r0, [r7, #12]
 8019dd0:	60b9      	str	r1, [r7, #8]
 8019dd2:	607a      	str	r2, [r7, #4]
 8019dd4:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019dd6:	4b72      	ldr	r3, [pc, #456]	; (8019fa0 <ee_number+0x1d8>)
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8019ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d002      	beq.n	8019dec <ee_number+0x24>
 8019de6:	4b6f      	ldr	r3, [pc, #444]	; (8019fa4 <ee_number+0x1dc>)
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8019dec:	683b      	ldr	r3, [r7, #0]
 8019dee:	2b01      	cmp	r3, #1
 8019df0:	dd02      	ble.n	8019df8 <ee_number+0x30>
 8019df2:	683b      	ldr	r3, [r7, #0]
 8019df4:	2b24      	cmp	r3, #36	; 0x24
 8019df6:	dd01      	ble.n	8019dfc <ee_number+0x34>
 8019df8:	2300      	movs	r3, #0
 8019dfa:	e0cc      	b.n	8019f96 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8019dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019dfe:	f003 0301 	and.w	r3, r3, #1
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d001      	beq.n	8019e0a <ee_number+0x42>
 8019e06:	2330      	movs	r3, #48	; 0x30
 8019e08:	e000      	b.n	8019e0c <ee_number+0x44>
 8019e0a:	2320      	movs	r3, #32
 8019e0c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8019e10:	2300      	movs	r3, #0
 8019e12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019e18:	f003 0302 	and.w	r3, r3, #2
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d00b      	beq.n	8019e38 <ee_number+0x70>
  {
    if (num < 0)
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	da08      	bge.n	8019e38 <ee_number+0x70>
    {
      sign = '-';
 8019e26:	232d      	movs	r3, #45	; 0x2d
 8019e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	425b      	negs	r3, r3
 8019e30:	607b      	str	r3, [r7, #4]
      size--;
 8019e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019e34:	3b01      	subs	r3, #1
 8019e36:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8019e38:	2300      	movs	r3, #0
 8019e3a:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d120      	bne.n	8019e84 <ee_number+0xbc>
    tmp[i++] = '0';
 8019e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019e44:	1c5a      	adds	r2, r3, #1
 8019e46:	657a      	str	r2, [r7, #84]	; 0x54
 8019e48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8019e4c:	4413      	add	r3, r2
 8019e4e:	2230      	movs	r2, #48	; 0x30
 8019e50:	f803 2c50 	strb.w	r2, [r3, #-80]
 8019e54:	e019      	b.n	8019e8a <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	683a      	ldr	r2, [r7, #0]
 8019e5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8019e5e:	fb02 f201 	mul.w	r2, r2, r1
 8019e62:	1a9b      	subs	r3, r3, r2
 8019e64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019e66:	441a      	add	r2, r3
 8019e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019e6a:	1c59      	adds	r1, r3, #1
 8019e6c:	6579      	str	r1, [r7, #84]	; 0x54
 8019e6e:	7812      	ldrb	r2, [r2, #0]
 8019e70:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019e74:	440b      	add	r3, r1
 8019e76:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8019e7a:	687a      	ldr	r2, [r7, #4]
 8019e7c:	683b      	ldr	r3, [r7, #0]
 8019e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e82:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d1e5      	bne.n	8019e56 <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 8019e8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e8e:	429a      	cmp	r2, r3
 8019e90:	dd01      	ble.n	8019e96 <ee_number+0xce>
 8019e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019e94:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019e96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019e9a:	1ad3      	subs	r3, r2, r3
 8019e9c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8019e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019ea0:	f003 0301 	and.w	r3, r3, #1
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d112      	bne.n	8019ece <ee_number+0x106>
 8019ea8:	e00c      	b.n	8019ec4 <ee_number+0xfc>
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	1c5a      	adds	r2, r3, #1
 8019eae:	60fa      	str	r2, [r7, #12]
 8019eb0:	2220      	movs	r2, #32
 8019eb2:	701a      	strb	r2, [r3, #0]
 8019eb4:	68bb      	ldr	r3, [r7, #8]
 8019eb6:	3b01      	subs	r3, #1
 8019eb8:	60bb      	str	r3, [r7, #8]
 8019eba:	68bb      	ldr	r3, [r7, #8]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d101      	bne.n	8019ec4 <ee_number+0xfc>
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	e068      	b.n	8019f96 <ee_number+0x1ce>
 8019ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019ec6:	1e5a      	subs	r2, r3, #1
 8019ec8:	66ba      	str	r2, [r7, #104]	; 0x68
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	dced      	bgt.n	8019eaa <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 8019ece:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d01b      	beq.n	8019f0e <ee_number+0x146>
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	1c5a      	adds	r2, r3, #1
 8019eda:	60fa      	str	r2, [r7, #12]
 8019edc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019ee0:	701a      	strb	r2, [r3, #0]
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	3b01      	subs	r3, #1
 8019ee6:	60bb      	str	r3, [r7, #8]
 8019ee8:	68bb      	ldr	r3, [r7, #8]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d10f      	bne.n	8019f0e <ee_number+0x146>
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	e051      	b.n	8019f96 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8019ef2:	68fb      	ldr	r3, [r7, #12]
 8019ef4:	1c5a      	adds	r2, r3, #1
 8019ef6:	60fa      	str	r2, [r7, #12]
 8019ef8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019efc:	701a      	strb	r2, [r3, #0]
 8019efe:	68bb      	ldr	r3, [r7, #8]
 8019f00:	3b01      	subs	r3, #1
 8019f02:	60bb      	str	r3, [r7, #8]
 8019f04:	68bb      	ldr	r3, [r7, #8]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d101      	bne.n	8019f0e <ee_number+0x146>
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	e043      	b.n	8019f96 <ee_number+0x1ce>
 8019f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019f10:	1e5a      	subs	r2, r3, #1
 8019f12:	66ba      	str	r2, [r7, #104]	; 0x68
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	dcec      	bgt.n	8019ef2 <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019f18:	e00c      	b.n	8019f34 <ee_number+0x16c>
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	1c5a      	adds	r2, r3, #1
 8019f1e:	60fa      	str	r2, [r7, #12]
 8019f20:	2230      	movs	r2, #48	; 0x30
 8019f22:	701a      	strb	r2, [r3, #0]
 8019f24:	68bb      	ldr	r3, [r7, #8]
 8019f26:	3b01      	subs	r3, #1
 8019f28:	60bb      	str	r3, [r7, #8]
 8019f2a:	68bb      	ldr	r3, [r7, #8]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d101      	bne.n	8019f34 <ee_number+0x16c>
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	e030      	b.n	8019f96 <ee_number+0x1ce>
 8019f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f36:	1e5a      	subs	r2, r3, #1
 8019f38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019f3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019f3c:	429a      	cmp	r2, r3
 8019f3e:	dbec      	blt.n	8019f1a <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8019f40:	e010      	b.n	8019f64 <ee_number+0x19c>
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	1c5a      	adds	r2, r3, #1
 8019f46:	60fa      	str	r2, [r7, #12]
 8019f48:	f107 0110 	add.w	r1, r7, #16
 8019f4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019f4e:	440a      	add	r2, r1
 8019f50:	7812      	ldrb	r2, [r2, #0]
 8019f52:	701a      	strb	r2, [r3, #0]
 8019f54:	68bb      	ldr	r3, [r7, #8]
 8019f56:	3b01      	subs	r3, #1
 8019f58:	60bb      	str	r3, [r7, #8]
 8019f5a:	68bb      	ldr	r3, [r7, #8]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d101      	bne.n	8019f64 <ee_number+0x19c>
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	e018      	b.n	8019f96 <ee_number+0x1ce>
 8019f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f66:	1e5a      	subs	r2, r3, #1
 8019f68:	657a      	str	r2, [r7, #84]	; 0x54
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	dce9      	bgt.n	8019f42 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 8019f6e:	e00c      	b.n	8019f8a <ee_number+0x1c2>
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	1c5a      	adds	r2, r3, #1
 8019f74:	60fa      	str	r2, [r7, #12]
 8019f76:	2220      	movs	r2, #32
 8019f78:	701a      	strb	r2, [r3, #0]
 8019f7a:	68bb      	ldr	r3, [r7, #8]
 8019f7c:	3b01      	subs	r3, #1
 8019f7e:	60bb      	str	r3, [r7, #8]
 8019f80:	68bb      	ldr	r3, [r7, #8]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d101      	bne.n	8019f8a <ee_number+0x1c2>
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	e005      	b.n	8019f96 <ee_number+0x1ce>
 8019f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019f8c:	1e5a      	subs	r2, r3, #1
 8019f8e:	66ba      	str	r2, [r7, #104]	; 0x68
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	dced      	bgt.n	8019f70 <ee_number+0x1a8>

  return str;
 8019f94:	68fb      	ldr	r3, [r7, #12]
}
 8019f96:	4618      	mov	r0, r3
 8019f98:	3764      	adds	r7, #100	; 0x64
 8019f9a:	46bd      	mov	sp, r7
 8019f9c:	bc80      	pop	{r7}
 8019f9e:	4770      	bx	lr
 8019fa0:	20000124 	.word	0x20000124
 8019fa4:	20000128 	.word	0x20000128

08019fa8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b092      	sub	sp, #72	; 0x48
 8019fac:	af04      	add	r7, sp, #16
 8019fae:	60f8      	str	r0, [r7, #12]
 8019fb0:	60b9      	str	r1, [r7, #8]
 8019fb2:	607a      	str	r2, [r7, #4]
 8019fb4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8019fb6:	68bb      	ldr	r3, [r7, #8]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	dc01      	bgt.n	8019fc0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	e142      	b.n	801a246 <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019fc4:	e12a      	b.n	801a21c <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 8019fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	1ad2      	subs	r2, r2, r3
 8019fcc:	68bb      	ldr	r3, [r7, #8]
 8019fce:	3b01      	subs	r3, #1
 8019fd0:	429a      	cmp	r2, r3
 8019fd2:	f280 8131 	bge.w	801a238 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	781b      	ldrb	r3, [r3, #0]
 8019fda:	2b25      	cmp	r3, #37	; 0x25
 8019fdc:	d006      	beq.n	8019fec <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8019fde:	687a      	ldr	r2, [r7, #4]
 8019fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fe2:	1c59      	adds	r1, r3, #1
 8019fe4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019fe6:	7812      	ldrb	r2, [r2, #0]
 8019fe8:	701a      	strb	r2, [r3, #0]
      continue;
 8019fea:	e114      	b.n	801a216 <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 8019fec:	2300      	movs	r3, #0
 8019fee:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	3301      	adds	r3, #1
 8019ff4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	781b      	ldrb	r3, [r3, #0]
 8019ffa:	2b30      	cmp	r3, #48	; 0x30
 8019ffc:	d103      	bne.n	801a006 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8019ffe:	6a3b      	ldr	r3, [r7, #32]
 801a000:	f043 0301 	orr.w	r3, r3, #1
 801a004:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801a006:	f04f 33ff 	mov.w	r3, #4294967295
 801a00a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	781b      	ldrb	r3, [r3, #0]
 801a010:	2b2f      	cmp	r3, #47	; 0x2f
 801a012:	d908      	bls.n	801a026 <tiny_vsnprintf_like+0x7e>
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	781b      	ldrb	r3, [r3, #0]
 801a018:	2b39      	cmp	r3, #57	; 0x39
 801a01a:	d804      	bhi.n	801a026 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a01c:	1d3b      	adds	r3, r7, #4
 801a01e:	4618      	mov	r0, r3
 801a020:	f7ff feac 	bl	8019d7c <ee_skip_atoi>
 801a024:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801a026:	f04f 33ff 	mov.w	r3, #4294967295
 801a02a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801a02c:	f04f 33ff 	mov.w	r3, #4294967295
 801a030:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801a032:	230a      	movs	r3, #10
 801a034:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	781b      	ldrb	r3, [r3, #0]
 801a03a:	3b58      	subs	r3, #88	; 0x58
 801a03c:	2b20      	cmp	r3, #32
 801a03e:	f200 8094 	bhi.w	801a16a <tiny_vsnprintf_like+0x1c2>
 801a042:	a201      	add	r2, pc, #4	; (adr r2, 801a048 <tiny_vsnprintf_like+0xa0>)
 801a044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a048:	0801a153 	.word	0x0801a153
 801a04c:	0801a16b 	.word	0x0801a16b
 801a050:	0801a16b 	.word	0x0801a16b
 801a054:	0801a16b 	.word	0x0801a16b
 801a058:	0801a16b 	.word	0x0801a16b
 801a05c:	0801a16b 	.word	0x0801a16b
 801a060:	0801a16b 	.word	0x0801a16b
 801a064:	0801a16b 	.word	0x0801a16b
 801a068:	0801a16b 	.word	0x0801a16b
 801a06c:	0801a16b 	.word	0x0801a16b
 801a070:	0801a16b 	.word	0x0801a16b
 801a074:	0801a0d7 	.word	0x0801a0d7
 801a078:	0801a161 	.word	0x0801a161
 801a07c:	0801a16b 	.word	0x0801a16b
 801a080:	0801a16b 	.word	0x0801a16b
 801a084:	0801a16b 	.word	0x0801a16b
 801a088:	0801a16b 	.word	0x0801a16b
 801a08c:	0801a161 	.word	0x0801a161
 801a090:	0801a16b 	.word	0x0801a16b
 801a094:	0801a16b 	.word	0x0801a16b
 801a098:	0801a16b 	.word	0x0801a16b
 801a09c:	0801a16b 	.word	0x0801a16b
 801a0a0:	0801a16b 	.word	0x0801a16b
 801a0a4:	0801a16b 	.word	0x0801a16b
 801a0a8:	0801a16b 	.word	0x0801a16b
 801a0ac:	0801a16b 	.word	0x0801a16b
 801a0b0:	0801a16b 	.word	0x0801a16b
 801a0b4:	0801a0f7 	.word	0x0801a0f7
 801a0b8:	0801a16b 	.word	0x0801a16b
 801a0bc:	0801a1b7 	.word	0x0801a1b7
 801a0c0:	0801a16b 	.word	0x0801a16b
 801a0c4:	0801a16b 	.word	0x0801a16b
 801a0c8:	0801a15b 	.word	0x0801a15b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ce:	1c5a      	adds	r2, r3, #1
 801a0d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a0d2:	2220      	movs	r2, #32
 801a0d4:	701a      	strb	r2, [r3, #0]
 801a0d6:	69fb      	ldr	r3, [r7, #28]
 801a0d8:	3b01      	subs	r3, #1
 801a0da:	61fb      	str	r3, [r7, #28]
 801a0dc:	69fb      	ldr	r3, [r7, #28]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	dcf4      	bgt.n	801a0cc <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a0e2:	683b      	ldr	r3, [r7, #0]
 801a0e4:	1d1a      	adds	r2, r3, #4
 801a0e6:	603a      	str	r2, [r7, #0]
 801a0e8:	6819      	ldr	r1, [r3, #0]
 801a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ec:	1c5a      	adds	r2, r3, #1
 801a0ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a0f0:	b2ca      	uxtb	r2, r1
 801a0f2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a0f4:	e08f      	b.n	801a216 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801a0f6:	683b      	ldr	r3, [r7, #0]
 801a0f8:	1d1a      	adds	r2, r3, #4
 801a0fa:	603a      	str	r2, [r7, #0]
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a102:	2b00      	cmp	r3, #0
 801a104:	d101      	bne.n	801a10a <tiny_vsnprintf_like+0x162>
 801a106:	4b52      	ldr	r3, [pc, #328]	; (801a250 <tiny_vsnprintf_like+0x2a8>)
 801a108:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a10a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a10c:	f7e6 f834 	bl	8000178 <strlen>
 801a110:	4603      	mov	r3, r0
 801a112:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a114:	e004      	b.n	801a120 <tiny_vsnprintf_like+0x178>
 801a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a118:	1c5a      	adds	r2, r3, #1
 801a11a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a11c:	2220      	movs	r2, #32
 801a11e:	701a      	strb	r2, [r3, #0]
 801a120:	69fb      	ldr	r3, [r7, #28]
 801a122:	1e5a      	subs	r2, r3, #1
 801a124:	61fa      	str	r2, [r7, #28]
 801a126:	693a      	ldr	r2, [r7, #16]
 801a128:	429a      	cmp	r2, r3
 801a12a:	dbf4      	blt.n	801a116 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a12c:	2300      	movs	r3, #0
 801a12e:	62bb      	str	r3, [r7, #40]	; 0x28
 801a130:	e00a      	b.n	801a148 <tiny_vsnprintf_like+0x1a0>
 801a132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a134:	1c53      	adds	r3, r2, #1
 801a136:	627b      	str	r3, [r7, #36]	; 0x24
 801a138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a13a:	1c59      	adds	r1, r3, #1
 801a13c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a13e:	7812      	ldrb	r2, [r2, #0]
 801a140:	701a      	strb	r2, [r3, #0]
 801a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a144:	3301      	adds	r3, #1
 801a146:	62bb      	str	r3, [r7, #40]	; 0x28
 801a148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a14a:	693b      	ldr	r3, [r7, #16]
 801a14c:	429a      	cmp	r2, r3
 801a14e:	dbf0      	blt.n	801a132 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a150:	e061      	b.n	801a216 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801a152:	6a3b      	ldr	r3, [r7, #32]
 801a154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a158:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a15a:	2310      	movs	r3, #16
 801a15c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801a15e:	e02d      	b.n	801a1bc <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a160:	6a3b      	ldr	r3, [r7, #32]
 801a162:	f043 0302 	orr.w	r3, r3, #2
 801a166:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a168:	e025      	b.n	801a1b6 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	781b      	ldrb	r3, [r3, #0]
 801a16e:	2b25      	cmp	r3, #37	; 0x25
 801a170:	d004      	beq.n	801a17c <tiny_vsnprintf_like+0x1d4>
 801a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a174:	1c5a      	adds	r2, r3, #1
 801a176:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a178:	2225      	movs	r2, #37	; 0x25
 801a17a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a17c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	1ad2      	subs	r2, r2, r3
 801a182:	68bb      	ldr	r3, [r7, #8]
 801a184:	3b01      	subs	r3, #1
 801a186:	429a      	cmp	r2, r3
 801a188:	da17      	bge.n	801a1ba <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	781b      	ldrb	r3, [r3, #0]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d006      	beq.n	801a1a0 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a192:	687a      	ldr	r2, [r7, #4]
 801a194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a196:	1c59      	adds	r1, r3, #1
 801a198:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a19a:	7812      	ldrb	r2, [r2, #0]
 801a19c:	701a      	strb	r2, [r3, #0]
 801a19e:	e002      	b.n	801a1a6 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	3b01      	subs	r3, #1
 801a1a4:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a1a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	1ad2      	subs	r2, r2, r3
 801a1ac:	68bb      	ldr	r3, [r7, #8]
 801a1ae:	3b01      	subs	r3, #1
 801a1b0:	429a      	cmp	r2, r3
 801a1b2:	db2f      	blt.n	801a214 <tiny_vsnprintf_like+0x26c>
 801a1b4:	e002      	b.n	801a1bc <tiny_vsnprintf_like+0x214>
        break;
 801a1b6:	bf00      	nop
 801a1b8:	e000      	b.n	801a1bc <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801a1ba:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a1bc:	697b      	ldr	r3, [r7, #20]
 801a1be:	2b6c      	cmp	r3, #108	; 0x6c
 801a1c0:	d105      	bne.n	801a1ce <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801a1c2:	683b      	ldr	r3, [r7, #0]
 801a1c4:	1d1a      	adds	r2, r3, #4
 801a1c6:	603a      	str	r2, [r7, #0]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	637b      	str	r3, [r7, #52]	; 0x34
 801a1cc:	e00f      	b.n	801a1ee <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801a1ce:	6a3b      	ldr	r3, [r7, #32]
 801a1d0:	f003 0302 	and.w	r3, r3, #2
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d005      	beq.n	801a1e4 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801a1d8:	683b      	ldr	r3, [r7, #0]
 801a1da:	1d1a      	adds	r2, r3, #4
 801a1dc:	603a      	str	r2, [r7, #0]
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	637b      	str	r3, [r7, #52]	; 0x34
 801a1e2:	e004      	b.n	801a1ee <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801a1e4:	683b      	ldr	r3, [r7, #0]
 801a1e6:	1d1a      	adds	r2, r3, #4
 801a1e8:	603a      	str	r2, [r7, #0]
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a1ee:	68bb      	ldr	r3, [r7, #8]
 801a1f0:	1e5a      	subs	r2, r3, #1
 801a1f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	1acb      	subs	r3, r1, r3
 801a1f8:	1ad1      	subs	r1, r2, r3
 801a1fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a1fc:	6a3b      	ldr	r3, [r7, #32]
 801a1fe:	9302      	str	r3, [sp, #8]
 801a200:	69bb      	ldr	r3, [r7, #24]
 801a202:	9301      	str	r3, [sp, #4]
 801a204:	69fb      	ldr	r3, [r7, #28]
 801a206:	9300      	str	r3, [sp, #0]
 801a208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a20a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a20c:	f7ff fddc 	bl	8019dc8 <ee_number>
 801a210:	62f8      	str	r0, [r7, #44]	; 0x2c
 801a212:	e000      	b.n	801a216 <tiny_vsnprintf_like+0x26e>
        continue;
 801a214:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	3301      	adds	r3, #1
 801a21a:	607b      	str	r3, [r7, #4]
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	781b      	ldrb	r3, [r3, #0]
 801a220:	2b00      	cmp	r3, #0
 801a222:	f47f aed0 	bne.w	8019fc6 <tiny_vsnprintf_like+0x1e>
 801a226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	1ad2      	subs	r2, r2, r3
 801a22c:	68bb      	ldr	r3, [r7, #8]
 801a22e:	3b01      	subs	r3, #1
 801a230:	429a      	cmp	r2, r3
 801a232:	f6bf aec8 	bge.w	8019fc6 <tiny_vsnprintf_like+0x1e>
 801a236:	e000      	b.n	801a23a <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801a238:	bf00      	nop
  }

  *str = '\0';
 801a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a23c:	2200      	movs	r2, #0
 801a23e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	1ad3      	subs	r3, r2, r3
}
 801a246:	4618      	mov	r0, r3
 801a248:	3738      	adds	r7, #56	; 0x38
 801a24a:	46bd      	mov	sp, r7
 801a24c:	bd80      	pop	{r7, pc}
 801a24e:	bf00      	nop
 801a250:	0801ba30 	.word	0x0801ba30

0801a254 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b08c      	sub	sp, #48	; 0x30
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a25c:	4b67      	ldr	r3, [pc, #412]	; (801a3fc <UTIL_SEQ_Run+0x1a8>)
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801a262:	4b66      	ldr	r3, [pc, #408]	; (801a3fc <UTIL_SEQ_Run+0x1a8>)
 801a264:	681a      	ldr	r2, [r3, #0]
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	4013      	ands	r3, r2
 801a26a:	4a64      	ldr	r2, [pc, #400]	; (801a3fc <UTIL_SEQ_Run+0x1a8>)
 801a26c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801a26e:	e083      	b.n	801a378 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 801a270:	2300      	movs	r3, #0
 801a272:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801a274:	e002      	b.n	801a27c <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a278:	3301      	adds	r3, #1
 801a27a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801a27c:	4a60      	ldr	r2, [pc, #384]	; (801a400 <UTIL_SEQ_Run+0x1ac>)
 801a27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a280:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a284:	4b5f      	ldr	r3, [pc, #380]	; (801a404 <UTIL_SEQ_Run+0x1b0>)
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	401a      	ands	r2, r3
 801a28a:	4b5c      	ldr	r3, [pc, #368]	; (801a3fc <UTIL_SEQ_Run+0x1a8>)
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	4013      	ands	r3, r2
 801a290:	2b00      	cmp	r3, #0
 801a292:	d0f0      	beq.n	801a276 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801a294:	4a5a      	ldr	r2, [pc, #360]	; (801a400 <UTIL_SEQ_Run+0x1ac>)
 801a296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a298:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a29c:	4b59      	ldr	r3, [pc, #356]	; (801a404 <UTIL_SEQ_Run+0x1b0>)
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	401a      	ands	r2, r3
 801a2a2:	4b56      	ldr	r3, [pc, #344]	; (801a3fc <UTIL_SEQ_Run+0x1a8>)
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	4013      	ands	r3, r2
 801a2a8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a2aa:	4a55      	ldr	r2, [pc, #340]	; (801a400 <UTIL_SEQ_Run+0x1ac>)
 801a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ae:	00db      	lsls	r3, r3, #3
 801a2b0:	4413      	add	r3, r2
 801a2b2:	685a      	ldr	r2, [r3, #4]
 801a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2b6:	4013      	ands	r3, r2
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d106      	bne.n	801a2ca <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a2bc:	4a50      	ldr	r2, [pc, #320]	; (801a400 <UTIL_SEQ_Run+0x1ac>)
 801a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2c0:	00db      	lsls	r3, r3, #3
 801a2c2:	4413      	add	r3, r2
 801a2c4:	f04f 32ff 	mov.w	r2, #4294967295
 801a2c8:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a2ca:	4a4d      	ldr	r2, [pc, #308]	; (801a400 <UTIL_SEQ_Run+0x1ac>)
 801a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ce:	00db      	lsls	r3, r3, #3
 801a2d0:	4413      	add	r3, r2
 801a2d2:	685a      	ldr	r2, [r3, #4]
 801a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2d6:	4013      	ands	r3, r2
 801a2d8:	4618      	mov	r0, r3
 801a2da:	f000 f8f9 	bl	801a4d0 <SEQ_BitPosition>
 801a2de:	4603      	mov	r3, r0
 801a2e0:	461a      	mov	r2, r3
 801a2e2:	4b49      	ldr	r3, [pc, #292]	; (801a408 <UTIL_SEQ_Run+0x1b4>)
 801a2e4:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a2e6:	4a46      	ldr	r2, [pc, #280]	; (801a400 <UTIL_SEQ_Run+0x1ac>)
 801a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ea:	00db      	lsls	r3, r3, #3
 801a2ec:	4413      	add	r3, r2
 801a2ee:	685a      	ldr	r2, [r3, #4]
 801a2f0:	4b45      	ldr	r3, [pc, #276]	; (801a408 <UTIL_SEQ_Run+0x1b4>)
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	2101      	movs	r1, #1
 801a2f6:	fa01 f303 	lsl.w	r3, r1, r3
 801a2fa:	43db      	mvns	r3, r3
 801a2fc:	401a      	ands	r2, r3
 801a2fe:	4940      	ldr	r1, [pc, #256]	; (801a400 <UTIL_SEQ_Run+0x1ac>)
 801a300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a302:	00db      	lsls	r3, r3, #3
 801a304:	440b      	add	r3, r1
 801a306:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a308:	f3ef 8310 	mrs	r3, PRIMASK
 801a30c:	61bb      	str	r3, [r7, #24]
  return(result);
 801a30e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a310:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a312:	b672      	cpsid	i
}
 801a314:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a316:	4b3c      	ldr	r3, [pc, #240]	; (801a408 <UTIL_SEQ_Run+0x1b4>)
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	2201      	movs	r2, #1
 801a31c:	fa02 f303 	lsl.w	r3, r2, r3
 801a320:	43da      	mvns	r2, r3
 801a322:	4b3a      	ldr	r3, [pc, #232]	; (801a40c <UTIL_SEQ_Run+0x1b8>)
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	4013      	ands	r3, r2
 801a328:	4a38      	ldr	r2, [pc, #224]	; (801a40c <UTIL_SEQ_Run+0x1b8>)
 801a32a:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a32c:	2302      	movs	r3, #2
 801a32e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a330:	e013      	b.n	801a35a <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a334:	3b01      	subs	r3, #1
 801a336:	4a32      	ldr	r2, [pc, #200]	; (801a400 <UTIL_SEQ_Run+0x1ac>)
 801a338:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a33c:	4b32      	ldr	r3, [pc, #200]	; (801a408 <UTIL_SEQ_Run+0x1b4>)
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	2201      	movs	r2, #1
 801a342:	fa02 f303 	lsl.w	r3, r2, r3
 801a346:	43da      	mvns	r2, r3
 801a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a34a:	3b01      	subs	r3, #1
 801a34c:	400a      	ands	r2, r1
 801a34e:	492c      	ldr	r1, [pc, #176]	; (801a400 <UTIL_SEQ_Run+0x1ac>)
 801a350:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a356:	3b01      	subs	r3, #1
 801a358:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d1e8      	bne.n	801a332 <UTIL_SEQ_Run+0xde>
 801a360:	6a3b      	ldr	r3, [r7, #32]
 801a362:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a364:	697b      	ldr	r3, [r7, #20]
 801a366:	f383 8810 	msr	PRIMASK, r3
}
 801a36a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a36c:	4b26      	ldr	r3, [pc, #152]	; (801a408 <UTIL_SEQ_Run+0x1b4>)
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	4a27      	ldr	r2, [pc, #156]	; (801a410 <UTIL_SEQ_Run+0x1bc>)
 801a372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a376:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801a378:	4b24      	ldr	r3, [pc, #144]	; (801a40c <UTIL_SEQ_Run+0x1b8>)
 801a37a:	681a      	ldr	r2, [r3, #0]
 801a37c:	4b21      	ldr	r3, [pc, #132]	; (801a404 <UTIL_SEQ_Run+0x1b0>)
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	401a      	ands	r2, r3
 801a382:	4b1e      	ldr	r3, [pc, #120]	; (801a3fc <UTIL_SEQ_Run+0x1a8>)
 801a384:	681b      	ldr	r3, [r3, #0]
 801a386:	4013      	ands	r3, r2
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d007      	beq.n	801a39c <UTIL_SEQ_Run+0x148>
 801a38c:	4b21      	ldr	r3, [pc, #132]	; (801a414 <UTIL_SEQ_Run+0x1c0>)
 801a38e:	681a      	ldr	r2, [r3, #0]
 801a390:	4b21      	ldr	r3, [pc, #132]	; (801a418 <UTIL_SEQ_Run+0x1c4>)
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	4013      	ands	r3, r2
 801a396:	2b00      	cmp	r3, #0
 801a398:	f43f af6a 	beq.w	801a270 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a39c:	4b1a      	ldr	r3, [pc, #104]	; (801a408 <UTIL_SEQ_Run+0x1b4>)
 801a39e:	f04f 32ff 	mov.w	r2, #4294967295
 801a3a2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a3a4:	f000 f888 	bl	801a4b8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3a8:	f3ef 8310 	mrs	r3, PRIMASK
 801a3ac:	613b      	str	r3, [r7, #16]
  return(result);
 801a3ae:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a3b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a3b2:	b672      	cpsid	i
}
 801a3b4:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801a3b6:	4b15      	ldr	r3, [pc, #84]	; (801a40c <UTIL_SEQ_Run+0x1b8>)
 801a3b8:	681a      	ldr	r2, [r3, #0]
 801a3ba:	4b12      	ldr	r3, [pc, #72]	; (801a404 <UTIL_SEQ_Run+0x1b0>)
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	401a      	ands	r2, r3
 801a3c0:	4b0e      	ldr	r3, [pc, #56]	; (801a3fc <UTIL_SEQ_Run+0x1a8>)
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	4013      	ands	r3, r2
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d108      	bne.n	801a3dc <UTIL_SEQ_Run+0x188>
 801a3ca:	4b12      	ldr	r3, [pc, #72]	; (801a414 <UTIL_SEQ_Run+0x1c0>)
 801a3cc:	681a      	ldr	r2, [r3, #0]
 801a3ce:	4b12      	ldr	r3, [pc, #72]	; (801a418 <UTIL_SEQ_Run+0x1c4>)
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	4013      	ands	r3, r2
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d101      	bne.n	801a3dc <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801a3d8:	f7e7 fcc4 	bl	8001d64 <UTIL_SEQ_Idle>
 801a3dc:	69fb      	ldr	r3, [r7, #28]
 801a3de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3e0:	68fb      	ldr	r3, [r7, #12]
 801a3e2:	f383 8810 	msr	PRIMASK, r3
}
 801a3e6:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801a3e8:	f000 f86c 	bl	801a4c4 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801a3ec:	4a03      	ldr	r2, [pc, #12]	; (801a3fc <UTIL_SEQ_Run+0x1a8>)
 801a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3f0:	6013      	str	r3, [r2, #0]

  return;
 801a3f2:	bf00      	nop
}
 801a3f4:	3730      	adds	r7, #48	; 0x30
 801a3f6:	46bd      	mov	sp, r7
 801a3f8:	bd80      	pop	{r7, pc}
 801a3fa:	bf00      	nop
 801a3fc:	20000130 	.word	0x20000130
 801a400:	2000107c 	.word	0x2000107c
 801a404:	2000012c 	.word	0x2000012c
 801a408:	20000ff8 	.word	0x20000ff8
 801a40c:	20000fec 	.word	0x20000fec
 801a410:	20000ffc 	.word	0x20000ffc
 801a414:	20000ff0 	.word	0x20000ff0
 801a418:	20000ff4 	.word	0x20000ff4

0801a41c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b088      	sub	sp, #32
 801a420:	af00      	add	r7, sp, #0
 801a422:	60f8      	str	r0, [r7, #12]
 801a424:	60b9      	str	r1, [r7, #8]
 801a426:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a428:	f3ef 8310 	mrs	r3, PRIMASK
 801a42c:	617b      	str	r3, [r7, #20]
  return(result);
 801a42e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a430:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a432:	b672      	cpsid	i
}
 801a434:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a436:	68f8      	ldr	r0, [r7, #12]
 801a438:	f000 f84a 	bl	801a4d0 <SEQ_BitPosition>
 801a43c:	4603      	mov	r3, r0
 801a43e:	4619      	mov	r1, r3
 801a440:	4a06      	ldr	r2, [pc, #24]	; (801a45c <UTIL_SEQ_RegTask+0x40>)
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a448:	69fb      	ldr	r3, [r7, #28]
 801a44a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a44c:	69bb      	ldr	r3, [r7, #24]
 801a44e:	f383 8810 	msr	PRIMASK, r3
}
 801a452:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a454:	bf00      	nop
}
 801a456:	3720      	adds	r7, #32
 801a458:	46bd      	mov	sp, r7
 801a45a:	bd80      	pop	{r7, pc}
 801a45c:	20000ffc 	.word	0x20000ffc

0801a460 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a460:	b480      	push	{r7}
 801a462:	b087      	sub	sp, #28
 801a464:	af00      	add	r7, sp, #0
 801a466:	6078      	str	r0, [r7, #4]
 801a468:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a46a:	f3ef 8310 	mrs	r3, PRIMASK
 801a46e:	60fb      	str	r3, [r7, #12]
  return(result);
 801a470:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a474:	b672      	cpsid	i
}
 801a476:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a478:	4b0d      	ldr	r3, [pc, #52]	; (801a4b0 <UTIL_SEQ_SetTask+0x50>)
 801a47a:	681a      	ldr	r2, [r3, #0]
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	4313      	orrs	r3, r2
 801a480:	4a0b      	ldr	r2, [pc, #44]	; (801a4b0 <UTIL_SEQ_SetTask+0x50>)
 801a482:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a484:	4a0b      	ldr	r2, [pc, #44]	; (801a4b4 <UTIL_SEQ_SetTask+0x54>)
 801a486:	683b      	ldr	r3, [r7, #0]
 801a488:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	431a      	orrs	r2, r3
 801a490:	4908      	ldr	r1, [pc, #32]	; (801a4b4 <UTIL_SEQ_SetTask+0x54>)
 801a492:	683b      	ldr	r3, [r7, #0]
 801a494:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a498:	697b      	ldr	r3, [r7, #20]
 801a49a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a49c:	693b      	ldr	r3, [r7, #16]
 801a49e:	f383 8810 	msr	PRIMASK, r3
}
 801a4a2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a4a4:	bf00      	nop
}
 801a4a6:	371c      	adds	r7, #28
 801a4a8:	46bd      	mov	sp, r7
 801a4aa:	bc80      	pop	{r7}
 801a4ac:	4770      	bx	lr
 801a4ae:	bf00      	nop
 801a4b0:	20000fec 	.word	0x20000fec
 801a4b4:	2000107c 	.word	0x2000107c

0801a4b8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801a4b8:	b480      	push	{r7}
 801a4ba:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a4bc:	bf00      	nop
}
 801a4be:	46bd      	mov	sp, r7
 801a4c0:	bc80      	pop	{r7}
 801a4c2:	4770      	bx	lr

0801a4c4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801a4c4:	b480      	push	{r7}
 801a4c6:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a4c8:	bf00      	nop
}
 801a4ca:	46bd      	mov	sp, r7
 801a4cc:	bc80      	pop	{r7}
 801a4ce:	4770      	bx	lr

0801a4d0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a4d0:	b480      	push	{r7}
 801a4d2:	b085      	sub	sp, #20
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801a4d8:	2300      	movs	r3, #0
 801a4da:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	0c1b      	lsrs	r3, r3, #16
 801a4e0:	041b      	lsls	r3, r3, #16
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d104      	bne.n	801a4f0 <SEQ_BitPosition+0x20>
 801a4e6:	2310      	movs	r3, #16
 801a4e8:	73fb      	strb	r3, [r7, #15]
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	041b      	lsls	r3, r3, #16
 801a4ee:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d105      	bne.n	801a506 <SEQ_BitPosition+0x36>
 801a4fa:	7bfb      	ldrb	r3, [r7, #15]
 801a4fc:	3308      	adds	r3, #8
 801a4fe:	73fb      	strb	r3, [r7, #15]
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	021b      	lsls	r3, r3, #8
 801a504:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d105      	bne.n	801a51c <SEQ_BitPosition+0x4c>
 801a510:	7bfb      	ldrb	r3, [r7, #15]
 801a512:	3304      	adds	r3, #4
 801a514:	73fb      	strb	r3, [r7, #15]
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	011b      	lsls	r3, r3, #4
 801a51a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	0f1b      	lsrs	r3, r3, #28
 801a520:	4a06      	ldr	r2, [pc, #24]	; (801a53c <SEQ_BitPosition+0x6c>)
 801a522:	5cd2      	ldrb	r2, [r2, r3]
 801a524:	7bfb      	ldrb	r3, [r7, #15]
 801a526:	4413      	add	r3, r2
 801a528:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a52a:	7bfb      	ldrb	r3, [r7, #15]
 801a52c:	f1c3 031f 	rsb	r3, r3, #31
 801a530:	b2db      	uxtb	r3, r3
}
 801a532:	4618      	mov	r0, r3
 801a534:	3714      	adds	r7, #20
 801a536:	46bd      	mov	sp, r7
 801a538:	bc80      	pop	{r7}
 801a53a:	4770      	bx	lr
 801a53c:	0801c00c 	.word	0x0801c00c

0801a540 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a540:	b580      	push	{r7, lr}
 801a542:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a544:	4b04      	ldr	r3, [pc, #16]	; (801a558 <UTIL_TIMER_Init+0x18>)
 801a546:	2200      	movs	r2, #0
 801a548:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a54a:	4b04      	ldr	r3, [pc, #16]	; (801a55c <UTIL_TIMER_Init+0x1c>)
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	4798      	blx	r3
 801a550:	4603      	mov	r3, r0
}
 801a552:	4618      	mov	r0, r3
 801a554:	bd80      	pop	{r7, pc}
 801a556:	bf00      	nop
 801a558:	2000108c 	.word	0x2000108c
 801a55c:	0801baf4 	.word	0x0801baf4

0801a560 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a560:	b580      	push	{r7, lr}
 801a562:	b084      	sub	sp, #16
 801a564:	af00      	add	r7, sp, #0
 801a566:	60f8      	str	r0, [r7, #12]
 801a568:	60b9      	str	r1, [r7, #8]
 801a56a:	603b      	str	r3, [r7, #0]
 801a56c:	4613      	mov	r3, r2
 801a56e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d023      	beq.n	801a5be <UTIL_TIMER_Create+0x5e>
 801a576:	683b      	ldr	r3, [r7, #0]
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d020      	beq.n	801a5be <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	2200      	movs	r2, #0
 801a580:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a582:	4b11      	ldr	r3, [pc, #68]	; (801a5c8 <UTIL_TIMER_Create+0x68>)
 801a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a586:	68b8      	ldr	r0, [r7, #8]
 801a588:	4798      	blx	r3
 801a58a:	4602      	mov	r2, r0
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	2200      	movs	r2, #0
 801a594:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	2200      	movs	r2, #0
 801a59a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	2200      	movs	r2, #0
 801a5a0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	683a      	ldr	r2, [r7, #0]
 801a5a6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	69ba      	ldr	r2, [r7, #24]
 801a5ac:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	79fa      	ldrb	r2, [r7, #7]
 801a5b2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	2200      	movs	r2, #0
 801a5b8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a5ba:	2300      	movs	r3, #0
 801a5bc:	e000      	b.n	801a5c0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a5be:	2301      	movs	r3, #1
  }
}
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	3710      	adds	r7, #16
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	bd80      	pop	{r7, pc}
 801a5c8:	0801baf4 	.word	0x0801baf4

0801a5cc <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b08a      	sub	sp, #40	; 0x28
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d056      	beq.n	801a68e <UTIL_TIMER_Start+0xc2>
 801a5e0:	6878      	ldr	r0, [r7, #4]
 801a5e2:	f000 f9a9 	bl	801a938 <TimerExists>
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	f083 0301 	eor.w	r3, r3, #1
 801a5ec:	b2db      	uxtb	r3, r3
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d04d      	beq.n	801a68e <UTIL_TIMER_Start+0xc2>
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	7a5b      	ldrb	r3, [r3, #9]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d149      	bne.n	801a68e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a5fa:	f3ef 8310 	mrs	r3, PRIMASK
 801a5fe:	613b      	str	r3, [r7, #16]
  return(result);
 801a600:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a602:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a604:	b672      	cpsid	i
}
 801a606:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	685b      	ldr	r3, [r3, #4]
 801a60c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a60e:	4b24      	ldr	r3, [pc, #144]	; (801a6a0 <UTIL_TIMER_Start+0xd4>)
 801a610:	6a1b      	ldr	r3, [r3, #32]
 801a612:	4798      	blx	r3
 801a614:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a616:	6a3a      	ldr	r2, [r7, #32]
 801a618:	69bb      	ldr	r3, [r7, #24]
 801a61a:	429a      	cmp	r2, r3
 801a61c:	d201      	bcs.n	801a622 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a61e:	69bb      	ldr	r3, [r7, #24]
 801a620:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	6a3a      	ldr	r2, [r7, #32]
 801a626:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	2200      	movs	r2, #0
 801a62c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	2201      	movs	r2, #1
 801a632:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	2200      	movs	r2, #0
 801a638:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a63a:	4b1a      	ldr	r3, [pc, #104]	; (801a6a4 <UTIL_TIMER_Start+0xd8>)
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d106      	bne.n	801a650 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a642:	4b17      	ldr	r3, [pc, #92]	; (801a6a0 <UTIL_TIMER_Start+0xd4>)
 801a644:	691b      	ldr	r3, [r3, #16]
 801a646:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a648:	6878      	ldr	r0, [r7, #4]
 801a64a:	f000 f9eb 	bl	801aa24 <TimerInsertNewHeadTimer>
 801a64e:	e017      	b.n	801a680 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a650:	4b13      	ldr	r3, [pc, #76]	; (801a6a0 <UTIL_TIMER_Start+0xd4>)
 801a652:	699b      	ldr	r3, [r3, #24]
 801a654:	4798      	blx	r3
 801a656:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	681a      	ldr	r2, [r3, #0]
 801a65c:	697b      	ldr	r3, [r7, #20]
 801a65e:	441a      	add	r2, r3
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	681a      	ldr	r2, [r3, #0]
 801a668:	4b0e      	ldr	r3, [pc, #56]	; (801a6a4 <UTIL_TIMER_Start+0xd8>)
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	429a      	cmp	r2, r3
 801a670:	d203      	bcs.n	801a67a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a672:	6878      	ldr	r0, [r7, #4]
 801a674:	f000 f9d6 	bl	801aa24 <TimerInsertNewHeadTimer>
 801a678:	e002      	b.n	801a680 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a67a:	6878      	ldr	r0, [r7, #4]
 801a67c:	f000 f9a2 	bl	801a9c4 <TimerInsertTimer>
 801a680:	69fb      	ldr	r3, [r7, #28]
 801a682:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	f383 8810 	msr	PRIMASK, r3
}
 801a68a:	bf00      	nop
  {
 801a68c:	e002      	b.n	801a694 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a68e:	2301      	movs	r3, #1
 801a690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801a694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801a698:	4618      	mov	r0, r3
 801a69a:	3728      	adds	r7, #40	; 0x28
 801a69c:	46bd      	mov	sp, r7
 801a69e:	bd80      	pop	{r7, pc}
 801a6a0:	0801baf4 	.word	0x0801baf4
 801a6a4:	2000108c 	.word	0x2000108c

0801a6a8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	b088      	sub	sp, #32
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d05b      	beq.n	801a772 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a6ba:	f3ef 8310 	mrs	r3, PRIMASK
 801a6be:	60fb      	str	r3, [r7, #12]
  return(result);
 801a6c0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a6c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a6c4:	b672      	cpsid	i
}
 801a6c6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a6c8:	4b2d      	ldr	r3, [pc, #180]	; (801a780 <UTIL_TIMER_Stop+0xd8>)
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a6ce:	4b2c      	ldr	r3, [pc, #176]	; (801a780 <UTIL_TIMER_Stop+0xd8>)
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	2201      	movs	r2, #1
 801a6d8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a6da:	4b29      	ldr	r3, [pc, #164]	; (801a780 <UTIL_TIMER_Stop+0xd8>)
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d041      	beq.n	801a766 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	2200      	movs	r2, #0
 801a6e6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a6e8:	4b25      	ldr	r3, [pc, #148]	; (801a780 <UTIL_TIMER_Stop+0xd8>)
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	687a      	ldr	r2, [r7, #4]
 801a6ee:	429a      	cmp	r2, r3
 801a6f0:	d134      	bne.n	801a75c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a6f2:	4b23      	ldr	r3, [pc, #140]	; (801a780 <UTIL_TIMER_Stop+0xd8>)
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	2200      	movs	r2, #0
 801a6f8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a6fa:	4b21      	ldr	r3, [pc, #132]	; (801a780 <UTIL_TIMER_Stop+0xd8>)
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	695b      	ldr	r3, [r3, #20]
 801a700:	2b00      	cmp	r3, #0
 801a702:	d00a      	beq.n	801a71a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a704:	4b1e      	ldr	r3, [pc, #120]	; (801a780 <UTIL_TIMER_Stop+0xd8>)
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	695b      	ldr	r3, [r3, #20]
 801a70a:	4a1d      	ldr	r2, [pc, #116]	; (801a780 <UTIL_TIMER_Stop+0xd8>)
 801a70c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a70e:	4b1c      	ldr	r3, [pc, #112]	; (801a780 <UTIL_TIMER_Stop+0xd8>)
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	4618      	mov	r0, r3
 801a714:	f000 f92c 	bl	801a970 <TimerSetTimeout>
 801a718:	e023      	b.n	801a762 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a71a:	4b1a      	ldr	r3, [pc, #104]	; (801a784 <UTIL_TIMER_Stop+0xdc>)
 801a71c:	68db      	ldr	r3, [r3, #12]
 801a71e:	4798      	blx	r3
            TimerListHead = NULL;
 801a720:	4b17      	ldr	r3, [pc, #92]	; (801a780 <UTIL_TIMER_Stop+0xd8>)
 801a722:	2200      	movs	r2, #0
 801a724:	601a      	str	r2, [r3, #0]
 801a726:	e01c      	b.n	801a762 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a728:	697a      	ldr	r2, [r7, #20]
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	429a      	cmp	r2, r3
 801a72e:	d110      	bne.n	801a752 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a730:	697b      	ldr	r3, [r7, #20]
 801a732:	695b      	ldr	r3, [r3, #20]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d006      	beq.n	801a746 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a738:	697b      	ldr	r3, [r7, #20]
 801a73a:	695b      	ldr	r3, [r3, #20]
 801a73c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a73e:	69bb      	ldr	r3, [r7, #24]
 801a740:	697a      	ldr	r2, [r7, #20]
 801a742:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a744:	e00d      	b.n	801a762 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a746:	2300      	movs	r3, #0
 801a748:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a74a:	69bb      	ldr	r3, [r7, #24]
 801a74c:	697a      	ldr	r2, [r7, #20]
 801a74e:	615a      	str	r2, [r3, #20]
            break;
 801a750:	e007      	b.n	801a762 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a752:	697b      	ldr	r3, [r7, #20]
 801a754:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a756:	697b      	ldr	r3, [r7, #20]
 801a758:	695b      	ldr	r3, [r3, #20]
 801a75a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a75c:	697b      	ldr	r3, [r7, #20]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d1e2      	bne.n	801a728 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a762:	2300      	movs	r3, #0
 801a764:	77fb      	strb	r3, [r7, #31]
 801a766:	693b      	ldr	r3, [r7, #16]
 801a768:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a76a:	68bb      	ldr	r3, [r7, #8]
 801a76c:	f383 8810 	msr	PRIMASK, r3
}
 801a770:	e001      	b.n	801a776 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a772:	2301      	movs	r3, #1
 801a774:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a776:	7ffb      	ldrb	r3, [r7, #31]
}
 801a778:	4618      	mov	r0, r3
 801a77a:	3720      	adds	r7, #32
 801a77c:	46bd      	mov	sp, r7
 801a77e:	bd80      	pop	{r7, pc}
 801a780:	2000108c 	.word	0x2000108c
 801a784:	0801baf4 	.word	0x0801baf4

0801a788 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a788:	b580      	push	{r7, lr}
 801a78a:	b084      	sub	sp, #16
 801a78c:	af00      	add	r7, sp, #0
 801a78e:	6078      	str	r0, [r7, #4]
 801a790:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a792:	2300      	movs	r3, #0
 801a794:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d102      	bne.n	801a7a2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a79c:	2301      	movs	r3, #1
 801a79e:	73fb      	strb	r3, [r7, #15]
 801a7a0:	e014      	b.n	801a7cc <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a7a2:	4b0d      	ldr	r3, [pc, #52]	; (801a7d8 <UTIL_TIMER_SetPeriod+0x50>)
 801a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7a6:	6838      	ldr	r0, [r7, #0]
 801a7a8:	4798      	blx	r3
 801a7aa:	4602      	mov	r2, r0
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a7b0:	6878      	ldr	r0, [r7, #4]
 801a7b2:	f000 f8c1 	bl	801a938 <TimerExists>
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d007      	beq.n	801a7cc <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a7bc:	6878      	ldr	r0, [r7, #4]
 801a7be:	f7ff ff73 	bl	801a6a8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a7c2:	6878      	ldr	r0, [r7, #4]
 801a7c4:	f7ff ff02 	bl	801a5cc <UTIL_TIMER_Start>
 801a7c8:	4603      	mov	r3, r0
 801a7ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	3710      	adds	r7, #16
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	bd80      	pop	{r7, pc}
 801a7d6:	bf00      	nop
 801a7d8:	0801baf4 	.word	0x0801baf4

0801a7dc <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801a7dc:	b590      	push	{r4, r7, lr}
 801a7de:	b089      	sub	sp, #36	; 0x24
 801a7e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7e2:	f3ef 8310 	mrs	r3, PRIMASK
 801a7e6:	60bb      	str	r3, [r7, #8]
  return(result);
 801a7e8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a7ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7ec:	b672      	cpsid	i
}
 801a7ee:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801a7f0:	4b38      	ldr	r3, [pc, #224]	; (801a8d4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a7f2:	695b      	ldr	r3, [r3, #20]
 801a7f4:	4798      	blx	r3
 801a7f6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801a7f8:	4b36      	ldr	r3, [pc, #216]	; (801a8d4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a7fa:	691b      	ldr	r3, [r3, #16]
 801a7fc:	4798      	blx	r3
 801a7fe:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801a800:	693a      	ldr	r2, [r7, #16]
 801a802:	697b      	ldr	r3, [r7, #20]
 801a804:	1ad3      	subs	r3, r2, r3
 801a806:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801a808:	4b33      	ldr	r3, [pc, #204]	; (801a8d8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d037      	beq.n	801a880 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801a810:	4b31      	ldr	r3, [pc, #196]	; (801a8d8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801a816:	69fb      	ldr	r3, [r7, #28]
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	68fa      	ldr	r2, [r7, #12]
 801a81c:	429a      	cmp	r2, r3
 801a81e:	d206      	bcs.n	801a82e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801a820:	69fb      	ldr	r3, [r7, #28]
 801a822:	681a      	ldr	r2, [r3, #0]
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	1ad2      	subs	r2, r2, r3
 801a828:	69fb      	ldr	r3, [r7, #28]
 801a82a:	601a      	str	r2, [r3, #0]
 801a82c:	e002      	b.n	801a834 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801a82e:	69fb      	ldr	r3, [r7, #28]
 801a830:	2200      	movs	r2, #0
 801a832:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801a834:	69fb      	ldr	r3, [r7, #28]
 801a836:	695b      	ldr	r3, [r3, #20]
 801a838:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801a83a:	69fb      	ldr	r3, [r7, #28]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d1ea      	bne.n	801a816 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a840:	e01e      	b.n	801a880 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801a842:	4b25      	ldr	r3, [pc, #148]	; (801a8d8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801a848:	4b23      	ldr	r3, [pc, #140]	; (801a8d8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	695b      	ldr	r3, [r3, #20]
 801a84e:	4a22      	ldr	r2, [pc, #136]	; (801a8d8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a850:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801a852:	69fb      	ldr	r3, [r7, #28]
 801a854:	2200      	movs	r2, #0
 801a856:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801a858:	69fb      	ldr	r3, [r7, #28]
 801a85a:	2200      	movs	r2, #0
 801a85c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801a85e:	69fb      	ldr	r3, [r7, #28]
 801a860:	68db      	ldr	r3, [r3, #12]
 801a862:	69fa      	ldr	r2, [r7, #28]
 801a864:	6912      	ldr	r2, [r2, #16]
 801a866:	4610      	mov	r0, r2
 801a868:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801a86a:	69fb      	ldr	r3, [r7, #28]
 801a86c:	7adb      	ldrb	r3, [r3, #11]
 801a86e:	2b01      	cmp	r3, #1
 801a870:	d106      	bne.n	801a880 <UTIL_TIMER_IRQ_Handler+0xa4>
 801a872:	69fb      	ldr	r3, [r7, #28]
 801a874:	7a9b      	ldrb	r3, [r3, #10]
 801a876:	2b00      	cmp	r3, #0
 801a878:	d102      	bne.n	801a880 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801a87a:	69f8      	ldr	r0, [r7, #28]
 801a87c:	f7ff fea6 	bl	801a5cc <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a880:	4b15      	ldr	r3, [pc, #84]	; (801a8d8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	2b00      	cmp	r3, #0
 801a886:	d00d      	beq.n	801a8a4 <UTIL_TIMER_IRQ_Handler+0xc8>
 801a888:	4b13      	ldr	r3, [pc, #76]	; (801a8d8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d0d7      	beq.n	801a842 <UTIL_TIMER_IRQ_Handler+0x66>
 801a892:	4b11      	ldr	r3, [pc, #68]	; (801a8d8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	681c      	ldr	r4, [r3, #0]
 801a898:	4b0e      	ldr	r3, [pc, #56]	; (801a8d4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a89a:	699b      	ldr	r3, [r3, #24]
 801a89c:	4798      	blx	r3
 801a89e:	4603      	mov	r3, r0
 801a8a0:	429c      	cmp	r4, r3
 801a8a2:	d3ce      	bcc.n	801a842 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801a8a4:	4b0c      	ldr	r3, [pc, #48]	; (801a8d8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d009      	beq.n	801a8c0 <UTIL_TIMER_IRQ_Handler+0xe4>
 801a8ac:	4b0a      	ldr	r3, [pc, #40]	; (801a8d8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	7a1b      	ldrb	r3, [r3, #8]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d104      	bne.n	801a8c0 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801a8b6:	4b08      	ldr	r3, [pc, #32]	; (801a8d8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	4618      	mov	r0, r3
 801a8bc:	f000 f858 	bl	801a970 <TimerSetTimeout>
 801a8c0:	69bb      	ldr	r3, [r7, #24]
 801a8c2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	f383 8810 	msr	PRIMASK, r3
}
 801a8ca:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801a8cc:	bf00      	nop
 801a8ce:	3724      	adds	r7, #36	; 0x24
 801a8d0:	46bd      	mov	sp, r7
 801a8d2:	bd90      	pop	{r4, r7, pc}
 801a8d4:	0801baf4 	.word	0x0801baf4
 801a8d8:	2000108c 	.word	0x2000108c

0801a8dc <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	b082      	sub	sp, #8
 801a8e0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a8e2:	4b06      	ldr	r3, [pc, #24]	; (801a8fc <UTIL_TIMER_GetCurrentTime+0x20>)
 801a8e4:	69db      	ldr	r3, [r3, #28]
 801a8e6:	4798      	blx	r3
 801a8e8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a8ea:	4b04      	ldr	r3, [pc, #16]	; (801a8fc <UTIL_TIMER_GetCurrentTime+0x20>)
 801a8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a8ee:	6878      	ldr	r0, [r7, #4]
 801a8f0:	4798      	blx	r3
 801a8f2:	4603      	mov	r3, r0
}
 801a8f4:	4618      	mov	r0, r3
 801a8f6:	3708      	adds	r7, #8
 801a8f8:	46bd      	mov	sp, r7
 801a8fa:	bd80      	pop	{r7, pc}
 801a8fc:	0801baf4 	.word	0x0801baf4

0801a900 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a900:	b580      	push	{r7, lr}
 801a902:	b084      	sub	sp, #16
 801a904:	af00      	add	r7, sp, #0
 801a906:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a908:	4b0a      	ldr	r3, [pc, #40]	; (801a934 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a90a:	69db      	ldr	r3, [r3, #28]
 801a90c:	4798      	blx	r3
 801a90e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a910:	4b08      	ldr	r3, [pc, #32]	; (801a934 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a914:	6878      	ldr	r0, [r7, #4]
 801a916:	4798      	blx	r3
 801a918:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a91a:	4b06      	ldr	r3, [pc, #24]	; (801a934 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a91e:	68f9      	ldr	r1, [r7, #12]
 801a920:	68ba      	ldr	r2, [r7, #8]
 801a922:	1a8a      	subs	r2, r1, r2
 801a924:	4610      	mov	r0, r2
 801a926:	4798      	blx	r3
 801a928:	4603      	mov	r3, r0
}
 801a92a:	4618      	mov	r0, r3
 801a92c:	3710      	adds	r7, #16
 801a92e:	46bd      	mov	sp, r7
 801a930:	bd80      	pop	{r7, pc}
 801a932:	bf00      	nop
 801a934:	0801baf4 	.word	0x0801baf4

0801a938 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a938:	b480      	push	{r7}
 801a93a:	b085      	sub	sp, #20
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a940:	4b0a      	ldr	r3, [pc, #40]	; (801a96c <TimerExists+0x34>)
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a946:	e008      	b.n	801a95a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a948:	68fa      	ldr	r2, [r7, #12]
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	429a      	cmp	r2, r3
 801a94e:	d101      	bne.n	801a954 <TimerExists+0x1c>
    {
      return true;
 801a950:	2301      	movs	r3, #1
 801a952:	e006      	b.n	801a962 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	695b      	ldr	r3, [r3, #20]
 801a958:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801a95a:	68fb      	ldr	r3, [r7, #12]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d1f3      	bne.n	801a948 <TimerExists+0x10>
  }
  return false;
 801a960:	2300      	movs	r3, #0
}
 801a962:	4618      	mov	r0, r3
 801a964:	3714      	adds	r7, #20
 801a966:	46bd      	mov	sp, r7
 801a968:	bc80      	pop	{r7}
 801a96a:	4770      	bx	lr
 801a96c:	2000108c 	.word	0x2000108c

0801a970 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801a970:	b590      	push	{r4, r7, lr}
 801a972:	b085      	sub	sp, #20
 801a974:	af00      	add	r7, sp, #0
 801a976:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801a978:	4b11      	ldr	r3, [pc, #68]	; (801a9c0 <TimerSetTimeout+0x50>)
 801a97a:	6a1b      	ldr	r3, [r3, #32]
 801a97c:	4798      	blx	r3
 801a97e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	2201      	movs	r2, #1
 801a984:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	681c      	ldr	r4, [r3, #0]
 801a98a:	4b0d      	ldr	r3, [pc, #52]	; (801a9c0 <TimerSetTimeout+0x50>)
 801a98c:	699b      	ldr	r3, [r3, #24]
 801a98e:	4798      	blx	r3
 801a990:	4602      	mov	r2, r0
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	4413      	add	r3, r2
 801a996:	429c      	cmp	r4, r3
 801a998:	d207      	bcs.n	801a9aa <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801a99a:	4b09      	ldr	r3, [pc, #36]	; (801a9c0 <TimerSetTimeout+0x50>)
 801a99c:	699b      	ldr	r3, [r3, #24]
 801a99e:	4798      	blx	r3
 801a9a0:	4602      	mov	r2, r0
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	441a      	add	r2, r3
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801a9aa:	4b05      	ldr	r3, [pc, #20]	; (801a9c0 <TimerSetTimeout+0x50>)
 801a9ac:	689b      	ldr	r3, [r3, #8]
 801a9ae:	687a      	ldr	r2, [r7, #4]
 801a9b0:	6812      	ldr	r2, [r2, #0]
 801a9b2:	4610      	mov	r0, r2
 801a9b4:	4798      	blx	r3
}
 801a9b6:	bf00      	nop
 801a9b8:	3714      	adds	r7, #20
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	bd90      	pop	{r4, r7, pc}
 801a9be:	bf00      	nop
 801a9c0:	0801baf4 	.word	0x0801baf4

0801a9c4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801a9c4:	b480      	push	{r7}
 801a9c6:	b085      	sub	sp, #20
 801a9c8:	af00      	add	r7, sp, #0
 801a9ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a9cc:	4b14      	ldr	r3, [pc, #80]	; (801aa20 <TimerInsertTimer+0x5c>)
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801a9d2:	4b13      	ldr	r3, [pc, #76]	; (801aa20 <TimerInsertTimer+0x5c>)
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	695b      	ldr	r3, [r3, #20]
 801a9d8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801a9da:	e012      	b.n	801aa02 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	681a      	ldr	r2, [r3, #0]
 801a9e0:	68bb      	ldr	r3, [r7, #8]
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	429a      	cmp	r2, r3
 801a9e6:	d905      	bls.n	801a9f4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801a9ec:	68bb      	ldr	r3, [r7, #8]
 801a9ee:	695b      	ldr	r3, [r3, #20]
 801a9f0:	60bb      	str	r3, [r7, #8]
 801a9f2:	e006      	b.n	801aa02 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	687a      	ldr	r2, [r7, #4]
 801a9f8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	68ba      	ldr	r2, [r7, #8]
 801a9fe:	615a      	str	r2, [r3, #20]
        return;
 801aa00:	e009      	b.n	801aa16 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	695b      	ldr	r3, [r3, #20]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d1e8      	bne.n	801a9dc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	687a      	ldr	r2, [r7, #4]
 801aa0e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	2200      	movs	r2, #0
 801aa14:	615a      	str	r2, [r3, #20]
}
 801aa16:	3714      	adds	r7, #20
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	bc80      	pop	{r7}
 801aa1c:	4770      	bx	lr
 801aa1e:	bf00      	nop
 801aa20:	2000108c 	.word	0x2000108c

0801aa24 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b084      	sub	sp, #16
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801aa2c:	4b0b      	ldr	r3, [pc, #44]	; (801aa5c <TimerInsertNewHeadTimer+0x38>)
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d002      	beq.n	801aa3e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	2200      	movs	r2, #0
 801aa3c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	68fa      	ldr	r2, [r7, #12]
 801aa42:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801aa44:	4a05      	ldr	r2, [pc, #20]	; (801aa5c <TimerInsertNewHeadTimer+0x38>)
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801aa4a:	4b04      	ldr	r3, [pc, #16]	; (801aa5c <TimerInsertNewHeadTimer+0x38>)
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	4618      	mov	r0, r3
 801aa50:	f7ff ff8e 	bl	801a970 <TimerSetTimeout>
}
 801aa54:	bf00      	nop
 801aa56:	3710      	adds	r7, #16
 801aa58:	46bd      	mov	sp, r7
 801aa5a:	bd80      	pop	{r7, pc}
 801aa5c:	2000108c 	.word	0x2000108c

0801aa60 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801aa60:	b580      	push	{r7, lr}
 801aa62:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801aa64:	2218      	movs	r2, #24
 801aa66:	2100      	movs	r1, #0
 801aa68:	4807      	ldr	r0, [pc, #28]	; (801aa88 <UTIL_ADV_TRACE_Init+0x28>)
 801aa6a:	f7ff f80e 	bl	8019a8a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801aa6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801aa72:	2100      	movs	r1, #0
 801aa74:	4805      	ldr	r0, [pc, #20]	; (801aa8c <UTIL_ADV_TRACE_Init+0x2c>)
 801aa76:	f7ff f808 	bl	8019a8a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801aa7a:	4b05      	ldr	r3, [pc, #20]	; (801aa90 <UTIL_ADV_TRACE_Init+0x30>)
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	4805      	ldr	r0, [pc, #20]	; (801aa94 <UTIL_ADV_TRACE_Init+0x34>)
 801aa80:	4798      	blx	r3
 801aa82:	4603      	mov	r3, r0
}
 801aa84:	4618      	mov	r0, r3
 801aa86:	bd80      	pop	{r7, pc}
 801aa88:	20001090 	.word	0x20001090
 801aa8c:	200010a8 	.word	0x200010a8
 801aa90:	0801bb34 	.word	0x0801bb34
 801aa94:	0801ad05 	.word	0x0801ad05

0801aa98 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801aa98:	b480      	push	{r7}
 801aa9a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801aa9c:	4b06      	ldr	r3, [pc, #24]	; (801aab8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801aa9e:	8a5a      	ldrh	r2, [r3, #18]
 801aaa0:	4b05      	ldr	r3, [pc, #20]	; (801aab8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801aaa2:	8a1b      	ldrh	r3, [r3, #16]
 801aaa4:	429a      	cmp	r2, r3
 801aaa6:	d101      	bne.n	801aaac <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801aaa8:	2301      	movs	r3, #1
 801aaaa:	e000      	b.n	801aaae <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801aaac:	2300      	movs	r3, #0
}
 801aaae:	4618      	mov	r0, r3
 801aab0:	46bd      	mov	sp, r7
 801aab2:	bc80      	pop	{r7}
 801aab4:	4770      	bx	lr
 801aab6:	bf00      	nop
 801aab8:	20001090 	.word	0x20001090

0801aabc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801aabc:	b408      	push	{r3}
 801aabe:	b580      	push	{r7, lr}
 801aac0:	b08d      	sub	sp, #52	; 0x34
 801aac2:	af00      	add	r7, sp, #0
 801aac4:	60f8      	str	r0, [r7, #12]
 801aac6:	60b9      	str	r1, [r7, #8]
 801aac8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801aaca:	2300      	movs	r3, #0
 801aacc:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801aace:	2300      	movs	r3, #0
 801aad0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801aad2:	4b38      	ldr	r3, [pc, #224]	; (801abb4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801aad4:	7a1b      	ldrb	r3, [r3, #8]
 801aad6:	461a      	mov	r2, r3
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	4293      	cmp	r3, r2
 801aadc:	d902      	bls.n	801aae4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801aade:	f06f 0304 	mvn.w	r3, #4
 801aae2:	e05f      	b.n	801aba4 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801aae4:	4b33      	ldr	r3, [pc, #204]	; (801abb4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801aae6:	68da      	ldr	r2, [r3, #12]
 801aae8:	68bb      	ldr	r3, [r7, #8]
 801aaea:	4013      	ands	r3, r2
 801aaec:	68ba      	ldr	r2, [r7, #8]
 801aaee:	429a      	cmp	r2, r3
 801aaf0:	d002      	beq.n	801aaf8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801aaf2:	f06f 0305 	mvn.w	r3, #5
 801aaf6:	e055      	b.n	801aba4 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801aaf8:	4b2e      	ldr	r3, [pc, #184]	; (801abb4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801aafa:	685b      	ldr	r3, [r3, #4]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d00a      	beq.n	801ab16 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d007      	beq.n	801ab16 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801ab06:	4b2b      	ldr	r3, [pc, #172]	; (801abb4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ab08:	685b      	ldr	r3, [r3, #4]
 801ab0a:	f107 0116 	add.w	r1, r7, #22
 801ab0e:	f107 0218 	add.w	r2, r7, #24
 801ab12:	4610      	mov	r0, r2
 801ab14:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801ab16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ab1a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ab20:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ab24:	4824      	ldr	r0, [pc, #144]	; (801abb8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ab26:	f7ff fa3f 	bl	8019fa8 <tiny_vsnprintf_like>
 801ab2a:	4603      	mov	r3, r0
 801ab2c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801ab2e:	f000 f9f3 	bl	801af18 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801ab32:	8afa      	ldrh	r2, [r7, #22]
 801ab34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ab36:	4413      	add	r3, r2
 801ab38:	b29b      	uxth	r3, r3
 801ab3a:	f107 0214 	add.w	r2, r7, #20
 801ab3e:	4611      	mov	r1, r2
 801ab40:	4618      	mov	r0, r3
 801ab42:	f000 f96b 	bl	801ae1c <TRACE_AllocateBufer>
 801ab46:	4603      	mov	r3, r0
 801ab48:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab4c:	d026      	beq.n	801ab9c <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801ab4e:	2300      	movs	r3, #0
 801ab50:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ab52:	e00f      	b.n	801ab74 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801ab54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ab56:	8aba      	ldrh	r2, [r7, #20]
 801ab58:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801ab5c:	440b      	add	r3, r1
 801ab5e:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801ab62:	4b16      	ldr	r3, [pc, #88]	; (801abbc <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801ab64:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801ab66:	8abb      	ldrh	r3, [r7, #20]
 801ab68:	3301      	adds	r3, #1
 801ab6a:	b29b      	uxth	r3, r3
 801ab6c:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801ab6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ab70:	3301      	adds	r3, #1
 801ab72:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ab74:	8afb      	ldrh	r3, [r7, #22]
 801ab76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ab78:	429a      	cmp	r2, r3
 801ab7a:	d3eb      	bcc.n	801ab54 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ab7c:	8abb      	ldrh	r3, [r7, #20]
 801ab7e:	461a      	mov	r2, r3
 801ab80:	4b0e      	ldr	r3, [pc, #56]	; (801abbc <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801ab82:	18d0      	adds	r0, r2, r3
 801ab84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ab88:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ab8c:	f7ff fa0c 	bl	8019fa8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801ab90:	f000 f9e0 	bl	801af54 <TRACE_UnLock>

    return TRACE_Send();
 801ab94:	f000 f832 	bl	801abfc <TRACE_Send>
 801ab98:	4603      	mov	r3, r0
 801ab9a:	e003      	b.n	801aba4 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801ab9c:	f000 f9da 	bl	801af54 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801aba0:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801aba4:	4618      	mov	r0, r3
 801aba6:	3734      	adds	r7, #52	; 0x34
 801aba8:	46bd      	mov	sp, r7
 801abaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801abae:	b001      	add	sp, #4
 801abb0:	4770      	bx	lr
 801abb2:	bf00      	nop
 801abb4:	20001090 	.word	0x20001090
 801abb8:	200014a8 	.word	0x200014a8
 801abbc:	200010a8 	.word	0x200010a8

0801abc0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801abc0:	b480      	push	{r7}
 801abc2:	b083      	sub	sp, #12
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801abc8:	4a03      	ldr	r2, [pc, #12]	; (801abd8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	6053      	str	r3, [r2, #4]
}
 801abce:	bf00      	nop
 801abd0:	370c      	adds	r7, #12
 801abd2:	46bd      	mov	sp, r7
 801abd4:	bc80      	pop	{r7}
 801abd6:	4770      	bx	lr
 801abd8:	20001090 	.word	0x20001090

0801abdc <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801abdc:	b480      	push	{r7}
 801abde:	b083      	sub	sp, #12
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	4603      	mov	r3, r0
 801abe4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801abe6:	4a04      	ldr	r2, [pc, #16]	; (801abf8 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801abe8:	79fb      	ldrb	r3, [r7, #7]
 801abea:	7213      	strb	r3, [r2, #8]
}
 801abec:	bf00      	nop
 801abee:	370c      	adds	r7, #12
 801abf0:	46bd      	mov	sp, r7
 801abf2:	bc80      	pop	{r7}
 801abf4:	4770      	bx	lr
 801abf6:	bf00      	nop
 801abf8:	20001090 	.word	0x20001090

0801abfc <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b088      	sub	sp, #32
 801ac00:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801ac02:	2300      	movs	r3, #0
 801ac04:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801ac06:	2300      	movs	r3, #0
 801ac08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac0a:	f3ef 8310 	mrs	r3, PRIMASK
 801ac0e:	613b      	str	r3, [r7, #16]
  return(result);
 801ac10:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ac12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ac14:	b672      	cpsid	i
}
 801ac16:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801ac18:	f000 f9ba 	bl	801af90 <TRACE_IsLocked>
 801ac1c:	4603      	mov	r3, r0
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d15d      	bne.n	801acde <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801ac22:	f000 f979 	bl	801af18 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801ac26:	4b34      	ldr	r3, [pc, #208]	; (801acf8 <TRACE_Send+0xfc>)
 801ac28:	8a1a      	ldrh	r2, [r3, #16]
 801ac2a:	4b33      	ldr	r3, [pc, #204]	; (801acf8 <TRACE_Send+0xfc>)
 801ac2c:	8a5b      	ldrh	r3, [r3, #18]
 801ac2e:	429a      	cmp	r2, r3
 801ac30:	d04d      	beq.n	801acce <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ac32:	4b31      	ldr	r3, [pc, #196]	; (801acf8 <TRACE_Send+0xfc>)
 801ac34:	789b      	ldrb	r3, [r3, #2]
 801ac36:	2b01      	cmp	r3, #1
 801ac38:	d117      	bne.n	801ac6a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801ac3a:	4b2f      	ldr	r3, [pc, #188]	; (801acf8 <TRACE_Send+0xfc>)
 801ac3c:	881a      	ldrh	r2, [r3, #0]
 801ac3e:	4b2e      	ldr	r3, [pc, #184]	; (801acf8 <TRACE_Send+0xfc>)
 801ac40:	8a1b      	ldrh	r3, [r3, #16]
 801ac42:	1ad3      	subs	r3, r2, r3
 801ac44:	b29a      	uxth	r2, r3
 801ac46:	4b2c      	ldr	r3, [pc, #176]	; (801acf8 <TRACE_Send+0xfc>)
 801ac48:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ac4a:	4b2b      	ldr	r3, [pc, #172]	; (801acf8 <TRACE_Send+0xfc>)
 801ac4c:	2202      	movs	r2, #2
 801ac4e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ac50:	4b29      	ldr	r3, [pc, #164]	; (801acf8 <TRACE_Send+0xfc>)
 801ac52:	2200      	movs	r2, #0
 801ac54:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ac56:	4b28      	ldr	r3, [pc, #160]	; (801acf8 <TRACE_Send+0xfc>)
 801ac58:	8a9b      	ldrh	r3, [r3, #20]
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d105      	bne.n	801ac6a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ac5e:	4b26      	ldr	r3, [pc, #152]	; (801acf8 <TRACE_Send+0xfc>)
 801ac60:	2200      	movs	r2, #0
 801ac62:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ac64:	4b24      	ldr	r3, [pc, #144]	; (801acf8 <TRACE_Send+0xfc>)
 801ac66:	2200      	movs	r2, #0
 801ac68:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ac6a:	4b23      	ldr	r3, [pc, #140]	; (801acf8 <TRACE_Send+0xfc>)
 801ac6c:	789b      	ldrb	r3, [r3, #2]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d115      	bne.n	801ac9e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ac72:	4b21      	ldr	r3, [pc, #132]	; (801acf8 <TRACE_Send+0xfc>)
 801ac74:	8a5a      	ldrh	r2, [r3, #18]
 801ac76:	4b20      	ldr	r3, [pc, #128]	; (801acf8 <TRACE_Send+0xfc>)
 801ac78:	8a1b      	ldrh	r3, [r3, #16]
 801ac7a:	429a      	cmp	r2, r3
 801ac7c:	d908      	bls.n	801ac90 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ac7e:	4b1e      	ldr	r3, [pc, #120]	; (801acf8 <TRACE_Send+0xfc>)
 801ac80:	8a5a      	ldrh	r2, [r3, #18]
 801ac82:	4b1d      	ldr	r3, [pc, #116]	; (801acf8 <TRACE_Send+0xfc>)
 801ac84:	8a1b      	ldrh	r3, [r3, #16]
 801ac86:	1ad3      	subs	r3, r2, r3
 801ac88:	b29a      	uxth	r2, r3
 801ac8a:	4b1b      	ldr	r3, [pc, #108]	; (801acf8 <TRACE_Send+0xfc>)
 801ac8c:	829a      	strh	r2, [r3, #20]
 801ac8e:	e006      	b.n	801ac9e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ac90:	4b19      	ldr	r3, [pc, #100]	; (801acf8 <TRACE_Send+0xfc>)
 801ac92:	8a1b      	ldrh	r3, [r3, #16]
 801ac94:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ac98:	b29a      	uxth	r2, r3
 801ac9a:	4b17      	ldr	r3, [pc, #92]	; (801acf8 <TRACE_Send+0xfc>)
 801ac9c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ac9e:	4b16      	ldr	r3, [pc, #88]	; (801acf8 <TRACE_Send+0xfc>)
 801aca0:	8a1b      	ldrh	r3, [r3, #16]
 801aca2:	461a      	mov	r2, r3
 801aca4:	4b15      	ldr	r3, [pc, #84]	; (801acfc <TRACE_Send+0x100>)
 801aca6:	4413      	add	r3, r2
 801aca8:	61bb      	str	r3, [r7, #24]
 801acaa:	697b      	ldr	r3, [r7, #20]
 801acac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	f383 8810 	msr	PRIMASK, r3
}
 801acb4:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801acb6:	f7e7 f95f 	bl	8001f78 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801acba:	4b11      	ldr	r3, [pc, #68]	; (801ad00 <TRACE_Send+0x104>)
 801acbc:	68db      	ldr	r3, [r3, #12]
 801acbe:	4a0e      	ldr	r2, [pc, #56]	; (801acf8 <TRACE_Send+0xfc>)
 801acc0:	8a92      	ldrh	r2, [r2, #20]
 801acc2:	4611      	mov	r1, r2
 801acc4:	69b8      	ldr	r0, [r7, #24]
 801acc6:	4798      	blx	r3
 801acc8:	4603      	mov	r3, r0
 801acca:	77fb      	strb	r3, [r7, #31]
 801accc:	e00d      	b.n	801acea <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801acce:	f000 f941 	bl	801af54 <TRACE_UnLock>
 801acd2:	697b      	ldr	r3, [r7, #20]
 801acd4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acd6:	68bb      	ldr	r3, [r7, #8]
 801acd8:	f383 8810 	msr	PRIMASK, r3
}
 801acdc:	e005      	b.n	801acea <TRACE_Send+0xee>
 801acde:	697b      	ldr	r3, [r7, #20]
 801ace0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	f383 8810 	msr	PRIMASK, r3
}
 801ace8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801acea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801acee:	4618      	mov	r0, r3
 801acf0:	3720      	adds	r7, #32
 801acf2:	46bd      	mov	sp, r7
 801acf4:	bd80      	pop	{r7, pc}
 801acf6:	bf00      	nop
 801acf8:	20001090 	.word	0x20001090
 801acfc:	200010a8 	.word	0x200010a8
 801ad00:	0801bb34 	.word	0x0801bb34

0801ad04 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ad04:	b580      	push	{r7, lr}
 801ad06:	b088      	sub	sp, #32
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ad0c:	2300      	movs	r3, #0
 801ad0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad10:	f3ef 8310 	mrs	r3, PRIMASK
 801ad14:	617b      	str	r3, [r7, #20]
  return(result);
 801ad16:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ad18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ad1a:	b672      	cpsid	i
}
 801ad1c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801ad1e:	4b3c      	ldr	r3, [pc, #240]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad20:	789b      	ldrb	r3, [r3, #2]
 801ad22:	2b02      	cmp	r3, #2
 801ad24:	d106      	bne.n	801ad34 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ad26:	4b3a      	ldr	r3, [pc, #232]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad28:	2200      	movs	r2, #0
 801ad2a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ad2c:	4b38      	ldr	r3, [pc, #224]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad2e:	2200      	movs	r2, #0
 801ad30:	821a      	strh	r2, [r3, #16]
 801ad32:	e00a      	b.n	801ad4a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ad34:	4b36      	ldr	r3, [pc, #216]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad36:	8a1a      	ldrh	r2, [r3, #16]
 801ad38:	4b35      	ldr	r3, [pc, #212]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad3a:	8a9b      	ldrh	r3, [r3, #20]
 801ad3c:	4413      	add	r3, r2
 801ad3e:	b29b      	uxth	r3, r3
 801ad40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ad44:	b29a      	uxth	r2, r3
 801ad46:	4b32      	ldr	r3, [pc, #200]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad48:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ad4a:	4b31      	ldr	r3, [pc, #196]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad4c:	8a1a      	ldrh	r2, [r3, #16]
 801ad4e:	4b30      	ldr	r3, [pc, #192]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad50:	8a5b      	ldrh	r3, [r3, #18]
 801ad52:	429a      	cmp	r2, r3
 801ad54:	d04d      	beq.n	801adf2 <TRACE_TxCpltCallback+0xee>
 801ad56:	4b2e      	ldr	r3, [pc, #184]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad58:	8adb      	ldrh	r3, [r3, #22]
 801ad5a:	2b01      	cmp	r3, #1
 801ad5c:	d149      	bne.n	801adf2 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ad5e:	4b2c      	ldr	r3, [pc, #176]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad60:	789b      	ldrb	r3, [r3, #2]
 801ad62:	2b01      	cmp	r3, #1
 801ad64:	d117      	bne.n	801ad96 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ad66:	4b2a      	ldr	r3, [pc, #168]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad68:	881a      	ldrh	r2, [r3, #0]
 801ad6a:	4b29      	ldr	r3, [pc, #164]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad6c:	8a1b      	ldrh	r3, [r3, #16]
 801ad6e:	1ad3      	subs	r3, r2, r3
 801ad70:	b29a      	uxth	r2, r3
 801ad72:	4b27      	ldr	r3, [pc, #156]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad74:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ad76:	4b26      	ldr	r3, [pc, #152]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad78:	2202      	movs	r2, #2
 801ad7a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ad7c:	4b24      	ldr	r3, [pc, #144]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad7e:	2200      	movs	r2, #0
 801ad80:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ad82:	4b23      	ldr	r3, [pc, #140]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad84:	8a9b      	ldrh	r3, [r3, #20]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d105      	bne.n	801ad96 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ad8a:	4b21      	ldr	r3, [pc, #132]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad8c:	2200      	movs	r2, #0
 801ad8e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ad90:	4b1f      	ldr	r3, [pc, #124]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad92:	2200      	movs	r2, #0
 801ad94:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ad96:	4b1e      	ldr	r3, [pc, #120]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ad98:	789b      	ldrb	r3, [r3, #2]
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d115      	bne.n	801adca <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ad9e:	4b1c      	ldr	r3, [pc, #112]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ada0:	8a5a      	ldrh	r2, [r3, #18]
 801ada2:	4b1b      	ldr	r3, [pc, #108]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ada4:	8a1b      	ldrh	r3, [r3, #16]
 801ada6:	429a      	cmp	r2, r3
 801ada8:	d908      	bls.n	801adbc <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801adaa:	4b19      	ldr	r3, [pc, #100]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801adac:	8a5a      	ldrh	r2, [r3, #18]
 801adae:	4b18      	ldr	r3, [pc, #96]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801adb0:	8a1b      	ldrh	r3, [r3, #16]
 801adb2:	1ad3      	subs	r3, r2, r3
 801adb4:	b29a      	uxth	r2, r3
 801adb6:	4b16      	ldr	r3, [pc, #88]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801adb8:	829a      	strh	r2, [r3, #20]
 801adba:	e006      	b.n	801adca <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801adbc:	4b14      	ldr	r3, [pc, #80]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801adbe:	8a1b      	ldrh	r3, [r3, #16]
 801adc0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801adc4:	b29a      	uxth	r2, r3
 801adc6:	4b12      	ldr	r3, [pc, #72]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801adc8:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801adca:	4b11      	ldr	r3, [pc, #68]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801adcc:	8a1b      	ldrh	r3, [r3, #16]
 801adce:	461a      	mov	r2, r3
 801add0:	4b10      	ldr	r3, [pc, #64]	; (801ae14 <TRACE_TxCpltCallback+0x110>)
 801add2:	4413      	add	r3, r2
 801add4:	61fb      	str	r3, [r7, #28]
 801add6:	69bb      	ldr	r3, [r7, #24]
 801add8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adda:	693b      	ldr	r3, [r7, #16]
 801addc:	f383 8810 	msr	PRIMASK, r3
}
 801ade0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ade2:	4b0d      	ldr	r3, [pc, #52]	; (801ae18 <TRACE_TxCpltCallback+0x114>)
 801ade4:	68db      	ldr	r3, [r3, #12]
 801ade6:	4a0a      	ldr	r2, [pc, #40]	; (801ae10 <TRACE_TxCpltCallback+0x10c>)
 801ade8:	8a92      	ldrh	r2, [r2, #20]
 801adea:	4611      	mov	r1, r2
 801adec:	69f8      	ldr	r0, [r7, #28]
 801adee:	4798      	blx	r3
 801adf0:	e00a      	b.n	801ae08 <TRACE_TxCpltCallback+0x104>
 801adf2:	69bb      	ldr	r3, [r7, #24]
 801adf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	f383 8810 	msr	PRIMASK, r3
}
 801adfc:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801adfe:	f7e7 f8c3 	bl	8001f88 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801ae02:	f000 f8a7 	bl	801af54 <TRACE_UnLock>
  }
}
 801ae06:	bf00      	nop
 801ae08:	bf00      	nop
 801ae0a:	3720      	adds	r7, #32
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	bd80      	pop	{r7, pc}
 801ae10:	20001090 	.word	0x20001090
 801ae14:	200010a8 	.word	0x200010a8
 801ae18:	0801bb34 	.word	0x0801bb34

0801ae1c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801ae1c:	b480      	push	{r7}
 801ae1e:	b087      	sub	sp, #28
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	4603      	mov	r3, r0
 801ae24:	6039      	str	r1, [r7, #0]
 801ae26:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801ae28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ae2c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae2e:	f3ef 8310 	mrs	r3, PRIMASK
 801ae32:	60fb      	str	r3, [r7, #12]
  return(result);
 801ae34:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ae36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae38:	b672      	cpsid	i
}
 801ae3a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ae3c:	4b35      	ldr	r3, [pc, #212]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801ae3e:	8a5a      	ldrh	r2, [r3, #18]
 801ae40:	4b34      	ldr	r3, [pc, #208]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801ae42:	8a1b      	ldrh	r3, [r3, #16]
 801ae44:	429a      	cmp	r2, r3
 801ae46:	d11b      	bne.n	801ae80 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ae48:	4b32      	ldr	r3, [pc, #200]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801ae4a:	8a5b      	ldrh	r3, [r3, #18]
 801ae4c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ae50:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801ae52:	88fa      	ldrh	r2, [r7, #6]
 801ae54:	8afb      	ldrh	r3, [r7, #22]
 801ae56:	429a      	cmp	r2, r3
 801ae58:	d33a      	bcc.n	801aed0 <TRACE_AllocateBufer+0xb4>
 801ae5a:	4b2e      	ldr	r3, [pc, #184]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801ae5c:	8a1b      	ldrh	r3, [r3, #16]
 801ae5e:	88fa      	ldrh	r2, [r7, #6]
 801ae60:	429a      	cmp	r2, r3
 801ae62:	d235      	bcs.n	801aed0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ae64:	4b2b      	ldr	r3, [pc, #172]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801ae66:	2201      	movs	r2, #1
 801ae68:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ae6a:	4b2a      	ldr	r3, [pc, #168]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801ae6c:	8a5a      	ldrh	r2, [r3, #18]
 801ae6e:	4b29      	ldr	r3, [pc, #164]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801ae70:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ae72:	4b28      	ldr	r3, [pc, #160]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801ae74:	8a1b      	ldrh	r3, [r3, #16]
 801ae76:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ae78:	4b26      	ldr	r3, [pc, #152]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801ae7a:	2200      	movs	r2, #0
 801ae7c:	825a      	strh	r2, [r3, #18]
 801ae7e:	e027      	b.n	801aed0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ae80:	4b24      	ldr	r3, [pc, #144]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801ae82:	8a5a      	ldrh	r2, [r3, #18]
 801ae84:	4b23      	ldr	r3, [pc, #140]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801ae86:	8a1b      	ldrh	r3, [r3, #16]
 801ae88:	429a      	cmp	r2, r3
 801ae8a:	d91b      	bls.n	801aec4 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ae8c:	4b21      	ldr	r3, [pc, #132]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801ae8e:	8a5b      	ldrh	r3, [r3, #18]
 801ae90:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ae94:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801ae96:	88fa      	ldrh	r2, [r7, #6]
 801ae98:	8afb      	ldrh	r3, [r7, #22]
 801ae9a:	429a      	cmp	r2, r3
 801ae9c:	d318      	bcc.n	801aed0 <TRACE_AllocateBufer+0xb4>
 801ae9e:	4b1d      	ldr	r3, [pc, #116]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801aea0:	8a1b      	ldrh	r3, [r3, #16]
 801aea2:	88fa      	ldrh	r2, [r7, #6]
 801aea4:	429a      	cmp	r2, r3
 801aea6:	d213      	bcs.n	801aed0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801aea8:	4b1a      	ldr	r3, [pc, #104]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801aeaa:	2201      	movs	r2, #1
 801aeac:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801aeae:	4b19      	ldr	r3, [pc, #100]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801aeb0:	8a5a      	ldrh	r2, [r3, #18]
 801aeb2:	4b18      	ldr	r3, [pc, #96]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801aeb4:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801aeb6:	4b17      	ldr	r3, [pc, #92]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801aeb8:	8a1b      	ldrh	r3, [r3, #16]
 801aeba:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801aebc:	4b15      	ldr	r3, [pc, #84]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801aebe:	2200      	movs	r2, #0
 801aec0:	825a      	strh	r2, [r3, #18]
 801aec2:	e005      	b.n	801aed0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801aec4:	4b13      	ldr	r3, [pc, #76]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801aec6:	8a1a      	ldrh	r2, [r3, #16]
 801aec8:	4b12      	ldr	r3, [pc, #72]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801aeca:	8a5b      	ldrh	r3, [r3, #18]
 801aecc:	1ad3      	subs	r3, r2, r3
 801aece:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801aed0:	8afa      	ldrh	r2, [r7, #22]
 801aed2:	88fb      	ldrh	r3, [r7, #6]
 801aed4:	429a      	cmp	r2, r3
 801aed6:	d90f      	bls.n	801aef8 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801aed8:	4b0e      	ldr	r3, [pc, #56]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801aeda:	8a5a      	ldrh	r2, [r3, #18]
 801aedc:	683b      	ldr	r3, [r7, #0]
 801aede:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801aee0:	4b0c      	ldr	r3, [pc, #48]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801aee2:	8a5a      	ldrh	r2, [r3, #18]
 801aee4:	88fb      	ldrh	r3, [r7, #6]
 801aee6:	4413      	add	r3, r2
 801aee8:	b29b      	uxth	r3, r3
 801aeea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801aeee:	b29a      	uxth	r2, r3
 801aef0:	4b08      	ldr	r3, [pc, #32]	; (801af14 <TRACE_AllocateBufer+0xf8>)
 801aef2:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801aef4:	2300      	movs	r3, #0
 801aef6:	82bb      	strh	r3, [r7, #20]
 801aef8:	693b      	ldr	r3, [r7, #16]
 801aefa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aefc:	68bb      	ldr	r3, [r7, #8]
 801aefe:	f383 8810 	msr	PRIMASK, r3
}
 801af02:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801af04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801af08:	4618      	mov	r0, r3
 801af0a:	371c      	adds	r7, #28
 801af0c:	46bd      	mov	sp, r7
 801af0e:	bc80      	pop	{r7}
 801af10:	4770      	bx	lr
 801af12:	bf00      	nop
 801af14:	20001090 	.word	0x20001090

0801af18 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801af18:	b480      	push	{r7}
 801af1a:	b085      	sub	sp, #20
 801af1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af1e:	f3ef 8310 	mrs	r3, PRIMASK
 801af22:	607b      	str	r3, [r7, #4]
  return(result);
 801af24:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801af26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801af28:	b672      	cpsid	i
}
 801af2a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801af2c:	4b08      	ldr	r3, [pc, #32]	; (801af50 <TRACE_Lock+0x38>)
 801af2e:	8adb      	ldrh	r3, [r3, #22]
 801af30:	3301      	adds	r3, #1
 801af32:	b29a      	uxth	r2, r3
 801af34:	4b06      	ldr	r3, [pc, #24]	; (801af50 <TRACE_Lock+0x38>)
 801af36:	82da      	strh	r2, [r3, #22]
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af3c:	68bb      	ldr	r3, [r7, #8]
 801af3e:	f383 8810 	msr	PRIMASK, r3
}
 801af42:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801af44:	bf00      	nop
 801af46:	3714      	adds	r7, #20
 801af48:	46bd      	mov	sp, r7
 801af4a:	bc80      	pop	{r7}
 801af4c:	4770      	bx	lr
 801af4e:	bf00      	nop
 801af50:	20001090 	.word	0x20001090

0801af54 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801af54:	b480      	push	{r7}
 801af56:	b085      	sub	sp, #20
 801af58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af5a:	f3ef 8310 	mrs	r3, PRIMASK
 801af5e:	607b      	str	r3, [r7, #4]
  return(result);
 801af60:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801af62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801af64:	b672      	cpsid	i
}
 801af66:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801af68:	4b08      	ldr	r3, [pc, #32]	; (801af8c <TRACE_UnLock+0x38>)
 801af6a:	8adb      	ldrh	r3, [r3, #22]
 801af6c:	3b01      	subs	r3, #1
 801af6e:	b29a      	uxth	r2, r3
 801af70:	4b06      	ldr	r3, [pc, #24]	; (801af8c <TRACE_UnLock+0x38>)
 801af72:	82da      	strh	r2, [r3, #22]
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af78:	68bb      	ldr	r3, [r7, #8]
 801af7a:	f383 8810 	msr	PRIMASK, r3
}
 801af7e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801af80:	bf00      	nop
 801af82:	3714      	adds	r7, #20
 801af84:	46bd      	mov	sp, r7
 801af86:	bc80      	pop	{r7}
 801af88:	4770      	bx	lr
 801af8a:	bf00      	nop
 801af8c:	20001090 	.word	0x20001090

0801af90 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801af90:	b480      	push	{r7}
 801af92:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801af94:	4b05      	ldr	r3, [pc, #20]	; (801afac <TRACE_IsLocked+0x1c>)
 801af96:	8adb      	ldrh	r3, [r3, #22]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	bf14      	ite	ne
 801af9c:	2301      	movne	r3, #1
 801af9e:	2300      	moveq	r3, #0
 801afa0:	b2db      	uxtb	r3, r3
}
 801afa2:	4618      	mov	r0, r3
 801afa4:	46bd      	mov	sp, r7
 801afa6:	bc80      	pop	{r7}
 801afa8:	4770      	bx	lr
 801afaa:	bf00      	nop
 801afac:	20001090 	.word	0x20001090

0801afb0 <__libc_init_array>:
 801afb0:	b570      	push	{r4, r5, r6, lr}
 801afb2:	4d0d      	ldr	r5, [pc, #52]	; (801afe8 <__libc_init_array+0x38>)
 801afb4:	4c0d      	ldr	r4, [pc, #52]	; (801afec <__libc_init_array+0x3c>)
 801afb6:	1b64      	subs	r4, r4, r5
 801afb8:	10a4      	asrs	r4, r4, #2
 801afba:	2600      	movs	r6, #0
 801afbc:	42a6      	cmp	r6, r4
 801afbe:	d109      	bne.n	801afd4 <__libc_init_array+0x24>
 801afc0:	4d0b      	ldr	r5, [pc, #44]	; (801aff0 <__libc_init_array+0x40>)
 801afc2:	4c0c      	ldr	r4, [pc, #48]	; (801aff4 <__libc_init_array+0x44>)
 801afc4:	f000 f8a0 	bl	801b108 <_init>
 801afc8:	1b64      	subs	r4, r4, r5
 801afca:	10a4      	asrs	r4, r4, #2
 801afcc:	2600      	movs	r6, #0
 801afce:	42a6      	cmp	r6, r4
 801afd0:	d105      	bne.n	801afde <__libc_init_array+0x2e>
 801afd2:	bd70      	pop	{r4, r5, r6, pc}
 801afd4:	f855 3b04 	ldr.w	r3, [r5], #4
 801afd8:	4798      	blx	r3
 801afda:	3601      	adds	r6, #1
 801afdc:	e7ee      	b.n	801afbc <__libc_init_array+0xc>
 801afde:	f855 3b04 	ldr.w	r3, [r5], #4
 801afe2:	4798      	blx	r3
 801afe4:	3601      	adds	r6, #1
 801afe6:	e7f2      	b.n	801afce <__libc_init_array+0x1e>
 801afe8:	0801c024 	.word	0x0801c024
 801afec:	0801c024 	.word	0x0801c024
 801aff0:	0801c024 	.word	0x0801c024
 801aff4:	0801c028 	.word	0x0801c028

0801aff8 <memset>:
 801aff8:	4402      	add	r2, r0
 801affa:	4603      	mov	r3, r0
 801affc:	4293      	cmp	r3, r2
 801affe:	d100      	bne.n	801b002 <memset+0xa>
 801b000:	4770      	bx	lr
 801b002:	f803 1b01 	strb.w	r1, [r3], #1
 801b006:	e7f9      	b.n	801affc <memset+0x4>

0801b008 <floor>:
 801b008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b00c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801b010:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801b014:	2e13      	cmp	r6, #19
 801b016:	4602      	mov	r2, r0
 801b018:	460b      	mov	r3, r1
 801b01a:	4607      	mov	r7, r0
 801b01c:	460c      	mov	r4, r1
 801b01e:	4605      	mov	r5, r0
 801b020:	dc34      	bgt.n	801b08c <floor+0x84>
 801b022:	2e00      	cmp	r6, #0
 801b024:	da15      	bge.n	801b052 <floor+0x4a>
 801b026:	a334      	add	r3, pc, #208	; (adr r3, 801b0f8 <floor+0xf0>)
 801b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b02c:	f7e5 f8b2 	bl	8000194 <__adddf3>
 801b030:	2200      	movs	r2, #0
 801b032:	2300      	movs	r3, #0
 801b034:	f7e5 fae2 	bl	80005fc <__aeabi_dcmpgt>
 801b038:	b140      	cbz	r0, 801b04c <floor+0x44>
 801b03a:	2c00      	cmp	r4, #0
 801b03c:	da59      	bge.n	801b0f2 <floor+0xea>
 801b03e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b042:	ea57 0503 	orrs.w	r5, r7, r3
 801b046:	d001      	beq.n	801b04c <floor+0x44>
 801b048:	4c2d      	ldr	r4, [pc, #180]	; (801b100 <floor+0xf8>)
 801b04a:	2500      	movs	r5, #0
 801b04c:	4623      	mov	r3, r4
 801b04e:	462f      	mov	r7, r5
 801b050:	e025      	b.n	801b09e <floor+0x96>
 801b052:	4a2c      	ldr	r2, [pc, #176]	; (801b104 <floor+0xfc>)
 801b054:	fa42 f806 	asr.w	r8, r2, r6
 801b058:	ea01 0208 	and.w	r2, r1, r8
 801b05c:	4302      	orrs	r2, r0
 801b05e:	d01e      	beq.n	801b09e <floor+0x96>
 801b060:	a325      	add	r3, pc, #148	; (adr r3, 801b0f8 <floor+0xf0>)
 801b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b066:	f7e5 f895 	bl	8000194 <__adddf3>
 801b06a:	2200      	movs	r2, #0
 801b06c:	2300      	movs	r3, #0
 801b06e:	f7e5 fac5 	bl	80005fc <__aeabi_dcmpgt>
 801b072:	2800      	cmp	r0, #0
 801b074:	d0ea      	beq.n	801b04c <floor+0x44>
 801b076:	2c00      	cmp	r4, #0
 801b078:	bfbe      	ittt	lt
 801b07a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b07e:	fa43 f606 	asrlt.w	r6, r3, r6
 801b082:	19a4      	addlt	r4, r4, r6
 801b084:	ea24 0408 	bic.w	r4, r4, r8
 801b088:	2500      	movs	r5, #0
 801b08a:	e7df      	b.n	801b04c <floor+0x44>
 801b08c:	2e33      	cmp	r6, #51	; 0x33
 801b08e:	dd0a      	ble.n	801b0a6 <floor+0x9e>
 801b090:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b094:	d103      	bne.n	801b09e <floor+0x96>
 801b096:	f7e5 f87d 	bl	8000194 <__adddf3>
 801b09a:	4607      	mov	r7, r0
 801b09c:	460b      	mov	r3, r1
 801b09e:	4638      	mov	r0, r7
 801b0a0:	4619      	mov	r1, r3
 801b0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0a6:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801b0aa:	f04f 32ff 	mov.w	r2, #4294967295
 801b0ae:	fa22 f808 	lsr.w	r8, r2, r8
 801b0b2:	ea18 0f00 	tst.w	r8, r0
 801b0b6:	d0f2      	beq.n	801b09e <floor+0x96>
 801b0b8:	a30f      	add	r3, pc, #60	; (adr r3, 801b0f8 <floor+0xf0>)
 801b0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0be:	f7e5 f869 	bl	8000194 <__adddf3>
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	f7e5 fa99 	bl	80005fc <__aeabi_dcmpgt>
 801b0ca:	2800      	cmp	r0, #0
 801b0cc:	d0be      	beq.n	801b04c <floor+0x44>
 801b0ce:	2c00      	cmp	r4, #0
 801b0d0:	da02      	bge.n	801b0d8 <floor+0xd0>
 801b0d2:	2e14      	cmp	r6, #20
 801b0d4:	d103      	bne.n	801b0de <floor+0xd6>
 801b0d6:	3401      	adds	r4, #1
 801b0d8:	ea25 0508 	bic.w	r5, r5, r8
 801b0dc:	e7b6      	b.n	801b04c <floor+0x44>
 801b0de:	2301      	movs	r3, #1
 801b0e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b0e4:	fa03 f606 	lsl.w	r6, r3, r6
 801b0e8:	4435      	add	r5, r6
 801b0ea:	42bd      	cmp	r5, r7
 801b0ec:	bf38      	it	cc
 801b0ee:	18e4      	addcc	r4, r4, r3
 801b0f0:	e7f2      	b.n	801b0d8 <floor+0xd0>
 801b0f2:	2500      	movs	r5, #0
 801b0f4:	462c      	mov	r4, r5
 801b0f6:	e7a9      	b.n	801b04c <floor+0x44>
 801b0f8:	8800759c 	.word	0x8800759c
 801b0fc:	7e37e43c 	.word	0x7e37e43c
 801b100:	bff00000 	.word	0xbff00000
 801b104:	000fffff 	.word	0x000fffff

0801b108 <_init>:
 801b108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b10a:	bf00      	nop
 801b10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b10e:	bc08      	pop	{r3}
 801b110:	469e      	mov	lr, r3
 801b112:	4770      	bx	lr

0801b114 <_fini>:
 801b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b116:	bf00      	nop
 801b118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b11a:	bc08      	pop	{r3}
 801b11c:	469e      	mov	lr, r3
 801b11e:	4770      	bx	lr
