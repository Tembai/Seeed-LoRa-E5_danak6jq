
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aa40  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e18  0801ab78  0801ab78  0002ab78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b990  0801b990  0003012c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b990  0801b990  0002b990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b998  0801b998  0003012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b998  0801b998  0002b998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b99c  0801b99c  0002b99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  0801b9a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000170c  2000012c  0801bacc  0003012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001838  0801bacc  00031838  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005e840  00000000  00000000  00030156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b02d  00000000  00000000  0008e996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003348  00000000  00000000  000999c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002f50  00000000  00000000  0009cd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002812b  00000000  00000000  0009fc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003d612  00000000  00000000  000c7d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbc82  00000000  00000000  0010539d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d101f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d360  00000000  00000000  001d1074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000012c 	.word	0x2000012c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ab60 	.word	0x0801ab60

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000130 	.word	0x20000130
 8000174:	0801ab60 	.word	0x0801ab60

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Sensor_Init>:
	return pressure;
}



void Sensor_Init(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0


	  APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Init------------------------\r\n")
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <Sensor_Init+0x20>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f019 fb58 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>

	  while(1){
	  I2C_scan();
 8000e60:	f000 f814 	bl	8000e8c <I2C_scan>
	  HAL_Delay(5000);
 8000e64:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e68:	f000 feeb 	bl	8001c42 <HAL_Delay>
	  I2C_scan();
 8000e6c:	e7f8      	b.n	8000e60 <Sensor_Init+0x10>
 8000e6e:	bf00      	nop
 8000e70:	0801ab78 	.word	0x0801ab78

08000e74 <Sensor_Data>:
//	  platform_read();

	return;
}

int32_t Sensor_Data(void){
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
	int data = 45;
 8000e7a:	232d      	movs	r3, #45	; 0x2d
 8000e7c:	607b      	str	r3, [r7, #4]
//        } /*manage here device not found */
//    else{
//    	while (1){APP_LOG(TS_OFF, VLEVEL_M, "ID klopt!!!!!!!\r\n");};
//    }

	return data;
 8000e7e:	687b      	ldr	r3, [r7, #4]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
	...

08000e8c <I2C_scan>:





void I2C_scan(void){
 8000e8c:	b5b0      	push	{r4, r5, r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af02      	add	r7, sp, #8
	//https://deepbluembedded.com/stm32-i2c-scanner-hal-code-example/
	  uint8_t Buffer[25] = {0};
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]
 8000ea6:	751a      	strb	r2, [r3, #20]
	  uint8_t Space[] = "-";
 8000ea8:	232d      	movs	r3, #45	; 0x2d
 8000eaa:	853b      	strh	r3, [r7, #40]	; 0x28
	  uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8000eac:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <I2C_scan+0xe4>)
 8000eae:	f107 040c 	add.w	r4, r7, #12
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ebc:	c403      	stmia	r4!, {r0, r1}
 8000ebe:	8022      	strh	r2, [r4, #0]
	  uint8_t EndMSG[] = "Done! \r\n\r\n";
 8000ec0:	4a2c      	ldr	r2, [pc, #176]	; (8000f74 <I2C_scan+0xe8>)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ec6:	c303      	stmia	r3!, {r0, r1}
 8000ec8:	801a      	strh	r2, [r3, #0]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	0c12      	lsrs	r2, r2, #16
 8000ece:	701a      	strb	r2, [r3, #0]
	  uint8_t i = 0, ret;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	  /*-[ I2C Bus Scanning ]-*/
	      APP_LOG(TS_OFF, VLEVEL_M, StartMSG);
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f019 fb16 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
	      for(i=1; i<128; i++)
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000eea:	e033      	b.n	8000f54 <I2C_scan+0xc8>
	      {
	          ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 6, 25);
 8000eec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	b299      	uxth	r1, r3
 8000ef6:	2319      	movs	r3, #25
 8000ef8:	2206      	movs	r2, #6
 8000efa:	481f      	ldr	r0, [pc, #124]	; (8000f78 <I2C_scan+0xec>)
 8000efc:	f004 f8ba 	bl	8005074 <HAL_I2C_IsDeviceReady>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	          if (ret != HAL_OK) /* No ACK Received At That Address */
 8000f06:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d007      	beq.n	8000f1e <I2C_scan+0x92>
	          {
	              APP_LOG(TS_OFF, VLEVEL_M, Space);
 8000f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2002      	movs	r0, #2
 8000f18:	f019 fafa 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
 8000f1c:	e00c      	b.n	8000f38 <I2C_scan+0xac>
	          }
	          else if(ret == HAL_OK)
 8000f1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d108      	bne.n	8000f38 <I2C_scan+0xac>
	          {
	              APP_LOG(TS_OFF, VLEVEL_M, Buffer,"\n");
 8000f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <I2C_scan+0xf0>)
 8000f2c:	9200      	str	r2, [sp, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2002      	movs	r0, #2
 8000f34:	f019 faec 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
	          }
              APP_LOG(TS_OFF, VLEVEL_M, Buffer,"\n");
 8000f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3c:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <I2C_scan+0xf0>)
 8000f3e:	9200      	str	r2, [sp, #0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2002      	movs	r0, #2
 8000f46:	f019 fae3 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
	      for(i=1; i<128; i++)
 8000f4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000f54:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dac7      	bge.n	8000eec <I2C_scan+0x60>
	      }
	      APP_LOG(TS_OFF, VLEVEL_M, EndMSG);
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2002      	movs	r0, #2
 8000f64:	f019 fad4 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
	      /*--[ Scanning Done ]--*/
}
 8000f68:	bf00      	nop
 8000f6a:	3748      	adds	r7, #72	; 0x48
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f70:	0801aba4 	.word	0x0801aba4
 8000f74:	0801abc0 	.word	0x0801abc0
 8000f78:	20001600 	.word	0x20001600
 8000f7c:	0801aba0 	.word	0x0801aba0

08000f80 <I2C_id>:


void I2C_id(void){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af02      	add	r7, sp, #8
//    buf[i]=0;
//    }
//    break;
//    }

    buf[0] = WhoAmI;
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <I2C_id+0x88>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	713b      	strb	r3, [r7, #4]
    buf[1] = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	717b      	strb	r3, [r7, #5]
    buf[2] = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	71bb      	strb	r3, [r7, #6]


    ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, buf, 1, 500); //LPS22HH_I2C_ADD_H & 0xFE
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <I2C_id+0x8c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b299      	uxth	r1, r3
 8000f9a:	1d3a      	adds	r2, r7, #4
 8000f9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	481a      	ldr	r0, [pc, #104]	; (8001010 <I2C_id+0x90>)
 8000fa6:	f003 fe7b 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
    if ( ret != HAL_OK ) {
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <I2C_id+0x42>
  	  APP_LOG(TS_OFF, VLEVEL_M, "Transmit doet het niet\n");
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <I2C_id+0x94>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f019 faa8 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
 8000fc0:	e015      	b.n	8000fee <I2C_id+0x6e>
    }
    else{
  	  ret=HAL_I2C_Master_Receive(&hi2c2, addr_read, buf, 1, 500); //LPS22HH_I2C_ADD_H & 0xFE
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <I2C_id+0x98>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b299      	uxth	r1, r3
 8000fc8:	1d3a      	adds	r2, r7, #4
 8000fca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	480f      	ldr	r0, [pc, #60]	; (8001010 <I2C_id+0x90>)
 8000fd4:	f003 ff58 	bl	8004e88 <HAL_I2C_Master_Receive>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
  	  if ( ret != HAL_OK ) {
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <I2C_id+0x6e>
  		  APP_LOG(TS_OFF, VLEVEL_M, "Receive doet het niet\n");
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <I2C_id+0x9c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f019 fa91 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
  	  }
  	  }

	  APP_LOG(TS_OFF, VLEVEL_M, "id: %X\n",buf[0]);
 8000fee:	793b      	ldrb	r3, [r7, #4]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <I2C_id+0xa0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f019 fa89 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>

	 return 0;
 8000ffe:	bf00      	nop
}
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	0801b3c3 	.word	0x0801b3c3
 800100c:	0801b3c4 	.word	0x0801b3c4
 8001010:	20001600 	.word	0x20001600
 8001014:	0801abcc 	.word	0x0801abcc
 8001018:	0801b3c5 	.word	0x0801b3c5
 800101c:	0801abe4 	.word	0x0801abe4
 8001020:	0801abfc 	.word	0x0801abfc

08001024 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800102c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001030:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4313      	orrs	r3, r2
 800103a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800103c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001040:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001048:	68fb      	ldr	r3, [r7, #12]
}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800105c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001060:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	43db      	mvns	r3, r3
 8001066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800106a:	4013      	ands	r3, r2
 800106c:	660b      	str	r3, [r1, #96]	; 0x60
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <MX_ADC_Init+0x94>)
 800107e:	4a24      	ldr	r2, [pc, #144]	; (8001110 <MX_ADC_Init+0x98>)
 8001080:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <MX_ADC_Init+0x94>)
 8001084:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001088:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <MX_ADC_Init+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <MX_ADC_Init+0x94>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <MX_ADC_Init+0x94>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_ADC_Init+0x94>)
 800109e:	2204      	movs	r2, #4
 80010a0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_ADC_Init+0x94>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_ADC_Init+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_ADC_Init+0x94>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_ADC_Init+0x94>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_ADC_Init+0x94>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_ADC_Init+0x94>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_ADC_Init+0x94>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_ADC_Init+0x94>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <MX_ADC_Init+0x94>)
 80010d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_ADC_Init+0x94>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_ADC_Init+0x94>)
 80010e6:	2207      	movs	r2, #7
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_ADC_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_ADC_Init+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_ADC_Init+0x94>)
 80010fa:	f001 ff45 	bl	8002f88 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001104:	f000 faa6 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2000159c 	.word	0x2000159c
 8001110:	40012400 	.word	0x40012400

08001114 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <HAL_ADC_MspInit+0x24>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d103      	bne.n	800112e <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001126:	f44f 7000 	mov.w	r0, #512	; 0x200
 800112a:	f7ff ff7b 	bl	8001024 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40012400 	.word	0x40012400

0800113c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a05      	ldr	r2, [pc, #20]	; (8001160 <HAL_ADC_MspDeInit+0x24>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d103      	bne.n	8001156 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800114e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001152:	f7ff ff7f 	bl	8001054 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40012400 	.word	0x40012400

08001164 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <SYS_InitMeasurement+0x14>)
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <SYS_InitMeasurement+0x18>)
 800116c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000159c 	.word	0x2000159c
 800117c:	40012400 	.word	0x40012400

08001180 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800118e:	f000 f871 	bl	8001274 <SYS_GetBatteryLevel>
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001196:	4830      	ldr	r0, [pc, #192]	; (8001258 <SYS_GetTemperatureLevel+0xd8>)
 8001198:	f000 f8a0 	bl	80012dc <ADC_ReadChannels>
 800119c:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <SYS_GetTemperatureLevel+0xdc>)
 80011a0:	881a      	ldrh	r2, [r3, #0]
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <SYS_GetTemperatureLevel+0xe0>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d026      	beq.n	80011f8 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <SYS_GetTemperatureLevel+0xdc>)
 80011ac:	881a      	ldrh	r2, [r3, #0]
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <SYS_GetTemperatureLevel+0xe0>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d01c      	beq.n	80011f0 <SYS_GetTemperatureLevel+0x70>
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	4a28      	ldr	r2, [pc, #160]	; (8001264 <SYS_GetTemperatureLevel+0xe4>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <SYS_GetTemperatureLevel+0xe0>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2264      	movs	r2, #100	; 0x64
 80011d2:	fb02 f203 	mul.w	r2, r2, r3
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <SYS_GetTemperatureLevel+0xdc>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	4619      	mov	r1, r3
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <SYS_GetTemperatureLevel+0xe0>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	1acb      	subs	r3, r1, r3
 80011e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	331e      	adds	r3, #30
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	e001      	b.n	80011f4 <SYS_GetTemperatureLevel+0x74>
 80011f0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80011f4:	81fb      	strh	r3, [r7, #14]
 80011f6:	e01c      	b.n	8001232 <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	fb02 f203 	mul.w	r2, r2, r3
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <SYS_GetTemperatureLevel+0xe8>)
 8001202:	fba3 1302 	umull	r1, r3, r3, r2
 8001206:	1ad2      	subs	r2, r2, r3
 8001208:	0852      	lsrs	r2, r2, #1
 800120a:	4413      	add	r3, r2
 800120c:	0adb      	lsrs	r3, r3, #11
 800120e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001212:	fb02 f303 	mul.w	r3, r2, r3
 8001216:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800121a:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <SYS_GetTemperatureLevel+0xec>)
 8001220:	fb82 1203 	smull	r1, r2, r2, r3
 8001224:	1292      	asrs	r2, r2, #10
 8001226:	17db      	asrs	r3, r3, #31
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	b29b      	uxth	r3, r3
 800122c:	331e      	adds	r3, #30
 800122e:	b29b      	uxth	r3, r3
 8001230:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8001232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <SYS_GetTemperatureLevel+0xf0>)
 800123a:	2201      	movs	r2, #1
 800123c:	2100      	movs	r1, #0
 800123e:	2001      	movs	r0, #1
 8001240:	f019 f966 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001244:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 800124c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	b0001000 	.word	0xb0001000
 800125c:	1fff75c8 	.word	0x1fff75c8
 8001260:	1fff75a8 	.word	0x1fff75a8
 8001264:	09ee009f 	.word	0x09ee009f
 8001268:	00100101 	.word	0x00100101
 800126c:	68db8bad 	.word	0x68db8bad
 8001270:	0801ac04 	.word	0x0801ac04

08001274 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <SYS_GetBatteryLevel+0x5c>)
 8001284:	f000 f82a 	bl	80012dc <ADC_ReadChannels>
 8001288:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	80fb      	strh	r3, [r7, #6]
 8001294:	e016      	b.n	80012c4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <SYS_GetBatteryLevel+0x60>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00b      	beq.n	80012ba <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <SYS_GetBatteryLevel+0x60>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	f640 43e4 	movw	r3, #3300	; 0xce4
 80012ac:	fb03 f202 	mul.w	r2, r3, r2
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	80fb      	strh	r3, [r7, #6]
 80012b8:	e004      	b.n	80012c4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80012ba:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <SYS_GetBatteryLevel+0x64>)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80012c4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	b4002000 	.word	0xb4002000
 80012d4:	1fff75aa 	.word	0x1fff75aa
 80012d8:	004c08d8 	.word	0x004c08d8

080012dc <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80012f4:	f7ff fec0 	bl	8001078 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80012f8:	481a      	ldr	r0, [pc, #104]	; (8001364 <ADC_ReadChannels+0x88>)
 80012fa:	f002 fc2b 	bl	8003b54 <HAL_ADCEx_Calibration_Start>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001304:	f000 f9a6 	bl	8001654 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	4619      	mov	r1, r3
 800131a:	4812      	ldr	r0, [pc, #72]	; (8001364 <ADC_ReadChannels+0x88>)
 800131c:	f002 f992 	bl	8003644 <HAL_ADC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001326:	f000 f995 	bl	8001654 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800132a:	480e      	ldr	r0, [pc, #56]	; (8001364 <ADC_ReadChannels+0x88>)
 800132c:	f002 f86e 	bl	800340c <HAL_ADC_Start>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001336:	f000 f98d 	bl	8001654 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800133a:	f04f 31ff 	mov.w	r1, #4294967295
 800133e:	4809      	ldr	r0, [pc, #36]	; (8001364 <ADC_ReadChannels+0x88>)
 8001340:	f002 f8dc 	bl	80034fc <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001344:	4807      	ldr	r0, [pc, #28]	; (8001364 <ADC_ReadChannels+0x88>)
 8001346:	f002 f8a7 	bl	8003498 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <ADC_ReadChannels+0x88>)
 800134c:	f002 f96d 	bl	800362a <HAL_ADC_GetValue>
 8001350:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <ADC_ReadChannels+0x88>)
 8001354:	f001 ffde 	bl	8003314 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001358:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000159c 	.word	0x2000159c

08001368 <LL_AHB1_GRP1_EnableClock>:
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4313      	orrs	r3, r2
 800137e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001384:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800138c:	68fb      	ldr	r3, [r7, #12]
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800139c:	2004      	movs	r0, #4
 800139e:	f7ff ffe3 	bl	8001368 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff ffe0 	bl	8001368 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2102      	movs	r1, #2
 80013ac:	200b      	movs	r0, #11
 80013ae:	f002 fd24 	bl	8003dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b2:	200b      	movs	r0, #11
 80013b4:	f002 fd3b 	bl	8003e2e <HAL_NVIC_EnableIRQ>

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <LL_AHB2_GRP1_EnableClock>:
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e0:	68fb      	ldr	r3, [r7, #12]
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <LL_APB1_GRP1_EnableClock>:
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4313      	orrs	r3, r2
 8001402:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001408:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001410:	68fb      	ldr	r3, [r7, #12]
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MX_I2C2_Init+0x74>)
 8001422:	4a1c      	ldr	r2, [pc, #112]	; (8001494 <MX_I2C2_Init+0x78>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_I2C2_Init+0x74>)
 8001428:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <MX_I2C2_Init+0x7c>)
 800142a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_I2C2_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_I2C2_Init+0x74>)
 8001434:	2201      	movs	r2, #1
 8001436:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_I2C2_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_I2C2_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_I2C2_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_I2C2_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_I2C2_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001456:	480e      	ldr	r0, [pc, #56]	; (8001490 <MX_I2C2_Init+0x74>)
 8001458:	f003 fb92 	bl	8004b80 <HAL_I2C_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001462:	f000 f8f7 	bl	8001654 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4809      	ldr	r0, [pc, #36]	; (8001490 <MX_I2C2_Init+0x74>)
 800146a:	f004 f8f7 	bl	800565c <HAL_I2CEx_ConfigAnalogFilter>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001474:	f000 f8ee 	bl	8001654 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001478:	2100      	movs	r1, #0
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_I2C2_Init+0x74>)
 800147c:	f004 f938 	bl	80056f0 <HAL_I2CEx_ConfigDigitalFilter>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001486:	f000 f8e5 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20001600 	.word	0x20001600
 8001494:	40005800 	.word	0x40005800
 8001498:	20303e5d 	.word	0x20303e5d

0800149c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b096      	sub	sp, #88	; 0x58
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2238      	movs	r2, #56	; 0x38
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f019 fac5 	bl	801aa4c <memset>
  if(i2cHandle->Instance==I2C2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a21      	ldr	r2, [pc, #132]	; (800154c <HAL_I2C_MspInit+0xb0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d13b      	bne.n	8001544 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014d0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 fb3e 	bl	8006b5c <HAL_RCCEx_PeriphCLKConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014e6:	f000 f8b5 	bl	8001654 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2001      	movs	r0, #1
 80014ec:	f7ff ff66 	bl	80013bc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	2002      	movs	r0, #2
 80014f2:	f7ff ff63 	bl	80013bc <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014fa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fc:	2312      	movs	r3, #18
 80014fe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001508:	2304      	movs	r3, #4
 800150a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001516:	f003 f8bd 	bl	8004694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800151a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800151e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001520:	2312      	movs	r3, #18
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800152c:	2304      	movs	r3, #4
 800152e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <HAL_I2C_MspInit+0xb4>)
 8001538:	f003 f8ac 	bl	8004694 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800153c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001540:	f7ff ff54 	bl	80013ec <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001544:	bf00      	nop
 8001546:	3758      	adds	r7, #88	; 0x58
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40005800 	.word	0x40005800
 8001550:	48000400 	.word	0x48000400

08001554 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800155c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001564:	f023 0218 	bic.w	r2, r3, #24
 8001568:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4313      	orrs	r3, r2
 8001570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001582:	f001 fb35 	bl	8002bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001586:	f000 f80b 	bl	80015a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 800158a:	f008 fd7b 	bl	800a084 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 800158e:	f7ff ff45 	bl	800141c <MX_I2C2_Init>
    /* USER CODE END WHILE */
//    MX_LoRaWAN_Process();

    /* USER CODE BEGIN 3 */

	  HAL_Delay(2000);
 8001592:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001596:	f000 fb54 	bl	8001c42 <HAL_Delay>
	  I2C_id();
 800159a:	f7ff fcf1 	bl	8000f80 <I2C_id>
  {
 800159e:	e7f8      	b.n	8001592 <main+0x14>

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b09a      	sub	sp, #104	; 0x68
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 0320 	add.w	r3, r7, #32
 80015aa:	2248      	movs	r2, #72	; 0x48
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f019 fa4c 	bl	801aa4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015c6:	f004 f8df 	bl	8005788 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff ffc2 	bl	8001554 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <SystemClock_Config+0xb0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015d8:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <SystemClock_Config+0xb0>)
 80015da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <SystemClock_Config+0xb0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015ec:	2324      	movs	r3, #36	; 0x24
 80015ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015f0:	2381      	movs	r3, #129	; 0x81
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015f4:	2301      	movs	r3, #1
 80015f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80015fc:	23b0      	movs	r3, #176	; 0xb0
 80015fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001600:	2300      	movs	r3, #0
 8001602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001604:	f107 0320 	add.w	r3, r7, #32
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fb67 	bl	8005cdc <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001614:	f000 f81e 	bl	8001654 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001618:	234f      	movs	r3, #79	; 0x4f
 800161a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	2102      	movs	r1, #2
 8001636:	4618      	mov	r0, r3
 8001638:	f004 feea 	bl	8006410 <HAL_RCC_ClockConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001642:	f000 f807 	bl	8001654 <Error_Handler>
  }
}
 8001646:	bf00      	nop
 8001648:	3768      	adds	r7, #104	; 0x68
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	58000400 	.word	0x58000400

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>

0800165e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800166e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <LL_APB1_GRP1_EnableClock>:
{
 800167e:	b480      	push	{r7}
 8001680:	b085      	sub	sp, #20
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800168c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4313      	orrs	r3, r2
 8001694:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4013      	ands	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
	...

080016b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08c      	sub	sp, #48	; 0x30
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	222c      	movs	r2, #44	; 0x2c
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f019 f9c5 	bl	801aa4c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <MX_RTC_Init+0x9c>)
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <MX_RTC_Init+0xa0>)
 80016c6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <MX_RTC_Init+0x9c>)
 80016ca:	221f      	movs	r2, #31
 80016cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <MX_RTC_Init+0x9c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_RTC_Init+0x9c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MX_RTC_Init+0x9c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_RTC_Init+0x9c>)
 80016e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_RTC_Init+0x9c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_RTC_Init+0x9c>)
 80016f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016f6:	4815      	ldr	r0, [pc, #84]	; (800174c <MX_RTC_Init+0x9c>)
 80016f8:	f005 fb4a 	bl	8006d90 <HAL_RTC_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001702:	f7ff ffa7 	bl	8001654 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001706:	4811      	ldr	r0, [pc, #68]	; (800174c <MX_RTC_Init+0x9c>)
 8001708:	f005 fe38 	bl	800737c <HAL_RTCEx_SetSSRU_IT>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001712:	f7ff ff9f 	bl	8001654 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001722:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001726:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2200      	movs	r2, #0
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_RTC_Init+0x9c>)
 8001736:	f005 fba5 	bl	8006e84 <HAL_RTC_SetAlarm_IT>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001740:	f7ff ff88 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	3730      	adds	r7, #48	; 0x30
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2000164c 	.word	0x2000164c
 8001750:	40002800 	.word	0x40002800

08001754 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b090      	sub	sp, #64	; 0x40
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800175c:	f107 0308 	add.w	r3, r7, #8
 8001760:	2238      	movs	r2, #56	; 0x38
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f019 f971 	bl	801aa4c <memset>
  if(rtcHandle->Instance==RTC)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <HAL_RTC_MspInit+0x74>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d125      	bne.n	80017c0 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001778:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800177a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4618      	mov	r0, r3
 8001786:	f005 f9e9 	bl	8006b5c <HAL_RCCEx_PeriphCLKConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001790:	f7ff ff60 	bl	8001654 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001794:	f7ff ff63 	bl	800165e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001798:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800179c:	f7ff ff6f 	bl	800167e <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2002      	movs	r0, #2
 80017a6:	f002 fb28 	bl	8003dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80017aa:	2002      	movs	r0, #2
 80017ac:	f002 fb3f 	bl	8003e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	202a      	movs	r0, #42	; 0x2a
 80017b6:	f002 fb20 	bl	8003dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017ba:	202a      	movs	r0, #42	; 0x2a
 80017bc:	f002 fb37 	bl	8003e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017c0:	bf00      	nop
 80017c2:	3740      	adds	r7, #64	; 0x40
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40002800 	.word	0x40002800

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler+0x4>

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
	...

08001828 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800182e:	f005 fde1 	bl	80073f4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000164c 	.word	0x2000164c

0800183c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA1_Channel1_IRQHandler+0x10>)
 8001842:	f002 fd8b 	bl	800435c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20001690 	.word	0x20001690

08001850 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <USART1_IRQHandler+0x10>)
 8001856:	f006 fc2d 	bl	80080b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200016f0 	.word	0x200016f0

08001864 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001868:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800186c:	f003 f970 	bl	8004b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <RTC_Alarm_IRQHandler+0x10>)
 800187a:	f005 fc6b 	bl	8007154 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000164c 	.word	0x2000164c

08001888 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <SUBGHZ_Radio_IRQHandler+0x10>)
 800188e:	f006 f919 	bl	8007ac4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20001684 	.word	0x20001684

0800189c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018c0:	68fb      	ldr	r3, [r7, #12]
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_SUBGHZ_Init+0x20>)
 80018d2:	2208      	movs	r2, #8
 80018d4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_SUBGHZ_Init+0x20>)
 80018d8:	f005 fe78 	bl	80075cc <HAL_SUBGHZ_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80018e2:	f7ff feb7 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20001684 	.word	0x20001684

080018f0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80018f8:	2001      	movs	r0, #1
 80018fa:	f7ff ffcf 	bl	800189c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	2032      	movs	r0, #50	; 0x32
 8001904:	f002 fa79 	bl	8003dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001908:	2032      	movs	r0, #50	; 0x32
 800190a:	f002 fa90 	bl	8003e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800191e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001940:	4b02      	ldr	r3, [pc, #8]	; (800194c <LL_FLASH_GetUDN+0x10>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	1fff7580 	.word	0x1fff7580

08001950 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <LL_FLASH_GetDeviceID+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b2db      	uxtb	r3, r3
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	1fff7584 	.word	0x1fff7584

08001968 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <LL_FLASH_GetSTCompanyID+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	0a1b      	lsrs	r3, r3, #8
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	1fff7584 	.word	0x1fff7584

08001980 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff ffc6 	bl	8001916 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800198a:	f018 fb03 	bl	8019f94 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 800198e:	f000 f991 	bl	8001cb4 <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001992:	f000 f9b1 	bl	8001cf8 <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001996:	f018 fd8d 	bl	801a4b4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800199a:	480b      	ldr	r0, [pc, #44]	; (80019c8 <SystemApp_Init+0x48>)
 800199c:	f018 fe3a 	bl	801a614 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80019a0:	2002      	movs	r0, #2
 80019a2:	f018 fe45 	bl	801a630 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80019a6:	f7ff fbdd 	bl	8001164 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80019aa:	f000 fa6f 	bl	8001e8c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80019ae:	f017 fdf7 	bl	80195a0 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80019b2:	2101      	movs	r1, #1
 80019b4:	2001      	movs	r0, #1
 80019b6:	f017 fe33 	bl	8019620 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80019ba:	2101      	movs	r1, #1
 80019bc:	2001      	movs	r0, #1
 80019be:	f017 fdff 	bl	80195c0 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08001b95 	.word	0x08001b95

080019cc <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80019d6:	f7ff fc4d 	bl	8001274 <SYS_GetBatteryLevel>
 80019da:	4603      	mov	r3, r0
 80019dc:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80019de:	88bb      	ldrh	r3, [r7, #4]
 80019e0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d902      	bls.n	80019ee <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80019e8:	23fe      	movs	r3, #254	; 0xfe
 80019ea:	71fb      	strb	r3, [r7, #7]
 80019ec:	e014      	b.n	8001a18 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80019ee:	88bb      	ldrh	r3, [r7, #4]
 80019f0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80019f4:	d202      	bcs.n	80019fc <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	71fb      	strb	r3, [r7, #7]
 80019fa:	e00d      	b.n	8001a18 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019fc:	88bb      	ldrh	r3, [r7, #4]
 80019fe:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001a02:	461a      	mov	r2, r3
 8001a04:	4613      	mov	r3, r2
 8001a06:	01db      	lsls	r3, r3, #7
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <GetBatteryLevel+0x68>)
 8001a10:	fba3 2302 	umull	r2, r3, r3, r2
 8001a14:	09db      	lsrs	r3, r3, #7
 8001a16:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <GetBatteryLevel+0x6c>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	2002      	movs	r0, #2
 8001a24:	f018 fd74 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001a28:	79fb      	ldrb	r3, [r7, #7]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	1b4e81b5 	.word	0x1b4e81b5
 8001a38:	0801ac10 	.word	0x0801ac10

08001a3c <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001a46:	f7ff fb9b 	bl	8001180 <SYS_GetTemperatureLevel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da00      	bge.n	8001a52 <GetTemperatureLevel+0x16>
 8001a50:	33ff      	adds	r3, #255	; 0xff
 8001a52:	121b      	asrs	r3, r3, #8
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001a58:	88fb      	ldrh	r3, [r7, #6]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001a62:	b590      	push	{r4, r7, lr}
 8001a64:	b087      	sub	sp, #28
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001a6e:	f7ff ff65 	bl	800193c <LL_FLASH_GetUDN>
 8001a72:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7a:	d138      	bne.n	8001aee <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a7c:	f001 f8d8 	bl	8002c30 <HAL_GetUIDw0>
 8001a80:	4604      	mov	r4, r0
 8001a82:	f001 f8e9 	bl	8002c58 <HAL_GetUIDw2>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4423      	add	r3, r4
 8001a8a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a8c:	f001 f8da 	bl	8002c44 <HAL_GetUIDw1>
 8001a90:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	0e1a      	lsrs	r2, r3, #24
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3307      	adds	r3, #7
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	0c1a      	lsrs	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3306      	adds	r3, #6
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	0a1a      	lsrs	r2, r3, #8
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3305      	adds	r3, #5
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	0e1a      	lsrs	r2, r3, #24
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3303      	adds	r3, #3
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	0c1a      	lsrs	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	0a1a      	lsrs	r2, r3, #8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001aec:	e031      	b.n	8001b52 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3307      	adds	r3, #7
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	0a1a      	lsrs	r2, r3, #8
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3306      	adds	r3, #6
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	0c1a      	lsrs	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3305      	adds	r3, #5
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	0e1a      	lsrs	r2, r3, #24
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001b1c:	f7ff ff18 	bl	8001950 <LL_FLASH_GetDeviceID>
 8001b20:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3303      	adds	r3, #3
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001b2c:	f7ff ff1c 	bl	8001968 <LL_FLASH_GetSTCompanyID>
 8001b30:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3302      	adds	r3, #2
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	0a1a      	lsrs	r2, r3, #8
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3301      	adds	r3, #1
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	0c1b      	lsrs	r3, r3, #16
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	701a      	strb	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}

08001b5a <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001b5a:	b590      	push	{r4, r7, lr}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001b64:	f7ff feea 	bl	800193c <LL_FLASH_GetUDN>
 8001b68:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d10b      	bne.n	8001b8a <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001b72:	f001 f85d 	bl	8002c30 <HAL_GetUIDw0>
 8001b76:	4604      	mov	r4, r0
 8001b78:	f001 f864 	bl	8002c44 <HAL_GetUIDw1>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	405c      	eors	r4, r3
 8001b80:	f001 f86a 	bl	8002c58 <HAL_GetUIDw2>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4063      	eors	r3, r4
 8001b88:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001b8a:	687b      	ldr	r3, [r7, #4]

}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd90      	pop	{r4, r7, pc}

08001b94 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f017 fe46 	bl	8019834 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001bae:	9200      	str	r2, [sp, #0]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <TimestampNow+0x3c>)
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f81d 	bl	8001bf4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7fe fadc 	bl	8000178 <strlen>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	0801ac1c 	.word	0x0801ac1c

08001bd4 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001bd8:	2101      	movs	r1, #1
 8001bda:	2002      	movs	r0, #2
 8001bdc:	f017 fcf0 	bl	80195c0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001be8:	2100      	movs	r1, #0
 8001bea:	2002      	movs	r0, #2
 8001bec:	f017 fce8 	bl	80195c0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001bf4:	b40c      	push	{r2, r3}
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001c06:	6839      	ldr	r1, [r7, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f017 ffe5 	bl	8019bdc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c1c:	b002      	add	sp, #8
 8001c1e:	4770      	bx	lr

08001c20 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001c38:	f000 f9f0 	bl	800201c <TIMER_IF_GetTimerValue>
 8001c3c:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fa65 	bl	800211c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <LL_AHB2_GRP1_EnableClock>:
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
	...

08001c8c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c96:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c9a:	4905      	ldr	r1, [pc, #20]	; (8001cb0 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	58000800 	.word	0x58000800

08001cb4 <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f000 f802 	bl	8001cc2 <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d106      	bne.n	8001ce4 <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 8001cd6:	f000 ffc9 	bl	8002c6c <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8001cda:	f000 ffd3 	bl	8002c84 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8001cde:	f000 ffdd 	bl	8002c9c <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8001ce2:	e005      	b.n	8001cf0 <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 8001ce4:	f000 ffc8 	bl	8002c78 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8001ce8:	f000 ffd2 	bl	8002c90 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8001cec:	f000 ffdc 	bl	8002ca8 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_1 */

  /* SW probes */

#if defined (PROBE_PINS_ENABLED) && ( PROBE_PINS_ENABLED == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f7ff ff9e 	bl	8001c5a <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001d1e:	2002      	movs	r0, #2
 8001d20:	f7ff ff9b 	bl	8001c5a <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001d24:	2002      	movs	r0, #2
 8001d26:	f7ff ff98 	bl	8001c5a <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001d2a:	2002      	movs	r0, #2
 8001d2c:	f7ff ff95 	bl	8001c5a <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001d30:	2301      	movs	r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3c:	f002 fcaa 	bl	8004694 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d44:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	483a      	ldr	r0, [pc, #232]	; (8001e34 <DBG_ProbesInit+0x13c>)
 8001d4c:	f002 fca2 	bl	8004694 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001d50:	2308      	movs	r3, #8
 8001d52:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4836      	ldr	r0, [pc, #216]	; (8001e34 <DBG_ProbesInit+0x13c>)
 8001d5a:	f002 fc9b 	bl	8004694 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001d5e:	2310      	movs	r3, #16
 8001d60:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4833      	ldr	r0, [pc, #204]	; (8001e34 <DBG_ProbesInit+0x13c>)
 8001d68:	f002 fc94 	bl	8004694 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2101      	movs	r1, #1
 8001d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d74:	f002 febc 	bl	8004af0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d7e:	482d      	ldr	r0, [pc, #180]	; (8001e34 <DBG_ProbesInit+0x13c>)
 8001d80:	f002 feb6 	bl	8004af0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2108      	movs	r1, #8
 8001d88:	482a      	ldr	r0, [pc, #168]	; (8001e34 <DBG_ProbesInit+0x13c>)
 8001d8a:	f002 feb1 	bl	8004af0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2110      	movs	r1, #16
 8001d92:	4828      	ldr	r0, [pc, #160]	; (8001e34 <DBG_ProbesInit+0x13c>)
 8001d94:	f002 feac 	bl	8004af0 <HAL_GPIO_WritePin>

  /* USER CODE END DBG_ProbesInit_2 */
  /* HW alternate functions for monitoring RF */

  /* Configure the GPIO pin */
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	613b      	str	r3, [r7, #16]

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8001da4:	23f0      	movs	r3, #240	; 0xf0
 8001da6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8001da8:	230d      	movs	r3, #13
 8001daa:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	2001      	movs	r0, #1
 8001dae:	f7ff ff54 	bl	8001c5a <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dba:	f002 fc6b 	bl	8004694 <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 8001dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 8001dcc:	2306      	movs	r3, #6
 8001dce:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f7ff ff42 	bl	8001c5a <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dde:	f002 fc59 	bl	8004694 <HAL_GPIO_Init>

  /* LDO_rdy & BUCK_rdy (SMPS) */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 8001dea:	2304      	movs	r3, #4
 8001dec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8001dee:	230d      	movs	r3, #13
 8001df0:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	2002      	movs	r0, #2
 8001df4:	f7ff ff31 	bl	8001c5a <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480d      	ldr	r0, [pc, #52]	; (8001e34 <DBG_ProbesInit+0x13c>)
 8001dfe:	f002 fc49 	bl	8004694 <HAL_GPIO_Init>

  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 8001e0a:	2310      	movs	r3, #16
 8001e0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8001e0e:	230d      	movs	r3, #13
 8001e10:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	2002      	movs	r0, #2
 8001e14:	f7ff ff21 	bl	8001c5a <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4805      	ldr	r0, [pc, #20]	; (8001e34 <DBG_ProbesInit+0x13c>)
 8001e1e:	f002 fc39 	bl	8004694 <HAL_GPIO_Init>
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001e22:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e26:	f7ff ff31 	bl	8001c8c <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	48000400 	.word	0x48000400

08001e38 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <EnvSensors_Read+0x40>)
 8001e42:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <EnvSensors_Read+0x44>)
 8001e46:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <EnvSensors_Read+0x48>)
 8001e4a:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <EnvSensors_Read+0x4c>)
 8001e62:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <EnvSensors_Read+0x50>)
 8001e68:	611a      	str	r2, [r3, #16]

  return 0;
 8001e6a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	42480000 	.word	0x42480000
 8001e7c:	41900000 	.word	0x41900000
 8001e80:	447a0000 	.word	0x447a0000
 8001e84:	003e090d 	.word	0x003e090d
 8001e88:	000503ab 	.word	0x000503ab

08001e8c <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001e90:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <TIMER_IF_Init+0x5c>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	f083 0301 	eor.w	r3, r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <TIMER_IF_Init+0x60>)
 8001ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001edc:	f7ff fbe8 	bl	80016b0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001ee0:	f000 f856 	bl	8001f90 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <TIMER_IF_Init+0x60>)
 8001eea:	f005 f8d7 	bl	800709c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <TIMER_IF_Init+0x60>)
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001ef6:	4809      	ldr	r0, [pc, #36]	; (8001f1c <TIMER_IF_Init+0x60>)
 8001ef8:	f005 fa0e 	bl	8007318 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f000 f9cf 	bl	80022a0 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001f02:	f000 f85f 	bl	8001fc4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <TIMER_IF_Init+0x5c>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000148 	.word	0x20000148
 8001f1c:	2000164c 	.word	0x2000164c

08001f20 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08e      	sub	sp, #56	; 0x38
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	222c      	movs	r2, #44	; 0x2c
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f018 fd88 	bl	801aa4c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001f3c:	f000 f828 	bl	8001f90 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <TIMER_IF_StartTimer+0x68>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f58:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f5c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f64:	f107 0308 	add.w	r3, r7, #8
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4807      	ldr	r0, [pc, #28]	; (8001f8c <TIMER_IF_StartTimer+0x6c>)
 8001f6e:	f004 ff89 	bl	8006e84 <HAL_RTC_SetAlarm_IT>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001f78:	f7ff fb6c 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001f7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3738      	adds	r7, #56	; 0x38
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	2000014c 	.word	0x2000014c
 8001f8c:	2000164c 	.word	0x2000164c

08001f90 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <TIMER_IF_StopTimer+0x2c>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa4:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <TIMER_IF_StopTimer+0x30>)
 8001fa6:	f005 f879 	bl	800709c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <TIMER_IF_StopTimer+0x30>)
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40002800 	.word	0x40002800
 8001fc0:	2000164c 	.word	0x2000164c

08001fc4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001fc8:	f000 f98a 	bl	80022e0 <GetTimerTicks>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <TIMER_IF_SetTimerContext+0x18>)
 8001fd0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001fd2:	4b02      	ldr	r3, [pc, #8]	; (8001fdc <TIMER_IF_SetTimerContext+0x18>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000014c 	.word	0x2000014c

08001fe0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <TIMER_IF_GetTimerContext+0x10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	2000014c 	.word	0x2000014c

08001ff4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001ffe:	f000 f96f 	bl	80022e0 <GetTimerTicks>
 8002002:	4602      	mov	r2, r0
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800200c:	687b      	ldr	r3, [r7, #4]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000014c 	.word	0x2000014c

0800201c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <TIMER_IF_GetTimerValue+0x24>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800202e:	f000 f957 	bl	80022e0 <GetTimerTicks>
 8002032:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002034:	687b      	ldr	r3, [r7, #4]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000148 	.word	0x20000148

08002044 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800204e:	2303      	movs	r3, #3
 8002050:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002052:	687b      	ldr	r3, [r7, #4]
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800205e:	b5b0      	push	{r4, r5, r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	461a      	mov	r2, r3
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	0d95      	lsrs	r5, r2, #22
 8002074:	0294      	lsls	r4, r2, #10
 8002076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	4620      	mov	r0, r4
 8002080:	4629      	mov	r1, r5
 8002082:	f7fe fd6b 	bl	8000b5c <__aeabi_uldivmod>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4613      	mov	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bdb0      	pop	{r4, r5, r7, pc}

08002098 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002098:	b4b0      	push	{r4, r5, r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f04f 0100 	mov.w	r1, #0
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	f04f 0400 	mov.w	r4, #0
 80020b4:	f04f 0500 	mov.w	r5, #0
 80020b8:	015d      	lsls	r5, r3, #5
 80020ba:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80020be:	0154      	lsls	r4, r2, #5
 80020c0:	4622      	mov	r2, r4
 80020c2:	462b      	mov	r3, r5
 80020c4:	1a12      	subs	r2, r2, r0
 80020c6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ca:	f04f 0400 	mov.w	r4, #0
 80020ce:	f04f 0500 	mov.w	r5, #0
 80020d2:	009d      	lsls	r5, r3, #2
 80020d4:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80020d8:	0094      	lsls	r4, r2, #2
 80020da:	4622      	mov	r2, r4
 80020dc:	462b      	mov	r3, r5
 80020de:	1812      	adds	r2, r2, r0
 80020e0:	eb41 0303 	adc.w	r3, r1, r3
 80020e4:	f04f 0000 	mov.w	r0, #0
 80020e8:	f04f 0100 	mov.w	r1, #0
 80020ec:	00d9      	lsls	r1, r3, #3
 80020ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020f2:	00d0      	lsls	r0, r2, #3
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	0a82      	lsrs	r2, r0, #10
 8002106:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800210a:	0a8b      	lsrs	r3, r1, #10
 800210c:	4613      	mov	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002110:	68fb      	ldr	r3, [r7, #12]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bcb0      	pop	{r4, r5, r7}
 800211a:	4770      	bx	lr

0800211c <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff9a 	bl	800205e <TIMER_IF_Convert_ms2Tick>
 800212a:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800212c:	f000 f8d8 	bl	80022e0 <GetTimerTicks>
 8002130:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002132:	e000      	b.n	8002136 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002134:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002136:	f000 f8d3 	bl	80022e0 <GetTimerTicks>
 800213a:	4602      	mov	r2, r0
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	429a      	cmp	r2, r3
 8002144:	d8f6      	bhi.n	8002134 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002146:	bf00      	nop
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002158:	f018 f86a 	bl	801a230 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800216c:	f000 f8a8 	bl	80022c0 <TIMER_IF_BkUp_Read_MSBticks>
 8002170:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3301      	adds	r3, #1
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f892 	bl	80022a0 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002184:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002188:	b088      	sub	sp, #32
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002192:	f000 f8a5 	bl	80022e0 <GetTimerTicks>
 8002196:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002198:	f000 f892 	bl	80022c0 <TIMER_IF_BkUp_Read_MSBticks>
 800219c:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	0003      	movs	r3, r0
 80021b0:	2200      	movs	r2, #0
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	4608      	mov	r0, r1
 80021b6:	f04f 0100 	mov.w	r1, #0
 80021ba:	eb12 0800 	adds.w	r8, r2, r0
 80021be:	eb43 0901 	adc.w	r9, r3, r1
 80021c2:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80021c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	0a82      	lsrs	r2, r0, #10
 80021d4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80021d8:	0a8b      	lsrs	r3, r1, #10
 80021da:	4613      	mov	r3, r2
 80021dc:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	461a      	mov	r2, r3
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80021ea:	f04f 0100 	mov.w	r1, #0
 80021ee:	ea02 0400 	and.w	r4, r2, r0
 80021f2:	ea03 0501 	and.w	r5, r3, r1
 80021f6:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff4b 	bl	8002098 <TIMER_IF_Convert_Tick2ms>
 8002202:	4603      	mov	r3, r0
 8002204:	b29a      	uxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 800220a:	69fb      	ldr	r3, [r7, #28]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3720      	adds	r7, #32
 8002210:	46bd      	mov	sp, r7
 8002212:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002218 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	2100      	movs	r1, #0
 8002224:	4803      	ldr	r0, [pc, #12]	; (8002234 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002226:	f005 f909 	bl	800743c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	2000164c 	.word	0x2000164c

08002238 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	2101      	movs	r1, #1
 8002244:	4803      	ldr	r0, [pc, #12]	; (8002254 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002246:	f005 f8f9 	bl	800743c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	2000164c 	.word	0x2000164c

08002258 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002262:	2100      	movs	r1, #0
 8002264:	4804      	ldr	r0, [pc, #16]	; (8002278 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002266:	f005 f901 	bl	800746c <HAL_RTCEx_BKUPRead>
 800226a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800226c:	687b      	ldr	r3, [r7, #4]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000164c 	.word	0x2000164c

0800227c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002286:	2101      	movs	r1, #1
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800228a:	f005 f8ef 	bl	800746c <HAL_RTCEx_BKUPRead>
 800228e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002290:	687b      	ldr	r3, [r7, #4]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000164c 	.word	0x2000164c

080022a0 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	2102      	movs	r1, #2
 80022ac:	4803      	ldr	r0, [pc, #12]	; (80022bc <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80022ae:	f005 f8c5 	bl	800743c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000164c 	.word	0x2000164c

080022c0 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80022c6:	2102      	movs	r1, #2
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80022ca:	f005 f8cf 	bl	800746c <HAL_RTCEx_BKUPRead>
 80022ce:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80022d0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000164c 	.word	0x2000164c

080022e0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80022e4:	4803      	ldr	r0, [pc, #12]	; (80022f4 <GetTimerTicks+0x14>)
 80022e6:	f7ff fdde 	bl	8001ea6 <LL_RTC_TIME_GetSubSecond>
 80022ea:	4603      	mov	r3, r0
 80022ec:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40002800 	.word	0x40002800

080022f8 <LL_AHB2_GRP1_EnableClock>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4313      	orrs	r3, r2
 800230e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002314:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800231c:	68fb      	ldr	r3, [r7, #12]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <LL_APB2_GRP1_EnableClock>:
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002334:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4313      	orrs	r3, r2
 800233e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <LL_APB2_GRP1_DisableClock>:
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	43db      	mvns	r3, r3
 800236a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800236e:	4013      	ands	r3, r2
 8002370:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <MX_USART1_UART_Init+0x90>)
 8002382:	4a23      	ldr	r2, [pc, #140]	; (8002410 <MX_USART1_UART_Init+0x94>)
 8002384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <MX_USART1_UART_Init+0x90>)
 8002388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800238c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <MX_USART1_UART_Init+0x90>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <MX_USART1_UART_Init+0x90>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <MX_USART1_UART_Init+0x90>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023a2:	220c      	movs	r2, #12
 80023a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c4:	4811      	ldr	r0, [pc, #68]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023c6:	f005 fd3c 	bl	8007e42 <HAL_UART_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80023d0:	f7ff f940 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023d4:	2100      	movs	r1, #0
 80023d6:	480d      	ldr	r0, [pc, #52]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023d8:	f007 fd69 	bl	8009eae <HAL_UARTEx_SetTxFifoThreshold>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023e2:	f7ff f937 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023e6:	2100      	movs	r1, #0
 80023e8:	4808      	ldr	r0, [pc, #32]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023ea:	f007 fd9e 	bl	8009f2a <HAL_UARTEx_SetRxFifoThreshold>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80023f4:	f7ff f92e 	bl	8001654 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80023f8:	4804      	ldr	r0, [pc, #16]	; (800240c <MX_USART1_UART_Init+0x90>)
 80023fa:	f007 fd1d 	bl	8009e38 <HAL_UARTEx_EnableFifoMode>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002404:	f7ff f926 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	200016f0 	.word	0x200016f0
 8002410:	40013800 	.word	0x40013800

08002414 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b096      	sub	sp, #88	; 0x58
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2238      	movs	r2, #56	; 0x38
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f018 fb09 	bl	801aa4c <memset>
  if(uartHandle->Instance==USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2f      	ldr	r2, [pc, #188]	; (80024fc <HAL_UART_MspInit+0xe8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d156      	bne.n	80024f2 <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002444:	2301      	movs	r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002448:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800244c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	4618      	mov	r0, r3
 8002454:	f004 fb82 	bl	8006b5c <HAL_RCCEx_PeriphCLKConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800245e:	f7ff f8f9 	bl	8001654 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002462:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002466:	f7ff ff5f 	bl	8002328 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	2002      	movs	r0, #2
 800246c:	f7ff ff44 	bl	80022f8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002470:	23c0      	movs	r3, #192	; 0xc0
 8002472:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002480:	2307      	movs	r3, #7
 8002482:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002484:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002488:	4619      	mov	r1, r3
 800248a:	481d      	ldr	r0, [pc, #116]	; (8002500 <HAL_UART_MspInit+0xec>)
 800248c:	f002 f902 	bl	8004694 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_UART_MspInit+0xf0>)
 8002492:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_UART_MspInit+0xf4>)
 8002494:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_UART_MspInit+0xf0>)
 8002498:	2212      	movs	r2, #18
 800249a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_UART_MspInit+0xf0>)
 800249e:	2210      	movs	r2, #16
 80024a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024c6:	480f      	ldr	r0, [pc, #60]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024c8:	f001 fcce 	bl	8003e68 <HAL_DMA_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80024d2:	f7ff f8bf 	bl	8001654 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024da:	679a      	str	r2, [r3, #120]	; 0x78
 80024dc:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_UART_MspInit+0xf0>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2102      	movs	r1, #2
 80024e6:	2024      	movs	r0, #36	; 0x24
 80024e8:	f001 fc87 	bl	8003dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024ec:	2024      	movs	r0, #36	; 0x24
 80024ee:	f001 fc9e 	bl	8003e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024f2:	bf00      	nop
 80024f4:	3758      	adds	r7, #88	; 0x58
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40013800 	.word	0x40013800
 8002500:	48000400 	.word	0x48000400
 8002504:	20001690 	.word	0x20001690
 8002508:	40020008 	.word	0x40020008

0800250c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <HAL_UART_MspDeInit+0x3c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d10f      	bne.n	800253e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800251e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002522:	f7ff ff19 	bl	8002358 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002526:	21c0      	movs	r1, #192	; 0xc0
 8002528:	4808      	ldr	r0, [pc, #32]	; (800254c <HAL_UART_MspDeInit+0x40>)
 800252a:	f002 fa13 	bl	8004954 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002532:	4618      	mov	r0, r3
 8002534:	f001 fd40 	bl	8003fb8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002538:	2024      	movs	r0, #36	; 0x24
 800253a:	f001 fc86 	bl	8003e4a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40013800 	.word	0x40013800
 800254c:	48000400 	.word	0x48000400

08002550 <LL_APB2_GRP1_ForceReset>:
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800255e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4313      	orrs	r3, r2
 8002566:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <LL_APB2_GRP1_ReleaseReset>:
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	43db      	mvns	r3, r3
 8002584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002588:	4013      	ands	r3, r2
 800258a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
	...

08002598 <LL_EXTI_EnableIT_0_31>:
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <LL_EXTI_EnableIT_0_31+0x24>)
 80025a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80025a6:	4905      	ldr	r1, [pc, #20]	; (80025bc <LL_EXTI_EnableIT_0_31+0x24>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	58000800 	.word	0x58000800

080025c0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <vcom_Init+0x28>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80025ce:	f7fe fee3 	bl	8001398 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80025d2:	f7ff fed3 	bl	800237c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80025d6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80025da:	f7ff ffdd 	bl	8002598 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80025de:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000150 	.word	0x20000150

080025ec <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80025f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025f4:	f7ff ffac 	bl	8002550 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80025f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025fc:	f7ff ffb9 	bl	8002572 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <vcom_DeInit+0x28>)
 8002602:	f7ff ff83 	bl	800250c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002606:	200f      	movs	r0, #15
 8002608:	f001 fc1f 	bl	8003e4a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800260c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200016f0 	.word	0x200016f0

08002618 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	461a      	mov	r2, r3
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4804      	ldr	r0, [pc, #16]	; (800263c <vcom_Trace_DMA+0x24>)
 800262c:	f005 fcb0 	bl	8007f90 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002630:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200016f0 	.word	0x200016f0

08002640 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002648:	4a19      	ldr	r2, [pc, #100]	; (80026b0 <vcom_ReceiveInit+0x70>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800264e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002652:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002654:	f107 0308 	add.w	r3, r7, #8
 8002658:	e893 0006 	ldmia.w	r3, {r1, r2}
 800265c:	4815      	ldr	r0, [pc, #84]	; (80026b4 <vcom_ReceiveInit+0x74>)
 800265e:	f007 fb5e 	bl	8009d1e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002662:	bf00      	nop
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <vcom_ReceiveInit+0x74>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002672:	d0f7      	beq.n	8002664 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002674:	bf00      	nop
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <vcom_ReceiveInit+0x74>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002684:	d1f7      	bne.n	8002676 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <vcom_ReceiveInit+0x74>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <vcom_ReceiveInit+0x74>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002694:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002696:	4807      	ldr	r0, [pc, #28]	; (80026b4 <vcom_ReceiveInit+0x74>)
 8002698:	f007 fb9c 	bl	8009dd4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800269c:	2201      	movs	r2, #1
 800269e:	4906      	ldr	r1, [pc, #24]	; (80026b8 <vcom_ReceiveInit+0x78>)
 80026a0:	4804      	ldr	r0, [pc, #16]	; (80026b4 <vcom_ReceiveInit+0x74>)
 80026a2:	f005 fc1f 	bl	8007ee4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80026a6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000154 	.word	0x20000154
 80026b4:	200016f0 	.word	0x200016f0
 80026b8:	20001780 	.word	0x20001780

080026bc <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <HAL_UART_TxCpltCallback+0x18>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2000      	movs	r0, #0
 80026ca:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000150 	.word	0x20000150

080026d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_UART_RxCpltCallback+0x38>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_UART_RxCpltCallback+0x26>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_UART_RxCpltCallback+0x38>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2200      	movs	r2, #0
 80026f8:	2101      	movs	r1, #1
 80026fa:	4806      	ldr	r0, [pc, #24]	; (8002714 <HAL_UART_RxCpltCallback+0x3c>)
 80026fc:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 80026fe:	2201      	movs	r2, #1
 8002700:	4904      	ldr	r1, [pc, #16]	; (8002714 <HAL_UART_RxCpltCallback+0x3c>)
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f005 fbee 	bl	8007ee4 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000154 	.word	0x20000154
 8002714:	20001780 	.word	0x20001780

08002718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002718:	480d      	ldr	r0, [pc, #52]	; (8002750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800271a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800271c:	f7ff fbbd 	bl	8001e9a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002720:	480c      	ldr	r0, [pc, #48]	; (8002754 <LoopForever+0x6>)
  ldr r1, =_edata
 8002722:	490d      	ldr	r1, [pc, #52]	; (8002758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <LoopForever+0xe>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002728:	e002      	b.n	8002730 <LoopCopyDataInit>

0800272a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800272c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272e:	3304      	adds	r3, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002734:	d3f9      	bcc.n	800272a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002738:	4c0a      	ldr	r4, [pc, #40]	; (8002764 <LoopForever+0x16>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800273c:	e001      	b.n	8002742 <LoopFillZerobss>

0800273e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002740:	3204      	adds	r2, #4

08002742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002744:	d3fb      	bcc.n	800273e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002746:	f018 f95d 	bl	801aa04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800274a:	f7fe ff18 	bl	800157e <main>

0800274e <LoopForever>:

LoopForever:
    b LoopForever
 800274e:	e7fe      	b.n	800274e <LoopForever>
  ldr   r0, =_estack
 8002750:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 800275c:	0801b9a0 	.word	0x0801b9a0
  ldr r2, =_sbss
 8002760:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8002764:	20001838 	.word	0x20001838

08002768 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC_IRQHandler>

0800276a <LL_AHB2_GRP1_EnableClock>:
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4313      	orrs	r3, r2
 8002780:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4013      	ands	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800278e:	68fb      	ldr	r3, [r7, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
	...

0800279c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	4a18      	ldr	r2, [pc, #96]	; (800281c <BSP_LED_Init+0x80>)
 80027ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e024      	b.n	8002814 <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80027ca:	2002      	movs	r0, #2
 80027cc:	f7ff ffcd 	bl	800276a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <BSP_LED_Init+0x80>)
 80027d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027d8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80027da:	2301      	movs	r3, #1
 80027dc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <BSP_LED_Init+0x84>)
 80027ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ee:	f107 020c 	add.w	r2, r7, #12
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 ff4d 	bl	8004694 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	4a08      	ldr	r2, [pc, #32]	; (8002820 <BSP_LED_Init+0x84>)
 80027fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	4a05      	ldr	r2, [pc, #20]	; (800281c <BSP_LED_Init+0x80>)
 8002806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800280a:	2200      	movs	r2, #0
 800280c:	4619      	mov	r1, r3
 800280e:	f002 f96f 	bl	8004af0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	0801b4b8 	.word	0x0801b4b8
 8002820:	20000004 	.word	0x20000004

08002824 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	4a0c      	ldr	r2, [pc, #48]	; (8002864 <BSP_LED_On+0x40>)
 8002832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 800283e:	2300      	movs	r3, #0
 8002840:	e00c      	b.n	800285c <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	4a08      	ldr	r2, [pc, #32]	; (8002868 <BSP_LED_On+0x44>)
 8002846:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	4a05      	ldr	r2, [pc, #20]	; (8002864 <BSP_LED_On+0x40>)
 800284e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002852:	2200      	movs	r2, #0
 8002854:	4619      	mov	r1, r3
 8002856:	f002 f94b 	bl	8004af0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	0801b4b8 	.word	0x0801b4b8
 8002868:	20000004 	.word	0x20000004

0800286c <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <BSP_LED_Off+0x40>)
 800287a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800287e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002886:	2300      	movs	r3, #0
 8002888:	e00c      	b.n	80028a4 <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <BSP_LED_Off+0x44>)
 800288e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	4a05      	ldr	r2, [pc, #20]	; (80028ac <BSP_LED_Off+0x40>)
 8002896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800289a:	2201      	movs	r2, #1
 800289c:	4619      	mov	r1, r3
 800289e:	f002 f927 	bl	8004af0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	0801b4b8 	.word	0x0801b4b8
 80028b0:	20000004 	.word	0x20000004

080028b4 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <BSP_LED_Toggle+0x40>)
 80028c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d101      	bne.n	80028d2 <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e00c      	b.n	80028ec <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4a08      	ldr	r2, [pc, #32]	; (80028f8 <BSP_LED_Toggle+0x44>)
 80028d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	4905      	ldr	r1, [pc, #20]	; (80028f4 <BSP_LED_Toggle+0x40>)
 80028de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80028e2:	4619      	mov	r1, r3
 80028e4:	4610      	mov	r0, r2
 80028e6:	f002 f91a 	bl	8004b1e <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	0801b4b8 	.word	0x0801b4b8
 80028f8:	20000004 	.word	0x20000004

080028fc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	460a      	mov	r2, r1
 8002906:	71fb      	strb	r3, [r7, #7]
 8002908:	4613      	mov	r3, r2
 800290a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	4a30      	ldr	r2, [pc, #192]	; (80029e0 <BSP_PB_Init+0xe4>)
 8002920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 8002928:	2300      	movs	r3, #0
 800292a:	e055      	b.n	80029d8 <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <BSP_PB_Init+0x3c>
 8002932:	2002      	movs	r0, #2
 8002934:	f7ff ff19 	bl	800276a <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	4a2a      	ldr	r2, [pc, #168]	; (80029e4 <BSP_PB_Init+0xe8>)
 800293c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002940:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002942:	2301      	movs	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002946:	2302      	movs	r3, #2
 8002948:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800294a:	79bb      	ldrb	r3, [r7, #6]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10c      	bne.n	800296a <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <BSP_PB_Init+0xec>)
 8002958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295c:	f107 020c 	add.w	r2, r7, #12
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f001 fe96 	bl	8004694 <HAL_GPIO_Init>
 8002968:	e035      	b.n	80029d6 <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800296a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800296e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	4a1d      	ldr	r2, [pc, #116]	; (80029e8 <BSP_PB_Init+0xec>)
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	f107 020c 	add.w	r2, r7, #12
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f001 fe88 	bl	8004694 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4a18      	ldr	r2, [pc, #96]	; (80029ec <BSP_PB_Init+0xf0>)
 800298a:	441a      	add	r2, r3
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4918      	ldr	r1, [pc, #96]	; (80029f0 <BSP_PB_Init+0xf4>)
 8002990:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002994:	4619      	mov	r1, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f001 fe69 	bl	800466e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4a12      	ldr	r2, [pc, #72]	; (80029ec <BSP_PB_Init+0xf0>)
 80029a2:	1898      	adds	r0, r3, r2
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <BSP_PB_Init+0xe4>)
 80029a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ac:	461a      	mov	r2, r3
 80029ae:	2100      	movs	r1, #0
 80029b0:	f001 fe44 	bl	800463c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <BSP_PB_Init+0xf8>)
 80029b8:	56d0      	ldrsb	r0, [r2, r3]
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <BSP_PB_Init+0xfc>)
 80029be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c2:	2200      	movs	r2, #0
 80029c4:	4619      	mov	r1, r3
 80029c6:	f001 fa18 	bl	8003dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	4a09      	ldr	r2, [pc, #36]	; (80029f4 <BSP_PB_Init+0xf8>)
 80029ce:	56d3      	ldrsb	r3, [r2, r3]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f001 fa2c 	bl	8003e2e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	2000001c 	.word	0x2000001c
 80029e4:	0801b4c0 	.word	0x0801b4c0
 80029e8:	20000010 	.word	0x20000010
 80029ec:	20001784 	.word	0x20001784
 80029f0:	0801b4cc 	.word	0x0801b4cc
 80029f4:	0801b4c8 	.word	0x0801b4c8
 80029f8:	20000028 	.word	0x20000028

080029fc <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7ff fff1 	bl	80029fc <BSP_PB_Callback>
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002a32:	2310      	movs	r3, #16
 8002a34:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002a36:	2301      	movs	r3, #1
 8002a38:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4a:	f001 fe23 	bl	8004694 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002a4e:	2320      	movs	r3, #32
 8002a50:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a5a:	f001 fe1b 	bl	8004694 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2120      	movs	r1, #32
 8002a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a66:	f002 f843 	bl	8004af0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2110      	movs	r1, #16
 8002a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a72:	f002 f83d 	bl	8004af0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d83f      	bhi.n	8002b10 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002a90:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002aa9 	.word	0x08002aa9
 8002a9c:	08002ac3 	.word	0x08002ac3
 8002aa0:	08002add 	.word	0x08002add
 8002aa4:	08002af7 	.word	0x08002af7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2110      	movs	r1, #16
 8002aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab0:	f002 f81e 	bl	8004af0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2120      	movs	r1, #32
 8002ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002abc:	f002 f818 	bl	8004af0 <HAL_GPIO_WritePin>
      break;      
 8002ac0:	e027      	b.n	8002b12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	2110      	movs	r1, #16
 8002ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aca:	f002 f811 	bl	8004af0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad6:	f002 f80b 	bl	8004af0 <HAL_GPIO_WritePin>
      break;
 8002ada:	e01a      	b.n	8002b12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002adc:	2201      	movs	r2, #1
 8002ade:	2110      	movs	r1, #16
 8002ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ae4:	f002 f804 	bl	8004af0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2120      	movs	r1, #32
 8002aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af0:	f001 fffe 	bl	8004af0 <HAL_GPIO_WritePin>
      break;
 8002af4:	e00d      	b.n	8002b12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002af6:	2200      	movs	r2, #0
 8002af8:	2110      	movs	r1, #16
 8002afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002afe:	f001 fff7 	bl	8004af0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002b02:	2201      	movs	r2, #1
 8002b04:	2120      	movs	r1, #32
 8002b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b0a:	f001 fff1 	bl	8004af0 <HAL_GPIO_WritePin>
      break;
 8002b0e:	e000      	b.n	8002b12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002b10:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002b20:	2302      	movs	r3, #2
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002b2e:	2301      	movs	r3, #1
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002b3c:	2301      	movs	r3, #1
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
	...

08002b48 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a03      	ldr	r2, [pc, #12]	; (8002b60 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6053      	str	r3, [r2, #4]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	e0042000 	.word	0xe0042000

08002b64 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a03      	ldr	r2, [pc, #12]	; (8002b7c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6053      	str	r3, [r2, #4]
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	e0042000 	.word	0xe0042000

08002b80 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a03      	ldr	r2, [pc, #12]	; (8002b98 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002b8a:	f043 0302 	orr.w	r3, r3, #2
 8002b8e:	6053      	str	r3, [r2, #4]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	e0042000 	.word	0xe0042000

08002b9c <LL_DBGMCU_DisableDBGStopMode>:
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002ba6:	f023 0302 	bic.w	r3, r3, #2
 8002baa:	6053      	str	r3, [r2, #4]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	e0042000 	.word	0xe0042000

08002bb8 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a03      	ldr	r2, [pc, #12]	; (8002bd0 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	6053      	str	r3, [r2, #4]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	e0042000 	.word	0xe0042000

08002bd4 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a03      	ldr	r2, [pc, #12]	; (8002bec <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002bde:	f023 0304 	bic.w	r3, r3, #4
 8002be2:	6053      	str	r3, [r2, #4]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	e0042000 	.word	0xe0042000

08002bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bfa:	2003      	movs	r0, #3
 8002bfc:	f001 f8f2 	bl	8003de4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c00:	f003 fdca 	bl	8006798 <HAL_RCC_GetHCLKFreq>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_Init+0x3c>)
 8002c08:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c0a:	200f      	movs	r0, #15
 8002c0c:	f7ff f808 	bl	8001c20 <HAL_InitTick>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	71fb      	strb	r3, [r7, #7]
 8002c1a:	e001      	b.n	8002c20 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c1c:	f7fe fdd6 	bl	80017cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c20:	79fb      	ldrb	r3, [r7, #7]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000000 	.word	0x20000000

08002c30 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002c34:	4b02      	ldr	r3, [pc, #8]	; (8002c40 <HAL_GetUIDw0+0x10>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	1fff7590 	.word	0x1fff7590

08002c44 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002c48:	4b02      	ldr	r3, [pc, #8]	; (8002c54 <HAL_GetUIDw1+0x10>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	1fff7594 	.word	0x1fff7594

08002c58 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002c5c:	4b02      	ldr	r3, [pc, #8]	; (8002c68 <HAL_GetUIDw2+0x10>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	1fff7598 	.word	0x1fff7598

08002c6c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002c70:	f7ff ff6a 	bl	8002b48 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002c7c:	f7ff ff72 	bl	8002b64 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002c88:	f7ff ff7a 	bl	8002b80 <LL_DBGMCU_EnableDBGStopMode>
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002c94:	f7ff ff82 	bl	8002b9c <LL_DBGMCU_DisableDBGStopMode>
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002ca0:	f7ff ff8a 	bl	8002bb8 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002cac:	f7ff ff92 	bl	8002bd4 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	601a      	str	r2, [r3, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2107      	movs	r1, #7
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	210f      	movs	r1, #15
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	401a      	ands	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	f003 010f 	and.w	r1, r3, #15
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	431a      	orrs	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	401a      	ands	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	43db      	mvns	r3, r3
 8002df4:	401a      	ands	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	0219      	lsls	r1, r3, #8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	400b      	ands	r3, r1
 8002dfe:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e06:	431a      	orrs	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e26:	f023 0317 	bic.w	r3, r3, #23
 8002e2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e4c:	f023 0317 	bic.w	r3, r3, #23
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6093      	str	r3, [r2, #8]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e72:	d101      	bne.n	8002e78 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e94:	f023 0317 	bic.w	r3, r3, #23
 8002e98:	f043 0201 	orr.w	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eba:	f023 0317 	bic.w	r3, r3, #23
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <LL_ADC_IsEnabled+0x18>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <LL_ADC_IsEnabled+0x1a>
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d101      	bne.n	8002f0c <LL_ADC_IsDisableOngoing+0x18>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <LL_ADC_IsDisableOngoing+0x1a>
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f28:	f023 0317 	bic.w	r3, r3, #23
 8002f2c:	f043 0204 	orr.w	r2, r3, #4
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f4e:	f023 0317 	bic.w	r3, r3, #23
 8002f52:	f043 0210 	orr.w	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d101      	bne.n	8002f7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e1ae      	b.n	8003308 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fe f8ab 	bl	8001114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff44 	bl	8002e5e <LL_ADC_IsInternalRegulatorEnabled>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d115      	bne.n	8003008 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff18 	bl	8002e16 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe6:	4b9b      	ldr	r3, [pc, #620]	; (8003254 <HAL_ADC_Init+0x2cc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	099b      	lsrs	r3, r3, #6
 8002fec:	4a9a      	ldr	r2, [pc, #616]	; (8003258 <HAL_ADC_Init+0x2d0>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ffa:	e002      	b.n	8003002 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f9      	bne.n	8002ffc <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff26 	bl	8002e5e <LL_ADC_IsInternalRegulatorEnabled>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10d      	bne.n	8003034 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff93 	bl	8002f64 <LL_ADC_REG_IsConversionOngoing>
 800303e:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 8154 	bne.w	80032f6 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f040 8150 	bne.w	80032f6 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800305e:	f043 0202 	orr.w	r2, r3, #2
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ff30 	bl	8002ed0 <LL_ADC_IsEnabled>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d14f      	bne.n	8003116 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f023 0118 	bic.w	r1, r3, #24
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003098:	4313      	orrs	r3, r2
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d111      	bne.n	80030ce <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80030b6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80030bc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80030c2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	4b61      	ldr	r3, [pc, #388]	; (800325c <HAL_ADC_Init+0x2d4>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	6979      	ldr	r1, [r7, #20]
 80030de:	430b      	orrs	r3, r1
 80030e0:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80030ea:	d014      	beq.n	8003116 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80030f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f4:	d00f      	beq.n	8003116 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80030fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030fe:	d00a      	beq.n	8003116 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003100:	4b57      	ldr	r3, [pc, #348]	; (8003260 <HAL_ADC_Init+0x2d8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003110:	4953      	ldr	r1, [pc, #332]	; (8003260 <HAL_ADC_Init+0x2d8>)
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7e1b      	ldrb	r3, [r3, #24]
 800311a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	7e5b      	ldrb	r3, [r3, #25]
 8003120:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003122:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	7e9b      	ldrb	r3, [r3, #26]
 8003128:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800312a:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003130:	2a00      	cmp	r2, #0
 8003132:	d002      	beq.n	800313a <HAL_ADC_Init+0x1b2>
 8003134:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003138:	e000      	b.n	800313c <HAL_ADC_Init+0x1b4>
 800313a:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800313c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003142:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	da04      	bge.n	8003156 <HAL_ADC_Init+0x1ce>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003154:	e001      	b.n	800315a <HAL_ADC_Init+0x1d2>
 8003156:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 800315a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003162:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003164:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d114      	bne.n	80031a0 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7e9b      	ldrb	r3, [r3, #26]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d104      	bne.n	8003188 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	e00b      	b.n	80031a0 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d009      	beq.n	80031bc <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80031b4:	4313      	orrs	r3, r2
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80031c6:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	4b22      	ldr	r3, [pc, #136]	; (8003264 <HAL_ADC_Init+0x2dc>)
 80031dc:	4013      	ands	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	6979      	ldr	r1, [r7, #20]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f0:	461a      	mov	r2, r3
 80031f2:	2100      	movs	r1, #0
 80031f4:	f7ff fd7d 	bl	8002cf2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	461a      	mov	r2, r3
 8003202:	4919      	ldr	r1, [pc, #100]	; (8003268 <HAL_ADC_Init+0x2e0>)
 8003204:	f7ff fd75 	bl	8002cf2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d108      	bne.n	8003222 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f062 020f 	orn	r2, r2, #15
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
 8003220:	e044      	b.n	80032ac <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800322a:	d13f      	bne.n	80032ac <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	e00c      	b.n	800324c <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	2b0f      	cmp	r3, #15
 8003244:	d012      	beq.n	800326c <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	3301      	adds	r3, #1
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b07      	cmp	r3, #7
 8003250:	d9ef      	bls.n	8003232 <HAL_ADC_Init+0x2aa>
 8003252:	e00c      	b.n	800326e <HAL_ADC_Init+0x2e6>
 8003254:	20000000 	.word	0x20000000
 8003258:	053e2d63 	.word	0x053e2d63
 800325c:	1ffffc02 	.word	0x1ffffc02
 8003260:	40012708 	.word	0x40012708
 8003264:	dffffc02 	.word	0xdffffc02
 8003268:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 800326c:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d108      	bne.n	8003286 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f062 020f 	orn	r2, r2, #15
 8003282:	629a      	str	r2, [r3, #40]	; 0x28
 8003284:	e012      	b.n	80032ac <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	3b01      	subs	r3, #1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	f003 031c 	and.w	r3, r3, #28
 8003298:	f06f 020f 	mvn.w	r2, #15
 800329c:	fa02 f103 	lsl.w	r1, r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	4b17      	ldr	r3, [pc, #92]	; (8003310 <HAL_ADC_Init+0x388>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d10b      	bne.n	80032d4 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	f043 0201 	orr.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80032d2:	e018      	b.n	8003306 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	f023 0312 	bic.w	r3, r3, #18
 80032dc:	f043 0210 	orr.w	r2, r3, #16
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	f043 0201 	orr.w	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80032f4:	e007      	b.n	8003306 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	f043 0210 	orr.w	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003306:	7ffb      	ldrb	r3, [r7, #31]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	833fffe7 	.word	0x833fffe7

08003314 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06a      	b.n	80033fc <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	f043 0202 	orr.w	r2, r3, #2
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fabe 	bl	80038b4 <ADC_ConversionStop>
 8003338:	4603      	mov	r3, r0
 800333a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fb82 	bl	8003a4c <ADC_Disable>
 8003348:	4603      	mov	r3, r0
 800334a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fd6d 	bl	8002e3c <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003370:	f023 0303 	bic.w	r3, r3, #3
 8003374:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f240 329f 	movw	r2, #927	; 0x39f
 800337e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68d9      	ldr	r1, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_ADC_DeInit+0xf0>)
 800338c:	400b      	ands	r3, r1
 800338e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800339e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0207 	bic.w	r2, r2, #7
 80033ae:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a1a      	ldr	r2, [r3, #32]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80033be:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2200      	movs	r2, #0
 80033cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <HAL_ADC_DeInit+0xf4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a0d      	ldr	r2, [pc, #52]	; (8003408 <HAL_ADC_DeInit+0xf4>)
 80033d4:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80033d8:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd feae 	bl	800113c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	833e0200 	.word	0x833e0200
 8003408:	40012708 	.word	0x40012708

0800340c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fda3 	bl	8002f64 <LL_ADC_REG_IsConversionOngoing>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d132      	bne.n	800348a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_ADC_Start+0x26>
 800342e:	2302      	movs	r3, #2
 8003430:	e02e      	b.n	8003490 <HAL_ADC_Start+0x84>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa80 	bl	8003940 <ADC_Enable>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d11a      	bne.n	8003480 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	221c      	movs	r2, #28
 800346a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fd4d 	bl	8002f18 <LL_ADC_REG_StartConversion>
 800347e:	e006      	b.n	800348e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003488:	e001      	b.n	800348e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800348a:	2302      	movs	r3, #2
 800348c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800348e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_ADC_Stop+0x16>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e022      	b.n	80034f4 <HAL_ADC_Stop+0x5c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f9fc 	bl	80038b4 <ADC_ConversionStop>
 80034bc:	4603      	mov	r3, r0
 80034be:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d111      	bne.n	80034ea <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fac0 	bl	8003a4c <ADC_Disable>
 80034cc:	4603      	mov	r3, r0
 80034ce:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034de:	f023 0301 	bic.w	r3, r3, #1
 80034e2:	f043 0201 	orr.w	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	2b08      	cmp	r3, #8
 800350c:	d102      	bne.n	8003514 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800350e:	2308      	movs	r3, #8
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e010      	b.n	8003536 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	f043 0220 	orr.w	r2, r3, #32
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e077      	b.n	8003622 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003532:	2304      	movs	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003536:	f7fe fb7d 	bl	8001c34 <HAL_GetTick>
 800353a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800353c:	e021      	b.n	8003582 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d01d      	beq.n	8003582 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003546:	f7fe fb75 	bl	8001c34 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <HAL_ADC_PollForConversion+0x60>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d112      	bne.n	8003582 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10b      	bne.n	8003582 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	f043 0204 	orr.w	r2, r3, #4
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e04f      	b.n	8003622 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0d6      	beq.n	800353e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fbc4 	bl	8002d2e <LL_ADC_REG_IsTriggerSourceSWStart>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d031      	beq.n	8003610 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	7e9b      	ldrb	r3, [r3, #26]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d12d      	bne.n	8003610 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d126      	bne.n	8003610 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fccc 	bl	8002f64 <LL_ADC_REG_IsConversionOngoing>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d112      	bne.n	80035f8 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 020c 	bic.w	r2, r2, #12
 80035e0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	659a      	str	r2, [r3, #88]	; 0x58
 80035f6:	e00b      	b.n	8003610 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	f043 0201 	orr.w	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	7e1b      	ldrb	r3, [r3, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	220c      	movs	r2, #12
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
	...

08003644 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_ADC_ConfigChannel+0x28>
 8003668:	2302      	movs	r3, #2
 800366a:	e110      	b.n	800388e <HAL_ADC_ConfigChannel+0x24a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fc73 	bl	8002f64 <LL_ADC_REG_IsConversionOngoing>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	f040 80f7 	bne.w	8003874 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	f000 80b1 	beq.w	80037f2 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003698:	d004      	beq.n	80036a4 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800369e:	4a7e      	ldr	r2, [pc, #504]	; (8003898 <HAL_ADC_ConfigChannel+0x254>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d108      	bne.n	80036b6 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f7ff fb70 	bl	8002d94 <LL_ADC_REG_SetSequencerChAdd>
 80036b4:	e041      	b.n	800373a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	210f      	movs	r1, #15
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	401a      	ands	r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0xa0>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	0e9b      	lsrs	r3, r3, #26
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	e011      	b.n	8003708 <HAL_ADC_ConfigChannel+0xc4>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80036fc:	2320      	movs	r3, #32
 80036fe:	e003      	b.n	8003708 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	6839      	ldr	r1, [r7, #0]
 800370a:	6849      	ldr	r1, [r1, #4]
 800370c:	f001 011f 	and.w	r1, r1, #31
 8003710:	408b      	lsls	r3, r1
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	429a      	cmp	r2, r3
 8003726:	d808      	bhi.n	800373a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6859      	ldr	r1, [r3, #4]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	f7ff fb0c 	bl	8002d52 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6819      	ldr	r1, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	461a      	mov	r2, r3
 8003748:	f7ff fb49 	bl	8002dde <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f280 8097 	bge.w	8003884 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003756:	4851      	ldr	r0, [pc, #324]	; (800389c <HAL_ADC_ConfigChannel+0x258>)
 8003758:	f7ff fabe 	bl	8002cd8 <LL_ADC_GetCommonPathInternalCh>
 800375c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a4f      	ldr	r2, [pc, #316]	; (80038a0 <HAL_ADC_ConfigChannel+0x25c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d120      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800376e:	2b00      	cmp	r3, #0
 8003770:	d11b      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003778:	4619      	mov	r1, r3
 800377a:	4848      	ldr	r0, [pc, #288]	; (800389c <HAL_ADC_ConfigChannel+0x258>)
 800377c:	f7ff fa9a 	bl	8002cb4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003780:	4b48      	ldr	r3, [pc, #288]	; (80038a4 <HAL_ADC_ConfigChannel+0x260>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	4a48      	ldr	r2, [pc, #288]	; (80038a8 <HAL_ADC_ConfigChannel+0x264>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	4613      	mov	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800379a:	e002      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	3b01      	subs	r3, #1
 80037a0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f9      	bne.n	800379c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037a8:	e06c      	b.n	8003884 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a3f      	ldr	r2, [pc, #252]	; (80038ac <HAL_ADC_ConfigChannel+0x268>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d10c      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x18a>
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d107      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037c4:	4619      	mov	r1, r3
 80037c6:	4835      	ldr	r0, [pc, #212]	; (800389c <HAL_ADC_ConfigChannel+0x258>)
 80037c8:	f7ff fa74 	bl	8002cb4 <LL_ADC_SetCommonPathInternalCh>
 80037cc:	e05a      	b.n	8003884 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a37      	ldr	r2, [pc, #220]	; (80038b0 <HAL_ADC_ConfigChannel+0x26c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d155      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d150      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037e8:	4619      	mov	r1, r3
 80037ea:	482c      	ldr	r0, [pc, #176]	; (800389c <HAL_ADC_ConfigChannel+0x258>)
 80037ec:	f7ff fa62 	bl	8002cb4 <LL_ADC_SetCommonPathInternalCh>
 80037f0:	e048      	b.n	8003884 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037fa:	d004      	beq.n	8003806 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003800:	4a25      	ldr	r2, [pc, #148]	; (8003898 <HAL_ADC_ConfigChannel+0x254>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d107      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7ff fad1 	bl	8002db8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	da32      	bge.n	8003884 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800381e:	481f      	ldr	r0, [pc, #124]	; (800389c <HAL_ADC_ConfigChannel+0x258>)
 8003820:	f7ff fa5a 	bl	8002cd8 <LL_ADC_GetCommonPathInternalCh>
 8003824:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a1d      	ldr	r2, [pc, #116]	; (80038a0 <HAL_ADC_ConfigChannel+0x25c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d107      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003836:	4619      	mov	r1, r3
 8003838:	4818      	ldr	r0, [pc, #96]	; (800389c <HAL_ADC_ConfigChannel+0x258>)
 800383a:	f7ff fa3b 	bl	8002cb4 <LL_ADC_SetCommonPathInternalCh>
 800383e:	e021      	b.n	8003884 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a19      	ldr	r2, [pc, #100]	; (80038ac <HAL_ADC_ConfigChannel+0x268>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d107      	bne.n	800385a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003850:	4619      	mov	r1, r3
 8003852:	4812      	ldr	r0, [pc, #72]	; (800389c <HAL_ADC_ConfigChannel+0x258>)
 8003854:	f7ff fa2e 	bl	8002cb4 <LL_ADC_SetCommonPathInternalCh>
 8003858:	e014      	b.n	8003884 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a14      	ldr	r2, [pc, #80]	; (80038b0 <HAL_ADC_ConfigChannel+0x26c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d10f      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800386a:	4619      	mov	r1, r3
 800386c:	480b      	ldr	r0, [pc, #44]	; (800389c <HAL_ADC_ConfigChannel+0x258>)
 800386e:	f7ff fa21 	bl	8002cb4 <LL_ADC_SetCommonPathInternalCh>
 8003872:	e007      	b.n	8003884 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800388c:	7ffb      	ldrb	r3, [r7, #31]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	80000004 	.word	0x80000004
 800389c:	40012708 	.word	0x40012708
 80038a0:	b0001000 	.word	0xb0001000
 80038a4:	20000000 	.word	0x20000000
 80038a8:	053e2d63 	.word	0x053e2d63
 80038ac:	b8004000 	.word	0xb8004000
 80038b0:	b4002000 	.word	0xb4002000

080038b4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fb4f 	bl	8002f64 <LL_ADC_REG_IsConversionOngoing>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d033      	beq.n	8003934 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fb0f 	bl	8002ef4 <LL_ADC_IsDisableOngoing>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fb2c 	bl	8002f3e <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038e6:	f7fe f9a5 	bl	8001c34 <HAL_GetTick>
 80038ea:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80038ec:	e01b      	b.n	8003926 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80038ee:	f7fe f9a1 	bl	8001c34 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d914      	bls.n	8003926 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	f043 0210 	orr.w	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e007      	b.n	8003936 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1dc      	bne.n	80038ee <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003948:	2300      	movs	r3, #0
 800394a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff fabd 	bl	8002ed0 <LL_ADC_IsEnabled>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d169      	bne.n	8003a30 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <ADC_Enable+0xfc>)
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	f043 0210 	orr.w	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e055      	b.n	8003a32 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fa7a 	bl	8002e84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003990:	482b      	ldr	r0, [pc, #172]	; (8003a40 <ADC_Enable+0x100>)
 8003992:	f7ff f9a1 	bl	8002cd8 <LL_ADC_GetCommonPathInternalCh>
 8003996:	4603      	mov	r3, r0
 8003998:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00f      	beq.n	80039c0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039a0:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <ADC_Enable+0x104>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	099b      	lsrs	r3, r3, #6
 80039a6:	4a28      	ldr	r2, [pc, #160]	; (8003a48 <ADC_Enable+0x108>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	099b      	lsrs	r3, r3, #6
 80039ae:	3301      	adds	r3, #1
 80039b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039b2:	e002      	b.n	80039ba <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f9      	bne.n	80039b4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7e5b      	ldrb	r3, [r3, #25]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d033      	beq.n	8003a30 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80039c8:	f7fe f934 	bl	8001c34 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ce:	e028      	b.n	8003a22 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fa7b 	bl	8002ed0 <LL_ADC_IsEnabled>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fa4d 	bl	8002e84 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039ea:	f7fe f923 	bl	8001c34 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d914      	bls.n	8003a22 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d00d      	beq.n	8003a22 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0a:	f043 0210 	orr.w	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	f043 0201 	orr.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e007      	b.n	8003a32 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d1cf      	bne.n	80039d0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	80000017 	.word	0x80000017
 8003a40:	40012708 	.word	0x40012708
 8003a44:	20000000 	.word	0x20000000
 8003a48:	053e2d63 	.word	0x053e2d63

08003a4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fa4b 	bl	8002ef4 <LL_ADC_IsDisableOngoing>
 8003a5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fa33 	bl	8002ed0 <LL_ADC_IsEnabled>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d047      	beq.n	8003b00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d144      	bne.n	8003b00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0305 	and.w	r3, r3, #5
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d10c      	bne.n	8003a9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fa0e 	bl	8002eaa <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2203      	movs	r2, #3
 8003a94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a96:	f7fe f8cd 	bl	8001c34 <HAL_GetTick>
 8003a9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a9c:	e029      	b.n	8003af2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	f043 0210 	orr.w	r2, r3, #16
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e023      	b.n	8003b02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aba:	f7fe f8bb 	bl	8001c34 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d914      	bls.n	8003af2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00d      	beq.n	8003af2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	f043 0210 	orr.w	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e007      	b.n	8003b02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1dc      	bne.n	8003aba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <LL_ADC_IsEnabled>:
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <LL_ADC_IsEnabled+0x18>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <LL_ADC_IsEnabled+0x1a>
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <LL_ADC_IsCalibrationOnGoing>:
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b42:	d101      	bne.n	8003b48 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_ADCEx_Calibration_Start+0x1a>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e068      	b.n	8003c40 <HAL_ADCEx_Calibration_Start+0xec>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ff68 	bl	8003a4c <ADC_Disable>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ffc0 	bl	8003b0a <LL_ADC_IsEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d14c      	bne.n	8003c2a <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b98:	f043 0202 	orr.w	r2, r3, #2
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0203 	bic.w	r2, r2, #3
 8003bba:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003bca:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bcc:	e014      	b.n	8003bf8 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003bda:	d30d      	bcc.n	8003bf8 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	f023 0312 	bic.w	r3, r3, #18
 8003be4:	f043 0210 	orr.w	r2, r3, #16
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e023      	b.n	8003c40 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ff96 	bl	8003b2e <LL_ADC_IsCalibrationOnGoing>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e2      	bne.n	8003bce <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68d9      	ldr	r1, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1c:	f023 0303 	bic.w	r3, r3, #3
 8003c20:	f043 0201 	orr.w	r2, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	659a      	str	r2, [r3, #88]	; 0x58
 8003c28:	e005      	b.n	8003c36 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	f043 0210 	orr.w	r2, r3, #16
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c64:	4013      	ands	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c7a:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	60d3      	str	r3, [r2, #12]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	f003 0307 	and.w	r3, r3, #7
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db0b      	blt.n	8003cd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	4906      	ldr	r1, [pc, #24]	; (8003ce0 <__NVIC_EnableIRQ+0x34>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2001      	movs	r0, #1
 8003cce:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	e000e100 	.word	0xe000e100

08003ce4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	db12      	blt.n	8003d1c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	f003 021f 	and.w	r2, r3, #31
 8003cfc:	490a      	ldr	r1, [pc, #40]	; (8003d28 <__NVIC_DisableIRQ+0x44>)
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2001      	movs	r0, #1
 8003d06:	fa00 f202 	lsl.w	r2, r0, r2
 8003d0a:	3320      	adds	r3, #32
 8003d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d10:	f3bf 8f4f 	dsb	sy
}
 8003d14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d16:	f3bf 8f6f 	isb	sy
}
 8003d1a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	e000e100 	.word	0xe000e100

08003d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	6039      	str	r1, [r7, #0]
 8003d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	db0a      	blt.n	8003d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	490c      	ldr	r1, [pc, #48]	; (8003d78 <__NVIC_SetPriority+0x4c>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	0112      	lsls	r2, r2, #4
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	440b      	add	r3, r1
 8003d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d54:	e00a      	b.n	8003d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4908      	ldr	r1, [pc, #32]	; (8003d7c <__NVIC_SetPriority+0x50>)
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	3b04      	subs	r3, #4
 8003d64:	0112      	lsls	r2, r2, #4
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	440b      	add	r3, r1
 8003d6a:	761a      	strb	r2, [r3, #24]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	e000e100 	.word	0xe000e100
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	; 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f1c3 0307 	rsb	r3, r3, #7
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	bf28      	it	cs
 8003d9e:	2304      	movcs	r3, #4
 8003da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3304      	adds	r3, #4
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d902      	bls.n	8003db0 <NVIC_EncodePriority+0x30>
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3b03      	subs	r3, #3
 8003dae:	e000      	b.n	8003db2 <NVIC_EncodePriority+0x32>
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	f04f 32ff 	mov.w	r2, #4294967295
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	43d9      	mvns	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd8:	4313      	orrs	r3, r2
         );
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3724      	adds	r7, #36	; 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ff2b 	bl	8003c48 <__NVIC_SetPriorityGrouping>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b086      	sub	sp, #24
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	4603      	mov	r3, r0
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e08:	f7ff ff42 	bl	8003c90 <__NVIC_GetPriorityGrouping>
 8003e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	6978      	ldr	r0, [r7, #20]
 8003e14:	f7ff ffb4 	bl	8003d80 <NVIC_EncodePriority>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff83 	bl	8003d2c <__NVIC_SetPriority>
}
 8003e26:	bf00      	nop
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	4603      	mov	r3, r0
 8003e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff35 	bl	8003cac <__NVIC_EnableIRQ>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	4603      	mov	r3, r0
 8003e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff ff43 	bl	8003ce4 <__NVIC_DisableIRQ>
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e08e      	b.n	8003f98 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_DMA_Init+0x138>)
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d80f      	bhi.n	8003ea6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <HAL_DMA_Init+0x13c>)
 8003e8e:	4413      	add	r3, r2
 8003e90:	4a45      	ldr	r2, [pc, #276]	; (8003fa8 <HAL_DMA_Init+0x140>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	009a      	lsls	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a42      	ldr	r2, [pc, #264]	; (8003fac <HAL_DMA_Init+0x144>)
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ea4:	e00e      	b.n	8003ec4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4b40      	ldr	r3, [pc, #256]	; (8003fb0 <HAL_DMA_Init+0x148>)
 8003eae:	4413      	add	r3, r2
 8003eb0:	4a3d      	ldr	r2, [pc, #244]	; (8003fa8 <HAL_DMA_Init+0x140>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	009a      	lsls	r2, r3, #2
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a3c      	ldr	r2, [pc, #240]	; (8003fb4 <HAL_DMA_Init+0x14c>)
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6819      	ldr	r1, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fb24 	bl	8004564 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f24:	d102      	bne.n	8003f2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f38:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f42:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d010      	beq.n	8003f6e <HAL_DMA_Init+0x106>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d80c      	bhi.n	8003f6e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fb4d 	bl	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f6a:	605a      	str	r2, [r3, #4]
 8003f6c:	e008      	b.n	8003f80 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40020407 	.word	0x40020407
 8003fa4:	bffdfff8 	.word	0xbffdfff8
 8003fa8:	cccccccd 	.word	0xcccccccd
 8003fac:	40020000 	.word	0x40020000
 8003fb0:	bffdfbf8 	.word	0xbffdfbf8
 8003fb4:	40020400 	.word	0x40020400

08003fb8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e07b      	b.n	80040c2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b3a      	ldr	r3, [pc, #232]	; (80040cc <HAL_DMA_DeInit+0x114>)
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d80f      	bhi.n	8004006 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	4b38      	ldr	r3, [pc, #224]	; (80040d0 <HAL_DMA_DeInit+0x118>)
 8003fee:	4413      	add	r3, r2
 8003ff0:	4a38      	ldr	r2, [pc, #224]	; (80040d4 <HAL_DMA_DeInit+0x11c>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	009a      	lsls	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a35      	ldr	r2, [pc, #212]	; (80040d8 <HAL_DMA_DeInit+0x120>)
 8004002:	641a      	str	r2, [r3, #64]	; 0x40
 8004004:	e00e      	b.n	8004024 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	4b33      	ldr	r3, [pc, #204]	; (80040dc <HAL_DMA_DeInit+0x124>)
 800400e:	4413      	add	r3, r2
 8004010:	4a30      	ldr	r2, [pc, #192]	; (80040d4 <HAL_DMA_DeInit+0x11c>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	009a      	lsls	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2f      	ldr	r2, [pc, #188]	; (80040e0 <HAL_DMA_DeInit+0x128>)
 8004022:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004030:	f003 021c 	and.w	r2, r3, #28
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f202 	lsl.w	r2, r1, r2
 800403e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fa8f 	bl	8004564 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004056:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00f      	beq.n	8004080 <HAL_DMA_DeInit+0xc8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b04      	cmp	r3, #4
 8004066:	d80b      	bhi.n	8004080 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fac3 	bl	80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800407e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40020407 	.word	0x40020407
 80040d0:	bffdfff8 	.word	0xbffdfff8
 80040d4:	cccccccd 	.word	0xcccccccd
 80040d8:	40020000 	.word	0x40020000
 80040dc:	bffdfbf8 	.word	0xbffdfbf8
 80040e0:	40020400 	.word	0x40020400

080040e4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_DMA_Start_IT+0x20>
 8004100:	2302      	movs	r3, #2
 8004102:	e069      	b.n	80041d8 <HAL_DMA_Start_IT+0xf4>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d155      	bne.n	80041c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f9d3 	bl	80044e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 020e 	orr.w	r2, r2, #14
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e00f      	b.n	800417c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0204 	bic.w	r2, r2, #4
 800416a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 020a 	orr.w	r2, r2, #10
 800417a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004198:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d007      	beq.n	80041b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e008      	b.n	80041d6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2280      	movs	r2, #128	; 0x80
 80041c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e04f      	b.n	8004292 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d008      	beq.n	8004210 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2204      	movs	r2, #4
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e040      	b.n	8004292 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 020e 	bic.w	r2, r2, #14
 800421e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800422e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	f003 021c 	and.w	r2, r3, #28
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f202 	lsl.w	r2, r1, r2
 8004252:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800425c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004274:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800427e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d005      	beq.n	80042c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2204      	movs	r2, #4
 80042b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
 80042be:	e047      	b.n	8004350 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 020e 	bic.w	r2, r2, #14
 80042ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	f003 021c 	and.w	r2, r3, #28
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	2101      	movs	r1, #1
 80042fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004302:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800430c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00c      	beq.n	8004330 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004324:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800432e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4798      	blx	r3
    }
  }
  return status;
 8004350:	7bfb      	ldrb	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	f003 031c 	and.w	r3, r3, #28
 800437c:	2204      	movs	r2, #4
 800437e:	409a      	lsls	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d027      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x7c>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d022      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d107      	bne.n	80043b0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0204 	bic.w	r2, r2, #4
 80043ae:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	f003 021c 	and.w	r2, r3, #28
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	2104      	movs	r1, #4
 80043be:	fa01 f202 	lsl.w	r2, r1, r2
 80043c2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8081 	beq.w	80044d0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80043d6:	e07b      	b.n	80044d0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	f003 031c 	and.w	r3, r3, #28
 80043e0:	2202      	movs	r2, #2
 80043e2:	409a      	lsls	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d03d      	beq.n	8004468 <HAL_DMA_IRQHandler+0x10c>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d038      	beq.n	8004468 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 020a 	bic.w	r2, r2, #10
 8004412:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	4b2e      	ldr	r3, [pc, #184]	; (80044dc <HAL_DMA_IRQHandler+0x180>)
 8004424:	429a      	cmp	r2, r3
 8004426:	d909      	bls.n	800443c <HAL_DMA_IRQHandler+0xe0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	f003 031c 	and.w	r3, r3, #28
 8004430:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <HAL_DMA_IRQHandler+0x184>)
 8004432:	2102      	movs	r1, #2
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	6053      	str	r3, [r2, #4]
 800443a:	e008      	b.n	800444e <HAL_DMA_IRQHandler+0xf2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	f003 031c 	and.w	r3, r3, #28
 8004444:	4a27      	ldr	r2, [pc, #156]	; (80044e4 <HAL_DMA_IRQHandler+0x188>)
 8004446:	2102      	movs	r1, #2
 8004448:	fa01 f303 	lsl.w	r3, r1, r3
 800444c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d038      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004466:	e033      	b.n	80044d0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446c:	f003 031c 	and.w	r3, r3, #28
 8004470:	2208      	movs	r2, #8
 8004472:	409a      	lsls	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d02a      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x176>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d025      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 020e 	bic.w	r2, r2, #14
 8004494:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	f003 021c 	and.w	r2, r3, #28
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	2101      	movs	r1, #1
 80044a4:	fa01 f202 	lsl.w	r2, r1, r2
 80044a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d004      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
}
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40020080 	.word	0x40020080
 80044e0:	40020400 	.word	0x40020400
 80044e4:	40020000 	.word	0x40020000

080044e8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	2b00      	cmp	r3, #0
 8004506:	d004      	beq.n	8004512 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004510:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f003 021c 	and.w	r2, r3, #28
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2101      	movs	r1, #1
 8004520:	fa01 f202 	lsl.w	r2, r1, r2
 8004524:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b10      	cmp	r3, #16
 8004534:	d108      	bne.n	8004548 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004546:	e007      	b.n	8004558 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]
}
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr
	...

08004564 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	4b1c      	ldr	r3, [pc, #112]	; (80045e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004574:	429a      	cmp	r2, r3
 8004576:	d813      	bhi.n	80045a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457c:	089b      	lsrs	r3, r3, #2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004584:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	3b08      	subs	r3, #8
 8004594:	4a14      	ldr	r2, [pc, #80]	; (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e011      	b.n	80045c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a4:	089b      	lsrs	r3, r3, #2
 80045a6:	009a      	lsls	r2, r3, #2
 80045a8:	4b10      	ldr	r3, [pc, #64]	; (80045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80045aa:	4413      	add	r3, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	3b08      	subs	r3, #8
 80045b8:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	3307      	adds	r3, #7
 80045c2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80045c8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	2201      	movs	r2, #1
 80045d2:	409a      	lsls	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40020407 	.word	0x40020407
 80045e8:	cccccccd 	.word	0xcccccccd
 80045ec:	4002081c 	.word	0x4002081c
 80045f0:	40020880 	.word	0x40020880

080045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004604:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	461a      	mov	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a08      	ldr	r2, [pc, #32]	; (8004638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004618:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3b01      	subs	r3, #1
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2201      	movs	r2, #1
 8004624:	409a      	lsls	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr
 8004634:	1000823f 	.word	0x1000823f
 8004638:	40020940 	.word	0x40020940

0800463c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	460b      	mov	r3, r1
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800464e:	7afb      	ldrb	r3, [r7, #11]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d103      	bne.n	800465c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	605a      	str	r2, [r3, #4]
      break;
 800465a:	e002      	b.n	8004662 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	75fb      	strb	r3, [r7, #23]
      break;
 8004660:	bf00      	nop
  }

  return status;
 8004662:	7dfb      	ldrb	r3, [r7, #23]
}
 8004664:	4618      	mov	r0, r3
 8004666:	371c      	adds	r7, #28
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e003      	b.n	800468a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004688:	2300      	movs	r3, #0
  }
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046a2:	e140      	b.n	8004926 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	2101      	movs	r1, #1
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	fa01 f303 	lsl.w	r3, r1, r3
 80046b0:	4013      	ands	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 8132 	beq.w	8004920 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d005      	beq.n	80046d4 <HAL_GPIO_Init+0x40>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d130      	bne.n	8004736 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	2203      	movs	r2, #3
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800470a:	2201      	movs	r2, #1
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	091b      	lsrs	r3, r3, #4
 8004720:	f003 0201 	and.w	r2, r3, #1
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b03      	cmp	r3, #3
 8004740:	d017      	beq.n	8004772 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	2203      	movs	r2, #3
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43db      	mvns	r3, r3
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4013      	ands	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d123      	bne.n	80047c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	08da      	lsrs	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3208      	adds	r2, #8
 8004786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800478a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	220f      	movs	r2, #15
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4013      	ands	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	08da      	lsrs	r2, r3, #3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3208      	adds	r2, #8
 80047c0:	6939      	ldr	r1, [r7, #16]
 80047c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	2203      	movs	r2, #3
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	43db      	mvns	r3, r3
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 0203 	and.w	r2, r3, #3
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 808c 	beq.w	8004920 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004808:	4a4e      	ldr	r2, [pc, #312]	; (8004944 <HAL_GPIO_Init+0x2b0>)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	3302      	adds	r3, #2
 8004810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	2207      	movs	r2, #7
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004832:	d00d      	beq.n	8004850 <HAL_GPIO_Init+0x1bc>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a44      	ldr	r2, [pc, #272]	; (8004948 <HAL_GPIO_Init+0x2b4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d007      	beq.n	800484c <HAL_GPIO_Init+0x1b8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a43      	ldr	r2, [pc, #268]	; (800494c <HAL_GPIO_Init+0x2b8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d101      	bne.n	8004848 <HAL_GPIO_Init+0x1b4>
 8004844:	2302      	movs	r3, #2
 8004846:	e004      	b.n	8004852 <HAL_GPIO_Init+0x1be>
 8004848:	2307      	movs	r3, #7
 800484a:	e002      	b.n	8004852 <HAL_GPIO_Init+0x1be>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_GPIO_Init+0x1be>
 8004850:	2300      	movs	r3, #0
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	f002 0203 	and.w	r2, r2, #3
 8004858:	0092      	lsls	r2, r2, #2
 800485a:	4093      	lsls	r3, r2
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004862:	4938      	ldr	r1, [pc, #224]	; (8004944 <HAL_GPIO_Init+0x2b0>)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	3302      	adds	r3, #2
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004870:	4b37      	ldr	r3, [pc, #220]	; (8004950 <HAL_GPIO_Init+0x2bc>)
 8004872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004876:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	43db      	mvns	r3, r3
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4013      	ands	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004896:	4a2e      	ldr	r2, [pc, #184]	; (8004950 <HAL_GPIO_Init+0x2bc>)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800489e:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <HAL_GPIO_Init+0x2bc>)
 80048a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4013      	ands	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80048c4:	4a22      	ldr	r2, [pc, #136]	; (8004950 <HAL_GPIO_Init+0x2bc>)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048cc:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_GPIO_Init+0x2bc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048f0:	4a17      	ldr	r2, [pc, #92]	; (8004950 <HAL_GPIO_Init+0x2bc>)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048f6:	4b16      	ldr	r3, [pc, #88]	; (8004950 <HAL_GPIO_Init+0x2bc>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	43db      	mvns	r3, r3
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4013      	ands	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800491a:	4a0d      	ldr	r2, [pc, #52]	; (8004950 <HAL_GPIO_Init+0x2bc>)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	3301      	adds	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	f47f aeb7 	bne.w	80046a4 <HAL_GPIO_Init+0x10>
  }
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	48000400 	.word	0x48000400
 800494c:	48000800 	.word	0x48000800
 8004950:	58000800 	.word	0x58000800

08004954 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004962:	e0af      	b.n	8004ac4 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004964:	2201      	movs	r2, #1
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	4013      	ands	r3, r2
 8004970:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80a2 	beq.w	8004abe <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800497a:	4a59      	ldr	r2, [pc, #356]	; (8004ae0 <HAL_GPIO_DeInit+0x18c>)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	3302      	adds	r3, #2
 8004982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004986:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	2207      	movs	r2, #7
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4013      	ands	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049a2:	d00d      	beq.n	80049c0 <HAL_GPIO_DeInit+0x6c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a4f      	ldr	r2, [pc, #316]	; (8004ae4 <HAL_GPIO_DeInit+0x190>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <HAL_GPIO_DeInit+0x68>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a4e      	ldr	r2, [pc, #312]	; (8004ae8 <HAL_GPIO_DeInit+0x194>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d101      	bne.n	80049b8 <HAL_GPIO_DeInit+0x64>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e004      	b.n	80049c2 <HAL_GPIO_DeInit+0x6e>
 80049b8:	2307      	movs	r3, #7
 80049ba:	e002      	b.n	80049c2 <HAL_GPIO_DeInit+0x6e>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <HAL_GPIO_DeInit+0x6e>
 80049c0:	2300      	movs	r3, #0
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	f002 0203 	and.w	r2, r2, #3
 80049c8:	0092      	lsls	r2, r2, #2
 80049ca:	4093      	lsls	r3, r2
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d136      	bne.n	8004a40 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80049d2:	4b46      	ldr	r3, [pc, #280]	; (8004aec <HAL_GPIO_DeInit+0x198>)
 80049d4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	43db      	mvns	r3, r3
 80049dc:	4943      	ldr	r1, [pc, #268]	; (8004aec <HAL_GPIO_DeInit+0x198>)
 80049de:	4013      	ands	r3, r2
 80049e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80049e4:	4b41      	ldr	r3, [pc, #260]	; (8004aec <HAL_GPIO_DeInit+0x198>)
 80049e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	43db      	mvns	r3, r3
 80049ee:	493f      	ldr	r1, [pc, #252]	; (8004aec <HAL_GPIO_DeInit+0x198>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80049f6:	4b3d      	ldr	r3, [pc, #244]	; (8004aec <HAL_GPIO_DeInit+0x198>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	493b      	ldr	r1, [pc, #236]	; (8004aec <HAL_GPIO_DeInit+0x198>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004a04:	4b39      	ldr	r3, [pc, #228]	; (8004aec <HAL_GPIO_DeInit+0x198>)
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	4937      	ldr	r1, [pc, #220]	; (8004aec <HAL_GPIO_DeInit+0x198>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	2207      	movs	r2, #7
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004a22:	4a2f      	ldr	r2, [pc, #188]	; (8004ae0 <HAL_GPIO_DeInit+0x18c>)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	089b      	lsrs	r3, r3, #2
 8004a28:	3302      	adds	r3, #2
 8004a2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	43da      	mvns	r2, r3
 8004a32:	482b      	ldr	r0, [pc, #172]	; (8004ae0 <HAL_GPIO_DeInit+0x18c>)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	089b      	lsrs	r3, r3, #2
 8004a38:	400a      	ands	r2, r1
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	2103      	movs	r1, #3
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	08da      	lsrs	r2, r3, #3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3208      	adds	r2, #8
 8004a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	220f      	movs	r2, #15
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	08d2      	lsrs	r2, r2, #3
 8004a74:	4019      	ands	r1, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3208      	adds	r2, #8
 8004a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	2103      	movs	r1, #3
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	401a      	ands	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	2101      	movs	r1, #1
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	2103      	movs	r1, #3
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	401a      	ands	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f47f af49 	bne.w	8004964 <HAL_GPIO_DeInit+0x10>
  }
}
 8004ad2:	bf00      	nop
 8004ad4:	bf00      	nop
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	48000400 	.word	0x48000400
 8004ae8:	48000800 	.word	0x48000800
 8004aec:	58000800 	.word	0x58000800

08004af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	4613      	mov	r3, r2
 8004afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b00:	787b      	ldrb	r3, [r7, #1]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b0c:	e002      	b.n	8004b14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b0e:	887a      	ldrh	r2, [r7, #2]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b30:	887a      	ldrh	r2, [r7, #2]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4013      	ands	r3, r2
 8004b36:	041a      	lsls	r2, r3, #16
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	43d9      	mvns	r1, r3
 8004b3c:	887b      	ldrh	r3, [r7, #2]
 8004b3e:	400b      	ands	r3, r1
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	619a      	str	r2, [r3, #24]
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b5a:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d006      	beq.n	8004b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b66:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f005 fb5a 	bl	800a228 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	58000800 	.word	0x58000800

08004b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e081      	b.n	8004c96 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fc fc78 	bl	800149c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	; 0x24
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004be0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d107      	bne.n	8004bfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bf6:	609a      	str	r2, [r3, #8]
 8004bf8:	e006      	b.n	8004c08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d104      	bne.n	8004c1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69d9      	ldr	r1, [r3, #28]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1a      	ldr	r2, [r3, #32]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	461a      	mov	r2, r3
 8004cac:	460b      	mov	r3, r1
 8004cae:	817b      	strh	r3, [r7, #10]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	f040 80da 	bne.w	8004e76 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_I2C_Master_Transmit+0x30>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e0d3      	b.n	8004e78 <HAL_I2C_Master_Transmit+0x1d8>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cd8:	f7fc ffac 	bl	8001c34 <HAL_GetTick>
 8004cdc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	2319      	movs	r3, #25
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 faec 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e0be      	b.n	8004e78 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2221      	movs	r2, #33	; 0x21
 8004cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2210      	movs	r2, #16
 8004d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	893a      	ldrh	r2, [r7, #8]
 8004d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2bff      	cmp	r3, #255	; 0xff
 8004d2a:	d90e      	bls.n	8004d4a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	22ff      	movs	r2, #255	; 0xff
 8004d30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	8979      	ldrh	r1, [r7, #10]
 8004d3a:	4b51      	ldr	r3, [pc, #324]	; (8004e80 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 fc5e 	bl	8005604 <I2C_TransferConfig>
 8004d48:	e06c      	b.n	8004e24 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	8979      	ldrh	r1, [r7, #10]
 8004d5c:	4b48      	ldr	r3, [pc, #288]	; (8004e80 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fc4d 	bl	8005604 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d6a:	e05b      	b.n	8004e24 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	6a39      	ldr	r1, [r7, #32]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fae9 	bl	8005348 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e07b      	b.n	8004e78 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	781a      	ldrb	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d034      	beq.n	8004e24 <HAL_I2C_Master_Transmit+0x184>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d130      	bne.n	8004e24 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2180      	movs	r1, #128	; 0x80
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fa7b 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e04d      	b.n	8004e78 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2bff      	cmp	r3, #255	; 0xff
 8004de4:	d90e      	bls.n	8004e04 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	22ff      	movs	r2, #255	; 0xff
 8004dea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	8979      	ldrh	r1, [r7, #10]
 8004df4:	2300      	movs	r3, #0
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fc01 	bl	8005604 <I2C_TransferConfig>
 8004e02:	e00f      	b.n	8004e24 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	8979      	ldrh	r1, [r7, #10]
 8004e16:	2300      	movs	r3, #0
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 fbf0 	bl	8005604 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d19e      	bne.n	8004d6c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	6a39      	ldr	r1, [r7, #32]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fac8 	bl	80053c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e01a      	b.n	8004e78 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2220      	movs	r2, #32
 8004e48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6859      	ldr	r1, [r3, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_I2C_Master_Transmit+0x1e4>)
 8004e56:	400b      	ands	r3, r1
 8004e58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e000      	b.n	8004e78 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
  }
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	80002000 	.word	0x80002000
 8004e84:	fe00e800 	.word	0xfe00e800

08004e88 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	461a      	mov	r2, r3
 8004e94:	460b      	mov	r3, r1
 8004e96:	817b      	strh	r3, [r7, #10]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	f040 80db 	bne.w	8005060 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_I2C_Master_Receive+0x30>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e0d4      	b.n	8005062 <HAL_I2C_Master_Receive+0x1da>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ec0:	f7fc feb8 	bl	8001c34 <HAL_GetTick>
 8004ec4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	2319      	movs	r3, #25
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f9f8 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0bf      	b.n	8005062 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2222      	movs	r2, #34	; 0x22
 8004ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2210      	movs	r2, #16
 8004eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	893a      	ldrh	r2, [r7, #8]
 8004f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2bff      	cmp	r3, #255	; 0xff
 8004f12:	d90e      	bls.n	8004f32 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	22ff      	movs	r2, #255	; 0xff
 8004f18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	8979      	ldrh	r1, [r7, #10]
 8004f22:	4b52      	ldr	r3, [pc, #328]	; (800506c <HAL_I2C_Master_Receive+0x1e4>)
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fb6a 	bl	8005604 <I2C_TransferConfig>
 8004f30:	e06d      	b.n	800500e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	8979      	ldrh	r1, [r7, #10]
 8004f44:	4b49      	ldr	r3, [pc, #292]	; (800506c <HAL_I2C_Master_Receive+0x1e4>)
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fb59 	bl	8005604 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004f52:	e05c      	b.n	800500e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	6a39      	ldr	r1, [r7, #32]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fa71 	bl	8005440 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e07c      	b.n	8005062 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d034      	beq.n	800500e <HAL_I2C_Master_Receive+0x186>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d130      	bne.n	800500e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2180      	movs	r1, #128	; 0x80
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f986 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e04d      	b.n	8005062 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2bff      	cmp	r3, #255	; 0xff
 8004fce:	d90e      	bls.n	8004fee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	22ff      	movs	r2, #255	; 0xff
 8004fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	8979      	ldrh	r1, [r7, #10]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fb0c 	bl	8005604 <I2C_TransferConfig>
 8004fec:	e00f      	b.n	800500e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	8979      	ldrh	r1, [r7, #10]
 8005000:	2300      	movs	r3, #0
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 fafb 	bl	8005604 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d19d      	bne.n	8004f54 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	6a39      	ldr	r1, [r7, #32]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f9d3 	bl	80053c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e01a      	b.n	8005062 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2220      	movs	r2, #32
 8005032:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6859      	ldr	r1, [r3, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_I2C_Master_Receive+0x1e8>)
 8005040:	400b      	ands	r3, r1
 8005042:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	e000      	b.n	8005062 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005060:	2302      	movs	r3, #2
  }
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	80002400 	.word	0x80002400
 8005070:	fe00e800 	.word	0xfe00e800

08005074 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	607a      	str	r2, [r7, #4]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	460b      	mov	r3, r1
 8005082:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b20      	cmp	r3, #32
 8005092:	f040 80f1 	bne.w	8005278 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a4:	d101      	bne.n	80050aa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80050a6:	2302      	movs	r3, #2
 80050a8:	e0e7      	b.n	800527a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_I2C_IsDeviceReady+0x44>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e0e0      	b.n	800527a <HAL_I2C_IsDeviceReady+0x206>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2224      	movs	r2, #36	; 0x24
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d107      	bne.n	80050e6 <HAL_I2C_IsDeviceReady+0x72>
 80050d6:	897b      	ldrh	r3, [r7, #10]
 80050d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80050e4:	e004      	b.n	80050f0 <HAL_I2C_IsDeviceReady+0x7c>
 80050e6:	897b      	ldrh	r3, [r7, #10]
 80050e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ec:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80050f6:	f7fc fd9d 	bl	8001c34 <HAL_GetTick>
 80050fa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b20      	cmp	r3, #32
 8005108:	bf0c      	ite	eq
 800510a:	2301      	moveq	r3, #1
 800510c:	2300      	movne	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b10      	cmp	r3, #16
 800511e:	bf0c      	ite	eq
 8005120:	2301      	moveq	r3, #1
 8005122:	2300      	movne	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005128:	e034      	b.n	8005194 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d01a      	beq.n	8005168 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005132:	f7fc fd7f 	bl	8001c34 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <HAL_I2C_IsDeviceReady+0xd4>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10f      	bne.n	8005168 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005154:	f043 0220 	orr.w	r2, r3, #32
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e088      	b.n	800527a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b20      	cmp	r3, #32
 8005174:	bf0c      	ite	eq
 8005176:	2301      	moveq	r3, #1
 8005178:	2300      	movne	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b10      	cmp	r3, #16
 800518a:	bf0c      	ite	eq
 800518c:	2301      	moveq	r3, #1
 800518e:	2300      	movne	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005194:	7ffb      	ldrb	r3, [r7, #31]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d102      	bne.n	80051a0 <HAL_I2C_IsDeviceReady+0x12c>
 800519a:	7fbb      	ldrb	r3, [r7, #30]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0c4      	beq.n	800512a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b10      	cmp	r3, #16
 80051ac:	d01a      	beq.n	80051e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2200      	movs	r2, #0
 80051b6:	2120      	movs	r1, #32
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f885 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e058      	b.n	800527a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2220      	movs	r2, #32
 80051ce:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e04a      	b.n	800527a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2200      	movs	r2, #0
 80051ec:	2120      	movs	r1, #32
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f86a 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e03d      	b.n	800527a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2210      	movs	r2, #16
 8005204:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2220      	movs	r2, #32
 800520c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d118      	bne.n	8005248 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005224:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2200      	movs	r2, #0
 800522e:	2120      	movs	r1, #32
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f849 	bl	80052c8 <I2C_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e01c      	b.n	800527a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2220      	movs	r2, #32
 8005246:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	3301      	adds	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	429a      	cmp	r2, r3
 8005254:	f63f af3b 	bhi.w	80050ce <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005278:	2302      	movs	r3, #2
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b02      	cmp	r3, #2
 8005296:	d103      	bne.n	80052a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2200      	movs	r2, #0
 800529e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d007      	beq.n	80052be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	619a      	str	r2, [r3, #24]
  }
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052d8:	e022      	b.n	8005320 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e0:	d01e      	beq.n	8005320 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e2:	f7fc fca7 	bl	8001c34 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d302      	bcc.n	80052f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d113      	bne.n	8005320 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e00f      	b.n	8005340 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4013      	ands	r3, r2
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	429a      	cmp	r2, r3
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	429a      	cmp	r2, r3
 800533c:	d0cd      	beq.n	80052da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005354:	e02c      	b.n	80053b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f8dc 	bl	8005518 <I2C_IsAcknowledgeFailed>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e02a      	b.n	80053c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d01e      	beq.n	80053b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005372:	f7fc fc5f 	bl	8001c34 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d113      	bne.n	80053b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e007      	b.n	80053c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d1cb      	bne.n	8005356 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053d4:	e028      	b.n	8005428 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f89c 	bl	8005518 <I2C_IsAcknowledgeFailed>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e026      	b.n	8005438 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7fc fc23 	bl	8001c34 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d113      	bne.n	8005428 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	f043 0220 	orr.w	r2, r3, #32
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e007      	b.n	8005438 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b20      	cmp	r3, #32
 8005434:	d1cf      	bne.n	80053d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800544c:	e055      	b.n	80054fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 f860 	bl	8005518 <I2C_IsAcknowledgeFailed>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e053      	b.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	2b20      	cmp	r3, #32
 800546e:	d129      	bne.n	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b04      	cmp	r3, #4
 800547c:	d105      	bne.n	800548a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	e03f      	b.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2220      	movs	r2, #32
 8005490:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6859      	ldr	r1, [r3, #4]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4b1d      	ldr	r3, [pc, #116]	; (8005514 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800549e:	400b      	ands	r3, r1
 80054a0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e022      	b.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c4:	f7fc fbb6 	bl	8001c34 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d302      	bcc.n	80054da <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10f      	bne.n	80054fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054de:	f043 0220 	orr.w	r2, r3, #32
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e007      	b.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b04      	cmp	r3, #4
 8005506:	d1a2      	bne.n	800544e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	fe00e800 	.word	0xfe00e800

08005518 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b10      	cmp	r3, #16
 8005530:	d161      	bne.n	80055f6 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005540:	d02b      	beq.n	800559a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005550:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005552:	e022      	b.n	800559a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d01e      	beq.n	800559a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555c:	f7fc fb6a 	bl	8001c34 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	d302      	bcc.n	8005572 <I2C_IsAcknowledgeFailed+0x5a>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d113      	bne.n	800559a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005576:	f043 0220 	orr.w	r2, r3, #32
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e02e      	b.n	80055f8 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f003 0320 	and.w	r3, r3, #32
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	d1d5      	bne.n	8005554 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2210      	movs	r2, #16
 80055ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2220      	movs	r2, #32
 80055b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff fe62 	bl	8005282 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6859      	ldr	r1, [r3, #4]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <I2C_IsAcknowledgeFailed+0xe8>)
 80055ca:	400b      	ands	r3, r1
 80055cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d2:	f043 0204 	orr.w	r2, r3, #4
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	fe00e800 	.word	0xfe00e800

08005604 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	460b      	mov	r3, r1
 8005610:	817b      	strh	r3, [r7, #10]
 8005612:	4613      	mov	r3, r2
 8005614:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	0d5b      	lsrs	r3, r3, #21
 8005620:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005624:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <I2C_TransferConfig+0x54>)
 8005626:	430b      	orrs	r3, r1
 8005628:	43db      	mvns	r3, r3
 800562a:	ea02 0103 	and.w	r1, r2, r3
 800562e:	897b      	ldrh	r3, [r7, #10]
 8005630:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005634:	7a7b      	ldrb	r3, [r7, #9]
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	431a      	orrs	r2, r3
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	431a      	orrs	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800564e:	bf00      	nop
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr
 8005658:	03ff63ff 	.word	0x03ff63ff

0800565c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b20      	cmp	r3, #32
 8005670:	d138      	bne.n	80056e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800567c:	2302      	movs	r3, #2
 800567e:	e032      	b.n	80056e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2224      	movs	r2, #36	; 0x24
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6819      	ldr	r1, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e000      	b.n	80056e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056e4:	2302      	movs	r3, #2
  }
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b20      	cmp	r3, #32
 8005704:	d139      	bne.n	800577a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005710:	2302      	movs	r3, #2
 8005712:	e033      	b.n	800577c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2224      	movs	r2, #36	; 0x24
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0201 	bic.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005742:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	e000      	b.n	800577c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800577a:	2302      	movs	r3, #2
  }
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr
	...

08005788 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800578c:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a03      	ldr	r2, [pc, #12]	; (80057a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005796:	6013      	str	r3, [r2, #0]
}
 8005798:	bf00      	nop
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr
 80057a0:	58000400 	.word	0x58000400

080057a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <HAL_PWREx_GetVoltageRange+0x14>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr
 80057b8:	58000400 	.word	0x58000400

080057bc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057cc:	d101      	bne.n	80057d2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	58000400 	.word	0x58000400

080057e0 <LL_RCC_HSE_EnableTcxo>:
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80057e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057f2:	6013      	str	r3, [r2, #0]
}
 80057f4:	bf00      	nop
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr

080057fc <LL_RCC_HSE_DisableTcxo>:
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800580a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800580e:	6013      	str	r3, [r2, #0]
}
 8005810:	bf00      	nop
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr

08005818 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800581c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800582a:	d101      	bne.n	8005830 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr

0800583a <LL_RCC_HSE_Enable>:
{
 800583a:	b480      	push	{r7}
 800583c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800583e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584c:	6013      	str	r3, [r2, #0]
}
 800584e:	bf00      	nop
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr

08005856 <LL_RCC_HSE_Disable>:
{
 8005856:	b480      	push	{r7}
 8005858:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800585a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005868:	6013      	str	r3, [r2, #0]
}
 800586a:	bf00      	nop
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr

08005872 <LL_RCC_HSE_IsReady>:
{
 8005872:	b480      	push	{r7}
 8005874:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005884:	d101      	bne.n	800588a <LL_RCC_HSE_IsReady+0x18>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <LL_RCC_HSE_IsReady+0x1a>
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <LL_RCC_HSI_Enable>:
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a6:	6013      	str	r3, [r2, #0]
}
 80058a8:	bf00      	nop
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bc80      	pop	{r7}
 80058ae:	4770      	bx	lr

080058b0 <LL_RCC_HSI_Disable>:
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80058b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c2:	6013      	str	r3, [r2, #0]
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <LL_RCC_HSI_IsReady>:
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80058d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058de:	d101      	bne.n	80058e4 <LL_RCC_HSI_IsReady+0x18>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <LL_RCC_HSI_IsReady+0x1a>
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <LL_RCC_HSI_SetCalibTrimming>:
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	061b      	lsls	r3, r3, #24
 8005904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005908:	4313      	orrs	r3, r2
 800590a:	604b      	str	r3, [r1, #4]
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr

08005916 <LL_RCC_LSE_IsReady>:
{
 8005916:	b480      	push	{r7}
 8005918:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800591a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b02      	cmp	r3, #2
 8005928:	d101      	bne.n	800592e <LL_RCC_LSE_IsReady+0x18>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <LL_RCC_LSE_IsReady+0x1a>
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr

08005938 <LL_RCC_LSI_Enable>:
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800593c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005948:	f043 0301 	orr.w	r3, r3, #1
 800594c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005950:	bf00      	nop
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr

08005958 <LL_RCC_LSI_Disable>:
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800595c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005968:	f023 0301 	bic.w	r3, r3, #1
 800596c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005970:	bf00      	nop
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <LL_RCC_LSI_IsReady>:
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b02      	cmp	r3, #2
 800598a:	d101      	bne.n	8005990 <LL_RCC_LSI_IsReady+0x18>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <LL_RCC_LSI_IsReady+0x1a>
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr

0800599a <LL_RCC_MSI_Enable>:
{
 800599a:	b480      	push	{r7}
 800599c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800599e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	6013      	str	r3, [r2, #0]
}
 80059ae:	bf00      	nop
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr

080059b6 <LL_RCC_MSI_Disable>:
{
 80059b6:	b480      	push	{r7}
 80059b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80059ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	6013      	str	r3, [r2, #0]
}
 80059ca:	bf00      	nop
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <LL_RCC_MSI_IsReady>:
{
 80059d2:	b480      	push	{r7}
 80059d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80059d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d101      	bne.n	80059e8 <LL_RCC_MSI_IsReady+0x16>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <LL_RCC_MSI_IsReady+0x18>
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80059f2:	b480      	push	{r7}
 80059f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80059f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d101      	bne.n	8005a08 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr

08005a12 <LL_RCC_MSI_GetRange>:
{
 8005a12:	b480      	push	{r7}
 8005a14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	604b      	str	r3, [r1, #4]
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr

08005a68 <LL_RCC_SetSysClkSource>:
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f023 0203 	bic.w	r2, r3, #3
 8005a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	608b      	str	r3, [r1, #8]
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr

08005a8e <LL_RCC_GetSysClkSource>:
{
 8005a8e:	b480      	push	{r7}
 8005a90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 030c 	and.w	r3, r3, #12
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr

08005aa4 <LL_RCC_SetAHBPrescaler>:
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	608b      	str	r3, [r1, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <LL_RCC_SetAHB3Prescaler>:
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ada:	f023 020f 	bic.w	r2, r3, #15
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	091b      	lsrs	r3, r3, #4
 8005ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr

08005af6 <LL_RCC_SetAPB1Prescaler>:
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr

08005b1c <LL_RCC_SetAPB2Prescaler>:
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	608b      	str	r3, [r1, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr

08005b42 <LL_RCC_GetAHBPrescaler>:
{
 8005b42:	b480      	push	{r7}
 8005b44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <LL_RCC_GetAHB3Prescaler>:
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <LL_RCC_GetAPB1Prescaler>:
{
 8005b72:	b480      	push	{r7}
 8005b74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <LL_RCC_GetAPB2Prescaler>:
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr

08005b9e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bb0:	6013      	str	r3, [r2, #0]
}
 8005bb2:	bf00      	nop
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bcc:	6013      	str	r3, [r2, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr

08005bd6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005be8:	d101      	bne.n	8005bee <LL_RCC_PLL_IsReady+0x18>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <LL_RCC_PLL_IsReady+0x1a>
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr

08005c26 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005c26:	b480      	push	{r7}
 8005c28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0303 	and.w	r3, r3, #3
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr

08005c52 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005c52:	b480      	push	{r7}
 8005c54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c64:	d101      	bne.n	8005c6a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c88:	d101      	bne.n	8005c8e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr

08005c98 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005caa:	d101      	bne.n	8005cb0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr

08005cba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ccc:	d101      	bne.n	8005cd2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e000      	b.n	8005cd4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e38a      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cee:	f7ff fece 	bl	8005a8e <LL_RCC_GetSysClkSource>
 8005cf2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cf4:	f7ff ffa2 	bl	8005c3c <LL_RCC_PLL_GetMainSource>
 8005cf8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80c9 	beq.w	8005e9a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <HAL_RCC_OscConfig+0x3e>
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	2b0c      	cmp	r3, #12
 8005d12:	d17b      	bne.n	8005e0c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d178      	bne.n	8005e0c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d1a:	f7ff fe5a 	bl	80059d2 <LL_RCC_MSI_IsReady>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_RCC_OscConfig+0x54>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e369      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <HAL_RCC_OscConfig+0x72>
 8005d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d4c:	e006      	b.n	8005d5c <HAL_RCC_OscConfig+0x80>
 8005d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d56:	091b      	lsrs	r3, r3, #4
 8005d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d222      	bcs.n	8005da6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fd4f 	bl	8006808 <RCC_SetFlashLatencyFromMSIRange>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e347      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d7e:	f043 0308 	orr.w	r3, r3, #8
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d96:	4313      	orrs	r3, r2
 8005d98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fe4e 	bl	8005a40 <LL_RCC_MSI_SetCalibTrimming>
 8005da4:	e021      	b.n	8005dea <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005db0:	f043 0308 	orr.w	r3, r3, #8
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff fe35 	bl	8005a40 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fd14 	bl	8006808 <RCC_SetFlashLatencyFromMSIRange>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e30c      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005dea:	f000 fcd5 	bl	8006798 <HAL_RCC_GetHCLKFreq>
 8005dee:	4603      	mov	r3, r0
 8005df0:	4ab4      	ldr	r2, [pc, #720]	; (80060c4 <HAL_RCC_OscConfig+0x3e8>)
 8005df2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005df4:	4bb4      	ldr	r3, [pc, #720]	; (80060c8 <HAL_RCC_OscConfig+0x3ec>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fb ff11 	bl	8001c20 <HAL_InitTick>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005e02:	7cfb      	ldrb	r3, [r7, #19]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d047      	beq.n	8005e98 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005e08:	7cfb      	ldrb	r3, [r7, #19]
 8005e0a:	e2fb      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d02c      	beq.n	8005e6e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e14:	f7ff fdc1 	bl	800599a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e18:	f7fb ff0c 	bl	8001c34 <HAL_GetTick>
 8005e1c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e20:	f7fb ff08 	bl	8001c34 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e2e8      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005e32:	f7ff fdce 	bl	80059d2 <LL_RCC_MSI_IsReady>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0f1      	beq.n	8005e20 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e46:	f043 0308 	orr.w	r3, r3, #8
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff fdea 	bl	8005a40 <LL_RCC_MSI_SetCalibTrimming>
 8005e6c:	e015      	b.n	8005e9a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e6e:	f7ff fda2 	bl	80059b6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e72:	f7fb fedf 	bl	8001c34 <HAL_GetTick>
 8005e76:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e7a:	f7fb fedb 	bl	8001c34 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e2bb      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005e8c:	f7ff fda1 	bl	80059d2 <LL_RCC_MSI_IsReady>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f1      	bne.n	8005e7a <HAL_RCC_OscConfig+0x19e>
 8005e96:	e000      	b.n	8005e9a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e98:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d05f      	beq.n	8005f66 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d005      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x1dc>
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2b0c      	cmp	r3, #12
 8005eb0:	d10d      	bne.n	8005ece <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d10a      	bne.n	8005ece <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb8:	f7ff fcdb 	bl	8005872 <LL_RCC_HSE_IsReady>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d050      	beq.n	8005f64 <HAL_RCC_OscConfig+0x288>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d14c      	bne.n	8005f64 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e29a      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eec:	d102      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x218>
 8005eee:	f7ff fca4 	bl	800583a <LL_RCC_HSE_Enable>
 8005ef2:	e00d      	b.n	8005f10 <HAL_RCC_OscConfig+0x234>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005efc:	d104      	bne.n	8005f08 <HAL_RCC_OscConfig+0x22c>
 8005efe:	f7ff fc6f 	bl	80057e0 <LL_RCC_HSE_EnableTcxo>
 8005f02:	f7ff fc9a 	bl	800583a <LL_RCC_HSE_Enable>
 8005f06:	e003      	b.n	8005f10 <HAL_RCC_OscConfig+0x234>
 8005f08:	f7ff fca5 	bl	8005856 <LL_RCC_HSE_Disable>
 8005f0c:	f7ff fc76 	bl	80057fc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d012      	beq.n	8005f3e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f18:	f7fb fe8c 	bl	8001c34 <HAL_GetTick>
 8005f1c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f20:	f7fb fe88 	bl	8001c34 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b64      	cmp	r3, #100	; 0x64
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e268      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f32:	f7ff fc9e 	bl	8005872 <LL_RCC_HSE_IsReady>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f1      	beq.n	8005f20 <HAL_RCC_OscConfig+0x244>
 8005f3c:	e013      	b.n	8005f66 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3e:	f7fb fe79 	bl	8001c34 <HAL_GetTick>
 8005f42:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f46:	f7fb fe75 	bl	8001c34 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b64      	cmp	r3, #100	; 0x64
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e255      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005f58:	f7ff fc8b 	bl	8005872 <LL_RCC_HSE_IsReady>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f1      	bne.n	8005f46 <HAL_RCC_OscConfig+0x26a>
 8005f62:	e000      	b.n	8005f66 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f64:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d04b      	beq.n	800600a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d005      	beq.n	8005f84 <HAL_RCC_OscConfig+0x2a8>
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2b0c      	cmp	r3, #12
 8005f7c:	d113      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d110      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f84:	f7ff fca2 	bl	80058cc <LL_RCC_HSI_IsReady>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_RCC_OscConfig+0x2be>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e234      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fca5 	bl	80058ee <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fa4:	e031      	b.n	800600a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d019      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fae:	f7ff fc71 	bl	8005894 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb2:	f7fb fe3f 	bl	8001c34 <HAL_GetTick>
 8005fb6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fba:	f7fb fe3b 	bl	8001c34 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e21b      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005fcc:	f7ff fc7e 	bl	80058cc <LL_RCC_HSI_IsReady>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f1      	beq.n	8005fba <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fc87 	bl	80058ee <LL_RCC_HSI_SetCalibTrimming>
 8005fe0:	e013      	b.n	800600a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fe2:	f7ff fc65 	bl	80058b0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe6:	f7fb fe25 	bl	8001c34 <HAL_GetTick>
 8005fea:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fee:	f7fb fe21 	bl	8001c34 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e201      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006000:	f7ff fc64 	bl	80058cc <LL_RCC_HSI_IsReady>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f1      	bne.n	8005fee <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d06e      	beq.n	80060f4 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d056      	beq.n	80060cc <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 800601e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006026:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69da      	ldr	r2, [r3, #28]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	429a      	cmp	r2, r3
 8006034:	d031      	beq.n	800609a <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d006      	beq.n	800604e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e1da      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d013      	beq.n	8006080 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8006058:	f7ff fc7e 	bl	8005958 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800605c:	f7fb fdea 	bl	8001c34 <HAL_GetTick>
 8006060:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006064:	f7fb fde6 	bl	8001c34 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b11      	cmp	r3, #17
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e1c6      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8006076:	f7ff fc7f 	bl	8005978 <LL_RCC_LSI_IsReady>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f1      	bne.n	8006064 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006088:	f023 0210 	bic.w	r2, r3, #16
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800609a:	f7ff fc4d 	bl	8005938 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609e:	f7fb fdc9 	bl	8001c34 <HAL_GetTick>
 80060a2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a6:	f7fb fdc5 	bl	8001c34 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b11      	cmp	r3, #17
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e1a5      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80060b8:	f7ff fc5e 	bl	8005978 <LL_RCC_LSI_IsReady>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f1      	beq.n	80060a6 <HAL_RCC_OscConfig+0x3ca>
 80060c2:	e017      	b.n	80060f4 <HAL_RCC_OscConfig+0x418>
 80060c4:	20000000 	.word	0x20000000
 80060c8:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060cc:	f7ff fc44 	bl	8005958 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d0:	f7fb fdb0 	bl	8001c34 <HAL_GetTick>
 80060d4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060d8:	f7fb fdac 	bl	8001c34 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b11      	cmp	r3, #17
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e18c      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 80060ea:	f7ff fc45 	bl	8005978 <LL_RCC_LSI_IsReady>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1f1      	bne.n	80060d8 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80d8 	beq.w	80062b2 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006102:	f7ff fb5b 	bl	80057bc <LL_PWR_IsEnabledBkUpAccess>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d113      	bne.n	8006134 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800610c:	f7ff fb3c 	bl	8005788 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006110:	f7fb fd90 	bl	8001c34 <HAL_GetTick>
 8006114:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006118:	f7fb fd8c 	bl	8001c34 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e16c      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800612a:	f7ff fb47 	bl	80057bc <LL_PWR_IsEnabledBkUpAccess>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0f1      	beq.n	8006118 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d07b      	beq.n	8006234 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	2b85      	cmp	r3, #133	; 0x85
 8006142:	d003      	beq.n	800614c <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2b05      	cmp	r3, #5
 800614a:	d109      	bne.n	8006160 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800614c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006158:	f043 0304 	orr.w	r3, r3, #4
 800615c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006160:	f7fb fd68 	bl	8001c34 <HAL_GetTick>
 8006164:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006172:	f043 0301 	orr.w	r3, r3, #1
 8006176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800617a:	e00a      	b.n	8006192 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800617c:	f7fb fd5a 	bl	8001c34 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f241 3288 	movw	r2, #5000	; 0x1388
 800618a:	4293      	cmp	r3, r2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e138      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006192:	f7ff fbc0 	bl	8005916 <LL_RCC_LSE_IsReady>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0ef      	beq.n	800617c <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b81      	cmp	r3, #129	; 0x81
 80061a2:	d003      	beq.n	80061ac <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b85      	cmp	r3, #133	; 0x85
 80061aa:	d121      	bne.n	80061f0 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fb fd42 	bl	8001c34 <HAL_GetTick>
 80061b0:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80061c6:	e00a      	b.n	80061de <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c8:	f7fb fd34 	bl	8001c34 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e112      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80061de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0ec      	beq.n	80061c8 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80061ee:	e060      	b.n	80062b2 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f0:	f7fb fd20 	bl	8001c34 <HAL_GetTick>
 80061f4:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80061f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800620a:	e00a      	b.n	8006222 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800620c:	f7fb fd12 	bl	8001c34 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	f241 3288 	movw	r2, #5000	; 0x1388
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e0f0      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1ec      	bne.n	800620c <HAL_RCC_OscConfig+0x530>
 8006232:	e03e      	b.n	80062b2 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006234:	f7fb fcfe 	bl	8001c34 <HAL_GetTick>
 8006238:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800623a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800624a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800624e:	e00a      	b.n	8006266 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006250:	f7fb fcf0 	bl	8001c34 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	f241 3288 	movw	r2, #5000	; 0x1388
 800625e:	4293      	cmp	r3, r2
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e0ce      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1ec      	bne.n	8006250 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006276:	f7fb fcdd 	bl	8001c34 <HAL_GetTick>
 800627a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800627c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006288:	f023 0301 	bic.w	r3, r3, #1
 800628c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006290:	e00a      	b.n	80062a8 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006292:	f7fb fccf 	bl	8001c34 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e0ad      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80062a8:	f7ff fb35 	bl	8005916 <LL_RCC_LSE_IsReady>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1ef      	bne.n	8006292 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80a3 	beq.w	8006402 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b0c      	cmp	r3, #12
 80062c0:	d076      	beq.n	80063b0 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d14b      	bne.n	8006362 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ca:	f7ff fc76 	bl	8005bba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ce:	f7fb fcb1 	bl	8001c34 <HAL_GetTick>
 80062d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80062d4:	e008      	b.n	80062e8 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d6:	f7fb fcad 	bl	8001c34 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b0a      	cmp	r3, #10
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e08d      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80062e8:	f7ff fc75 	bl	8005bd6 <LL_RCC_PLL_IsReady>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f1      	bne.n	80062d6 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	4b44      	ldr	r3, [pc, #272]	; (800640c <HAL_RCC_OscConfig+0x730>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006304:	4311      	orrs	r1, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800630a:	0212      	lsls	r2, r2, #8
 800630c:	4311      	orrs	r1, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006312:	4311      	orrs	r1, r2
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006318:	4311      	orrs	r1, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800631e:	430a      	orrs	r2, r1
 8006320:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006324:	4313      	orrs	r3, r2
 8006326:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006328:	f7ff fc39 	bl	8005b9e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800632c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800633a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633c:	f7fb fc7a 	bl	8001c34 <HAL_GetTick>
 8006340:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006344:	f7fb fc76 	bl	8001c34 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b0a      	cmp	r3, #10
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e056      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006356:	f7ff fc3e 	bl	8005bd6 <LL_RCC_PLL_IsReady>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0f1      	beq.n	8006344 <HAL_RCC_OscConfig+0x668>
 8006360:	e04f      	b.n	8006402 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006362:	f7ff fc2a 	bl	8005bba <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006370:	f023 0303 	bic.w	r3, r3, #3
 8006374:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006380:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006388:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638a:	f7fb fc53 	bl	8001c34 <HAL_GetTick>
 800638e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006392:	f7fb fc4f 	bl	8001c34 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b0a      	cmp	r3, #10
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e02f      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80063a4:	f7ff fc17 	bl	8005bd6 <LL_RCC_PLL_IsReady>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f1      	bne.n	8006392 <HAL_RCC_OscConfig+0x6b6>
 80063ae:	e028      	b.n	8006402 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e023      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	f003 0203 	and.w	r2, r3, #3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d115      	bne.n	80063fe <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063dc:	429a      	cmp	r2, r3
 80063de:	d10e      	bne.n	80063fe <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	021b      	lsls	r3, r3, #8
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d106      	bne.n	80063fe <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d001      	beq.n	8006402 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3720      	adds	r7, #32
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	11c1808c 	.word	0x11c1808c

08006410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e10f      	b.n	8006644 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006424:	4b89      	ldr	r3, [pc, #548]	; (800664c <HAL_RCC_ClockConfig+0x23c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d91b      	bls.n	800646a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006432:	4b86      	ldr	r3, [pc, #536]	; (800664c <HAL_RCC_ClockConfig+0x23c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f023 0207 	bic.w	r2, r3, #7
 800643a:	4984      	ldr	r1, [pc, #528]	; (800664c <HAL_RCC_ClockConfig+0x23c>)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	4313      	orrs	r3, r2
 8006440:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006442:	f7fb fbf7 	bl	8001c34 <HAL_GetTick>
 8006446:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006448:	e008      	b.n	800645c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800644a:	f7fb fbf3 	bl	8001c34 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e0f3      	b.n	8006644 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800645c:	4b7b      	ldr	r3, [pc, #492]	; (800664c <HAL_RCC_ClockConfig+0x23c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d1ef      	bne.n	800644a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d016      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fb12 	bl	8005aa4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006480:	f7fb fbd8 	bl	8001c34 <HAL_GetTick>
 8006484:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006486:	e008      	b.n	800649a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006488:	f7fb fbd4 	bl	8001c34 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e0d4      	b.n	8006644 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800649a:	f7ff fbda 	bl	8005c52 <LL_RCC_IsActiveFlag_HPRE>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f1      	beq.n	8006488 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d016      	beq.n	80064de <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fb08 	bl	8005aca <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064ba:	f7fb fbbb 	bl	8001c34 <HAL_GetTick>
 80064be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064c2:	f7fb fbb7 	bl	8001c34 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e0b7      	b.n	8006644 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80064d4:	f7ff fbce 	bl	8005c74 <LL_RCC_IsActiveFlag_SHDHPRE>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f1      	beq.n	80064c2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d016      	beq.n	8006518 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff fb01 	bl	8005af6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80064f4:	f7fb fb9e 	bl	8001c34 <HAL_GetTick>
 80064f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80064fa:	e008      	b.n	800650e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064fc:	f7fb fb9a 	bl	8001c34 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e09a      	b.n	8006644 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800650e:	f7ff fbc3 	bl	8005c98 <LL_RCC_IsActiveFlag_PPRE1>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f1      	beq.n	80064fc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b00      	cmp	r3, #0
 8006522:	d017      	beq.n	8006554 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff faf6 	bl	8005b1c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006530:	f7fb fb80 	bl	8001c34 <HAL_GetTick>
 8006534:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006536:	e008      	b.n	800654a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006538:	f7fb fb7c 	bl	8001c34 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e07c      	b.n	8006644 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800654a:	f7ff fbb6 	bl	8005cba <LL_RCC_IsActiveFlag_PPRE2>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0f1      	beq.n	8006538 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d043      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d106      	bne.n	8006576 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006568:	f7ff f983 	bl	8005872 <LL_RCC_HSE_IsReady>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11e      	bne.n	80065b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e066      	b.n	8006644 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b03      	cmp	r3, #3
 800657c:	d106      	bne.n	800658c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800657e:	f7ff fb2a 	bl	8005bd6 <LL_RCC_PLL_IsReady>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d113      	bne.n	80065b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e05b      	b.n	8006644 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d106      	bne.n	80065a2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006594:	f7ff fa1d 	bl	80059d2 <LL_RCC_MSI_IsReady>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d108      	bne.n	80065b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e050      	b.n	8006644 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80065a2:	f7ff f993 	bl	80058cc <LL_RCC_HSI_IsReady>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e049      	b.n	8006644 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff fa57 	bl	8005a68 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ba:	f7fb fb3b 	bl	8001c34 <HAL_GetTick>
 80065be:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c0:	e00a      	b.n	80065d8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c2:	f7fb fb37 	bl	8001c34 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e035      	b.n	8006644 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d8:	f7ff fa59 	bl	8005a8e <LL_RCC_GetSysClkSource>
 80065dc:	4602      	mov	r2, r0
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d1ec      	bne.n	80065c2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065e8:	4b18      	ldr	r3, [pc, #96]	; (800664c <HAL_RCC_ClockConfig+0x23c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d21b      	bcs.n	800662e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f6:	4b15      	ldr	r3, [pc, #84]	; (800664c <HAL_RCC_ClockConfig+0x23c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f023 0207 	bic.w	r2, r3, #7
 80065fe:	4913      	ldr	r1, [pc, #76]	; (800664c <HAL_RCC_ClockConfig+0x23c>)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	4313      	orrs	r3, r2
 8006604:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006606:	f7fb fb15 	bl	8001c34 <HAL_GetTick>
 800660a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800660c:	e008      	b.n	8006620 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800660e:	f7fb fb11 	bl	8001c34 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e011      	b.n	8006644 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006620:	4b0a      	ldr	r3, [pc, #40]	; (800664c <HAL_RCC_ClockConfig+0x23c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d1ef      	bne.n	800660e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800662e:	f000 f8b3 	bl	8006798 <HAL_RCC_GetHCLKFreq>
 8006632:	4603      	mov	r3, r0
 8006634:	4a06      	ldr	r2, [pc, #24]	; (8006650 <HAL_RCC_ClockConfig+0x240>)
 8006636:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006638:	4b06      	ldr	r3, [pc, #24]	; (8006654 <HAL_RCC_ClockConfig+0x244>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f7fb faef 	bl	8001c20 <HAL_InitTick>
 8006642:	4603      	mov	r3, r0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	58004000 	.word	0x58004000
 8006650:	20000000 	.word	0x20000000
 8006654:	20000034 	.word	0x20000034

08006658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006658:	b590      	push	{r4, r7, lr}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006666:	f7ff fa12 	bl	8005a8e <LL_RCC_GetSysClkSource>
 800666a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800666c:	f7ff fae6 	bl	8005c3c <LL_RCC_PLL_GetMainSource>
 8006670:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <HAL_RCC_GetSysClockFreq+0x2c>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b0c      	cmp	r3, #12
 800667c:	d139      	bne.n	80066f2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d136      	bne.n	80066f2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006684:	f7ff f9b5 	bl	80059f2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d115      	bne.n	80066ba <HAL_RCC_GetSysClockFreq+0x62>
 800668e:	f7ff f9b0 	bl	80059f2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006692:	4603      	mov	r3, r0
 8006694:	2b01      	cmp	r3, #1
 8006696:	d106      	bne.n	80066a6 <HAL_RCC_GetSysClockFreq+0x4e>
 8006698:	f7ff f9bb 	bl	8005a12 <LL_RCC_MSI_GetRange>
 800669c:	4603      	mov	r3, r0
 800669e:	0a1b      	lsrs	r3, r3, #8
 80066a0:	f003 030f 	and.w	r3, r3, #15
 80066a4:	e005      	b.n	80066b2 <HAL_RCC_GetSysClockFreq+0x5a>
 80066a6:	f7ff f9bf 	bl	8005a28 <LL_RCC_MSI_GetRangeAfterStandby>
 80066aa:	4603      	mov	r3, r0
 80066ac:	0a1b      	lsrs	r3, r3, #8
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	4a36      	ldr	r2, [pc, #216]	; (800678c <HAL_RCC_GetSysClockFreq+0x134>)
 80066b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b8:	e014      	b.n	80066e4 <HAL_RCC_GetSysClockFreq+0x8c>
 80066ba:	f7ff f99a 	bl	80059f2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d106      	bne.n	80066d2 <HAL_RCC_GetSysClockFreq+0x7a>
 80066c4:	f7ff f9a5 	bl	8005a12 <LL_RCC_MSI_GetRange>
 80066c8:	4603      	mov	r3, r0
 80066ca:	091b      	lsrs	r3, r3, #4
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	e005      	b.n	80066de <HAL_RCC_GetSysClockFreq+0x86>
 80066d2:	f7ff f9a9 	bl	8005a28 <LL_RCC_MSI_GetRangeAfterStandby>
 80066d6:	4603      	mov	r3, r0
 80066d8:	091b      	lsrs	r3, r3, #4
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	4a2b      	ldr	r2, [pc, #172]	; (800678c <HAL_RCC_GetSysClockFreq+0x134>)
 80066e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d115      	bne.n	8006718 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066f0:	e012      	b.n	8006718 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d102      	bne.n	80066fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066f8:	4b25      	ldr	r3, [pc, #148]	; (8006790 <HAL_RCC_GetSysClockFreq+0x138>)
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	e00c      	b.n	8006718 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b08      	cmp	r3, #8
 8006702:	d109      	bne.n	8006718 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006704:	f7ff f888 	bl	8005818 <LL_RCC_HSE_IsEnabledDiv2>
 8006708:	4603      	mov	r3, r0
 800670a:	2b01      	cmp	r3, #1
 800670c:	d102      	bne.n	8006714 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800670e:	4b20      	ldr	r3, [pc, #128]	; (8006790 <HAL_RCC_GetSysClockFreq+0x138>)
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	e001      	b.n	8006718 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006714:	4b1f      	ldr	r3, [pc, #124]	; (8006794 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006716:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006718:	f7ff f9b9 	bl	8005a8e <LL_RCC_GetSysClkSource>
 800671c:	4603      	mov	r3, r0
 800671e:	2b0c      	cmp	r3, #12
 8006720:	d12f      	bne.n	8006782 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006722:	f7ff fa8b 	bl	8005c3c <LL_RCC_PLL_GetMainSource>
 8006726:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b02      	cmp	r3, #2
 800672c:	d003      	beq.n	8006736 <HAL_RCC_GetSysClockFreq+0xde>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b03      	cmp	r3, #3
 8006732:	d003      	beq.n	800673c <HAL_RCC_GetSysClockFreq+0xe4>
 8006734:	e00d      	b.n	8006752 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006736:	4b16      	ldr	r3, [pc, #88]	; (8006790 <HAL_RCC_GetSysClockFreq+0x138>)
 8006738:	60fb      	str	r3, [r7, #12]
        break;
 800673a:	e00d      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800673c:	f7ff f86c 	bl	8005818 <LL_RCC_HSE_IsEnabledDiv2>
 8006740:	4603      	mov	r3, r0
 8006742:	2b01      	cmp	r3, #1
 8006744:	d102      	bne.n	800674c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006746:	4b12      	ldr	r3, [pc, #72]	; (8006790 <HAL_RCC_GetSysClockFreq+0x138>)
 8006748:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800674a:	e005      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800674c:	4b11      	ldr	r3, [pc, #68]	; (8006794 <HAL_RCC_GetSysClockFreq+0x13c>)
 800674e:	60fb      	str	r3, [r7, #12]
        break;
 8006750:	e002      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	60fb      	str	r3, [r7, #12]
        break;
 8006756:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006758:	f7ff fa4e 	bl	8005bf8 <LL_RCC_PLL_GetN>
 800675c:	4602      	mov	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	fb03 f402 	mul.w	r4, r3, r2
 8006764:	f7ff fa5f 	bl	8005c26 <LL_RCC_PLL_GetDivider>
 8006768:	4603      	mov	r3, r0
 800676a:	091b      	lsrs	r3, r3, #4
 800676c:	3301      	adds	r3, #1
 800676e:	fbb4 f4f3 	udiv	r4, r4, r3
 8006772:	f7ff fa4d 	bl	8005c10 <LL_RCC_PLL_GetR>
 8006776:	4603      	mov	r3, r0
 8006778:	0f5b      	lsrs	r3, r3, #29
 800677a:	3301      	adds	r3, #1
 800677c:	fbb4 f3f3 	udiv	r3, r4, r3
 8006780:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006782:	697b      	ldr	r3, [r7, #20]
}
 8006784:	4618      	mov	r0, r3
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	bd90      	pop	{r4, r7, pc}
 800678c:	0801b428 	.word	0x0801b428
 8006790:	00f42400 	.word	0x00f42400
 8006794:	01e84800 	.word	0x01e84800

08006798 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006798:	b598      	push	{r3, r4, r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800679c:	f7ff ff5c 	bl	8006658 <HAL_RCC_GetSysClockFreq>
 80067a0:	4604      	mov	r4, r0
 80067a2:	f7ff f9ce 	bl	8005b42 <LL_RCC_GetAHBPrescaler>
 80067a6:	4603      	mov	r3, r0
 80067a8:	091b      	lsrs	r3, r3, #4
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	4a03      	ldr	r2, [pc, #12]	; (80067bc <HAL_RCC_GetHCLKFreq+0x24>)
 80067b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	bd98      	pop	{r3, r4, r7, pc}
 80067bc:	0801b3c8 	.word	0x0801b3c8

080067c0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067c0:	b598      	push	{r3, r4, r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80067c4:	f7ff ffe8 	bl	8006798 <HAL_RCC_GetHCLKFreq>
 80067c8:	4604      	mov	r4, r0
 80067ca:	f7ff f9d2 	bl	8005b72 <LL_RCC_GetAPB1Prescaler>
 80067ce:	4603      	mov	r3, r0
 80067d0:	0a1b      	lsrs	r3, r3, #8
 80067d2:	4a03      	ldr	r2, [pc, #12]	; (80067e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80067dc:	4618      	mov	r0, r3
 80067de:	bd98      	pop	{r3, r4, r7, pc}
 80067e0:	0801b408 	.word	0x0801b408

080067e4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067e4:	b598      	push	{r3, r4, r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80067e8:	f7ff ffd6 	bl	8006798 <HAL_RCC_GetHCLKFreq>
 80067ec:	4604      	mov	r4, r0
 80067ee:	f7ff f9cb 	bl	8005b88 <LL_RCC_GetAPB2Prescaler>
 80067f2:	4603      	mov	r3, r0
 80067f4:	0adb      	lsrs	r3, r3, #11
 80067f6:	4a03      	ldr	r2, [pc, #12]	; (8006804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006800:	4618      	mov	r0, r3
 8006802:	bd98      	pop	{r3, r4, r7, pc}
 8006804:	0801b408 	.word	0x0801b408

08006808 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006808:	b590      	push	{r4, r7, lr}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	091b      	lsrs	r3, r3, #4
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	4a10      	ldr	r2, [pc, #64]	; (800685c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800681a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800681e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006820:	f7ff f99a 	bl	8005b58 <LL_RCC_GetAHB3Prescaler>
 8006824:	4603      	mov	r3, r0
 8006826:	091b      	lsrs	r3, r3, #4
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	4a0c      	ldr	r2, [pc, #48]	; (8006860 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800682e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	4a09      	ldr	r2, [pc, #36]	; (8006864 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800683e:	fba2 2303 	umull	r2, r3, r2, r3
 8006842:	0c9c      	lsrs	r4, r3, #18
 8006844:	f7fe ffae 	bl	80057a4 <HAL_PWREx_GetVoltageRange>
 8006848:	4603      	mov	r3, r0
 800684a:	4619      	mov	r1, r3
 800684c:	4620      	mov	r0, r4
 800684e:	f000 f80b 	bl	8006868 <RCC_SetFlashLatency>
 8006852:	4603      	mov	r3, r0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	bd90      	pop	{r4, r7, pc}
 800685c:	0801b428 	.word	0x0801b428
 8006860:	0801b3c8 	.word	0x0801b3c8
 8006864:	431bde83 	.word	0x431bde83

08006868 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08e      	sub	sp, #56	; 0x38
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006872:	4a3c      	ldr	r2, [pc, #240]	; (8006964 <RCC_SetFlashLatency+0xfc>)
 8006874:	f107 0320 	add.w	r3, r7, #32
 8006878:	e892 0003 	ldmia.w	r2, {r0, r1}
 800687c:	6018      	str	r0, [r3, #0]
 800687e:	3304      	adds	r3, #4
 8006880:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006882:	4a39      	ldr	r2, [pc, #228]	; (8006968 <RCC_SetFlashLatency+0x100>)
 8006884:	f107 0318 	add.w	r3, r7, #24
 8006888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800688c:	6018      	str	r0, [r3, #0]
 800688e:	3304      	adds	r3, #4
 8006890:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006892:	4a36      	ldr	r2, [pc, #216]	; (800696c <RCC_SetFlashLatency+0x104>)
 8006894:	f107 030c 	add.w	r3, r7, #12
 8006898:	ca07      	ldmia	r2, {r0, r1, r2}
 800689a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800689e:	2300      	movs	r3, #0
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a8:	d11d      	bne.n	80068e6 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80068aa:	2300      	movs	r3, #0
 80068ac:	633b      	str	r3, [r7, #48]	; 0x30
 80068ae:	e016      	b.n	80068de <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80068b8:	4413      	add	r3, r2
 80068ba:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80068be:	461a      	mov	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d808      	bhi.n	80068d8 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80068ce:	4413      	add	r3, r2
 80068d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068d6:	e023      	b.n	8006920 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	3301      	adds	r3, #1
 80068dc:	633b      	str	r3, [r7, #48]	; 0x30
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d9e5      	bls.n	80068b0 <RCC_SetFlashLatency+0x48>
 80068e4:	e01c      	b.n	8006920 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80068e6:	2300      	movs	r3, #0
 80068e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ea:	e016      	b.n	800691a <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80068f4:	4413      	add	r3, r2
 80068f6:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80068fa:	461a      	mov	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4293      	cmp	r3, r2
 8006900:	d808      	bhi.n	8006914 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800690a:	4413      	add	r3, r2
 800690c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006910:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006912:	e005      	b.n	8006920 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	3301      	adds	r3, #1
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	2b02      	cmp	r3, #2
 800691e:	d9e5      	bls.n	80068ec <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006920:	4b13      	ldr	r3, [pc, #76]	; (8006970 <RCC_SetFlashLatency+0x108>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f023 0207 	bic.w	r2, r3, #7
 8006928:	4911      	ldr	r1, [pc, #68]	; (8006970 <RCC_SetFlashLatency+0x108>)
 800692a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692c:	4313      	orrs	r3, r2
 800692e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006930:	f7fb f980 	bl	8001c34 <HAL_GetTick>
 8006934:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006936:	e008      	b.n	800694a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006938:	f7fb f97c 	bl	8001c34 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e007      	b.n	800695a <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800694a:	4b09      	ldr	r3, [pc, #36]	; (8006970 <RCC_SetFlashLatency+0x108>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006954:	429a      	cmp	r2, r3
 8006956:	d1ef      	bne.n	8006938 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3738      	adds	r7, #56	; 0x38
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	0801ac28 	.word	0x0801ac28
 8006968:	0801ac30 	.word	0x0801ac30
 800696c:	0801ac38 	.word	0x0801ac38
 8006970:	58004000 	.word	0x58004000

08006974 <LL_RCC_LSE_IsReady>:
{
 8006974:	b480      	push	{r7}
 8006976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800697c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b02      	cmp	r3, #2
 8006986:	d101      	bne.n	800698c <LL_RCC_LSE_IsReady+0x18>
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <LL_RCC_LSE_IsReady+0x1a>
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr

08006996 <LL_RCC_SetUSARTClockSource>:
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800699e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	0c1b      	lsrs	r3, r3, #16
 80069aa:	43db      	mvns	r3, r3
 80069ac:	401a      	ands	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr

080069c6 <LL_RCC_SetI2SClockSource>:
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80069ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <LL_RCC_SetLPUARTClockSource>:
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80069f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr

08006a1a <LL_RCC_SetI2CClockSource>:
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006a32:	43db      	mvns	r3, r3
 8006a34:	401a      	ands	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr

08006a52 <LL_RCC_SetLPTIMClockSource>:
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	0c1b      	lsrs	r3, r3, #16
 8006a66:	041b      	lsls	r3, r3, #16
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	401a      	ands	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	041b      	lsls	r3, r3, #16
 8006a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <LL_RCC_SetRNGClockSource>:
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a94:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006a98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr

08006aae <LL_RCC_SetADCClockSource>:
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <LL_RCC_SetRTCClockSource>:
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr

08006b02 <LL_RCC_GetRTCClockSource>:
{
 8006b02:	b480      	push	{r7}
 8006b04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc80      	pop	{r7}
 8006b18:	4770      	bx	lr

08006b1a <LL_RCC_ForceBackupDomainReset>:
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b32:	bf00      	nop
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr

08006b3a <LL_RCC_ReleaseBackupDomainReset>:
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b52:	bf00      	nop
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr
	...

08006b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006b68:	2300      	movs	r3, #0
 8006b6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d058      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006b7c:	f7fe fe04 	bl	8005788 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b80:	f7fb f858 	bl	8001c34 <HAL_GetTick>
 8006b84:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b86:	e009      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b88:	f7fb f854 	bl	8001c34 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d902      	bls.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	74fb      	strb	r3, [r7, #19]
        break;
 8006b9a:	e006      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b9c:	4b7b      	ldr	r3, [pc, #492]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba8:	d1ee      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006baa:	7cfb      	ldrb	r3, [r7, #19]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d13c      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006bb0:	f7ff ffa7 	bl	8006b02 <LL_RCC_GetRTCClockSource>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d00f      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bcc:	f7ff ffa5 	bl	8006b1a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bd0:	f7ff ffb3 	bl	8006b3a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d014      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be8:	f7fb f824 	bl	8001c34 <HAL_GetTick>
 8006bec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006bee:	e00b      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf0:	f7fb f820 	bl	8001c34 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d902      	bls.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	74fb      	strb	r3, [r7, #19]
            break;
 8006c06:	e004      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006c08:	f7ff feb4 	bl	8006974 <LL_RCC_LSE_IsReady>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d1ee      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006c12:	7cfb      	ldrb	r3, [r7, #19]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d105      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff ff5b 	bl	8006ad8 <LL_RCC_SetRTCClockSource>
 8006c22:	e004      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c24:	7cfb      	ldrb	r3, [r7, #19]
 8006c26:	74bb      	strb	r3, [r7, #18]
 8006c28:	e001      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2a:	7cfb      	ldrb	r3, [r7, #19]
 8006c2c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff fea9 	bl	8006996 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d004      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fe9e 	bl	8006996 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d004      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff fec0 	bl	80069f0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff fee6 	bl	8006a52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d004      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff fedb 	bl	8006a52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff fed0 	bl	8006a52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff fea9 	bl	8006a1a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff fe9e 	bl	8006a1a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d004      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff fe93 	bl	8006a1a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d011      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff fe5e 	bl	80069c6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d12:	d107      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d010      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff fea5 	bl	8006a84 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d107      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d50:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d011      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff fea3 	bl	8006aae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d70:	d107      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d80:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006d82:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	58000400 	.word	0x58000400

08006d90 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d068      	beq.n	8006e74 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fa fccc 	bl	8001754 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dc4:	4b2e      	ldr	r3, [pc, #184]	; (8006e80 <HAL_RTC_Init+0xf0>)
 8006dc6:	22ca      	movs	r2, #202	; 0xca
 8006dc8:	625a      	str	r2, [r3, #36]	; 0x24
 8006dca:	4b2d      	ldr	r3, [pc, #180]	; (8006e80 <HAL_RTC_Init+0xf0>)
 8006dcc:	2253      	movs	r2, #83	; 0x53
 8006dce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fa0f 	bl	80071f4 <RTC_EnterInitMode>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d13f      	bne.n	8006e60 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006de0:	4b27      	ldr	r3, [pc, #156]	; (8006e80 <HAL_RTC_Init+0xf0>)
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	4a26      	ldr	r2, [pc, #152]	; (8006e80 <HAL_RTC_Init+0xf0>)
 8006de6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dee:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006df0:	4b23      	ldr	r3, [pc, #140]	; (8006e80 <HAL_RTC_Init+0xf0>)
 8006df2:	699a      	ldr	r2, [r3, #24]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6859      	ldr	r1, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	4319      	orrs	r1, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	430b      	orrs	r3, r1
 8006e04:	491e      	ldr	r1, [pc, #120]	; (8006e80 <HAL_RTC_Init+0xf0>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	041b      	lsls	r3, r3, #16
 8006e14:	491a      	ldr	r1, [pc, #104]	; (8006e80 <HAL_RTC_Init+0xf0>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006e1a:	4b19      	ldr	r3, [pc, #100]	; (8006e80 <HAL_RTC_Init+0xf0>)
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	4914      	ldr	r1, [pc, #80]	; (8006e80 <HAL_RTC_Init+0xf0>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fa12 	bl	800725c <RTC_ExitInitMode>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10e      	bne.n	8006e60 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006e42:	4b0f      	ldr	r3, [pc, #60]	; (8006e80 <HAL_RTC_Init+0xf0>)
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a19      	ldr	r1, [r3, #32]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	4319      	orrs	r1, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	4909      	ldr	r1, [pc, #36]	; (8006e80 <HAL_RTC_Init+0xf0>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e60:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <HAL_RTC_Init+0xf0>)
 8006e62:	22ff      	movs	r2, #255	; 0xff
 8006e64:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d103      	bne.n	8006e74 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40002800 	.word	0x40002800

08006e84 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006e84:	b590      	push	{r4, r7, lr}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d101      	bne.n	8006ea2 <HAL_RTC_SetAlarm_IT+0x1e>
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e0f3      	b.n	800708a <HAL_RTC_SetAlarm_IT+0x206>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2202      	movs	r2, #2
 8006eae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006eb2:	4b78      	ldr	r3, [pc, #480]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eba:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec2:	d06a      	beq.n	8006f9a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d13a      	bne.n	8006f40 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006eca:	4b72      	ldr	r3, [pc, #456]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 f9f5 	bl	80072d8 <RTC_ByteToBcd2>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 f9ee 	bl	80072d8 <RTC_ByteToBcd2>
 8006efc:	4603      	mov	r3, r0
 8006efe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f00:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	789b      	ldrb	r3, [r3, #2]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 f9e6 	bl	80072d8 <RTC_ByteToBcd2>
 8006f0c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f0e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	78db      	ldrb	r3, [r3, #3]
 8006f16:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f18:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 f9d8 	bl	80072d8 <RTC_ByteToBcd2>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f2c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f34:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]
 8006f3e:	e02c      	b.n	8006f9a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006f48:	d00d      	beq.n	8006f66 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f52:	d008      	beq.n	8006f66 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f54:	4b4f      	ldr	r3, [pc, #316]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2200      	movs	r2, #0
 8006f64:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f72:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f78:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	78db      	ldrb	r3, [r3, #3]
 8006f7e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f80:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f88:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f8a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f90:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f9a:	4b3e      	ldr	r3, [pc, #248]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f9c:	22ca      	movs	r2, #202	; 0xca
 8006f9e:	625a      	str	r2, [r3, #36]	; 0x24
 8006fa0:	4b3c      	ldr	r3, [pc, #240]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fa2:	2253      	movs	r2, #83	; 0x53
 8006fa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fae:	d12c      	bne.n	800700a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006fb0:	4b38      	ldr	r3, [pc, #224]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	4a37      	ldr	r2, [pc, #220]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006fba:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006fbc:	4b35      	ldr	r3, [pc, #212]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc8:	d107      	bne.n	8006fda <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	699a      	ldr	r2, [r3, #24]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	4930      	ldr	r1, [pc, #192]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	644b      	str	r3, [r1, #68]	; 0x44
 8006fd8:	e006      	b.n	8006fe8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006fda:	4a2e      	ldr	r2, [pc, #184]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006fe0:	4a2c      	ldr	r2, [pc, #176]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006fe8:	4a2a      	ldr	r2, [pc, #168]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff4:	f043 0201 	orr.w	r2, r3, #1
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006ffc:	4b25      	ldr	r3, [pc, #148]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	4a24      	ldr	r2, [pc, #144]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8007002:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007006:	6193      	str	r3, [r2, #24]
 8007008:	e02b      	b.n	8007062 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800700a:	4b22      	ldr	r3, [pc, #136]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	4a21      	ldr	r2, [pc, #132]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8007010:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8007014:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007016:	4b1f      	ldr	r3, [pc, #124]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8007018:	2202      	movs	r2, #2
 800701a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007022:	d107      	bne.n	8007034 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	699a      	ldr	r2, [r3, #24]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	4919      	ldr	r1, [pc, #100]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 800702e:	4313      	orrs	r3, r2
 8007030:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007032:	e006      	b.n	8007042 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007034:	4a17      	ldr	r2, [pc, #92]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800703a:	4a16      	ldr	r2, [pc, #88]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007042:	4a14      	ldr	r2, [pc, #80]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	f043 0202 	orr.w	r2, r3, #2
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007056:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	4a0e      	ldr	r2, [pc, #56]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 800705c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8007060:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007062:	4b0d      	ldr	r3, [pc, #52]	; (8007098 <HAL_RTC_SetAlarm_IT+0x214>)
 8007064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007068:	4a0b      	ldr	r2, [pc, #44]	; (8007098 <HAL_RTC_SetAlarm_IT+0x214>)
 800706a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800706e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007072:	4b08      	ldr	r3, [pc, #32]	; (8007094 <HAL_RTC_SetAlarm_IT+0x210>)
 8007074:	22ff      	movs	r2, #255	; 0xff
 8007076:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	371c      	adds	r7, #28
 800708e:	46bd      	mov	sp, r7
 8007090:	bd90      	pop	{r4, r7, pc}
 8007092:	bf00      	nop
 8007094:	40002800 	.word	0x40002800
 8007098:	58000800 	.word	0x58000800

0800709c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d101      	bne.n	80070b4 <HAL_RTC_DeactivateAlarm+0x18>
 80070b0:	2302      	movs	r3, #2
 80070b2:	e048      	b.n	8007146 <HAL_RTC_DeactivateAlarm+0xaa>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070c4:	4b22      	ldr	r3, [pc, #136]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070c6:	22ca      	movs	r2, #202	; 0xca
 80070c8:	625a      	str	r2, [r3, #36]	; 0x24
 80070ca:	4b21      	ldr	r3, [pc, #132]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070cc:	2253      	movs	r2, #83	; 0x53
 80070ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d6:	d115      	bne.n	8007104 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80070d8:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	4a1c      	ldr	r2, [pc, #112]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80070e2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80070e4:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e8:	4a19      	ldr	r2, [pc, #100]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070ee:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	f023 0201 	bic.w	r2, r3, #1
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80070fc:	4b14      	ldr	r3, [pc, #80]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 80070fe:	2201      	movs	r2, #1
 8007100:	65da      	str	r2, [r3, #92]	; 0x5c
 8007102:	e014      	b.n	800712e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007104:	4b12      	ldr	r3, [pc, #72]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	4a11      	ldr	r2, [pc, #68]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 800710a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800710e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007110:	4b0f      	ldr	r3, [pc, #60]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007114:	4a0e      	ldr	r2, [pc, #56]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800711a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	f023 0202 	bic.w	r2, r3, #2
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007128:	4b09      	ldr	r3, [pc, #36]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 800712a:	2202      	movs	r2, #2
 800712c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800712e:	4b08      	ldr	r3, [pc, #32]	; (8007150 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007130:	22ff      	movs	r2, #255	; 0xff
 8007132:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr
 8007150:	40002800 	.word	0x40002800

08007154 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800715c:	4b11      	ldr	r3, [pc, #68]	; (80071a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800715e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	4013      	ands	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007172:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007174:	2201      	movs	r2, #1
 8007176:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7fa ffe9 	bl	8002150 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007188:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800718a:	2202      	movs	r2, #2
 800718c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f94a 	bl	8007428 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800719c:	bf00      	nop
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	40002800 	.word	0x40002800

080071a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80071b0:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <HAL_RTC_WaitForSynchro+0x48>)
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	4a0e      	ldr	r2, [pc, #56]	; (80071f0 <HAL_RTC_WaitForSynchro+0x48>)
 80071b6:	f023 0320 	bic.w	r3, r3, #32
 80071ba:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80071bc:	f7fa fd3a 	bl	8001c34 <HAL_GetTick>
 80071c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80071c2:	e009      	b.n	80071d8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071c4:	f7fa fd36 	bl	8001c34 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071d2:	d901      	bls.n	80071d8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e006      	b.n	80071e6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80071d8:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <HAL_RTC_WaitForSynchro+0x48>)
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0ef      	beq.n	80071c4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40002800 	.word	0x40002800

080071f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007200:	4b15      	ldr	r3, [pc, #84]	; (8007258 <RTC_EnterInitMode+0x64>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d120      	bne.n	800724e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800720c:	4b12      	ldr	r3, [pc, #72]	; (8007258 <RTC_EnterInitMode+0x64>)
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	4a11      	ldr	r2, [pc, #68]	; (8007258 <RTC_EnterInitMode+0x64>)
 8007212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007216:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007218:	f7fa fd0c 	bl	8001c34 <HAL_GetTick>
 800721c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800721e:	e00d      	b.n	800723c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007220:	f7fa fd08 	bl	8001c34 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800722e:	d905      	bls.n	800723c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2203      	movs	r2, #3
 8007238:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800723c:	4b06      	ldr	r3, [pc, #24]	; (8007258 <RTC_EnterInitMode+0x64>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007244:	2b00      	cmp	r3, #0
 8007246:	d102      	bne.n	800724e <RTC_EnterInitMode+0x5a>
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	2b03      	cmp	r3, #3
 800724c:	d1e8      	bne.n	8007220 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	40002800 	.word	0x40002800

0800725c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007268:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <RTC_ExitInitMode+0x78>)
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	4a19      	ldr	r2, [pc, #100]	; (80072d4 <RTC_ExitInitMode+0x78>)
 800726e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007272:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007274:	4b17      	ldr	r3, [pc, #92]	; (80072d4 <RTC_ExitInitMode+0x78>)
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	f003 0320 	and.w	r3, r3, #32
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10c      	bne.n	800729a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff ff91 	bl	80071a8 <HAL_RTC_WaitForSynchro>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01e      	beq.n	80072ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2203      	movs	r2, #3
 8007290:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	73fb      	strb	r3, [r7, #15]
 8007298:	e017      	b.n	80072ca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800729a:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <RTC_ExitInitMode+0x78>)
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	4a0d      	ldr	r2, [pc, #52]	; (80072d4 <RTC_ExitInitMode+0x78>)
 80072a0:	f023 0320 	bic.w	r3, r3, #32
 80072a4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff ff7e 	bl	80071a8 <HAL_RTC_WaitForSynchro>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d005      	beq.n	80072be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2203      	movs	r2, #3
 80072b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80072be:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <RTC_ExitInitMode+0x78>)
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	4a04      	ldr	r2, [pc, #16]	; (80072d4 <RTC_ExitInitMode+0x78>)
 80072c4:	f043 0320 	orr.w	r3, r3, #32
 80072c8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	40002800 	.word	0x40002800

080072d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80072ea:	e005      	b.n	80072f8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	3b0a      	subs	r3, #10
 80072f6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80072f8:	7afb      	ldrb	r3, [r7, #11]
 80072fa:	2b09      	cmp	r3, #9
 80072fc:	d8f6      	bhi.n	80072ec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	b2db      	uxtb	r3, r3
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	b2da      	uxtb	r2, r3
 8007306:	7afb      	ldrb	r3, [r7, #11]
 8007308:	4313      	orrs	r3, r2
 800730a:	b2db      	uxtb	r3, r3
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr
	...

08007318 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_RTCEx_EnableBypassShadow+0x16>
 800732a:	2302      	movs	r3, #2
 800732c:	e01f      	b.n	800736e <HAL_RTCEx_EnableBypassShadow+0x56>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2202      	movs	r2, #2
 800733a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800733e:	4b0e      	ldr	r3, [pc, #56]	; (8007378 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007340:	22ca      	movs	r2, #202	; 0xca
 8007342:	625a      	str	r2, [r3, #36]	; 0x24
 8007344:	4b0c      	ldr	r3, [pc, #48]	; (8007378 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007346:	2253      	movs	r2, #83	; 0x53
 8007348:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800734a:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	4a0a      	ldr	r2, [pc, #40]	; (8007378 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007350:	f043 0320 	orr.w	r3, r3, #32
 8007354:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007356:	4b08      	ldr	r3, [pc, #32]	; (8007378 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007358:	22ff      	movs	r2, #255	; 0xff
 800735a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr
 8007378:	40002800 	.word	0x40002800

0800737c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800738a:	2b01      	cmp	r3, #1
 800738c:	d101      	bne.n	8007392 <HAL_RTCEx_SetSSRU_IT+0x16>
 800738e:	2302      	movs	r3, #2
 8007390:	e027      	b.n	80073e2 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2202      	movs	r2, #2
 800739e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073a2:	4b12      	ldr	r3, [pc, #72]	; (80073ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073a4:	22ca      	movs	r2, #202	; 0xca
 80073a6:	625a      	str	r2, [r3, #36]	; 0x24
 80073a8:	4b10      	ldr	r3, [pc, #64]	; (80073ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073aa:	2253      	movs	r2, #83	; 0x53
 80073ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80073ae:	4b0f      	ldr	r3, [pc, #60]	; (80073ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	4a0e      	ldr	r2, [pc, #56]	; (80073ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b8:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80073ba:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80073bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073c0:	4a0b      	ldr	r2, [pc, #44]	; (80073f0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80073c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073ca:	4b08      	ldr	r3, [pc, #32]	; (80073ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80073cc:	22ff      	movs	r2, #255	; 0xff
 80073ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr
 80073ec:	40002800 	.word	0x40002800
 80073f0:	58000800 	.word	0x58000800

080073f4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80073fc:	4b09      	ldr	r3, [pc, #36]	; (8007424 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80073fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007408:	4b06      	ldr	r3, [pc, #24]	; (8007424 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800740a:	2240      	movs	r2, #64	; 0x40
 800740c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fa fea8 	bl	8002164 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800741c:	bf00      	nop
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	40002800 	.word	0x40002800

08007428 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	bc80      	pop	{r7}
 8007438:	4770      	bx	lr
	...

0800743c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007448:	4b07      	ldr	r3, [pc, #28]	; (8007468 <HAL_RTCEx_BKUPWrite+0x2c>)
 800744a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4413      	add	r3, r2
 8007454:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	601a      	str	r2, [r3, #0]
}
 800745c:	bf00      	nop
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	bc80      	pop	{r7}
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	4000b100 	.word	0x4000b100

0800746c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007476:	4b07      	ldr	r3, [pc, #28]	; (8007494 <HAL_RTCEx_BKUPRead+0x28>)
 8007478:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4413      	add	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	4000b100 	.word	0x4000b100

08007498 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80074a0:	4b06      	ldr	r3, [pc, #24]	; (80074bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074a8:	4904      	ldr	r1, [pc, #16]	; (80074bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	608b      	str	r3, [r1, #8]
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bc80      	pop	{r7}
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	58000400 	.word	0x58000400

080074c0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80074c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ca:	4a04      	ldr	r2, [pc, #16]	; (80074dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80074cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80074d4:	bf00      	nop
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bc80      	pop	{r7}
 80074da:	4770      	bx	lr
 80074dc:	58000400 	.word	0x58000400

080074e0 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80074e4:	4b05      	ldr	r3, [pc, #20]	; (80074fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80074e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ea:	4a04      	ldr	r2, [pc, #16]	; (80074fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80074ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80074f4:	bf00      	nop
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr
 80074fc:	58000400 	.word	0x58000400

08007500 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007504:	4b03      	ldr	r3, [pc, #12]	; (8007514 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800750a:	619a      	str	r2, [r3, #24]
}
 800750c:	bf00      	nop
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr
 8007514:	58000400 	.word	0x58000400

08007518 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800751c:	4b06      	ldr	r3, [pc, #24]	; (8007538 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b02      	cmp	r3, #2
 8007526:	d101      	bne.n	800752c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	46bd      	mov	sp, r7
 8007532:	bc80      	pop	{r7}
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	58000400 	.word	0x58000400

0800753c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007540:	4b06      	ldr	r3, [pc, #24]	; (800755c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b04      	cmp	r3, #4
 800754a:	d101      	bne.n	8007550 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	58000400 	.word	0x58000400

08007560 <LL_RCC_RF_DisableReset>:
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800756c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007570:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007574:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007578:	bf00      	nop
 800757a:	46bd      	mov	sp, r7
 800757c:	bc80      	pop	{r7}
 800757e:	4770      	bx	lr

08007580 <LL_RCC_IsRFUnderReset>:
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800758c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007594:	d101      	bne.n	800759a <LL_RCC_IsRFUnderReset+0x1a>
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <LL_RCC_IsRFUnderReset+0x1c>
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	bc80      	pop	{r7}
 80075a2:	4770      	bx	lr

080075a4 <LL_EXTI_EnableIT_32_63>:
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80075ac:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80075ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80075b2:	4905      	ldr	r1, [pc, #20]	; (80075c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bc80      	pop	{r7}
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	58000800 	.word	0x58000800

080075cc <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d103      	bne.n	80075e2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	73fb      	strb	r3, [r7, #15]
    return status;
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	e04b      	b.n	800767a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	799b      	ldrb	r3, [r3, #6]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d105      	bne.n	80075fc <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fa f97a 	bl	80018f0 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8007602:	f7ff ffad 	bl	8007560 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007606:	4b1f      	ldr	r3, [pc, #124]	; (8007684 <HAL_SUBGHZ_Init+0xb8>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4613      	mov	r3, r2
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	1a9b      	subs	r3, r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	0cdb      	lsrs	r3, r3, #19
 8007614:	2264      	movs	r2, #100	; 0x64
 8007616:	fb02 f303 	mul.w	r3, r2, r3
 800761a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d105      	bne.n	800762e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	609a      	str	r2, [r3, #8]
      break;
 800762c:	e007      	b.n	800763e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	3b01      	subs	r3, #1
 8007632:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007634:	f7ff ffa4 	bl	8007580 <LL_RCC_IsRFUnderReset>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1ee      	bne.n	800761c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800763e:	f7ff ff3f 	bl	80074c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007642:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007646:	f7ff ffad 	bl	80075a4 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800764a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800764e:	f7ff ff23 	bl	8007498 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007652:	f7ff ff55 	bl	8007500 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4618      	mov	r0, r3
 8007662:	f000 faad 	bl	8007bc0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	719a      	strb	r2, [r3, #6]

  return status;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	20000000 	.word	0x20000000

08007688 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	607a      	str	r2, [r7, #4]
 8007692:	461a      	mov	r2, r3
 8007694:	460b      	mov	r3, r1
 8007696:	817b      	strh	r3, [r7, #10]
 8007698:	4613      	mov	r3, r2
 800769a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	799b      	ldrb	r3, [r3, #6]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d14a      	bne.n	800773c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	795b      	ldrb	r3, [r3, #5]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d101      	bne.n	80076b2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80076ae:	2302      	movs	r3, #2
 80076b0:	e045      	b.n	800773e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2201      	movs	r2, #1
 80076b6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2202      	movs	r2, #2
 80076bc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fb4c 	bl	8007d5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80076c4:	f7ff ff0c 	bl	80074e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80076c8:	210d      	movs	r1, #13
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fa98 	bl	8007c00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80076d0:	897b      	ldrh	r3, [r7, #10]
 80076d2:	0a1b      	lsrs	r3, r3, #8
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	4619      	mov	r1, r3
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fa90 	bl	8007c00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80076e0:	897b      	ldrh	r3, [r7, #10]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	4619      	mov	r1, r3
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 fa8a 	bl	8007c00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80076ec:	2300      	movs	r3, #0
 80076ee:	82bb      	strh	r3, [r7, #20]
 80076f0:	e00a      	b.n	8007708 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80076f2:	8abb      	ldrh	r3, [r7, #20]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	4413      	add	r3, r2
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	4619      	mov	r1, r3
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fa7f 	bl	8007c00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007702:	8abb      	ldrh	r3, [r7, #20]
 8007704:	3301      	adds	r3, #1
 8007706:	82bb      	strh	r3, [r7, #20]
 8007708:	8aba      	ldrh	r2, [r7, #20]
 800770a:	893b      	ldrh	r3, [r7, #8]
 800770c:	429a      	cmp	r2, r3
 800770e:	d3f0      	bcc.n	80076f2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007710:	f7ff fed6 	bl	80074c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fb45 	bl	8007da4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	75fb      	strb	r3, [r7, #23]
 8007726:	e001      	b.n	800772c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	715a      	strb	r2, [r3, #5]

    return status;
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	e000      	b.n	800773e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800773c:	2302      	movs	r3, #2
  }
}
 800773e:	4618      	mov	r0, r3
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b088      	sub	sp, #32
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	461a      	mov	r2, r3
 8007752:	460b      	mov	r3, r1
 8007754:	817b      	strh	r3, [r7, #10]
 8007756:	4613      	mov	r3, r2
 8007758:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	799b      	ldrb	r3, [r3, #6]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b01      	cmp	r3, #1
 8007766:	d14a      	bne.n	80077fe <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	795b      	ldrb	r3, [r3, #5]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d101      	bne.n	8007774 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007770:	2302      	movs	r3, #2
 8007772:	e045      	b.n	8007800 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2201      	movs	r2, #1
 8007778:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 faee 	bl	8007d5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007780:	f7ff feae 	bl	80074e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007784:	211d      	movs	r1, #29
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 fa3a 	bl	8007c00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800778c:	897b      	ldrh	r3, [r7, #10]
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	b29b      	uxth	r3, r3
 8007792:	b2db      	uxtb	r3, r3
 8007794:	4619      	mov	r1, r3
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 fa32 	bl	8007c00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800779c:	897b      	ldrh	r3, [r7, #10]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	4619      	mov	r1, r3
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 fa2c 	bl	8007c00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80077a8:	2100      	movs	r1, #0
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 fa28 	bl	8007c00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80077b0:	2300      	movs	r3, #0
 80077b2:	82fb      	strh	r3, [r7, #22]
 80077b4:	e009      	b.n	80077ca <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80077b6:	69b9      	ldr	r1, [r7, #24]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 fa77 	bl	8007cac <SUBGHZSPI_Receive>
      pData++;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	3301      	adds	r3, #1
 80077c2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80077c4:	8afb      	ldrh	r3, [r7, #22]
 80077c6:	3301      	adds	r3, #1
 80077c8:	82fb      	strh	r3, [r7, #22]
 80077ca:	8afa      	ldrh	r2, [r7, #22]
 80077cc:	893b      	ldrh	r3, [r7, #8]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3f1      	bcc.n	80077b6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80077d2:	f7ff fe75 	bl	80074c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 fae4 	bl	8007da4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	77fb      	strb	r3, [r7, #31]
 80077e8:	e001      	b.n	80077ee <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	715a      	strb	r2, [r3, #5]

    return status;
 80077fa:	7ffb      	ldrb	r3, [r7, #31]
 80077fc:	e000      	b.n	8007800 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80077fe:	2302      	movs	r3, #2
  }
}
 8007800:	4618      	mov	r0, r3
 8007802:	3720      	adds	r7, #32
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	607a      	str	r2, [r7, #4]
 8007812:	461a      	mov	r2, r3
 8007814:	460b      	mov	r3, r1
 8007816:	72fb      	strb	r3, [r7, #11]
 8007818:	4613      	mov	r3, r2
 800781a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	799b      	ldrb	r3, [r3, #6]
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b01      	cmp	r3, #1
 8007824:	d14a      	bne.n	80078bc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	795b      	ldrb	r3, [r3, #5]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d101      	bne.n	8007832 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800782e:	2302      	movs	r3, #2
 8007830:	e045      	b.n	80078be <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fa8f 	bl	8007d5c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800783e:	7afb      	ldrb	r3, [r7, #11]
 8007840:	2b84      	cmp	r3, #132	; 0x84
 8007842:	d002      	beq.n	800784a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007844:	7afb      	ldrb	r3, [r7, #11]
 8007846:	2b94      	cmp	r3, #148	; 0x94
 8007848:	d103      	bne.n	8007852 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	711a      	strb	r2, [r3, #4]
 8007850:	e002      	b.n	8007858 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007858:	f7ff fe42 	bl	80074e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800785c:	7afb      	ldrb	r3, [r7, #11]
 800785e:	4619      	mov	r1, r3
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f9cd 	bl	8007c00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007866:	2300      	movs	r3, #0
 8007868:	82bb      	strh	r3, [r7, #20]
 800786a:	e00a      	b.n	8007882 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800786c:	8abb      	ldrh	r3, [r7, #20]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	4413      	add	r3, r2
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	4619      	mov	r1, r3
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 f9c2 	bl	8007c00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800787c:	8abb      	ldrh	r3, [r7, #20]
 800787e:	3301      	adds	r3, #1
 8007880:	82bb      	strh	r3, [r7, #20]
 8007882:	8aba      	ldrh	r2, [r7, #20]
 8007884:	893b      	ldrh	r3, [r7, #8]
 8007886:	429a      	cmp	r2, r3
 8007888:	d3f0      	bcc.n	800786c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800788a:	f7ff fe19 	bl	80074c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	2b84      	cmp	r3, #132	; 0x84
 8007892:	d002      	beq.n	800789a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 fa85 	bl	8007da4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	75fb      	strb	r3, [r7, #23]
 80078a6:	e001      	b.n	80078ac <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	715a      	strb	r2, [r3, #5]

    return status;
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	e000      	b.n	80078be <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80078bc:	2302      	movs	r3, #2
  }
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b088      	sub	sp, #32
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	461a      	mov	r2, r3
 80078d2:	460b      	mov	r3, r1
 80078d4:	72fb      	strb	r3, [r7, #11]
 80078d6:	4613      	mov	r3, r2
 80078d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	799b      	ldrb	r3, [r3, #6]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d13d      	bne.n	8007964 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	795b      	ldrb	r3, [r3, #5]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d101      	bne.n	80078f4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e038      	b.n	8007966 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 fa2e 	bl	8007d5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007900:	f7ff fdee 	bl	80074e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007904:	7afb      	ldrb	r3, [r7, #11]
 8007906:	4619      	mov	r1, r3
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f979 	bl	8007c00 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800790e:	2100      	movs	r1, #0
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f975 	bl	8007c00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007916:	2300      	movs	r3, #0
 8007918:	82fb      	strh	r3, [r7, #22]
 800791a:	e009      	b.n	8007930 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800791c:	69b9      	ldr	r1, [r7, #24]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 f9c4 	bl	8007cac <SUBGHZSPI_Receive>
      pData++;
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	3301      	adds	r3, #1
 8007928:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800792a:	8afb      	ldrh	r3, [r7, #22]
 800792c:	3301      	adds	r3, #1
 800792e:	82fb      	strh	r3, [r7, #22]
 8007930:	8afa      	ldrh	r2, [r7, #22]
 8007932:	893b      	ldrh	r3, [r7, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	d3f1      	bcc.n	800791c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007938:	f7ff fdc2 	bl	80074c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fa31 	bl	8007da4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	77fb      	strb	r3, [r7, #31]
 800794e:	e001      	b.n	8007954 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2201      	movs	r2, #1
 8007958:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	715a      	strb	r2, [r3, #5]

    return status;
 8007960:	7ffb      	ldrb	r3, [r7, #31]
 8007962:	e000      	b.n	8007966 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007964:	2302      	movs	r3, #2
  }
}
 8007966:	4618      	mov	r0, r3
 8007968:	3720      	adds	r7, #32
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b086      	sub	sp, #24
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	461a      	mov	r2, r3
 800797a:	460b      	mov	r3, r1
 800797c:	72fb      	strb	r3, [r7, #11]
 800797e:	4613      	mov	r3, r2
 8007980:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	799b      	ldrb	r3, [r3, #6]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b01      	cmp	r3, #1
 800798a:	d13e      	bne.n	8007a0a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	795b      	ldrb	r3, [r3, #5]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007994:	2302      	movs	r3, #2
 8007996:	e039      	b.n	8007a0c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 f9dc 	bl	8007d5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80079a4:	f7ff fd9c 	bl	80074e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80079a8:	210e      	movs	r1, #14
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f928 	bl	8007c00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80079b0:	7afb      	ldrb	r3, [r7, #11]
 80079b2:	4619      	mov	r1, r3
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f923 	bl	8007c00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80079ba:	2300      	movs	r3, #0
 80079bc:	82bb      	strh	r3, [r7, #20]
 80079be:	e00a      	b.n	80079d6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80079c0:	8abb      	ldrh	r3, [r7, #20]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4413      	add	r3, r2
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	4619      	mov	r1, r3
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 f918 	bl	8007c00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80079d0:	8abb      	ldrh	r3, [r7, #20]
 80079d2:	3301      	adds	r3, #1
 80079d4:	82bb      	strh	r3, [r7, #20]
 80079d6:	8aba      	ldrh	r2, [r7, #20]
 80079d8:	893b      	ldrh	r3, [r7, #8]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d3f0      	bcc.n	80079c0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80079de:	f7ff fd6f 	bl	80074c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 f9de 	bl	8007da4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	75fb      	strb	r3, [r7, #23]
 80079f4:	e001      	b.n	80079fa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	715a      	strb	r2, [r3, #5]

    return status;
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	e000      	b.n	8007a0c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007a0a:	2302      	movs	r3, #2
  }
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	607a      	str	r2, [r7, #4]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	460b      	mov	r3, r1
 8007a22:	72fb      	strb	r3, [r7, #11]
 8007a24:	4613      	mov	r3, r2
 8007a26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	799b      	ldrb	r3, [r3, #6]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d141      	bne.n	8007aba <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	795b      	ldrb	r3, [r3, #5]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d101      	bne.n	8007a42 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007a3e:	2302      	movs	r3, #2
 8007a40:	e03c      	b.n	8007abc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2201      	movs	r2, #1
 8007a46:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 f987 	bl	8007d5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a4e:	f7ff fd47 	bl	80074e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007a52:	211e      	movs	r1, #30
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f8d3 	bl	8007c00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007a5a:	7afb      	ldrb	r3, [r7, #11]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f8ce 	bl	8007c00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007a64:	2100      	movs	r1, #0
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 f8ca 	bl	8007c00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	82fb      	strh	r3, [r7, #22]
 8007a70:	e009      	b.n	8007a86 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007a72:	69b9      	ldr	r1, [r7, #24]
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 f919 	bl	8007cac <SUBGHZSPI_Receive>
      pData++;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007a80:	8afb      	ldrh	r3, [r7, #22]
 8007a82:	3301      	adds	r3, #1
 8007a84:	82fb      	strh	r3, [r7, #22]
 8007a86:	8afa      	ldrh	r2, [r7, #22]
 8007a88:	893b      	ldrh	r3, [r7, #8]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d3f1      	bcc.n	8007a72 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a8e:	f7ff fd17 	bl	80074c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 f986 	bl	8007da4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	77fb      	strb	r3, [r7, #31]
 8007aa4:	e001      	b.n	8007aaa <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2201      	movs	r2, #1
 8007aae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	715a      	strb	r2, [r3, #5]

    return status;
 8007ab6:	7ffb      	ldrb	r3, [r7, #31]
 8007ab8:	e000      	b.n	8007abc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007aba:	2302      	movs	r3, #2
  }
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3720      	adds	r7, #32
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8007acc:	2300      	movs	r3, #0
 8007ace:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8007ad0:	f107 020c 	add.w	r2, r7, #12
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	2112      	movs	r1, #18
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff fef4 	bl	80078c6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8007ade:	7b3b      	ldrb	r3, [r7, #12]
 8007ae0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8007ae2:	89fb      	ldrh	r3, [r7, #14]
 8007ae4:	021b      	lsls	r3, r3, #8
 8007ae6:	b21a      	sxth	r2, r3
 8007ae8:	7b7b      	ldrb	r3, [r7, #13]
 8007aea:	b21b      	sxth	r3, r3
 8007aec:	4313      	orrs	r3, r2
 8007aee:	b21b      	sxth	r3, r3
 8007af0:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007af2:	89fb      	ldrh	r3, [r7, #14]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f011 fb81 	bl	8019204 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007b02:	89fb      	ldrh	r3, [r7, #14]
 8007b04:	085b      	lsrs	r3, r3, #1
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f011 fb86 	bl	8019220 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007b14:	89fb      	ldrh	r3, [r7, #14]
 8007b16:	089b      	lsrs	r3, r3, #2
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f011 fbd5 	bl	80192d0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007b26:	89fb      	ldrh	r3, [r7, #14]
 8007b28:	08db      	lsrs	r3, r3, #3
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f011 fbda 	bl	80192ec <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007b38:	89fb      	ldrh	r3, [r7, #14]
 8007b3a:	091b      	lsrs	r3, r3, #4
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f011 fbdf 	bl	8019308 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007b4a:	89fb      	ldrh	r3, [r7, #14]
 8007b4c:	095b      	lsrs	r3, r3, #5
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f011 fbac 	bl	80192b4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007b5c:	89fb      	ldrh	r3, [r7, #14]
 8007b5e:	099b      	lsrs	r3, r3, #6
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f011 fb67 	bl	801923c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007b6e:	89fb      	ldrh	r3, [r7, #14]
 8007b70:	09db      	lsrs	r3, r3, #7
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00e      	beq.n	8007b98 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007b7a:	89fb      	ldrh	r3, [r7, #14]
 8007b7c:	0a1b      	lsrs	r3, r3, #8
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d004      	beq.n	8007b90 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007b86:	2101      	movs	r1, #1
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f011 fb65 	bl	8019258 <HAL_SUBGHZ_CADStatusCallback>
 8007b8e:	e003      	b.n	8007b98 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007b90:	2100      	movs	r1, #0
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f011 fb60 	bl	8019258 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007b98:	89fb      	ldrh	r3, [r7, #14]
 8007b9a:	0a5b      	lsrs	r3, r3, #9
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f011 fb75 	bl	8019294 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007baa:	f107 020c 	add.w	r2, r7, #12
 8007bae:	2302      	movs	r3, #2
 8007bb0:	2102      	movs	r1, #2
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff fe28 	bl	8007808 <HAL_SUBGHZ_ExecSetCmd>
}
 8007bb8:	bf00      	nop
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <SUBGHZSPI_Init+0x3c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a0b      	ldr	r2, [pc, #44]	; (8007bfc <SUBGHZSPI_Init+0x3c>)
 8007bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007bd4:	4a09      	ldr	r2, [pc, #36]	; (8007bfc <SUBGHZSPI_Init+0x3c>)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007bdc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007bde:	4b07      	ldr	r3, [pc, #28]	; (8007bfc <SUBGHZSPI_Init+0x3c>)
 8007be0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007be4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007be6:	4b05      	ldr	r3, [pc, #20]	; (8007bfc <SUBGHZSPI_Init+0x3c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a04      	ldr	r2, [pc, #16]	; (8007bfc <SUBGHZSPI_Init+0x3c>)
 8007bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf0:	6013      	str	r3, [r2, #0]
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr
 8007bfc:	58010000 	.word	0x58010000

08007c00 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c10:	4b23      	ldr	r3, [pc, #140]	; (8007ca0 <SUBGHZSPI_Transmit+0xa0>)
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	1a9b      	subs	r3, r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	0cdb      	lsrs	r3, r3, #19
 8007c1e:	2264      	movs	r2, #100	; 0x64
 8007c20:	fb02 f303 	mul.w	r3, r2, r3
 8007c24:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d105      	bne.n	8007c38 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	609a      	str	r2, [r3, #8]
      break;
 8007c36:	e008      	b.n	8007c4a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007c3e:	4b19      	ldr	r3, [pc, #100]	; (8007ca4 <SUBGHZSPI_Transmit+0xa4>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d1ed      	bne.n	8007c26 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007c4a:	4b17      	ldr	r3, [pc, #92]	; (8007ca8 <SUBGHZSPI_Transmit+0xa8>)
 8007c4c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	78fa      	ldrb	r2, [r7, #3]
 8007c52:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c54:	4b12      	ldr	r3, [pc, #72]	; (8007ca0 <SUBGHZSPI_Transmit+0xa0>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	0cdb      	lsrs	r3, r3, #19
 8007c62:	2264      	movs	r2, #100	; 0x64
 8007c64:	fb02 f303 	mul.w	r3, r2, r3
 8007c68:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d105      	bne.n	8007c7c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	609a      	str	r2, [r3, #8]
      break;
 8007c7a:	e008      	b.n	8007c8e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007c82:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <SUBGHZSPI_Transmit+0xa4>)
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d1ed      	bne.n	8007c6a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007c8e:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <SUBGHZSPI_Transmit+0xa4>)
 8007c90:	68db      	ldr	r3, [r3, #12]

  return status;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	371c      	adds	r7, #28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bc80      	pop	{r7}
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20000000 	.word	0x20000000
 8007ca4:	58010000 	.word	0x58010000
 8007ca8:	5801000c 	.word	0x5801000c

08007cac <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007cba:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <SUBGHZSPI_Receive+0xa4>)
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	00db      	lsls	r3, r3, #3
 8007cc2:	1a9b      	subs	r3, r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	0cdb      	lsrs	r3, r3, #19
 8007cc8:	2264      	movs	r2, #100	; 0x64
 8007cca:	fb02 f303 	mul.w	r3, r2, r3
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d105      	bne.n	8007ce2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	609a      	str	r2, [r3, #8]
      break;
 8007ce0:	e008      	b.n	8007cf4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007ce8:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <SUBGHZSPI_Receive+0xa8>)
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d1ed      	bne.n	8007cd0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007cf4:	4b18      	ldr	r3, [pc, #96]	; (8007d58 <SUBGHZSPI_Receive+0xac>)
 8007cf6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	22ff      	movs	r2, #255	; 0xff
 8007cfc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007cfe:	4b14      	ldr	r3, [pc, #80]	; (8007d50 <SUBGHZSPI_Receive+0xa4>)
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	4613      	mov	r3, r2
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	1a9b      	subs	r3, r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	0cdb      	lsrs	r3, r3, #19
 8007d0c:	2264      	movs	r2, #100	; 0x64
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d105      	bne.n	8007d26 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	609a      	str	r2, [r3, #8]
      break;
 8007d24:	e008      	b.n	8007d38 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007d2c:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <SUBGHZSPI_Receive+0xa8>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d1ed      	bne.n	8007d14 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <SUBGHZSPI_Receive+0xa8>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	701a      	strb	r2, [r3, #0]

  return status;
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	371c      	adds	r7, #28
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bc80      	pop	{r7}
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	20000000 	.word	0x20000000
 8007d54:	58010000 	.word	0x58010000
 8007d58:	5801000c 	.word	0x5801000c

08007d5c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	791b      	ldrb	r3, [r3, #4]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d111      	bne.n	8007d90 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	; (8007da0 <SUBGHZ_CheckDeviceReady+0x44>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	4613      	mov	r3, r2
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	4413      	add	r3, r2
 8007d76:	00db      	lsls	r3, r3, #3
 8007d78:	0c1b      	lsrs	r3, r3, #16
 8007d7a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d7c:	f7ff fbb0 	bl	80074e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1f9      	bne.n	8007d80 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d8c:	f7ff fb98 	bl	80074c0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f807 	bl	8007da4 <SUBGHZ_WaitOnBusy>
 8007d96:	4603      	mov	r3, r0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000000 	.word	0x20000000

08007da4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007db0:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <SUBGHZ_WaitOnBusy+0x58>)
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	4613      	mov	r3, r2
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	4413      	add	r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	0d1b      	lsrs	r3, r3, #20
 8007dbe:	2264      	movs	r2, #100	; 0x64
 8007dc0:	fb02 f303 	mul.w	r3, r2, r3
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007dc6:	f7ff fbb9 	bl	800753c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007dca:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d105      	bne.n	8007dde <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2202      	movs	r2, #2
 8007dda:	609a      	str	r2, [r3, #8]
      break;
 8007ddc:	e009      	b.n	8007df2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007de4:	f7ff fb98 	bl	8007518 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007de8:	4602      	mov	r2, r0
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	4013      	ands	r3, r2
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d0e9      	beq.n	8007dc6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20000000 	.word	0x20000000

08007e00 <LL_RCC_GetUSARTClockSource>:
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	401a      	ands	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	041b      	lsls	r3, r3, #16
 8007e18:	4313      	orrs	r3, r2
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr

08007e24 <LL_RCC_GetLPUARTClockSource>:
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4013      	ands	r3, r2
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr

08007e42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e042      	b.n	8007eda <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d106      	bne.n	8007e6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7fa fad4 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2224      	movs	r2, #36	; 0x24
 8007e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 0201 	bic.w	r2, r2, #1
 8007e82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fc4b 	bl	8008720 <UART_SetConfig>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d101      	bne.n	8007e94 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e022      	b.n	8007eda <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fe8f 	bl	8008bc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ec0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0201 	orr.w	r2, r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 ff15 	bl	8008d02 <UART_CheckIdleState>
 8007ed8:	4603      	mov	r3, r0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08a      	sub	sp, #40	; 0x28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef8:	2b20      	cmp	r3, #32
 8007efa:	d142      	bne.n	8007f82 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <HAL_UART_Receive_IT+0x24>
 8007f02:	88fb      	ldrh	r3, [r7, #6]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e03b      	b.n	8007f84 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d101      	bne.n	8007f1a <HAL_UART_Receive_IT+0x36>
 8007f16:	2302      	movs	r3, #2
 8007f18:	e034      	b.n	8007f84 <HAL_UART_Receive_IT+0xa0>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a17      	ldr	r2, [pc, #92]	; (8007f8c <HAL_UART_Receive_IT+0xa8>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d01f      	beq.n	8007f72 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d018      	beq.n	8007f72 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	623b      	str	r3, [r7, #32]
 8007f60:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	69f9      	ldr	r1, [r7, #28]
 8007f64:	6a3a      	ldr	r2, [r7, #32]
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e6      	bne.n	8007f40 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007f72:	88fb      	ldrh	r3, [r7, #6]
 8007f74:	461a      	mov	r2, r3
 8007f76:	68b9      	ldr	r1, [r7, #8]
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 ffd5 	bl	8008f28 <UART_Start_Receive_IT>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	e000      	b.n	8007f84 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007f82:	2302      	movs	r3, #2
  }
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3728      	adds	r7, #40	; 0x28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	40008000 	.word	0x40008000

08007f90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08a      	sub	sp, #40	; 0x28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa4:	2b20      	cmp	r3, #32
 8007fa6:	d17a      	bne.n	800809e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <HAL_UART_Transmit_DMA+0x24>
 8007fae:	88fb      	ldrh	r3, [r7, #6]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e073      	b.n	80080a0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d101      	bne.n	8007fc6 <HAL_UART_Transmit_DMA+0x36>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e06c      	b.n	80080a0 <HAL_UART_Transmit_DMA+0x110>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	88fa      	ldrh	r2, [r7, #6]
 8007fd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	88fa      	ldrh	r2, [r7, #6]
 8007fe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2221      	movs	r2, #33	; 0x21
 8007ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d02c      	beq.n	8008056 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008000:	4a29      	ldr	r2, [pc, #164]	; (80080a8 <HAL_UART_Transmit_DMA+0x118>)
 8008002:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008008:	4a28      	ldr	r2, [pc, #160]	; (80080ac <HAL_UART_Transmit_DMA+0x11c>)
 800800a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008010:	4a27      	ldr	r2, [pc, #156]	; (80080b0 <HAL_UART_Transmit_DMA+0x120>)
 8008012:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008018:	2200      	movs	r2, #0
 800801a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008024:	4619      	mov	r1, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3328      	adds	r3, #40	; 0x28
 800802c:	461a      	mov	r2, r3
 800802e:	88fb      	ldrh	r3, [r7, #6]
 8008030:	f7fc f858 	bl	80040e4 <HAL_DMA_Start_IT>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00d      	beq.n	8008056 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2210      	movs	r2, #16
 800803e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2220      	movs	r2, #32
 800804e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e024      	b.n	80080a0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2240      	movs	r2, #64	; 0x40
 800805c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3308      	adds	r3, #8
 800806c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	613b      	str	r3, [r7, #16]
   return(result);
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3308      	adds	r3, #8
 8008084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008086:	623a      	str	r2, [r7, #32]
 8008088:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	69f9      	ldr	r1, [r7, #28]
 800808c:	6a3a      	ldr	r2, [r7, #32]
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	61bb      	str	r3, [r7, #24]
   return(result);
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e5      	bne.n	8008066 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	e000      	b.n	80080a0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800809e:	2302      	movs	r3, #2
  }
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3728      	adds	r7, #40	; 0x28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	08009277 	.word	0x08009277
 80080ac:	08009311 	.word	0x08009311
 80080b0:	0800932d 	.word	0x0800932d

080080b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b0ba      	sub	sp, #232	; 0xe8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80080de:	f640 030f 	movw	r3, #2063	; 0x80f
 80080e2:	4013      	ands	r3, r2
 80080e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80080e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d11b      	bne.n	8008128 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d015      	beq.n	8008128 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008100:	f003 0320 	and.w	r3, r3, #32
 8008104:	2b00      	cmp	r3, #0
 8008106:	d105      	bne.n	8008114 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800810c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d009      	beq.n	8008128 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 82d6 	beq.w	80086ca <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3
      }
      return;
 8008126:	e2d0      	b.n	80086ca <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 811f 	beq.w	8008370 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008132:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008136:	4b8b      	ldr	r3, [pc, #556]	; (8008364 <HAL_UART_IRQHandler+0x2b0>)
 8008138:	4013      	ands	r3, r2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d106      	bne.n	800814c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800813e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008142:	4b89      	ldr	r3, [pc, #548]	; (8008368 <HAL_UART_IRQHandler+0x2b4>)
 8008144:	4013      	ands	r3, r2
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 8112 	beq.w	8008370 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800814c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d011      	beq.n	800817c <HAL_UART_IRQHandler+0xc8>
 8008158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800815c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2201      	movs	r2, #1
 800816a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008172:	f043 0201 	orr.w	r2, r3, #1
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800817c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d011      	beq.n	80081ac <HAL_UART_IRQHandler+0xf8>
 8008188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2202      	movs	r2, #2
 800819a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a2:	f043 0204 	orr.w	r2, r3, #4
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d011      	beq.n	80081dc <HAL_UART_IRQHandler+0x128>
 80081b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2204      	movs	r2, #4
 80081ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081d2:	f043 0202 	orr.w	r2, r3, #2
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d017      	beq.n	8008218 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ec:	f003 0320 	and.w	r3, r3, #32
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d105      	bne.n	8008200 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80081f8:	4b5a      	ldr	r3, [pc, #360]	; (8008364 <HAL_UART_IRQHandler+0x2b0>)
 80081fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00b      	beq.n	8008218 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2208      	movs	r2, #8
 8008206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800820e:	f043 0208 	orr.w	r2, r3, #8
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008220:	2b00      	cmp	r3, #0
 8008222:	d012      	beq.n	800824a <HAL_UART_IRQHandler+0x196>
 8008224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00c      	beq.n	800824a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008240:	f043 0220 	orr.w	r2, r3, #32
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 823c 	beq.w	80086ce <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b00      	cmp	r3, #0
 8008260:	d013      	beq.n	800828a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b00      	cmp	r3, #0
 800826c:	d105      	bne.n	800827a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800826e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008290:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829e:	2b40      	cmp	r3, #64	; 0x40
 80082a0:	d005      	beq.n	80082ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d04f      	beq.n	800834e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 ff7c 	bl	80091ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082be:	2b40      	cmp	r3, #64	; 0x40
 80082c0:	d141      	bne.n	8008346 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3308      	adds	r3, #8
 80082ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1d9      	bne.n	80082c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008312:	2b00      	cmp	r3, #0
 8008314:	d013      	beq.n	800833e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831a:	4a14      	ldr	r2, [pc, #80]	; (800836c <HAL_UART_IRQHandler+0x2b8>)
 800831c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008322:	4618      	mov	r0, r3
 8008324:	f7fb ffba 	bl	800429c <HAL_DMA_Abort_IT>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d017      	beq.n	800835e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008338:	4610      	mov	r0, r2
 800833a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800833c:	e00f      	b.n	800835e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f9d9 	bl	80086f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008344:	e00b      	b.n	800835e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f9d5 	bl	80086f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834c:	e007      	b.n	800835e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f9d1 	bl	80086f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800835c:	e1b7      	b.n	80086ce <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800835e:	bf00      	nop
    return;
 8008360:	e1b5      	b.n	80086ce <HAL_UART_IRQHandler+0x61a>
 8008362:	bf00      	nop
 8008364:	10000001 	.word	0x10000001
 8008368:	04000120 	.word	0x04000120
 800836c:	080093ad 	.word	0x080093ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008374:	2b01      	cmp	r3, #1
 8008376:	f040 814a 	bne.w	800860e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800837a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837e:	f003 0310 	and.w	r3, r3, #16
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 8143 	beq.w	800860e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800838c:	f003 0310 	and.w	r3, r3, #16
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 813c 	beq.w	800860e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2210      	movs	r2, #16
 800839c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a8:	2b40      	cmp	r3, #64	; 0x40
 80083aa:	f040 80b5 	bne.w	8008518 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80083ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 8187 	beq.w	80086d2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083ce:	429a      	cmp	r2, r3
 80083d0:	f080 817f 	bcs.w	80086d2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 8086 	bne.w	80084fc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800840c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	461a      	mov	r2, r3
 8008416:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800841a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800841e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008426:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800842a:	e841 2300 	strex	r3, r2, [r1]
 800842e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1da      	bne.n	80083f0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3308      	adds	r3, #8
 8008440:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008444:	e853 3f00 	ldrex	r3, [r3]
 8008448:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800844a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800844c:	f023 0301 	bic.w	r3, r3, #1
 8008450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3308      	adds	r3, #8
 800845a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800845e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008462:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008466:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800846a:	e841 2300 	strex	r3, r2, [r1]
 800846e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1e1      	bne.n	800843a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3308      	adds	r3, #8
 800847c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008480:	e853 3f00 	ldrex	r3, [r3]
 8008484:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800848c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3308      	adds	r3, #8
 8008496:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800849a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800849c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e3      	bne.n	8008476 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c4:	e853 3f00 	ldrex	r3, [r3]
 80084c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084cc:	f023 0310 	bic.w	r3, r3, #16
 80084d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084de:	65bb      	str	r3, [r7, #88]	; 0x58
 80084e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084e6:	e841 2300 	strex	r3, r2, [r1]
 80084ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1e4      	bne.n	80084bc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fb fe72 	bl	80041e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008508:	b29b      	uxth	r3, r3
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	b29b      	uxth	r3, r3
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f8f9 	bl	8008708 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008516:	e0dc      	b.n	80086d2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008524:	b29b      	uxth	r3, r3
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 80ce 	beq.w	80086d6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800853a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 80c9 	beq.w	80086d6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008558:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008566:	647b      	str	r3, [r7, #68]	; 0x44
 8008568:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800856c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e4      	bne.n	8008544 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3308      	adds	r3, #8
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	623b      	str	r3, [r7, #32]
   return(result);
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008590:	f023 0301 	bic.w	r3, r3, #1
 8008594:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3308      	adds	r3, #8
 800859e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085a2:	633a      	str	r2, [r7, #48]	; 0x30
 80085a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085aa:	e841 2300 	strex	r3, r2, [r1]
 80085ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1e1      	bne.n	800857a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 0310 	bic.w	r3, r3, #16
 80085de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085ec:	61fb      	str	r3, [r7, #28]
 80085ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	69b9      	ldr	r1, [r7, #24]
 80085f2:	69fa      	ldr	r2, [r7, #28]
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	617b      	str	r3, [r7, #20]
   return(result);
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e4      	bne.n	80085ca <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008604:	4619      	mov	r1, r3
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f87e 	bl	8008708 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800860c:	e063      	b.n	80086d6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800860e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00e      	beq.n	8008638 <HAL_UART_IRQHandler+0x584>
 800861a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800861e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d008      	beq.n	8008638 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800862e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 fb59 	bl	8009ce8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008636:	e051      	b.n	80086dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800863c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008640:	2b00      	cmp	r3, #0
 8008642:	d014      	beq.n	800866e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864c:	2b00      	cmp	r3, #0
 800864e:	d105      	bne.n	800865c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008654:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d008      	beq.n	800866e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008660:	2b00      	cmp	r3, #0
 8008662:	d03a      	beq.n	80086da <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	4798      	blx	r3
    }
    return;
 800866c:	e035      	b.n	80086da <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800866e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008676:	2b00      	cmp	r3, #0
 8008678:	d009      	beq.n	800868e <HAL_UART_IRQHandler+0x5da>
 800867a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800867e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fea6 	bl	80093d8 <UART_EndTransmit_IT>
    return;
 800868c:	e026      	b.n	80086dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800868e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d009      	beq.n	80086ae <HAL_UART_IRQHandler+0x5fa>
 800869a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800869e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 fb30 	bl	8009d0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086ac:	e016      	b.n	80086dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d010      	beq.n	80086dc <HAL_UART_IRQHandler+0x628>
 80086ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	da0c      	bge.n	80086dc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 fb19 	bl	8009cfa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086c8:	e008      	b.n	80086dc <HAL_UART_IRQHandler+0x628>
      return;
 80086ca:	bf00      	nop
 80086cc:	e006      	b.n	80086dc <HAL_UART_IRQHandler+0x628>
    return;
 80086ce:	bf00      	nop
 80086d0:	e004      	b.n	80086dc <HAL_UART_IRQHandler+0x628>
      return;
 80086d2:	bf00      	nop
 80086d4:	e002      	b.n	80086dc <HAL_UART_IRQHandler+0x628>
      return;
 80086d6:	bf00      	nop
 80086d8:	e000      	b.n	80086dc <HAL_UART_IRQHandler+0x628>
    return;
 80086da:	bf00      	nop
  }
}
 80086dc:	37e8      	adds	r7, #232	; 0xe8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop

080086e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bc80      	pop	{r7}
 80086f4:	4770      	bx	lr

080086f6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr

08008708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	bc80      	pop	{r7}
 800871c:	4770      	bx	lr
	...

08008720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008720:	b5b0      	push	{r4, r5, r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689a      	ldr	r2, [r3, #8]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	431a      	orrs	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	4313      	orrs	r3, r2
 8008742:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4bab      	ldr	r3, [pc, #684]	; (80089f8 <UART_SetConfig+0x2d8>)
 800874c:	4013      	ands	r3, r2
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6812      	ldr	r2, [r2, #0]
 8008752:	69f9      	ldr	r1, [r7, #28]
 8008754:	430b      	orrs	r3, r1
 8008756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68da      	ldr	r2, [r3, #12]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4aa0      	ldr	r2, [pc, #640]	; (80089fc <UART_SetConfig+0x2dc>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d004      	beq.n	8008788 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	69fa      	ldr	r2, [r7, #28]
 8008784:	4313      	orrs	r3, r2
 8008786:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008792:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	6812      	ldr	r2, [r2, #0]
 800879a:	69f9      	ldr	r1, [r7, #28]
 800879c:	430b      	orrs	r3, r1
 800879e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a6:	f023 010f 	bic.w	r1, r3, #15
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a91      	ldr	r2, [pc, #580]	; (8008a00 <UART_SetConfig+0x2e0>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d122      	bne.n	8008806 <UART_SetConfig+0xe6>
 80087c0:	2003      	movs	r0, #3
 80087c2:	f7ff fb1d 	bl	8007e00 <LL_RCC_GetUSARTClockSource>
 80087c6:	4603      	mov	r3, r0
 80087c8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	d817      	bhi.n	8008800 <UART_SetConfig+0xe0>
 80087d0:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <UART_SetConfig+0xb8>)
 80087d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d6:	bf00      	nop
 80087d8:	080087e9 	.word	0x080087e9
 80087dc:	080087f5 	.word	0x080087f5
 80087e0:	080087ef 	.word	0x080087ef
 80087e4:	080087fb 	.word	0x080087fb
 80087e8:	2301      	movs	r3, #1
 80087ea:	76fb      	strb	r3, [r7, #27]
 80087ec:	e072      	b.n	80088d4 <UART_SetConfig+0x1b4>
 80087ee:	2302      	movs	r3, #2
 80087f0:	76fb      	strb	r3, [r7, #27]
 80087f2:	e06f      	b.n	80088d4 <UART_SetConfig+0x1b4>
 80087f4:	2304      	movs	r3, #4
 80087f6:	76fb      	strb	r3, [r7, #27]
 80087f8:	e06c      	b.n	80088d4 <UART_SetConfig+0x1b4>
 80087fa:	2308      	movs	r3, #8
 80087fc:	76fb      	strb	r3, [r7, #27]
 80087fe:	e069      	b.n	80088d4 <UART_SetConfig+0x1b4>
 8008800:	2310      	movs	r3, #16
 8008802:	76fb      	strb	r3, [r7, #27]
 8008804:	e066      	b.n	80088d4 <UART_SetConfig+0x1b4>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a7e      	ldr	r2, [pc, #504]	; (8008a04 <UART_SetConfig+0x2e4>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d134      	bne.n	800887a <UART_SetConfig+0x15a>
 8008810:	200c      	movs	r0, #12
 8008812:	f7ff faf5 	bl	8007e00 <LL_RCC_GetUSARTClockSource>
 8008816:	4603      	mov	r3, r0
 8008818:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800881c:	2b0c      	cmp	r3, #12
 800881e:	d829      	bhi.n	8008874 <UART_SetConfig+0x154>
 8008820:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <UART_SetConfig+0x108>)
 8008822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008826:	bf00      	nop
 8008828:	0800885d 	.word	0x0800885d
 800882c:	08008875 	.word	0x08008875
 8008830:	08008875 	.word	0x08008875
 8008834:	08008875 	.word	0x08008875
 8008838:	08008869 	.word	0x08008869
 800883c:	08008875 	.word	0x08008875
 8008840:	08008875 	.word	0x08008875
 8008844:	08008875 	.word	0x08008875
 8008848:	08008863 	.word	0x08008863
 800884c:	08008875 	.word	0x08008875
 8008850:	08008875 	.word	0x08008875
 8008854:	08008875 	.word	0x08008875
 8008858:	0800886f 	.word	0x0800886f
 800885c:	2300      	movs	r3, #0
 800885e:	76fb      	strb	r3, [r7, #27]
 8008860:	e038      	b.n	80088d4 <UART_SetConfig+0x1b4>
 8008862:	2302      	movs	r3, #2
 8008864:	76fb      	strb	r3, [r7, #27]
 8008866:	e035      	b.n	80088d4 <UART_SetConfig+0x1b4>
 8008868:	2304      	movs	r3, #4
 800886a:	76fb      	strb	r3, [r7, #27]
 800886c:	e032      	b.n	80088d4 <UART_SetConfig+0x1b4>
 800886e:	2308      	movs	r3, #8
 8008870:	76fb      	strb	r3, [r7, #27]
 8008872:	e02f      	b.n	80088d4 <UART_SetConfig+0x1b4>
 8008874:	2310      	movs	r3, #16
 8008876:	76fb      	strb	r3, [r7, #27]
 8008878:	e02c      	b.n	80088d4 <UART_SetConfig+0x1b4>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a5f      	ldr	r2, [pc, #380]	; (80089fc <UART_SetConfig+0x2dc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d125      	bne.n	80088d0 <UART_SetConfig+0x1b0>
 8008884:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008888:	f7ff facc 	bl	8007e24 <LL_RCC_GetLPUARTClockSource>
 800888c:	4603      	mov	r3, r0
 800888e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008892:	d017      	beq.n	80088c4 <UART_SetConfig+0x1a4>
 8008894:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008898:	d817      	bhi.n	80088ca <UART_SetConfig+0x1aa>
 800889a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800889e:	d00b      	beq.n	80088b8 <UART_SetConfig+0x198>
 80088a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088a4:	d811      	bhi.n	80088ca <UART_SetConfig+0x1aa>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d003      	beq.n	80088b2 <UART_SetConfig+0x192>
 80088aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088ae:	d006      	beq.n	80088be <UART_SetConfig+0x19e>
 80088b0:	e00b      	b.n	80088ca <UART_SetConfig+0x1aa>
 80088b2:	2300      	movs	r3, #0
 80088b4:	76fb      	strb	r3, [r7, #27]
 80088b6:	e00d      	b.n	80088d4 <UART_SetConfig+0x1b4>
 80088b8:	2302      	movs	r3, #2
 80088ba:	76fb      	strb	r3, [r7, #27]
 80088bc:	e00a      	b.n	80088d4 <UART_SetConfig+0x1b4>
 80088be:	2304      	movs	r3, #4
 80088c0:	76fb      	strb	r3, [r7, #27]
 80088c2:	e007      	b.n	80088d4 <UART_SetConfig+0x1b4>
 80088c4:	2308      	movs	r3, #8
 80088c6:	76fb      	strb	r3, [r7, #27]
 80088c8:	e004      	b.n	80088d4 <UART_SetConfig+0x1b4>
 80088ca:	2310      	movs	r3, #16
 80088cc:	76fb      	strb	r3, [r7, #27]
 80088ce:	e001      	b.n	80088d4 <UART_SetConfig+0x1b4>
 80088d0:	2310      	movs	r3, #16
 80088d2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a48      	ldr	r2, [pc, #288]	; (80089fc <UART_SetConfig+0x2dc>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	f040 8098 	bne.w	8008a10 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088e0:	7efb      	ldrb	r3, [r7, #27]
 80088e2:	2b08      	cmp	r3, #8
 80088e4:	d823      	bhi.n	800892e <UART_SetConfig+0x20e>
 80088e6:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <UART_SetConfig+0x1cc>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	08008911 	.word	0x08008911
 80088f0:	0800892f 	.word	0x0800892f
 80088f4:	08008919 	.word	0x08008919
 80088f8:	0800892f 	.word	0x0800892f
 80088fc:	0800891f 	.word	0x0800891f
 8008900:	0800892f 	.word	0x0800892f
 8008904:	0800892f 	.word	0x0800892f
 8008908:	0800892f 	.word	0x0800892f
 800890c:	08008927 	.word	0x08008927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008910:	f7fd ff56 	bl	80067c0 <HAL_RCC_GetPCLK1Freq>
 8008914:	6178      	str	r0, [r7, #20]
        break;
 8008916:	e00f      	b.n	8008938 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008918:	4b3b      	ldr	r3, [pc, #236]	; (8008a08 <UART_SetConfig+0x2e8>)
 800891a:	617b      	str	r3, [r7, #20]
        break;
 800891c:	e00c      	b.n	8008938 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800891e:	f7fd fe9b 	bl	8006658 <HAL_RCC_GetSysClockFreq>
 8008922:	6178      	str	r0, [r7, #20]
        break;
 8008924:	e008      	b.n	8008938 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800892a:	617b      	str	r3, [r7, #20]
        break;
 800892c:	e004      	b.n	8008938 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800892e:	2300      	movs	r3, #0
 8008930:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	76bb      	strb	r3, [r7, #26]
        break;
 8008936:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 8128 	beq.w	8008b90 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	4a31      	ldr	r2, [pc, #196]	; (8008a0c <UART_SetConfig+0x2ec>)
 8008946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800894a:	461a      	mov	r2, r3
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008952:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	4613      	mov	r3, r2
 800895a:	005b      	lsls	r3, r3, #1
 800895c:	4413      	add	r3, r2
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	429a      	cmp	r2, r3
 8008962:	d305      	bcc.n	8008970 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	429a      	cmp	r2, r3
 800896e:	d902      	bls.n	8008976 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	76bb      	strb	r3, [r7, #26]
 8008974:	e10c      	b.n	8008b90 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	4618      	mov	r0, r3
 800897a:	f04f 0100 	mov.w	r1, #0
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	4a22      	ldr	r2, [pc, #136]	; (8008a0c <UART_SetConfig+0x2ec>)
 8008984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008988:	b29a      	uxth	r2, r3
 800898a:	f04f 0300 	mov.w	r3, #0
 800898e:	f7f8 f8e5 	bl	8000b5c <__aeabi_uldivmod>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	4610      	mov	r0, r2
 8008998:	4619      	mov	r1, r3
 800899a:	f04f 0200 	mov.w	r2, #0
 800899e:	f04f 0300 	mov.w	r3, #0
 80089a2:	020b      	lsls	r3, r1, #8
 80089a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089a8:	0202      	lsls	r2, r0, #8
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	6849      	ldr	r1, [r1, #4]
 80089ae:	0849      	lsrs	r1, r1, #1
 80089b0:	4608      	mov	r0, r1
 80089b2:	f04f 0100 	mov.w	r1, #0
 80089b6:	1814      	adds	r4, r2, r0
 80089b8:	eb43 0501 	adc.w	r5, r3, r1
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	461a      	mov	r2, r3
 80089c2:	f04f 0300 	mov.w	r3, #0
 80089c6:	4620      	mov	r0, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	f7f8 f8c7 	bl	8000b5c <__aeabi_uldivmod>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4613      	mov	r3, r2
 80089d4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089dc:	d308      	bcc.n	80089f0 <UART_SetConfig+0x2d0>
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089e4:	d204      	bcs.n	80089f0 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	60da      	str	r2, [r3, #12]
 80089ee:	e0cf      	b.n	8008b90 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	76bb      	strb	r3, [r7, #26]
 80089f4:	e0cc      	b.n	8008b90 <UART_SetConfig+0x470>
 80089f6:	bf00      	nop
 80089f8:	cfff69f3 	.word	0xcfff69f3
 80089fc:	40008000 	.word	0x40008000
 8008a00:	40013800 	.word	0x40013800
 8008a04:	40004400 	.word	0x40004400
 8008a08:	00f42400 	.word	0x00f42400
 8008a0c:	0801b4d8 	.word	0x0801b4d8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a18:	d165      	bne.n	8008ae6 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8008a1a:	7efb      	ldrb	r3, [r7, #27]
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	d828      	bhi.n	8008a72 <UART_SetConfig+0x352>
 8008a20:	a201      	add	r2, pc, #4	; (adr r2, 8008a28 <UART_SetConfig+0x308>)
 8008a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a26:	bf00      	nop
 8008a28:	08008a4d 	.word	0x08008a4d
 8008a2c:	08008a55 	.word	0x08008a55
 8008a30:	08008a5d 	.word	0x08008a5d
 8008a34:	08008a73 	.word	0x08008a73
 8008a38:	08008a63 	.word	0x08008a63
 8008a3c:	08008a73 	.word	0x08008a73
 8008a40:	08008a73 	.word	0x08008a73
 8008a44:	08008a73 	.word	0x08008a73
 8008a48:	08008a6b 	.word	0x08008a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a4c:	f7fd feb8 	bl	80067c0 <HAL_RCC_GetPCLK1Freq>
 8008a50:	6178      	str	r0, [r7, #20]
        break;
 8008a52:	e013      	b.n	8008a7c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a54:	f7fd fec6 	bl	80067e4 <HAL_RCC_GetPCLK2Freq>
 8008a58:	6178      	str	r0, [r7, #20]
        break;
 8008a5a:	e00f      	b.n	8008a7c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a5c:	4b56      	ldr	r3, [pc, #344]	; (8008bb8 <UART_SetConfig+0x498>)
 8008a5e:	617b      	str	r3, [r7, #20]
        break;
 8008a60:	e00c      	b.n	8008a7c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a62:	f7fd fdf9 	bl	8006658 <HAL_RCC_GetSysClockFreq>
 8008a66:	6178      	str	r0, [r7, #20]
        break;
 8008a68:	e008      	b.n	8008a7c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a6e:	617b      	str	r3, [r7, #20]
        break;
 8008a70:	e004      	b.n	8008a7c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	76bb      	strb	r3, [r7, #26]
        break;
 8008a7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 8086 	beq.w	8008b90 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	4a4c      	ldr	r2, [pc, #304]	; (8008bbc <UART_SetConfig+0x49c>)
 8008a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a96:	005a      	lsls	r2, r3, #1
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	085b      	lsrs	r3, r3, #1
 8008a9e:	441a      	add	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	2b0f      	cmp	r3, #15
 8008ab0:	d916      	bls.n	8008ae0 <UART_SetConfig+0x3c0>
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ab8:	d212      	bcs.n	8008ae0 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	f023 030f 	bic.w	r3, r3, #15
 8008ac2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	085b      	lsrs	r3, r3, #1
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	f003 0307 	and.w	r3, r3, #7
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	89fb      	ldrh	r3, [r7, #14]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	89fa      	ldrh	r2, [r7, #14]
 8008adc:	60da      	str	r2, [r3, #12]
 8008ade:	e057      	b.n	8008b90 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	76bb      	strb	r3, [r7, #26]
 8008ae4:	e054      	b.n	8008b90 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ae6:	7efb      	ldrb	r3, [r7, #27]
 8008ae8:	2b08      	cmp	r3, #8
 8008aea:	d828      	bhi.n	8008b3e <UART_SetConfig+0x41e>
 8008aec:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <UART_SetConfig+0x3d4>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008b19 	.word	0x08008b19
 8008af8:	08008b21 	.word	0x08008b21
 8008afc:	08008b29 	.word	0x08008b29
 8008b00:	08008b3f 	.word	0x08008b3f
 8008b04:	08008b2f 	.word	0x08008b2f
 8008b08:	08008b3f 	.word	0x08008b3f
 8008b0c:	08008b3f 	.word	0x08008b3f
 8008b10:	08008b3f 	.word	0x08008b3f
 8008b14:	08008b37 	.word	0x08008b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b18:	f7fd fe52 	bl	80067c0 <HAL_RCC_GetPCLK1Freq>
 8008b1c:	6178      	str	r0, [r7, #20]
        break;
 8008b1e:	e013      	b.n	8008b48 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b20:	f7fd fe60 	bl	80067e4 <HAL_RCC_GetPCLK2Freq>
 8008b24:	6178      	str	r0, [r7, #20]
        break;
 8008b26:	e00f      	b.n	8008b48 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b28:	4b23      	ldr	r3, [pc, #140]	; (8008bb8 <UART_SetConfig+0x498>)
 8008b2a:	617b      	str	r3, [r7, #20]
        break;
 8008b2c:	e00c      	b.n	8008b48 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b2e:	f7fd fd93 	bl	8006658 <HAL_RCC_GetSysClockFreq>
 8008b32:	6178      	str	r0, [r7, #20]
        break;
 8008b34:	e008      	b.n	8008b48 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b3a:	617b      	str	r3, [r7, #20]
        break;
 8008b3c:	e004      	b.n	8008b48 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	76bb      	strb	r3, [r7, #26]
        break;
 8008b46:	bf00      	nop
    }

    if (pclk != 0U)
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d020      	beq.n	8008b90 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	4a1a      	ldr	r2, [pc, #104]	; (8008bbc <UART_SetConfig+0x49c>)
 8008b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	085b      	lsrs	r3, r3, #1
 8008b66:	441a      	add	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	2b0f      	cmp	r3, #15
 8008b78:	d908      	bls.n	8008b8c <UART_SetConfig+0x46c>
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b80:	d204      	bcs.n	8008b8c <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	60da      	str	r2, [r3, #12]
 8008b8a:	e001      	b.n	8008b90 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008bac:	7ebb      	ldrb	r3, [r7, #26]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	00f42400 	.word	0x00f42400
 8008bbc:	0801b4d8 	.word	0x0801b4d8

08008bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00a      	beq.n	8008bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00a      	beq.n	8008c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	f003 0308 	and.w	r3, r3, #8
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c54:	f003 0310 	and.w	r3, r3, #16
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00a      	beq.n	8008c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01a      	beq.n	8008cd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cbe:	d10a      	bne.n	8008cd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	430a      	orrs	r2, r1
 8008cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00a      	beq.n	8008cf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	605a      	str	r2, [r3, #4]
  }
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr

08008d02 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af02      	add	r7, sp, #8
 8008d08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d12:	f7f8 ff8f 	bl	8001c34 <HAL_GetTick>
 8008d16:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0308 	and.w	r3, r3, #8
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d10e      	bne.n	8008d44 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f82f 	bl	8008d98 <UART_WaitOnFlagUntilTimeout>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e025      	b.n	8008d90 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0304 	and.w	r3, r3, #4
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d10e      	bne.n	8008d70 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f819 	bl	8008d98 <UART_WaitOnFlagUntilTimeout>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e00f      	b.n	8008d90 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b09c      	sub	sp, #112	; 0x70
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	4613      	mov	r3, r2
 8008da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008da8:	e0a9      	b.n	8008efe <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db0:	f000 80a5 	beq.w	8008efe <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008db4:	f7f8 ff3e 	bl	8001c34 <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d302      	bcc.n	8008dca <UART_WaitOnFlagUntilTimeout+0x32>
 8008dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d140      	bne.n	8008e4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dd2:	e853 3f00 	ldrex	r3, [r3]
 8008dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dde:	667b      	str	r3, [r7, #100]	; 0x64
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	461a      	mov	r2, r3
 8008de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008de8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dea:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008df0:	e841 2300 	strex	r3, r2, [r1]
 8008df4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1e6      	bne.n	8008dca <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3308      	adds	r3, #8
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e06:	e853 3f00 	ldrex	r3, [r3]
 8008e0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0e:	f023 0301 	bic.w	r3, r3, #1
 8008e12:	663b      	str	r3, [r7, #96]	; 0x60
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3308      	adds	r3, #8
 8008e1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e1c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e1e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e24:	e841 2300 	strex	r3, r2, [r1]
 8008e28:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e5      	bne.n	8008dfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2220      	movs	r2, #32
 8008e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e069      	b.n	8008f20 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d051      	beq.n	8008efe <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e68:	d149      	bne.n	8008efe <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e72:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e92:	637b      	str	r3, [r7, #52]	; 0x34
 8008e94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e6      	bne.n	8008e74 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f023 0301 	bic.w	r3, r3, #1
 8008ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ec6:	623a      	str	r2, [r7, #32]
 8008ec8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	69f9      	ldr	r1, [r7, #28]
 8008ecc:	6a3a      	ldr	r2, [r7, #32]
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e5      	bne.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2220      	movs	r2, #32
 8008eee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e010      	b.n	8008f20 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	69da      	ldr	r2, [r3, #28]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	4013      	ands	r3, r2
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	bf0c      	ite	eq
 8008f0e:	2301      	moveq	r3, #1
 8008f10:	2300      	movne	r3, #0
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	461a      	mov	r2, r3
 8008f16:	79fb      	ldrb	r3, [r7, #7]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	f43f af46 	beq.w	8008daa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3770      	adds	r7, #112	; 0x70
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b09d      	sub	sp, #116	; 0x74
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	4613      	mov	r3, r2
 8008f34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	88fa      	ldrh	r2, [r7, #6]
 8008f40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	88fa      	ldrh	r2, [r7, #6]
 8008f48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f5a:	d10e      	bne.n	8008f7a <UART_Start_Receive_IT+0x52>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d105      	bne.n	8008f70 <UART_Start_Receive_IT+0x48>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f6e:	e02d      	b.n	8008fcc <UART_Start_Receive_IT+0xa4>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	22ff      	movs	r2, #255	; 0xff
 8008f74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f78:	e028      	b.n	8008fcc <UART_Start_Receive_IT+0xa4>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10d      	bne.n	8008f9e <UART_Start_Receive_IT+0x76>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d104      	bne.n	8008f94 <UART_Start_Receive_IT+0x6c>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	22ff      	movs	r2, #255	; 0xff
 8008f8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f92:	e01b      	b.n	8008fcc <UART_Start_Receive_IT+0xa4>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	227f      	movs	r2, #127	; 0x7f
 8008f98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f9c:	e016      	b.n	8008fcc <UART_Start_Receive_IT+0xa4>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fa6:	d10d      	bne.n	8008fc4 <UART_Start_Receive_IT+0x9c>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d104      	bne.n	8008fba <UART_Start_Receive_IT+0x92>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	227f      	movs	r2, #127	; 0x7f
 8008fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008fb8:	e008      	b.n	8008fcc <UART_Start_Receive_IT+0xa4>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	223f      	movs	r2, #63	; 0x3f
 8008fbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008fc2:	e003      	b.n	8008fcc <UART_Start_Receive_IT+0xa4>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2222      	movs	r2, #34	; 0x22
 8008fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ffc:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008ffe:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009000:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009002:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009004:	e841 2300 	strex	r3, r2, [r1]
 8009008:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800900a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1e5      	bne.n	8008fdc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009018:	d14d      	bne.n	80090b6 <UART_Start_Receive_IT+0x18e>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009020:	88fa      	ldrh	r2, [r7, #6]
 8009022:	429a      	cmp	r2, r3
 8009024:	d347      	bcc.n	80090b6 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800902e:	d107      	bne.n	8009040 <UART_Start_Receive_IT+0x118>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d103      	bne.n	8009040 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4a38      	ldr	r2, [pc, #224]	; (800911c <UART_Start_Receive_IT+0x1f4>)
 800903c:	671a      	str	r2, [r3, #112]	; 0x70
 800903e:	e002      	b.n	8009046 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	4a37      	ldr	r2, [pc, #220]	; (8009120 <UART_Start_Receive_IT+0x1f8>)
 8009044:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009056:	e853 3f00 	ldrex	r3, [r3]
 800905a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009062:	66bb      	str	r3, [r7, #104]	; 0x68
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	461a      	mov	r2, r3
 800906a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800906c:	64bb      	str	r3, [r7, #72]	; 0x48
 800906e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800907a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e6      	bne.n	800904e <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3308      	adds	r3, #8
 8009086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009096:	667b      	str	r3, [r7, #100]	; 0x64
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80090a0:	637a      	str	r2, [r7, #52]	; 0x34
 80090a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e5      	bne.n	8009080 <UART_Start_Receive_IT+0x158>
 80090b4:	e02c      	b.n	8009110 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090be:	d107      	bne.n	80090d0 <UART_Start_Receive_IT+0x1a8>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d103      	bne.n	80090d0 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	4a16      	ldr	r2, [pc, #88]	; (8009124 <UART_Start_Receive_IT+0x1fc>)
 80090cc:	671a      	str	r2, [r3, #112]	; 0x70
 80090ce:	e002      	b.n	80090d6 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	4a15      	ldr	r2, [pc, #84]	; (8009128 <UART_Start_Receive_IT+0x200>)
 80090d4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	e853 3f00 	ldrex	r3, [r3]
 80090ea:	613b      	str	r3, [r7, #16]
   return(result);
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80090f2:	663b      	str	r3, [r7, #96]	; 0x60
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	461a      	mov	r2, r3
 80090fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090fc:	623b      	str	r3, [r7, #32]
 80090fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009100:	69f9      	ldr	r1, [r7, #28]
 8009102:	6a3a      	ldr	r2, [r7, #32]
 8009104:	e841 2300 	strex	r3, r2, [r1]
 8009108:	61bb      	str	r3, [r7, #24]
   return(result);
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1e6      	bne.n	80090de <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3774      	adds	r7, #116	; 0x74
 8009116:	46bd      	mov	sp, r7
 8009118:	bc80      	pop	{r7}
 800911a:	4770      	bx	lr
 800911c:	080099e9 	.word	0x080099e9
 8009120:	080096f1 	.word	0x080096f1
 8009124:	0800958f 	.word	0x0800958f
 8009128:	0800942f 	.word	0x0800942f

0800912c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800912c:	b480      	push	{r7}
 800912e:	b08f      	sub	sp, #60	; 0x3c
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	61fb      	str	r3, [r7, #28]
   return(result);
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009148:	637b      	str	r3, [r7, #52]	; 0x34
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009154:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e6      	bne.n	8009134 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3308      	adds	r3, #8
 800916c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	60bb      	str	r3, [r7, #8]
   return(result);
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800917c:	633b      	str	r3, [r7, #48]	; 0x30
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3308      	adds	r3, #8
 8009184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009186:	61ba      	str	r2, [r7, #24]
 8009188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	6979      	ldr	r1, [r7, #20]
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	613b      	str	r3, [r7, #16]
   return(result);
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e5      	bne.n	8009166 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80091a2:	bf00      	nop
 80091a4:	373c      	adds	r7, #60	; 0x3c
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bc80      	pop	{r7}
 80091aa:	4770      	bx	lr

080091ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b095      	sub	sp, #84	; 0x54
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091bc:	e853 3f00 	ldrex	r3, [r3]
 80091c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	461a      	mov	r2, r3
 80091d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d2:	643b      	str	r3, [r7, #64]	; 0x40
 80091d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1e6      	bne.n	80091b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3308      	adds	r3, #8
 80091ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091fc:	f023 0301 	bic.w	r3, r3, #1
 8009200:	64bb      	str	r3, [r7, #72]	; 0x48
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3308      	adds	r3, #8
 8009208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800920a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800920c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e3      	bne.n	80091e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009222:	2b01      	cmp	r3, #1
 8009224:	d118      	bne.n	8009258 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	e853 3f00 	ldrex	r3, [r3]
 8009232:	60bb      	str	r3, [r7, #8]
   return(result);
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	f023 0310 	bic.w	r3, r3, #16
 800923a:	647b      	str	r3, [r7, #68]	; 0x44
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	461a      	mov	r2, r3
 8009242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009244:	61bb      	str	r3, [r7, #24]
 8009246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009248:	6979      	ldr	r1, [r7, #20]
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	e841 2300 	strex	r3, r2, [r1]
 8009250:	613b      	str	r3, [r7, #16]
   return(result);
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1e6      	bne.n	8009226 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2220      	movs	r2, #32
 800925c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800926c:	bf00      	nop
 800926e:	3754      	adds	r7, #84	; 0x54
 8009270:	46bd      	mov	sp, r7
 8009272:	bc80      	pop	{r7}
 8009274:	4770      	bx	lr

08009276 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b090      	sub	sp, #64	; 0x40
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009282:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b00      	cmp	r3, #0
 8009290:	d137      	bne.n	8009302 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009294:	2200      	movs	r2, #0
 8009296:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800929a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	3308      	adds	r3, #8
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	e853 3f00 	ldrex	r3, [r3]
 80092a8:	623b      	str	r3, [r7, #32]
   return(result);
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80092b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3308      	adds	r3, #8
 80092b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ba:	633a      	str	r2, [r7, #48]	; 0x30
 80092bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092c2:	e841 2300 	strex	r3, r2, [r1]
 80092c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1e5      	bne.n	800929a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	e853 3f00 	ldrex	r3, [r3]
 80092da:	60fb      	str	r3, [r7, #12]
   return(result);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092e2:	637b      	str	r3, [r7, #52]	; 0x34
 80092e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	461a      	mov	r2, r3
 80092ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ec:	61fb      	str	r3, [r7, #28]
 80092ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f0:	69b9      	ldr	r1, [r7, #24]
 80092f2:	69fa      	ldr	r2, [r7, #28]
 80092f4:	e841 2300 	strex	r3, r2, [r1]
 80092f8:	617b      	str	r3, [r7, #20]
   return(result);
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e6      	bne.n	80092ce <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009300:	e002      	b.n	8009308 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009302:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009304:	f7f9 f9da 	bl	80026bc <HAL_UART_TxCpltCallback>
}
 8009308:	bf00      	nop
 800930a:	3740      	adds	r7, #64	; 0x40
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f7ff f9e0 	bl	80086e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009324:	bf00      	nop
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009338:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009340:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009348:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009354:	2b80      	cmp	r3, #128	; 0x80
 8009356:	d109      	bne.n	800936c <UART_DMAError+0x40>
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2b21      	cmp	r3, #33	; 0x21
 800935c:	d106      	bne.n	800936c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2200      	movs	r2, #0
 8009362:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009366:	6978      	ldr	r0, [r7, #20]
 8009368:	f7ff fee0 	bl	800912c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009376:	2b40      	cmp	r3, #64	; 0x40
 8009378:	d109      	bne.n	800938e <UART_DMAError+0x62>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2b22      	cmp	r3, #34	; 0x22
 800937e:	d106      	bne.n	800938e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	2200      	movs	r2, #0
 8009384:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009388:	6978      	ldr	r0, [r7, #20]
 800938a:	f7ff ff0f 	bl	80091ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009394:	f043 0210 	orr.w	r2, r3, #16
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800939e:	6978      	ldr	r0, [r7, #20]
 80093a0:	f7ff f9a9 	bl	80086f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093a4:	bf00      	nop
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7ff f993 	bl	80086f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093d0:	bf00      	nop
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b088      	sub	sp, #32
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	e853 3f00 	ldrex	r3, [r3]
 80093ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093f4:	61fb      	str	r3, [r7, #28]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	461a      	mov	r2, r3
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	61bb      	str	r3, [r7, #24]
 8009400:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009402:	6979      	ldr	r1, [r7, #20]
 8009404:	69ba      	ldr	r2, [r7, #24]
 8009406:	e841 2300 	strex	r3, r2, [r1]
 800940a:	613b      	str	r3, [r7, #16]
   return(result);
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1e6      	bne.n	80093e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2220      	movs	r2, #32
 8009416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7f9 f94b 	bl	80026bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009426:	bf00      	nop
 8009428:	3720      	adds	r7, #32
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b096      	sub	sp, #88	; 0x58
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800943c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009446:	2b22      	cmp	r3, #34	; 0x22
 8009448:	f040 8095 	bne.w	8009576 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009456:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800945a:	b2d9      	uxtb	r1, r3
 800945c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009460:	b2da      	uxtb	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009466:	400a      	ands	r2, r1
 8009468:	b2d2      	uxtb	r2, r2
 800946a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800947c:	b29b      	uxth	r3, r3
 800947e:	3b01      	subs	r3, #1
 8009480:	b29a      	uxth	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800948e:	b29b      	uxth	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	d178      	bne.n	8009586 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	e853 3f00 	ldrex	r3, [r3]
 80094a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094a8:	653b      	str	r3, [r7, #80]	; 0x50
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	461a      	mov	r2, r3
 80094b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094b2:	647b      	str	r3, [r7, #68]	; 0x44
 80094b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e6      	bne.n	8009494 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3308      	adds	r3, #8
 80094cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	623b      	str	r3, [r7, #32]
   return(result);
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	f023 0301 	bic.w	r3, r3, #1
 80094dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3308      	adds	r3, #8
 80094e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094e6:	633a      	str	r2, [r7, #48]	; 0x30
 80094e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e5      	bne.n	80094c6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800950c:	2b01      	cmp	r3, #1
 800950e:	d12e      	bne.n	800956e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	e853 3f00 	ldrex	r3, [r3]
 8009522:	60fb      	str	r3, [r7, #12]
   return(result);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0310 	bic.w	r3, r3, #16
 800952a:	64bb      	str	r3, [r7, #72]	; 0x48
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	461a      	mov	r2, r3
 8009532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009534:	61fb      	str	r3, [r7, #28]
 8009536:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009538:	69b9      	ldr	r1, [r7, #24]
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	e841 2300 	strex	r3, r2, [r1]
 8009540:	617b      	str	r3, [r7, #20]
   return(result);
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e6      	bne.n	8009516 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	f003 0310 	and.w	r3, r3, #16
 8009552:	2b10      	cmp	r3, #16
 8009554:	d103      	bne.n	800955e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2210      	movs	r2, #16
 800955c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff f8ce 	bl	8008708 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800956c:	e00b      	b.n	8009586 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7f9 f8b2 	bl	80026d8 <HAL_UART_RxCpltCallback>
}
 8009574:	e007      	b.n	8009586 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	699a      	ldr	r2, [r3, #24]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f042 0208 	orr.w	r2, r2, #8
 8009584:	619a      	str	r2, [r3, #24]
}
 8009586:	bf00      	nop
 8009588:	3758      	adds	r7, #88	; 0x58
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b096      	sub	sp, #88	; 0x58
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800959c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a6:	2b22      	cmp	r3, #34	; 0x22
 80095a8:	f040 8095 	bne.w	80096d6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ba:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80095bc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80095c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80095c4:	4013      	ands	r3, r2
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d0:	1c9a      	adds	r2, r3, #2
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095dc:	b29b      	uxth	r3, r3
 80095de:	3b01      	subs	r3, #1
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d178      	bne.n	80096e6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009612:	643b      	str	r3, [r7, #64]	; 0x40
 8009614:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009618:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e6      	bne.n	80095f4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3308      	adds	r3, #8
 800962c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	61fb      	str	r3, [r7, #28]
   return(result);
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	f023 0301 	bic.w	r3, r3, #1
 800963c:	64bb      	str	r3, [r7, #72]	; 0x48
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3308      	adds	r3, #8
 8009644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009646:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800964c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e5      	bne.n	8009626 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2220      	movs	r2, #32
 800965e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800966c:	2b01      	cmp	r3, #1
 800966e:	d12e      	bne.n	80096ce <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	60bb      	str	r3, [r7, #8]
   return(result);
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f023 0310 	bic.w	r3, r3, #16
 800968a:	647b      	str	r3, [r7, #68]	; 0x44
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009694:	61bb      	str	r3, [r7, #24]
 8009696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	6979      	ldr	r1, [r7, #20]
 800969a:	69ba      	ldr	r2, [r7, #24]
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	613b      	str	r3, [r7, #16]
   return(result);
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e6      	bne.n	8009676 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	69db      	ldr	r3, [r3, #28]
 80096ae:	f003 0310 	and.w	r3, r3, #16
 80096b2:	2b10      	cmp	r3, #16
 80096b4:	d103      	bne.n	80096be <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2210      	movs	r2, #16
 80096bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff f81e 	bl	8008708 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096cc:	e00b      	b.n	80096e6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7f9 f802 	bl	80026d8 <HAL_UART_RxCpltCallback>
}
 80096d4:	e007      	b.n	80096e6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	699a      	ldr	r2, [r3, #24]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f042 0208 	orr.w	r2, r2, #8
 80096e4:	619a      	str	r2, [r3, #24]
}
 80096e6:	bf00      	nop
 80096e8:	3758      	adds	r7, #88	; 0x58
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
	...

080096f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b0a6      	sub	sp, #152	; 0x98
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096fe:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	69db      	ldr	r3, [r3, #28]
 8009708:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009726:	2b22      	cmp	r3, #34	; 0x22
 8009728:	f040 814f 	bne.w	80099ca <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009732:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009736:	e0f6      	b.n	8009926 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009742:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009746:	b2d9      	uxtb	r1, r3
 8009748:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800974c:	b2da      	uxtb	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009752:	400a      	ands	r2, r1
 8009754:	b2d2      	uxtb	r2, r2
 8009756:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975c:	1c5a      	adds	r2, r3, #1
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009768:	b29b      	uxth	r3, r3
 800976a:	3b01      	subs	r3, #1
 800976c:	b29a      	uxth	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800977e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009782:	f003 0307 	and.w	r3, r3, #7
 8009786:	2b00      	cmp	r3, #0
 8009788:	d053      	beq.n	8009832 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800978a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	d011      	beq.n	80097ba <UART_RxISR_8BIT_FIFOEN+0xca>
 8009796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800979a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00b      	beq.n	80097ba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2201      	movs	r2, #1
 80097a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097b0:	f043 0201 	orr.w	r2, r3, #1
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097be:	f003 0302 	and.w	r3, r3, #2
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d011      	beq.n	80097ea <UART_RxISR_8BIT_FIFOEN+0xfa>
 80097c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00b      	beq.n	80097ea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2202      	movs	r2, #2
 80097d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097e0:	f043 0204 	orr.w	r2, r3, #4
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097ee:	f003 0304 	and.w	r3, r3, #4
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d011      	beq.n	800981a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80097f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00b      	beq.n	800981a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2204      	movs	r2, #4
 8009808:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009810:	f043 0202 	orr.w	r2, r3, #2
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009820:	2b00      	cmp	r3, #0
 8009822:	d006      	beq.n	8009832 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7fe ff66 	bl	80086f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009838:	b29b      	uxth	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d173      	bne.n	8009926 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009846:	e853 3f00 	ldrex	r3, [r3]
 800984a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800984c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800984e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009852:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009860:	66bb      	str	r3, [r7, #104]	; 0x68
 8009862:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009864:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009866:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009868:	e841 2300 	strex	r3, r2, [r1]
 800986c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800986e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e4      	bne.n	800983e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3308      	adds	r3, #8
 800987a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800987e:	e853 3f00 	ldrex	r3, [r3]
 8009882:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800988a:	f023 0301 	bic.w	r3, r3, #1
 800988e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	3308      	adds	r3, #8
 8009896:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009898:	657a      	str	r2, [r7, #84]	; 0x54
 800989a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800989e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098a0:	e841 2300 	strex	r3, r2, [r1]
 80098a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80098a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1e3      	bne.n	8009874 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2220      	movs	r2, #32
 80098b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d12e      	bne.n	8009920 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	f023 0310 	bic.w	r3, r3, #16
 80098dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098e6:	643b      	str	r3, [r7, #64]	; 0x40
 80098e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1e6      	bne.n	80098c8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	f003 0310 	and.w	r3, r3, #16
 8009904:	2b10      	cmp	r3, #16
 8009906:	d103      	bne.n	8009910 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2210      	movs	r2, #16
 800990e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f7fe fef5 	bl	8008708 <HAL_UARTEx_RxEventCallback>
 800991e:	e002      	b.n	8009926 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7f8 fed9 	bl	80026d8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009926:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800992a:	2b00      	cmp	r3, #0
 800992c:	d006      	beq.n	800993c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800992e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	f47f aefe 	bne.w	8009738 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009942:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009946:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800994a:	2b00      	cmp	r3, #0
 800994c:	d045      	beq.n	80099da <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009954:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009958:	429a      	cmp	r2, r3
 800995a:	d23e      	bcs.n	80099da <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3308      	adds	r3, #8
 8009962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	e853 3f00 	ldrex	r3, [r3]
 800996a:	61fb      	str	r3, [r7, #28]
   return(result);
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009972:	673b      	str	r3, [r7, #112]	; 0x70
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3308      	adds	r3, #8
 800997a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800997c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800997e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009984:	e841 2300 	strex	r3, r2, [r1]
 8009988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1e5      	bne.n	800995c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a14      	ldr	r2, [pc, #80]	; (80099e4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009994:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	e853 3f00 	ldrex	r3, [r3]
 80099a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f043 0320 	orr.w	r3, r3, #32
 80099aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	461a      	mov	r2, r3
 80099b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099b4:	61bb      	str	r3, [r7, #24]
 80099b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b8:	6979      	ldr	r1, [r7, #20]
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	e841 2300 	strex	r3, r2, [r1]
 80099c0:	613b      	str	r3, [r7, #16]
   return(result);
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1e6      	bne.n	8009996 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099c8:	e007      	b.n	80099da <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	699a      	ldr	r2, [r3, #24]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f042 0208 	orr.w	r2, r2, #8
 80099d8:	619a      	str	r2, [r3, #24]
}
 80099da:	bf00      	nop
 80099dc:	3798      	adds	r7, #152	; 0x98
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	0800942f 	.word	0x0800942f

080099e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b0a8      	sub	sp, #160	; 0xa0
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099f6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a1e:	2b22      	cmp	r3, #34	; 0x22
 8009a20:	f040 8153 	bne.w	8009cca <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a2a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a2e:	e0fa      	b.n	8009c26 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a36:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009a42:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009a46:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a58:	1c9a      	adds	r2, r3, #2
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	3b01      	subs	r3, #1
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009a7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d053      	beq.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d011      	beq.n	8009ab6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009a92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00b      	beq.n	8009ab6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aac:	f043 0201 	orr.w	r2, r3, #1
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ab6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aba:	f003 0302 	and.w	r3, r3, #2
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d011      	beq.n	8009ae6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00b      	beq.n	8009ae6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009adc:	f043 0204 	orr.w	r2, r3, #4
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009aea:	f003 0304 	and.w	r3, r3, #4
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d011      	beq.n	8009b16 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00b      	beq.n	8009b16 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2204      	movs	r2, #4
 8009b04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b0c:	f043 0202 	orr.w	r2, r3, #2
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d006      	beq.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7fe fde8 	bl	80086f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d175      	bne.n	8009c26 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b42:	e853 3f00 	ldrex	r3, [r3]
 8009b46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b5e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b64:	e841 2300 	strex	r3, r2, [r1]
 8009b68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1e4      	bne.n	8009b3a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3308      	adds	r3, #8
 8009b76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b7a:	e853 3f00 	ldrex	r3, [r3]
 8009b7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b86:	f023 0301 	bic.w	r3, r3, #1
 8009b8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3308      	adds	r3, #8
 8009b94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b98:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ba0:	e841 2300 	strex	r3, r2, [r1]
 8009ba4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e1      	bne.n	8009b70 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d12e      	bne.n	8009c20 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd0:	e853 3f00 	ldrex	r3, [r3]
 8009bd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd8:	f023 0310 	bic.w	r3, r3, #16
 8009bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009be6:	647b      	str	r3, [r7, #68]	; 0x44
 8009be8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bee:	e841 2300 	strex	r3, r2, [r1]
 8009bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1e6      	bne.n	8009bc8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	69db      	ldr	r3, [r3, #28]
 8009c00:	f003 0310 	and.w	r3, r3, #16
 8009c04:	2b10      	cmp	r3, #16
 8009c06:	d103      	bne.n	8009c10 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2210      	movs	r2, #16
 8009c0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7fe fd75 	bl	8008708 <HAL_UARTEx_RxEventCallback>
 8009c1e:	e002      	b.n	8009c26 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7f8 fd59 	bl	80026d8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c26:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d006      	beq.n	8009c3c <UART_RxISR_16BIT_FIFOEN+0x254>
 8009c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f47f aefa 	bne.w	8009a30 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c42:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009c46:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d045      	beq.n	8009cda <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c54:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d23e      	bcs.n	8009cda <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	3308      	adds	r3, #8
 8009c62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	e853 3f00 	ldrex	r3, [r3]
 8009c6a:	623b      	str	r3, [r7, #32]
   return(result);
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c72:	677b      	str	r3, [r7, #116]	; 0x74
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3308      	adds	r3, #8
 8009c7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c7c:	633a      	str	r2, [r7, #48]	; 0x30
 8009c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c84:	e841 2300 	strex	r3, r2, [r1]
 8009c88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1e5      	bne.n	8009c5c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a14      	ldr	r2, [pc, #80]	; (8009ce4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009c94:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	e853 3f00 	ldrex	r3, [r3]
 8009ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f043 0320 	orr.w	r3, r3, #32
 8009caa:	673b      	str	r3, [r7, #112]	; 0x70
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cb4:	61fb      	str	r3, [r7, #28]
 8009cb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb8:	69b9      	ldr	r1, [r7, #24]
 8009cba:	69fa      	ldr	r2, [r7, #28]
 8009cbc:	e841 2300 	strex	r3, r2, [r1]
 8009cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1e6      	bne.n	8009c96 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cc8:	e007      	b.n	8009cda <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	699a      	ldr	r2, [r3, #24]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f042 0208 	orr.w	r2, r2, #8
 8009cd8:	619a      	str	r2, [r3, #24]
}
 8009cda:	bf00      	nop
 8009cdc:	37a0      	adds	r7, #160	; 0xa0
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	0800958f 	.word	0x0800958f

08009ce8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bc80      	pop	{r7}
 8009cf8:	4770      	bx	lr

08009cfa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	b083      	sub	sp, #12
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d02:	bf00      	nop
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bc80      	pop	{r7}
 8009d0a:	4770      	bx	lr

08009d0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bc80      	pop	{r7}
 8009d1c:	4770      	bx	lr

08009d1e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b088      	sub	sp, #32
 8009d22:	af02      	add	r7, sp, #8
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	1d3b      	adds	r3, r7, #4
 8009d28:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d101      	bne.n	8009d3e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	e046      	b.n	8009dcc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2224      	movs	r2, #36	; 0x24
 8009d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f022 0201 	bic.w	r2, r2, #1
 8009d5c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d105      	bne.n	8009d84 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009d78:	1d3b      	adds	r3, r7, #4
 8009d7a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 f911 	bl	8009fa6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f042 0201 	orr.w	r2, r2, #1
 8009d92:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d94:	f7f7 ff4e 	bl	8001c34 <HAL_GetTick>
 8009d98:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f7fe fff5 	bl	8008d98 <UART_WaitOnFlagUntilTimeout>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	75fb      	strb	r3, [r7, #23]
 8009db8:	e003      	b.n	8009dc2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b089      	sub	sp, #36	; 0x24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d101      	bne.n	8009dea <HAL_UARTEx_EnableStopMode+0x16>
 8009de6:	2302      	movs	r3, #2
 8009de8:	e021      	b.n	8009e2e <HAL_UARTEx_EnableStopMode+0x5a>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	e853 3f00 	ldrex	r3, [r3]
 8009dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	f043 0302 	orr.w	r3, r3, #2
 8009e06:	61fb      	str	r3, [r7, #28]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	61bb      	str	r3, [r7, #24]
 8009e12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e14:	6979      	ldr	r1, [r7, #20]
 8009e16:	69ba      	ldr	r2, [r7, #24]
 8009e18:	e841 2300 	strex	r3, r2, [r1]
 8009e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1e6      	bne.n	8009df2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3724      	adds	r7, #36	; 0x24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bc80      	pop	{r7}
 8009e36:	4770      	bx	lr

08009e38 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <HAL_UARTEx_EnableFifoMode+0x16>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	e02b      	b.n	8009ea6 <HAL_UARTEx_EnableFifoMode+0x6e>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2224      	movs	r2, #36	; 0x24
 8009e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f022 0201 	bic.w	r2, r2, #1
 8009e74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009e84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f8ac 	bl	8009fec <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2220      	movs	r2, #32
 8009e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e02d      	b.n	8009f22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2224      	movs	r2, #36	; 0x24
 8009ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f022 0201 	bic.w	r2, r2, #1
 8009eec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f872 	bl	8009fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2220      	movs	r2, #32
 8009f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d101      	bne.n	8009f42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f3e:	2302      	movs	r3, #2
 8009f40:	e02d      	b.n	8009f9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2224      	movs	r2, #36	; 0x24
 8009f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 0201 	bic.w	r2, r2, #1
 8009f68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f834 	bl	8009fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2220      	movs	r2, #32
 8009f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b085      	sub	sp, #20
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	60f8      	str	r0, [r7, #12]
 8009fae:	1d3b      	adds	r3, r7, #4
 8009fb0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f023 0210 	bic.w	r2, r3, #16
 8009fbe:	893b      	ldrh	r3, [r7, #8]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009fd4:	7abb      	ldrb	r3, [r7, #10]
 8009fd6:	061a      	lsls	r2, r3, #24
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	605a      	str	r2, [r3, #4]
}
 8009fe0:	bf00      	nop
 8009fe2:	3714      	adds	r7, #20
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bc80      	pop	{r7}
 8009fe8:	4770      	bx	lr
	...

08009fec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d108      	bne.n	800a00e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a00c:	e031      	b.n	800a072 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a00e:	2308      	movs	r3, #8
 800a010:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a012:	2308      	movs	r3, #8
 800a014:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	0e5b      	lsrs	r3, r3, #25
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	f003 0307 	and.w	r3, r3, #7
 800a024:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	0f5b      	lsrs	r3, r3, #29
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f003 0307 	and.w	r3, r3, #7
 800a034:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	7b3a      	ldrb	r2, [r7, #12]
 800a03a:	4910      	ldr	r1, [pc, #64]	; (800a07c <UARTEx_SetNbDataToProcess+0x90>)
 800a03c:	5c8a      	ldrb	r2, [r1, r2]
 800a03e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a042:	7b3a      	ldrb	r2, [r7, #12]
 800a044:	490e      	ldr	r1, [pc, #56]	; (800a080 <UARTEx_SetNbDataToProcess+0x94>)
 800a046:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a048:	fb93 f3f2 	sdiv	r3, r3, r2
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	7b7a      	ldrb	r2, [r7, #13]
 800a058:	4908      	ldr	r1, [pc, #32]	; (800a07c <UARTEx_SetNbDataToProcess+0x90>)
 800a05a:	5c8a      	ldrb	r2, [r1, r2]
 800a05c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a060:	7b7a      	ldrb	r2, [r7, #13]
 800a062:	4907      	ldr	r1, [pc, #28]	; (800a080 <UARTEx_SetNbDataToProcess+0x94>)
 800a064:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a066:	fb93 f3f2 	sdiv	r3, r3, r2
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a072:	bf00      	nop
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	bc80      	pop	{r7}
 800a07a:	4770      	bx	lr
 800a07c:	0801b4f0 	.word	0x0801b4f0
 800a080:	0801b4f8 	.word	0x0801b4f8

0800a084 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a088:	f7f7 fc7a 	bl	8001980 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a08c:	f000 f802 	bl	800a094 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a090:	bf00      	nop
 800a092:	bd80      	pop	{r7, pc}

0800a094 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 800a09a:	2000      	movs	r0, #0
 800a09c:	f7f8 fb7e 	bl	800279c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	f7f8 fb7b 	bl	800279c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800a0a6:	2002      	movs	r0, #2
 800a0a8:	f7f8 fb78 	bl	800279c <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	f7f8 fc24 	bl	80028fc <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	9302      	str	r3, [sp, #8]
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	2301      	movs	r3, #1
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	4b46      	ldr	r3, [pc, #280]	; (800a1dc <LoRaWAN_Init+0x148>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	2002      	movs	r0, #2
 800a0c8:	f010 fa22 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	9302      	str	r3, [sp, #8]
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	9301      	str	r3, [sp, #4]
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	4b41      	ldr	r3, [pc, #260]	; (800a1e0 <LoRaWAN_Init+0x14c>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2100      	movs	r1, #0
 800a0de:	2002      	movs	r0, #2
 800a0e0:	f010 fa16 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	9302      	str	r3, [sp, #8]
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	9301      	str	r3, [sp, #4]
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	4b3c      	ldr	r3, [pc, #240]	; (800a1e4 <LoRaWAN_Init+0x150>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	2002      	movs	r0, #2
 800a0f8:	f010 fa0a 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	4b39      	ldr	r3, [pc, #228]	; (800a1e8 <LoRaWAN_Init+0x154>)
 800a102:	2200      	movs	r2, #0
 800a104:	f04f 31ff 	mov.w	r1, #4294967295
 800a108:	4838      	ldr	r0, [pc, #224]	; (800a1ec <LoRaWAN_Init+0x158>)
 800a10a:	f00f ff53 	bl	8019fb4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a10e:	2300      	movs	r3, #0
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	4b37      	ldr	r3, [pc, #220]	; (800a1f0 <LoRaWAN_Init+0x15c>)
 800a114:	2200      	movs	r2, #0
 800a116:	f04f 31ff 	mov.w	r1, #4294967295
 800a11a:	4836      	ldr	r0, [pc, #216]	; (800a1f4 <LoRaWAN_Init+0x160>)
 800a11c:	f00f ff4a 	bl	8019fb4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a120:	2300      	movs	r3, #0
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	4b34      	ldr	r3, [pc, #208]	; (800a1f8 <LoRaWAN_Init+0x164>)
 800a126:	2201      	movs	r2, #1
 800a128:	f04f 31ff 	mov.w	r1, #4294967295
 800a12c:	4833      	ldr	r0, [pc, #204]	; (800a1fc <LoRaWAN_Init+0x168>)
 800a12e:	f00f ff41 	bl	8019fb4 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800a132:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a136:	482d      	ldr	r0, [pc, #180]	; (800a1ec <LoRaWAN_Init+0x158>)
 800a138:	f010 f850 	bl	801a1dc <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800a13c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a140:	482c      	ldr	r0, [pc, #176]	; (800a1f4 <LoRaWAN_Init+0x160>)
 800a142:	f010 f84b 	bl	801a1dc <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 800a146:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a14a:	482c      	ldr	r0, [pc, #176]	; (800a1fc <LoRaWAN_Init+0x168>)
 800a14c:	f010 f846 	bl	801a1dc <UTIL_TIMER_SetPeriod>

//================================================================================================================================


  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieInit), UTIL_SEQ_RFU, Sensor_Init);
 800a150:	4a2b      	ldr	r2, [pc, #172]	; (800a200 <LoRaWAN_Init+0x16c>)
 800a152:	2100      	movs	r1, #0
 800a154:	2004      	movs	r0, #4
 800a156:	f00f fe97 	bl	8019e88 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieData), UTIL_SEQ_RFU, Sensor_Data);
 800a15a:	4a2a      	ldr	r2, [pc, #168]	; (800a204 <LoRaWAN_Init+0x170>)
 800a15c:	2100      	movs	r1, #0
 800a15e:	2008      	movs	r0, #8
 800a160:	f00f fe92 	bl	8019e88 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
 800a164:	2100      	movs	r1, #0
 800a166:	2004      	movs	r0, #4
 800a168:	f00f feb0 	bl	8019ecc <UTIL_SEQ_SetTask>



  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a16c:	4a26      	ldr	r2, [pc, #152]	; (800a208 <LoRaWAN_Init+0x174>)
 800a16e:	2100      	movs	r1, #0
 800a170:	2001      	movs	r0, #1
 800a172:	f00f fe89 	bl	8019e88 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a176:	4a25      	ldr	r2, [pc, #148]	; (800a20c <LoRaWAN_Init+0x178>)
 800a178:	2100      	movs	r1, #0
 800a17a:	2002      	movs	r0, #2
 800a17c:	f00f fe84 	bl	8019e88 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a180:	f000 fb1e 	bl	800a7c0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800a184:	4822      	ldr	r0, [pc, #136]	; (800a210 <LoRaWAN_Init+0x17c>)
 800a186:	f001 ff95 	bl	800c0b4 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a18a:	4822      	ldr	r0, [pc, #136]	; (800a214 <LoRaWAN_Init+0x180>)
 800a18c:	f001 ffde 	bl	800c14c <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a190:	481a      	ldr	r0, [pc, #104]	; (800a1fc <LoRaWAN_Init+0x168>)
 800a192:	f00f ff45 	bl	801a020 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 800a196:	4b20      	ldr	r3, [pc, #128]	; (800a218 <LoRaWAN_Init+0x184>)
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f002 f90c 	bl	800c3b8 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a1a0:	4b1e      	ldr	r3, [pc, #120]	; (800a21c <LoRaWAN_Init+0x188>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d111      	bne.n	800a1cc <LoRaWAN_Init+0x138>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	4b1c      	ldr	r3, [pc, #112]	; (800a220 <LoRaWAN_Init+0x18c>)
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a1b4:	481b      	ldr	r0, [pc, #108]	; (800a224 <LoRaWAN_Init+0x190>)
 800a1b6:	f00f fefd 	bl	8019fb4 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800a1ba:	f247 5130 	movw	r1, #30000	; 0x7530
 800a1be:	4819      	ldr	r0, [pc, #100]	; (800a224 <LoRaWAN_Init+0x190>)
 800a1c0:	f010 f80c 	bl	801a1dc <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a1c4:	4817      	ldr	r0, [pc, #92]	; (800a224 <LoRaWAN_Init+0x190>)
 800a1c6:	f00f ff2b 	bl	801a020 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a1ca:	e003      	b.n	800a1d4 <LoRaWAN_Init+0x140>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	f7f8 fb94 	bl	80028fc <BSP_PB_Init>
}
 800a1d4:	bf00      	nop
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	0801ac44 	.word	0x0801ac44
 800a1e0:	0801ac64 	.word	0x0801ac64
 800a1e4:	0801ac84 	.word	0x0801ac84
 800a1e8:	0800a631 	.word	0x0800a631
 800a1ec:	20000268 	.word	0x20000268
 800a1f0:	0800a647 	.word	0x0800a647
 800a1f4:	20000280 	.word	0x20000280
 800a1f8:	0800a65d 	.word	0x0800a65d
 800a1fc:	20000298 	.word	0x20000298
 800a200:	08000e51 	.word	0x08000e51
 800a204:	08000e75 	.word	0x08000e75
 800a208:	0800c3a5 	.word	0x0800c3a5
 800a20c:	0800a3a1 	.word	0x0800a3a1
 800a210:	2000003c 	.word	0x2000003c
 800a214:	20000070 	.word	0x20000070
 800a218:	20000038 	.word	0x20000038
 800a21c:	20000158 	.word	0x20000158
 800a220:	0800a60d 	.word	0x0800a60d
 800a224:	2000015c 	.word	0x2000015c

0800a228 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	4603      	mov	r3, r0
 800a230:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a232:	88fb      	ldrh	r3, [r7, #6]
 800a234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a238:	d007      	beq.n	800a24a <HAL_GPIO_EXTI_Callback+0x22>
 800a23a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a23e:	dc09      	bgt.n	800a254 <HAL_GPIO_EXTI_Callback+0x2c>
 800a240:	2b02      	cmp	r3, #2
 800a242:	d009      	beq.n	800a258 <HAL_GPIO_EXTI_Callback+0x30>
 800a244:	2b40      	cmp	r3, #64	; 0x40
 800a246:	d009      	beq.n	800a25c <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 800a248:	e004      	b.n	800a254 <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a24a:	2100      	movs	r1, #0
 800a24c:	2002      	movs	r0, #2
 800a24e:	f00f fe3d 	bl	8019ecc <UTIL_SEQ_SetTask>
      break;
 800a252:	e004      	b.n	800a25e <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a254:	bf00      	nop
 800a256:	e002      	b.n	800a25e <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a258:	bf00      	nop
 800a25a:	e000      	b.n	800a25e <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a25c:	bf00      	nop
  }
}
 800a25e:	bf00      	nop
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
	...

0800a268 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a268:	b5b0      	push	{r4, r5, r7, lr}
 800a26a:	b088      	sub	sp, #32
 800a26c:	af06      	add	r7, sp, #24
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d102      	bne.n	800a27e <OnRxData+0x16>
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d078      	beq.n	800a370 <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 800a27e:	2000      	movs	r0, #0
 800a280:	f7f8 fad0 	bl	8002824 <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 800a284:	483f      	ldr	r0, [pc, #252]	; (800a384 <OnRxData+0x11c>)
 800a286:	f00f fecb 	bl	801a020 <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800a28a:	4b3f      	ldr	r3, [pc, #252]	; (800a388 <OnRxData+0x120>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	2100      	movs	r1, #0
 800a290:	2002      	movs	r0, #2
 800a292:	f010 f93d 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	4a3a      	ldr	r2, [pc, #232]	; (800a38c <OnRxData+0x124>)
 800a2a4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a2a8:	6879      	ldr	r1, [r7, #4]
 800a2aa:	7809      	ldrb	r1, [r1, #0]
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800a2bc:	460d      	mov	r5, r1
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800a2c4:	9105      	str	r1, [sp, #20]
 800a2c6:	9504      	str	r5, [sp, #16]
 800a2c8:	9403      	str	r4, [sp, #12]
 800a2ca:	9002      	str	r0, [sp, #8]
 800a2cc:	9201      	str	r2, [sp, #4]
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	4b2f      	ldr	r3, [pc, #188]	; (800a390 <OnRxData+0x128>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	2003      	movs	r0, #3
 800a2d8:	f010 f91a 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d021      	beq.n	800a328 <OnRxData+0xc0>
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	d145      	bne.n	800a374 <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	785b      	ldrb	r3, [r3, #1]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d117      	bne.n	800a320 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d00e      	beq.n	800a318 <OnRxData+0xb0>
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	dc12      	bgt.n	800a324 <OnRxData+0xbc>
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <OnRxData+0xa0>
 800a302:	2b01      	cmp	r3, #1
 800a304:	d004      	beq.n	800a310 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800a306:	e00d      	b.n	800a324 <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 800a308:	2000      	movs	r0, #0
 800a30a:	f002 f9b7 	bl	800c67c <LmHandlerRequestClass>
              break;
 800a30e:	e00a      	b.n	800a326 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 800a310:	2001      	movs	r0, #1
 800a312:	f002 f9b3 	bl	800c67c <LmHandlerRequestClass>
              break;
 800a316:	e006      	b.n	800a326 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 800a318:	2002      	movs	r0, #2
 800a31a:	f002 f9af 	bl	800c67c <LmHandlerRequestClass>
              break;
 800a31e:	e002      	b.n	800a326 <OnRxData+0xbe>
          }
        }
 800a320:	bf00      	nop
 800a322:	e02a      	b.n	800a37a <OnRxData+0x112>
              break;
 800a324:	bf00      	nop
        break;
 800a326:	e028      	b.n	800a37a <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	785b      	ldrb	r3, [r3, #1]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d123      	bne.n	800a378 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	4b15      	ldr	r3, [pc, #84]	; (800a394 <OnRxData+0x12c>)
 800a33e:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a340:	4b14      	ldr	r3, [pc, #80]	; (800a394 <OnRxData+0x12c>)
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d109      	bne.n	800a35c <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800a348:	4b13      	ldr	r3, [pc, #76]	; (800a398 <OnRxData+0x130>)
 800a34a:	2200      	movs	r2, #0
 800a34c:	2100      	movs	r1, #0
 800a34e:	2003      	movs	r0, #3
 800a350:	f010 f8de 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 800a354:	2002      	movs	r0, #2
 800a356:	f7f8 fa89 	bl	800286c <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 800a35a:	e00d      	b.n	800a378 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a35c:	4b0f      	ldr	r3, [pc, #60]	; (800a39c <OnRxData+0x134>)
 800a35e:	2200      	movs	r2, #0
 800a360:	2100      	movs	r1, #0
 800a362:	2003      	movs	r0, #3
 800a364:	f010 f8d4 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 800a368:	2002      	movs	r0, #2
 800a36a:	f7f8 fa5b 	bl	8002824 <BSP_LED_On>
        break;
 800a36e:	e003      	b.n	800a378 <OnRxData+0x110>

      default:

        break;
    }
  }
 800a370:	bf00      	nop
 800a372:	e002      	b.n	800a37a <OnRxData+0x112>
        break;
 800a374:	bf00      	nop
 800a376:	e000      	b.n	800a37a <OnRxData+0x112>
        break;
 800a378:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a37a:	bf00      	nop
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bdb0      	pop	{r4, r5, r7, pc}
 800a382:	bf00      	nop
 800a384:	20000280 	.word	0x20000280
 800a388:	0801aca4 	.word	0x0801aca4
 800a38c:	20000088 	.word	0x20000088
 800a390:	0801acd8 	.word	0x0801acd8
 800a394:	20000266 	.word	0x20000266
 800a398:	0801ad20 	.word	0x0801ad20
 800a39c:	0801ad2c 	.word	0x0801ad2c

0800a3a0 <SendTxData>:

static void SendTxData(void)
{
 800a3a0:	b590      	push	{r4, r7, lr}
 800a3a2:	b091      	sub	sp, #68	; 0x44
 800a3a4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	867b      	strh	r3, [r7, #50]	; 0x32
  int16_t temperature = 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	863b      	strh	r3, [r7, #48]	; 0x30
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t humidity = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t i = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t latitude = 0;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t longitude = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	847b      	strh	r3, [r7, #34]	; 0x22
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a3c6:	f107 0308 	add.w	r3, r7, #8
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f7 fd34 	bl	8001e38 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 800a3d0:	f7f6 fed6 	bl	8001180 <SYS_GetTemperatureLevel>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	121b      	asrs	r3, r3, #8
 800a3d8:	863b      	strh	r3, [r7, #48]	; 0x30
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	4983      	ldr	r1, [pc, #524]	; (800a5ec <SendTxData+0x24c>)
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7f6 fa4c 	bl	800087c <__aeabi_fmul>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	4982      	ldr	r1, [pc, #520]	; (800a5f0 <SendTxData+0x250>)
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7f6 fafb 	bl	80009e4 <__aeabi_fdiv>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7f6 fb93 	bl	8000b1c <__aeabi_f2uiz>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	867b      	strh	r3, [r7, #50]	; 0x32

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a3fa:	4b7e      	ldr	r3, [pc, #504]	; (800a5f4 <SendTxData+0x254>)
 800a3fc:	2202      	movs	r2, #2
 800a3fe:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	497b      	ldr	r1, [pc, #492]	; (800a5f0 <SendTxData+0x250>)
 800a404:	4618      	mov	r0, r3
 800a406:	f7f6 fa39 	bl	800087c <__aeabi_fmul>
 800a40a:	4603      	mov	r3, r0
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7f6 fb85 	bl	8000b1c <__aeabi_f2uiz>
 800a412:	4603      	mov	r3, r0
 800a414:	85fb      	strh	r3, [r7, #46]	; 0x2e

  AppData.Buffer[i++] = AppLedStateOn;
 800a416:	4b77      	ldr	r3, [pc, #476]	; (800a5f4 <SendTxData+0x254>)
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41c:	1c59      	adds	r1, r3, #1
 800a41e:	6379      	str	r1, [r7, #52]	; 0x34
 800a420:	4413      	add	r3, r2
 800a422:	4a75      	ldr	r2, [pc, #468]	; (800a5f8 <SendTxData+0x258>)
 800a424:	7812      	ldrb	r2, [r2, #0]
 800a426:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a428:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a42a:	0a1b      	lsrs	r3, r3, #8
 800a42c:	b298      	uxth	r0, r3
 800a42e:	4b71      	ldr	r3, [pc, #452]	; (800a5f4 <SendTxData+0x254>)
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a434:	1c59      	adds	r1, r3, #1
 800a436:	6379      	str	r1, [r7, #52]	; 0x34
 800a438:	4413      	add	r3, r2
 800a43a:	b2c2      	uxtb	r2, r0
 800a43c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a43e:	4b6d      	ldr	r3, [pc, #436]	; (800a5f4 <SendTxData+0x254>)
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a444:	1c59      	adds	r1, r3, #1
 800a446:	6379      	str	r1, [r7, #52]	; 0x34
 800a448:	4413      	add	r3, r2
 800a44a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a44c:	b2d2      	uxtb	r2, r2
 800a44e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a450:	4b68      	ldr	r3, [pc, #416]	; (800a5f4 <SendTxData+0x254>)
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a456:	1c59      	adds	r1, r3, #1
 800a458:	6379      	str	r1, [r7, #52]	; 0x34
 800a45a:	4413      	add	r3, r2
 800a45c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a45e:	b2d2      	uxtb	r2, r2
 800a460:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a462:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a464:	0a1b      	lsrs	r3, r3, #8
 800a466:	b298      	uxth	r0, r3
 800a468:	4b62      	ldr	r3, [pc, #392]	; (800a5f4 <SendTxData+0x254>)
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46e:	1c59      	adds	r1, r3, #1
 800a470:	6379      	str	r1, [r7, #52]	; 0x34
 800a472:	4413      	add	r3, r2
 800a474:	b2c2      	uxtb	r2, r0
 800a476:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a478:	4b5e      	ldr	r3, [pc, #376]	; (800a5f4 <SendTxData+0x254>)
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47e:	1c59      	adds	r1, r3, #1
 800a480:	6379      	str	r1, [r7, #52]	; 0x34
 800a482:	4413      	add	r3, r2
 800a484:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a486:	b2d2      	uxtb	r2, r2
 800a488:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a48a:	4b5c      	ldr	r3, [pc, #368]	; (800a5fc <SendTxData+0x25c>)
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2b08      	cmp	r3, #8
 800a490:	d007      	beq.n	800a4a2 <SendTxData+0x102>
 800a492:	4b5a      	ldr	r3, [pc, #360]	; (800a5fc <SendTxData+0x25c>)
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d003      	beq.n	800a4a2 <SendTxData+0x102>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a49a:	4b58      	ldr	r3, [pc, #352]	; (800a5fc <SendTxData+0x25c>)
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d120      	bne.n	800a4e4 <SendTxData+0x144>
  {
    AppData.Buffer[i++] = 0;
 800a4a2:	4b54      	ldr	r3, [pc, #336]	; (800a5f4 <SendTxData+0x254>)
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a8:	1c59      	adds	r1, r3, #1
 800a4aa:	6379      	str	r1, [r7, #52]	; 0x34
 800a4ac:	4413      	add	r3, r2
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a4b2:	4b50      	ldr	r3, [pc, #320]	; (800a5f4 <SendTxData+0x254>)
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b8:	1c59      	adds	r1, r3, #1
 800a4ba:	6379      	str	r1, [r7, #52]	; 0x34
 800a4bc:	4413      	add	r3, r2
 800a4be:	2200      	movs	r2, #0
 800a4c0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a4c2:	4b4c      	ldr	r3, [pc, #304]	; (800a5f4 <SendTxData+0x254>)
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c8:	1c59      	adds	r1, r3, #1
 800a4ca:	6379      	str	r1, [r7, #52]	; 0x34
 800a4cc:	4413      	add	r3, r2
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a4d2:	4b48      	ldr	r3, [pc, #288]	; (800a5f4 <SendTxData+0x254>)
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d8:	1c59      	adds	r1, r3, #1
 800a4da:	6379      	str	r1, [r7, #52]	; 0x34
 800a4dc:	4413      	add	r3, r2
 800a4de:	2200      	movs	r2, #0
 800a4e0:	701a      	strb	r2, [r3, #0]
 800a4e2:	e05b      	b.n	800a59c <SendTxData+0x1fc>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	62bb      	str	r3, [r7, #40]	; 0x28
    longitude = sensor_data.longitude;
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a4ec:	4b41      	ldr	r3, [pc, #260]	; (800a5f4 <SendTxData+0x254>)
 800a4ee:	685a      	ldr	r2, [r3, #4]
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f2:	1c59      	adds	r1, r3, #1
 800a4f4:	6379      	str	r1, [r7, #52]	; 0x34
 800a4f6:	18d4      	adds	r4, r2, r3
 800a4f8:	f7f7 fa68 	bl	80019cc <GetBatteryLevel>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	1418      	asrs	r0, r3, #16
 800a504:	4b3b      	ldr	r3, [pc, #236]	; (800a5f4 <SendTxData+0x254>)
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50a:	1c59      	adds	r1, r3, #1
 800a50c:	6379      	str	r1, [r7, #52]	; 0x34
 800a50e:	4413      	add	r3, r2
 800a510:	b2c2      	uxtb	r2, r0
 800a512:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a516:	1218      	asrs	r0, r3, #8
 800a518:	4b36      	ldr	r3, [pc, #216]	; (800a5f4 <SendTxData+0x254>)
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a51e:	1c59      	adds	r1, r3, #1
 800a520:	6379      	str	r1, [r7, #52]	; 0x34
 800a522:	4413      	add	r3, r2
 800a524:	b2c2      	uxtb	r2, r0
 800a526:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a528:	4b32      	ldr	r3, [pc, #200]	; (800a5f4 <SendTxData+0x254>)
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a52e:	1c59      	adds	r1, r3, #1
 800a530:	6379      	str	r1, [r7, #52]	; 0x34
 800a532:	4413      	add	r3, r2
 800a534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53c:	1418      	asrs	r0, r3, #16
 800a53e:	4b2d      	ldr	r3, [pc, #180]	; (800a5f4 <SendTxData+0x254>)
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a544:	1c59      	adds	r1, r3, #1
 800a546:	6379      	str	r1, [r7, #52]	; 0x34
 800a548:	4413      	add	r3, r2
 800a54a:	b2c2      	uxtb	r2, r0
 800a54c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a550:	1218      	asrs	r0, r3, #8
 800a552:	4b28      	ldr	r3, [pc, #160]	; (800a5f4 <SendTxData+0x254>)
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a558:	1c59      	adds	r1, r3, #1
 800a55a:	6379      	str	r1, [r7, #52]	; 0x34
 800a55c:	4413      	add	r3, r2
 800a55e:	b2c2      	uxtb	r2, r0
 800a560:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a562:	4b24      	ldr	r3, [pc, #144]	; (800a5f4 <SendTxData+0x254>)
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a568:	1c59      	adds	r1, r3, #1
 800a56a:	6379      	str	r1, [r7, #52]	; 0x34
 800a56c:	4413      	add	r3, r2
 800a56e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a570:	b2d2      	uxtb	r2, r2
 800a572:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a576:	0a1b      	lsrs	r3, r3, #8
 800a578:	b298      	uxth	r0, r3
 800a57a:	4b1e      	ldr	r3, [pc, #120]	; (800a5f4 <SendTxData+0x254>)
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a580:	1c59      	adds	r1, r3, #1
 800a582:	6379      	str	r1, [r7, #52]	; 0x34
 800a584:	4413      	add	r3, r2
 800a586:	b2c2      	uxtb	r2, r0
 800a588:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a58a:	4b1a      	ldr	r3, [pc, #104]	; (800a5f4 <SendTxData+0x254>)
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a590:	1c59      	adds	r1, r3, #1
 800a592:	6379      	str	r1, [r7, #52]	; 0x34
 800a594:	4413      	add	r3, r2
 800a596:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a598:	b2d2      	uxtb	r2, r2
 800a59a:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	4b14      	ldr	r3, [pc, #80]	; (800a5f4 <SendTxData+0x254>)
 800a5a2:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a5a4:	1d3a      	adds	r2, r7, #4
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	4812      	ldr	r0, [pc, #72]	; (800a5f4 <SendTxData+0x254>)
 800a5ac:	f001 ff7a 	bl	800c4a4 <LmHandlerSend>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d106      	bne.n	800a5c4 <SendTxData+0x224>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a5b6:	4b12      	ldr	r3, [pc, #72]	; (800a600 <SendTxData+0x260>)
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	2001      	movs	r0, #1
 800a5be:	f00f ffa7 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800a5c2:	e00e      	b.n	800a5e2 <SendTxData+0x242>
  else if (nextTxIn > 0)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00b      	beq.n	800a5e2 <SendTxData+0x242>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a0d      	ldr	r2, [pc, #52]	; (800a604 <SendTxData+0x264>)
 800a5ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d2:	099b      	lsrs	r3, r3, #6
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	4b0c      	ldr	r3, [pc, #48]	; (800a608 <SendTxData+0x268>)
 800a5d8:	2201      	movs	r2, #1
 800a5da:	2100      	movs	r1, #0
 800a5dc:	2001      	movs	r0, #1
 800a5de:	f00f ff97 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
}
 800a5e2:	bf00      	nop
 800a5e4:	373c      	adds	r7, #60	; 0x3c
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd90      	pop	{r4, r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	42c80000 	.word	0x42c80000
 800a5f0:	41200000 	.word	0x41200000
 800a5f4:	20000080 	.word	0x20000080
 800a5f8:	20000266 	.word	0x20000266
 800a5fc:	20000070 	.word	0x20000070
 800a600:	0801ad38 	.word	0x0801ad38
 800a604:	10624dd3 	.word	0x10624dd3
 800a608:	0801ad48 	.word	0x0801ad48

0800a60c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a614:	2100      	movs	r1, #0
 800a616:	2002      	movs	r0, #2
 800a618:	f00f fc58 	bl	8019ecc <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a61c:	4803      	ldr	r0, [pc, #12]	; (800a62c <OnTxTimerEvent+0x20>)
 800a61e:	f00f fcff 	bl	801a020 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a622:	bf00      	nop
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	2000015c 	.word	0x2000015c

0800a630 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 800a638:	2001      	movs	r0, #1
 800a63a:	f7f8 f917 	bl	800286c <BSP_LED_Off>
}
 800a63e:	bf00      	nop
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b082      	sub	sp, #8
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 800a64e:	2000      	movs	r0, #0
 800a650:	f7f8 f90c 	bl	800286c <BSP_LED_Off>
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 800a664:	2002      	movs	r0, #2
 800a666:	f7f8 f925 	bl	80028b4 <BSP_LED_Toggle>
}
 800a66a:	bf00      	nop
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af04      	add	r7, sp, #16
 800a67a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d044      	beq.n	800a70c <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d040      	beq.n	800a70c <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 800a68a:	2001      	movs	r0, #1
 800a68c:	f7f8 f8ca 	bl	8002824 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 800a690:	4820      	ldr	r0, [pc, #128]	; (800a714 <OnTxData+0xa0>)
 800a692:	f00f fcc5 	bl	801a020 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a696:	4b20      	ldr	r3, [pc, #128]	; (800a718 <OnTxData+0xa4>)
 800a698:	2200      	movs	r2, #0
 800a69a:	2100      	movs	r1, #0
 800a69c:	2002      	movs	r0, #2
 800a69e:	f00f ff37 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	7b12      	ldrb	r2, [r2, #12]
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a6b2:	4610      	mov	r0, r2
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800a6ba:	9203      	str	r2, [sp, #12]
 800a6bc:	9002      	str	r0, [sp, #8]
 800a6be:	9101      	str	r1, [sp, #4]
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	4b16      	ldr	r3, [pc, #88]	; (800a71c <OnTxData+0xa8>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	2003      	movs	r0, #3
 800a6ca:	f00f ff21 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a6ce:	4b14      	ldr	r3, [pc, #80]	; (800a720 <OnTxData+0xac>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	2003      	movs	r0, #3
 800a6d6:	f00f ff1b 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	789b      	ldrb	r3, [r3, #2]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d10e      	bne.n	800a700 <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	78db      	ldrb	r3, [r3, #3]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <OnTxData+0x7a>
 800a6ea:	4b0e      	ldr	r3, [pc, #56]	; (800a724 <OnTxData+0xb0>)
 800a6ec:	e000      	b.n	800a6f0 <OnTxData+0x7c>
 800a6ee:	4b0e      	ldr	r3, [pc, #56]	; (800a728 <OnTxData+0xb4>)
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	4b0e      	ldr	r3, [pc, #56]	; (800a72c <OnTxData+0xb8>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	2003      	movs	r0, #3
 800a6fa:	f00f ff09 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a6fe:	e005      	b.n	800a70c <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <OnTxData+0xbc>)
 800a702:	2200      	movs	r2, #0
 800a704:	2100      	movs	r1, #0
 800a706:	2003      	movs	r0, #3
 800a708:	f00f ff02 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
}
 800a70c:	bf00      	nop
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	20000268 	.word	0x20000268
 800a718:	0801ad68 	.word	0x0801ad68
 800a71c:	0801ad9c 	.word	0x0801ad9c
 800a720:	0801add0 	.word	0x0801add0
 800a724:	0801ade0 	.word	0x0801ade0
 800a728:	0801ade4 	.word	0x0801ade4
 800a72c:	0801adec 	.word	0x0801adec
 800a730:	0801ae00 	.word	0x0801ae00

0800a734 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d028      	beq.n	800a794 <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d11d      	bne.n	800a788 <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800a74c:	4813      	ldr	r0, [pc, #76]	; (800a79c <OnJoinRequest+0x68>)
 800a74e:	f00f fcd5 	bl	801a0fc <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 800a752:	2002      	movs	r0, #2
 800a754:	f7f8 f88a 	bl	800286c <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a758:	4b11      	ldr	r3, [pc, #68]	; (800a7a0 <OnJoinRequest+0x6c>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	2100      	movs	r1, #0
 800a75e:	2002      	movs	r0, #2
 800a760:	f00f fed6 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	789b      	ldrb	r3, [r3, #2]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d106      	bne.n	800a77a <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a76c:	4b0d      	ldr	r3, [pc, #52]	; (800a7a4 <OnJoinRequest+0x70>)
 800a76e:	2200      	movs	r2, #0
 800a770:	2100      	movs	r1, #0
 800a772:	2002      	movs	r0, #2
 800a774:	f00f fecc 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a778:	e00c      	b.n	800a794 <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a77a:	4b0b      	ldr	r3, [pc, #44]	; (800a7a8 <OnJoinRequest+0x74>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	2100      	movs	r1, #0
 800a780:	2002      	movs	r0, #2
 800a782:	f00f fec5 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
}
 800a786:	e005      	b.n	800a794 <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a788:	4b08      	ldr	r3, [pc, #32]	; (800a7ac <OnJoinRequest+0x78>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	2100      	movs	r1, #0
 800a78e:	2002      	movs	r0, #2
 800a790:	f00f febe 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	20000298 	.word	0x20000298
 800a7a0:	0801ae10 	.word	0x0801ae10
 800a7a4:	0801ae28 	.word	0x0801ae28
 800a7a8:	0801ae48 	.word	0x0801ae48
 800a7ac:	0801ae68 	.word	0x0801ae68

0800a7b0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	f00f fb88 	bl	8019ecc <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a7bc:	bf00      	nop
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a7c4:	4b15      	ldr	r3, [pc, #84]	; (800a81c <LoraInfo_Init+0x5c>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a7ca:	4b14      	ldr	r3, [pc, #80]	; (800a81c <LoraInfo_Init+0x5c>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a7d0:	4b12      	ldr	r3, [pc, #72]	; (800a81c <LoraInfo_Init+0x5c>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a7d6:	4b11      	ldr	r3, [pc, #68]	; (800a81c <LoraInfo_Init+0x5c>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800a7dc:	4b0f      	ldr	r3, [pc, #60]	; (800a81c <LoraInfo_Init+0x5c>)
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	f043 0320 	orr.w	r3, r3, #32
 800a7e4:	4a0d      	ldr	r2, [pc, #52]	; (800a81c <LoraInfo_Init+0x5c>)
 800a7e6:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a7e8:	4b0c      	ldr	r3, [pc, #48]	; (800a81c <LoraInfo_Init+0x5c>)
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10c      	bne.n	800a80a <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a7f0:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <LoraInfo_Init+0x60>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	f00f fe8a 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a7fc:	bf00      	nop
 800a7fe:	f00f fe75 	bl	801a4ec <UTIL_ADV_TRACE_IsBufferEmpty>
 800a802:	4603      	mov	r3, r0
 800a804:	2b01      	cmp	r3, #1
 800a806:	d1fa      	bne.n	800a7fe <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a808:	e7fe      	b.n	800a808 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a80a:	4b04      	ldr	r3, [pc, #16]	; (800a81c <LoraInfo_Init+0x5c>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a810:	4b02      	ldr	r3, [pc, #8]	; (800a81c <LoraInfo_Init+0x5c>)
 800a812:	2203      	movs	r2, #3
 800a814:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a816:	bf00      	nop
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	200002b0 	.word	0x200002b0
 800a820:	0801aec0 	.word	0x0801aec0

0800a824 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a824:	b480      	push	{r7}
 800a826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a828:	4b02      	ldr	r3, [pc, #8]	; (800a834 <LoraInfo_GetPtr+0x10>)
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bc80      	pop	{r7}
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	200002b0 	.word	0x200002b0

0800a838 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800a83c:	f7f8 f8ef 	bl	8002a1e <BSP_RADIO_Init>
 800a840:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a842:	4618      	mov	r0, r3
 800a844:	bd80      	pop	{r7, pc}

0800a846 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b082      	sub	sp, #8
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	4603      	mov	r3, r0
 800a84e:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a850:	79fb      	ldrb	r3, [r7, #7]
 800a852:	4618      	mov	r0, r3
 800a854:	f7f8 f914 	bl	8002a80 <BSP_RADIO_ConfigRFSwitch>
 800a858:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800a866:	f7f8 f959 	bl	8002b1c <BSP_RADIO_GetTxConfig>
 800a86a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800a874:	f7f8 f959 	bl	8002b2a <BSP_RADIO_IsTCXO>
 800a878:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800a882:	f7f8 f959 	bl	8002b38 <BSP_RADIO_IsDCDC>
 800a886:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a888:	4618      	mov	r0, r3
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	33f1      	adds	r3, #241	; 0xf1
 800a898:	2210      	movs	r2, #16
 800a89a:	2100      	movs	r1, #0
 800a89c:	4618      	mov	r0, r3
 800a89e:	f00b fd57 	bl	8016350 <memset1>
    ctx->M_n = 0;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	22f0      	movs	r2, #240	; 0xf0
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f00b fd4d 	bl	8016350 <memset1>
}
 800a8b6:	bf00      	nop
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	2110      	movs	r1, #16
 800a8ce:	6838      	ldr	r0, [r7, #0]
 800a8d0:	f000 fe60 	bl	800b594 <lorawan_aes_set_key>
}
 800a8d4:	bf00      	nop
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08c      	sub	sp, #48	; 0x30
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 80a1 	beq.w	800aa36 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a8fa:	f1c3 0310 	rsb	r3, r3, #16
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	4293      	cmp	r3, r2
 800a902:	bf28      	it	cs
 800a904:	4613      	movcs	r3, r2
 800a906:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a914:	4413      	add	r3, r2
 800a916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a918:	b292      	uxth	r2, r2
 800a91a:	68b9      	ldr	r1, [r7, #8]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f00b fcdc 	bl	80162da <memcpy1>
        ctx->M_n += mlen;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	441a      	add	r2, r3
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a938:	2b0f      	cmp	r3, #15
 800a93a:	f240 808d 	bls.w	800aa58 <AES_CMAC_Update+0x17c>
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	429a      	cmp	r2, r3
 800a944:	f000 8088 	beq.w	800aa58 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800a948:	2300      	movs	r3, #0
 800a94a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a94c:	e015      	b.n	800a97a <AES_CMAC_Update+0x9e>
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a952:	4413      	add	r3, r2
 800a954:	33f1      	adds	r3, #241	; 0xf1
 800a956:	781a      	ldrb	r2, [r3, #0]
 800a958:	68f9      	ldr	r1, [r7, #12]
 800a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95c:	440b      	add	r3, r1
 800a95e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	4053      	eors	r3, r2
 800a966:	b2d9      	uxtb	r1, r3
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96c:	4413      	add	r3, r2
 800a96e:	33f1      	adds	r3, #241	; 0xf1
 800a970:	460a      	mov	r2, r1
 800a972:	701a      	strb	r2, [r3, #0]
 800a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a976:	3301      	adds	r3, #1
 800a978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97c:	2b0f      	cmp	r3, #15
 800a97e:	dde6      	ble.n	800a94e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a986:	f107 0314 	add.w	r3, r7, #20
 800a98a:	2210      	movs	r2, #16
 800a98c:	4618      	mov	r0, r3
 800a98e:	f00b fca4 	bl	80162da <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	f107 0114 	add.w	r1, r7, #20
 800a998:	f107 0314 	add.w	r3, r7, #20
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 fed7 	bl	800b750 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	33f1      	adds	r3, #241	; 0xf1
 800a9a6:	f107 0114 	add.w	r1, r7, #20
 800a9aa:	2210      	movs	r2, #16
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f00b fc94 	bl	80162da <memcpy1>

        data += mlen;
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	4413      	add	r3, r2
 800a9b8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a9c2:	e038      	b.n	800aa36 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9c8:	e013      	b.n	800a9f2 <AES_CMAC_Update+0x116>
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ce:	4413      	add	r3, r2
 800a9d0:	33f1      	adds	r3, #241	; 0xf1
 800a9d2:	781a      	ldrb	r2, [r3, #0]
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	68b9      	ldr	r1, [r7, #8]
 800a9d8:	440b      	add	r3, r1
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	4053      	eors	r3, r2
 800a9de:	b2d9      	uxtb	r1, r3
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e4:	4413      	add	r3, r2
 800a9e6:	33f1      	adds	r3, #241	; 0xf1
 800a9e8:	460a      	mov	r2, r1
 800a9ea:	701a      	strb	r2, [r3, #0]
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f4:	2b0f      	cmp	r3, #15
 800a9f6:	dde8      	ble.n	800a9ca <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a9fe:	f107 0314 	add.w	r3, r7, #20
 800aa02:	2210      	movs	r2, #16
 800aa04:	4618      	mov	r0, r3
 800aa06:	f00b fc68 	bl	80162da <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	f107 0114 	add.w	r1, r7, #20
 800aa10:	f107 0314 	add.w	r3, r7, #20
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 fe9b 	bl	800b750 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	33f1      	adds	r3, #241	; 0xf1
 800aa1e:	f107 0114 	add.w	r1, r7, #20
 800aa22:	2210      	movs	r2, #16
 800aa24:	4618      	mov	r0, r3
 800aa26:	f00b fc58 	bl	80162da <memcpy1>

        data += 16;
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	3310      	adds	r3, #16
 800aa2e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	3b10      	subs	r3, #16
 800aa34:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2b10      	cmp	r3, #16
 800aa3a:	d8c3      	bhi.n	800a9c4 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	b292      	uxth	r2, r2
 800aa46:	68b9      	ldr	r1, [r7, #8]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f00b fc46 	bl	80162da <memcpy1>
    ctx->M_n = len;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800aa56:	e000      	b.n	800aa5a <AES_CMAC_Update+0x17e>
            return;
 800aa58:	bf00      	nop
}
 800aa5a:	3730      	adds	r7, #48	; 0x30
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b092      	sub	sp, #72	; 0x48
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800aa6a:	f107 031c 	add.w	r3, r7, #28
 800aa6e:	2210      	movs	r2, #16
 800aa70:	2100      	movs	r1, #0
 800aa72:	4618      	mov	r0, r3
 800aa74:	f00b fc6c 	bl	8016350 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800aa78:	683a      	ldr	r2, [r7, #0]
 800aa7a:	f107 011c 	add.w	r1, r7, #28
 800aa7e:	f107 031c 	add.w	r3, r7, #28
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 fe64 	bl	800b750 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800aa88:	7f3b      	ldrb	r3, [r7, #28]
 800aa8a:	b25b      	sxtb	r3, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	da31      	bge.n	800aaf4 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800aa90:	2300      	movs	r3, #0
 800aa92:	647b      	str	r3, [r7, #68]	; 0x44
 800aa94:	e01c      	b.n	800aad0 <AES_CMAC_Final+0x70>
 800aa96:	f107 021c 	add.w	r2, r7, #28
 800aa9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa9c:	4413      	add	r3, r2
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	005b      	lsls	r3, r3, #1
 800aaa2:	b25a      	sxtb	r2, r3
 800aaa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800aaac:	440b      	add	r3, r1
 800aaae:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aab2:	09db      	lsrs	r3, r3, #7
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	b25b      	sxtb	r3, r3
 800aab8:	4313      	orrs	r3, r2
 800aaba:	b25b      	sxtb	r3, r3
 800aabc:	b2d9      	uxtb	r1, r3
 800aabe:	f107 021c 	add.w	r2, r7, #28
 800aac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aac4:	4413      	add	r3, r2
 800aac6:	460a      	mov	r2, r1
 800aac8:	701a      	strb	r2, [r3, #0]
 800aaca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aacc:	3301      	adds	r3, #1
 800aace:	647b      	str	r3, [r7, #68]	; 0x44
 800aad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aad2:	2b0e      	cmp	r3, #14
 800aad4:	dddf      	ble.n	800aa96 <AES_CMAC_Final+0x36>
 800aad6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aada:	005b      	lsls	r3, r3, #1
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800aae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aae6:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800aaea:	43db      	mvns	r3, r3
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaf2:	e028      	b.n	800ab46 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	643b      	str	r3, [r7, #64]	; 0x40
 800aaf8:	e01c      	b.n	800ab34 <AES_CMAC_Final+0xd4>
 800aafa:	f107 021c 	add.w	r2, r7, #28
 800aafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab00:	4413      	add	r3, r2
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	005b      	lsls	r3, r3, #1
 800ab06:	b25a      	sxtb	r2, r3
 800ab08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ab10:	440b      	add	r3, r1
 800ab12:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ab16:	09db      	lsrs	r3, r3, #7
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	b25b      	sxtb	r3, r3
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	b25b      	sxtb	r3, r3
 800ab20:	b2d9      	uxtb	r1, r3
 800ab22:	f107 021c 	add.w	r2, r7, #28
 800ab26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab28:	4413      	add	r3, r2
 800ab2a:	460a      	mov	r2, r1
 800ab2c:	701a      	strb	r2, [r3, #0]
 800ab2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab30:	3301      	adds	r3, #1
 800ab32:	643b      	str	r3, [r7, #64]	; 0x40
 800ab34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab36:	2b0e      	cmp	r3, #14
 800ab38:	dddf      	ble.n	800aafa <AES_CMAC_Final+0x9a>
 800ab3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ab4c:	2b10      	cmp	r3, #16
 800ab4e:	d11d      	bne.n	800ab8c <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800ab50:	2300      	movs	r3, #0
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab54:	e016      	b.n	800ab84 <AES_CMAC_Final+0x124>
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ab60:	781a      	ldrb	r2, [r3, #0]
 800ab62:	f107 011c 	add.w	r1, r7, #28
 800ab66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab68:	440b      	add	r3, r1
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	4053      	eors	r3, r2
 800ab6e:	b2d9      	uxtb	r1, r3
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab74:	4413      	add	r3, r2
 800ab76:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ab7a:	460a      	mov	r2, r1
 800ab7c:	701a      	strb	r2, [r3, #0]
 800ab7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab80:	3301      	adds	r3, #1
 800ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab86:	2b0f      	cmp	r3, #15
 800ab88:	dde5      	ble.n	800ab56 <AES_CMAC_Final+0xf6>
 800ab8a:	e098      	b.n	800acbe <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800ab8c:	7f3b      	ldrb	r3, [r7, #28]
 800ab8e:	b25b      	sxtb	r3, r3
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	da31      	bge.n	800abf8 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800ab94:	2300      	movs	r3, #0
 800ab96:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab98:	e01c      	b.n	800abd4 <AES_CMAC_Final+0x174>
 800ab9a:	f107 021c 	add.w	r2, r7, #28
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba0:	4413      	add	r3, r2
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	b25a      	sxtb	r2, r3
 800aba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abaa:	3301      	adds	r3, #1
 800abac:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800abb0:	440b      	add	r3, r1
 800abb2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800abb6:	09db      	lsrs	r3, r3, #7
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	b25b      	sxtb	r3, r3
 800abbc:	4313      	orrs	r3, r2
 800abbe:	b25b      	sxtb	r3, r3
 800abc0:	b2d9      	uxtb	r1, r3
 800abc2:	f107 021c 	add.w	r2, r7, #28
 800abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc8:	4413      	add	r3, r2
 800abca:	460a      	mov	r2, r1
 800abcc:	701a      	strb	r2, [r3, #0]
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	3301      	adds	r3, #1
 800abd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800abd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd6:	2b0e      	cmp	r3, #14
 800abd8:	dddf      	ble.n	800ab9a <AES_CMAC_Final+0x13a>
 800abda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abde:	005b      	lsls	r3, r3, #1
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800abe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abea:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800abee:	43db      	mvns	r3, r3
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abf6:	e028      	b.n	800ac4a <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800abf8:	2300      	movs	r3, #0
 800abfa:	637b      	str	r3, [r7, #52]	; 0x34
 800abfc:	e01c      	b.n	800ac38 <AES_CMAC_Final+0x1d8>
 800abfe:	f107 021c 	add.w	r2, r7, #28
 800ac02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac04:	4413      	add	r3, r2
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	005b      	lsls	r3, r3, #1
 800ac0a:	b25a      	sxtb	r2, r3
 800ac0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0e:	3301      	adds	r3, #1
 800ac10:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ac14:	440b      	add	r3, r1
 800ac16:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ac1a:	09db      	lsrs	r3, r3, #7
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	b25b      	sxtb	r3, r3
 800ac20:	4313      	orrs	r3, r2
 800ac22:	b25b      	sxtb	r3, r3
 800ac24:	b2d9      	uxtb	r1, r3
 800ac26:	f107 021c 	add.w	r2, r7, #28
 800ac2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac2c:	4413      	add	r3, r2
 800ac2e:	460a      	mov	r2, r1
 800ac30:	701a      	strb	r2, [r3, #0]
 800ac32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac34:	3301      	adds	r3, #1
 800ac36:	637b      	str	r3, [r7, #52]	; 0x34
 800ac38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3a:	2b0e      	cmp	r3, #14
 800ac3c:	dddf      	ble.n	800abfe <AES_CMAC_Final+0x19e>
 800ac3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac42:	005b      	lsls	r3, r3, #1
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	4413      	add	r3, r2
 800ac54:	2280      	movs	r2, #128	; 0x80
 800ac56:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ac5a:	e007      	b.n	800ac6c <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	4413      	add	r3, r2
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ac80:	2b0f      	cmp	r3, #15
 800ac82:	d9eb      	bls.n	800ac5c <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800ac84:	2300      	movs	r3, #0
 800ac86:	633b      	str	r3, [r7, #48]	; 0x30
 800ac88:	e016      	b.n	800acb8 <AES_CMAC_Final+0x258>
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8e:	4413      	add	r3, r2
 800ac90:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ac94:	781a      	ldrb	r2, [r3, #0]
 800ac96:	f107 011c 	add.w	r1, r7, #28
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	440b      	add	r3, r1
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	4053      	eors	r3, r2
 800aca2:	b2d9      	uxtb	r1, r3
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca8:	4413      	add	r3, r2
 800acaa:	f203 1301 	addw	r3, r3, #257	; 0x101
 800acae:	460a      	mov	r2, r1
 800acb0:	701a      	strb	r2, [r3, #0]
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	3301      	adds	r3, #1
 800acb6:	633b      	str	r3, [r7, #48]	; 0x30
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	2b0f      	cmp	r3, #15
 800acbc:	dde5      	ble.n	800ac8a <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800acbe:	2300      	movs	r3, #0
 800acc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acc2:	e015      	b.n	800acf0 <AES_CMAC_Final+0x290>
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	4413      	add	r3, r2
 800acca:	33f1      	adds	r3, #241	; 0xf1
 800accc:	781a      	ldrb	r2, [r3, #0]
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd2:	440b      	add	r3, r1
 800acd4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	4053      	eors	r3, r2
 800acdc:	b2d9      	uxtb	r1, r3
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace2:	4413      	add	r3, r2
 800ace4:	33f1      	adds	r3, #241	; 0xf1
 800ace6:	460a      	mov	r2, r1
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acec:	3301      	adds	r3, #1
 800acee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf2:	2b0f      	cmp	r3, #15
 800acf4:	dde6      	ble.n	800acc4 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800acfc:	f107 030c 	add.w	r3, r7, #12
 800ad00:	2210      	movs	r2, #16
 800ad02:	4618      	mov	r0, r3
 800ad04:	f00b fae9 	bl	80162da <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ad08:	683a      	ldr	r2, [r7, #0]
 800ad0a:	f107 030c 	add.w	r3, r7, #12
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 fd1d 	bl	800b750 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800ad16:	f107 031c 	add.w	r3, r7, #28
 800ad1a:	2210      	movs	r2, #16
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f00b fb16 	bl	8016350 <memset1>
}
 800ad24:	bf00      	nop
 800ad26:	3748      	adds	r7, #72	; 0x48
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	781a      	ldrb	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3301      	adds	r3, #1
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	7852      	ldrb	r2, [r2, #1]
 800ad46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	3302      	adds	r3, #2
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	7892      	ldrb	r2, [r2, #2]
 800ad50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	3303      	adds	r3, #3
 800ad56:	683a      	ldr	r2, [r7, #0]
 800ad58:	78d2      	ldrb	r2, [r2, #3]
 800ad5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	683a      	ldr	r2, [r7, #0]
 800ad62:	7912      	ldrb	r2, [r2, #4]
 800ad64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	3305      	adds	r3, #5
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	7952      	ldrb	r2, [r2, #5]
 800ad6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	3306      	adds	r3, #6
 800ad74:	683a      	ldr	r2, [r7, #0]
 800ad76:	7992      	ldrb	r2, [r2, #6]
 800ad78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3307      	adds	r3, #7
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	79d2      	ldrb	r2, [r2, #7]
 800ad82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3308      	adds	r3, #8
 800ad88:	683a      	ldr	r2, [r7, #0]
 800ad8a:	7a12      	ldrb	r2, [r2, #8]
 800ad8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	3309      	adds	r3, #9
 800ad92:	683a      	ldr	r2, [r7, #0]
 800ad94:	7a52      	ldrb	r2, [r2, #9]
 800ad96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	330a      	adds	r3, #10
 800ad9c:	683a      	ldr	r2, [r7, #0]
 800ad9e:	7a92      	ldrb	r2, [r2, #10]
 800ada0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	330b      	adds	r3, #11
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	7ad2      	ldrb	r2, [r2, #11]
 800adaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	330c      	adds	r3, #12
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	7b12      	ldrb	r2, [r2, #12]
 800adb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	330d      	adds	r3, #13
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	7b52      	ldrb	r2, [r2, #13]
 800adbe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	330e      	adds	r3, #14
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	7b92      	ldrb	r2, [r2, #14]
 800adc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	330f      	adds	r3, #15
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	7bd2      	ldrb	r2, [r2, #15]
 800add2:	701a      	strb	r2, [r3, #0]
#endif
}
 800add4:	bf00      	nop
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	bc80      	pop	{r7}
 800addc:	4770      	bx	lr

0800adde <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800adde:	b480      	push	{r7}
 800ade0:	b085      	sub	sp, #20
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	60f8      	str	r0, [r7, #12]
 800ade6:	60b9      	str	r1, [r7, #8]
 800ade8:	4613      	mov	r3, r2
 800adea:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800adec:	e007      	b.n	800adfe <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	1c53      	adds	r3, r2, #1
 800adf2:	60bb      	str	r3, [r7, #8]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	1c59      	adds	r1, r3, #1
 800adf8:	60f9      	str	r1, [r7, #12]
 800adfa:	7812      	ldrb	r2, [r2, #0]
 800adfc:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800adfe:	79fb      	ldrb	r3, [r7, #7]
 800ae00:	1e5a      	subs	r2, r3, #1
 800ae02:	71fa      	strb	r2, [r7, #7]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1f2      	bne.n	800adee <copy_block_nn+0x10>
}
 800ae08:	bf00      	nop
 800ae0a:	bf00      	nop
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bc80      	pop	{r7}
 800ae12:	4770      	bx	lr

0800ae14 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	4053      	eors	r3, r2
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3301      	adds	r3, #1
 800ae32:	7819      	ldrb	r1, [r3, #0]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	3301      	adds	r3, #1
 800ae38:	781a      	ldrb	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	404a      	eors	r2, r1
 800ae40:	b2d2      	uxtb	r2, r2
 800ae42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3302      	adds	r3, #2
 800ae48:	7819      	ldrb	r1, [r3, #0]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	3302      	adds	r3, #2
 800ae4e:	781a      	ldrb	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	3302      	adds	r3, #2
 800ae54:	404a      	eors	r2, r1
 800ae56:	b2d2      	uxtb	r2, r2
 800ae58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3303      	adds	r3, #3
 800ae5e:	7819      	ldrb	r1, [r3, #0]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	3303      	adds	r3, #3
 800ae64:	781a      	ldrb	r2, [r3, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3303      	adds	r3, #3
 800ae6a:	404a      	eors	r2, r1
 800ae6c:	b2d2      	uxtb	r2, r2
 800ae6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3304      	adds	r3, #4
 800ae74:	7819      	ldrb	r1, [r3, #0]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	781a      	ldrb	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	3304      	adds	r3, #4
 800ae80:	404a      	eors	r2, r1
 800ae82:	b2d2      	uxtb	r2, r2
 800ae84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	3305      	adds	r3, #5
 800ae8a:	7819      	ldrb	r1, [r3, #0]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	3305      	adds	r3, #5
 800ae90:	781a      	ldrb	r2, [r3, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	3305      	adds	r3, #5
 800ae96:	404a      	eors	r2, r1
 800ae98:	b2d2      	uxtb	r2, r2
 800ae9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3306      	adds	r3, #6
 800aea0:	7819      	ldrb	r1, [r3, #0]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	3306      	adds	r3, #6
 800aea6:	781a      	ldrb	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3306      	adds	r3, #6
 800aeac:	404a      	eors	r2, r1
 800aeae:	b2d2      	uxtb	r2, r2
 800aeb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	3307      	adds	r3, #7
 800aeb6:	7819      	ldrb	r1, [r3, #0]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	3307      	adds	r3, #7
 800aebc:	781a      	ldrb	r2, [r3, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3307      	adds	r3, #7
 800aec2:	404a      	eors	r2, r1
 800aec4:	b2d2      	uxtb	r2, r2
 800aec6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3308      	adds	r3, #8
 800aecc:	7819      	ldrb	r1, [r3, #0]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	3308      	adds	r3, #8
 800aed2:	781a      	ldrb	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	3308      	adds	r3, #8
 800aed8:	404a      	eors	r2, r1
 800aeda:	b2d2      	uxtb	r2, r2
 800aedc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3309      	adds	r3, #9
 800aee2:	7819      	ldrb	r1, [r3, #0]
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	3309      	adds	r3, #9
 800aee8:	781a      	ldrb	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	3309      	adds	r3, #9
 800aeee:	404a      	eors	r2, r1
 800aef0:	b2d2      	uxtb	r2, r2
 800aef2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	330a      	adds	r3, #10
 800aef8:	7819      	ldrb	r1, [r3, #0]
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	330a      	adds	r3, #10
 800aefe:	781a      	ldrb	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	330a      	adds	r3, #10
 800af04:	404a      	eors	r2, r1
 800af06:	b2d2      	uxtb	r2, r2
 800af08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	330b      	adds	r3, #11
 800af0e:	7819      	ldrb	r1, [r3, #0]
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	330b      	adds	r3, #11
 800af14:	781a      	ldrb	r2, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	330b      	adds	r3, #11
 800af1a:	404a      	eors	r2, r1
 800af1c:	b2d2      	uxtb	r2, r2
 800af1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	330c      	adds	r3, #12
 800af24:	7819      	ldrb	r1, [r3, #0]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	330c      	adds	r3, #12
 800af2a:	781a      	ldrb	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	330c      	adds	r3, #12
 800af30:	404a      	eors	r2, r1
 800af32:	b2d2      	uxtb	r2, r2
 800af34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	330d      	adds	r3, #13
 800af3a:	7819      	ldrb	r1, [r3, #0]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	330d      	adds	r3, #13
 800af40:	781a      	ldrb	r2, [r3, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	330d      	adds	r3, #13
 800af46:	404a      	eors	r2, r1
 800af48:	b2d2      	uxtb	r2, r2
 800af4a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	330e      	adds	r3, #14
 800af50:	7819      	ldrb	r1, [r3, #0]
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	330e      	adds	r3, #14
 800af56:	781a      	ldrb	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	330e      	adds	r3, #14
 800af5c:	404a      	eors	r2, r1
 800af5e:	b2d2      	uxtb	r2, r2
 800af60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	330f      	adds	r3, #15
 800af66:	7819      	ldrb	r1, [r3, #0]
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	330f      	adds	r3, #15
 800af6c:	781a      	ldrb	r2, [r3, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	330f      	adds	r3, #15
 800af72:	404a      	eors	r2, r1
 800af74:	b2d2      	uxtb	r2, r2
 800af76:	701a      	strb	r2, [r3, #0]
#endif
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bc80      	pop	{r7}
 800af80:	4770      	bx	lr

0800af82 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800af82:	b480      	push	{r7}
 800af84:	b085      	sub	sp, #20
 800af86:	af00      	add	r7, sp, #0
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	60b9      	str	r1, [r7, #8]
 800af8c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	781a      	ldrb	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	4053      	eors	r3, r2
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	3301      	adds	r3, #1
 800afa2:	7819      	ldrb	r1, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	3301      	adds	r3, #1
 800afa8:	781a      	ldrb	r2, [r3, #0]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	3301      	adds	r3, #1
 800afae:	404a      	eors	r2, r1
 800afb0:	b2d2      	uxtb	r2, r2
 800afb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	3302      	adds	r3, #2
 800afb8:	7819      	ldrb	r1, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	3302      	adds	r3, #2
 800afbe:	781a      	ldrb	r2, [r3, #0]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	3302      	adds	r3, #2
 800afc4:	404a      	eors	r2, r1
 800afc6:	b2d2      	uxtb	r2, r2
 800afc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	3303      	adds	r3, #3
 800afce:	7819      	ldrb	r1, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3303      	adds	r3, #3
 800afd4:	781a      	ldrb	r2, [r3, #0]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3303      	adds	r3, #3
 800afda:	404a      	eors	r2, r1
 800afdc:	b2d2      	uxtb	r2, r2
 800afde:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	3304      	adds	r3, #4
 800afe4:	7819      	ldrb	r1, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	3304      	adds	r3, #4
 800afea:	781a      	ldrb	r2, [r3, #0]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	3304      	adds	r3, #4
 800aff0:	404a      	eors	r2, r1
 800aff2:	b2d2      	uxtb	r2, r2
 800aff4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	3305      	adds	r3, #5
 800affa:	7819      	ldrb	r1, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3305      	adds	r3, #5
 800b000:	781a      	ldrb	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	3305      	adds	r3, #5
 800b006:	404a      	eors	r2, r1
 800b008:	b2d2      	uxtb	r2, r2
 800b00a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	3306      	adds	r3, #6
 800b010:	7819      	ldrb	r1, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	3306      	adds	r3, #6
 800b016:	781a      	ldrb	r2, [r3, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	3306      	adds	r3, #6
 800b01c:	404a      	eors	r2, r1
 800b01e:	b2d2      	uxtb	r2, r2
 800b020:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	3307      	adds	r3, #7
 800b026:	7819      	ldrb	r1, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	3307      	adds	r3, #7
 800b02c:	781a      	ldrb	r2, [r3, #0]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	3307      	adds	r3, #7
 800b032:	404a      	eors	r2, r1
 800b034:	b2d2      	uxtb	r2, r2
 800b036:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	3308      	adds	r3, #8
 800b03c:	7819      	ldrb	r1, [r3, #0]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	3308      	adds	r3, #8
 800b042:	781a      	ldrb	r2, [r3, #0]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3308      	adds	r3, #8
 800b048:	404a      	eors	r2, r1
 800b04a:	b2d2      	uxtb	r2, r2
 800b04c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	3309      	adds	r3, #9
 800b052:	7819      	ldrb	r1, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3309      	adds	r3, #9
 800b058:	781a      	ldrb	r2, [r3, #0]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	3309      	adds	r3, #9
 800b05e:	404a      	eors	r2, r1
 800b060:	b2d2      	uxtb	r2, r2
 800b062:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	330a      	adds	r3, #10
 800b068:	7819      	ldrb	r1, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	330a      	adds	r3, #10
 800b06e:	781a      	ldrb	r2, [r3, #0]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	330a      	adds	r3, #10
 800b074:	404a      	eors	r2, r1
 800b076:	b2d2      	uxtb	r2, r2
 800b078:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	330b      	adds	r3, #11
 800b07e:	7819      	ldrb	r1, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	330b      	adds	r3, #11
 800b084:	781a      	ldrb	r2, [r3, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	330b      	adds	r3, #11
 800b08a:	404a      	eors	r2, r1
 800b08c:	b2d2      	uxtb	r2, r2
 800b08e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	330c      	adds	r3, #12
 800b094:	7819      	ldrb	r1, [r3, #0]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	330c      	adds	r3, #12
 800b09a:	781a      	ldrb	r2, [r3, #0]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	330c      	adds	r3, #12
 800b0a0:	404a      	eors	r2, r1
 800b0a2:	b2d2      	uxtb	r2, r2
 800b0a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	330d      	adds	r3, #13
 800b0aa:	7819      	ldrb	r1, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	330d      	adds	r3, #13
 800b0b0:	781a      	ldrb	r2, [r3, #0]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	330d      	adds	r3, #13
 800b0b6:	404a      	eors	r2, r1
 800b0b8:	b2d2      	uxtb	r2, r2
 800b0ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	330e      	adds	r3, #14
 800b0c0:	7819      	ldrb	r1, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	330e      	adds	r3, #14
 800b0c6:	781a      	ldrb	r2, [r3, #0]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	330e      	adds	r3, #14
 800b0cc:	404a      	eors	r2, r1
 800b0ce:	b2d2      	uxtb	r2, r2
 800b0d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	330f      	adds	r3, #15
 800b0d6:	7819      	ldrb	r1, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	330f      	adds	r3, #15
 800b0dc:	781a      	ldrb	r2, [r3, #0]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	330f      	adds	r3, #15
 800b0e2:	404a      	eors	r2, r1
 800b0e4:	b2d2      	uxtb	r2, r2
 800b0e6:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b0e8:	bf00      	nop
 800b0ea:	3714      	adds	r7, #20
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bc80      	pop	{r7}
 800b0f0:	4770      	bx	lr

0800b0f2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b082      	sub	sp, #8
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7ff fe88 	bl	800ae14 <xor_block>
}
 800b104:	bf00      	nop
 800b106:	3708      	adds	r7, #8
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	461a      	mov	r2, r3
 800b11a:	4b48      	ldr	r3, [pc, #288]	; (800b23c <shift_sub_rows+0x130>)
 800b11c:	5c9a      	ldrb	r2, [r3, r2]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	701a      	strb	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	3304      	adds	r3, #4
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	4619      	mov	r1, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4a43      	ldr	r2, [pc, #268]	; (800b23c <shift_sub_rows+0x130>)
 800b130:	5c52      	ldrb	r2, [r2, r1]
 800b132:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3308      	adds	r3, #8
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	4619      	mov	r1, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3308      	adds	r3, #8
 800b140:	4a3e      	ldr	r2, [pc, #248]	; (800b23c <shift_sub_rows+0x130>)
 800b142:	5c52      	ldrb	r2, [r2, r1]
 800b144:	701a      	strb	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	330c      	adds	r3, #12
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	4619      	mov	r1, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	330c      	adds	r3, #12
 800b152:	4a3a      	ldr	r2, [pc, #232]	; (800b23c <shift_sub_rows+0x130>)
 800b154:	5c52      	ldrb	r2, [r2, r1]
 800b156:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	785b      	ldrb	r3, [r3, #1]
 800b15c:	73fb      	strb	r3, [r7, #15]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3305      	adds	r3, #5
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	4619      	mov	r1, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	3301      	adds	r3, #1
 800b16a:	4a34      	ldr	r2, [pc, #208]	; (800b23c <shift_sub_rows+0x130>)
 800b16c:	5c52      	ldrb	r2, [r2, r1]
 800b16e:	701a      	strb	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	3309      	adds	r3, #9
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	4619      	mov	r1, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3305      	adds	r3, #5
 800b17c:	4a2f      	ldr	r2, [pc, #188]	; (800b23c <shift_sub_rows+0x130>)
 800b17e:	5c52      	ldrb	r2, [r2, r1]
 800b180:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	330d      	adds	r3, #13
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	4619      	mov	r1, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3309      	adds	r3, #9
 800b18e:	4a2b      	ldr	r2, [pc, #172]	; (800b23c <shift_sub_rows+0x130>)
 800b190:	5c52      	ldrb	r2, [r2, r1]
 800b192:	701a      	strb	r2, [r3, #0]
 800b194:	7bfa      	ldrb	r2, [r7, #15]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	330d      	adds	r3, #13
 800b19a:	4928      	ldr	r1, [pc, #160]	; (800b23c <shift_sub_rows+0x130>)
 800b19c:	5c8a      	ldrb	r2, [r1, r2]
 800b19e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	789b      	ldrb	r3, [r3, #2]
 800b1a4:	73fb      	strb	r3, [r7, #15]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	330a      	adds	r3, #10
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	3302      	adds	r3, #2
 800b1b2:	4a22      	ldr	r2, [pc, #136]	; (800b23c <shift_sub_rows+0x130>)
 800b1b4:	5c52      	ldrb	r2, [r2, r1]
 800b1b6:	701a      	strb	r2, [r3, #0]
 800b1b8:	7bfa      	ldrb	r2, [r7, #15]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	330a      	adds	r3, #10
 800b1be:	491f      	ldr	r1, [pc, #124]	; (800b23c <shift_sub_rows+0x130>)
 800b1c0:	5c8a      	ldrb	r2, [r1, r2]
 800b1c2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	799b      	ldrb	r3, [r3, #6]
 800b1c8:	73fb      	strb	r3, [r7, #15]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	330e      	adds	r3, #14
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	3306      	adds	r3, #6
 800b1d6:	4a19      	ldr	r2, [pc, #100]	; (800b23c <shift_sub_rows+0x130>)
 800b1d8:	5c52      	ldrb	r2, [r2, r1]
 800b1da:	701a      	strb	r2, [r3, #0]
 800b1dc:	7bfa      	ldrb	r2, [r7, #15]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	330e      	adds	r3, #14
 800b1e2:	4916      	ldr	r1, [pc, #88]	; (800b23c <shift_sub_rows+0x130>)
 800b1e4:	5c8a      	ldrb	r2, [r1, r2]
 800b1e6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	7bdb      	ldrb	r3, [r3, #15]
 800b1ec:	73fb      	strb	r3, [r7, #15]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	330b      	adds	r3, #11
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	330f      	adds	r3, #15
 800b1fa:	4a10      	ldr	r2, [pc, #64]	; (800b23c <shift_sub_rows+0x130>)
 800b1fc:	5c52      	ldrb	r2, [r2, r1]
 800b1fe:	701a      	strb	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	3307      	adds	r3, #7
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	4619      	mov	r1, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	330b      	adds	r3, #11
 800b20c:	4a0b      	ldr	r2, [pc, #44]	; (800b23c <shift_sub_rows+0x130>)
 800b20e:	5c52      	ldrb	r2, [r2, r1]
 800b210:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	3303      	adds	r3, #3
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	4619      	mov	r1, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3307      	adds	r3, #7
 800b21e:	4a07      	ldr	r2, [pc, #28]	; (800b23c <shift_sub_rows+0x130>)
 800b220:	5c52      	ldrb	r2, [r2, r1]
 800b222:	701a      	strb	r2, [r3, #0]
 800b224:	7bfa      	ldrb	r2, [r7, #15]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3303      	adds	r3, #3
 800b22a:	4904      	ldr	r1, [pc, #16]	; (800b23c <shift_sub_rows+0x130>)
 800b22c:	5c8a      	ldrb	r2, [r1, r2]
 800b22e:	701a      	strb	r2, [r3, #0]
}
 800b230:	bf00      	nop
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	bc80      	pop	{r7}
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	0801b500 	.word	0x0801b500

0800b240 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b248:	f107 0308 	add.w	r3, r7, #8
 800b24c:	6879      	ldr	r1, [r7, #4]
 800b24e:	4618      	mov	r0, r3
 800b250:	f7ff fd6c 	bl	800ad2c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b254:	7a3b      	ldrb	r3, [r7, #8]
 800b256:	461a      	mov	r2, r3
 800b258:	4b9a      	ldr	r3, [pc, #616]	; (800b4c4 <mix_sub_columns+0x284>)
 800b25a:	5c9a      	ldrb	r2, [r3, r2]
 800b25c:	7b7b      	ldrb	r3, [r7, #13]
 800b25e:	4619      	mov	r1, r3
 800b260:	4b99      	ldr	r3, [pc, #612]	; (800b4c8 <mix_sub_columns+0x288>)
 800b262:	5c5b      	ldrb	r3, [r3, r1]
 800b264:	4053      	eors	r3, r2
 800b266:	b2da      	uxtb	r2, r3
 800b268:	7cbb      	ldrb	r3, [r7, #18]
 800b26a:	4619      	mov	r1, r3
 800b26c:	4b97      	ldr	r3, [pc, #604]	; (800b4cc <mix_sub_columns+0x28c>)
 800b26e:	5c5b      	ldrb	r3, [r3, r1]
 800b270:	4053      	eors	r3, r2
 800b272:	b2da      	uxtb	r2, r3
 800b274:	7dfb      	ldrb	r3, [r7, #23]
 800b276:	4619      	mov	r1, r3
 800b278:	4b94      	ldr	r3, [pc, #592]	; (800b4cc <mix_sub_columns+0x28c>)
 800b27a:	5c5b      	ldrb	r3, [r3, r1]
 800b27c:	4053      	eors	r3, r2
 800b27e:	b2da      	uxtb	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b284:	7a3b      	ldrb	r3, [r7, #8]
 800b286:	461a      	mov	r2, r3
 800b288:	4b90      	ldr	r3, [pc, #576]	; (800b4cc <mix_sub_columns+0x28c>)
 800b28a:	5c9a      	ldrb	r2, [r3, r2]
 800b28c:	7b7b      	ldrb	r3, [r7, #13]
 800b28e:	4619      	mov	r1, r3
 800b290:	4b8c      	ldr	r3, [pc, #560]	; (800b4c4 <mix_sub_columns+0x284>)
 800b292:	5c5b      	ldrb	r3, [r3, r1]
 800b294:	4053      	eors	r3, r2
 800b296:	b2da      	uxtb	r2, r3
 800b298:	7cbb      	ldrb	r3, [r7, #18]
 800b29a:	4619      	mov	r1, r3
 800b29c:	4b8a      	ldr	r3, [pc, #552]	; (800b4c8 <mix_sub_columns+0x288>)
 800b29e:	5c5b      	ldrb	r3, [r3, r1]
 800b2a0:	4053      	eors	r3, r2
 800b2a2:	b2d9      	uxtb	r1, r3
 800b2a4:	7dfb      	ldrb	r3, [r7, #23]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	4b88      	ldr	r3, [pc, #544]	; (800b4cc <mix_sub_columns+0x28c>)
 800b2aa:	5c9a      	ldrb	r2, [r3, r2]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	404a      	eors	r2, r1
 800b2b2:	b2d2      	uxtb	r2, r2
 800b2b4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b2b6:	7a3b      	ldrb	r3, [r7, #8]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	4b84      	ldr	r3, [pc, #528]	; (800b4cc <mix_sub_columns+0x28c>)
 800b2bc:	5c9a      	ldrb	r2, [r3, r2]
 800b2be:	7b7b      	ldrb	r3, [r7, #13]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	4b82      	ldr	r3, [pc, #520]	; (800b4cc <mix_sub_columns+0x28c>)
 800b2c4:	5c5b      	ldrb	r3, [r3, r1]
 800b2c6:	4053      	eors	r3, r2
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	7cbb      	ldrb	r3, [r7, #18]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	4b7d      	ldr	r3, [pc, #500]	; (800b4c4 <mix_sub_columns+0x284>)
 800b2d0:	5c5b      	ldrb	r3, [r3, r1]
 800b2d2:	4053      	eors	r3, r2
 800b2d4:	b2d9      	uxtb	r1, r3
 800b2d6:	7dfb      	ldrb	r3, [r7, #23]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	4b7b      	ldr	r3, [pc, #492]	; (800b4c8 <mix_sub_columns+0x288>)
 800b2dc:	5c9a      	ldrb	r2, [r3, r2]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	3302      	adds	r3, #2
 800b2e2:	404a      	eors	r2, r1
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b2e8:	7a3b      	ldrb	r3, [r7, #8]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	4b76      	ldr	r3, [pc, #472]	; (800b4c8 <mix_sub_columns+0x288>)
 800b2ee:	5c9a      	ldrb	r2, [r3, r2]
 800b2f0:	7b7b      	ldrb	r3, [r7, #13]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	4b75      	ldr	r3, [pc, #468]	; (800b4cc <mix_sub_columns+0x28c>)
 800b2f6:	5c5b      	ldrb	r3, [r3, r1]
 800b2f8:	4053      	eors	r3, r2
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	7cbb      	ldrb	r3, [r7, #18]
 800b2fe:	4619      	mov	r1, r3
 800b300:	4b72      	ldr	r3, [pc, #456]	; (800b4cc <mix_sub_columns+0x28c>)
 800b302:	5c5b      	ldrb	r3, [r3, r1]
 800b304:	4053      	eors	r3, r2
 800b306:	b2d9      	uxtb	r1, r3
 800b308:	7dfb      	ldrb	r3, [r7, #23]
 800b30a:	461a      	mov	r2, r3
 800b30c:	4b6d      	ldr	r3, [pc, #436]	; (800b4c4 <mix_sub_columns+0x284>)
 800b30e:	5c9a      	ldrb	r2, [r3, r2]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	3303      	adds	r3, #3
 800b314:	404a      	eors	r2, r1
 800b316:	b2d2      	uxtb	r2, r2
 800b318:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b31a:	7b3b      	ldrb	r3, [r7, #12]
 800b31c:	461a      	mov	r2, r3
 800b31e:	4b69      	ldr	r3, [pc, #420]	; (800b4c4 <mix_sub_columns+0x284>)
 800b320:	5c9a      	ldrb	r2, [r3, r2]
 800b322:	7c7b      	ldrb	r3, [r7, #17]
 800b324:	4619      	mov	r1, r3
 800b326:	4b68      	ldr	r3, [pc, #416]	; (800b4c8 <mix_sub_columns+0x288>)
 800b328:	5c5b      	ldrb	r3, [r3, r1]
 800b32a:	4053      	eors	r3, r2
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	7dbb      	ldrb	r3, [r7, #22]
 800b330:	4619      	mov	r1, r3
 800b332:	4b66      	ldr	r3, [pc, #408]	; (800b4cc <mix_sub_columns+0x28c>)
 800b334:	5c5b      	ldrb	r3, [r3, r1]
 800b336:	4053      	eors	r3, r2
 800b338:	b2d9      	uxtb	r1, r3
 800b33a:	7afb      	ldrb	r3, [r7, #11]
 800b33c:	461a      	mov	r2, r3
 800b33e:	4b63      	ldr	r3, [pc, #396]	; (800b4cc <mix_sub_columns+0x28c>)
 800b340:	5c9a      	ldrb	r2, [r3, r2]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	3304      	adds	r3, #4
 800b346:	404a      	eors	r2, r1
 800b348:	b2d2      	uxtb	r2, r2
 800b34a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b34c:	7b3b      	ldrb	r3, [r7, #12]
 800b34e:	461a      	mov	r2, r3
 800b350:	4b5e      	ldr	r3, [pc, #376]	; (800b4cc <mix_sub_columns+0x28c>)
 800b352:	5c9a      	ldrb	r2, [r3, r2]
 800b354:	7c7b      	ldrb	r3, [r7, #17]
 800b356:	4619      	mov	r1, r3
 800b358:	4b5a      	ldr	r3, [pc, #360]	; (800b4c4 <mix_sub_columns+0x284>)
 800b35a:	5c5b      	ldrb	r3, [r3, r1]
 800b35c:	4053      	eors	r3, r2
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	7dbb      	ldrb	r3, [r7, #22]
 800b362:	4619      	mov	r1, r3
 800b364:	4b58      	ldr	r3, [pc, #352]	; (800b4c8 <mix_sub_columns+0x288>)
 800b366:	5c5b      	ldrb	r3, [r3, r1]
 800b368:	4053      	eors	r3, r2
 800b36a:	b2d9      	uxtb	r1, r3
 800b36c:	7afb      	ldrb	r3, [r7, #11]
 800b36e:	461a      	mov	r2, r3
 800b370:	4b56      	ldr	r3, [pc, #344]	; (800b4cc <mix_sub_columns+0x28c>)
 800b372:	5c9a      	ldrb	r2, [r3, r2]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3305      	adds	r3, #5
 800b378:	404a      	eors	r2, r1
 800b37a:	b2d2      	uxtb	r2, r2
 800b37c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b37e:	7b3b      	ldrb	r3, [r7, #12]
 800b380:	461a      	mov	r2, r3
 800b382:	4b52      	ldr	r3, [pc, #328]	; (800b4cc <mix_sub_columns+0x28c>)
 800b384:	5c9a      	ldrb	r2, [r3, r2]
 800b386:	7c7b      	ldrb	r3, [r7, #17]
 800b388:	4619      	mov	r1, r3
 800b38a:	4b50      	ldr	r3, [pc, #320]	; (800b4cc <mix_sub_columns+0x28c>)
 800b38c:	5c5b      	ldrb	r3, [r3, r1]
 800b38e:	4053      	eors	r3, r2
 800b390:	b2da      	uxtb	r2, r3
 800b392:	7dbb      	ldrb	r3, [r7, #22]
 800b394:	4619      	mov	r1, r3
 800b396:	4b4b      	ldr	r3, [pc, #300]	; (800b4c4 <mix_sub_columns+0x284>)
 800b398:	5c5b      	ldrb	r3, [r3, r1]
 800b39a:	4053      	eors	r3, r2
 800b39c:	b2d9      	uxtb	r1, r3
 800b39e:	7afb      	ldrb	r3, [r7, #11]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	4b49      	ldr	r3, [pc, #292]	; (800b4c8 <mix_sub_columns+0x288>)
 800b3a4:	5c9a      	ldrb	r2, [r3, r2]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3306      	adds	r3, #6
 800b3aa:	404a      	eors	r2, r1
 800b3ac:	b2d2      	uxtb	r2, r2
 800b3ae:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b3b0:	7b3b      	ldrb	r3, [r7, #12]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	4b44      	ldr	r3, [pc, #272]	; (800b4c8 <mix_sub_columns+0x288>)
 800b3b6:	5c9a      	ldrb	r2, [r3, r2]
 800b3b8:	7c7b      	ldrb	r3, [r7, #17]
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	4b43      	ldr	r3, [pc, #268]	; (800b4cc <mix_sub_columns+0x28c>)
 800b3be:	5c5b      	ldrb	r3, [r3, r1]
 800b3c0:	4053      	eors	r3, r2
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	7dbb      	ldrb	r3, [r7, #22]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4b40      	ldr	r3, [pc, #256]	; (800b4cc <mix_sub_columns+0x28c>)
 800b3ca:	5c5b      	ldrb	r3, [r3, r1]
 800b3cc:	4053      	eors	r3, r2
 800b3ce:	b2d9      	uxtb	r1, r3
 800b3d0:	7afb      	ldrb	r3, [r7, #11]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	4b3b      	ldr	r3, [pc, #236]	; (800b4c4 <mix_sub_columns+0x284>)
 800b3d6:	5c9a      	ldrb	r2, [r3, r2]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3307      	adds	r3, #7
 800b3dc:	404a      	eors	r2, r1
 800b3de:	b2d2      	uxtb	r2, r2
 800b3e0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b3e2:	7c3b      	ldrb	r3, [r7, #16]
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	4b37      	ldr	r3, [pc, #220]	; (800b4c4 <mix_sub_columns+0x284>)
 800b3e8:	5c9a      	ldrb	r2, [r3, r2]
 800b3ea:	7d7b      	ldrb	r3, [r7, #21]
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4b36      	ldr	r3, [pc, #216]	; (800b4c8 <mix_sub_columns+0x288>)
 800b3f0:	5c5b      	ldrb	r3, [r3, r1]
 800b3f2:	4053      	eors	r3, r2
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	7abb      	ldrb	r3, [r7, #10]
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	4b34      	ldr	r3, [pc, #208]	; (800b4cc <mix_sub_columns+0x28c>)
 800b3fc:	5c5b      	ldrb	r3, [r3, r1]
 800b3fe:	4053      	eors	r3, r2
 800b400:	b2d9      	uxtb	r1, r3
 800b402:	7bfb      	ldrb	r3, [r7, #15]
 800b404:	461a      	mov	r2, r3
 800b406:	4b31      	ldr	r3, [pc, #196]	; (800b4cc <mix_sub_columns+0x28c>)
 800b408:	5c9a      	ldrb	r2, [r3, r2]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	3308      	adds	r3, #8
 800b40e:	404a      	eors	r2, r1
 800b410:	b2d2      	uxtb	r2, r2
 800b412:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b414:	7c3b      	ldrb	r3, [r7, #16]
 800b416:	461a      	mov	r2, r3
 800b418:	4b2c      	ldr	r3, [pc, #176]	; (800b4cc <mix_sub_columns+0x28c>)
 800b41a:	5c9a      	ldrb	r2, [r3, r2]
 800b41c:	7d7b      	ldrb	r3, [r7, #21]
 800b41e:	4619      	mov	r1, r3
 800b420:	4b28      	ldr	r3, [pc, #160]	; (800b4c4 <mix_sub_columns+0x284>)
 800b422:	5c5b      	ldrb	r3, [r3, r1]
 800b424:	4053      	eors	r3, r2
 800b426:	b2da      	uxtb	r2, r3
 800b428:	7abb      	ldrb	r3, [r7, #10]
 800b42a:	4619      	mov	r1, r3
 800b42c:	4b26      	ldr	r3, [pc, #152]	; (800b4c8 <mix_sub_columns+0x288>)
 800b42e:	5c5b      	ldrb	r3, [r3, r1]
 800b430:	4053      	eors	r3, r2
 800b432:	b2d9      	uxtb	r1, r3
 800b434:	7bfb      	ldrb	r3, [r7, #15]
 800b436:	461a      	mov	r2, r3
 800b438:	4b24      	ldr	r3, [pc, #144]	; (800b4cc <mix_sub_columns+0x28c>)
 800b43a:	5c9a      	ldrb	r2, [r3, r2]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	3309      	adds	r3, #9
 800b440:	404a      	eors	r2, r1
 800b442:	b2d2      	uxtb	r2, r2
 800b444:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b446:	7c3b      	ldrb	r3, [r7, #16]
 800b448:	461a      	mov	r2, r3
 800b44a:	4b20      	ldr	r3, [pc, #128]	; (800b4cc <mix_sub_columns+0x28c>)
 800b44c:	5c9a      	ldrb	r2, [r3, r2]
 800b44e:	7d7b      	ldrb	r3, [r7, #21]
 800b450:	4619      	mov	r1, r3
 800b452:	4b1e      	ldr	r3, [pc, #120]	; (800b4cc <mix_sub_columns+0x28c>)
 800b454:	5c5b      	ldrb	r3, [r3, r1]
 800b456:	4053      	eors	r3, r2
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	7abb      	ldrb	r3, [r7, #10]
 800b45c:	4619      	mov	r1, r3
 800b45e:	4b19      	ldr	r3, [pc, #100]	; (800b4c4 <mix_sub_columns+0x284>)
 800b460:	5c5b      	ldrb	r3, [r3, r1]
 800b462:	4053      	eors	r3, r2
 800b464:	b2d9      	uxtb	r1, r3
 800b466:	7bfb      	ldrb	r3, [r7, #15]
 800b468:	461a      	mov	r2, r3
 800b46a:	4b17      	ldr	r3, [pc, #92]	; (800b4c8 <mix_sub_columns+0x288>)
 800b46c:	5c9a      	ldrb	r2, [r3, r2]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	330a      	adds	r3, #10
 800b472:	404a      	eors	r2, r1
 800b474:	b2d2      	uxtb	r2, r2
 800b476:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b478:	7c3b      	ldrb	r3, [r7, #16]
 800b47a:	461a      	mov	r2, r3
 800b47c:	4b12      	ldr	r3, [pc, #72]	; (800b4c8 <mix_sub_columns+0x288>)
 800b47e:	5c9a      	ldrb	r2, [r3, r2]
 800b480:	7d7b      	ldrb	r3, [r7, #21]
 800b482:	4619      	mov	r1, r3
 800b484:	4b11      	ldr	r3, [pc, #68]	; (800b4cc <mix_sub_columns+0x28c>)
 800b486:	5c5b      	ldrb	r3, [r3, r1]
 800b488:	4053      	eors	r3, r2
 800b48a:	b2da      	uxtb	r2, r3
 800b48c:	7abb      	ldrb	r3, [r7, #10]
 800b48e:	4619      	mov	r1, r3
 800b490:	4b0e      	ldr	r3, [pc, #56]	; (800b4cc <mix_sub_columns+0x28c>)
 800b492:	5c5b      	ldrb	r3, [r3, r1]
 800b494:	4053      	eors	r3, r2
 800b496:	b2d9      	uxtb	r1, r3
 800b498:	7bfb      	ldrb	r3, [r7, #15]
 800b49a:	461a      	mov	r2, r3
 800b49c:	4b09      	ldr	r3, [pc, #36]	; (800b4c4 <mix_sub_columns+0x284>)
 800b49e:	5c9a      	ldrb	r2, [r3, r2]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	330b      	adds	r3, #11
 800b4a4:	404a      	eors	r2, r1
 800b4a6:	b2d2      	uxtb	r2, r2
 800b4a8:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b4aa:	7d3b      	ldrb	r3, [r7, #20]
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <mix_sub_columns+0x284>)
 800b4b0:	5c9a      	ldrb	r2, [r3, r2]
 800b4b2:	7a7b      	ldrb	r3, [r7, #9]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	4b04      	ldr	r3, [pc, #16]	; (800b4c8 <mix_sub_columns+0x288>)
 800b4b8:	5c5b      	ldrb	r3, [r3, r1]
 800b4ba:	4053      	eors	r3, r2
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	7bbb      	ldrb	r3, [r7, #14]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	e005      	b.n	800b4d0 <mix_sub_columns+0x290>
 800b4c4:	0801b600 	.word	0x0801b600
 800b4c8:	0801b700 	.word	0x0801b700
 800b4cc:	0801b500 	.word	0x0801b500
 800b4d0:	4b2d      	ldr	r3, [pc, #180]	; (800b588 <mix_sub_columns+0x348>)
 800b4d2:	5c5b      	ldrb	r3, [r3, r1]
 800b4d4:	4053      	eors	r3, r2
 800b4d6:	b2d9      	uxtb	r1, r3
 800b4d8:	7cfb      	ldrb	r3, [r7, #19]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	4b2a      	ldr	r3, [pc, #168]	; (800b588 <mix_sub_columns+0x348>)
 800b4de:	5c9a      	ldrb	r2, [r3, r2]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	330c      	adds	r3, #12
 800b4e4:	404a      	eors	r2, r1
 800b4e6:	b2d2      	uxtb	r2, r2
 800b4e8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b4ea:	7d3b      	ldrb	r3, [r7, #20]
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	4b26      	ldr	r3, [pc, #152]	; (800b588 <mix_sub_columns+0x348>)
 800b4f0:	5c9a      	ldrb	r2, [r3, r2]
 800b4f2:	7a7b      	ldrb	r3, [r7, #9]
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	4b25      	ldr	r3, [pc, #148]	; (800b58c <mix_sub_columns+0x34c>)
 800b4f8:	5c5b      	ldrb	r3, [r3, r1]
 800b4fa:	4053      	eors	r3, r2
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	4619      	mov	r1, r3
 800b502:	4b23      	ldr	r3, [pc, #140]	; (800b590 <mix_sub_columns+0x350>)
 800b504:	5c5b      	ldrb	r3, [r3, r1]
 800b506:	4053      	eors	r3, r2
 800b508:	b2d9      	uxtb	r1, r3
 800b50a:	7cfb      	ldrb	r3, [r7, #19]
 800b50c:	461a      	mov	r2, r3
 800b50e:	4b1e      	ldr	r3, [pc, #120]	; (800b588 <mix_sub_columns+0x348>)
 800b510:	5c9a      	ldrb	r2, [r3, r2]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	330d      	adds	r3, #13
 800b516:	404a      	eors	r2, r1
 800b518:	b2d2      	uxtb	r2, r2
 800b51a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b51c:	7d3b      	ldrb	r3, [r7, #20]
 800b51e:	461a      	mov	r2, r3
 800b520:	4b19      	ldr	r3, [pc, #100]	; (800b588 <mix_sub_columns+0x348>)
 800b522:	5c9a      	ldrb	r2, [r3, r2]
 800b524:	7a7b      	ldrb	r3, [r7, #9]
 800b526:	4619      	mov	r1, r3
 800b528:	4b17      	ldr	r3, [pc, #92]	; (800b588 <mix_sub_columns+0x348>)
 800b52a:	5c5b      	ldrb	r3, [r3, r1]
 800b52c:	4053      	eors	r3, r2
 800b52e:	b2da      	uxtb	r2, r3
 800b530:	7bbb      	ldrb	r3, [r7, #14]
 800b532:	4619      	mov	r1, r3
 800b534:	4b15      	ldr	r3, [pc, #84]	; (800b58c <mix_sub_columns+0x34c>)
 800b536:	5c5b      	ldrb	r3, [r3, r1]
 800b538:	4053      	eors	r3, r2
 800b53a:	b2d9      	uxtb	r1, r3
 800b53c:	7cfb      	ldrb	r3, [r7, #19]
 800b53e:	461a      	mov	r2, r3
 800b540:	4b13      	ldr	r3, [pc, #76]	; (800b590 <mix_sub_columns+0x350>)
 800b542:	5c9a      	ldrb	r2, [r3, r2]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	330e      	adds	r3, #14
 800b548:	404a      	eors	r2, r1
 800b54a:	b2d2      	uxtb	r2, r2
 800b54c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b54e:	7d3b      	ldrb	r3, [r7, #20]
 800b550:	461a      	mov	r2, r3
 800b552:	4b0f      	ldr	r3, [pc, #60]	; (800b590 <mix_sub_columns+0x350>)
 800b554:	5c9a      	ldrb	r2, [r3, r2]
 800b556:	7a7b      	ldrb	r3, [r7, #9]
 800b558:	4619      	mov	r1, r3
 800b55a:	4b0b      	ldr	r3, [pc, #44]	; (800b588 <mix_sub_columns+0x348>)
 800b55c:	5c5b      	ldrb	r3, [r3, r1]
 800b55e:	4053      	eors	r3, r2
 800b560:	b2da      	uxtb	r2, r3
 800b562:	7bbb      	ldrb	r3, [r7, #14]
 800b564:	4619      	mov	r1, r3
 800b566:	4b08      	ldr	r3, [pc, #32]	; (800b588 <mix_sub_columns+0x348>)
 800b568:	5c5b      	ldrb	r3, [r3, r1]
 800b56a:	4053      	eors	r3, r2
 800b56c:	b2d9      	uxtb	r1, r3
 800b56e:	7cfb      	ldrb	r3, [r7, #19]
 800b570:	461a      	mov	r2, r3
 800b572:	4b06      	ldr	r3, [pc, #24]	; (800b58c <mix_sub_columns+0x34c>)
 800b574:	5c9a      	ldrb	r2, [r3, r2]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	330f      	adds	r3, #15
 800b57a:	404a      	eors	r2, r1
 800b57c:	b2d2      	uxtb	r2, r2
 800b57e:	701a      	strb	r2, [r3, #0]
  }
 800b580:	bf00      	nop
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	0801b500 	.word	0x0801b500
 800b58c:	0801b600 	.word	0x0801b600
 800b590:	0801b700 	.word	0x0801b700

0800b594 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	460b      	mov	r3, r1
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b5a2:	7afb      	ldrb	r3, [r7, #11]
 800b5a4:	3b10      	subs	r3, #16
 800b5a6:	2b10      	cmp	r3, #16
 800b5a8:	bf8c      	ite	hi
 800b5aa:	2201      	movhi	r2, #1
 800b5ac:	2200      	movls	r2, #0
 800b5ae:	b2d2      	uxtb	r2, r2
 800b5b0:	2a00      	cmp	r2, #0
 800b5b2:	d10d      	bne.n	800b5d0 <lorawan_aes_set_key+0x3c>
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ba:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b5be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	bf14      	ite	ne
 800b5c6:	2301      	movne	r3, #1
 800b5c8:	2300      	moveq	r3, #0
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d105      	bne.n	800b5dc <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b5d8:	23ff      	movs	r3, #255	; 0xff
 800b5da:	e0b2      	b.n	800b742 <lorawan_aes_set_key+0x1ae>
        break;
 800b5dc:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	7afa      	ldrb	r2, [r7, #11]
 800b5e2:	68f9      	ldr	r1, [r7, #12]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7ff fbfa 	bl	800adde <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b5ea:	7afb      	ldrb	r3, [r7, #11]
 800b5ec:	331c      	adds	r3, #28
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b5f4:	7c7b      	ldrb	r3, [r7, #17]
 800b5f6:	091b      	lsrs	r3, r3, #4
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b604:	7afb      	ldrb	r3, [r7, #11]
 800b606:	75fb      	strb	r3, [r7, #23]
 800b608:	2301      	movs	r3, #1
 800b60a:	75bb      	strb	r3, [r7, #22]
 800b60c:	e093      	b.n	800b736 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b60e:	7dfb      	ldrb	r3, [r7, #23]
 800b610:	3b04      	subs	r3, #4
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	5cd3      	ldrb	r3, [r2, r3]
 800b616:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b618:	7dfb      	ldrb	r3, [r7, #23]
 800b61a:	3b03      	subs	r3, #3
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	5cd3      	ldrb	r3, [r2, r3]
 800b620:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b622:	7dfb      	ldrb	r3, [r7, #23]
 800b624:	3b02      	subs	r3, #2
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	5cd3      	ldrb	r3, [r2, r3]
 800b62a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b62c:	7dfb      	ldrb	r3, [r7, #23]
 800b62e:	3b01      	subs	r3, #1
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	5cd3      	ldrb	r3, [r2, r3]
 800b634:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b636:	7dfb      	ldrb	r3, [r7, #23]
 800b638:	7afa      	ldrb	r2, [r7, #11]
 800b63a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b63e:	fb02 f201 	mul.w	r2, r2, r1
 800b642:	1a9b      	subs	r3, r3, r2
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	d127      	bne.n	800b69a <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800b64a:	7d7b      	ldrb	r3, [r7, #21]
 800b64c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b64e:	7d3b      	ldrb	r3, [r7, #20]
 800b650:	4a3e      	ldr	r2, [pc, #248]	; (800b74c <lorawan_aes_set_key+0x1b8>)
 800b652:	5cd2      	ldrb	r2, [r2, r3]
 800b654:	7dbb      	ldrb	r3, [r7, #22]
 800b656:	4053      	eors	r3, r2
 800b658:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b65a:	7cfb      	ldrb	r3, [r7, #19]
 800b65c:	4a3b      	ldr	r2, [pc, #236]	; (800b74c <lorawan_aes_set_key+0x1b8>)
 800b65e:	5cd3      	ldrb	r3, [r2, r3]
 800b660:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b662:	7cbb      	ldrb	r3, [r7, #18]
 800b664:	4a39      	ldr	r2, [pc, #228]	; (800b74c <lorawan_aes_set_key+0x1b8>)
 800b666:	5cd3      	ldrb	r3, [r2, r3]
 800b668:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b66a:	7c3b      	ldrb	r3, [r7, #16]
 800b66c:	4a37      	ldr	r2, [pc, #220]	; (800b74c <lorawan_aes_set_key+0x1b8>)
 800b66e:	5cd3      	ldrb	r3, [r2, r3]
 800b670:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b672:	7dbb      	ldrb	r3, [r7, #22]
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	b25a      	sxtb	r2, r3
 800b678:	7dbb      	ldrb	r3, [r7, #22]
 800b67a:	09db      	lsrs	r3, r3, #7
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	4619      	mov	r1, r3
 800b680:	0049      	lsls	r1, r1, #1
 800b682:	440b      	add	r3, r1
 800b684:	4619      	mov	r1, r3
 800b686:	00c8      	lsls	r0, r1, #3
 800b688:	4619      	mov	r1, r3
 800b68a:	4603      	mov	r3, r0
 800b68c:	440b      	add	r3, r1
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	b25b      	sxtb	r3, r3
 800b692:	4053      	eors	r3, r2
 800b694:	b25b      	sxtb	r3, r3
 800b696:	75bb      	strb	r3, [r7, #22]
 800b698:	e01c      	b.n	800b6d4 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b69a:	7afb      	ldrb	r3, [r7, #11]
 800b69c:	2b18      	cmp	r3, #24
 800b69e:	d919      	bls.n	800b6d4 <lorawan_aes_set_key+0x140>
 800b6a0:	7dfb      	ldrb	r3, [r7, #23]
 800b6a2:	7afa      	ldrb	r2, [r7, #11]
 800b6a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6a8:	fb02 f201 	mul.w	r2, r2, r1
 800b6ac:	1a9b      	subs	r3, r3, r2
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	2b10      	cmp	r3, #16
 800b6b2:	d10f      	bne.n	800b6d4 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b6b4:	7d7b      	ldrb	r3, [r7, #21]
 800b6b6:	4a25      	ldr	r2, [pc, #148]	; (800b74c <lorawan_aes_set_key+0x1b8>)
 800b6b8:	5cd3      	ldrb	r3, [r2, r3]
 800b6ba:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b6bc:	7d3b      	ldrb	r3, [r7, #20]
 800b6be:	4a23      	ldr	r2, [pc, #140]	; (800b74c <lorawan_aes_set_key+0x1b8>)
 800b6c0:	5cd3      	ldrb	r3, [r2, r3]
 800b6c2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b6c4:	7cfb      	ldrb	r3, [r7, #19]
 800b6c6:	4a21      	ldr	r2, [pc, #132]	; (800b74c <lorawan_aes_set_key+0x1b8>)
 800b6c8:	5cd3      	ldrb	r3, [r2, r3]
 800b6ca:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b6cc:	7cbb      	ldrb	r3, [r7, #18]
 800b6ce:	4a1f      	ldr	r2, [pc, #124]	; (800b74c <lorawan_aes_set_key+0x1b8>)
 800b6d0:	5cd3      	ldrb	r3, [r2, r3]
 800b6d2:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b6d4:	7dfa      	ldrb	r2, [r7, #23]
 800b6d6:	7afb      	ldrb	r3, [r7, #11]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b6dc:	7c3b      	ldrb	r3, [r7, #16]
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	5cd1      	ldrb	r1, [r2, r3]
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
 800b6e4:	7d7a      	ldrb	r2, [r7, #21]
 800b6e6:	404a      	eors	r2, r1
 800b6e8:	b2d1      	uxtb	r1, r2
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b6ee:	7c3b      	ldrb	r3, [r7, #16]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	5cd1      	ldrb	r1, [r2, r3]
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	7d3a      	ldrb	r2, [r7, #20]
 800b6fc:	404a      	eors	r2, r1
 800b6fe:	b2d1      	uxtb	r1, r2
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b704:	7c3b      	ldrb	r3, [r7, #16]
 800b706:	3302      	adds	r3, #2
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	5cd1      	ldrb	r1, [r2, r3]
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	3302      	adds	r3, #2
 800b710:	7cfa      	ldrb	r2, [r7, #19]
 800b712:	404a      	eors	r2, r1
 800b714:	b2d1      	uxtb	r1, r2
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b71a:	7c3b      	ldrb	r3, [r7, #16]
 800b71c:	3303      	adds	r3, #3
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	5cd1      	ldrb	r1, [r2, r3]
 800b722:	7dfb      	ldrb	r3, [r7, #23]
 800b724:	3303      	adds	r3, #3
 800b726:	7cba      	ldrb	r2, [r7, #18]
 800b728:	404a      	eors	r2, r1
 800b72a:	b2d1      	uxtb	r1, r2
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b730:	7dfb      	ldrb	r3, [r7, #23]
 800b732:	3304      	adds	r3, #4
 800b734:	75fb      	strb	r3, [r7, #23]
 800b736:	7dfa      	ldrb	r2, [r7, #23]
 800b738:	7c7b      	ldrb	r3, [r7, #17]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	f4ff af67 	bcc.w	800b60e <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	0801b500 	.word	0x0801b500

0800b750 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b08a      	sub	sp, #40	; 0x28
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d038      	beq.n	800b7d8 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	f107 0314 	add.w	r3, r7, #20
 800b76c:	68f9      	ldr	r1, [r7, #12]
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff fc07 	bl	800af82 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b774:	2301      	movs	r3, #1
 800b776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b77a:	e014      	b.n	800b7a6 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b77c:	f107 0314 	add.w	r3, r7, #20
 800b780:	4618      	mov	r0, r3
 800b782:	f7ff fd5d 	bl	800b240 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b78c:	0112      	lsls	r2, r2, #4
 800b78e:	441a      	add	r2, r3
 800b790:	f107 0314 	add.w	r3, r7, #20
 800b794:	4611      	mov	r1, r2
 800b796:	4618      	mov	r0, r3
 800b798:	f7ff fcab 	bl	800b0f2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b79c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b7ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d3e3      	bcc.n	800b77c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b7b4:	f107 0314 	add.w	r3, r7, #20
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7ff fca7 	bl	800b10c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b7c4:	0112      	lsls	r2, r2, #4
 800b7c6:	441a      	add	r2, r3
 800b7c8:	f107 0314 	add.w	r3, r7, #20
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	68b8      	ldr	r0, [r7, #8]
 800b7d0:	f7ff fbd7 	bl	800af82 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	e000      	b.n	800b7da <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b7d8:	23ff      	movs	r3, #255	; 0xff
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3728      	adds	r7, #40	; 0x28
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800b7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7e6:	b09d      	sub	sp, #116	; 0x74
 800b7e8:	af10      	add	r7, sp, #64	; 0x40
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b7f0:	2306      	movs	r3, #6
 800b7f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b7f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b7fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7fe:	4611      	mov	r1, r2
 800b800:	4618      	mov	r0, r3
 800b802:	f000 fa05 	bl	800bc10 <SecureElementGetKeyByID>
 800b806:	4603      	mov	r3, r0
 800b808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b80c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b810:	2b00      	cmp	r3, #0
 800b812:	f040 80b0 	bne.w	800b976 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d106      	bne.n	800b82c <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b81e:	4b58      	ldr	r3, [pc, #352]	; (800b980 <PrintKey+0x19c>)
 800b820:	2200      	movs	r2, #0
 800b822:	2100      	movs	r1, #0
 800b824:	2002      	movs	r0, #2
 800b826:	f00e fe73 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
 800b82a:	e056      	b.n	800b8da <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b82c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b830:	2b01      	cmp	r3, #1
 800b832:	d106      	bne.n	800b842 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b834:	4b53      	ldr	r3, [pc, #332]	; (800b984 <PrintKey+0x1a0>)
 800b836:	2200      	movs	r2, #0
 800b838:	2100      	movs	r1, #0
 800b83a:	2002      	movs	r0, #2
 800b83c:	f00e fe68 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
 800b840:	e04b      	b.n	800b8da <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b846:	2b03      	cmp	r3, #3
 800b848:	d106      	bne.n	800b858 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b84a:	4b4f      	ldr	r3, [pc, #316]	; (800b988 <PrintKey+0x1a4>)
 800b84c:	2200      	movs	r2, #0
 800b84e:	2100      	movs	r1, #0
 800b850:	2002      	movs	r0, #2
 800b852:	f00e fe5d 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
 800b856:	e040      	b.n	800b8da <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d106      	bne.n	800b86e <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b860:	4b4a      	ldr	r3, [pc, #296]	; (800b98c <PrintKey+0x1a8>)
 800b862:	2200      	movs	r2, #0
 800b864:	2100      	movs	r1, #0
 800b866:	2002      	movs	r0, #2
 800b868:	f00e fe52 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
 800b86c:	e035      	b.n	800b8da <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b86e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b872:	2b04      	cmp	r3, #4
 800b874:	d106      	bne.n	800b884 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b876:	4b46      	ldr	r3, [pc, #280]	; (800b990 <PrintKey+0x1ac>)
 800b878:	2200      	movs	r2, #0
 800b87a:	2100      	movs	r1, #0
 800b87c:	2002      	movs	r0, #2
 800b87e:	f00e fe47 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
 800b882:	e02a      	b.n	800b8da <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800b884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b888:	2b7f      	cmp	r3, #127	; 0x7f
 800b88a:	d106      	bne.n	800b89a <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800b88c:	4b41      	ldr	r3, [pc, #260]	; (800b994 <PrintKey+0x1b0>)
 800b88e:	2200      	movs	r2, #0
 800b890:	2100      	movs	r1, #0
 800b892:	2002      	movs	r0, #2
 800b894:	f00e fe3c 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
 800b898:	e01f      	b.n	800b8da <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800b89a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b89e:	2b80      	cmp	r3, #128	; 0x80
 800b8a0:	d106      	bne.n	800b8b0 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800b8a2:	4b3d      	ldr	r3, [pc, #244]	; (800b998 <PrintKey+0x1b4>)
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	2002      	movs	r0, #2
 800b8aa:	f00e fe31 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
 800b8ae:	e014      	b.n	800b8da <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800b8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b4:	2b81      	cmp	r3, #129	; 0x81
 800b8b6:	d106      	bne.n	800b8c6 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800b8b8:	4b38      	ldr	r3, [pc, #224]	; (800b99c <PrintKey+0x1b8>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	2100      	movs	r1, #0
 800b8be:	2002      	movs	r0, #2
 800b8c0:	f00e fe26 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
 800b8c4:	e009      	b.n	800b8da <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800b8c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ca:	2b82      	cmp	r3, #130	; 0x82
 800b8cc:	d105      	bne.n	800b8da <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800b8ce:	4b34      	ldr	r3, [pc, #208]	; (800b9a0 <PrintKey+0x1bc>)
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	2002      	movs	r0, #2
 800b8d6:	f00e fe1b 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	785b      	ldrb	r3, [r3, #1]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e2:	789b      	ldrb	r3, [r3, #2]
 800b8e4:	461c      	mov	r4, r3
 800b8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e8:	78db      	ldrb	r3, [r3, #3]
 800b8ea:	461d      	mov	r5, r3
 800b8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ee:	791b      	ldrb	r3, [r3, #4]
 800b8f0:	461e      	mov	r6, r3
 800b8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f4:	795b      	ldrb	r3, [r3, #5]
 800b8f6:	623b      	str	r3, [r7, #32]
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	799b      	ldrb	r3, [r3, #6]
 800b8fc:	61fb      	str	r3, [r7, #28]
 800b8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b900:	79db      	ldrb	r3, [r3, #7]
 800b902:	61bb      	str	r3, [r7, #24]
 800b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b906:	7a1b      	ldrb	r3, [r3, #8]
 800b908:	617b      	str	r3, [r7, #20]
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	7a5b      	ldrb	r3, [r3, #9]
 800b90e:	613b      	str	r3, [r7, #16]
 800b910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b912:	7a9b      	ldrb	r3, [r3, #10]
 800b914:	60fb      	str	r3, [r7, #12]
 800b916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b918:	7adb      	ldrb	r3, [r3, #11]
 800b91a:	60bb      	str	r3, [r7, #8]
 800b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91e:	7b1b      	ldrb	r3, [r3, #12]
 800b920:	607b      	str	r3, [r7, #4]
 800b922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b924:	7b5b      	ldrb	r3, [r3, #13]
 800b926:	603b      	str	r3, [r7, #0]
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	7b9b      	ldrb	r3, [r3, #14]
 800b92c:	4619      	mov	r1, r3
 800b92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b930:	7bdb      	ldrb	r3, [r3, #15]
 800b932:	461a      	mov	r2, r3
 800b934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b936:	7c1b      	ldrb	r3, [r3, #16]
 800b938:	930f      	str	r3, [sp, #60]	; 0x3c
 800b93a:	920e      	str	r2, [sp, #56]	; 0x38
 800b93c:	910d      	str	r1, [sp, #52]	; 0x34
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	920c      	str	r2, [sp, #48]	; 0x30
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	920b      	str	r2, [sp, #44]	; 0x2c
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	920a      	str	r2, [sp, #40]	; 0x28
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	9209      	str	r2, [sp, #36]	; 0x24
 800b94e:	693a      	ldr	r2, [r7, #16]
 800b950:	9208      	str	r2, [sp, #32]
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	9207      	str	r2, [sp, #28]
 800b956:	69ba      	ldr	r2, [r7, #24]
 800b958:	9206      	str	r2, [sp, #24]
 800b95a:	69fa      	ldr	r2, [r7, #28]
 800b95c:	9205      	str	r2, [sp, #20]
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	9304      	str	r3, [sp, #16]
 800b962:	9603      	str	r6, [sp, #12]
 800b964:	9502      	str	r5, [sp, #8]
 800b966:	9401      	str	r4, [sp, #4]
 800b968:	9000      	str	r0, [sp, #0]
 800b96a:	4b0e      	ldr	r3, [pc, #56]	; (800b9a4 <PrintKey+0x1c0>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	2100      	movs	r1, #0
 800b970:	2002      	movs	r0, #2
 800b972:	f00e fdcd 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800b976:	bf00      	nop
 800b978:	3734      	adds	r7, #52	; 0x34
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b97e:	bf00      	nop
 800b980:	0801af10 	.word	0x0801af10
 800b984:	0801af28 	.word	0x0801af28
 800b988:	0801af40 	.word	0x0801af40
 800b98c:	0801af58 	.word	0x0801af58
 800b990:	0801af70 	.word	0x0801af70
 800b994:	0801af88 	.word	0x0801af88
 800b998:	0801afa0 	.word	0x0801afa0
 800b99c:	0801afb8 	.word	0x0801afb8
 800b9a0:	0801afd0 	.word	0x0801afd0
 800b9a4:	0801afe8 	.word	0x0801afe8

0800b9a8 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	6039      	str	r1, [r7, #0]
 800b9b2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	73fb      	strb	r3, [r7, #15]
 800b9b8:	e01a      	b.n	800b9f0 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b9ba:	4b12      	ldr	r3, [pc, #72]	; (800ba04 <GetKeyByID+0x5c>)
 800b9bc:	6819      	ldr	r1, [r3, #0]
 800b9be:	7bfa      	ldrb	r2, [r7, #15]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	011b      	lsls	r3, r3, #4
 800b9c4:	4413      	add	r3, r2
 800b9c6:	440b      	add	r3, r1
 800b9c8:	3310      	adds	r3, #16
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	79fa      	ldrb	r2, [r7, #7]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d10b      	bne.n	800b9ea <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b9d2:	4b0c      	ldr	r3, [pc, #48]	; (800ba04 <GetKeyByID+0x5c>)
 800b9d4:	6819      	ldr	r1, [r3, #0]
 800b9d6:	7bfa      	ldrb	r2, [r7, #15]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	011b      	lsls	r3, r3, #4
 800b9dc:	4413      	add	r3, r2
 800b9de:	3310      	adds	r3, #16
 800b9e0:	18ca      	adds	r2, r1, r3
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	e006      	b.n	800b9f8 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	73fb      	strb	r3, [r7, #15]
 800b9f0:	7bfb      	ldrb	r3, [r7, #15]
 800b9f2:	2b09      	cmp	r3, #9
 800b9f4:	d9e1      	bls.n	800b9ba <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b9f6:	2303      	movs	r3, #3
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bc80      	pop	{r7}
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	200002c0 	.word	0x200002c0

0800ba08 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800ba08:	b590      	push	{r4, r7, lr}
 800ba0a:	b0d1      	sub	sp, #324	; 0x144
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	f107 040c 	add.w	r4, r7, #12
 800ba12:	6020      	str	r0, [r4, #0]
 800ba14:	f107 0008 	add.w	r0, r7, #8
 800ba18:	6001      	str	r1, [r0, #0]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	1dbb      	adds	r3, r7, #6
 800ba1e:	801a      	strh	r2, [r3, #0]
 800ba20:	1d7b      	adds	r3, r7, #5
 800ba22:	460a      	mov	r2, r1
 800ba24:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ba26:	f107 0308 	add.w	r3, r7, #8
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d003      	beq.n	800ba38 <ComputeCmac+0x30>
 800ba30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d101      	bne.n	800ba3c <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ba38:	2302      	movs	r3, #2
 800ba3a:	e04e      	b.n	800bada <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ba3c:	f107 0314 	add.w	r3, r7, #20
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fe ff23 	bl	800a88c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ba46:	f107 0210 	add.w	r2, r7, #16
 800ba4a:	1d7b      	adds	r3, r7, #5
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	4611      	mov	r1, r2
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff ffa9 	bl	800b9a8 <GetKeyByID>
 800ba56:	4603      	mov	r3, r0
 800ba58:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ba5c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d138      	bne.n	800bad6 <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ba64:	f107 0310 	add.w	r3, r7, #16
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	1c5a      	adds	r2, r3, #1
 800ba6c:	f107 0314 	add.w	r3, r7, #20
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fe ff23 	bl	800a8be <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ba78:	f107 030c 	add.w	r3, r7, #12
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d007      	beq.n	800ba92 <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800ba82:	f107 030c 	add.w	r3, r7, #12
 800ba86:	f107 0014 	add.w	r0, r7, #20
 800ba8a:	2210      	movs	r2, #16
 800ba8c:	6819      	ldr	r1, [r3, #0]
 800ba8e:	f7fe ff25 	bl	800a8dc <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ba92:	1dbb      	adds	r3, r7, #6
 800ba94:	881a      	ldrh	r2, [r3, #0]
 800ba96:	f107 0308 	add.w	r3, r7, #8
 800ba9a:	f107 0014 	add.w	r0, r7, #20
 800ba9e:	6819      	ldr	r1, [r3, #0]
 800baa0:	f7fe ff1c 	bl	800a8dc <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800baa4:	f107 0214 	add.w	r2, r7, #20
 800baa8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800baac:	4611      	mov	r1, r2
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fe ffd6 	bl	800aa60 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bab4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800bab8:	061a      	lsls	r2, r3, #24
 800baba:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800babe:	041b      	lsls	r3, r3, #16
 800bac0:	431a      	orrs	r2, r3
 800bac2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800bac6:	021b      	lsls	r3, r3, #8
 800bac8:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800baca:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bace:	431a      	orrs	r2, r3
 800bad0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bad4:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bad6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800bada:	4618      	mov	r0, r3
 800badc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd90      	pop	{r4, r7, pc}

0800bae4 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bae4:	b5b0      	push	{r4, r5, r7, lr}
 800bae6:	b0b2      	sub	sp, #200	; 0xc8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800baee:	f107 0308 	add.w	r3, r7, #8
 800baf2:	22c0      	movs	r2, #192	; 0xc0
 800baf4:	2100      	movs	r1, #0
 800baf6:	4618      	mov	r0, r3
 800baf8:	f00e ffa8 	bl	801aa4c <memset>
 800bafc:	4a3b      	ldr	r2, [pc, #236]	; (800bbec <SecureElementInit+0x108>)
 800bafe:	f107 0308 	add.w	r3, r7, #8
 800bb02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb06:	e883 0003 	stmia.w	r3, {r0, r1}
 800bb0a:	4a39      	ldr	r2, [pc, #228]	; (800bbf0 <SecureElementInit+0x10c>)
 800bb0c:	f107 0310 	add.w	r3, r7, #16
 800bb10:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb14:	e883 0003 	stmia.w	r3, {r0, r1}
 800bb18:	4b36      	ldr	r3, [pc, #216]	; (800bbf4 <SecureElementInit+0x110>)
 800bb1a:	f107 0419 	add.w	r4, r7, #25
 800bb1e:	461d      	mov	r5, r3
 800bb20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb22:	6020      	str	r0, [r4, #0]
 800bb24:	6061      	str	r1, [r4, #4]
 800bb26:	60a2      	str	r2, [r4, #8]
 800bb28:	60e3      	str	r3, [r4, #12]
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800bb30:	4b31      	ldr	r3, [pc, #196]	; (800bbf8 <SecureElementInit+0x114>)
 800bb32:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800bb36:	461d      	mov	r5, r3
 800bb38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb3a:	6020      	str	r0, [r4, #0]
 800bb3c:	6061      	str	r1, [r4, #4]
 800bb3e:	60a2      	str	r2, [r4, #8]
 800bb40:	60e3      	str	r3, [r4, #12]
 800bb42:	2302      	movs	r3, #2
 800bb44:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800bb48:	4b2c      	ldr	r3, [pc, #176]	; (800bbfc <SecureElementInit+0x118>)
 800bb4a:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800bb4e:	461d      	mov	r5, r3
 800bb50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb52:	6020      	str	r0, [r4, #0]
 800bb54:	6061      	str	r1, [r4, #4]
 800bb56:	60a2      	str	r2, [r4, #8]
 800bb58:	60e3      	str	r3, [r4, #12]
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800bb60:	4b27      	ldr	r3, [pc, #156]	; (800bc00 <SecureElementInit+0x11c>)
 800bb62:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800bb66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bb68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb6c:	2304      	movs	r3, #4
 800bb6e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800bb72:	237f      	movs	r3, #127	; 0x7f
 800bb74:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800bb78:	2380      	movs	r3, #128	; 0x80
 800bb7a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bb7e:	2381      	movs	r3, #129	; 0x81
 800bb80:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800bb84:	2382      	movs	r3, #130	; 0x82
 800bb86:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800bb8a:	2383      	movs	r3, #131	; 0x83
 800bb8c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d101      	bne.n	800bb9a <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bb96:	2302      	movs	r3, #2
 800bb98:	e023      	b.n	800bbe2 <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bb9a:	4a1a      	ldr	r2, [pc, #104]	; (800bc04 <SecureElementInit+0x120>)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bba0:	4b18      	ldr	r3, [pc, #96]	; (800bc04 <SecureElementInit+0x120>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f107 0108 	add.w	r1, r7, #8
 800bba8:	22c0      	movs	r2, #192	; 0xc0
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f00a fb95 	bl	80162da <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bbb0:	4b15      	ldr	r3, [pc, #84]	; (800bc08 <SecureElementInit+0x124>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	2002      	movs	r0, #2
 800bbb8:	f00e fcaa 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	f7ff fe11 	bl	800b7e4 <PrintKey>
    PrintKey(NWK_KEY);
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	f7ff fe0e 	bl	800b7e4 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bbc8:	4b10      	ldr	r3, [pc, #64]	; (800bc0c <SecureElementInit+0x128>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2100      	movs	r1, #0
 800bbce:	2002      	movs	r0, #2
 800bbd0:	f00e fc9e 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bbd4:	2003      	movs	r0, #3
 800bbd6:	f7ff fe05 	bl	800b7e4 <PrintKey>
    PrintKey(NWK_S_KEY);
 800bbda:	2002      	movs	r0, #2
 800bbdc:	f7ff fe02 	bl	800b7e4 <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	37c8      	adds	r7, #200	; 0xc8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bdb0      	pop	{r4, r5, r7, pc}
 800bbea:	bf00      	nop
 800bbec:	0801b06c 	.word	0x0801b06c
 800bbf0:	0801b074 	.word	0x0801b074
 800bbf4:	0801b07c 	.word	0x0801b07c
 800bbf8:	0801b08c 	.word	0x0801b08c
 800bbfc:	0801b09c 	.word	0x0801b09c
 800bc00:	0801b0ac 	.word	0x0801b0ac
 800bc04:	200002c0 	.word	0x200002c0
 800bc08:	0801b03c 	.word	0x0801b03c
 800bc0c:	0801b054 	.word	0x0801b054

0800bc10 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	4603      	mov	r3, r0
 800bc18:	6039      	str	r1, [r7, #0]
 800bc1a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73fb      	strb	r3, [r7, #15]
 800bc20:	e01a      	b.n	800bc58 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bc22:	4b12      	ldr	r3, [pc, #72]	; (800bc6c <SecureElementGetKeyByID+0x5c>)
 800bc24:	6819      	ldr	r1, [r3, #0]
 800bc26:	7bfa      	ldrb	r2, [r7, #15]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	011b      	lsls	r3, r3, #4
 800bc2c:	4413      	add	r3, r2
 800bc2e:	440b      	add	r3, r1
 800bc30:	3310      	adds	r3, #16
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	79fa      	ldrb	r2, [r7, #7]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d10b      	bne.n	800bc52 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800bc3a:	4b0c      	ldr	r3, [pc, #48]	; (800bc6c <SecureElementGetKeyByID+0x5c>)
 800bc3c:	6819      	ldr	r1, [r3, #0]
 800bc3e:	7bfa      	ldrb	r2, [r7, #15]
 800bc40:	4613      	mov	r3, r2
 800bc42:	011b      	lsls	r3, r3, #4
 800bc44:	4413      	add	r3, r2
 800bc46:	3310      	adds	r3, #16
 800bc48:	18ca      	adds	r2, r1, r3
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	e006      	b.n	800bc60 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bc52:	7bfb      	ldrb	r3, [r7, #15]
 800bc54:	3301      	adds	r3, #1
 800bc56:	73fb      	strb	r3, [r7, #15]
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	2b09      	cmp	r3, #9
 800bc5c:	d9e1      	bls.n	800bc22 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bc5e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bc80      	pop	{r7}
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	200002c0 	.word	0x200002c0

0800bc70 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	4603      	mov	r3, r0
 800bc78:	6039      	str	r1, [r7, #0]
 800bc7a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bc82:	2302      	movs	r3, #2
 800bc84:	e04c      	b.n	800bd20 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bc86:	2300      	movs	r3, #0
 800bc88:	77fb      	strb	r3, [r7, #31]
 800bc8a:	e045      	b.n	800bd18 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bc8c:	4b26      	ldr	r3, [pc, #152]	; (800bd28 <SecureElementSetKey+0xb8>)
 800bc8e:	6819      	ldr	r1, [r3, #0]
 800bc90:	7ffa      	ldrb	r2, [r7, #31]
 800bc92:	4613      	mov	r3, r2
 800bc94:	011b      	lsls	r3, r3, #4
 800bc96:	4413      	add	r3, r2
 800bc98:	440b      	add	r3, r1
 800bc9a:	3310      	adds	r3, #16
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	79fa      	ldrb	r2, [r7, #7]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d136      	bne.n	800bd12 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800bca4:	79fb      	ldrb	r3, [r7, #7]
 800bca6:	2b80      	cmp	r3, #128	; 0x80
 800bca8:	d123      	bne.n	800bcf2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800bcaa:	2306      	movs	r3, #6
 800bcac:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800bcae:	2300      	movs	r3, #0
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	f107 0310 	add.w	r3, r7, #16
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	601a      	str	r2, [r3, #0]
 800bcba:	605a      	str	r2, [r3, #4]
 800bcbc:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800bcbe:	f107 030c 	add.w	r3, r7, #12
 800bcc2:	227f      	movs	r2, #127	; 0x7f
 800bcc4:	2110      	movs	r1, #16
 800bcc6:	6838      	ldr	r0, [r7, #0]
 800bcc8:	f000 f87d 	bl	800bdc6 <SecureElementAesEncrypt>
 800bccc:	4603      	mov	r3, r0
 800bcce:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800bcd0:	4b15      	ldr	r3, [pc, #84]	; (800bd28 <SecureElementSetKey+0xb8>)
 800bcd2:	6819      	ldr	r1, [r3, #0]
 800bcd4:	7ffa      	ldrb	r2, [r7, #31]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	4413      	add	r3, r2
 800bcdc:	3310      	adds	r3, #16
 800bcde:	440b      	add	r3, r1
 800bce0:	3301      	adds	r3, #1
 800bce2:	f107 010c 	add.w	r1, r7, #12
 800bce6:	2210      	movs	r2, #16
 800bce8:	4618      	mov	r0, r3
 800bcea:	f00a faf6 	bl	80162da <memcpy1>
                return retval;
 800bcee:	7fbb      	ldrb	r3, [r7, #30]
 800bcf0:	e016      	b.n	800bd20 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800bcf2:	4b0d      	ldr	r3, [pc, #52]	; (800bd28 <SecureElementSetKey+0xb8>)
 800bcf4:	6819      	ldr	r1, [r3, #0]
 800bcf6:	7ffa      	ldrb	r2, [r7, #31]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	011b      	lsls	r3, r3, #4
 800bcfc:	4413      	add	r3, r2
 800bcfe:	3310      	adds	r3, #16
 800bd00:	440b      	add	r3, r1
 800bd02:	3301      	adds	r3, #1
 800bd04:	2210      	movs	r2, #16
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f00a fae6 	bl	80162da <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e006      	b.n	800bd20 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bd12:	7ffb      	ldrb	r3, [r7, #31]
 800bd14:	3301      	adds	r3, #1
 800bd16:	77fb      	strb	r3, [r7, #31]
 800bd18:	7ffb      	ldrb	r3, [r7, #31]
 800bd1a:	2b09      	cmp	r3, #9
 800bd1c:	d9b6      	bls.n	800bc8c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bd1e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3720      	adds	r7, #32
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	200002c0 	.word	0x200002c0

0800bd2c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b086      	sub	sp, #24
 800bd30:	af02      	add	r7, sp, #8
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	4611      	mov	r1, r2
 800bd38:	461a      	mov	r2, r3
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	80fb      	strh	r3, [r7, #6]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800bd42:	797b      	ldrb	r3, [r7, #5]
 800bd44:	2b7e      	cmp	r3, #126	; 0x7e
 800bd46:	d901      	bls.n	800bd4c <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bd48:	2303      	movs	r3, #3
 800bd4a:	e009      	b.n	800bd60 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800bd4c:	7979      	ldrb	r1, [r7, #5]
 800bd4e:	88fa      	ldrh	r2, [r7, #6]
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	460b      	mov	r3, r1
 800bd56:	68b9      	ldr	r1, [r7, #8]
 800bd58:	68f8      	ldr	r0, [r7, #12]
 800bd5a:	f7ff fe55 	bl	800ba08 <ComputeCmac>
 800bd5e:	4603      	mov	r3, r0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b088      	sub	sp, #32
 800bd6c:	af02      	add	r7, sp, #8
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	607a      	str	r2, [r7, #4]
 800bd72:	461a      	mov	r2, r3
 800bd74:	460b      	mov	r3, r1
 800bd76:	817b      	strh	r3, [r7, #10]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd82:	2302      	movs	r3, #2
 800bd84:	e01b      	b.n	800bdbe <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800bd86:	2306      	movs	r3, #6
 800bd88:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800bd8e:	7a79      	ldrb	r1, [r7, #9]
 800bd90:	897a      	ldrh	r2, [r7, #10]
 800bd92:	f107 0310 	add.w	r3, r7, #16
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	68f9      	ldr	r1, [r7, #12]
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	f7ff fe33 	bl	800ba08 <ComputeCmac>
 800bda2:	4603      	mov	r3, r0
 800bda4:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d001      	beq.n	800bdb0 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800bdac:	7dfb      	ldrb	r3, [r7, #23]
 800bdae:	e006      	b.n	800bdbe <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d001      	beq.n	800bdbc <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bdbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3718      	adds	r7, #24
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b0c2      	sub	sp, #264	; 0x108
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	4608      	mov	r0, r1
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	1d3a      	adds	r2, r7, #4
 800bdd4:	6013      	str	r3, [r2, #0]
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	817b      	strh	r3, [r7, #10]
 800bdda:	460b      	mov	r3, r1
 800bddc:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d003      	beq.n	800bdec <SecureElementAesEncrypt+0x26>
 800bde4:	1d3b      	adds	r3, r7, #4
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d101      	bne.n	800bdf0 <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bdec:	2302      	movs	r3, #2
 800bdee:	e043      	b.n	800be78 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800bdf0:	897b      	ldrh	r3, [r7, #10]
 800bdf2:	f003 030f 	and.w	r3, r3, #15
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d001      	beq.n	800be00 <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bdfc:	2305      	movs	r3, #5
 800bdfe:	e03b      	b.n	800be78 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800be00:	f107 0314 	add.w	r3, r7, #20
 800be04:	22f0      	movs	r2, #240	; 0xf0
 800be06:	2100      	movs	r1, #0
 800be08:	4618      	mov	r0, r3
 800be0a:	f00a faa1 	bl	8016350 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800be0e:	f107 0210 	add.w	r2, r7, #16
 800be12:	7a7b      	ldrb	r3, [r7, #9]
 800be14:	4611      	mov	r1, r2
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff fdc6 	bl	800b9a8 <GetKeyByID>
 800be1c:	4603      	mov	r3, r0
 800be1e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800be22:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800be26:	2b00      	cmp	r3, #0
 800be28:	d124      	bne.n	800be74 <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	3301      	adds	r3, #1
 800be2e:	f107 0214 	add.w	r2, r7, #20
 800be32:	2110      	movs	r1, #16
 800be34:	4618      	mov	r0, r3
 800be36:	f7ff fbad 	bl	800b594 <lorawan_aes_set_key>

        uint8_t block = 0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800be40:	e015      	b.n	800be6e <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800be42:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	18d0      	adds	r0, r2, r3
 800be4a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800be4e:	1d3a      	adds	r2, r7, #4
 800be50:	6812      	ldr	r2, [r2, #0]
 800be52:	4413      	add	r3, r2
 800be54:	f107 0214 	add.w	r2, r7, #20
 800be58:	4619      	mov	r1, r3
 800be5a:	f7ff fc79 	bl	800b750 <lorawan_aes_encrypt>
            block = block + 16;
 800be5e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800be62:	3310      	adds	r3, #16
 800be64:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800be68:	897b      	ldrh	r3, [r7, #10]
 800be6a:	3b10      	subs	r3, #16
 800be6c:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800be6e:	897b      	ldrh	r3, [r7, #10]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1e6      	bne.n	800be42 <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800be74:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800be78:	4618      	mov	r0, r3
 800be7a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b088      	sub	sp, #32
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	460b      	mov	r3, r1
 800be8c:	70fb      	strb	r3, [r7, #3]
 800be8e:	4613      	mov	r3, r2
 800be90:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d101      	bne.n	800be9c <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be98:	2302      	movs	r3, #2
 800be9a:	e02e      	b.n	800befa <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800be9c:	2306      	movs	r3, #6
 800be9e:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800bea0:	78bb      	ldrb	r3, [r7, #2]
 800bea2:	2b7f      	cmp	r3, #127	; 0x7f
 800bea4:	d104      	bne.n	800beb0 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800bea6:	78fb      	ldrb	r3, [r7, #3]
 800bea8:	2b04      	cmp	r3, #4
 800beaa:	d001      	beq.n	800beb0 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800beac:	2303      	movs	r3, #3
 800beae:	e024      	b.n	800befa <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800beb0:	2300      	movs	r3, #0
 800beb2:	60fb      	str	r3, [r7, #12]
 800beb4:	f107 0310 	add.w	r3, r7, #16
 800beb8:	2200      	movs	r2, #0
 800beba:	601a      	str	r2, [r3, #0]
 800bebc:	605a      	str	r2, [r3, #4]
 800bebe:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800bec0:	f107 030c 	add.w	r3, r7, #12
 800bec4:	78fa      	ldrb	r2, [r7, #3]
 800bec6:	2110      	movs	r1, #16
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7ff ff7c 	bl	800bdc6 <SecureElementAesEncrypt>
 800bece:	4603      	mov	r3, r0
 800bed0:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bed2:	7ffb      	ldrb	r3, [r7, #31]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d001      	beq.n	800bedc <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800bed8:	7ffb      	ldrb	r3, [r7, #31]
 800beda:	e00e      	b.n	800befa <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800bedc:	f107 020c 	add.w	r2, r7, #12
 800bee0:	78bb      	ldrb	r3, [r7, #2]
 800bee2:	4611      	mov	r1, r2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7ff fec3 	bl	800bc70 <SecureElementSetKey>
 800beea:	4603      	mov	r3, r0
 800beec:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800beee:	7ffb      	ldrb	r3, [r7, #31]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d001      	beq.n	800bef8 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800bef4:	7ffb      	ldrb	r3, [r7, #31]
 800bef6:	e000      	b.n	800befa <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bef8:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800befa:	4618      	mov	r0, r3
 800befc:	3720      	adds	r7, #32
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b086      	sub	sp, #24
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607b      	str	r3, [r7, #4]
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73fb      	strb	r3, [r7, #15]
 800bf10:	4613      	mov	r3, r2
 800bf12:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d005      	beq.n	800bf26 <SecureElementProcessJoinAccept+0x24>
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d002      	beq.n	800bf26 <SecureElementProcessJoinAccept+0x24>
 800bf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf26:	2302      	movs	r3, #2
 800bf28:	e064      	b.n	800bff4 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800bf2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf2e:	2b21      	cmp	r3, #33	; 0x21
 800bf30:	d901      	bls.n	800bf36 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bf32:	2305      	movs	r3, #5
 800bf34:	e05e      	b.n	800bff4 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800bf36:	2301      	movs	r3, #1
 800bf38:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800bf3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	461a      	mov	r2, r3
 800bf42:	6879      	ldr	r1, [r7, #4]
 800bf44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf46:	f00a f9c8 	bl	80162da <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	1c58      	adds	r0, r3, #1
 800bf4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	3b01      	subs	r3, #1
 800bf56:	b299      	uxth	r1, r3
 800bf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	7dfa      	ldrb	r2, [r7, #23]
 800bf5e:	f7ff ff32 	bl	800bdc6 <SecureElementAesEncrypt>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800bf68:	2307      	movs	r3, #7
 800bf6a:	e043      	b.n	800bff4 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6e:	330b      	adds	r3, #11
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	09db      	lsrs	r3, r3, #7
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf78:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800bf7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf82:	3b04      	subs	r3, #4
 800bf84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf86:	4413      	add	r3, r2
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800bf8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf90:	3b03      	subs	r3, #3
 800bf92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf94:	4413      	add	r3, r2
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	021b      	lsls	r3, r3, #8
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800bfa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfa4:	3b02      	subs	r3, #2
 800bfa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfa8:	4413      	add	r3, r2
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	041b      	lsls	r3, r3, #16
 800bfae:	693a      	ldr	r2, [r7, #16]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800bfb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfbc:	4413      	add	r3, r2
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	061b      	lsls	r3, r3, #24
 800bfc2:	693a      	ldr	r2, [r7, #16]
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800bfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10e      	bne.n	800bfee <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800bfd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	3b04      	subs	r3, #4
 800bfd8:	b299      	uxth	r1, r3
 800bfda:	2301      	movs	r3, #1
 800bfdc:	693a      	ldr	r2, [r7, #16]
 800bfde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfe0:	f7ff fec2 	bl	800bd68 <SecureElementVerifyAesCmac>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d003      	beq.n	800bff2 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e002      	b.n	800bff4 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800bfee:	2304      	movs	r3, #4
 800bff0:	e000      	b.n	800bff4 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d101      	bne.n	800c00e <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c00a:	2302      	movs	r3, #2
 800c00c:	e006      	b.n	800c01c <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c00e:	4b05      	ldr	r3, [pc, #20]	; (800c024 <SecureElementRandomNumber+0x28>)
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	4798      	blx	r3
 800c014:	4602      	mov	r2, r0
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	0801b848 	.word	0x0801b848

0800c028 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d101      	bne.n	800c03a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c036:	2302      	movs	r3, #2
 800c038:	e007      	b.n	800c04a <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c03a:	4b06      	ldr	r3, [pc, #24]	; (800c054 <SecureElementSetDevEui+0x2c>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2208      	movs	r2, #8
 800c040:	6879      	ldr	r1, [r7, #4]
 800c042:	4618      	mov	r0, r3
 800c044:	f00a f949 	bl	80162da <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	200002c0 	.word	0x200002c0

0800c058 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c058:	b480      	push	{r7}
 800c05a:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c05c:	4b02      	ldr	r3, [pc, #8]	; (800c068 <SecureElementGetDevEui+0x10>)
 800c05e:	681b      	ldr	r3, [r3, #0]
}
 800c060:	4618      	mov	r0, r3
 800c062:	46bd      	mov	sp, r7
 800c064:	bc80      	pop	{r7}
 800c066:	4770      	bx	lr
 800c068:	200002c0 	.word	0x200002c0

0800c06c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c07a:	2302      	movs	r3, #2
 800c07c:	e008      	b.n	800c090 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c07e:	4b06      	ldr	r3, [pc, #24]	; (800c098 <SecureElementSetJoinEui+0x2c>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	3308      	adds	r3, #8
 800c084:	2208      	movs	r2, #8
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	4618      	mov	r0, r3
 800c08a:	f00a f926 	bl	80162da <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	200002c0 	.word	0x200002c0

0800c09c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c09c:	b480      	push	{r7}
 800c09e:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c0a0:	4b03      	ldr	r3, [pc, #12]	; (800c0b0 <SecureElementGetJoinEui+0x14>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3308      	adds	r3, #8
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bc80      	pop	{r7}
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	200002c0 	.word	0x200002c0

0800c0b4 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800c0bc:	4a1a      	ldr	r2, [pc, #104]	; (800c128 <LmHandlerInit+0x74>)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c0c2:	4b1a      	ldr	r3, [pc, #104]	; (800c12c <LmHandlerInit+0x78>)
 800c0c4:	4a1a      	ldr	r2, [pc, #104]	; (800c130 <LmHandlerInit+0x7c>)
 800c0c6:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c0c8:	4b18      	ldr	r3, [pc, #96]	; (800c12c <LmHandlerInit+0x78>)
 800c0ca:	4a1a      	ldr	r2, [pc, #104]	; (800c134 <LmHandlerInit+0x80>)
 800c0cc:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c0ce:	4b17      	ldr	r3, [pc, #92]	; (800c12c <LmHandlerInit+0x78>)
 800c0d0:	4a19      	ldr	r2, [pc, #100]	; (800c138 <LmHandlerInit+0x84>)
 800c0d2:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c0d4:	4b15      	ldr	r3, [pc, #84]	; (800c12c <LmHandlerInit+0x78>)
 800c0d6:	4a19      	ldr	r2, [pc, #100]	; (800c13c <LmHandlerInit+0x88>)
 800c0d8:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c0da:	4b13      	ldr	r3, [pc, #76]	; (800c128 <LmHandlerInit+0x74>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a17      	ldr	r2, [pc, #92]	; (800c140 <LmHandlerInit+0x8c>)
 800c0e2:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c0e4:	4b10      	ldr	r3, [pc, #64]	; (800c128 <LmHandlerInit+0x74>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	4a15      	ldr	r2, [pc, #84]	; (800c140 <LmHandlerInit+0x8c>)
 800c0ec:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c0ee:	4b0e      	ldr	r3, [pc, #56]	; (800c128 <LmHandlerInit+0x74>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	4a12      	ldr	r2, [pc, #72]	; (800c140 <LmHandlerInit+0x8c>)
 800c0f6:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c0f8:	4b11      	ldr	r3, [pc, #68]	; (800c140 <LmHandlerInit+0x8c>)
 800c0fa:	4a12      	ldr	r2, [pc, #72]	; (800c144 <LmHandlerInit+0x90>)
 800c0fc:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c0fe:	4b0a      	ldr	r3, [pc, #40]	; (800c128 <LmHandlerInit+0x74>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	4a0e      	ldr	r2, [pc, #56]	; (800c140 <LmHandlerInit+0x8c>)
 800c106:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c108:	490f      	ldr	r1, [pc, #60]	; (800c148 <LmHandlerInit+0x94>)
 800c10a:	2000      	movs	r0, #0
 800c10c:	f000 fcfe 	bl	800cb0c <LmHandlerPackageRegister>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d002      	beq.n	800c11c <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800c116:	f04f 33ff 	mov.w	r3, #4294967295
 800c11a:	e000      	b.n	800c11e <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	200002e8 	.word	0x200002e8
 800c12c:	200002ec 	.word	0x200002ec
 800c130:	0800c861 	.word	0x0800c861
 800c134:	0800c8c9 	.word	0x0800c8c9
 800c138:	0800c9a9 	.word	0x0800c9a9
 800c13c:	0800ca6d 	.word	0x0800ca6d
 800c140:	200002fc 	.word	0x200002fc
 800c144:	0800cd7d 	.word	0x0800cd7d
 800c148:	200000b8 	.word	0x200000b8

0800c14c <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c14e:	b099      	sub	sp, #100	; 0x64
 800c150:	af08      	add	r7, sp, #32
 800c152:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800c154:	2300      	movs	r3, #0
 800c156:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c158:	2210      	movs	r2, #16
 800c15a:	6879      	ldr	r1, [r7, #4]
 800c15c:	4882      	ldr	r0, [pc, #520]	; (800c368 <LmHandlerConfigure+0x21c>)
 800c15e:	f00d fa8f 	bl	8019680 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800c162:	f7fe fb5f 	bl	800a824 <LoraInfo_GetPtr>
 800c166:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c168:	4b7f      	ldr	r3, [pc, #508]	; (800c368 <LmHandlerConfigure+0x21c>)
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	461a      	mov	r2, r3
 800c16e:	2301      	movs	r3, #1
 800c170:	4093      	lsls	r3, r2
 800c172:	461a      	mov	r2, r3
 800c174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	4013      	ands	r3, r2
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00c      	beq.n	800c198 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c17e:	4b7a      	ldr	r3, [pc, #488]	; (800c368 <LmHandlerConfigure+0x21c>)
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	461a      	mov	r2, r3
 800c184:	4979      	ldr	r1, [pc, #484]	; (800c36c <LmHandlerConfigure+0x220>)
 800c186:	487a      	ldr	r0, [pc, #488]	; (800c370 <LmHandlerConfigure+0x224>)
 800c188:	f004 fb1a 	bl	80107c0 <LoRaMacInitialization>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d009      	beq.n	800c1a6 <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800c192:	f04f 33ff 	mov.w	r3, #4294967295
 800c196:	e0e2      	b.n	800c35e <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c198:	4b76      	ldr	r3, [pc, #472]	; (800c374 <LmHandlerConfigure+0x228>)
 800c19a:	2201      	movs	r2, #1
 800c19c:	2100      	movs	r1, #0
 800c19e:	2000      	movs	r0, #0
 800c1a0:	f00e f9b6 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c1a4:	e7fe      	b.n	800c1a4 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800c1a6:	f000 fdfa 	bl	800cd9e <NvmDataMgmtRestore>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800c1ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d003      	beq.n	800c1bc <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800c1b4:	4b70      	ldr	r3, [pc, #448]	; (800c378 <LmHandlerConfigure+0x22c>)
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	701a      	strb	r2, [r3, #0]
 800c1ba:	e002      	b.n	800c1c2 <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800c1bc:	4b6e      	ldr	r3, [pc, #440]	; (800c378 <LmHandlerConfigure+0x22c>)
 800c1be:	2200      	movs	r2, #0
 800c1c0:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c1c6:	f107 0314 	add.w	r3, r7, #20
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f004 fe42 	bl	8010e54 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	2208      	movs	r2, #8
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	4869      	ldr	r0, [pc, #420]	; (800c37c <LmHandlerConfigure+0x230>)
 800c1d8:	f00a f87f 	bl	80162da <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c1dc:	2303      	movs	r3, #3
 800c1de:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c1e0:	f107 0314 	add.w	r3, r7, #20
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f004 fe35 	bl	8010e54 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	2208      	movs	r2, #8
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4863      	ldr	r0, [pc, #396]	; (800c380 <LmHandlerConfigure+0x234>)
 800c1f2:	f00a f872 	bl	80162da <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c1f6:	4b63      	ldr	r3, [pc, #396]	; (800c384 <LmHandlerConfigure+0x238>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	4798      	blx	r3
 800c1fe:	4603      	mov	r3, r0
 800c200:	4a5e      	ldr	r2, [pc, #376]	; (800c37c <LmHandlerConfigure+0x230>)
 800c202:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800c204:	2306      	movs	r3, #6
 800c206:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c208:	4b5c      	ldr	r3, [pc, #368]	; (800c37c <LmHandlerConfigure+0x230>)
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c20e:	f107 0314 	add.w	r3, r7, #20
 800c212:	4618      	mov	r0, r3
 800c214:	f004 ff7c 	bl	8011110 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c218:	4b58      	ldr	r3, [pc, #352]	; (800c37c <LmHandlerConfigure+0x230>)
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	461a      	mov	r2, r3
 800c21e:	4b57      	ldr	r3, [pc, #348]	; (800c37c <LmHandlerConfigure+0x230>)
 800c220:	785b      	ldrb	r3, [r3, #1]
 800c222:	4619      	mov	r1, r3
 800c224:	4b55      	ldr	r3, [pc, #340]	; (800c37c <LmHandlerConfigure+0x230>)
 800c226:	789b      	ldrb	r3, [r3, #2]
 800c228:	4618      	mov	r0, r3
 800c22a:	4b54      	ldr	r3, [pc, #336]	; (800c37c <LmHandlerConfigure+0x230>)
 800c22c:	78db      	ldrb	r3, [r3, #3]
 800c22e:	461c      	mov	r4, r3
 800c230:	4b52      	ldr	r3, [pc, #328]	; (800c37c <LmHandlerConfigure+0x230>)
 800c232:	791b      	ldrb	r3, [r3, #4]
 800c234:	461d      	mov	r5, r3
 800c236:	4b51      	ldr	r3, [pc, #324]	; (800c37c <LmHandlerConfigure+0x230>)
 800c238:	795b      	ldrb	r3, [r3, #5]
 800c23a:	461e      	mov	r6, r3
 800c23c:	4b4f      	ldr	r3, [pc, #316]	; (800c37c <LmHandlerConfigure+0x230>)
 800c23e:	799b      	ldrb	r3, [r3, #6]
 800c240:	603b      	str	r3, [r7, #0]
 800c242:	4b4e      	ldr	r3, [pc, #312]	; (800c37c <LmHandlerConfigure+0x230>)
 800c244:	79db      	ldrb	r3, [r3, #7]
 800c246:	9307      	str	r3, [sp, #28]
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	9306      	str	r3, [sp, #24]
 800c24c:	9605      	str	r6, [sp, #20]
 800c24e:	9504      	str	r5, [sp, #16]
 800c250:	9403      	str	r4, [sp, #12]
 800c252:	9002      	str	r0, [sp, #8]
 800c254:	9101      	str	r1, [sp, #4]
 800c256:	9200      	str	r2, [sp, #0]
 800c258:	4b4b      	ldr	r3, [pc, #300]	; (800c388 <LmHandlerConfigure+0x23c>)
 800c25a:	2200      	movs	r2, #0
 800c25c:	2100      	movs	r1, #0
 800c25e:	2002      	movs	r0, #2
 800c260:	f00e f956 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c264:	4b45      	ldr	r3, [pc, #276]	; (800c37c <LmHandlerConfigure+0x230>)
 800c266:	7a1b      	ldrb	r3, [r3, #8]
 800c268:	461a      	mov	r2, r3
 800c26a:	4b44      	ldr	r3, [pc, #272]	; (800c37c <LmHandlerConfigure+0x230>)
 800c26c:	7a5b      	ldrb	r3, [r3, #9]
 800c26e:	4619      	mov	r1, r3
 800c270:	4b42      	ldr	r3, [pc, #264]	; (800c37c <LmHandlerConfigure+0x230>)
 800c272:	7a9b      	ldrb	r3, [r3, #10]
 800c274:	4618      	mov	r0, r3
 800c276:	4b41      	ldr	r3, [pc, #260]	; (800c37c <LmHandlerConfigure+0x230>)
 800c278:	7adb      	ldrb	r3, [r3, #11]
 800c27a:	461c      	mov	r4, r3
 800c27c:	4b3f      	ldr	r3, [pc, #252]	; (800c37c <LmHandlerConfigure+0x230>)
 800c27e:	7b1b      	ldrb	r3, [r3, #12]
 800c280:	461d      	mov	r5, r3
 800c282:	4b3e      	ldr	r3, [pc, #248]	; (800c37c <LmHandlerConfigure+0x230>)
 800c284:	7b5b      	ldrb	r3, [r3, #13]
 800c286:	461e      	mov	r6, r3
 800c288:	4b3c      	ldr	r3, [pc, #240]	; (800c37c <LmHandlerConfigure+0x230>)
 800c28a:	7b9b      	ldrb	r3, [r3, #14]
 800c28c:	603b      	str	r3, [r7, #0]
 800c28e:	4b3b      	ldr	r3, [pc, #236]	; (800c37c <LmHandlerConfigure+0x230>)
 800c290:	7bdb      	ldrb	r3, [r3, #15]
 800c292:	9307      	str	r3, [sp, #28]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	9306      	str	r3, [sp, #24]
 800c298:	9605      	str	r6, [sp, #20]
 800c29a:	9504      	str	r5, [sp, #16]
 800c29c:	9403      	str	r4, [sp, #12]
 800c29e:	9002      	str	r0, [sp, #8]
 800c2a0:	9101      	str	r1, [sp, #4]
 800c2a2:	9200      	str	r2, [sp, #0]
 800c2a4:	4b39      	ldr	r3, [pc, #228]	; (800c38c <LmHandlerConfigure+0x240>)
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	2002      	movs	r0, #2
 800c2ac:	f00e f930 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800c2b0:	4b37      	ldr	r3, [pc, #220]	; (800c390 <LmHandlerConfigure+0x244>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	4b37      	ldr	r3, [pc, #220]	; (800c394 <LmHandlerConfigure+0x248>)
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	4b36      	ldr	r3, [pc, #216]	; (800c398 <LmHandlerConfigure+0x24c>)
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	4b36      	ldr	r3, [pc, #216]	; (800c39c <LmHandlerConfigure+0x250>)
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	9303      	str	r3, [sp, #12]
 800c2c8:	9002      	str	r0, [sp, #8]
 800c2ca:	9101      	str	r1, [sp, #4]
 800c2cc:	9200      	str	r2, [sp, #0]
 800c2ce:	4b34      	ldr	r3, [pc, #208]	; (800c3a0 <LmHandlerConfigure+0x254>)
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	2002      	movs	r0, #2
 800c2d6:	f00e f91b 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c2da:	230f      	movs	r3, #15
 800c2dc:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c2e2:	f107 0314 	add.w	r3, r7, #20
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f004 ff12 	bl	8011110 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800c2ec:	2305      	movs	r3, #5
 800c2ee:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c2f4:	f107 0314 	add.w	r3, r7, #20
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f004 ff09 	bl	8011110 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c2fe:	2310      	movs	r3, #16
 800c300:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c302:	2300      	movs	r3, #0
 800c304:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c306:	f107 0314 	add.w	r3, r7, #20
 800c30a:	4618      	mov	r0, r3
 800c30c:	f004 ff00 	bl	8011110 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c310:	2304      	movs	r3, #4
 800c312:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c314:	4b14      	ldr	r3, [pc, #80]	; (800c368 <LmHandlerConfigure+0x21c>)
 800c316:	789b      	ldrb	r3, [r3, #2]
 800c318:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c31a:	f107 0314 	add.w	r3, r7, #20
 800c31e:	4618      	mov	r0, r3
 800c320:	f004 fef6 	bl	8011110 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c324:	230f      	movs	r3, #15
 800c326:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c328:	4b0f      	ldr	r3, [pc, #60]	; (800c368 <LmHandlerConfigure+0x21c>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	f107 020c 	add.w	r2, r7, #12
 800c330:	4611      	mov	r1, r2
 800c332:	4618      	mov	r0, r3
 800c334:	f007 fcc6 	bl	8013cc4 <RegionGetPhyParam>
 800c338:	4603      	mov	r3, r0
 800c33a:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	bf14      	ite	ne
 800c342:	2301      	movne	r3, #1
 800c344:	2300      	moveq	r3, #0
 800c346:	b2da      	uxtb	r2, r3
 800c348:	4b07      	ldr	r3, [pc, #28]	; (800c368 <LmHandlerConfigure+0x21c>)
 800c34a:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800c34c:	2014      	movs	r0, #20
 800c34e:	f000 fa6f 	bl	800c830 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c352:	4b05      	ldr	r3, [pc, #20]	; (800c368 <LmHandlerConfigure+0x21c>)
 800c354:	795b      	ldrb	r3, [r3, #5]
 800c356:	4618      	mov	r0, r3
 800c358:	f005 fc4e 	bl	8011bf8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3744      	adds	r7, #68	; 0x44
 800c362:	46bd      	mov	sp, r7
 800c364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c366:	bf00      	nop
 800c368:	200002d8 	.word	0x200002d8
 800c36c:	200002fc 	.word	0x200002fc
 800c370:	200002ec 	.word	0x200002ec
 800c374:	0801b0bc 	.word	0x0801b0bc
 800c378:	2000041a 	.word	0x2000041a
 800c37c:	200000a0 	.word	0x200000a0
 800c380:	200000a8 	.word	0x200000a8
 800c384:	200002e8 	.word	0x200002e8
 800c388:	0801b108 	.word	0x0801b108
 800c38c:	0801b144 	.word	0x0801b144
 800c390:	200000b7 	.word	0x200000b7
 800c394:	200000b6 	.word	0x200000b6
 800c398:	200000b5 	.word	0x200000b5
 800c39c:	200000b4 	.word	0x200000b4
 800c3a0:	0801b180 	.word	0x0801b180

0800c3a4 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c3a8:	f002 f9b8 	bl	800e71c <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c3ac:	f000 fc9a 	bl	800cce4 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800c3b0:	f000 fcee 	bl	800cd90 <NvmDataMgmtStore>
}
 800c3b4:	bf00      	nop
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b090      	sub	sp, #64	; 0x40
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	4603      	mov	r3, r0
 800c3c0:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c3c2:	79fb      	ldrb	r3, [r7, #7]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d111      	bne.n	800c3ec <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c3c8:	4b23      	ldr	r3, [pc, #140]	; (800c458 <LmHandlerJoin+0xa0>)
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800c3ce:	f004 fcab 	bl	8010d28 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c3d6:	4b21      	ldr	r3, [pc, #132]	; (800c45c <LmHandlerJoin+0xa4>)
 800c3d8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c3e0:	f107 0308 	add.w	r3, r7, #8
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f005 f9d1 	bl	801178c <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800c3ea:	e030      	b.n	800c44e <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c3ec:	4b1a      	ldr	r3, [pc, #104]	; (800c458 <LmHandlerJoin+0xa0>)
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c3f2:	4b1a      	ldr	r3, [pc, #104]	; (800c45c <LmHandlerJoin+0xa4>)
 800c3f4:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c3f8:	4b17      	ldr	r3, [pc, #92]	; (800c458 <LmHandlerJoin+0xa0>)
 800c3fa:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c3fc:	4b16      	ldr	r3, [pc, #88]	; (800c458 <LmHandlerJoin+0xa0>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800c402:	4b17      	ldr	r3, [pc, #92]	; (800c460 <LmHandlerJoin+0xa8>)
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	f083 0301 	eor.w	r3, r3, #1
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d008      	beq.n	800c422 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c410:	2327      	movs	r3, #39	; 0x27
 800c412:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c414:	4b13      	ldr	r3, [pc, #76]	; (800c464 <LmHandlerJoin+0xac>)
 800c416:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c418:	f107 031c 	add.w	r3, r7, #28
 800c41c:	4618      	mov	r0, r3
 800c41e:	f004 fe77 	bl	8011110 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c422:	f004 fc81 	bl	8010d28 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c426:	2301      	movs	r3, #1
 800c428:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c42a:	2301      	movs	r3, #1
 800c42c:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c430:	f107 031c 	add.w	r3, r7, #28
 800c434:	4618      	mov	r0, r3
 800c436:	f004 fe6b 	bl	8011110 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c43a:	4b0b      	ldr	r3, [pc, #44]	; (800c468 <LmHandlerJoin+0xb0>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	69db      	ldr	r3, [r3, #28]
 800c440:	4805      	ldr	r0, [pc, #20]	; (800c458 <LmHandlerJoin+0xa0>)
 800c442:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c444:	4b05      	ldr	r3, [pc, #20]	; (800c45c <LmHandlerJoin+0xa4>)
 800c446:	785b      	ldrb	r3, [r3, #1]
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 f917 	bl	800c67c <LmHandlerRequestClass>
}
 800c44e:	bf00      	nop
 800c450:	3740      	adds	r7, #64	; 0x40
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	200000c4 	.word	0x200000c4
 800c45c:	200002d8 	.word	0x200002d8
 800c460:	2000041a 	.word	0x2000041a
 800c464:	01000300 	.word	0x01000300
 800c468:	200002e8 	.word	0x200002e8

0800c46c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08a      	sub	sp, #40	; 0x28
 800c470:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c472:	2301      	movs	r3, #1
 800c474:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c476:	463b      	mov	r3, r7
 800c478:	4618      	mov	r0, r3
 800c47a:	f004 fceb 	bl	8010e54 <LoRaMacMibGetRequestConfirm>
 800c47e:	4603      	mov	r3, r0
 800c480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d106      	bne.n	800c49a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c48c:	793b      	ldrb	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c492:	2300      	movs	r3, #0
 800c494:	e002      	b.n	800c49c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c496:	2301      	movs	r3, #1
 800c498:	e000      	b.n	800c49c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c49a:	2300      	movs	r3, #0
    }
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3728      	adds	r7, #40	; 0x28
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b08c      	sub	sp, #48	; 0x30
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	607a      	str	r2, [r7, #4]
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	72fb      	strb	r3, [r7, #11]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c4b8:	23ff      	movs	r3, #255	; 0xff
 800c4ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c4be:	f001 fe97 	bl	800e1f0 <LoRaMacIsBusy>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c4c8:	f06f 0301 	mvn.w	r3, #1
 800c4cc:	e0b4      	b.n	800c638 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c4ce:	f7ff ffcd 	bl	800c46c <LmHandlerJoinStatus>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d007      	beq.n	800c4e8 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800c4d8:	4b59      	ldr	r3, [pc, #356]	; (800c640 <LmHandlerSend+0x19c>)
 800c4da:	789b      	ldrb	r3, [r3, #2]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7ff ff6b 	bl	800c3b8 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c4e2:	f06f 0302 	mvn.w	r3, #2
 800c4e6:	e0a7      	b.n	800c638 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c4e8:	4b56      	ldr	r3, [pc, #344]	; (800c644 <LmHandlerSend+0x1a0>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	4798      	blx	r3
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d00d      	beq.n	800c512 <LmHandlerSend+0x6e>
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	781a      	ldrb	r2, [r3, #0]
 800c4fa:	4b52      	ldr	r3, [pc, #328]	; (800c644 <LmHandlerSend+0x1a0>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	429a      	cmp	r2, r3
 800c502:	d006      	beq.n	800c512 <LmHandlerSend+0x6e>
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d002      	beq.n	800c512 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c50c:	f06f 0303 	mvn.w	r3, #3
 800c510:	e092      	b.n	800c638 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c512:	4b4d      	ldr	r3, [pc, #308]	; (800c648 <LmHandlerSend+0x1a4>)
 800c514:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c518:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	785b      	ldrb	r3, [r3, #1]
 800c520:	f107 0214 	add.w	r2, r7, #20
 800c524:	4611      	mov	r1, r2
 800c526:	4618      	mov	r0, r3
 800c528:	f004 fc0c 	bl	8010d44 <LoRaMacQueryTxPossible>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d009      	beq.n	800c546 <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800c532:	4b46      	ldr	r3, [pc, #280]	; (800c64c <LmHandlerSend+0x1a8>)
 800c534:	2200      	movs	r2, #0
 800c536:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c538:	2300      	movs	r3, #0
 800c53a:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c53c:	2300      	movs	r3, #0
 800c53e:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c544:	e017      	b.n	800c576 <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800c546:	4a41      	ldr	r2, [pc, #260]	; (800c64c <LmHandlerSend+0x1a8>)
 800c548:	7afb      	ldrb	r3, [r7, #11]
 800c54a:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	785b      	ldrb	r3, [r3, #1]
 800c556:	b29b      	uxth	r3, r3
 800c558:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800c560:	7afb      	ldrb	r3, [r7, #11]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d102      	bne.n	800c56c <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c566:	2300      	movs	r3, #0
 800c568:	763b      	strb	r3, [r7, #24]
 800c56a:	e004      	b.n	800c576 <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800c56c:	2301      	movs	r3, #1
 800c56e:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c570:	2308      	movs	r3, #8
 800c572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800c576:	4b35      	ldr	r3, [pc, #212]	; (800c64c <LmHandlerSend+0x1a8>)
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	330c      	adds	r3, #12
 800c57c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c580:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c584:	4b30      	ldr	r3, [pc, #192]	; (800c648 <LmHandlerSend+0x1a4>)
 800c586:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c58a:	4b30      	ldr	r3, [pc, #192]	; (800c64c <LmHandlerSend+0x1a8>)
 800c58c:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c58e:	7aba      	ldrb	r2, [r7, #10]
 800c590:	f107 0318 	add.w	r3, r7, #24
 800c594:	4611      	mov	r1, r2
 800c596:	4618      	mov	r0, r3
 800c598:	f005 fa38 	bl	8011a0c <LoRaMacMcpsRequest>
 800c59c:	4603      	mov	r3, r0
 800c59e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d002      	beq.n	800c5ae <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c5a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800c5ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c5b2:	2b11      	cmp	r3, #17
 800c5b4:	d83a      	bhi.n	800c62c <LmHandlerSend+0x188>
 800c5b6:	a201      	add	r2, pc, #4	; (adr r2, 800c5bc <LmHandlerSend+0x118>)
 800c5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5bc:	0800c605 	.word	0x0800c605
 800c5c0:	0800c60d 	.word	0x0800c60d
 800c5c4:	0800c62d 	.word	0x0800c62d
 800c5c8:	0800c62d 	.word	0x0800c62d
 800c5cc:	0800c62d 	.word	0x0800c62d
 800c5d0:	0800c62d 	.word	0x0800c62d
 800c5d4:	0800c62d 	.word	0x0800c62d
 800c5d8:	0800c615 	.word	0x0800c615
 800c5dc:	0800c62d 	.word	0x0800c62d
 800c5e0:	0800c62d 	.word	0x0800c62d
 800c5e4:	0800c62d 	.word	0x0800c62d
 800c5e8:	0800c625 	.word	0x0800c625
 800c5ec:	0800c62d 	.word	0x0800c62d
 800c5f0:	0800c62d 	.word	0x0800c62d
 800c5f4:	0800c60d 	.word	0x0800c60d
 800c5f8:	0800c60d 	.word	0x0800c60d
 800c5fc:	0800c60d 	.word	0x0800c60d
 800c600:	0800c61d 	.word	0x0800c61d
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c604:	2300      	movs	r3, #0
 800c606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c60a:	e013      	b.n	800c634 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c60c:	23fe      	movs	r3, #254	; 0xfe
 800c60e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c612:	e00f      	b.n	800c634 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c614:	23fd      	movs	r3, #253	; 0xfd
 800c616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c61a:	e00b      	b.n	800c634 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c61c:	23fb      	movs	r3, #251	; 0xfb
 800c61e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c622:	e007      	b.n	800c634 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c624:	23fa      	movs	r3, #250	; 0xfa
 800c626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c62a:	e003      	b.n	800c634 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c62c:	23ff      	movs	r3, #255	; 0xff
 800c62e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c632:	bf00      	nop
    }

    return lmhStatus;
 800c634:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3730      	adds	r7, #48	; 0x30
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	200000c4 	.word	0x200000c4
 800c644:	200002c4 	.word	0x200002c4
 800c648:	200002d8 	.word	0x200002d8
 800c64c:	20000310 	.word	0x20000310

0800c650 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c656:	230a      	movs	r3, #10
 800c658:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c65a:	463b      	mov	r3, r7
 800c65c:	4618      	mov	r0, r3
 800c65e:	f005 f895 	bl	801178c <LoRaMacMlmeRequest>
 800c662:	4603      	mov	r3, r0
 800c664:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800c666:	7dfb      	ldrb	r3, [r7, #23]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c66c:	2300      	movs	r3, #0
 800c66e:	e001      	b.n	800c674 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c670:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c674:	4618      	mov	r0, r3
 800c676:	3718      	adds	r7, #24
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b08c      	sub	sp, #48	; 0x30
 800c680:	af00      	add	r7, sp, #0
 800c682:	4603      	mov	r3, r0
 800c684:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c686:	2300      	movs	r3, #0
 800c688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800c68c:	f001 fdb0 	bl	800e1f0 <LoRaMacIsBusy>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d002      	beq.n	800c69c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c696:	f06f 0301 	mvn.w	r3, #1
 800c69a:	e07b      	b.n	800c794 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c69c:	f7ff fee6 	bl	800c46c <LmHandlerJoinStatus>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d002      	beq.n	800c6ac <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c6a6:	f06f 0302 	mvn.w	r3, #2
 800c6aa:	e073      	b.n	800c794 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c6b0:	f107 0308 	add.w	r3, r7, #8
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f004 fbcd 	bl	8010e54 <LoRaMacMibGetRequestConfirm>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c4:	e066      	b.n	800c794 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800c6c6:	7b3b      	ldrb	r3, [r7, #12]
 800c6c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c6cc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c6d0:	79fb      	ldrb	r3, [r7, #7]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d055      	beq.n	800c782 <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800c6d6:	79fb      	ldrb	r3, [r7, #7]
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d02c      	beq.n	800c736 <LmHandlerRequestClass+0xba>
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	dc52      	bgt.n	800c786 <LmHandlerRequestClass+0x10a>
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d002      	beq.n	800c6ea <LmHandlerRequestClass+0x6e>
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d022      	beq.n	800c72e <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800c6e8:	e04d      	b.n	800c786 <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800c6ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d04b      	beq.n	800c78a <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800c6f2:	79fb      	ldrb	r3, [r7, #7]
 800c6f4:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c6f6:	f107 0308 	add.w	r3, r7, #8
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f004 fd08 	bl	8011110 <LoRaMacMibSetRequestConfirm>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10f      	bne.n	800c726 <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	4618      	mov	r0, r3
 800c70a:	f000 fb1f 	bl	800cd4c <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c70e:	4b23      	ldr	r3, [pc, #140]	; (800c79c <LmHandlerRequestClass+0x120>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c714:	2b00      	cmp	r3, #0
 800c716:	d038      	beq.n	800c78a <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c718:	4b20      	ldr	r3, [pc, #128]	; (800c79c <LmHandlerRequestClass+0x120>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71e:	79fa      	ldrb	r2, [r7, #7]
 800c720:	4610      	mov	r0, r2
 800c722:	4798      	blx	r3
            break;
 800c724:	e031      	b.n	800c78a <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c726:	23ff      	movs	r3, #255	; 0xff
 800c728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c72c:	e02d      	b.n	800c78a <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c72e:	23ff      	movs	r3, #255	; 0xff
 800c730:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c734:	e02c      	b.n	800c790 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800c736:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c73e:	23ff      	movs	r3, #255	; 0xff
 800c740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c744:	e023      	b.n	800c78e <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800c746:	79fb      	ldrb	r3, [r7, #7]
 800c748:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c74a:	f107 0308 	add.w	r3, r7, #8
 800c74e:	4618      	mov	r0, r3
 800c750:	f004 fcde 	bl	8011110 <LoRaMacMibSetRequestConfirm>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10f      	bne.n	800c77a <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800c75a:	79fb      	ldrb	r3, [r7, #7]
 800c75c:	4618      	mov	r0, r3
 800c75e:	f000 faf5 	bl	800cd4c <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c762:	4b0e      	ldr	r3, [pc, #56]	; (800c79c <LmHandlerRequestClass+0x120>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d010      	beq.n	800c78e <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c76c:	4b0b      	ldr	r3, [pc, #44]	; (800c79c <LmHandlerRequestClass+0x120>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c772:	79fa      	ldrb	r2, [r7, #7]
 800c774:	4610      	mov	r0, r2
 800c776:	4798      	blx	r3
            break;
 800c778:	e009      	b.n	800c78e <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c77a:	23ff      	movs	r3, #255	; 0xff
 800c77c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c780:	e005      	b.n	800c78e <LmHandlerRequestClass+0x112>
        }
    }
 800c782:	bf00      	nop
 800c784:	e004      	b.n	800c790 <LmHandlerRequestClass+0x114>
            break;
 800c786:	bf00      	nop
 800c788:	e002      	b.n	800c790 <LmHandlerRequestClass+0x114>
            break;
 800c78a:	bf00      	nop
 800c78c:	e000      	b.n	800c790 <LmHandlerRequestClass+0x114>
            break;
 800c78e:	bf00      	nop
    return errorStatus;
 800c790:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c794:	4618      	mov	r0, r3
 800c796:	3730      	adds	r7, #48	; 0x30
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	200002e8 	.word	0x200002e8

0800c7a0 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b08c      	sub	sp, #48	; 0x30
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d102      	bne.n	800c7b4 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b2:	e010      	b.n	800c7d6 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c7b8:	f107 030c 	add.w	r3, r7, #12
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f004 fb49 	bl	8010e54 <LoRaMacMibGetRequestConfirm>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d002      	beq.n	800c7ce <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7cc:	e003      	b.n	800c7d6 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c7ce:	7c3a      	ldrb	r2, [r7, #16]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c7d4:	2300      	movs	r3, #0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3730      	adds	r7, #48	; 0x30
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08c      	sub	sp, #48	; 0x30
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d102      	bne.n	800c7f4 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c7f2:	e016      	b.n	800c822 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c7f4:	231f      	movs	r3, #31
 800c7f6:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c7f8:	f107 030c 	add.w	r3, r7, #12
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f004 fb29 	bl	8010e54 <LoRaMacMibGetRequestConfirm>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d002      	beq.n	800c80e <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c808:	f04f 33ff 	mov.w	r3, #4294967295
 800c80c:	e009      	b.n	800c822 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c80e:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f993 2000 	ldrsb.w	r2, [r3]
 800c81c:	4b03      	ldr	r3, [pc, #12]	; (800c82c <LmHandlerGetTxDatarate+0x4c>)
 800c81e:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3730      	adds	r7, #48	; 0x30
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	200002d8 	.word	0x200002d8

0800c830 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b08c      	sub	sp, #48	; 0x30
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c838:	2322      	movs	r3, #34	; 0x22
 800c83a:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c840:	f107 030c 	add.w	r3, r7, #12
 800c844:	4618      	mov	r0, r3
 800c846:	f004 fc63 	bl	8011110 <LoRaMacMibSetRequestConfirm>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c850:	f04f 33ff 	mov.w	r3, #4294967295
 800c854:	e000      	b.n	800c858 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c856:	2300      	movs	r3, #0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3730      	adds	r7, #48	; 0x30
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c868:	4b15      	ldr	r3, [pc, #84]	; (800c8c0 <McpsConfirm+0x60>)
 800c86a:	2201      	movs	r2, #1
 800c86c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	785a      	ldrb	r2, [r3, #1]
 800c872:	4b13      	ldr	r3, [pc, #76]	; (800c8c0 <McpsConfirm+0x60>)
 800c874:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	789b      	ldrb	r3, [r3, #2]
 800c87a:	b25a      	sxtb	r2, r3
 800c87c:	4b10      	ldr	r3, [pc, #64]	; (800c8c0 <McpsConfirm+0x60>)
 800c87e:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	4a0e      	ldr	r2, [pc, #56]	; (800c8c0 <McpsConfirm+0x60>)
 800c886:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c88e:	4b0c      	ldr	r3, [pc, #48]	; (800c8c0 <McpsConfirm+0x60>)
 800c890:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	b2da      	uxtb	r2, r3
 800c898:	4b09      	ldr	r3, [pc, #36]	; (800c8c0 <McpsConfirm+0x60>)
 800c89a:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	791b      	ldrb	r3, [r3, #4]
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <McpsConfirm+0x60>)
 800c8a4:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800c8a6:	4b07      	ldr	r3, [pc, #28]	; (800c8c4 <McpsConfirm+0x64>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	6a1b      	ldr	r3, [r3, #32]
 800c8ac:	4804      	ldr	r0, [pc, #16]	; (800c8c0 <McpsConfirm+0x60>)
 800c8ae:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c8b0:	6879      	ldr	r1, [r7, #4]
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	f000 f99a 	bl	800cbec <LmHandlerPackagesNotify>
}
 800c8b8:	bf00      	nop
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	20000310 	.word	0x20000310
 800c8c4:	200002e8 	.word	0x200002e8

0800c8c8 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b088      	sub	sp, #32
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800c8d6:	4b32      	ldr	r3, [pc, #200]	; (800c9a0 <McpsIndication+0xd8>)
 800c8d8:	2201      	movs	r2, #1
 800c8da:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	785a      	ldrb	r2, [r3, #1]
 800c8e0:	4b2f      	ldr	r3, [pc, #188]	; (800c9a0 <McpsIndication+0xd8>)
 800c8e2:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c8e4:	4b2e      	ldr	r3, [pc, #184]	; (800c9a0 <McpsIndication+0xd8>)
 800c8e6:	785b      	ldrb	r3, [r3, #1]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d154      	bne.n	800c996 <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	791b      	ldrb	r3, [r3, #4]
 800c8f0:	b25a      	sxtb	r2, r3
 800c8f2:	4b2b      	ldr	r3, [pc, #172]	; (800c9a0 <McpsIndication+0xd8>)
 800c8f4:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8fc:	b25a      	sxtb	r2, r3
 800c8fe:	4b28      	ldr	r3, [pc, #160]	; (800c9a0 <McpsIndication+0xd8>)
 800c900:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c908:	4b25      	ldr	r3, [pc, #148]	; (800c9a0 <McpsIndication+0xd8>)
 800c90a:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	78db      	ldrb	r3, [r3, #3]
 800c910:	b25a      	sxtb	r2, r3
 800c912:	4b23      	ldr	r3, [pc, #140]	; (800c9a0 <McpsIndication+0xd8>)
 800c914:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	4a21      	ldr	r2, [pc, #132]	; (800c9a0 <McpsIndication+0xd8>)
 800c91c:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	78db      	ldrb	r3, [r3, #3]
 800c922:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	7b1b      	ldrb	r3, [r3, #12]
 800c928:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800c930:	4b1c      	ldr	r3, [pc, #112]	; (800c9a4 <McpsIndication+0xdc>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c936:	f107 0218 	add.w	r2, r7, #24
 800c93a:	4919      	ldr	r1, [pc, #100]	; (800c9a0 <McpsIndication+0xd8>)
 800c93c:	4610      	mov	r0, r2
 800c93e:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800c940:	4b18      	ldr	r3, [pc, #96]	; (800c9a4 <McpsIndication+0xdc>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c946:	2b00      	cmp	r3, #0
 800c948:	d007      	beq.n	800c95a <McpsIndication+0x92>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	7e1b      	ldrb	r3, [r3, #24]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d003      	beq.n	800c95a <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c952:	4b14      	ldr	r3, [pc, #80]	; (800c9a4 <McpsIndication+0xdc>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c958:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c95a:	6879      	ldr	r1, [r7, #4]
 800c95c:	2001      	movs	r0, #1
 800c95e:	f000 f945 	bl	800cbec <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800c962:	f107 0317 	add.w	r3, r7, #23
 800c966:	4618      	mov	r0, r3
 800c968:	f7ff ff1a 	bl	800c7a0 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	795b      	ldrb	r3, [r3, #5]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d111      	bne.n	800c998 <McpsIndication+0xd0>
 800c974:	7dfb      	ldrb	r3, [r7, #23]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10e      	bne.n	800c998 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800c97a:	2300      	movs	r3, #0
 800c97c:	733b      	strb	r3, [r7, #12]
 800c97e:	2300      	movs	r3, #0
 800c980:	737b      	strb	r3, [r7, #13]
 800c982:	2300      	movs	r3, #0
 800c984:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800c986:	f107 000c 	add.w	r0, r7, #12
 800c98a:	2301      	movs	r3, #1
 800c98c:	2200      	movs	r2, #0
 800c98e:	2100      	movs	r1, #0
 800c990:	f7ff fd88 	bl	800c4a4 <LmHandlerSend>
 800c994:	e000      	b.n	800c998 <McpsIndication+0xd0>
        return;
 800c996:	bf00      	nop
    }
}
 800c998:	3720      	adds	r7, #32
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	200000c8 	.word	0x200000c8
 800c9a4:	200002e8 	.word	0x200002e8

0800c9a8 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08c      	sub	sp, #48	; 0x30
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c9b0:	4b28      	ldr	r3, [pc, #160]	; (800ca54 <MlmeConfirm+0xac>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	785a      	ldrb	r2, [r3, #1]
 800c9ba:	4b26      	ldr	r3, [pc, #152]	; (800ca54 <MlmeConfirm+0xac>)
 800c9bc:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800c9be:	4b26      	ldr	r3, [pc, #152]	; (800ca58 <MlmeConfirm+0xb0>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	6a1b      	ldr	r3, [r3, #32]
 800c9c4:	4823      	ldr	r0, [pc, #140]	; (800ca54 <MlmeConfirm+0xac>)
 800c9c6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c9c8:	6879      	ldr	r1, [r7, #4]
 800c9ca:	2002      	movs	r0, #2
 800c9cc:	f000 f90e 	bl	800cbec <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	2b0a      	cmp	r3, #10
 800c9d6:	d035      	beq.n	800ca44 <MlmeConfirm+0x9c>
 800c9d8:	2b0a      	cmp	r3, #10
 800c9da:	dc35      	bgt.n	800ca48 <MlmeConfirm+0xa0>
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d002      	beq.n	800c9e6 <MlmeConfirm+0x3e>
 800c9e0:	2b04      	cmp	r3, #4
 800c9e2:	d023      	beq.n	800ca2c <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800c9e4:	e030      	b.n	800ca48 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800c9e6:	2306      	movs	r3, #6
 800c9e8:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c9ea:	f107 030c 	add.w	r3, r7, #12
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f004 fa30 	bl	8010e54 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	4a19      	ldr	r2, [pc, #100]	; (800ca5c <MlmeConfirm+0xb4>)
 800c9f8:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800c9fa:	4819      	ldr	r0, [pc, #100]	; (800ca60 <MlmeConfirm+0xb8>)
 800c9fc:	f7ff fef0 	bl	800c7e0 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	785b      	ldrb	r3, [r3, #1]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d108      	bne.n	800ca1a <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ca08:	4b15      	ldr	r3, [pc, #84]	; (800ca60 <MlmeConfirm+0xb8>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800ca0e:	4b15      	ldr	r3, [pc, #84]	; (800ca64 <MlmeConfirm+0xbc>)
 800ca10:	785b      	ldrb	r3, [r3, #1]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7ff fe32 	bl	800c67c <LmHandlerRequestClass>
 800ca18:	e002      	b.n	800ca20 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800ca1a:	4b11      	ldr	r3, [pc, #68]	; (800ca60 <MlmeConfirm+0xb8>)
 800ca1c:	22ff      	movs	r2, #255	; 0xff
 800ca1e:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800ca20:	4b0d      	ldr	r3, [pc, #52]	; (800ca58 <MlmeConfirm+0xb0>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	69db      	ldr	r3, [r3, #28]
 800ca26:	480e      	ldr	r0, [pc, #56]	; (800ca60 <MlmeConfirm+0xb8>)
 800ca28:	4798      	blx	r3
        break;
 800ca2a:	e00e      	b.n	800ca4a <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800ca2c:	4b0e      	ldr	r3, [pc, #56]	; (800ca68 <MlmeConfirm+0xc0>)
 800ca2e:	2201      	movs	r2, #1
 800ca30:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	7a1a      	ldrb	r2, [r3, #8]
 800ca36:	4b0c      	ldr	r3, [pc, #48]	; (800ca68 <MlmeConfirm+0xc0>)
 800ca38:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	7a5a      	ldrb	r2, [r3, #9]
 800ca3e:	4b0a      	ldr	r3, [pc, #40]	; (800ca68 <MlmeConfirm+0xc0>)
 800ca40:	73da      	strb	r2, [r3, #15]
        break;
 800ca42:	e002      	b.n	800ca4a <MlmeConfirm+0xa2>
        break;
 800ca44:	bf00      	nop
 800ca46:	e000      	b.n	800ca4a <MlmeConfirm+0xa2>
        break;
 800ca48:	bf00      	nop
    }
}
 800ca4a:	bf00      	nop
 800ca4c:	3730      	adds	r7, #48	; 0x30
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	20000310 	.word	0x20000310
 800ca58:	200002e8 	.word	0x200002e8
 800ca5c:	200000a0 	.word	0x200000a0
 800ca60:	200000c4 	.word	0x200000c4
 800ca64:	200002d8 	.word	0x200002d8
 800ca68:	200000c8 	.word	0x200000c8

0800ca6c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ca76:	4b22      	ldr	r3, [pc, #136]	; (800cb00 <MlmeIndication+0x94>)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	785a      	ldrb	r2, [r3, #1]
 800ca80:	4b1f      	ldr	r3, [pc, #124]	; (800cb00 <MlmeIndication+0x94>)
 800ca82:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca8a:	b25a      	sxtb	r2, r3
 800ca8c:	4b1c      	ldr	r3, [pc, #112]	; (800cb00 <MlmeIndication+0x94>)
 800ca8e:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ca96:	4b1a      	ldr	r3, [pc, #104]	; (800cb00 <MlmeIndication+0x94>)
 800ca98:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	78db      	ldrb	r3, [r3, #3]
 800ca9e:	b25a      	sxtb	r2, r3
 800caa0:	4b17      	ldr	r3, [pc, #92]	; (800cb00 <MlmeIndication+0x94>)
 800caa2:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800caa4:	4b16      	ldr	r3, [pc, #88]	; (800cb00 <MlmeIndication+0x94>)
 800caa6:	785b      	ldrb	r3, [r3, #1]
 800caa8:	2b0e      	cmp	r3, #14
 800caaa:	d005      	beq.n	800cab8 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800caac:	4b15      	ldr	r3, [pc, #84]	; (800cb04 <MlmeIndication+0x98>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab2:	4913      	ldr	r1, [pc, #76]	; (800cb00 <MlmeIndication+0x94>)
 800cab4:	2000      	movs	r0, #0
 800cab6:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	2b07      	cmp	r3, #7
 800cabe:	d117      	bne.n	800caf0 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800cac0:	2300      	movs	r3, #0
 800cac2:	723b      	strb	r3, [r7, #8]
 800cac4:	2300      	movs	r3, #0
 800cac6:	727b      	strb	r3, [r7, #9]
 800cac8:	2300      	movs	r3, #0
 800caca:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800cacc:	4b0e      	ldr	r3, [pc, #56]	; (800cb08 <MlmeIndication+0x9c>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	4798      	blx	r3
 800cad4:	4603      	mov	r3, r0
 800cad6:	f083 0301 	eor.w	r3, r3, #1
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d009      	beq.n	800caf4 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800cae0:	f107 0008 	add.w	r0, r7, #8
 800cae4:	2301      	movs	r3, #1
 800cae6:	2200      	movs	r2, #0
 800cae8:	2100      	movs	r1, #0
 800caea:	f7ff fcdb 	bl	800c4a4 <LmHandlerSend>
            }
        }
        break;
 800caee:	e001      	b.n	800caf4 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800caf0:	bf00      	nop
 800caf2:	e000      	b.n	800caf6 <MlmeIndication+0x8a>
        break;
 800caf4:	bf00      	nop
    }
}
 800caf6:	bf00      	nop
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	200000c8 	.word	0x200000c8
 800cb04:	200002e8 	.word	0x200002e8
 800cb08:	200002c4 	.word	0x200002c4

0800cb0c <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	4603      	mov	r3, r0
 800cb14:	6039      	str	r1, [r7, #0]
 800cb16:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cb1c:	79fb      	ldrb	r3, [r7, #7]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d103      	bne.n	800cb2a <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cb22:	f000 f943 	bl	800cdac <LmhpCompliancePackageFactory>
 800cb26:	60f8      	str	r0, [r7, #12]
            break;
 800cb28:	e000      	b.n	800cb2c <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cb2a:	bf00      	nop
        }
    }
    if( package != NULL )
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d02b      	beq.n	800cb8a <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800cb32:	79fb      	ldrb	r3, [r7, #7]
 800cb34:	4918      	ldr	r1, [pc, #96]	; (800cb98 <LmHandlerPackageRegister+0x8c>)
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cb3c:	79fb      	ldrb	r3, [r7, #7]
 800cb3e:	4a16      	ldr	r2, [pc, #88]	; (800cb98 <LmHandlerPackageRegister+0x8c>)
 800cb40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb44:	4a15      	ldr	r2, [pc, #84]	; (800cb9c <LmHandlerPackageRegister+0x90>)
 800cb46:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800cb48:	79fb      	ldrb	r3, [r7, #7]
 800cb4a:	4a13      	ldr	r2, [pc, #76]	; (800cb98 <LmHandlerPackageRegister+0x8c>)
 800cb4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb50:	4a13      	ldr	r2, [pc, #76]	; (800cba0 <LmHandlerPackageRegister+0x94>)
 800cb52:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cb54:	79fb      	ldrb	r3, [r7, #7]
 800cb56:	4a10      	ldr	r2, [pc, #64]	; (800cb98 <LmHandlerPackageRegister+0x8c>)
 800cb58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb5c:	4a11      	ldr	r2, [pc, #68]	; (800cba4 <LmHandlerPackageRegister+0x98>)
 800cb5e:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cb60:	4b11      	ldr	r3, [pc, #68]	; (800cba8 <LmHandlerPackageRegister+0x9c>)
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	79fb      	ldrb	r3, [r7, #7]
 800cb66:	490c      	ldr	r1, [pc, #48]	; (800cb98 <LmHandlerPackageRegister+0x8c>)
 800cb68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cb6c:	6912      	ldr	r2, [r2, #16]
 800cb6e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cb70:	79fb      	ldrb	r3, [r7, #7]
 800cb72:	4a09      	ldr	r2, [pc, #36]	; (800cb98 <LmHandlerPackageRegister+0x8c>)
 800cb74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	4a0c      	ldr	r2, [pc, #48]	; (800cbac <LmHandlerPackageRegister+0xa0>)
 800cb7c:	6851      	ldr	r1, [r2, #4]
 800cb7e:	4a0b      	ldr	r2, [pc, #44]	; (800cbac <LmHandlerPackageRegister+0xa0>)
 800cb80:	7852      	ldrb	r2, [r2, #1]
 800cb82:	6838      	ldr	r0, [r7, #0]
 800cb84:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cb86:	2300      	movs	r3, #0
 800cb88:	e001      	b.n	800cb8e <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cb8a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	200002c4 	.word	0x200002c4
 800cb9c:	0800c3b9 	.word	0x0800c3b9
 800cba0:	0800c4a5 	.word	0x0800c4a5
 800cba4:	0800c651 	.word	0x0800c651
 800cba8:	200002e8 	.word	0x200002e8
 800cbac:	200000d8 	.word	0x200000d8

0800cbb0 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800cbba:	79fb      	ldrb	r3, [r7, #7]
 800cbbc:	2b04      	cmp	r3, #4
 800cbbe:	d80e      	bhi.n	800cbde <LmHandlerPackageIsInitialized+0x2e>
 800cbc0:	79fb      	ldrb	r3, [r7, #7]
 800cbc2:	4a09      	ldr	r2, [pc, #36]	; (800cbe8 <LmHandlerPackageIsInitialized+0x38>)
 800cbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d007      	beq.n	800cbde <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cbce:	79fb      	ldrb	r3, [r7, #7]
 800cbd0:	4a05      	ldr	r2, [pc, #20]	; (800cbe8 <LmHandlerPackageIsInitialized+0x38>)
 800cbd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	4798      	blx	r3
 800cbda:	4603      	mov	r3, r0
 800cbdc:	e000      	b.n	800cbe0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cbde:	2300      	movs	r3, #0
    }
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	200002c4 	.word	0x200002c4

0800cbec <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	6039      	str	r1, [r7, #0]
 800cbf6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	73fb      	strb	r3, [r7, #15]
 800cbfc:	e067      	b.n	800ccce <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800cbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc02:	4a37      	ldr	r2, [pc, #220]	; (800cce0 <LmHandlerPackagesNotify+0xf4>)
 800cc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d051      	beq.n	800ccb0 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800cc0c:	79fb      	ldrb	r3, [r7, #7]
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d03d      	beq.n	800cc8e <LmHandlerPackagesNotify+0xa2>
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	dc4e      	bgt.n	800ccb4 <LmHandlerPackagesNotify+0xc8>
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d002      	beq.n	800cc20 <LmHandlerPackagesNotify+0x34>
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d011      	beq.n	800cc42 <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800cc1e:	e049      	b.n	800ccb4 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800cc20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc24:	4a2e      	ldr	r2, [pc, #184]	; (800cce0 <LmHandlerPackagesNotify+0xf4>)
 800cc26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc2a:	699b      	ldr	r3, [r3, #24]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d043      	beq.n	800ccb8 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800cc30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc34:	4a2a      	ldr	r2, [pc, #168]	; (800cce0 <LmHandlerPackagesNotify+0xf4>)
 800cc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc3a:	699b      	ldr	r3, [r3, #24]
 800cc3c:	6838      	ldr	r0, [r7, #0]
 800cc3e:	4798      	blx	r3
                    break;
 800cc40:	e03a      	b.n	800ccb8 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cc42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc46:	4a26      	ldr	r2, [pc, #152]	; (800cce0 <LmHandlerPackagesNotify+0xf4>)
 800cc48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc4c:	69db      	ldr	r3, [r3, #28]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d034      	beq.n	800ccbc <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cc52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc56:	4a22      	ldr	r2, [pc, #136]	; (800cce0 <LmHandlerPackagesNotify+0xf4>)
 800cc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc5c:	781a      	ldrb	r2, [r3, #0]
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d00a      	beq.n	800cc7c <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cc66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d126      	bne.n	800ccbc <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800cc6e:	4b1c      	ldr	r3, [pc, #112]	; (800cce0 <LmHandlerPackagesNotify+0xf4>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	4798      	blx	r3
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d01f      	beq.n	800ccbc <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800cc7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc80:	4a17      	ldr	r2, [pc, #92]	; (800cce0 <LmHandlerPackagesNotify+0xf4>)
 800cc82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc86:	69db      	ldr	r3, [r3, #28]
 800cc88:	6838      	ldr	r0, [r7, #0]
 800cc8a:	4798      	blx	r3
                    break;
 800cc8c:	e016      	b.n	800ccbc <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cc8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc92:	4a13      	ldr	r2, [pc, #76]	; (800cce0 <LmHandlerPackagesNotify+0xf4>)
 800cc94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc98:	6a1b      	ldr	r3, [r3, #32]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d010      	beq.n	800ccc0 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800cc9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cca2:	4a0f      	ldr	r2, [pc, #60]	; (800cce0 <LmHandlerPackagesNotify+0xf4>)
 800cca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	6838      	ldr	r0, [r7, #0]
 800ccac:	4798      	blx	r3
                    break;
 800ccae:	e007      	b.n	800ccc0 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800ccb0:	bf00      	nop
 800ccb2:	e006      	b.n	800ccc2 <LmHandlerPackagesNotify+0xd6>
                    break;
 800ccb4:	bf00      	nop
 800ccb6:	e004      	b.n	800ccc2 <LmHandlerPackagesNotify+0xd6>
                    break;
 800ccb8:	bf00      	nop
 800ccba:	e002      	b.n	800ccc2 <LmHandlerPackagesNotify+0xd6>
                    break;
 800ccbc:	bf00      	nop
 800ccbe:	e000      	b.n	800ccc2 <LmHandlerPackagesNotify+0xd6>
                    break;
 800ccc0:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ccc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	3301      	adds	r3, #1
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	73fb      	strb	r3, [r7, #15]
 800ccce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccd2:	2b04      	cmp	r3, #4
 800ccd4:	dd93      	ble.n	800cbfe <LmHandlerPackagesNotify+0x12>
    }
}
 800ccd6:	bf00      	nop
 800ccd8:	bf00      	nop
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	200002c4 	.word	0x200002c4

0800cce4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ccea:	2300      	movs	r3, #0
 800ccec:	71fb      	strb	r3, [r7, #7]
 800ccee:	e022      	b.n	800cd36 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ccf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccf4:	4a14      	ldr	r2, [pc, #80]	; (800cd48 <LmHandlerPackagesProcess+0x64>)
 800ccf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d015      	beq.n	800cd2a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ccfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd02:	4a11      	ldr	r2, [pc, #68]	; (800cd48 <LmHandlerPackagesProcess+0x64>)
 800cd04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd08:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00d      	beq.n	800cd2a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800cd0e:	79fb      	ldrb	r3, [r7, #7]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7ff ff4d 	bl	800cbb0 <LmHandlerPackageIsInitialized>
 800cd16:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d006      	beq.n	800cd2a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800cd1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd20:	4a09      	ldr	r2, [pc, #36]	; (800cd48 <LmHandlerPackagesProcess+0x64>)
 800cd22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cd2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	3301      	adds	r3, #1
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	71fb      	strb	r3, [r7, #7]
 800cd36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd3a:	2b04      	cmp	r3, #4
 800cd3c:	ddd8      	ble.n	800ccf0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800cd3e:	bf00      	nop
 800cd40:	bf00      	nop
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	200002c4 	.word	0x200002c4

0800cd4c <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af02      	add	r7, sp, #8
 800cd52:	4603      	mov	r3, r0
 800cd54:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800cd56:	79fb      	ldrb	r3, [r7, #7]
 800cd58:	4a06      	ldr	r2, [pc, #24]	; (800cd74 <DisplayClassUpdate+0x28>)
 800cd5a:	5cd3      	ldrb	r3, [r2, r3]
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	4b06      	ldr	r3, [pc, #24]	; (800cd78 <DisplayClassUpdate+0x2c>)
 800cd60:	2200      	movs	r2, #0
 800cd62:	2100      	movs	r1, #0
 800cd64:	2002      	movs	r0, #2
 800cd66:	f00d fbd3 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
}
 800cd6a:	bf00      	nop
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	0801b1c4 	.word	0x0801b1c4
 800cd78:	0801b1a8 	.word	0x0801b1a8

0800cd7c <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	4603      	mov	r3, r0
 800cd84:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800cd86:	bf00      	nop
 800cd88:	370c      	adds	r7, #12
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bc80      	pop	{r7}
 800cd8e:	4770      	bx	lr

0800cd90 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800cd90:	b480      	push	{r7}
 800cd92:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800cd94:	2300      	movs	r3, #0
#endif
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bc80      	pop	{r7}
 800cd9c:	4770      	bx	lr

0800cd9e <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800cd9e:	b480      	push	{r7}
 800cda0:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bc80      	pop	{r7}
 800cdaa:	4770      	bx	lr

0800cdac <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800cdac:	b480      	push	{r7}
 800cdae:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800cdb0:	4b02      	ldr	r3, [pc, #8]	; (800cdbc <LmhpCompliancePackageFactory+0x10>)
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bc80      	pop	{r7}
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	200000e0 	.word	0x200000e0

0800cdc0 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00f      	beq.n	800cdf4 <LmhpComplianceInit+0x34>
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00c      	beq.n	800cdf4 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800cdda:	4a0c      	ldr	r2, [pc, #48]	; (800ce0c <LmhpComplianceInit+0x4c>)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800cde0:	4a0b      	ldr	r2, [pc, #44]	; (800ce10 <LmhpComplianceInit+0x50>)
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800cde6:	4a0a      	ldr	r2, [pc, #40]	; (800ce10 <LmhpComplianceInit+0x50>)
 800cde8:	79fb      	ldrb	r3, [r7, #7]
 800cdea:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800cdec:	4b08      	ldr	r3, [pc, #32]	; (800ce10 <LmhpComplianceInit+0x50>)
 800cdee:	2201      	movs	r2, #1
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	e006      	b.n	800ce02 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800cdf4:	4b05      	ldr	r3, [pc, #20]	; (800ce0c <LmhpComplianceInit+0x4c>)
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cdfa:	4b05      	ldr	r3, [pc, #20]	; (800ce10 <LmhpComplianceInit+0x50>)
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	701a      	strb	r2, [r3, #0]
    }
}
 800ce00:	bf00      	nop
 800ce02:	bf00      	nop
 800ce04:	3714      	adds	r7, #20
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bc80      	pop	{r7}
 800ce0a:	4770      	bx	lr
 800ce0c:	20000448 	.word	0x20000448
 800ce10:	20000434 	.word	0x20000434

0800ce14 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800ce14:	b480      	push	{r7}
 800ce16:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800ce18:	4b02      	ldr	r3, [pc, #8]	; (800ce24 <LmhpComplianceIsInitialized+0x10>)
 800ce1a:	781b      	ldrb	r3, [r3, #0]
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bc80      	pop	{r7}
 800ce22:	4770      	bx	lr
 800ce24:	20000434 	.word	0x20000434

0800ce28 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800ce28:	b480      	push	{r7}
 800ce2a:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800ce2c:	4b07      	ldr	r3, [pc, #28]	; (800ce4c <LmhpComplianceIsRunning+0x24>)
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	f083 0301 	eor.w	r3, r3, #1
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d001      	beq.n	800ce3e <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	e001      	b.n	800ce42 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800ce3e:	4b03      	ldr	r3, [pc, #12]	; (800ce4c <LmhpComplianceIsRunning+0x24>)
 800ce40:	785b      	ldrb	r3, [r3, #1]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bc80      	pop	{r7}
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	20000434 	.word	0x20000434

0800ce50 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800ce58:	4b0f      	ldr	r3, [pc, #60]	; (800ce98 <LmhpComplianceOnMcpsConfirm+0x48>)
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	f083 0301 	eor.w	r3, r3, #1
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d112      	bne.n	800ce8c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800ce66:	4b0c      	ldr	r3, [pc, #48]	; (800ce98 <LmhpComplianceOnMcpsConfirm+0x48>)
 800ce68:	785b      	ldrb	r3, [r3, #1]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00f      	beq.n	800ce8e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d10b      	bne.n	800ce8e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d007      	beq.n	800ce8e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800ce7e:	4b06      	ldr	r3, [pc, #24]	; (800ce98 <LmhpComplianceOnMcpsConfirm+0x48>)
 800ce80:	899b      	ldrh	r3, [r3, #12]
 800ce82:	3301      	adds	r3, #1
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	4b04      	ldr	r3, [pc, #16]	; (800ce98 <LmhpComplianceOnMcpsConfirm+0x48>)
 800ce88:	819a      	strh	r2, [r3, #12]
 800ce8a:	e000      	b.n	800ce8e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800ce8c:	bf00      	nop
    }
}
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bc80      	pop	{r7}
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	20000434 	.word	0x20000434

0800ce9c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800cea4:	4b12      	ldr	r3, [pc, #72]	; (800cef0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	f083 0301 	eor.w	r3, r3, #1
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d116      	bne.n	800cee0 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800ceb2:	4b0f      	ldr	r3, [pc, #60]	; (800cef0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ceb4:	785b      	ldrb	r3, [r3, #1]
 800ceb6:	f083 0301 	eor.w	r3, r3, #1
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d111      	bne.n	800cee4 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	2b04      	cmp	r3, #4
 800cec6:	d10e      	bne.n	800cee6 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800cec8:	4b09      	ldr	r3, [pc, #36]	; (800cef0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ceca:	2201      	movs	r2, #1
 800cecc:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	7a1a      	ldrb	r2, [r3, #8]
 800ced2:	4b07      	ldr	r3, [pc, #28]	; (800cef0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800ced4:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	7a5a      	ldrb	r2, [r3, #9]
 800ceda:	4b05      	ldr	r3, [pc, #20]	; (800cef0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cedc:	741a      	strb	r2, [r3, #16]
 800cede:	e002      	b.n	800cee6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800cee0:	bf00      	nop
 800cee2:	e000      	b.n	800cee6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800cee4:	bf00      	nop
    }
}
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bc80      	pop	{r7}
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	20000434 	.word	0x20000434

0800cef4 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800cef4:	b590      	push	{r4, r7, lr}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800cefa:	4b33      	ldr	r3, [pc, #204]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	f083 0301 	eor.w	r3, r3, #1
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cf08:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0c:	e058      	b.n	800cfc0 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800cf0e:	4b2e      	ldr	r3, [pc, #184]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf10:	785b      	ldrb	r3, [r3, #1]
 800cf12:	f083 0301 	eor.w	r3, r3, #1
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d001      	beq.n	800cf20 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	e04f      	b.n	800cfc0 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800cf20:	4b29      	ldr	r3, [pc, #164]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf22:	7b9b      	ldrb	r3, [r3, #14]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d019      	beq.n	800cf5c <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800cf28:	4b27      	ldr	r3, [pc, #156]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800cf2e:	4b26      	ldr	r3, [pc, #152]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf30:	2203      	movs	r2, #3
 800cf32:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800cf34:	4b24      	ldr	r3, [pc, #144]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	2205      	movs	r2, #5
 800cf3a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800cf3c:	4b22      	ldr	r3, [pc, #136]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	3301      	adds	r3, #1
 800cf42:	4a21      	ldr	r2, [pc, #132]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf44:	7bd2      	ldrb	r2, [r2, #15]
 800cf46:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800cf48:	4b1f      	ldr	r3, [pc, #124]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	3302      	adds	r3, #2
 800cf4e:	4a1e      	ldr	r2, [pc, #120]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf50:	7c12      	ldrb	r2, [r2, #16]
 800cf52:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800cf54:	4b1c      	ldr	r3, [pc, #112]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf56:	2201      	movs	r2, #1
 800cf58:	709a      	strb	r2, [r3, #2]
 800cf5a:	e01c      	b.n	800cf96 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800cf5c:	4b1a      	ldr	r3, [pc, #104]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf5e:	789b      	ldrb	r3, [r3, #2]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d005      	beq.n	800cf70 <LmhpComplianceTxProcess+0x7c>
 800cf64:	2b04      	cmp	r3, #4
 800cf66:	d116      	bne.n	800cf96 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800cf68:	4b17      	ldr	r3, [pc, #92]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	709a      	strb	r2, [r3, #2]
            break;
 800cf6e:	e012      	b.n	800cf96 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800cf70:	4b15      	ldr	r3, [pc, #84]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf72:	2202      	movs	r2, #2
 800cf74:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800cf76:	4b14      	ldr	r3, [pc, #80]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf78:	899b      	ldrh	r3, [r3, #12]
 800cf7a:	0a1b      	lsrs	r3, r3, #8
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	4b12      	ldr	r3, [pc, #72]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	b2d2      	uxtb	r2, r2
 800cf84:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800cf86:	4b10      	ldr	r3, [pc, #64]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf88:	899a      	ldrh	r2, [r3, #12]
 800cf8a:	4b0f      	ldr	r3, [pc, #60]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	b2d2      	uxtb	r2, r2
 800cf92:	701a      	strb	r2, [r3, #0]
            break;
 800cf94:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800cf96:	23e0      	movs	r3, #224	; 0xe0
 800cf98:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cf9c:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800cf9e:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800cfa0:	4b09      	ldr	r3, [pc, #36]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cfa2:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800cfa4:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800cfa6:	4809      	ldr	r0, [pc, #36]	; (800cfcc <LmhpComplianceTxProcess+0xd8>)
 800cfa8:	f00d f83a 	bl	801a020 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800cfac:	4b08      	ldr	r3, [pc, #32]	; (800cfd0 <LmhpComplianceTxProcess+0xdc>)
 800cfae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800cfb0:	4b05      	ldr	r3, [pc, #20]	; (800cfc8 <LmhpComplianceTxProcess+0xd4>)
 800cfb2:	78db      	ldrb	r3, [r3, #3]
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	4638      	mov	r0, r7
 800cfb8:	2301      	movs	r3, #1
 800cfba:	2200      	movs	r2, #0
 800cfbc:	47a0      	blx	r4
 800cfbe:	4603      	mov	r3, r0
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd90      	pop	{r4, r7, pc}
 800cfc8:	20000434 	.word	0x20000434
 800cfcc:	2000041c 	.word	0x2000041c
 800cfd0:	200000e0 	.word	0x200000e0

0800cfd4 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b0a2      	sub	sp, #136	; 0x88
 800cfd8:	af02      	add	r7, sp, #8
 800cfda:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800cfdc:	4bae      	ldr	r3, [pc, #696]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	f083 0301 	eor.w	r3, r3, #1
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f040 81c0 	bne.w	800d36c <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	7b5b      	ldrb	r3, [r3, #13]
 800cff0:	f083 0301 	eor.w	r3, r3, #1
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f040 81ba 	bne.w	800d370 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800cffc:	4ba6      	ldr	r3, [pc, #664]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cffe:	785b      	ldrb	r3, [r3, #1]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00c      	beq.n	800d01e <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	7b9b      	ldrb	r3, [r3, #14]
 800d008:	f083 0301 	eor.w	r3, r3, #1
 800d00c:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d005      	beq.n	800d01e <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d012:	4ba1      	ldr	r3, [pc, #644]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d014:	899b      	ldrh	r3, [r3, #12]
 800d016:	3301      	adds	r3, #1
 800d018:	b29a      	uxth	r2, r3
 800d01a:	4b9f      	ldr	r3, [pc, #636]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d01c:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	78db      	ldrb	r3, [r3, #3]
 800d022:	2be0      	cmp	r3, #224	; 0xe0
 800d024:	f040 81a6 	bne.w	800d374 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d028:	4b9b      	ldr	r3, [pc, #620]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d02a:	785b      	ldrb	r3, [r3, #1]
 800d02c:	f083 0301 	eor.w	r3, r3, #1
 800d030:	b2db      	uxtb	r3, r3
 800d032:	2b00      	cmp	r3, #0
 800d034:	d060      	beq.n	800d0f8 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	7b1b      	ldrb	r3, [r3, #12]
 800d03a:	2b04      	cmp	r3, #4
 800d03c:	f040 819f 	bne.w	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d046:	2b01      	cmp	r3, #1
 800d048:	f040 8199 	bne.w	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	3301      	adds	r3, #1
 800d052:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d054:	2b01      	cmp	r3, #1
 800d056:	f040 8192 	bne.w	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	3302      	adds	r3, #2
 800d060:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d062:	2b01      	cmp	r3, #1
 800d064:	f040 818b 	bne.w	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	3303      	adds	r3, #3
 800d06e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d070:	2b01      	cmp	r3, #1
 800d072:	f040 8184 	bne.w	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d076:	4b88      	ldr	r3, [pc, #544]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d078:	2200      	movs	r2, #0
 800d07a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d07c:	4b86      	ldr	r3, [pc, #536]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d07e:	22e0      	movs	r2, #224	; 0xe0
 800d080:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d082:	4b85      	ldr	r3, [pc, #532]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d084:	2202      	movs	r2, #2
 800d086:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d088:	4b83      	ldr	r3, [pc, #524]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d08a:	2200      	movs	r2, #0
 800d08c:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d08e:	4b82      	ldr	r3, [pc, #520]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d090:	2200      	movs	r2, #0
 800d092:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d094:	4b80      	ldr	r3, [pc, #512]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d096:	2200      	movs	r2, #0
 800d098:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d09a:	4b7f      	ldr	r3, [pc, #508]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d0a0:	4b7d      	ldr	r3, [pc, #500]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d0a6:	4b7c      	ldr	r3, [pc, #496]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d0ac:	2304      	movs	r3, #4
 800d0ae:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d0b4:	f107 0308 	add.w	r3, r7, #8
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f004 f829 	bl	8011110 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d0be:	2000      	movs	r0, #0
 800d0c0:	f004 fd9a 	bl	8011bf8 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d0c4:	4b75      	ldr	r3, [pc, #468]	; (800d29c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d003      	beq.n	800d0d6 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d0ce:	4b73      	ldr	r3, [pc, #460]	; (800d29c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	9300      	str	r3, [sp, #0]
 800d0da:	4b71      	ldr	r3, [pc, #452]	; (800d2a0 <LmhpComplianceOnMcpsIndication+0x2cc>)
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f04f 31ff 	mov.w	r1, #4294967295
 800d0e2:	4870      	ldr	r0, [pc, #448]	; (800d2a4 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d0e4:	f00c ff66 	bl	8019fb4 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d0e8:	f241 3188 	movw	r1, #5000	; 0x1388
 800d0ec:	486d      	ldr	r0, [pc, #436]	; (800d2a4 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d0ee:	f00d f875 	bl	801a1dc <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d0f2:	f7ff feff 	bl	800cef4 <LmhpComplianceTxProcess>
 800d0f6:	e142      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	781a      	ldrb	r2, [r3, #0]
 800d0fe:	4b66      	ldr	r3, [pc, #408]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d100:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d102:	4b65      	ldr	r3, [pc, #404]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d104:	789b      	ldrb	r3, [r3, #2]
 800d106:	2b0a      	cmp	r3, #10
 800d108:	f200 8136 	bhi.w	800d378 <LmhpComplianceOnMcpsIndication+0x3a4>
 800d10c:	a201      	add	r2, pc, #4	; (adr r2, 800d114 <LmhpComplianceOnMcpsIndication+0x140>)
 800d10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d112:	bf00      	nop
 800d114:	0800d141 	.word	0x0800d141
 800d118:	0800d18b 	.word	0x0800d18b
 800d11c:	0800d193 	.word	0x0800d193
 800d120:	0800d1a1 	.word	0x0800d1a1
 800d124:	0800d1af 	.word	0x0800d1af
 800d128:	0800d207 	.word	0x0800d207
 800d12c:	0800d219 	.word	0x0800d219
 800d130:	0800d269 	.word	0x0800d269
 800d134:	0800d325 	.word	0x0800d325
 800d138:	0800d337 	.word	0x0800d337
 800d13c:	0800d351 	.word	0x0800d351
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d140:	4858      	ldr	r0, [pc, #352]	; (800d2a4 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d142:	f00c ffdb 	bl	801a0fc <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d146:	4b54      	ldr	r3, [pc, #336]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d148:	2200      	movs	r2, #0
 800d14a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d14c:	4b52      	ldr	r3, [pc, #328]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d14e:	2200      	movs	r2, #0
 800d150:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d152:	2304      	movs	r3, #4
 800d154:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d156:	4b51      	ldr	r3, [pc, #324]	; (800d29c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d15e:	f107 0308 	add.w	r3, r7, #8
 800d162:	4618      	mov	r0, r3
 800d164:	f003 ffd4 	bl	8011110 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d168:	4b4c      	ldr	r3, [pc, #304]	; (800d29c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	785b      	ldrb	r3, [r3, #1]
 800d16e:	4618      	mov	r0, r3
 800d170:	f004 fd42 	bl	8011bf8 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d174:	4b49      	ldr	r3, [pc, #292]	; (800d29c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 80fe 	beq.w	800d37c <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d180:	4b46      	ldr	r3, [pc, #280]	; (800d29c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	4798      	blx	r3
                }
            }
            break;
 800d188:	e0f8      	b.n	800d37c <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d18a:	4b43      	ldr	r3, [pc, #268]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d18c:	2202      	movs	r2, #2
 800d18e:	719a      	strb	r2, [r3, #6]
            break;
 800d190:	e0f5      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d192:	4b41      	ldr	r3, [pc, #260]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d194:	2201      	movs	r2, #1
 800d196:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d198:	4b3f      	ldr	r3, [pc, #252]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d19a:	2201      	movs	r2, #1
 800d19c:	709a      	strb	r2, [r3, #2]
            break;
 800d19e:	e0ee      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d1a0:	4b3d      	ldr	r3, [pc, #244]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d1a6:	4b3c      	ldr	r3, [pc, #240]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	709a      	strb	r2, [r3, #2]
            break;
 800d1ac:	e0e7      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	7b1a      	ldrb	r2, [r3, #12]
 800d1b2:	4b39      	ldr	r3, [pc, #228]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1b4:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d1b6:	4b38      	ldr	r3, [pc, #224]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	2204      	movs	r2, #4
 800d1bc:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d1be:	2301      	movs	r3, #1
 800d1c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d1c4:	e012      	b.n	800d1ec <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	689a      	ldr	r2, [r3, #8]
 800d1ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d1ce:	4413      	add	r3, r2
 800d1d0:	781a      	ldrb	r2, [r3, #0]
 800d1d2:	4b31      	ldr	r3, [pc, #196]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1d4:	6899      	ldr	r1, [r3, #8]
 800d1d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d1da:	440b      	add	r3, r1
 800d1dc:	3201      	adds	r2, #1
 800d1de:	b2d2      	uxtb	r2, r2
 800d1e0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d1e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d1ec:	4b2a      	ldr	r3, [pc, #168]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1ee:	795a      	ldrb	r2, [r3, #5]
 800d1f0:	4b29      	ldr	r3, [pc, #164]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1f2:	799b      	ldrb	r3, [r3, #6]
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	bf28      	it	cs
 800d1f8:	4613      	movcs	r3, r2
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d200:	429a      	cmp	r2, r3
 800d202:	d3e0      	bcc.n	800d1c6 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d204:	e0bb      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d206:	2304      	movs	r3, #4
 800d208:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d20c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d210:	4618      	mov	r0, r3
 800d212:	f004 fabb 	bl	801178c <LoRaMacMlmeRequest>
            }
            break;
 800d216:	e0b2      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d218:	4822      	ldr	r0, [pc, #136]	; (800d2a4 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d21a:	f00c ff6f 	bl	801a0fc <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d21e:	4b1e      	ldr	r3, [pc, #120]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d220:	2200      	movs	r2, #0
 800d222:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d224:	4b1c      	ldr	r3, [pc, #112]	; (800d298 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d226:	2200      	movs	r2, #0
 800d228:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d22a:	2304      	movs	r3, #4
 800d22c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d22e:	4b1b      	ldr	r3, [pc, #108]	; (800d29c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d236:	f107 0308 	add.w	r3, r7, #8
 800d23a:	4618      	mov	r0, r3
 800d23c:	f003 ff68 	bl	8011110 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d240:	4b16      	ldr	r3, [pc, #88]	; (800d29c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	785b      	ldrb	r3, [r3, #1]
 800d246:	4618      	mov	r0, r3
 800d248:	f004 fcd6 	bl	8011bf8 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d24c:	4b13      	ldr	r3, [pc, #76]	; (800d29c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d003      	beq.n	800d25e <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d256:	4b11      	ldr	r3, [pc, #68]	; (800d29c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800d25e:	4b12      	ldr	r3, [pc, #72]	; (800d2a8 <LmhpComplianceOnMcpsIndication+0x2d4>)
 800d260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d262:	2002      	movs	r0, #2
 800d264:	4798      	blx	r3
            }
            break;
 800d266:	e08a      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	7b1b      	ldrb	r3, [r3, #12]
 800d26c:	2b03      	cmp	r3, #3
 800d26e:	d11d      	bne.n	800d2ac <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d270:	2305      	movs	r3, #5
 800d272:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	3301      	adds	r3, #1
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	021b      	lsls	r3, r3, #8
 800d280:	b21a      	sxth	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	3302      	adds	r3, #2
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	b21b      	sxth	r3, r3
 800d28c:	4313      	orrs	r3, r2
 800d28e:	b21b      	sxth	r3, r3
 800d290:	b29b      	uxth	r3, r3
 800d292:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d296:	e03c      	b.n	800d312 <LmhpComplianceOnMcpsIndication+0x33e>
 800d298:	20000434 	.word	0x20000434
 800d29c:	20000448 	.word	0x20000448
 800d2a0:	0800d395 	.word	0x0800d395
 800d2a4:	2000041c 	.word	0x2000041c
 800d2a8:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	7b1b      	ldrb	r3, [r3, #12]
 800d2b0:	2b07      	cmp	r3, #7
 800d2b2:	d12e      	bne.n	800d312 <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d2b4:	2306      	movs	r3, #6
 800d2b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	021b      	lsls	r3, r3, #8
 800d2c4:	b21a      	sxth	r2, r3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	3302      	adds	r3, #2
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	b21b      	sxth	r3, r3
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	b21b      	sxth	r3, r3
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	689b      	ldr	r3, [r3, #8]
 800d2de:	3303      	adds	r3, #3
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	041a      	lsls	r2, r3, #16
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	3304      	adds	r3, #4
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	021b      	lsls	r3, r3, #8
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	6892      	ldr	r2, [r2, #8]
 800d2f4:	3205      	adds	r2, #5
 800d2f6:	7812      	ldrb	r2, [r2, #0]
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	2364      	movs	r3, #100	; 0x64
 800d2fe:	fb03 f302 	mul.w	r3, r3, r2
 800d302:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	3306      	adds	r3, #6
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	b25b      	sxtb	r3, r3
 800d30e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d312:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d316:	4618      	mov	r0, r3
 800d318:	f004 fa38 	bl	801178c <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d31c:	4b19      	ldr	r3, [pc, #100]	; (800d384 <LmhpComplianceOnMcpsIndication+0x3b0>)
 800d31e:	2201      	movs	r2, #1
 800d320:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d322:	e02c      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d324:	230a      	movs	r3, #10
 800d326:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d32a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d32e:	4618      	mov	r0, r3
 800d330:	f004 fa2c 	bl	801178c <LoRaMacMlmeRequest>
            }
            break;
 800d334:	e023      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d336:	2300      	movs	r3, #0
 800d338:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	3301      	adds	r3, #1
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d344:	f107 0308 	add.w	r3, r7, #8
 800d348:	4618      	mov	r0, r3
 800d34a:	f003 fee1 	bl	8011110 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d34e:	e016      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d350:	230d      	movs	r3, #13
 800d352:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	689b      	ldr	r3, [r3, #8]
 800d35a:	785b      	ldrb	r3, [r3, #1]
 800d35c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d364:	4618      	mov	r0, r3
 800d366:	f004 fa11 	bl	801178c <LoRaMacMlmeRequest>
            }
            break;
 800d36a:	e008      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d36c:	bf00      	nop
 800d36e:	e006      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d370:	bf00      	nop
 800d372:	e004      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d374:	bf00      	nop
 800d376:	e002      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800d378:	bf00      	nop
 800d37a:	e000      	b.n	800d37e <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800d37c:	bf00      	nop
        }
    }
}
 800d37e:	3780      	adds	r7, #128	; 0x80
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	20000434 	.word	0x20000434

0800d388 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d388:	b480      	push	{r7}
 800d38a:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d38c:	bf00      	nop
 800d38e:	46bd      	mov	sp, r7
 800d390:	bc80      	pop	{r7}
 800d392:	4770      	bx	lr

0800d394 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d39c:	f7ff fdaa 	bl	800cef4 <LmhpComplianceTxProcess>
}
 800d3a0:	bf00      	nop
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d3a8:	b590      	push	{r4, r7, lr}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d3ae:	f00c ffbf 	bl	801a330 <UTIL_TIMER_GetCurrentTime>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	4a16      	ldr	r2, [pc, #88]	; (800d410 <OnRadioTxDone+0x68>)
 800d3b6:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d3b8:	4c16      	ldr	r4, [pc, #88]	; (800d414 <OnRadioTxDone+0x6c>)
 800d3ba:	463b      	mov	r3, r7
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f00c fa39 	bl	8019834 <SysTimeGet>
 800d3c2:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d3c6:	463a      	mov	r2, r7
 800d3c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d3cc:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d3d0:	4a11      	ldr	r2, [pc, #68]	; (800d418 <OnRadioTxDone+0x70>)
 800d3d2:	7813      	ldrb	r3, [r2, #0]
 800d3d4:	f043 0310 	orr.w	r3, r3, #16
 800d3d8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d3da:	4b0e      	ldr	r3, [pc, #56]	; (800d414 <OnRadioTxDone+0x6c>)
 800d3dc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00a      	beq.n	800d3fa <OnRadioTxDone+0x52>
 800d3e4:	4b0b      	ldr	r3, [pc, #44]	; (800d414 <OnRadioTxDone+0x6c>)
 800d3e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d004      	beq.n	800d3fa <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d3f0:	4b08      	ldr	r3, [pc, #32]	; (800d414 <OnRadioTxDone+0x6c>)
 800d3f2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d3fa:	4b08      	ldr	r3, [pc, #32]	; (800d41c <OnRadioTxDone+0x74>)
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	2100      	movs	r1, #0
 800d400:	2002      	movs	r0, #2
 800d402:	f00d f885 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
}
 800d406:	bf00      	nop
 800d408:	370c      	adds	r7, #12
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd90      	pop	{r4, r7, pc}
 800d40e:	bf00      	nop
 800d410:	2000179c 	.word	0x2000179c
 800d414:	2000044c 	.word	0x2000044c
 800d418:	20000ca0 	.word	0x20000ca0
 800d41c:	0801b1c8 	.word	0x0801b1c8

0800d420 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	4608      	mov	r0, r1
 800d42a:	4611      	mov	r1, r2
 800d42c:	461a      	mov	r2, r3
 800d42e:	4603      	mov	r3, r0
 800d430:	817b      	strh	r3, [r7, #10]
 800d432:	460b      	mov	r3, r1
 800d434:	813b      	strh	r3, [r7, #8]
 800d436:	4613      	mov	r3, r2
 800d438:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d43a:	f00c ff79 	bl	801a330 <UTIL_TIMER_GetCurrentTime>
 800d43e:	4603      	mov	r3, r0
 800d440:	4a16      	ldr	r2, [pc, #88]	; (800d49c <OnRadioRxDone+0x7c>)
 800d442:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d444:	4a15      	ldr	r2, [pc, #84]	; (800d49c <OnRadioRxDone+0x7c>)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d44a:	4a14      	ldr	r2, [pc, #80]	; (800d49c <OnRadioRxDone+0x7c>)
 800d44c:	897b      	ldrh	r3, [r7, #10]
 800d44e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d450:	4a12      	ldr	r2, [pc, #72]	; (800d49c <OnRadioRxDone+0x7c>)
 800d452:	893b      	ldrh	r3, [r7, #8]
 800d454:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d456:	4a11      	ldr	r2, [pc, #68]	; (800d49c <OnRadioRxDone+0x7c>)
 800d458:	79fb      	ldrb	r3, [r7, #7]
 800d45a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d45c:	4a10      	ldr	r2, [pc, #64]	; (800d4a0 <OnRadioRxDone+0x80>)
 800d45e:	7813      	ldrb	r3, [r2, #0]
 800d460:	f043 0308 	orr.w	r3, r3, #8
 800d464:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d466:	4b0f      	ldr	r3, [pc, #60]	; (800d4a4 <OnRadioRxDone+0x84>)
 800d468:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00a      	beq.n	800d486 <OnRadioRxDone+0x66>
 800d470:	4b0c      	ldr	r3, [pc, #48]	; (800d4a4 <OnRadioRxDone+0x84>)
 800d472:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d476:	691b      	ldr	r3, [r3, #16]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d004      	beq.n	800d486 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d47c:	4b09      	ldr	r3, [pc, #36]	; (800d4a4 <OnRadioRxDone+0x84>)
 800d47e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d482:	691b      	ldr	r3, [r3, #16]
 800d484:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d486:	4b08      	ldr	r3, [pc, #32]	; (800d4a8 <OnRadioRxDone+0x88>)
 800d488:	2201      	movs	r2, #1
 800d48a:	2100      	movs	r1, #0
 800d48c:	2002      	movs	r0, #2
 800d48e:	f00d f83f 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
}
 800d492:	bf00      	nop
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	200017a0 	.word	0x200017a0
 800d4a0:	20000ca0 	.word	0x20000ca0
 800d4a4:	2000044c 	.word	0x2000044c
 800d4a8:	0801b1d8 	.word	0x0801b1d8

0800d4ac <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d4b0:	4a0e      	ldr	r2, [pc, #56]	; (800d4ec <OnRadioTxTimeout+0x40>)
 800d4b2:	7813      	ldrb	r3, [r2, #0]
 800d4b4:	f043 0304 	orr.w	r3, r3, #4
 800d4b8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d4ba:	4b0d      	ldr	r3, [pc, #52]	; (800d4f0 <OnRadioTxTimeout+0x44>)
 800d4bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00a      	beq.n	800d4da <OnRadioTxTimeout+0x2e>
 800d4c4:	4b0a      	ldr	r3, [pc, #40]	; (800d4f0 <OnRadioTxTimeout+0x44>)
 800d4c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4ca:	691b      	ldr	r3, [r3, #16]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d004      	beq.n	800d4da <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d4d0:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <OnRadioTxTimeout+0x44>)
 800d4d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4d6:	691b      	ldr	r3, [r3, #16]
 800d4d8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d4da:	4b06      	ldr	r3, [pc, #24]	; (800d4f4 <OnRadioTxTimeout+0x48>)
 800d4dc:	2201      	movs	r2, #1
 800d4de:	2100      	movs	r1, #0
 800d4e0:	2002      	movs	r0, #2
 800d4e2:	f00d f815 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
}
 800d4e6:	bf00      	nop
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	20000ca0 	.word	0x20000ca0
 800d4f0:	2000044c 	.word	0x2000044c
 800d4f4:	0801b1e8 	.word	0x0801b1e8

0800d4f8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d4fc:	4a0b      	ldr	r2, [pc, #44]	; (800d52c <OnRadioRxError+0x34>)
 800d4fe:	7813      	ldrb	r3, [r2, #0]
 800d500:	f043 0302 	orr.w	r3, r3, #2
 800d504:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d506:	4b0a      	ldr	r3, [pc, #40]	; (800d530 <OnRadioRxError+0x38>)
 800d508:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00a      	beq.n	800d526 <OnRadioRxError+0x2e>
 800d510:	4b07      	ldr	r3, [pc, #28]	; (800d530 <OnRadioRxError+0x38>)
 800d512:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d004      	beq.n	800d526 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d51c:	4b04      	ldr	r3, [pc, #16]	; (800d530 <OnRadioRxError+0x38>)
 800d51e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d522:	691b      	ldr	r3, [r3, #16]
 800d524:	4798      	blx	r3
    }
}
 800d526:	bf00      	nop
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	bf00      	nop
 800d52c:	20000ca0 	.word	0x20000ca0
 800d530:	2000044c 	.word	0x2000044c

0800d534 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d534:	b580      	push	{r7, lr}
 800d536:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d538:	4a0e      	ldr	r2, [pc, #56]	; (800d574 <OnRadioRxTimeout+0x40>)
 800d53a:	7813      	ldrb	r3, [r2, #0]
 800d53c:	f043 0301 	orr.w	r3, r3, #1
 800d540:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d542:	4b0d      	ldr	r3, [pc, #52]	; (800d578 <OnRadioRxTimeout+0x44>)
 800d544:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00a      	beq.n	800d562 <OnRadioRxTimeout+0x2e>
 800d54c:	4b0a      	ldr	r3, [pc, #40]	; (800d578 <OnRadioRxTimeout+0x44>)
 800d54e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d552:	691b      	ldr	r3, [r3, #16]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d004      	beq.n	800d562 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d558:	4b07      	ldr	r3, [pc, #28]	; (800d578 <OnRadioRxTimeout+0x44>)
 800d55a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d562:	4b06      	ldr	r3, [pc, #24]	; (800d57c <OnRadioRxTimeout+0x48>)
 800d564:	2201      	movs	r2, #1
 800d566:	2100      	movs	r1, #0
 800d568:	2002      	movs	r0, #2
 800d56a:	f00c ffd1 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
}
 800d56e:	bf00      	nop
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	20000ca0 	.word	0x20000ca0
 800d578:	2000044c 	.word	0x2000044c
 800d57c:	0801b1f8 	.word	0x0801b1f8

0800d580 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d580:	b480      	push	{r7}
 800d582:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d584:	4b08      	ldr	r3, [pc, #32]	; (800d5a8 <UpdateRxSlotIdleState+0x28>)
 800d586:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	d004      	beq.n	800d598 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d58e:	4b07      	ldr	r3, [pc, #28]	; (800d5ac <UpdateRxSlotIdleState+0x2c>)
 800d590:	2206      	movs	r2, #6
 800d592:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d596:	e003      	b.n	800d5a0 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d598:	4b04      	ldr	r3, [pc, #16]	; (800d5ac <UpdateRxSlotIdleState+0x2c>)
 800d59a:	2202      	movs	r2, #2
 800d59c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800d5a0:	bf00      	nop
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bc80      	pop	{r7}
 800d5a6:	4770      	bx	lr
 800d5a8:	20000954 	.word	0x20000954
 800d5ac:	2000044c 	.word	0x2000044c

0800d5b0 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b08e      	sub	sp, #56	; 0x38
 800d5b4:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d5b6:	4b44      	ldr	r3, [pc, #272]	; (800d6c8 <ProcessRadioTxDone+0x118>)
 800d5b8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d002      	beq.n	800d5c6 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d5c0:	4b42      	ldr	r3, [pc, #264]	; (800d6cc <ProcessRadioTxDone+0x11c>)
 800d5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c4:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d5c6:	4b42      	ldr	r3, [pc, #264]	; (800d6d0 <ProcessRadioTxDone+0x120>)
 800d5c8:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	4841      	ldr	r0, [pc, #260]	; (800d6d4 <ProcessRadioTxDone+0x124>)
 800d5d0:	f00c fe04 	bl	801a1dc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d5d4:	483f      	ldr	r0, [pc, #252]	; (800d6d4 <ProcessRadioTxDone+0x124>)
 800d5d6:	f00c fd23 	bl	801a020 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d5da:	4b3d      	ldr	r3, [pc, #244]	; (800d6d0 <ProcessRadioTxDone+0x120>)
 800d5dc:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	483d      	ldr	r0, [pc, #244]	; (800d6d8 <ProcessRadioTxDone+0x128>)
 800d5e4:	f00c fdfa 	bl	801a1dc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d5e8:	483b      	ldr	r0, [pc, #236]	; (800d6d8 <ProcessRadioTxDone+0x128>)
 800d5ea:	f00c fd19 	bl	801a020 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d5ee:	4b36      	ldr	r3, [pc, #216]	; (800d6c8 <ProcessRadioTxDone+0x118>)
 800d5f0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	d004      	beq.n	800d602 <ProcessRadioTxDone+0x52>
 800d5f8:	4b35      	ldr	r3, [pc, #212]	; (800d6d0 <ProcessRadioTxDone+0x120>)
 800d5fa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d019      	beq.n	800d636 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d602:	2316      	movs	r3, #22
 800d604:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d608:	4b2f      	ldr	r3, [pc, #188]	; (800d6c8 <ProcessRadioTxDone+0x118>)
 800d60a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d60e:	f107 0220 	add.w	r2, r7, #32
 800d612:	4611      	mov	r1, r2
 800d614:	4618      	mov	r0, r3
 800d616:	f006 fb55 	bl	8013cc4 <RegionGetPhyParam>
 800d61a:	4603      	mov	r3, r0
 800d61c:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d61e:	4b2c      	ldr	r3, [pc, #176]	; (800d6d0 <ProcessRadioTxDone+0x120>)
 800d620:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	4413      	add	r3, r2
 800d628:	4619      	mov	r1, r3
 800d62a:	482c      	ldr	r0, [pc, #176]	; (800d6dc <ProcessRadioTxDone+0x12c>)
 800d62c:	f00c fdd6 	bl	801a1dc <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800d630:	482a      	ldr	r0, [pc, #168]	; (800d6dc <ProcessRadioTxDone+0x12c>)
 800d632:	f00c fcf5 	bl	801a020 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d636:	4b2a      	ldr	r3, [pc, #168]	; (800d6e0 <ProcessRadioTxDone+0x130>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a23      	ldr	r2, [pc, #140]	; (800d6c8 <ProcessRadioTxDone+0x118>)
 800d63c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d63e:	4b24      	ldr	r3, [pc, #144]	; (800d6d0 <ProcessRadioTxDone+0x120>)
 800d640:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800d644:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d646:	4b26      	ldr	r3, [pc, #152]	; (800d6e0 <ProcessRadioTxDone+0x130>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d64c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d650:	4618      	mov	r0, r3
 800d652:	f00c f927 	bl	80198a4 <SysTimeGetMcuTime>
 800d656:	4638      	mov	r0, r7
 800d658:	4b1b      	ldr	r3, [pc, #108]	; (800d6c8 <ProcessRadioTxDone+0x118>)
 800d65a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800d65e:	9200      	str	r2, [sp, #0]
 800d660:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d664:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d668:	ca06      	ldmia	r2, {r1, r2}
 800d66a:	f00c f87c 	bl	8019766 <SysTimeSub>
 800d66e:	f107 0314 	add.w	r3, r7, #20
 800d672:	463a      	mov	r2, r7
 800d674:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d678:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d67c:	4b14      	ldr	r3, [pc, #80]	; (800d6d0 <ProcessRadioTxDone+0x120>)
 800d67e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800d682:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d684:	2301      	movs	r3, #1
 800d686:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d688:	4b0f      	ldr	r3, [pc, #60]	; (800d6c8 <ProcessRadioTxDone+0x118>)
 800d68a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d101      	bne.n	800d696 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800d692:	2300      	movs	r3, #0
 800d694:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d696:	4b0c      	ldr	r3, [pc, #48]	; (800d6c8 <ProcessRadioTxDone+0x118>)
 800d698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d69c:	f107 0208 	add.w	r2, r7, #8
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f006 fb27 	bl	8013cf6 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800d6a8:	4b09      	ldr	r3, [pc, #36]	; (800d6d0 <ProcessRadioTxDone+0x120>)
 800d6aa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d6ae:	f083 0301 	eor.w	r3, r3, #1
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d003      	beq.n	800d6c0 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d6b8:	4b05      	ldr	r3, [pc, #20]	; (800d6d0 <ProcessRadioTxDone+0x120>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800d6c0:	bf00      	nop
 800d6c2:	3730      	adds	r7, #48	; 0x30
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	20000954 	.word	0x20000954
 800d6cc:	0801b848 	.word	0x0801b848
 800d6d0:	2000044c 	.word	0x2000044c
 800d6d4:	200007cc 	.word	0x200007cc
 800d6d8:	200007e4 	.word	0x200007e4
 800d6dc:	20000844 	.word	0x20000844
 800d6e0:	2000179c 	.word	0x2000179c

0800d6e4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d6e8:	4b10      	ldr	r3, [pc, #64]	; (800d72c <PrepareRxDoneAbort+0x48>)
 800d6ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d6ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6f2:	4a0e      	ldr	r2, [pc, #56]	; (800d72c <PrepareRxDoneAbort+0x48>)
 800d6f4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800d6f8:	4b0c      	ldr	r3, [pc, #48]	; (800d72c <PrepareRxDoneAbort+0x48>)
 800d6fa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d002      	beq.n	800d708 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800d702:	2000      	movs	r0, #0
 800d704:	f001 f8f8 	bl	800e8f8 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d708:	4a08      	ldr	r2, [pc, #32]	; (800d72c <PrepareRxDoneAbort+0x48>)
 800d70a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d70e:	f043 0302 	orr.w	r3, r3, #2
 800d712:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d716:	4a05      	ldr	r2, [pc, #20]	; (800d72c <PrepareRxDoneAbort+0x48>)
 800d718:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d71c:	f043 0320 	orr.w	r3, r3, #32
 800d720:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800d724:	f7ff ff2c 	bl	800d580 <UpdateRxSlotIdleState>
}
 800d728:	bf00      	nop
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	2000044c 	.word	0x2000044c

0800d730 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d730:	b5b0      	push	{r4, r5, r7, lr}
 800d732:	b0a6      	sub	sp, #152	; 0x98
 800d734:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d736:	2313      	movs	r3, #19
 800d738:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d73c:	4bb9      	ldr	r3, [pc, #740]	; (800da24 <ProcessRadioRxDone+0x2f4>)
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800d742:	4bb8      	ldr	r3, [pc, #736]	; (800da24 <ProcessRadioRxDone+0x2f4>)
 800d744:	891b      	ldrh	r3, [r3, #8]
 800d746:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800d74a:	4bb6      	ldr	r3, [pc, #728]	; (800da24 <ProcessRadioRxDone+0x2f4>)
 800d74c:	895b      	ldrh	r3, [r3, #10]
 800d74e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800d752:	4bb4      	ldr	r3, [pc, #720]	; (800da24 <ProcessRadioRxDone+0x2f4>)
 800d754:	7b1b      	ldrb	r3, [r3, #12]
 800d756:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800d760:	2300      	movs	r3, #0
 800d762:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d764:	4bb0      	ldr	r3, [pc, #704]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d766:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d76a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d774:	2301      	movs	r3, #1
 800d776:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800d77a:	4bac      	ldr	r3, [pc, #688]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800d782:	4aaa      	ldr	r2, [pc, #680]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d784:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d788:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800d78c:	4aa7      	ldr	r2, [pc, #668]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d78e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d792:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d796:	4ba5      	ldr	r3, [pc, #660]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d798:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800d79c:	4ba3      	ldr	r3, [pc, #652]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d79e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800d7a2:	4ba2      	ldr	r3, [pc, #648]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800d7aa:	4ba0      	ldr	r3, [pc, #640]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800d7b2:	4b9e      	ldr	r3, [pc, #632]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800d7ba:	4b9c      	ldr	r3, [pc, #624]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800d7c2:	4b9a      	ldr	r3, [pc, #616]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800d7ca:	4b98      	ldr	r3, [pc, #608]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800d7d2:	4b96      	ldr	r3, [pc, #600]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d7da:	4b94      	ldr	r3, [pc, #592]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d7e2:	4b92      	ldr	r3, [pc, #584]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800d7ea:	4b90      	ldr	r3, [pc, #576]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d7f2:	4b8e      	ldr	r3, [pc, #568]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800d7fa:	4b8d      	ldr	r3, [pc, #564]	; (800da30 <ProcessRadioRxDone+0x300>)
 800d7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fe:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d800:	488c      	ldr	r0, [pc, #560]	; (800da34 <ProcessRadioRxDone+0x304>)
 800d802:	f00c fc7b 	bl	801a0fc <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d806:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d80a:	4619      	mov	r1, r3
 800d80c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d80e:	f004 fb28 	bl	8011e62 <LoRaMacClassBRxBeacon>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00a      	beq.n	800d82e <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d818:	4a84      	ldr	r2, [pc, #528]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d81a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d81e:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d822:	4a82      	ldr	r2, [pc, #520]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d824:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d828:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800d82c:	e3bf      	b.n	800dfae <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d82e:	4b7e      	ldr	r3, [pc, #504]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d830:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d834:	2b01      	cmp	r3, #1
 800d836:	d11e      	bne.n	800d876 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d838:	f004 fb26 	bl	8011e88 <LoRaMacClassBIsPingExpected>
 800d83c:	4603      	mov	r3, r0
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00a      	beq.n	800d858 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d842:	2000      	movs	r0, #0
 800d844:	f004 fad7 	bl	8011df6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d848:	2000      	movs	r0, #0
 800d84a:	f004 faf8 	bl	8011e3e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d84e:	4b77      	ldr	r3, [pc, #476]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d850:	2204      	movs	r2, #4
 800d852:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800d856:	e00e      	b.n	800d876 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d858:	f004 fb1d 	bl	8011e96 <LoRaMacClassBIsMulticastExpected>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d009      	beq.n	800d876 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d862:	2000      	movs	r0, #0
 800d864:	f004 fad1 	bl	8011e0a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d868:	2000      	movs	r0, #0
 800d86a:	f004 faf1 	bl	8011e50 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d86e:	4b6f      	ldr	r3, [pc, #444]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d870:	2205      	movs	r2, #5
 800d872:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800d876:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d87a:	1c5a      	adds	r2, r3, #1
 800d87c:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800d880:	461a      	mov	r2, r3
 800d882:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d884:	4413      	add	r3, r2
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800d88c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d890:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d894:	b2db      	uxtb	r3, r3
 800d896:	3b01      	subs	r3, #1
 800d898:	2b06      	cmp	r3, #6
 800d89a:	f200 8362 	bhi.w	800df62 <ProcessRadioRxDone+0x832>
 800d89e:	a201      	add	r2, pc, #4	; (adr r2, 800d8a4 <ProcessRadioRxDone+0x174>)
 800d8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a4:	0800d8c1 	.word	0x0800d8c1
 800d8a8:	0800df63 	.word	0x0800df63
 800d8ac:	0800da41 	.word	0x0800da41
 800d8b0:	0800df63 	.word	0x0800df63
 800d8b4:	0800da39 	.word	0x0800da39
 800d8b8:	0800df63 	.word	0x0800df63
 800d8bc:	0800df09 	.word	0x0800df09
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800d8c0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d8c4:	2b10      	cmp	r3, #16
 800d8c6:	d806      	bhi.n	800d8d6 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d8c8:	4b58      	ldr	r3, [pc, #352]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d8d0:	f7ff ff08 	bl	800d6e4 <PrepareRxDoneAbort>
                return;
 800d8d4:	e36b      	b.n	800dfae <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800d8d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d8d8:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800d8da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d8e2:	4b51      	ldr	r3, [pc, #324]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d8e4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d006      	beq.n	800d8fa <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d8ec:	4b4f      	ldr	r3, [pc, #316]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d8f4:	f7ff fef6 	bl	800d6e4 <PrepareRxDoneAbort>
                return;
 800d8f8:	e359      	b.n	800dfae <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800d8fa:	f7fe fbcf 	bl	800c09c <SecureElementGetJoinEui>
 800d8fe:	4601      	mov	r1, r0
 800d900:	f107 0308 	add.w	r3, r7, #8
 800d904:	461a      	mov	r2, r3
 800d906:	20ff      	movs	r0, #255	; 0xff
 800d908:	f005 fc60 	bl	80131cc <LoRaMacCryptoHandleJoinAccept>
 800d90c:	4603      	mov	r3, r0
 800d90e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800d912:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d916:	2b00      	cmp	r3, #0
 800d918:	d172      	bne.n	800da00 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800d91a:	7c7b      	ldrb	r3, [r7, #17]
 800d91c:	461a      	mov	r2, r3
 800d91e:	4b42      	ldr	r3, [pc, #264]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d920:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800d924:	4b40      	ldr	r3, [pc, #256]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d926:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800d92a:	7cbb      	ldrb	r3, [r7, #18]
 800d92c:	021b      	lsls	r3, r3, #8
 800d92e:	4313      	orrs	r3, r2
 800d930:	4a3d      	ldr	r2, [pc, #244]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d932:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800d936:	4b3c      	ldr	r3, [pc, #240]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d938:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800d93c:	7cfb      	ldrb	r3, [r7, #19]
 800d93e:	041b      	lsls	r3, r3, #16
 800d940:	4313      	orrs	r3, r2
 800d942:	4a39      	ldr	r2, [pc, #228]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d944:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	4a37      	ldr	r2, [pc, #220]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d94c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800d950:	7e3b      	ldrb	r3, [r7, #24]
 800d952:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d956:	b2db      	uxtb	r3, r3
 800d958:	461a      	mov	r2, r3
 800d95a:	4b33      	ldr	r3, [pc, #204]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d95c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d960:	7e3b      	ldrb	r3, [r7, #24]
 800d962:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d966:	b2db      	uxtb	r3, r3
 800d968:	461a      	mov	r2, r3
 800d96a:	4b2f      	ldr	r3, [pc, #188]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d96c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d970:	7e3b      	ldrb	r3, [r7, #24]
 800d972:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d976:	b2db      	uxtb	r3, r3
 800d978:	461a      	mov	r2, r3
 800d97a:	4b2b      	ldr	r3, [pc, #172]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d97c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800d980:	7e7b      	ldrb	r3, [r7, #25]
 800d982:	461a      	mov	r2, r3
 800d984:	4b28      	ldr	r3, [pc, #160]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d986:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800d988:	4b27      	ldr	r3, [pc, #156]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d102      	bne.n	800d996 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800d990:	4b25      	ldr	r3, [pc, #148]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d992:	2201      	movs	r2, #1
 800d994:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800d996:	4b24      	ldr	r3, [pc, #144]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d99a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d99e:	fb02 f303 	mul.w	r3, r2, r3
 800d9a2:	4a21      	ldr	r2, [pc, #132]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d9a4:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800d9a6:	4b20      	ldr	r3, [pc, #128]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d9a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9aa:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800d9ae:	4a1e      	ldr	r2, [pc, #120]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d9b0:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800d9b2:	4b1d      	ldr	r3, [pc, #116]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800d9ba:	f107 0308 	add.w	r3, r7, #8
 800d9be:	3312      	adds	r3, #18
 800d9c0:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800d9c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	3b11      	subs	r3, #17
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800d9d0:	4b15      	ldr	r3, [pc, #84]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d9d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d9d6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800d9da:	4611      	mov	r1, r2
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f006 f9c4 	bl	8013d6a <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d9e2:	4b11      	ldr	r3, [pc, #68]	; (800da28 <ProcessRadioRxDone+0x2f8>)
 800d9e4:	2202      	movs	r2, #2
 800d9e6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d9ea:	2001      	movs	r0, #1
 800d9ec:	f004 ff18 	bl	8012820 <LoRaMacConfirmQueueIsCmdActive>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00e      	beq.n	800da14 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800d9f6:	2101      	movs	r1, #1
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	f004 fe85 	bl	8012708 <LoRaMacConfirmQueueSetStatus>
 800d9fe:	e009      	b.n	800da14 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800da00:	2001      	movs	r0, #1
 800da02:	f004 ff0d 	bl	8012820 <LoRaMacConfirmQueueIsCmdActive>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d003      	beq.n	800da14 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800da0c:	2101      	movs	r1, #1
 800da0e:	2007      	movs	r0, #7
 800da10:	f004 fe7a 	bl	8012708 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800da14:	4a05      	ldr	r2, [pc, #20]	; (800da2c <ProcessRadioRxDone+0x2fc>)
 800da16:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800da1a:	f043 0308 	orr.w	r3, r3, #8
 800da1e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800da22:	e2a5      	b.n	800df70 <ProcessRadioRxDone+0x840>
 800da24:	200017a0 	.word	0x200017a0
 800da28:	20000954 	.word	0x20000954
 800da2c:	2000044c 	.word	0x2000044c
 800da30:	0801b848 	.word	0x0801b848
 800da34:	200007e4 	.word	0x200007e4
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800da38:	4bae      	ldr	r3, [pc, #696]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800da40:	4bad      	ldr	r3, [pc, #692]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800da42:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800da46:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800da4a:	4baa      	ldr	r3, [pc, #680]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800da4c:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800da50:	b25b      	sxtb	r3, r3
 800da52:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800da56:	230d      	movs	r3, #13
 800da58:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800da5c:	4ba6      	ldr	r3, [pc, #664]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800da5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da62:	2b00      	cmp	r3, #0
 800da64:	d002      	beq.n	800da6c <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800da66:	230e      	movs	r3, #14
 800da68:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da6c:	4ba2      	ldr	r3, [pc, #648]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800da6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da72:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800da76:	4611      	mov	r1, r2
 800da78:	4618      	mov	r0, r3
 800da7a:	f006 f923 	bl	8013cc4 <RegionGetPhyParam>
 800da7e:	4603      	mov	r3, r0
 800da80:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800da82:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800da86:	3b0d      	subs	r3, #13
 800da88:	b29b      	uxth	r3, r3
 800da8a:	b21b      	sxth	r3, r3
 800da8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800da90:	b21a      	sxth	r2, r3
 800da92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da94:	b21b      	sxth	r3, r3
 800da96:	429a      	cmp	r2, r3
 800da98:	dc03      	bgt.n	800daa2 <ProcessRadioRxDone+0x372>
 800da9a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800da9e:	2b0b      	cmp	r3, #11
 800daa0:	d806      	bhi.n	800dab0 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800daa2:	4b94      	ldr	r3, [pc, #592]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800daa4:	2201      	movs	r2, #1
 800daa6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800daaa:	f7ff fe1b 	bl	800d6e4 <PrepareRxDoneAbort>
                return;
 800daae:	e27e      	b.n	800dfae <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800dab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dab2:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800dab4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800dabe:	4b8f      	ldr	r3, [pc, #572]	; (800dcfc <ProcessRadioRxDone+0x5cc>)
 800dac0:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800dac2:	23ff      	movs	r3, #255	; 0xff
 800dac4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800dac8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dacc:	4618      	mov	r0, r3
 800dace:	f005 fe7c 	bl	80137ca <LoRaMacParserData>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d006      	beq.n	800dae6 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dad8:	4b86      	ldr	r3, [pc, #536]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800dada:	2201      	movs	r2, #1
 800dadc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dae0:	f7ff fe00 	bl	800d6e4 <PrepareRxDoneAbort>
                return;
 800dae4:	e263      	b.n	800dfae <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800dae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae8:	4a82      	ldr	r2, [pc, #520]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800daea:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800daee:	1cba      	adds	r2, r7, #2
 800daf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800daf4:	4611      	mov	r1, r2
 800daf6:	4618      	mov	r0, r3
 800daf8:	f002 fcde 	bl	80104b8 <DetermineFrameType>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d006      	beq.n	800db10 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800db02:	4b7c      	ldr	r3, [pc, #496]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800db04:	2201      	movs	r2, #1
 800db06:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800db0a:	f7ff fdeb 	bl	800d6e4 <PrepareRxDoneAbort>
                return;
 800db0e:	e24e      	b.n	800dfae <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800db10:	2300      	movs	r3, #0
 800db12:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800db16:	2300      	movs	r3, #0
 800db18:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800db1a:	2300      	movs	r3, #0
 800db1c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800db20:	e049      	b.n	800dbb6 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800db22:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800db26:	4a74      	ldr	r2, [pc, #464]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800db28:	212c      	movs	r1, #44	; 0x2c
 800db2a:	fb01 f303 	mul.w	r3, r1, r3
 800db2e:	4413      	add	r3, r2
 800db30:	33d4      	adds	r3, #212	; 0xd4
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db36:	429a      	cmp	r2, r3
 800db38:	d138      	bne.n	800dbac <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800db3a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800db3e:	4a6e      	ldr	r2, [pc, #440]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800db40:	212c      	movs	r1, #44	; 0x2c
 800db42:	fb01 f303 	mul.w	r3, r1, r3
 800db46:	4413      	add	r3, r2
 800db48:	33d2      	adds	r3, #210	; 0xd2
 800db4a:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d02d      	beq.n	800dbac <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800db50:	2301      	movs	r3, #1
 800db52:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800db56:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800db5a:	4a67      	ldr	r2, [pc, #412]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800db5c:	212c      	movs	r1, #44	; 0x2c
 800db5e:	fb01 f303 	mul.w	r3, r1, r3
 800db62:	4413      	add	r3, r2
 800db64:	33d3      	adds	r3, #211	; 0xd3
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800db6c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800db70:	4a61      	ldr	r2, [pc, #388]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800db72:	212c      	movs	r1, #44	; 0x2c
 800db74:	fb01 f303 	mul.w	r3, r1, r3
 800db78:	4413      	add	r3, r2
 800db7a:	33f0      	adds	r3, #240	; 0xf0
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800db82:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800db86:	4a5c      	ldr	r2, [pc, #368]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800db88:	212c      	movs	r1, #44	; 0x2c
 800db8a:	fb01 f303 	mul.w	r3, r1, r3
 800db8e:	4413      	add	r3, r2
 800db90:	33d4      	adds	r3, #212	; 0xd4
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800db98:	4b57      	ldr	r3, [pc, #348]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800db9a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	d10e      	bne.n	800dbc0 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dba2:	4b54      	ldr	r3, [pc, #336]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800dba4:	2203      	movs	r2, #3
 800dba6:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800dbaa:	e009      	b.n	800dbc0 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dbac:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dbb6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d0b1      	beq.n	800db22 <ProcessRadioRxDone+0x3f2>
 800dbbe:	e000      	b.n	800dbc2 <ProcessRadioRxDone+0x492>
                    break;
 800dbc0:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dbc2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d117      	bne.n	800dbfa <ProcessRadioRxDone+0x4ca>
 800dbca:	78bb      	ldrb	r3, [r7, #2]
 800dbcc:	2b03      	cmp	r3, #3
 800dbce:	d10d      	bne.n	800dbec <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dbd0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dbd4:	f003 0320 	and.w	r3, r3, #32
 800dbd8:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d106      	bne.n	800dbec <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dbde:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dbe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbe6:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d006      	beq.n	800dbfa <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dbec:	4b41      	ldr	r3, [pc, #260]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dbf4:	f7ff fd76 	bl	800d6e4 <PrepareRxDoneAbort>
                return;
 800dbf8:	e1d9      	b.n	800dfae <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800dbfa:	2315      	movs	r3, #21
 800dbfc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dc00:	4b3d      	ldr	r3, [pc, #244]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800dc02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc06:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f006 f859 	bl	8013cc4 <RegionGetPhyParam>
 800dc12:	4603      	mov	r3, r0
 800dc14:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800dc16:	78b9      	ldrb	r1, [r7, #2]
 800dc18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	4d36      	ldr	r5, [pc, #216]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800dc1e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800dc22:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800dc26:	1d3a      	adds	r2, r7, #4
 800dc28:	9202      	str	r2, [sp, #8]
 800dc2a:	1cfa      	adds	r2, r7, #3
 800dc2c:	9201      	str	r2, [sp, #4]
 800dc2e:	9300      	str	r3, [sp, #0]
 800dc30:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800dc34:	4622      	mov	r2, r4
 800dc36:	f000 fe95 	bl	800e964 <GetFCntDown>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dc40:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d031      	beq.n	800dcac <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800dc48:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dc4c:	2b07      	cmp	r3, #7
 800dc4e:	d119      	bne.n	800dc84 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800dc50:	4b28      	ldr	r3, [pc, #160]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800dc52:	2208      	movs	r2, #8
 800dc54:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800dc58:	4b27      	ldr	r3, [pc, #156]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800dc5a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d11d      	bne.n	800dc9e <ProcessRadioRxDone+0x56e>
 800dc62:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dc66:	f023 031f 	bic.w	r3, r3, #31
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	2ba0      	cmp	r3, #160	; 0xa0
 800dc6e:	d116      	bne.n	800dc9e <ProcessRadioRxDone+0x56e>
 800dc70:	4b21      	ldr	r3, [pc, #132]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800dc72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d111      	bne.n	800dc9e <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800dc7a:	4b1f      	ldr	r3, [pc, #124]	; (800dcf8 <ProcessRadioRxDone+0x5c8>)
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800dc82:	e00c      	b.n	800dc9e <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800dc84:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dc88:	2b08      	cmp	r3, #8
 800dc8a:	d104      	bne.n	800dc96 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800dc8c:	4b19      	ldr	r3, [pc, #100]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800dc8e:	220a      	movs	r2, #10
 800dc90:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800dc94:	e003      	b.n	800dc9e <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc96:	4b17      	ldr	r3, [pc, #92]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800dc98:	2201      	movs	r2, #1
 800dc9a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4a14      	ldr	r2, [pc, #80]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800dca2:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800dca6:	f7ff fd1d 	bl	800d6e4 <PrepareRxDoneAbort>
                return;
 800dcaa:	e180      	b.n	800dfae <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800dcac:	78fa      	ldrb	r2, [r7, #3]
 800dcae:	6879      	ldr	r1, [r7, #4]
 800dcb0:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800dcb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	460b      	mov	r3, r1
 800dcbc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dcc0:	f005 fbd0 	bl	8013464 <LoRaMacCryptoUnsecureMessage>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dcca:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d016      	beq.n	800dd00 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800dcd2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dcd6:	2b02      	cmp	r3, #2
 800dcd8:	d104      	bne.n	800dce4 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800dcda:	4b06      	ldr	r3, [pc, #24]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800dcdc:	220b      	movs	r2, #11
 800dcde:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800dce2:	e003      	b.n	800dcec <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800dce4:	4b03      	ldr	r3, [pc, #12]	; (800dcf4 <ProcessRadioRxDone+0x5c4>)
 800dce6:	220c      	movs	r2, #12
 800dce8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800dcec:	f7ff fcfa 	bl	800d6e4 <PrepareRxDoneAbort>
                return;
 800dcf0:	e15d      	b.n	800dfae <ProcessRadioRxDone+0x87e>
 800dcf2:	bf00      	nop
 800dcf4:	2000044c 	.word	0x2000044c
 800dcf8:	20000954 	.word	0x20000954
 800dcfc:	20000684 	.word	0x20000684
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dd00:	4bac      	ldr	r3, [pc, #688]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800dd08:	4aaa      	ldr	r2, [pc, #680]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dd0a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dd0e:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800dd12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd16:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	4ba5      	ldr	r3, [pc, #660]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dd20:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800dd24:	4ba3      	ldr	r3, [pc, #652]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dd26:	2200      	movs	r2, #0
 800dd28:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800dd2c:	4ba1      	ldr	r3, [pc, #644]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	4a9f      	ldr	r2, [pc, #636]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dd38:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800dd3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	bf14      	ite	ne
 800dd4a:	2301      	movne	r3, #1
 800dd4c:	2300      	moveq	r3, #0
 800dd4e:	b2da      	uxtb	r2, r3
 800dd50:	4b98      	ldr	r3, [pc, #608]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dd52:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dd56:	4b97      	ldr	r3, [pc, #604]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800dd5e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd62:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	bf14      	ite	ne
 800dd6c:	2301      	movne	r3, #1
 800dd6e:	2300      	moveq	r3, #0
 800dd70:	b2da      	uxtb	r2, r3
 800dd72:	4b90      	ldr	r3, [pc, #576]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dd74:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800dd78:	4b8e      	ldr	r3, [pc, #568]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dd7a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d004      	beq.n	800dd8c <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800dd82:	4b8c      	ldr	r3, [pc, #560]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dd84:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d102      	bne.n	800dd92 <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800dd8c:	4b8a      	ldr	r3, [pc, #552]	; (800dfb8 <ProcessRadioRxDone+0x888>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800dd92:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d104      	bne.n	800dda4 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800dd9a:	4b86      	ldr	r3, [pc, #536]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dd9c:	2202      	movs	r2, #2
 800dd9e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800dda2:	e01f      	b.n	800dde4 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800dda4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dda8:	f023 031f 	bic.w	r3, r3, #31
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	2ba0      	cmp	r3, #160	; 0xa0
 800ddb0:	d110      	bne.n	800ddd4 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ddb2:	4b81      	ldr	r3, [pc, #516]	; (800dfb8 <ProcessRadioRxDone+0x888>)
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ddba:	4b7f      	ldr	r3, [pc, #508]	; (800dfb8 <ProcessRadioRxDone+0x888>)
 800ddbc:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d102      	bne.n	800ddca <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ddc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddc6:	4a7c      	ldr	r2, [pc, #496]	; (800dfb8 <ProcessRadioRxDone+0x888>)
 800ddc8:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ddca:	4b7a      	ldr	r3, [pc, #488]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800ddcc:	2201      	movs	r2, #1
 800ddce:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800ddd2:	e007      	b.n	800dde4 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800ddd4:	4b78      	ldr	r3, [pc, #480]	; (800dfb8 <ProcessRadioRxDone+0x888>)
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800dddc:	4b75      	ldr	r3, [pc, #468]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800dde4:	4b73      	ldr	r3, [pc, #460]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dde6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800ddea:	4a72      	ldr	r2, [pc, #456]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800ddec:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800ddf0:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f001 ff0d 	bl	800fc14 <RemoveMacCommands>

            switch( fType )
 800ddfa:	78bb      	ldrb	r3, [r7, #2]
 800ddfc:	2b03      	cmp	r3, #3
 800ddfe:	d874      	bhi.n	800deea <ProcessRadioRxDone+0x7ba>
 800de00:	a201      	add	r2, pc, #4	; (adr r2, 800de08 <ProcessRadioRxDone+0x6d8>)
 800de02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de06:	bf00      	nop
 800de08:	0800de19 	.word	0x0800de19
 800de0c:	0800de69 	.word	0x0800de69
 800de10:	0800de9f 	.word	0x0800de9f
 800de14:	0800dec5 	.word	0x0800dec5
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800de18:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de1c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800de20:	b2db      	uxtb	r3, r3
 800de22:	461c      	mov	r4, r3
 800de24:	4b63      	ldr	r3, [pc, #396]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800de26:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800de2a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800de2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800de32:	f102 0010 	add.w	r0, r2, #16
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	460b      	mov	r3, r1
 800de3a:	4622      	mov	r2, r4
 800de3c:	2100      	movs	r1, #0
 800de3e:	f000 ff03 	bl	800ec48 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800de42:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800de46:	4b5b      	ldr	r3, [pc, #364]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800de48:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800de4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de4e:	4a59      	ldr	r2, [pc, #356]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800de50:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800de54:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800de58:	4b56      	ldr	r3, [pc, #344]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800de5a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800de5e:	4b55      	ldr	r3, [pc, #340]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800de60:	2201      	movs	r2, #1
 800de62:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800de66:	e047      	b.n	800def8 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800de68:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800de70:	b2db      	uxtb	r3, r3
 800de72:	461c      	mov	r4, r3
 800de74:	4b4f      	ldr	r3, [pc, #316]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800de76:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800de7a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800de7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800de82:	f102 0010 	add.w	r0, r2, #16
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	460b      	mov	r3, r1
 800de8a:	4622      	mov	r2, r4
 800de8c:	2100      	movs	r1, #0
 800de8e:	f000 fedb 	bl	800ec48 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800de92:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800de96:	4b47      	ldr	r3, [pc, #284]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800de98:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800de9c:	e02c      	b.n	800def8 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800de9e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dea0:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800dea4:	4b43      	ldr	r3, [pc, #268]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dea6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800deaa:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	460b      	mov	r3, r1
 800deb2:	2100      	movs	r1, #0
 800deb4:	f000 fec8 	bl	800ec48 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800deb8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800debc:	4b3d      	ldr	r3, [pc, #244]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800debe:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800dec2:	e019      	b.n	800def8 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800dec4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dec8:	4b3a      	ldr	r3, [pc, #232]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800deca:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800dece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ded0:	4a38      	ldr	r2, [pc, #224]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800ded2:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ded6:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800deda:	4b36      	ldr	r3, [pc, #216]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dedc:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800dee0:	4b34      	ldr	r3, [pc, #208]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800dee2:	2201      	movs	r2, #1
 800dee4:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800dee8:	e006      	b.n	800def8 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800deea:	4b32      	ldr	r3, [pc, #200]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800deec:	2201      	movs	r2, #1
 800deee:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800def2:	f7ff fbf7 	bl	800d6e4 <PrepareRxDoneAbort>
                    break;
 800def6:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800def8:	4a2e      	ldr	r2, [pc, #184]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800defa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800defe:	f043 0302 	orr.w	r3, r3, #2
 800df02:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800df06:	e033      	b.n	800df70 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800df08:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800df0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800df0e:	18d1      	adds	r1, r2, r3
 800df10:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800df14:	b29b      	uxth	r3, r3
 800df16:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800df1a:	1ad3      	subs	r3, r2, r3
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	461a      	mov	r2, r3
 800df20:	4826      	ldr	r0, [pc, #152]	; (800dfbc <ProcessRadioRxDone+0x88c>)
 800df22:	f008 f9da 	bl	80162da <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800df26:	4b23      	ldr	r3, [pc, #140]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800df28:	2203      	movs	r2, #3
 800df2a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800df2e:	4b21      	ldr	r3, [pc, #132]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800df30:	2200      	movs	r2, #0
 800df32:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800df36:	4b1f      	ldr	r3, [pc, #124]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800df38:	4a20      	ldr	r2, [pc, #128]	; (800dfbc <ProcessRadioRxDone+0x88c>)
 800df3a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800df3e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800df42:	b2da      	uxtb	r2, r3
 800df44:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800df48:	1ad3      	subs	r3, r2, r3
 800df4a:	b2da      	uxtb	r2, r3
 800df4c:	4b19      	ldr	r3, [pc, #100]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800df4e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800df52:	4a18      	ldr	r2, [pc, #96]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800df54:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800df58:	f043 0302 	orr.w	r3, r3, #2
 800df5c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800df60:	e006      	b.n	800df70 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df62:	4b14      	ldr	r3, [pc, #80]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800df64:	2201      	movs	r2, #1
 800df66:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800df6a:	f7ff fbbb 	bl	800d6e4 <PrepareRxDoneAbort>
            break;
 800df6e:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800df70:	4b10      	ldr	r3, [pc, #64]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800df72:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800df76:	2b00      	cmp	r3, #0
 800df78:	d008      	beq.n	800df8c <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800df7a:	4b0e      	ldr	r3, [pc, #56]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800df7c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00b      	beq.n	800df9c <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800df84:	2000      	movs	r0, #0
 800df86:	f000 fcb7 	bl	800e8f8 <OnAckTimeoutTimerEvent>
 800df8a:	e007      	b.n	800df9c <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800df8c:	4b0a      	ldr	r3, [pc, #40]	; (800dfb8 <ProcessRadioRxDone+0x888>)
 800df8e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800df92:	2b02      	cmp	r3, #2
 800df94:	d102      	bne.n	800df9c <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800df96:	2000      	movs	r0, #0
 800df98:	f000 fcae 	bl	800e8f8 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800df9c:	4a05      	ldr	r2, [pc, #20]	; (800dfb4 <ProcessRadioRxDone+0x884>)
 800df9e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dfa2:	f043 0320 	orr.w	r3, r3, #32
 800dfa6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800dfaa:	f7ff fae9 	bl	800d580 <UpdateRxSlotIdleState>
}
 800dfae:	3788      	adds	r7, #136	; 0x88
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bdb0      	pop	{r4, r5, r7, pc}
 800dfb4:	2000044c 	.word	0x2000044c
 800dfb8:	20000954 	.word	0x20000954
 800dfbc:	20000684 	.word	0x20000684

0800dfc0 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800dfc4:	4b11      	ldr	r3, [pc, #68]	; (800e00c <ProcessRadioTxTimeout+0x4c>)
 800dfc6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dfca:	2b02      	cmp	r3, #2
 800dfcc:	d002      	beq.n	800dfd4 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800dfce:	4b10      	ldr	r3, [pc, #64]	; (800e010 <ProcessRadioTxTimeout+0x50>)
 800dfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd2:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800dfd4:	f7ff fad4 	bl	800d580 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800dfd8:	4b0e      	ldr	r3, [pc, #56]	; (800e014 <ProcessRadioTxTimeout+0x54>)
 800dfda:	2202      	movs	r2, #2
 800dfdc:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800dfe0:	2002      	movs	r0, #2
 800dfe2:	f004 fbe9 	bl	80127b8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800dfe6:	4b0b      	ldr	r3, [pc, #44]	; (800e014 <ProcessRadioTxTimeout+0x54>)
 800dfe8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d003      	beq.n	800dff8 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800dff0:	4b08      	ldr	r3, [pc, #32]	; (800e014 <ProcessRadioTxTimeout+0x54>)
 800dff2:	2201      	movs	r2, #1
 800dff4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800dff8:	4a06      	ldr	r2, [pc, #24]	; (800e014 <ProcessRadioTxTimeout+0x54>)
 800dffa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dffe:	f043 0320 	orr.w	r3, r3, #32
 800e002:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800e006:	bf00      	nop
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	20000954 	.word	0x20000954
 800e010:	0801b848 	.word	0x0801b848
 800e014:	2000044c 	.word	0x2000044c

0800e018 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	4603      	mov	r3, r0
 800e020:	460a      	mov	r2, r1
 800e022:	71fb      	strb	r3, [r7, #7]
 800e024:	4613      	mov	r3, r2
 800e026:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e028:	2300      	movs	r3, #0
 800e02a:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e02c:	4b40      	ldr	r3, [pc, #256]	; (800e130 <HandleRadioRxErrorTimeout+0x118>)
 800e02e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e032:	2b02      	cmp	r3, #2
 800e034:	d002      	beq.n	800e03c <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e036:	4b3f      	ldr	r3, [pc, #252]	; (800e134 <HandleRadioRxErrorTimeout+0x11c>)
 800e038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e03a:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e03c:	f003 ff1d 	bl	8011e7a <LoRaMacClassBIsBeaconExpected>
 800e040:	4603      	mov	r3, r0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d007      	beq.n	800e056 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e046:	2002      	movs	r0, #2
 800e048:	f003 fecb 	bl	8011de2 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e04c:	2000      	movs	r0, #0
 800e04e:	f003 feed 	bl	8011e2c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e052:	2301      	movs	r3, #1
 800e054:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e056:	4b36      	ldr	r3, [pc, #216]	; (800e130 <HandleRadioRxErrorTimeout+0x118>)
 800e058:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d119      	bne.n	800e094 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e060:	f003 ff12 	bl	8011e88 <LoRaMacClassBIsPingExpected>
 800e064:	4603      	mov	r3, r0
 800e066:	2b00      	cmp	r3, #0
 800e068:	d007      	beq.n	800e07a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e06a:	2000      	movs	r0, #0
 800e06c:	f003 fec3 	bl	8011df6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e070:	2000      	movs	r0, #0
 800e072:	f003 fee4 	bl	8011e3e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e076:	2301      	movs	r3, #1
 800e078:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e07a:	f003 ff0c 	bl	8011e96 <LoRaMacClassBIsMulticastExpected>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d007      	beq.n	800e094 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e084:	2000      	movs	r0, #0
 800e086:	f003 fec0 	bl	8011e0a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e08a:	2000      	movs	r0, #0
 800e08c:	f003 fee0 	bl	8011e50 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e090:	2301      	movs	r3, #1
 800e092:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e094:	7bfb      	ldrb	r3, [r7, #15]
 800e096:	f083 0301 	eor.w	r3, r3, #1
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d040      	beq.n	800e122 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e0a0:	4b25      	ldr	r3, [pc, #148]	; (800e138 <HandleRadioRxErrorTimeout+0x120>)
 800e0a2:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d122      	bne.n	800e0f0 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e0aa:	4b23      	ldr	r3, [pc, #140]	; (800e138 <HandleRadioRxErrorTimeout+0x120>)
 800e0ac:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d003      	beq.n	800e0bc <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e0b4:	4a20      	ldr	r2, [pc, #128]	; (800e138 <HandleRadioRxErrorTimeout+0x120>)
 800e0b6:	79fb      	ldrb	r3, [r7, #7]
 800e0b8:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e0bc:	79fb      	ldrb	r3, [r7, #7]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f004 fb7a 	bl	80127b8 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e0c4:	4b1a      	ldr	r3, [pc, #104]	; (800e130 <HandleRadioRxErrorTimeout+0x118>)
 800e0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f00c f943 	bl	801a354 <UTIL_TIMER_GetElapsedTime>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	4b19      	ldr	r3, [pc, #100]	; (800e138 <HandleRadioRxErrorTimeout+0x120>)
 800e0d2:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d323      	bcc.n	800e122 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e0da:	4818      	ldr	r0, [pc, #96]	; (800e13c <HandleRadioRxErrorTimeout+0x124>)
 800e0dc:	f00c f80e 	bl	801a0fc <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e0e0:	4a15      	ldr	r2, [pc, #84]	; (800e138 <HandleRadioRxErrorTimeout+0x120>)
 800e0e2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e0e6:	f043 0320 	orr.w	r3, r3, #32
 800e0ea:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800e0ee:	e018      	b.n	800e122 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e0f0:	4b11      	ldr	r3, [pc, #68]	; (800e138 <HandleRadioRxErrorTimeout+0x120>)
 800e0f2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d003      	beq.n	800e102 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e0fa:	4a0f      	ldr	r2, [pc, #60]	; (800e138 <HandleRadioRxErrorTimeout+0x120>)
 800e0fc:	79bb      	ldrb	r3, [r7, #6]
 800e0fe:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e102:	79bb      	ldrb	r3, [r7, #6]
 800e104:	4618      	mov	r0, r3
 800e106:	f004 fb57 	bl	80127b8 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e10a:	4b09      	ldr	r3, [pc, #36]	; (800e130 <HandleRadioRxErrorTimeout+0x118>)
 800e10c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e110:	2b02      	cmp	r3, #2
 800e112:	d006      	beq.n	800e122 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e114:	4a08      	ldr	r2, [pc, #32]	; (800e138 <HandleRadioRxErrorTimeout+0x120>)
 800e116:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e11a:	f043 0320 	orr.w	r3, r3, #32
 800e11e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800e122:	f7ff fa2d 	bl	800d580 <UpdateRxSlotIdleState>
}
 800e126:	bf00      	nop
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	20000954 	.word	0x20000954
 800e134:	0801b848 	.word	0x0801b848
 800e138:	2000044c 	.word	0x2000044c
 800e13c:	200007e4 	.word	0x200007e4

0800e140 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e144:	2106      	movs	r1, #6
 800e146:	2005      	movs	r0, #5
 800e148:	f7ff ff66 	bl	800e018 <HandleRadioRxErrorTimeout>
}
 800e14c:	bf00      	nop
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e154:	2104      	movs	r1, #4
 800e156:	2003      	movs	r0, #3
 800e158:	f7ff ff5e 	bl	800e018 <HandleRadioRxErrorTimeout>
}
 800e15c:	bf00      	nop
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e166:	f3ef 8310 	mrs	r3, PRIMASK
 800e16a:	607b      	str	r3, [r7, #4]
  return(result);
 800e16c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e16e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e170:	b672      	cpsid	i
}
 800e172:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e174:	4b1d      	ldr	r3, [pc, #116]	; (800e1ec <LoRaMacHandleIrqEvents+0x8c>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e17a:	4b1c      	ldr	r3, [pc, #112]	; (800e1ec <LoRaMacHandleIrqEvents+0x8c>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	601a      	str	r2, [r3, #0]
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	f383 8810 	msr	PRIMASK, r3
}
 800e18a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d027      	beq.n	800e1e2 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e192:	783b      	ldrb	r3, [r7, #0]
 800e194:	f003 0310 	and.w	r3, r3, #16
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d001      	beq.n	800e1a2 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e19e:	f7ff fa07 	bl	800d5b0 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e1a2:	783b      	ldrb	r3, [r7, #0]
 800e1a4:	f003 0308 	and.w	r3, r3, #8
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d001      	beq.n	800e1b2 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e1ae:	f7ff fabf 	bl	800d730 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e1b2:	783b      	ldrb	r3, [r7, #0]
 800e1b4:	f003 0304 	and.w	r3, r3, #4
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d001      	beq.n	800e1c2 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e1be:	f7ff feff 	bl	800dfc0 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e1c2:	783b      	ldrb	r3, [r7, #0]
 800e1c4:	f003 0302 	and.w	r3, r3, #2
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d001      	beq.n	800e1d2 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e1ce:	f7ff ffb7 	bl	800e140 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e1d2:	783b      	ldrb	r3, [r7, #0]
 800e1d4:	f003 0301 	and.w	r3, r3, #1
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e1de:	f7ff ffb7 	bl	800e150 <ProcessRadioRxTimeout>
        }
    }
}
 800e1e2:	bf00      	nop
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	20000ca0 	.word	0x20000ca0

0800e1f0 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e1f4:	4b08      	ldr	r3, [pc, #32]	; (800e218 <LoRaMacIsBusy+0x28>)
 800e1f6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d106      	bne.n	800e20c <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e1fe:	4b06      	ldr	r3, [pc, #24]	; (800e218 <LoRaMacIsBusy+0x28>)
 800e200:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e204:	2b01      	cmp	r3, #1
 800e206:	d101      	bne.n	800e20c <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e208:	2300      	movs	r3, #0
 800e20a:	e000      	b.n	800e20e <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e20c:	2301      	movs	r3, #1
}
 800e20e:	4618      	mov	r0, r3
 800e210:	46bd      	mov	sp, r7
 800e212:	bc80      	pop	{r7}
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop
 800e218:	2000044c 	.word	0x2000044c

0800e21c <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	4603      	mov	r3, r0
 800e224:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e226:	4a04      	ldr	r2, [pc, #16]	; (800e238 <LoRaMacEnableRequests+0x1c>)
 800e228:	79fb      	ldrb	r3, [r7, #7]
 800e22a:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800e22e:	bf00      	nop
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	bc80      	pop	{r7}
 800e236:	4770      	bx	lr
 800e238:	2000044c 	.word	0x2000044c

0800e23c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e242:	4b2c      	ldr	r3, [pc, #176]	; (800e2f4 <LoRaMacHandleRequestEvents+0xb8>)
 800e244:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e248:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e24a:	4b2a      	ldr	r3, [pc, #168]	; (800e2f4 <LoRaMacHandleRequestEvents+0xb8>)
 800e24c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e250:	2b00      	cmp	r3, #0
 800e252:	d14a      	bne.n	800e2ea <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e254:	4b27      	ldr	r3, [pc, #156]	; (800e2f4 <LoRaMacHandleRequestEvents+0xb8>)
 800e256:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e25a:	f003 0301 	and.w	r3, r3, #1
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	2b00      	cmp	r3, #0
 800e262:	d006      	beq.n	800e272 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e264:	4a23      	ldr	r2, [pc, #140]	; (800e2f4 <LoRaMacHandleRequestEvents+0xb8>)
 800e266:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e26a:	f36f 0300 	bfc	r3, #0, #1
 800e26e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e272:	4b20      	ldr	r3, [pc, #128]	; (800e2f4 <LoRaMacHandleRequestEvents+0xb8>)
 800e274:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e278:	f003 0304 	and.w	r3, r3, #4
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d006      	beq.n	800e290 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e282:	4a1c      	ldr	r2, [pc, #112]	; (800e2f4 <LoRaMacHandleRequestEvents+0xb8>)
 800e284:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e288:	f36f 0382 	bfc	r3, #2, #1
 800e28c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e290:	2001      	movs	r0, #1
 800e292:	f7ff ffc3 	bl	800e21c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e296:	793b      	ldrb	r3, [r7, #4]
 800e298:	f003 0301 	and.w	r3, r3, #1
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d005      	beq.n	800e2ae <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e2a2:	4b14      	ldr	r3, [pc, #80]	; (800e2f4 <LoRaMacHandleRequestEvents+0xb8>)
 800e2a4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4813      	ldr	r0, [pc, #76]	; (800e2f8 <LoRaMacHandleRequestEvents+0xbc>)
 800e2ac:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e2ae:	793b      	ldrb	r3, [r7, #4]
 800e2b0:	f003 0304 	and.w	r3, r3, #4
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d00e      	beq.n	800e2d8 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e2ba:	4810      	ldr	r0, [pc, #64]	; (800e2fc <LoRaMacHandleRequestEvents+0xc0>)
 800e2bc:	f004 faca 	bl	8012854 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e2c0:	f004 fb14 	bl	80128ec <LoRaMacConfirmQueueGetCnt>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d006      	beq.n	800e2d8 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e2ca:	4a0a      	ldr	r2, [pc, #40]	; (800e2f4 <LoRaMacHandleRequestEvents+0xb8>)
 800e2cc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e2d0:	f043 0304 	orr.w	r3, r3, #4
 800e2d4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e2d8:	f003 fdfb 	bl	8011ed2 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e2dc:	4a05      	ldr	r2, [pc, #20]	; (800e2f4 <LoRaMacHandleRequestEvents+0xb8>)
 800e2de:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e2e2:	f36f 1345 	bfc	r3, #5, #1
 800e2e6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800e2ea:	bf00      	nop
 800e2ec:	3708      	adds	r7, #8
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	2000044c 	.word	0x2000044c
 800e2f8:	20000884 	.word	0x20000884
 800e2fc:	20000898 	.word	0x20000898

0800e300 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e306:	4b0a      	ldr	r3, [pc, #40]	; (800e330 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800e308:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d10a      	bne.n	800e326 <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e310:	2300      	movs	r3, #0
 800e312:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e314:	1dfb      	adds	r3, r7, #7
 800e316:	4618      	mov	r0, r3
 800e318:	f004 f882 	bl	8012420 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800e31c:	79fb      	ldrb	r3, [r7, #7]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800e322:	f000 fc81 	bl	800ec28 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800e326:	bf00      	nop
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	2000044c 	.word	0x2000044c

0800e334 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b088      	sub	sp, #32
 800e338:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e33a:	4b25      	ldr	r3, [pc, #148]	; (800e3d0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e33c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e340:	f003 0308 	and.w	r3, r3, #8
 800e344:	b2db      	uxtb	r3, r3
 800e346:	2b00      	cmp	r3, #0
 800e348:	d00d      	beq.n	800e366 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e34a:	4a21      	ldr	r2, [pc, #132]	; (800e3d0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e34c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e350:	f36f 03c3 	bfc	r3, #3, #1
 800e354:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e358:	4b1d      	ldr	r3, [pc, #116]	; (800e3d0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e35a:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	491c      	ldr	r1, [pc, #112]	; (800e3d4 <LoRaMacHandleIndicationEvents+0xa0>)
 800e362:	481d      	ldr	r0, [pc, #116]	; (800e3d8 <LoRaMacHandleIndicationEvents+0xa4>)
 800e364:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800e366:	4b1a      	ldr	r3, [pc, #104]	; (800e3d0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e368:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e36c:	f003 0310 	and.w	r3, r3, #16
 800e370:	b2db      	uxtb	r3, r3
 800e372:	2b00      	cmp	r3, #0
 800e374:	d012      	beq.n	800e39c <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800e376:	2307      	movs	r3, #7
 800e378:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800e37e:	4b14      	ldr	r3, [pc, #80]	; (800e3d0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e380:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	1d3a      	adds	r2, r7, #4
 800e388:	4912      	ldr	r1, [pc, #72]	; (800e3d4 <LoRaMacHandleIndicationEvents+0xa0>)
 800e38a:	4610      	mov	r0, r2
 800e38c:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800e38e:	4a10      	ldr	r2, [pc, #64]	; (800e3d0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e390:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e394:	f36f 1304 	bfc	r3, #4, #1
 800e398:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e39c:	4b0c      	ldr	r3, [pc, #48]	; (800e3d0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e39e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e3a2:	f003 0302 	and.w	r3, r3, #2
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00d      	beq.n	800e3c8 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e3ac:	4a08      	ldr	r2, [pc, #32]	; (800e3d0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e3ae:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e3b2:	f36f 0341 	bfc	r3, #1, #1
 800e3b6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e3ba:	4b05      	ldr	r3, [pc, #20]	; (800e3d0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e3bc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	4904      	ldr	r1, [pc, #16]	; (800e3d4 <LoRaMacHandleIndicationEvents+0xa0>)
 800e3c4:	4805      	ldr	r0, [pc, #20]	; (800e3dc <LoRaMacHandleIndicationEvents+0xa8>)
 800e3c6:	4798      	blx	r3
    }
}
 800e3c8:	bf00      	nop
 800e3ca:	3720      	adds	r7, #32
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	2000044c 	.word	0x2000044c
 800e3d4:	200008c8 	.word	0x200008c8
 800e3d8:	200008ac 	.word	0x200008ac
 800e3dc:	20000868 	.word	0x20000868

0800e3e0 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e3e6:	4b32      	ldr	r3, [pc, #200]	; (800e4b0 <LoRaMacHandleMcpsRequest+0xd0>)
 800e3e8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e3ec:	f003 0301 	and.w	r3, r3, #1
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d058      	beq.n	800e4a8 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e3fe:	4b2c      	ldr	r3, [pc, #176]	; (800e4b0 <LoRaMacHandleMcpsRequest+0xd0>)
 800e400:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e404:	2b00      	cmp	r3, #0
 800e406:	d004      	beq.n	800e412 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e408:	4b29      	ldr	r3, [pc, #164]	; (800e4b0 <LoRaMacHandleMcpsRequest+0xd0>)
 800e40a:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e40e:	2b03      	cmp	r3, #3
 800e410:	d104      	bne.n	800e41c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e412:	f002 f89f 	bl	8010554 <CheckRetransUnconfirmedUplink>
 800e416:	4603      	mov	r3, r0
 800e418:	71fb      	strb	r3, [r7, #7]
 800e41a:	e020      	b.n	800e45e <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e41c:	4b24      	ldr	r3, [pc, #144]	; (800e4b0 <LoRaMacHandleMcpsRequest+0xd0>)
 800e41e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e422:	2b01      	cmp	r3, #1
 800e424:	d11b      	bne.n	800e45e <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800e426:	4b22      	ldr	r3, [pc, #136]	; (800e4b0 <LoRaMacHandleMcpsRequest+0xd0>)
 800e428:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d014      	beq.n	800e45a <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e430:	f002 f8bc 	bl	80105ac <CheckRetransConfirmedUplink>
 800e434:	4603      	mov	r3, r0
 800e436:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e438:	4b1e      	ldr	r3, [pc, #120]	; (800e4b4 <LoRaMacHandleMcpsRequest+0xd4>)
 800e43a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d10d      	bne.n	800e45e <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e442:	79fb      	ldrb	r3, [r7, #7]
 800e444:	f083 0301 	eor.w	r3, r3, #1
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d002      	beq.n	800e454 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e44e:	f002 f929 	bl	80106a4 <AckTimeoutRetriesProcess>
 800e452:	e004      	b.n	800e45e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e454:	f002 f964 	bl	8010720 <AckTimeoutRetriesFinalize>
 800e458:	e001      	b.n	800e45e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e45a:	2301      	movs	r3, #1
 800e45c:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800e45e:	79fb      	ldrb	r3, [r7, #7]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00d      	beq.n	800e480 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e464:	4814      	ldr	r0, [pc, #80]	; (800e4b8 <LoRaMacHandleMcpsRequest+0xd8>)
 800e466:	f00b fe49 	bl	801a0fc <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e46a:	4b11      	ldr	r3, [pc, #68]	; (800e4b0 <LoRaMacHandleMcpsRequest+0xd0>)
 800e46c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e470:	f023 0320 	bic.w	r3, r3, #32
 800e474:	4a0e      	ldr	r2, [pc, #56]	; (800e4b0 <LoRaMacHandleMcpsRequest+0xd0>)
 800e476:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e47a:	f002 f8b9 	bl	80105f0 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e47e:	e013      	b.n	800e4a8 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e480:	79bb      	ldrb	r3, [r7, #6]
 800e482:	f083 0301 	eor.w	r3, r3, #1
 800e486:	b2db      	uxtb	r3, r3
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d00d      	beq.n	800e4a8 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e48c:	4a08      	ldr	r2, [pc, #32]	; (800e4b0 <LoRaMacHandleMcpsRequest+0xd0>)
 800e48e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e492:	f36f 1345 	bfc	r3, #5, #1
 800e496:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800e49a:	4b05      	ldr	r3, [pc, #20]	; (800e4b0 <LoRaMacHandleMcpsRequest+0xd0>)
 800e49c:	2200      	movs	r2, #0
 800e49e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e4a2:	2000      	movs	r0, #0
 800e4a4:	f000 f97e 	bl	800e7a4 <OnTxDelayedTimerEvent>
}
 800e4a8:	bf00      	nop
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	2000044c 	.word	0x2000044c
 800e4b4:	20000954 	.word	0x20000954
 800e4b8:	200007b4 	.word	0x200007b4

0800e4bc <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e4c0:	4b1b      	ldr	r3, [pc, #108]	; (800e530 <LoRaMacHandleMlmeRequest+0x74>)
 800e4c2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e4c6:	f003 0304 	and.w	r3, r3, #4
 800e4ca:	b2db      	uxtb	r3, r3
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d02c      	beq.n	800e52a <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e4d0:	2001      	movs	r0, #1
 800e4d2:	f004 f9a5 	bl	8012820 <LoRaMacConfirmQueueIsCmdActive>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d012      	beq.n	800e502 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e4dc:	2001      	movs	r0, #1
 800e4de:	f004 f941 	bl	8012764 <LoRaMacConfirmQueueGetStatus>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d103      	bne.n	800e4f0 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e4e8:	4b11      	ldr	r3, [pc, #68]	; (800e530 <LoRaMacHandleMlmeRequest+0x74>)
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e4f0:	4b0f      	ldr	r3, [pc, #60]	; (800e530 <LoRaMacHandleMlmeRequest+0x74>)
 800e4f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e4f6:	f023 0302 	bic.w	r3, r3, #2
 800e4fa:	4a0d      	ldr	r2, [pc, #52]	; (800e530 <LoRaMacHandleMlmeRequest+0x74>)
 800e4fc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800e500:	e013      	b.n	800e52a <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e502:	2005      	movs	r0, #5
 800e504:	f004 f98c 	bl	8012820 <LoRaMacConfirmQueueIsCmdActive>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d105      	bne.n	800e51a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e50e:	2006      	movs	r0, #6
 800e510:	f004 f986 	bl	8012820 <LoRaMacConfirmQueueIsCmdActive>
 800e514:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e516:	2b00      	cmp	r3, #0
 800e518:	d007      	beq.n	800e52a <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e51a:	4b05      	ldr	r3, [pc, #20]	; (800e530 <LoRaMacHandleMlmeRequest+0x74>)
 800e51c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e520:	f023 0302 	bic.w	r3, r3, #2
 800e524:	4a02      	ldr	r2, [pc, #8]	; (800e530 <LoRaMacHandleMlmeRequest+0x74>)
 800e526:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e52a:	bf00      	nop
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	2000044c 	.word	0x2000044c

0800e534 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e538:	200c      	movs	r0, #12
 800e53a:	f004 f971 	bl	8012820 <LoRaMacConfirmQueueIsCmdActive>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d019      	beq.n	800e578 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e544:	4b0e      	ldr	r3, [pc, #56]	; (800e580 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e546:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e54a:	f003 0301 	and.w	r3, r3, #1
 800e54e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e550:	2b00      	cmp	r3, #0
 800e552:	d111      	bne.n	800e578 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e554:	4b0a      	ldr	r3, [pc, #40]	; (800e580 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e556:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e55a:	f003 0304 	and.w	r3, r3, #4
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	2b00      	cmp	r3, #0
 800e562:	d009      	beq.n	800e578 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e564:	4b06      	ldr	r3, [pc, #24]	; (800e580 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e566:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e56a:	f023 0302 	bic.w	r3, r3, #2
 800e56e:	4a04      	ldr	r2, [pc, #16]	; (800e580 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e570:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e574:	2301      	movs	r3, #1
 800e576:	e000      	b.n	800e57a <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e578:	2300      	movs	r3, #0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	2000044c 	.word	0x2000044c

0800e584 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800e584:	b480      	push	{r7}
 800e586:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e588:	4b0d      	ldr	r3, [pc, #52]	; (800e5c0 <LoRaMacCheckForRxAbort+0x3c>)
 800e58a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00f      	beq.n	800e5b6 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e596:	4b0a      	ldr	r3, [pc, #40]	; (800e5c0 <LoRaMacCheckForRxAbort+0x3c>)
 800e598:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e59c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5a0:	4a07      	ldr	r2, [pc, #28]	; (800e5c0 <LoRaMacCheckForRxAbort+0x3c>)
 800e5a2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e5a6:	4b06      	ldr	r3, [pc, #24]	; (800e5c0 <LoRaMacCheckForRxAbort+0x3c>)
 800e5a8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5ac:	f023 0302 	bic.w	r3, r3, #2
 800e5b0:	4a03      	ldr	r2, [pc, #12]	; (800e5c0 <LoRaMacCheckForRxAbort+0x3c>)
 800e5b2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e5b6:	bf00      	nop
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bc80      	pop	{r7}
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	2000044c 	.word	0x2000044c

0800e5c4 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e5d4:	4b50      	ldr	r3, [pc, #320]	; (800e718 <LoRaMacHandleNvm+0x154>)
 800e5d6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	f040 8097 	bne.w	800e70e <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2124      	movs	r1, #36	; 0x24
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f007 fecd 	bl	8016384 <Crc32>
 800e5ea:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f0:	68ba      	ldr	r2, [r7, #8]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d006      	beq.n	800e604 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	68ba      	ldr	r2, [r7, #8]
 800e5fa:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e5fc:	89fb      	ldrh	r3, [r7, #14]
 800e5fe:	f043 0301 	orr.w	r3, r3, #1
 800e602:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	3328      	adds	r3, #40	; 0x28
 800e608:	2114      	movs	r1, #20
 800e60a:	4618      	mov	r0, r3
 800e60c:	f007 feba 	bl	8016384 <Crc32>
 800e610:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e616:	68ba      	ldr	r2, [r7, #8]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d006      	beq.n	800e62a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	68ba      	ldr	r2, [r7, #8]
 800e620:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e622:	89fb      	ldrh	r3, [r7, #14]
 800e624:	f043 0302 	orr.w	r3, r3, #2
 800e628:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	3340      	adds	r3, #64	; 0x40
 800e62e:	21d4      	movs	r1, #212	; 0xd4
 800e630:	4618      	mov	r0, r3
 800e632:	f007 fea7 	bl	8016384 <Crc32>
 800e636:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	429a      	cmp	r2, r3
 800e642:	d007      	beq.n	800e654 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	68ba      	ldr	r2, [r7, #8]
 800e648:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e64c:	89fb      	ldrh	r3, [r7, #14]
 800e64e:	f043 0304 	orr.w	r3, r3, #4
 800e652:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800e65a:	21bc      	movs	r1, #188	; 0xbc
 800e65c:	4618      	mov	r0, r3
 800e65e:	f007 fe91 	bl	8016384 <Crc32>
 800e662:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d007      	beq.n	800e680 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	68ba      	ldr	r2, [r7, #8]
 800e674:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e678:	89fb      	ldrh	r3, [r7, #14]
 800e67a:	f043 0308 	orr.w	r3, r3, #8
 800e67e:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e686:	2190      	movs	r1, #144	; 0x90
 800e688:	4618      	mov	r0, r3
 800e68a:	f007 fe7b 	bl	8016384 <Crc32>
 800e68e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e696:	68ba      	ldr	r2, [r7, #8]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d007      	beq.n	800e6ac <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	68ba      	ldr	r2, [r7, #8]
 800e6a0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e6a4:	89fb      	ldrh	r3, [r7, #14]
 800e6a6:	f043 0310 	orr.w	r3, r3, #16
 800e6aa:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800e6b2:	21c4      	movs	r1, #196	; 0xc4
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f007 fe65 	bl	8016384 <Crc32>
 800e6ba:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800e6c2:	68ba      	ldr	r2, [r7, #8]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d007      	beq.n	800e6d8 <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	68ba      	ldr	r2, [r7, #8]
 800e6cc:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e6d0:	89fb      	ldrh	r3, [r7, #14]
 800e6d2:	f043 0320 	orr.w	r3, r3, #32
 800e6d6:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e6de:	2114      	movs	r1, #20
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f007 fe4f 	bl	8016384 <Crc32>
 800e6e6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e6ee:	68ba      	ldr	r2, [r7, #8]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d007      	beq.n	800e704 <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e6fc:	89fb      	ldrh	r3, [r7, #14]
 800e6fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e702:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e704:	89fb      	ldrh	r3, [r7, #14]
 800e706:	4618      	mov	r0, r3
 800e708:	f001 ffae 	bl	8010668 <CallNvmDataChangeCallback>
 800e70c:	e000      	b.n	800e710 <LoRaMacHandleNvm+0x14c>
        return;
 800e70e:	bf00      	nop
}
 800e710:	3710      	adds	r7, #16
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	2000044c 	.word	0x2000044c

0800e71c <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e722:	2300      	movs	r3, #0
 800e724:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e726:	f7ff fd1b 	bl	800e160 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e72a:	f003 fc36 	bl	8011f9a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e72e:	4b1b      	ldr	r3, [pc, #108]	; (800e79c <LoRaMacProcess+0x80>)
 800e730:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e734:	f003 0320 	and.w	r3, r3, #32
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d021      	beq.n	800e782 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e73e:	2000      	movs	r0, #0
 800e740:	f7ff fd6c 	bl	800e21c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e744:	f7ff ff1e 	bl	800e584 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e748:	f002 f81e 	bl	8010788 <IsRequestPending>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d006      	beq.n	800e760 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e752:	f7ff feef 	bl	800e534 <LoRaMacCheckForBeaconAcquisition>
 800e756:	4603      	mov	r3, r0
 800e758:	461a      	mov	r2, r3
 800e75a:	79fb      	ldrb	r3, [r7, #7]
 800e75c:	4313      	orrs	r3, r2
 800e75e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e760:	79fb      	ldrb	r3, [r7, #7]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d103      	bne.n	800e76e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e766:	f7ff fea9 	bl	800e4bc <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e76a:	f7ff fe39 	bl	800e3e0 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e76e:	f7ff fd65 	bl	800e23c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800e772:	f7ff fdc5 	bl	800e300 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800e776:	480a      	ldr	r0, [pc, #40]	; (800e7a0 <LoRaMacProcess+0x84>)
 800e778:	f7ff ff24 	bl	800e5c4 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e77c:	2001      	movs	r0, #1
 800e77e:	f7ff fd4d 	bl	800e21c <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800e782:	f7ff fdd7 	bl	800e334 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e786:	4b05      	ldr	r3, [pc, #20]	; (800e79c <LoRaMacProcess+0x80>)
 800e788:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	d101      	bne.n	800e794 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800e790:	f001 fb7c 	bl	800fe8c <OpenContinuousRxCWindow>
    }
}
 800e794:	bf00      	nop
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	2000044c 	.word	0x2000044c
 800e7a0:	20000954 	.word	0x20000954

0800e7a4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e7ac:	4817      	ldr	r0, [pc, #92]	; (800e80c <OnTxDelayedTimerEvent+0x68>)
 800e7ae:	f00b fca5 	bl	801a0fc <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e7b2:	4b17      	ldr	r3, [pc, #92]	; (800e810 <OnTxDelayedTimerEvent+0x6c>)
 800e7b4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e7b8:	f023 0320 	bic.w	r3, r3, #32
 800e7bc:	4a14      	ldr	r2, [pc, #80]	; (800e810 <OnTxDelayedTimerEvent+0x6c>)
 800e7be:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e7c2:	2001      	movs	r0, #1
 800e7c4:	f001 f8fc 	bl	800f9c0 <ScheduleTx>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d018      	beq.n	800e800 <OnTxDelayedTimerEvent+0x5c>
 800e7ce:	2b0b      	cmp	r3, #11
 800e7d0:	d016      	beq.n	800e800 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e7d2:	4b10      	ldr	r3, [pc, #64]	; (800e814 <OnTxDelayedTimerEvent+0x70>)
 800e7d4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e7d8:	b2da      	uxtb	r2, r3
 800e7da:	4b0d      	ldr	r3, [pc, #52]	; (800e810 <OnTxDelayedTimerEvent+0x6c>)
 800e7dc:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e7e0:	4b0b      	ldr	r3, [pc, #44]	; (800e810 <OnTxDelayedTimerEvent+0x6c>)
 800e7e2:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800e7e6:	4b0a      	ldr	r3, [pc, #40]	; (800e810 <OnTxDelayedTimerEvent+0x6c>)
 800e7e8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e7ec:	4b08      	ldr	r3, [pc, #32]	; (800e810 <OnTxDelayedTimerEvent+0x6c>)
 800e7ee:	2209      	movs	r2, #9
 800e7f0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e7f4:	2009      	movs	r0, #9
 800e7f6:	f003 ffdf 	bl	80127b8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e7fa:	f001 fef9 	bl	80105f0 <StopRetransmission>
            break;
 800e7fe:	e000      	b.n	800e802 <OnTxDelayedTimerEvent+0x5e>
            break;
 800e800:	bf00      	nop
        }
    }
}
 800e802:	bf00      	nop
 800e804:	3708      	adds	r7, #8
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	200007b4 	.word	0x200007b4
 800e810:	2000044c 	.word	0x2000044c
 800e814:	20000954 	.word	0x20000954

0800e818 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e820:	4b14      	ldr	r3, [pc, #80]	; (800e874 <OnRxWindow1TimerEvent+0x5c>)
 800e822:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e826:	4b13      	ldr	r3, [pc, #76]	; (800e874 <OnRxWindow1TimerEvent+0x5c>)
 800e828:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e82c:	4b12      	ldr	r3, [pc, #72]	; (800e878 <OnRxWindow1TimerEvent+0x60>)
 800e82e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e832:	b25a      	sxtb	r2, r3
 800e834:	4b0f      	ldr	r3, [pc, #60]	; (800e874 <OnRxWindow1TimerEvent+0x5c>)
 800e836:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e83a:	4b0f      	ldr	r3, [pc, #60]	; (800e878 <OnRxWindow1TimerEvent+0x60>)
 800e83c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e840:	4b0c      	ldr	r3, [pc, #48]	; (800e874 <OnRxWindow1TimerEvent+0x5c>)
 800e842:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e846:	4b0c      	ldr	r3, [pc, #48]	; (800e878 <OnRxWindow1TimerEvent+0x60>)
 800e848:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e84c:	4b09      	ldr	r3, [pc, #36]	; (800e874 <OnRxWindow1TimerEvent+0x5c>)
 800e84e:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e852:	4b08      	ldr	r3, [pc, #32]	; (800e874 <OnRxWindow1TimerEvent+0x5c>)
 800e854:	2200      	movs	r2, #0
 800e856:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e85a:	4b06      	ldr	r3, [pc, #24]	; (800e874 <OnRxWindow1TimerEvent+0x5c>)
 800e85c:	2200      	movs	r2, #0
 800e85e:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800e862:	4906      	ldr	r1, [pc, #24]	; (800e87c <OnRxWindow1TimerEvent+0x64>)
 800e864:	4806      	ldr	r0, [pc, #24]	; (800e880 <OnRxWindow1TimerEvent+0x68>)
 800e866:	f001 fae3 	bl	800fe30 <RxWindowSetup>
}
 800e86a:	bf00      	nop
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	2000044c 	.word	0x2000044c
 800e878:	20000954 	.word	0x20000954
 800e87c:	20000804 	.word	0x20000804
 800e880:	200007cc 	.word	0x200007cc

0800e884 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e88c:	4b16      	ldr	r3, [pc, #88]	; (800e8e8 <OnRxWindow2TimerEvent+0x64>)
 800e88e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e892:	2b00      	cmp	r3, #0
 800e894:	d023      	beq.n	800e8de <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e896:	4b14      	ldr	r3, [pc, #80]	; (800e8e8 <OnRxWindow2TimerEvent+0x64>)
 800e898:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e89c:	4b12      	ldr	r3, [pc, #72]	; (800e8e8 <OnRxWindow2TimerEvent+0x64>)
 800e89e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e8a2:	4b12      	ldr	r3, [pc, #72]	; (800e8ec <OnRxWindow2TimerEvent+0x68>)
 800e8a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8a6:	4a10      	ldr	r2, [pc, #64]	; (800e8e8 <OnRxWindow2TimerEvent+0x64>)
 800e8a8:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e8ac:	4b0f      	ldr	r3, [pc, #60]	; (800e8ec <OnRxWindow2TimerEvent+0x68>)
 800e8ae:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e8b2:	4b0d      	ldr	r3, [pc, #52]	; (800e8e8 <OnRxWindow2TimerEvent+0x64>)
 800e8b4:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e8b8:	4b0c      	ldr	r3, [pc, #48]	; (800e8ec <OnRxWindow2TimerEvent+0x68>)
 800e8ba:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e8be:	4b0a      	ldr	r3, [pc, #40]	; (800e8e8 <OnRxWindow2TimerEvent+0x64>)
 800e8c0:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e8c4:	4b08      	ldr	r3, [pc, #32]	; (800e8e8 <OnRxWindow2TimerEvent+0x64>)
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e8cc:	4b06      	ldr	r3, [pc, #24]	; (800e8e8 <OnRxWindow2TimerEvent+0x64>)
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800e8d4:	4906      	ldr	r1, [pc, #24]	; (800e8f0 <OnRxWindow2TimerEvent+0x6c>)
 800e8d6:	4807      	ldr	r0, [pc, #28]	; (800e8f4 <OnRxWindow2TimerEvent+0x70>)
 800e8d8:	f001 faaa 	bl	800fe30 <RxWindowSetup>
 800e8dc:	e000      	b.n	800e8e0 <OnRxWindow2TimerEvent+0x5c>
        return;
 800e8de:	bf00      	nop
}
 800e8e0:	3708      	adds	r7, #8
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	2000044c 	.word	0x2000044c
 800e8ec:	20000954 	.word	0x20000954
 800e8f0:	20000818 	.word	0x20000818
 800e8f4:	200007e4 	.word	0x200007e4

0800e8f8 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800e900:	4815      	ldr	r0, [pc, #84]	; (800e958 <OnAckTimeoutTimerEvent+0x60>)
 800e902:	f00b fbfb 	bl	801a0fc <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800e906:	4b15      	ldr	r3, [pc, #84]	; (800e95c <OnAckTimeoutTimerEvent+0x64>)
 800e908:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d003      	beq.n	800e918 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800e910:	4b12      	ldr	r3, [pc, #72]	; (800e95c <OnAckTimeoutTimerEvent+0x64>)
 800e912:	2201      	movs	r2, #1
 800e914:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e918:	4b11      	ldr	r3, [pc, #68]	; (800e960 <OnAckTimeoutTimerEvent+0x68>)
 800e91a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e91e:	2b02      	cmp	r3, #2
 800e920:	d106      	bne.n	800e930 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e922:	4a0e      	ldr	r2, [pc, #56]	; (800e95c <OnAckTimeoutTimerEvent+0x64>)
 800e924:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e928:	f043 0320 	orr.w	r3, r3, #32
 800e92c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e930:	4b0a      	ldr	r3, [pc, #40]	; (800e95c <OnAckTimeoutTimerEvent+0x64>)
 800e932:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00a      	beq.n	800e950 <OnAckTimeoutTimerEvent+0x58>
 800e93a:	4b08      	ldr	r3, [pc, #32]	; (800e95c <OnAckTimeoutTimerEvent+0x64>)
 800e93c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e940:	691b      	ldr	r3, [r3, #16]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d004      	beq.n	800e950 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e946:	4b05      	ldr	r3, [pc, #20]	; (800e95c <OnAckTimeoutTimerEvent+0x64>)
 800e948:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e94c:	691b      	ldr	r3, [r3, #16]
 800e94e:	4798      	blx	r3
    }
}
 800e950:	bf00      	nop
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	20000844 	.word	0x20000844
 800e95c:	2000044c 	.word	0x2000044c
 800e960:	20000954 	.word	0x20000954

0800e964 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60ba      	str	r2, [r7, #8]
 800e96c:	607b      	str	r3, [r7, #4]
 800e96e:	4603      	mov	r3, r0
 800e970:	73fb      	strb	r3, [r7, #15]
 800e972:	460b      	mov	r3, r1
 800e974:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d005      	beq.n	800e988 <GetFCntDown+0x24>
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d002      	beq.n	800e988 <GetFCntDown+0x24>
 800e982:	6a3b      	ldr	r3, [r7, #32]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d101      	bne.n	800e98c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e988:	230a      	movs	r3, #10
 800e98a:	e029      	b.n	800e9e0 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d016      	beq.n	800e9c0 <GetFCntDown+0x5c>
 800e992:	2b01      	cmp	r3, #1
 800e994:	d118      	bne.n	800e9c8 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800e996:	79bb      	ldrb	r3, [r7, #6]
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d10d      	bne.n	800e9b8 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800e99c:	7bbb      	ldrb	r3, [r7, #14]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d002      	beq.n	800e9a8 <GetFCntDown+0x44>
 800e9a2:	7bbb      	ldrb	r3, [r7, #14]
 800e9a4:	2b03      	cmp	r3, #3
 800e9a6:	d103      	bne.n	800e9b0 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	2202      	movs	r2, #2
 800e9ac:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800e9ae:	e00d      	b.n	800e9cc <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	701a      	strb	r2, [r3, #0]
            break;
 800e9b6:	e009      	b.n	800e9cc <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	2203      	movs	r2, #3
 800e9bc:	701a      	strb	r2, [r3, #0]
            break;
 800e9be:	e005      	b.n	800e9cc <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	2204      	movs	r2, #4
 800e9c4:	701a      	strb	r2, [r3, #0]
            break;
 800e9c6:	e001      	b.n	800e9cc <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800e9c8:	2305      	movs	r3, #5
 800e9ca:	e009      	b.n	800e9e0 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	7818      	ldrb	r0, [r3, #0]
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	89db      	ldrh	r3, [r3, #14]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	8b39      	ldrh	r1, [r7, #24]
 800e9d8:	6a3b      	ldr	r3, [r7, #32]
 800e9da:	f004 faf1 	bl	8012fc0 <LoRaMacCryptoGetFCntDown>
 800e9de:	4603      	mov	r3, r0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800e9e8:	b5b0      	push	{r4, r5, r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e9f2:	2303      	movs	r3, #3
 800e9f4:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800e9f6:	4b61      	ldr	r3, [pc, #388]	; (800eb7c <SwitchClass+0x194>)
 800e9f8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	f000 80a5 	beq.w	800eb4c <SwitchClass+0x164>
 800ea02:	2b02      	cmp	r3, #2
 800ea04:	f300 80b4 	bgt.w	800eb70 <SwitchClass+0x188>
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d003      	beq.n	800ea14 <SwitchClass+0x2c>
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	f000 808f 	beq.w	800eb30 <SwitchClass+0x148>
 800ea12:	e0ad      	b.n	800eb70 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ea14:	79fb      	ldrb	r3, [r7, #7]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d107      	bne.n	800ea2a <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ea1a:	4b58      	ldr	r3, [pc, #352]	; (800eb7c <SwitchClass+0x194>)
 800ea1c:	4a57      	ldr	r2, [pc, #348]	; (800eb7c <SwitchClass+0x194>)
 800ea1e:	336c      	adds	r3, #108	; 0x6c
 800ea20:	3264      	adds	r2, #100	; 0x64
 800ea22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea26:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800ea2a:	79fb      	ldrb	r3, [r7, #7]
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d10c      	bne.n	800ea4a <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ea30:	79fb      	ldrb	r3, [r7, #7]
 800ea32:	4618      	mov	r0, r3
 800ea34:	f003 fa53 	bl	8011ede <LoRaMacClassBSwitchClass>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ea3c:	7bfb      	ldrb	r3, [r7, #15]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d103      	bne.n	800ea4a <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ea42:	4a4e      	ldr	r2, [pc, #312]	; (800eb7c <SwitchClass+0x194>)
 800ea44:	79fb      	ldrb	r3, [r7, #7]
 800ea46:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800ea4a:	79fb      	ldrb	r3, [r7, #7]
 800ea4c:	2b02      	cmp	r3, #2
 800ea4e:	f040 808a 	bne.w	800eb66 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ea52:	4a4a      	ldr	r2, [pc, #296]	; (800eb7c <SwitchClass+0x194>)
 800ea54:	79fb      	ldrb	r3, [r7, #7]
 800ea56:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ea5a:	4a49      	ldr	r2, [pc, #292]	; (800eb80 <SwitchClass+0x198>)
 800ea5c:	4b48      	ldr	r3, [pc, #288]	; (800eb80 <SwitchClass+0x198>)
 800ea5e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800ea62:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800ea66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea6a:	682b      	ldr	r3, [r5, #0]
 800ea6c:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ea6e:	4b44      	ldr	r3, [pc, #272]	; (800eb80 <SwitchClass+0x198>)
 800ea70:	2202      	movs	r2, #2
 800ea72:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ea76:	2300      	movs	r3, #0
 800ea78:	73bb      	strb	r3, [r7, #14]
 800ea7a:	e049      	b.n	800eb10 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ea7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea80:	4a3e      	ldr	r2, [pc, #248]	; (800eb7c <SwitchClass+0x194>)
 800ea82:	212c      	movs	r1, #44	; 0x2c
 800ea84:	fb01 f303 	mul.w	r3, r1, r3
 800ea88:	4413      	add	r3, r2
 800ea8a:	33d2      	adds	r3, #210	; 0xd2
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d038      	beq.n	800eb04 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ea92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea96:	4a39      	ldr	r2, [pc, #228]	; (800eb7c <SwitchClass+0x194>)
 800ea98:	212c      	movs	r1, #44	; 0x2c
 800ea9a:	fb01 f303 	mul.w	r3, r1, r3
 800ea9e:	4413      	add	r3, r2
 800eaa0:	33e8      	adds	r3, #232	; 0xe8
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a35      	ldr	r2, [pc, #212]	; (800eb7c <SwitchClass+0x194>)
 800eaa6:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800eaa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eaac:	4a33      	ldr	r2, [pc, #204]	; (800eb7c <SwitchClass+0x194>)
 800eaae:	212c      	movs	r1, #44	; 0x2c
 800eab0:	fb01 f303 	mul.w	r3, r1, r3
 800eab4:	4413      	add	r3, r2
 800eab6:	33ec      	adds	r3, #236	; 0xec
 800eab8:	f993 3000 	ldrsb.w	r3, [r3]
 800eabc:	b2da      	uxtb	r2, r3
 800eabe:	4b2f      	ldr	r3, [pc, #188]	; (800eb7c <SwitchClass+0x194>)
 800eac0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800eac4:	4b2e      	ldr	r3, [pc, #184]	; (800eb80 <SwitchClass+0x198>)
 800eac6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800eaca:	4b2d      	ldr	r3, [pc, #180]	; (800eb80 <SwitchClass+0x198>)
 800eacc:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ead0:	4b2a      	ldr	r3, [pc, #168]	; (800eb7c <SwitchClass+0x194>)
 800ead2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ead4:	4a2a      	ldr	r2, [pc, #168]	; (800eb80 <SwitchClass+0x198>)
 800ead6:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eada:	4b28      	ldr	r3, [pc, #160]	; (800eb7c <SwitchClass+0x194>)
 800eadc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800eae0:	4b27      	ldr	r3, [pc, #156]	; (800eb80 <SwitchClass+0x198>)
 800eae2:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eae6:	4b25      	ldr	r3, [pc, #148]	; (800eb7c <SwitchClass+0x194>)
 800eae8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800eaec:	4b24      	ldr	r3, [pc, #144]	; (800eb80 <SwitchClass+0x198>)
 800eaee:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800eaf2:	4b23      	ldr	r3, [pc, #140]	; (800eb80 <SwitchClass+0x198>)
 800eaf4:	2203      	movs	r2, #3
 800eaf6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800eafa:	4b21      	ldr	r3, [pc, #132]	; (800eb80 <SwitchClass+0x198>)
 800eafc:	2201      	movs	r2, #1
 800eafe:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800eb02:	e009      	b.n	800eb18 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eb04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	73bb      	strb	r3, [r7, #14]
 800eb10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	ddb1      	ble.n	800ea7c <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800eb18:	4b19      	ldr	r3, [pc, #100]	; (800eb80 <SwitchClass+0x198>)
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800eb20:	4b18      	ldr	r3, [pc, #96]	; (800eb84 <SwitchClass+0x19c>)
 800eb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb24:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800eb26:	f001 f9b1 	bl	800fe8c <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800eb2e:	e01a      	b.n	800eb66 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800eb30:	79fb      	ldrb	r3, [r7, #7]
 800eb32:	4618      	mov	r0, r3
 800eb34:	f003 f9d3 	bl	8011ede <LoRaMacClassBSwitchClass>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800eb3c:	7bfb      	ldrb	r3, [r7, #15]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d113      	bne.n	800eb6a <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800eb42:	4a0e      	ldr	r2, [pc, #56]	; (800eb7c <SwitchClass+0x194>)
 800eb44:	79fb      	ldrb	r3, [r7, #7]
 800eb46:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800eb4a:	e00e      	b.n	800eb6a <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800eb4c:	79fb      	ldrb	r3, [r7, #7]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10d      	bne.n	800eb6e <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800eb52:	4a0a      	ldr	r2, [pc, #40]	; (800eb7c <SwitchClass+0x194>)
 800eb54:	79fb      	ldrb	r3, [r7, #7]
 800eb56:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800eb5a:	4b0a      	ldr	r3, [pc, #40]	; (800eb84 <SwitchClass+0x19c>)
 800eb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb5e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800eb60:	2300      	movs	r3, #0
 800eb62:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800eb64:	e003      	b.n	800eb6e <SwitchClass+0x186>
            break;
 800eb66:	bf00      	nop
 800eb68:	e002      	b.n	800eb70 <SwitchClass+0x188>
            break;
 800eb6a:	bf00      	nop
 800eb6c:	e000      	b.n	800eb70 <SwitchClass+0x188>
            break;
 800eb6e:	bf00      	nop
        }
    }

    return status;
 800eb70:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bdb0      	pop	{r4, r5, r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	20000954 	.word	0x20000954
 800eb80:	2000044c 	.word	0x2000044c
 800eb84:	0801b848 	.word	0x0801b848

0800eb88 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	4603      	mov	r3, r0
 800eb90:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800eb92:	4b10      	ldr	r3, [pc, #64]	; (800ebd4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800eb94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800eb98:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800eb9a:	79fb      	ldrb	r3, [r7, #7]
 800eb9c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800eb9e:	230d      	movs	r3, #13
 800eba0:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800eba2:	4b0c      	ldr	r3, [pc, #48]	; (800ebd4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800eba4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d001      	beq.n	800ebb0 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ebac:	230e      	movs	r3, #14
 800ebae:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ebb0:	4b08      	ldr	r3, [pc, #32]	; (800ebd4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ebb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ebb6:	f107 0210 	add.w	r2, r7, #16
 800ebba:	4611      	mov	r1, r2
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f005 f881 	bl	8013cc4 <RegionGetPhyParam>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	b2db      	uxtb	r3, r3
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3718      	adds	r7, #24
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	20000954 	.word	0x20000954

0800ebd8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	4603      	mov	r3, r0
 800ebe0:	71fb      	strb	r3, [r7, #7]
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	71bb      	strb	r3, [r7, #6]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800ebea:	2300      	movs	r3, #0
 800ebec:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ebf2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7ff ffc6 	bl	800eb88 <GetMaxAppPayloadWithoutFOptsLength>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ec00:	79fb      	ldrb	r3, [r7, #7]
 800ec02:	b29a      	uxth	r2, r3
 800ec04:	797b      	ldrb	r3, [r7, #5]
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	4413      	add	r3, r2
 800ec0a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ec0c:	89ba      	ldrh	r2, [r7, #12]
 800ec0e:	89fb      	ldrh	r3, [r7, #14]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d804      	bhi.n	800ec1e <ValidatePayloadLength+0x46>
 800ec14:	89bb      	ldrh	r3, [r7, #12]
 800ec16:	2bff      	cmp	r3, #255	; 0xff
 800ec18:	d801      	bhi.n	800ec1e <ValidatePayloadLength+0x46>
    {
        return true;
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e000      	b.n	800ec20 <ValidatePayloadLength+0x48>
    }
    return false;
 800ec1e:	2300      	movs	r3, #0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3710      	adds	r7, #16
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800ec28:	b480      	push	{r7}
 800ec2a:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800ec2c:	4a05      	ldr	r2, [pc, #20]	; (800ec44 <SetMlmeScheduleUplinkIndication+0x1c>)
 800ec2e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ec32:	f043 0310 	orr.w	r3, r3, #16
 800ec36:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800ec3a:	bf00      	nop
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bc80      	pop	{r7}
 800ec40:	4770      	bx	lr
 800ec42:	bf00      	nop
 800ec44:	2000044c 	.word	0x2000044c

0800ec48 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800ec48:	b590      	push	{r4, r7, lr}
 800ec4a:	b0a5      	sub	sp, #148	; 0x94
 800ec4c:	af02      	add	r7, sp, #8
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	4608      	mov	r0, r1
 800ec52:	4611      	mov	r1, r2
 800ec54:	461a      	mov	r2, r3
 800ec56:	4603      	mov	r3, r0
 800ec58:	70fb      	strb	r3, [r7, #3]
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	70bb      	strb	r3, [r7, #2]
 800ec5e:	4613      	mov	r3, r2
 800ec60:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800ec62:	2300      	movs	r3, #0
 800ec64:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ec6e:	2300      	movs	r3, #0
 800ec70:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800ec74:	f000 bc73 	b.w	800f55e <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800ec78:	78fb      	ldrb	r3, [r7, #3]
 800ec7a:	687a      	ldr	r2, [r7, #4]
 800ec7c:	4413      	add	r3, r2
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f003 fbf5 	bl	8012470 <LoRaMacCommandsGetCmdSize>
 800ec86:	4603      	mov	r3, r0
 800ec88:	461a      	mov	r2, r3
 800ec8a:	78fb      	ldrb	r3, [r7, #3]
 800ec8c:	441a      	add	r2, r3
 800ec8e:	78bb      	ldrb	r3, [r7, #2]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	f300 846a 	bgt.w	800f56a <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800ec96:	78fb      	ldrb	r3, [r7, #3]
 800ec98:	1c5a      	adds	r2, r3, #1
 800ec9a:	70fa      	strb	r2, [r7, #3]
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4413      	add	r3, r2
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	3b02      	subs	r3, #2
 800eca6:	2b11      	cmp	r3, #17
 800eca8:	f200 8461 	bhi.w	800f56e <ProcessMacCommands+0x926>
 800ecac:	a201      	add	r2, pc, #4	; (adr r2, 800ecb4 <ProcessMacCommands+0x6c>)
 800ecae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb2:	bf00      	nop
 800ecb4:	0800ecfd 	.word	0x0800ecfd
 800ecb8:	0800ed3f 	.word	0x0800ed3f
 800ecbc:	0800ee5b 	.word	0x0800ee5b
 800ecc0:	0800ee99 	.word	0x0800ee99
 800ecc4:	0800ef89 	.word	0x0800ef89
 800ecc8:	0800efe5 	.word	0x0800efe5
 800eccc:	0800f0a1 	.word	0x0800f0a1
 800ecd0:	0800f0fb 	.word	0x0800f0fb
 800ecd4:	0800f1df 	.word	0x0800f1df
 800ecd8:	0800f56f 	.word	0x0800f56f
 800ecdc:	0800f56f 	.word	0x0800f56f
 800ece0:	0800f289 	.word	0x0800f289
 800ece4:	0800f56f 	.word	0x0800f56f
 800ece8:	0800f56f 	.word	0x0800f56f
 800ecec:	0800f39f 	.word	0x0800f39f
 800ecf0:	0800f3d3 	.word	0x0800f3d3
 800ecf4:	0800f463 	.word	0x0800f463
 800ecf8:	0800f4d9 	.word	0x0800f4d9
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800ecfc:	2004      	movs	r0, #4
 800ecfe:	f003 fd8f 	bl	8012820 <LoRaMacConfirmQueueIsCmdActive>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f000 842a 	beq.w	800f55e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800ed0a:	2104      	movs	r1, #4
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	f003 fcfb 	bl	8012708 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800ed12:	78fb      	ldrb	r3, [r7, #3]
 800ed14:	1c5a      	adds	r2, r3, #1
 800ed16:	70fa      	strb	r2, [r7, #3]
 800ed18:	461a      	mov	r2, r3
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	781a      	ldrb	r2, [r3, #0]
 800ed20:	4bad      	ldr	r3, [pc, #692]	; (800efd8 <ProcessMacCommands+0x390>)
 800ed22:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800ed26:	78fb      	ldrb	r3, [r7, #3]
 800ed28:	1c5a      	adds	r2, r3, #1
 800ed2a:	70fa      	strb	r2, [r7, #3]
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4413      	add	r3, r2
 800ed32:	781a      	ldrb	r2, [r3, #0]
 800ed34:	4ba8      	ldr	r3, [pc, #672]	; (800efd8 <ProcessMacCommands+0x390>)
 800ed36:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800ed3a:	f000 bc10 	b.w	800f55e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800ed44:	2300      	movs	r3, #0
 800ed46:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800ed50:	2300      	movs	r3, #0
 800ed52:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800ed56:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ed5a:	f083 0301 	eor.w	r3, r3, #1
 800ed5e:	b2db      	uxtb	r3, r3
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d078      	beq.n	800ee56 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800ed64:	2301      	movs	r3, #1
 800ed66:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800ed6a:	78fb      	ldrb	r3, [r7, #3]
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	4413      	add	r3, r2
 800ed72:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800ed74:	78ba      	ldrb	r2, [r7, #2]
 800ed76:	78fb      	ldrb	r3, [r7, #3]
 800ed78:	1ad3      	subs	r3, r2, r3
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ed84:	4b95      	ldr	r3, [pc, #596]	; (800efdc <ProcessMacCommands+0x394>)
 800ed86:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800ed8a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ed8e:	4b93      	ldr	r3, [pc, #588]	; (800efdc <ProcessMacCommands+0x394>)
 800ed90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ed94:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ed98:	4b90      	ldr	r3, [pc, #576]	; (800efdc <ProcessMacCommands+0x394>)
 800ed9a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ed9e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800eda2:	4b8e      	ldr	r3, [pc, #568]	; (800efdc <ProcessMacCommands+0x394>)
 800eda4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800eda8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800edac:	4b8b      	ldr	r3, [pc, #556]	; (800efdc <ProcessMacCommands+0x394>)
 800edae:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800edb2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800edb6:	4b89      	ldr	r3, [pc, #548]	; (800efdc <ProcessMacCommands+0x394>)
 800edb8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800edbc:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800edbe:	4b87      	ldr	r3, [pc, #540]	; (800efdc <ProcessMacCommands+0x394>)
 800edc0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800edc4:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800edc8:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800edcc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800edd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800edd4:	9301      	str	r3, [sp, #4]
 800edd6:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800edda:	9300      	str	r3, [sp, #0]
 800eddc:	4623      	mov	r3, r4
 800edde:	f005 f82f 	bl	8013e40 <RegionLinkAdrReq>
 800ede2:	4603      	mov	r3, r0
 800ede4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800ede8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800edec:	f003 0307 	and.w	r3, r3, #7
 800edf0:	2b07      	cmp	r3, #7
 800edf2:	d10e      	bne.n	800ee12 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800edf4:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800edf8:	4b78      	ldr	r3, [pc, #480]	; (800efdc <ProcessMacCommands+0x394>)
 800edfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800edfe:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800ee02:	4b76      	ldr	r3, [pc, #472]	; (800efdc <ProcessMacCommands+0x394>)
 800ee04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800ee08:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800ee0c:	4b73      	ldr	r3, [pc, #460]	; (800efdc <ProcessMacCommands+0x394>)
 800ee0e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ee12:	2300      	movs	r3, #0
 800ee14:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ee18:	e00b      	b.n	800ee32 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800ee1a:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800ee1e:	2201      	movs	r2, #1
 800ee20:	4619      	mov	r1, r3
 800ee22:	2003      	movs	r0, #3
 800ee24:	f003 f9d4 	bl	80121d0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ee28:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ee32:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ee36:	4a6a      	ldr	r2, [pc, #424]	; (800efe0 <ProcessMacCommands+0x398>)
 800ee38:	fba2 2303 	umull	r2, r3, r2, r3
 800ee3c:	089b      	lsrs	r3, r3, #2
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d3e8      	bcc.n	800ee1a <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800ee48:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800ee4c:	78fb      	ldrb	r3, [r7, #3]
 800ee4e:	4413      	add	r3, r2
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	3b01      	subs	r3, #1
 800ee54:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800ee56:	bf00      	nop
 800ee58:	e381      	b.n	800f55e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800ee5a:	78fb      	ldrb	r3, [r7, #3]
 800ee5c:	1c5a      	adds	r2, r3, #1
 800ee5e:	70fa      	strb	r2, [r7, #3]
 800ee60:	461a      	mov	r2, r3
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4413      	add	r3, r2
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	f003 030f 	and.w	r3, r3, #15
 800ee6c:	b2da      	uxtb	r2, r3
 800ee6e:	4b5b      	ldr	r3, [pc, #364]	; (800efdc <ProcessMacCommands+0x394>)
 800ee70:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800ee74:	4b59      	ldr	r3, [pc, #356]	; (800efdc <ProcessMacCommands+0x394>)
 800ee76:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	4093      	lsls	r3, r2
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	4b56      	ldr	r3, [pc, #344]	; (800efdc <ProcessMacCommands+0x394>)
 800ee84:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800ee88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	4619      	mov	r1, r3
 800ee90:	2004      	movs	r0, #4
 800ee92:	f003 f99d 	bl	80121d0 <LoRaMacCommandsAddCmd>
                break;
 800ee96:	e362      	b.n	800f55e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800ee98:	2307      	movs	r3, #7
 800ee9a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800ee9e:	78fb      	ldrb	r3, [r7, #3]
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	4413      	add	r3, r2
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	091b      	lsrs	r3, r3, #4
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	b25b      	sxtb	r3, r3
 800eeac:	f003 0307 	and.w	r3, r3, #7
 800eeb0:	b25b      	sxtb	r3, r3
 800eeb2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800eeb6:	78fb      	ldrb	r3, [r7, #3]
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	4413      	add	r3, r2
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	b25b      	sxtb	r3, r3
 800eec0:	f003 030f 	and.w	r3, r3, #15
 800eec4:	b25b      	sxtb	r3, r3
 800eec6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800eeca:	78fb      	ldrb	r3, [r7, #3]
 800eecc:	3301      	adds	r3, #1
 800eece:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800eed0:	78fb      	ldrb	r3, [r7, #3]
 800eed2:	1c5a      	adds	r2, r3, #1
 800eed4:	70fa      	strb	r2, [r7, #3]
 800eed6:	461a      	mov	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4413      	add	r3, r2
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800eee0:	78fb      	ldrb	r3, [r7, #3]
 800eee2:	1c5a      	adds	r2, r3, #1
 800eee4:	70fa      	strb	r2, [r7, #3]
 800eee6:	461a      	mov	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4413      	add	r3, r2
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	021a      	lsls	r2, r3, #8
 800eef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eef2:	4313      	orrs	r3, r2
 800eef4:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800eef6:	78fb      	ldrb	r3, [r7, #3]
 800eef8:	1c5a      	adds	r2, r3, #1
 800eefa:	70fa      	strb	r2, [r7, #3]
 800eefc:	461a      	mov	r2, r3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	4413      	add	r3, r2
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	041a      	lsls	r2, r3, #16
 800ef06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800ef0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef0e:	2264      	movs	r2, #100	; 0x64
 800ef10:	fb02 f303 	mul.w	r3, r2, r3
 800ef14:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800ef16:	4b31      	ldr	r3, [pc, #196]	; (800efdc <ProcessMacCommands+0x394>)
 800ef18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef1c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800ef20:	4611      	mov	r1, r2
 800ef22:	4618      	mov	r0, r3
 800ef24:	f004 ffa6 	bl	8013e74 <RegionRxParamSetupReq>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800ef2e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ef32:	f003 0307 	and.w	r3, r3, #7
 800ef36:	2b07      	cmp	r3, #7
 800ef38:	d117      	bne.n	800ef6a <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800ef3a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800ef3e:	b2da      	uxtb	r2, r3
 800ef40:	4b26      	ldr	r3, [pc, #152]	; (800efdc <ProcessMacCommands+0x394>)
 800ef42:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800ef46:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800ef4a:	b2da      	uxtb	r2, r3
 800ef4c:	4b23      	ldr	r3, [pc, #140]	; (800efdc <ProcessMacCommands+0x394>)
 800ef4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800ef52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef54:	4a21      	ldr	r2, [pc, #132]	; (800efdc <ProcessMacCommands+0x394>)
 800ef56:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800ef58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef5a:	4a20      	ldr	r2, [pc, #128]	; (800efdc <ProcessMacCommands+0x394>)
 800ef5c:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800ef5e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800ef62:	b2da      	uxtb	r2, r3
 800ef64:	4b1d      	ldr	r3, [pc, #116]	; (800efdc <ProcessMacCommands+0x394>)
 800ef66:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800ef6a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ef6e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800ef72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ef76:	2201      	movs	r2, #1
 800ef78:	4619      	mov	r1, r3
 800ef7a:	2005      	movs	r0, #5
 800ef7c:	f003 f928 	bl	80121d0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800ef80:	f7ff fe52 	bl	800ec28 <SetMlmeScheduleUplinkIndication>
                break;
 800ef84:	bf00      	nop
 800ef86:	e2ea      	b.n	800f55e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800ef88:	23ff      	movs	r3, #255	; 0xff
 800ef8a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800ef8e:	4b12      	ldr	r3, [pc, #72]	; (800efd8 <ProcessMacCommands+0x390>)
 800ef90:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d00d      	beq.n	800efb4 <ProcessMacCommands+0x36c>
 800ef98:	4b0f      	ldr	r3, [pc, #60]	; (800efd8 <ProcessMacCommands+0x390>)
 800ef9a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d007      	beq.n	800efb4 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800efa4:	4b0c      	ldr	r3, [pc, #48]	; (800efd8 <ProcessMacCommands+0x390>)
 800efa6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4798      	blx	r3
 800efae:	4603      	mov	r3, r0
 800efb0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800efb4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800efb8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800efbc:	787b      	ldrb	r3, [r7, #1]
 800efbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800efc2:	b2db      	uxtb	r3, r3
 800efc4:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800efc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800efcc:	2202      	movs	r2, #2
 800efce:	4619      	mov	r1, r3
 800efd0:	2006      	movs	r0, #6
 800efd2:	f003 f8fd 	bl	80121d0 <LoRaMacCommandsAddCmd>
                break;
 800efd6:	e2c2      	b.n	800f55e <ProcessMacCommands+0x916>
 800efd8:	2000044c 	.word	0x2000044c
 800efdc:	20000954 	.word	0x20000954
 800efe0:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800efe4:	2303      	movs	r3, #3
 800efe6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800efea:	78fb      	ldrb	r3, [r7, #3]
 800efec:	1c5a      	adds	r2, r3, #1
 800efee:	70fa      	strb	r2, [r7, #3]
 800eff0:	461a      	mov	r2, r3
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	4413      	add	r3, r2
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	b25b      	sxtb	r3, r3
 800effa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800effe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f002:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f004:	78fb      	ldrb	r3, [r7, #3]
 800f006:	1c5a      	adds	r2, r3, #1
 800f008:	70fa      	strb	r2, [r7, #3]
 800f00a:	461a      	mov	r2, r3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4413      	add	r3, r2
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f014:	78fb      	ldrb	r3, [r7, #3]
 800f016:	1c5a      	adds	r2, r3, #1
 800f018:	70fa      	strb	r2, [r7, #3]
 800f01a:	461a      	mov	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4413      	add	r3, r2
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	021a      	lsls	r2, r3, #8
 800f024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f026:	4313      	orrs	r3, r2
 800f028:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f02a:	78fb      	ldrb	r3, [r7, #3]
 800f02c:	1c5a      	adds	r2, r3, #1
 800f02e:	70fa      	strb	r2, [r7, #3]
 800f030:	461a      	mov	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	4413      	add	r3, r2
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	041a      	lsls	r2, r3, #16
 800f03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03c:	4313      	orrs	r3, r2
 800f03e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f042:	2264      	movs	r2, #100	; 0x64
 800f044:	fb02 f303 	mul.w	r3, r2, r3
 800f048:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f04e:	78fb      	ldrb	r3, [r7, #3]
 800f050:	1c5a      	adds	r2, r3, #1
 800f052:	70fa      	strb	r2, [r7, #3]
 800f054:	461a      	mov	r2, r3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4413      	add	r3, r2
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	b25b      	sxtb	r3, r3
 800f05e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f062:	4b87      	ldr	r3, [pc, #540]	; (800f280 <ProcessMacCommands+0x638>)
 800f064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f068:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f06c:	4611      	mov	r1, r2
 800f06e:	4618      	mov	r0, r3
 800f070:	f004 ff13 	bl	8013e9a <RegionNewChannelReq>
 800f074:	4603      	mov	r3, r0
 800f076:	b2db      	uxtb	r3, r3
 800f078:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f07c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f080:	b25b      	sxtb	r3, r3
 800f082:	2b00      	cmp	r3, #0
 800f084:	db0a      	blt.n	800f09c <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800f086:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f08a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f08e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f092:	2201      	movs	r2, #1
 800f094:	4619      	mov	r1, r3
 800f096:	2007      	movs	r0, #7
 800f098:	f003 f89a 	bl	80121d0 <LoRaMacCommandsAddCmd>
                }
                break;
 800f09c:	bf00      	nop
 800f09e:	e25e      	b.n	800f55e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f0a0:	78fb      	ldrb	r3, [r7, #3]
 800f0a2:	1c5a      	adds	r2, r3, #1
 800f0a4:	70fa      	strb	r2, [r7, #3]
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4413      	add	r3, r2
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	f003 030f 	and.w	r3, r3, #15
 800f0b2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f0b6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d104      	bne.n	800f0c8 <ProcessMacCommands+0x480>
                {
                    delay++;
 800f0be:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f0c8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f0cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f0d0:	fb02 f303 	mul.w	r3, r2, r3
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	4b6a      	ldr	r3, [pc, #424]	; (800f280 <ProcessMacCommands+0x638>)
 800f0d8:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f0da:	4b69      	ldr	r3, [pc, #420]	; (800f280 <ProcessMacCommands+0x638>)
 800f0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0de:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f0e2:	4a67      	ldr	r2, [pc, #412]	; (800f280 <ProcessMacCommands+0x638>)
 800f0e4:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f0e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	2008      	movs	r0, #8
 800f0f0:	f003 f86e 	bl	80121d0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f0f4:	f7ff fd98 	bl	800ec28 <SetMlmeScheduleUplinkIndication>
                break;
 800f0f8:	e231      	b.n	800f55e <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f0fa:	78fb      	ldrb	r3, [r7, #3]
 800f0fc:	1c5a      	adds	r2, r3, #1
 800f0fe:	70fa      	strb	r2, [r7, #3]
 800f100:	461a      	mov	r2, r3
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4413      	add	r3, r2
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f10c:	2300      	movs	r3, #0
 800f10e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f112:	2300      	movs	r3, #0
 800f114:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f118:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f11c:	f003 0320 	and.w	r3, r3, #32
 800f120:	2b00      	cmp	r3, #0
 800f122:	d002      	beq.n	800f12a <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f124:	2301      	movs	r3, #1
 800f126:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f12a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f12e:	f003 0310 	and.w	r3, r3, #16
 800f132:	2b00      	cmp	r3, #0
 800f134:	d002      	beq.n	800f13c <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f136:	2301      	movs	r3, #1
 800f138:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f13c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f140:	f003 030f 	and.w	r3, r3, #15
 800f144:	b2db      	uxtb	r3, r3
 800f146:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f14a:	4b4d      	ldr	r3, [pc, #308]	; (800f280 <ProcessMacCommands+0x638>)
 800f14c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f150:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f154:	4611      	mov	r1, r2
 800f156:	4618      	mov	r0, r3
 800f158:	f004 feb2 	bl	8013ec0 <RegionTxParamSetupReq>
 800f15c:	4603      	mov	r3, r0
 800f15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f162:	d03a      	beq.n	800f1da <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f164:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f168:	4b45      	ldr	r3, [pc, #276]	; (800f280 <ProcessMacCommands+0x638>)
 800f16a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f16e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f172:	4b43      	ldr	r3, [pc, #268]	; (800f280 <ProcessMacCommands+0x638>)
 800f174:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f178:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f17c:	461a      	mov	r2, r3
 800f17e:	4b41      	ldr	r3, [pc, #260]	; (800f284 <ProcessMacCommands+0x63c>)
 800f180:	5c9b      	ldrb	r3, [r3, r2]
 800f182:	4618      	mov	r0, r3
 800f184:	f7f1 fb22 	bl	80007cc <__aeabi_ui2f>
 800f188:	4603      	mov	r3, r0
 800f18a:	4a3d      	ldr	r2, [pc, #244]	; (800f280 <ProcessMacCommands+0x638>)
 800f18c:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f18e:	2302      	movs	r3, #2
 800f190:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f194:	4b3a      	ldr	r3, [pc, #232]	; (800f280 <ProcessMacCommands+0x638>)
 800f196:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f19a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f19e:	4b38      	ldr	r3, [pc, #224]	; (800f280 <ProcessMacCommands+0x638>)
 800f1a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f1a4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f004 fd8a 	bl	8013cc4 <RegionGetPhyParam>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b6:	b25a      	sxtb	r2, r3
 800f1b8:	4b31      	ldr	r3, [pc, #196]	; (800f280 <ProcessMacCommands+0x638>)
 800f1ba:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	bfb8      	it	lt
 800f1c2:	4613      	movlt	r3, r2
 800f1c4:	b25a      	sxtb	r2, r3
 800f1c6:	4b2e      	ldr	r3, [pc, #184]	; (800f280 <ProcessMacCommands+0x638>)
 800f1c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f1cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	2009      	movs	r0, #9
 800f1d6:	f002 fffb 	bl	80121d0 <LoRaMacCommandsAddCmd>
                }
                break;
 800f1da:	bf00      	nop
 800f1dc:	e1bf      	b.n	800f55e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f1de:	2303      	movs	r3, #3
 800f1e0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f1e4:	78fb      	ldrb	r3, [r7, #3]
 800f1e6:	1c5a      	adds	r2, r3, #1
 800f1e8:	70fa      	strb	r2, [r7, #3]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f1f6:	78fb      	ldrb	r3, [r7, #3]
 800f1f8:	1c5a      	adds	r2, r3, #1
 800f1fa:	70fa      	strb	r2, [r7, #3]
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4413      	add	r3, r2
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f206:	78fb      	ldrb	r3, [r7, #3]
 800f208:	1c5a      	adds	r2, r3, #1
 800f20a:	70fa      	strb	r2, [r7, #3]
 800f20c:	461a      	mov	r2, r3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	4413      	add	r3, r2
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	021a      	lsls	r2, r3, #8
 800f216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f218:	4313      	orrs	r3, r2
 800f21a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f21c:	78fb      	ldrb	r3, [r7, #3]
 800f21e:	1c5a      	adds	r2, r3, #1
 800f220:	70fa      	strb	r2, [r7, #3]
 800f222:	461a      	mov	r2, r3
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4413      	add	r3, r2
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	041a      	lsls	r2, r3, #16
 800f22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22e:	4313      	orrs	r3, r2
 800f230:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f234:	2264      	movs	r2, #100	; 0x64
 800f236:	fb02 f303 	mul.w	r3, r2, r3
 800f23a:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f23c:	4b10      	ldr	r3, [pc, #64]	; (800f280 <ProcessMacCommands+0x638>)
 800f23e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f242:	f107 0220 	add.w	r2, r7, #32
 800f246:	4611      	mov	r1, r2
 800f248:	4618      	mov	r0, r3
 800f24a:	f004 fe4c 	bl	8013ee6 <RegionDlChannelReq>
 800f24e:	4603      	mov	r3, r0
 800f250:	b2db      	uxtb	r3, r3
 800f252:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f256:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f25a:	b25b      	sxtb	r3, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	db0c      	blt.n	800f27a <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800f260:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f264:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f268:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f26c:	2201      	movs	r2, #1
 800f26e:	4619      	mov	r1, r3
 800f270:	200a      	movs	r0, #10
 800f272:	f002 ffad 	bl	80121d0 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800f276:	f7ff fcd7 	bl	800ec28 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800f27a:	bf00      	nop
 800f27c:	e16f      	b.n	800f55e <ProcessMacCommands+0x916>
 800f27e:	bf00      	nop
 800f280:	20000954 	.word	0x20000954
 800f284:	0801b800 	.word	0x0801b800
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f288:	200a      	movs	r0, #10
 800f28a:	f003 fac9 	bl	8012820 <LoRaMacConfirmQueueIsCmdActive>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	f000 8164 	beq.w	800f55e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f296:	210a      	movs	r1, #10
 800f298:	2000      	movs	r0, #0
 800f29a:	f003 fa35 	bl	8012708 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800f29e:	f107 0318 	add.w	r3, r7, #24
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f2a8:	f107 0310 	add.w	r3, r7, #16
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	601a      	str	r2, [r3, #0]
 800f2b0:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f2b2:	f107 0308 	add.w	r3, r7, #8
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	601a      	str	r2, [r3, #0]
 800f2ba:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f2bc:	78fb      	ldrb	r3, [r7, #3]
 800f2be:	1c5a      	adds	r2, r3, #1
 800f2c0:	70fa      	strb	r2, [r7, #3]
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f2cc:	78fb      	ldrb	r3, [r7, #3]
 800f2ce:	1c5a      	adds	r2, r3, #1
 800f2d0:	70fa      	strb	r2, [r7, #3]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	021a      	lsls	r2, r3, #8
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f2e2:	78fb      	ldrb	r3, [r7, #3]
 800f2e4:	1c5a      	adds	r2, r3, #1
 800f2e6:	70fa      	strb	r2, [r7, #3]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	041a      	lsls	r2, r3, #16
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f2f8:	78fb      	ldrb	r3, [r7, #3]
 800f2fa:	1c5a      	adds	r2, r3, #1
 800f2fc:	70fa      	strb	r2, [r7, #3]
 800f2fe:	461a      	mov	r2, r3
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	4413      	add	r3, r2
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	061a      	lsls	r2, r3, #24
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	4313      	orrs	r3, r2
 800f30c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f30e:	78fb      	ldrb	r3, [r7, #3]
 800f310:	1c5a      	adds	r2, r3, #1
 800f312:	70fa      	strb	r2, [r7, #3]
 800f314:	461a      	mov	r2, r3
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4413      	add	r3, r2
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	b21b      	sxth	r3, r3
 800f31e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f320:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f324:	461a      	mov	r2, r3
 800f326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f32a:	fb03 f302 	mul.w	r3, r3, r2
 800f32e:	121b      	asrs	r3, r3, #8
 800f330:	b21b      	sxth	r3, r3
 800f332:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f334:	f107 0310 	add.w	r3, r7, #16
 800f338:	f107 0218 	add.w	r2, r7, #24
 800f33c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f340:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f344:	693a      	ldr	r2, [r7, #16]
 800f346:	4b8c      	ldr	r3, [pc, #560]	; (800f578 <ProcessMacCommands+0x930>)
 800f348:	4413      	add	r3, r2
 800f34a:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f34c:	f107 0308 	add.w	r3, r7, #8
 800f350:	4618      	mov	r0, r3
 800f352:	f00a fa6f 	bl	8019834 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f356:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f35a:	4b88      	ldr	r3, [pc, #544]	; (800f57c <ProcessMacCommands+0x934>)
 800f35c:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f360:	9200      	str	r2, [sp, #0]
 800f362:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f366:	f107 0210 	add.w	r2, r7, #16
 800f36a:	ca06      	ldmia	r2, {r1, r2}
 800f36c:	f00a f9fb 	bl	8019766 <SysTimeSub>
 800f370:	f107 0010 	add.w	r0, r7, #16
 800f374:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f376:	9300      	str	r3, [sp, #0]
 800f378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f37a:	f107 0208 	add.w	r2, r7, #8
 800f37e:	ca06      	ldmia	r2, {r1, r2}
 800f380:	f00a f9b8 	bl	80196f4 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f384:	f107 0310 	add.w	r3, r7, #16
 800f388:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f38c:	f00a fa24 	bl	80197d8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f390:	f002 fde3 	bl	8011f5a <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f394:	4b79      	ldr	r3, [pc, #484]	; (800f57c <ProcessMacCommands+0x934>)
 800f396:	2201      	movs	r2, #1
 800f398:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800f39c:	e0df      	b.n	800f55e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f39e:	200d      	movs	r0, #13
 800f3a0:	f003 fa3e 	bl	8012820 <LoRaMacConfirmQueueIsCmdActive>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	f000 80d9 	beq.w	800f55e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f3ac:	210d      	movs	r1, #13
 800f3ae:	2000      	movs	r0, #0
 800f3b0:	f003 f9aa 	bl	8012708 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f3b4:	4b71      	ldr	r3, [pc, #452]	; (800f57c <ProcessMacCommands+0x934>)
 800f3b6:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f3ba:	2b04      	cmp	r3, #4
 800f3bc:	f000 80cf 	beq.w	800f55e <ProcessMacCommands+0x916>
 800f3c0:	4b6e      	ldr	r3, [pc, #440]	; (800f57c <ProcessMacCommands+0x934>)
 800f3c2:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f3c6:	2b05      	cmp	r3, #5
 800f3c8:	f000 80c9 	beq.w	800f55e <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f3cc:	f002 fda6 	bl	8011f1c <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f3d0:	e0c5      	b.n	800f55e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f3d2:	2303      	movs	r3, #3
 800f3d4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f3dc:	78fb      	ldrb	r3, [r7, #3]
 800f3de:	1c5a      	adds	r2, r3, #1
 800f3e0:	70fa      	strb	r2, [r7, #3]
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f3ec:	78fb      	ldrb	r3, [r7, #3]
 800f3ee:	1c5a      	adds	r2, r3, #1
 800f3f0:	70fa      	strb	r2, [r7, #3]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	021b      	lsls	r3, r3, #8
 800f3fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f3fe:	4313      	orrs	r3, r2
 800f400:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f402:	78fb      	ldrb	r3, [r7, #3]
 800f404:	1c5a      	adds	r2, r3, #1
 800f406:	70fa      	strb	r2, [r7, #3]
 800f408:	461a      	mov	r2, r3
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	4413      	add	r3, r2
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	041b      	lsls	r3, r3, #16
 800f412:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f414:	4313      	orrs	r3, r2
 800f416:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f41a:	2264      	movs	r2, #100	; 0x64
 800f41c:	fb02 f303 	mul.w	r3, r2, r3
 800f420:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f422:	78fb      	ldrb	r3, [r7, #3]
 800f424:	1c5a      	adds	r2, r3, #1
 800f426:	70fa      	strb	r2, [r7, #3]
 800f428:	461a      	mov	r2, r3
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	4413      	add	r3, r2
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	f003 030f 	and.w	r3, r3, #15
 800f434:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f438:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f43c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f43e:	4618      	mov	r0, r3
 800f440:	f002 fd72 	bl	8011f28 <LoRaMacClassBPingSlotChannelReq>
 800f444:	4603      	mov	r3, r0
 800f446:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f44a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f44e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f452:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f456:	2201      	movs	r2, #1
 800f458:	4619      	mov	r1, r3
 800f45a:	2011      	movs	r0, #17
 800f45c:	f002 feb8 	bl	80121d0 <LoRaMacCommandsAddCmd>
                break;
 800f460:	e07d      	b.n	800f55e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f462:	200e      	movs	r0, #14
 800f464:	f003 f9dc 	bl	8012820 <LoRaMacConfirmQueueIsCmdActive>
 800f468:	4603      	mov	r3, r0
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d077      	beq.n	800f55e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f46e:	210e      	movs	r1, #14
 800f470:	2000      	movs	r0, #0
 800f472:	f003 f949 	bl	8012708 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f476:	2300      	movs	r3, #0
 800f478:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f47c:	2300      	movs	r3, #0
 800f47e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f482:	78fb      	ldrb	r3, [r7, #3]
 800f484:	1c5a      	adds	r2, r3, #1
 800f486:	70fa      	strb	r2, [r7, #3]
 800f488:	461a      	mov	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4413      	add	r3, r2
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f494:	78fb      	ldrb	r3, [r7, #3]
 800f496:	1c5a      	adds	r2, r3, #1
 800f498:	70fa      	strb	r2, [r7, #3]
 800f49a:	461a      	mov	r2, r3
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4413      	add	r3, r2
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	021b      	lsls	r3, r3, #8
 800f4a4:	b21a      	sxth	r2, r3
 800f4a6:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	b21b      	sxth	r3, r3
 800f4ae:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f4b2:	78fb      	ldrb	r3, [r7, #3]
 800f4b4:	1c5a      	adds	r2, r3, #1
 800f4b6:	70fa      	strb	r2, [r7, #3]
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4413      	add	r3, r2
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f4c4:	4b2e      	ldr	r3, [pc, #184]	; (800f580 <ProcessMacCommands+0x938>)
 800f4c6:	681a      	ldr	r2, [r3, #0]
 800f4c8:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f4cc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f002 fd35 	bl	8011f40 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f4d6:	e042      	b.n	800f55e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f4de:	78fb      	ldrb	r3, [r7, #3]
 800f4e0:	1c5a      	adds	r2, r3, #1
 800f4e2:	70fa      	strb	r2, [r7, #3]
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f4f0:	78fb      	ldrb	r3, [r7, #3]
 800f4f2:	1c5a      	adds	r2, r3, #1
 800f4f4:	70fa      	strb	r2, [r7, #3]
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	021b      	lsls	r3, r3, #8
 800f500:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f504:	4313      	orrs	r3, r2
 800f506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f50a:	78fb      	ldrb	r3, [r7, #3]
 800f50c:	1c5a      	adds	r2, r3, #1
 800f50e:	70fa      	strb	r2, [r7, #3]
 800f510:	461a      	mov	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4413      	add	r3, r2
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	041b      	lsls	r3, r3, #16
 800f51a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f51e:	4313      	orrs	r3, r2
 800f520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f528:	2264      	movs	r2, #100	; 0x64
 800f52a:	fb02 f303 	mul.w	r3, r2, r3
 800f52e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f532:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f536:	f002 fd16 	bl	8011f66 <LoRaMacClassBBeaconFreqReq>
 800f53a:	4603      	mov	r3, r0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d003      	beq.n	800f548 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800f540:	2301      	movs	r3, #1
 800f542:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f546:	e002      	b.n	800f54e <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f548:	2300      	movs	r3, #0
 800f54a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f54e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f552:	2201      	movs	r2, #1
 800f554:	4619      	mov	r1, r3
 800f556:	2013      	movs	r0, #19
 800f558:	f002 fe3a 	bl	80121d0 <LoRaMacCommandsAddCmd>
                }
                break;
 800f55c:	bf00      	nop
    while( macIndex < commandsSize )
 800f55e:	78fa      	ldrb	r2, [r7, #3]
 800f560:	78bb      	ldrb	r3, [r7, #2]
 800f562:	429a      	cmp	r2, r3
 800f564:	f4ff ab88 	bcc.w	800ec78 <ProcessMacCommands+0x30>
 800f568:	e002      	b.n	800f570 <ProcessMacCommands+0x928>
            return;
 800f56a:	bf00      	nop
 800f56c:	e000      	b.n	800f570 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f56e:	bf00      	nop
        }
    }
}
 800f570:	378c      	adds	r7, #140	; 0x8c
 800f572:	46bd      	mov	sp, r7
 800f574:	bd90      	pop	{r4, r7, pc}
 800f576:	bf00      	nop
 800f578:	12d53d80 	.word	0x12d53d80
 800f57c:	2000044c 	.word	0x2000044c
 800f580:	200017a0 	.word	0x200017a0

0800f584 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b08e      	sub	sp, #56	; 0x38
 800f588:	af02      	add	r7, sp, #8
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	607a      	str	r2, [r7, #4]
 800f58e:	461a      	mov	r2, r3
 800f590:	460b      	mov	r3, r1
 800f592:	72fb      	strb	r3, [r7, #11]
 800f594:	4613      	mov	r3, r2
 800f596:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f598:	2303      	movs	r3, #3
 800f59a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f59e:	4b65      	ldr	r3, [pc, #404]	; (800f734 <Send+0x1b0>)
 800f5a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f5a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f5a8:	4b62      	ldr	r3, [pc, #392]	; (800f734 <Send+0x1b0>)
 800f5aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f5ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f5b2:	4b60      	ldr	r3, [pc, #384]	; (800f734 <Send+0x1b0>)
 800f5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5b6:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f5b8:	4b5e      	ldr	r3, [pc, #376]	; (800f734 <Send+0x1b0>)
 800f5ba:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d101      	bne.n	800f5c6 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f5c2:	2307      	movs	r3, #7
 800f5c4:	e0b1      	b.n	800f72a <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f5c6:	4b5b      	ldr	r3, [pc, #364]	; (800f734 <Send+0x1b0>)
 800f5c8:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d102      	bne.n	800f5d6 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f5d0:	4b58      	ldr	r3, [pc, #352]	; (800f734 <Send+0x1b0>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f5dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f5e0:	f36f 0303 	bfc	r3, #0, #4
 800f5e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f5e8:	4b52      	ldr	r3, [pc, #328]	; (800f734 <Send+0x1b0>)
 800f5ea:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800f5ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f5f2:	f362 13c7 	bfi	r3, r2, #7, #1
 800f5f6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f5fa:	4b4e      	ldr	r3, [pc, #312]	; (800f734 <Send+0x1b0>)
 800f5fc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f600:	2b01      	cmp	r3, #1
 800f602:	d106      	bne.n	800f612 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f604:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f608:	f043 0310 	orr.w	r3, r3, #16
 800f60c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800f610:	e005      	b.n	800f61e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f612:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f616:	f36f 1304 	bfc	r3, #4, #1
 800f61a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f61e:	4b45      	ldr	r3, [pc, #276]	; (800f734 <Send+0x1b0>)
 800f620:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f624:	2b00      	cmp	r3, #0
 800f626:	d005      	beq.n	800f634 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f628:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f62c:	f043 0320 	orr.w	r3, r3, #32
 800f630:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800f634:	4b3f      	ldr	r3, [pc, #252]	; (800f734 <Send+0x1b0>)
 800f636:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f63a:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800f63c:	2301      	movs	r3, #1
 800f63e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f640:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f644:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	bf14      	ite	ne
 800f64e:	2301      	movne	r3, #1
 800f650:	2300      	moveq	r3, #0
 800f652:	b2db      	uxtb	r3, r3
 800f654:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f656:	4b37      	ldr	r3, [pc, #220]	; (800f734 <Send+0x1b0>)
 800f658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f65a:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800f65c:	4b36      	ldr	r3, [pc, #216]	; (800f738 <Send+0x1b4>)
 800f65e:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800f662:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800f664:	4b34      	ldr	r3, [pc, #208]	; (800f738 <Send+0x1b4>)
 800f666:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800f66a:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f66c:	4b31      	ldr	r3, [pc, #196]	; (800f734 <Send+0x1b0>)
 800f66e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f672:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f676:	4b2f      	ldr	r3, [pc, #188]	; (800f734 <Send+0x1b0>)
 800f678:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f67c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f680:	4b2c      	ldr	r3, [pc, #176]	; (800f734 <Send+0x1b0>)
 800f682:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f686:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f68a:	4b2a      	ldr	r3, [pc, #168]	; (800f734 <Send+0x1b0>)
 800f68c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f698:	f107 0014 	add.w	r0, r7, #20
 800f69c:	4a27      	ldr	r2, [pc, #156]	; (800f73c <Send+0x1b8>)
 800f69e:	4928      	ldr	r1, [pc, #160]	; (800f740 <Send+0x1bc>)
 800f6a0:	f002 fb7c 	bl	8011d9c <LoRaMacAdrCalcNext>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f6ac:	f362 1386 	bfi	r3, r2, #6, #1
 800f6b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f6b4:	7afa      	ldrb	r2, [r7, #11]
 800f6b6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f6ba:	893b      	ldrh	r3, [r7, #8]
 800f6bc:	9300      	str	r3, [sp, #0]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	68f8      	ldr	r0, [r7, #12]
 800f6c2:	f000 fc21 	bl	800ff08 <PrepareFrame>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f6cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d003      	beq.n	800f6dc <Send+0x158>
 800f6d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6d8:	2b0a      	cmp	r3, #10
 800f6da:	d107      	bne.n	800f6ec <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800f6dc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f000 f96d 	bl	800f9c0 <ScheduleTx>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f6ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00a      	beq.n	800f70a <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f6f4:	4a0f      	ldr	r2, [pc, #60]	; (800f734 <Send+0x1b0>)
 800f6f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f6fa:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f6fe:	4a0d      	ldr	r2, [pc, #52]	; (800f734 <Send+0x1b0>)
 800f700:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f704:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800f708:	e00d      	b.n	800f726 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f70a:	4b0a      	ldr	r3, [pc, #40]	; (800f734 <Send+0x1b0>)
 800f70c:	2200      	movs	r2, #0
 800f70e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f714:	4a07      	ldr	r2, [pc, #28]	; (800f734 <Send+0x1b0>)
 800f716:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f718:	f002 fdd2 	bl	80122c0 <LoRaMacCommandsRemoveNoneStickyCmds>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d001      	beq.n	800f726 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f722:	2313      	movs	r3, #19
 800f724:	e001      	b.n	800f72a <Send+0x1a6>
        }
    }
    return status;
 800f726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3730      	adds	r7, #48	; 0x30
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	20000954 	.word	0x20000954
 800f738:	2000044c 	.word	0x2000044c
 800f73c:	2000098c 	.word	0x2000098c
 800f740:	2000098d 	.word	0x2000098d

0800f744 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	4603      	mov	r3, r0
 800f74c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f74e:	2300      	movs	r3, #0
 800f750:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f752:	2300      	movs	r3, #0
 800f754:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f756:	2301      	movs	r3, #1
 800f758:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f75a:	79fb      	ldrb	r3, [r7, #7]
 800f75c:	2bff      	cmp	r3, #255	; 0xff
 800f75e:	d129      	bne.n	800f7b4 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f760:	2000      	movs	r0, #0
 800f762:	f7ff f941 	bl	800e9e8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f766:	4b1a      	ldr	r3, [pc, #104]	; (800f7d0 <SendReJoinReq+0x8c>)
 800f768:	2200      	movs	r2, #0
 800f76a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f76e:	4b18      	ldr	r3, [pc, #96]	; (800f7d0 <SendReJoinReq+0x8c>)
 800f770:	4a18      	ldr	r2, [pc, #96]	; (800f7d4 <SendReJoinReq+0x90>)
 800f772:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f776:	4b16      	ldr	r3, [pc, #88]	; (800f7d0 <SendReJoinReq+0x8c>)
 800f778:	22ff      	movs	r2, #255	; 0xff
 800f77a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f77e:	7b3b      	ldrb	r3, [r7, #12]
 800f780:	f36f 1347 	bfc	r3, #5, #3
 800f784:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f786:	7b3a      	ldrb	r2, [r7, #12]
 800f788:	4b11      	ldr	r3, [pc, #68]	; (800f7d0 <SendReJoinReq+0x8c>)
 800f78a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f78e:	f7fc fc85 	bl	800c09c <SecureElementGetJoinEui>
 800f792:	4603      	mov	r3, r0
 800f794:	2208      	movs	r2, #8
 800f796:	4619      	mov	r1, r3
 800f798:	480f      	ldr	r0, [pc, #60]	; (800f7d8 <SendReJoinReq+0x94>)
 800f79a:	f006 fd9e 	bl	80162da <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800f79e:	f7fc fc5b 	bl	800c058 <SecureElementGetDevEui>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2208      	movs	r2, #8
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	480c      	ldr	r0, [pc, #48]	; (800f7dc <SendReJoinReq+0x98>)
 800f7aa:	f006 fd96 	bl	80162da <memcpy1>

            allowDelayedTx = false;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	73fb      	strb	r3, [r7, #15]

            break;
 800f7b2:	e002      	b.n	800f7ba <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f7b4:	2302      	movs	r3, #2
 800f7b6:	73bb      	strb	r3, [r7, #14]
            break;
 800f7b8:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f7ba:	7bfb      	ldrb	r3, [r7, #15]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f000 f8ff 	bl	800f9c0 <ScheduleTx>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	73bb      	strb	r3, [r7, #14]
    return status;
 800f7c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3710      	adds	r7, #16
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	2000044c 	.word	0x2000044c
 800f7d4:	2000044e 	.word	0x2000044e
 800f7d8:	2000055a 	.word	0x2000055a
 800f7dc:	20000562 	.word	0x20000562

0800f7e0 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f7e4:	f002 fb49 	bl	8011e7a <LoRaMacClassBIsBeaconExpected>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d001      	beq.n	800f7f2 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f7ee:	230e      	movs	r3, #14
 800f7f0:	e013      	b.n	800f81a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f7f2:	4b0b      	ldr	r3, [pc, #44]	; (800f820 <CheckForClassBCollision+0x40>)
 800f7f4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f7f8:	2b01      	cmp	r3, #1
 800f7fa:	d10d      	bne.n	800f818 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f7fc:	f002 fb44 	bl	8011e88 <LoRaMacClassBIsPingExpected>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d001      	beq.n	800f80a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f806:	230f      	movs	r3, #15
 800f808:	e007      	b.n	800f81a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f80a:	f002 fb44 	bl	8011e96 <LoRaMacClassBIsMulticastExpected>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	d001      	beq.n	800f818 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f814:	230f      	movs	r3, #15
 800f816:	e000      	b.n	800f81a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f818:	2300      	movs	r3, #0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop
 800f820:	20000954 	.word	0x20000954

0800f824 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f824:	b590      	push	{r4, r7, lr}
 800f826:	b083      	sub	sp, #12
 800f828:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f82a:	4b2d      	ldr	r3, [pc, #180]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f82c:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f830:	4b2b      	ldr	r3, [pc, #172]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f832:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f836:	4b2a      	ldr	r3, [pc, #168]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f838:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800f83c:	4b28      	ldr	r3, [pc, #160]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f83e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f842:	4b27      	ldr	r3, [pc, #156]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f844:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f848:	b25b      	sxtb	r3, r3
 800f84a:	f004 fba3 	bl	8013f94 <RegionApplyDrOffset>
 800f84e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f850:	b259      	sxtb	r1, r3
 800f852:	4b23      	ldr	r3, [pc, #140]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f854:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f858:	4b21      	ldr	r3, [pc, #132]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f85a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f85c:	4821      	ldr	r0, [pc, #132]	; (800f8e4 <ComputeRxWindowParameters+0xc0>)
 800f85e:	9000      	str	r0, [sp, #0]
 800f860:	4620      	mov	r0, r4
 800f862:	f004 faa7 	bl	8013db4 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f866:	4b1e      	ldr	r3, [pc, #120]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f868:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800f86c:	4b1c      	ldr	r3, [pc, #112]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f86e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f872:	b259      	sxtb	r1, r3
 800f874:	4b1a      	ldr	r3, [pc, #104]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f876:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f87a:	4b19      	ldr	r3, [pc, #100]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f87c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f87e:	4c1a      	ldr	r4, [pc, #104]	; (800f8e8 <ComputeRxWindowParameters+0xc4>)
 800f880:	9400      	str	r4, [sp, #0]
 800f882:	f004 fa97 	bl	8013db4 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f886:	4b16      	ldr	r3, [pc, #88]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f88a:	4a18      	ldr	r2, [pc, #96]	; (800f8ec <ComputeRxWindowParameters+0xc8>)
 800f88c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f890:	4413      	add	r3, r2
 800f892:	4a16      	ldr	r2, [pc, #88]	; (800f8ec <ComputeRxWindowParameters+0xc8>)
 800f894:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f898:	4b11      	ldr	r3, [pc, #68]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f89a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f89c:	4a13      	ldr	r2, [pc, #76]	; (800f8ec <ComputeRxWindowParameters+0xc8>)
 800f89e:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f8a2:	4413      	add	r3, r2
 800f8a4:	4a11      	ldr	r2, [pc, #68]	; (800f8ec <ComputeRxWindowParameters+0xc8>)
 800f8a6:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f8aa:	4b0d      	ldr	r3, [pc, #52]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f8ac:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d111      	bne.n	800f8d8 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f8b4:	4b0a      	ldr	r3, [pc, #40]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f8b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8b8:	4a0c      	ldr	r2, [pc, #48]	; (800f8ec <ComputeRxWindowParameters+0xc8>)
 800f8ba:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f8be:	4413      	add	r3, r2
 800f8c0:	4a0a      	ldr	r2, [pc, #40]	; (800f8ec <ComputeRxWindowParameters+0xc8>)
 800f8c2:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f8c6:	4b06      	ldr	r3, [pc, #24]	; (800f8e0 <ComputeRxWindowParameters+0xbc>)
 800f8c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8ca:	4a08      	ldr	r2, [pc, #32]	; (800f8ec <ComputeRxWindowParameters+0xc8>)
 800f8cc:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f8d0:	4413      	add	r3, r2
 800f8d2:	4a06      	ldr	r2, [pc, #24]	; (800f8ec <ComputeRxWindowParameters+0xc8>)
 800f8d4:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800f8d8:	bf00      	nop
 800f8da:	3704      	adds	r7, #4
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd90      	pop	{r4, r7, pc}
 800f8e0:	20000954 	.word	0x20000954
 800f8e4:	20000804 	.word	0x20000804
 800f8e8:	20000818 	.word	0x20000818
 800f8ec:	2000044c 	.word	0x2000044c

0800f8f0 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f8fa:	4b13      	ldr	r3, [pc, #76]	; (800f948 <VerifyTxFrame+0x58>)
 800f8fc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f900:	2b00      	cmp	r3, #0
 800f902:	d01b      	beq.n	800f93c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f904:	1d3b      	adds	r3, r7, #4
 800f906:	4618      	mov	r0, r3
 800f908:	f002 fd20 	bl	801234c <LoRaMacCommandsGetSizeSerializedCmds>
 800f90c:	4603      	mov	r3, r0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d001      	beq.n	800f916 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f912:	2313      	movs	r3, #19
 800f914:	e013      	b.n	800f93e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800f916:	4b0d      	ldr	r3, [pc, #52]	; (800f94c <VerifyTxFrame+0x5c>)
 800f918:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f91c:	4a0a      	ldr	r2, [pc, #40]	; (800f948 <VerifyTxFrame+0x58>)
 800f91e:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	b2d2      	uxtb	r2, r2
 800f926:	4618      	mov	r0, r3
 800f928:	f7ff f956 	bl	800ebd8 <ValidatePayloadLength>
 800f92c:	4603      	mov	r3, r0
 800f92e:	f083 0301 	eor.w	r3, r3, #1
 800f932:	b2db      	uxtb	r3, r3
 800f934:	2b00      	cmp	r3, #0
 800f936:	d001      	beq.n	800f93c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800f938:	2308      	movs	r3, #8
 800f93a:	e000      	b.n	800f93e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800f93c:	2300      	movs	r3, #0
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	20000954 	.word	0x20000954
 800f94c:	2000044c 	.word	0x2000044c

0800f950 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800f956:	4b18      	ldr	r3, [pc, #96]	; (800f9b8 <SerializeTxFrame+0x68>)
 800f958:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d002      	beq.n	800f966 <SerializeTxFrame+0x16>
 800f960:	2b04      	cmp	r3, #4
 800f962:	d011      	beq.n	800f988 <SerializeTxFrame+0x38>
 800f964:	e021      	b.n	800f9aa <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f966:	4815      	ldr	r0, [pc, #84]	; (800f9bc <SerializeTxFrame+0x6c>)
 800f968:	f004 f823 	bl	80139b2 <LoRaMacSerializerJoinRequest>
 800f96c:	4603      	mov	r3, r0
 800f96e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f970:	79fb      	ldrb	r3, [r7, #7]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f976:	2311      	movs	r3, #17
 800f978:	e01a      	b.n	800f9b0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f97a:	4b0f      	ldr	r3, [pc, #60]	; (800f9b8 <SerializeTxFrame+0x68>)
 800f97c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f980:	b29a      	uxth	r2, r3
 800f982:	4b0d      	ldr	r3, [pc, #52]	; (800f9b8 <SerializeTxFrame+0x68>)
 800f984:	801a      	strh	r2, [r3, #0]
            break;
 800f986:	e012      	b.n	800f9ae <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800f988:	480c      	ldr	r0, [pc, #48]	; (800f9bc <SerializeTxFrame+0x6c>)
 800f98a:	f004 f894 	bl	8013ab6 <LoRaMacSerializerData>
 800f98e:	4603      	mov	r3, r0
 800f990:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f992:	79fb      	ldrb	r3, [r7, #7]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d001      	beq.n	800f99c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f998:	2311      	movs	r3, #17
 800f99a:	e009      	b.n	800f9b0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f99c:	4b06      	ldr	r3, [pc, #24]	; (800f9b8 <SerializeTxFrame+0x68>)
 800f99e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f9a2:	b29a      	uxth	r2, r3
 800f9a4:	4b04      	ldr	r3, [pc, #16]	; (800f9b8 <SerializeTxFrame+0x68>)
 800f9a6:	801a      	strh	r2, [r3, #0]
            break;
 800f9a8:	e001      	b.n	800f9ae <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f9aa:	2303      	movs	r3, #3
 800f9ac:	e000      	b.n	800f9b0 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800f9ae:	2300      	movs	r3, #0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}
 800f9b8:	2000044c 	.word	0x2000044c
 800f9bc:	20000554 	.word	0x20000554

0800f9c0 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b090      	sub	sp, #64	; 0x40
 800f9c4:	af02      	add	r7, sp, #8
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9ca:	2303      	movs	r3, #3
 800f9cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800f9d0:	f7ff ff06 	bl	800f7e0 <CheckForClassBCollision>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800f9da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d002      	beq.n	800f9e8 <ScheduleTx+0x28>
    {
        return status;
 800f9e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f9e6:	e08f      	b.n	800fb08 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800f9e8:	f000 f8fa 	bl	800fbe0 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800f9ec:	f7ff ffb0 	bl	800f950 <SerializeTxFrame>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800f9f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d002      	beq.n	800fa04 <ScheduleTx+0x44>
    {
        return status;
 800f9fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa02:	e081      	b.n	800fb08 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fa04:	4b42      	ldr	r3, [pc, #264]	; (800fb10 <ScheduleTx+0x150>)
 800fa06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa08:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fa0a:	4b41      	ldr	r3, [pc, #260]	; (800fb10 <ScheduleTx+0x150>)
 800fa0c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fa10:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fa12:	4b3f      	ldr	r3, [pc, #252]	; (800fb10 <ScheduleTx+0x150>)
 800fa14:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fa18:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fa1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f009 ff40 	bl	80198a4 <SysTimeGetMcuTime>
 800fa24:	4638      	mov	r0, r7
 800fa26:	4b3a      	ldr	r3, [pc, #232]	; (800fb10 <ScheduleTx+0x150>)
 800fa28:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800fa2c:	9200      	str	r2, [sp, #0]
 800fa2e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800fa32:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fa36:	ca06      	ldmia	r2, {r1, r2}
 800fa38:	f009 fe95 	bl	8019766 <SysTimeSub>
 800fa3c:	f107 0320 	add.w	r3, r7, #32
 800fa40:	463a      	mov	r2, r7
 800fa42:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa46:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fa4a:	4b31      	ldr	r3, [pc, #196]	; (800fb10 <ScheduleTx+0x150>)
 800fa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa4e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fa50:	2300      	movs	r3, #0
 800fa52:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800fa56:	2301      	movs	r3, #1
 800fa58:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fa5a:	4b2e      	ldr	r3, [pc, #184]	; (800fb14 <ScheduleTx+0x154>)
 800fa5c:	881b      	ldrh	r3, [r3, #0]
 800fa5e:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa60:	4b2b      	ldr	r3, [pc, #172]	; (800fb10 <ScheduleTx+0x150>)
 800fa62:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d104      	bne.n	800fa74 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800fa70:	2300      	movs	r3, #0
 800fa72:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fa74:	4b26      	ldr	r3, [pc, #152]	; (800fb10 <ScheduleTx+0x150>)
 800fa76:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fa7a:	f107 0114 	add.w	r1, r7, #20
 800fa7e:	4b26      	ldr	r3, [pc, #152]	; (800fb18 <ScheduleTx+0x158>)
 800fa80:	9300      	str	r3, [sp, #0]
 800fa82:	4b26      	ldr	r3, [pc, #152]	; (800fb1c <ScheduleTx+0x15c>)
 800fa84:	4a26      	ldr	r2, [pc, #152]	; (800fb20 <ScheduleTx+0x160>)
 800fa86:	f004 fa5b 	bl	8013f40 <RegionNextChannel>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800fa90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d022      	beq.n	800fade <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fa98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fa9c:	2b0b      	cmp	r3, #11
 800fa9e:	d11b      	bne.n	800fad8 <ScheduleTx+0x118>
 800faa0:	7bfb      	ldrb	r3, [r7, #15]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d018      	beq.n	800fad8 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800faa6:	4b1b      	ldr	r3, [pc, #108]	; (800fb14 <ScheduleTx+0x154>)
 800faa8:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800faac:	2b00      	cmp	r3, #0
 800faae:	d011      	beq.n	800fad4 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fab0:	4b18      	ldr	r3, [pc, #96]	; (800fb14 <ScheduleTx+0x154>)
 800fab2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fab6:	f043 0320 	orr.w	r3, r3, #32
 800faba:	4a16      	ldr	r2, [pc, #88]	; (800fb14 <ScheduleTx+0x154>)
 800fabc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fac0:	4b14      	ldr	r3, [pc, #80]	; (800fb14 <ScheduleTx+0x154>)
 800fac2:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fac6:	4619      	mov	r1, r3
 800fac8:	4816      	ldr	r0, [pc, #88]	; (800fb24 <ScheduleTx+0x164>)
 800faca:	f00a fb87 	bl	801a1dc <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800face:	4815      	ldr	r0, [pc, #84]	; (800fb24 <ScheduleTx+0x164>)
 800fad0:	f00a faa6 	bl	801a020 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fad4:	2300      	movs	r3, #0
 800fad6:	e017      	b.n	800fb08 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fad8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fadc:	e014      	b.n	800fb08 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fade:	f7ff fea1 	bl	800f824 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fae2:	f7ff ff05 	bl	800f8f0 <VerifyTxFrame>
 800fae6:	4603      	mov	r3, r0
 800fae8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800faec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d002      	beq.n	800fafa <ScheduleTx+0x13a>
    {
        return status;
 800faf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800faf8:	e006      	b.n	800fb08 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800fafa:	4b06      	ldr	r3, [pc, #24]	; (800fb14 <ScheduleTx+0x154>)
 800fafc:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800fb00:	4618      	mov	r0, r3
 800fb02:	f000 fb1d 	bl	8010140 <SendFrameOnChannel>
 800fb06:	4603      	mov	r3, r0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3738      	adds	r7, #56	; 0x38
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	20000954 	.word	0x20000954
 800fb14:	2000044c 	.word	0x2000044c
 800fb18:	20000984 	.word	0x20000984
 800fb1c:	200008d0 	.word	0x200008d0
 800fb20:	20000861 	.word	0x20000861
 800fb24:	200007b4 	.word	0x200007b4

0800fb28 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	4603      	mov	r3, r0
 800fb30:	460a      	mov	r2, r1
 800fb32:	71fb      	strb	r3, [r7, #7]
 800fb34:	4613      	mov	r3, r2
 800fb36:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fb38:	2313      	movs	r3, #19
 800fb3a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800fb40:	4b25      	ldr	r3, [pc, #148]	; (800fbd8 <SecureFrame+0xb0>)
 800fb42:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d002      	beq.n	800fb50 <SecureFrame+0x28>
 800fb4a:	2b04      	cmp	r3, #4
 800fb4c:	d011      	beq.n	800fb72 <SecureFrame+0x4a>
 800fb4e:	e03b      	b.n	800fbc8 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fb50:	4822      	ldr	r0, [pc, #136]	; (800fbdc <SecureFrame+0xb4>)
 800fb52:	f003 faf7 	bl	8013144 <LoRaMacCryptoPrepareJoinRequest>
 800fb56:	4603      	mov	r3, r0
 800fb58:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fb5a:	7bfb      	ldrb	r3, [r7, #15]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d001      	beq.n	800fb64 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fb60:	2311      	movs	r3, #17
 800fb62:	e034      	b.n	800fbce <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fb64:	4b1c      	ldr	r3, [pc, #112]	; (800fbd8 <SecureFrame+0xb0>)
 800fb66:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fb6a:	b29a      	uxth	r2, r3
 800fb6c:	4b1a      	ldr	r3, [pc, #104]	; (800fbd8 <SecureFrame+0xb0>)
 800fb6e:	801a      	strh	r2, [r3, #0]
            break;
 800fb70:	e02c      	b.n	800fbcc <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fb72:	f107 0308 	add.w	r3, r7, #8
 800fb76:	4618      	mov	r0, r3
 800fb78:	f003 fa0a 	bl	8012f90 <LoRaMacCryptoGetFCntUp>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d001      	beq.n	800fb86 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fb82:	2312      	movs	r3, #18
 800fb84:	e023      	b.n	800fbce <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800fb86:	4b14      	ldr	r3, [pc, #80]	; (800fbd8 <SecureFrame+0xb0>)
 800fb88:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d104      	bne.n	800fb9a <SecureFrame+0x72>
 800fb90:	4b11      	ldr	r3, [pc, #68]	; (800fbd8 <SecureFrame+0xb0>)
 800fb92:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800fb96:	2b01      	cmp	r3, #1
 800fb98:	d902      	bls.n	800fba0 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800fba0:	68b8      	ldr	r0, [r7, #8]
 800fba2:	79ba      	ldrb	r2, [r7, #6]
 800fba4:	79f9      	ldrb	r1, [r7, #7]
 800fba6:	4b0d      	ldr	r3, [pc, #52]	; (800fbdc <SecureFrame+0xb4>)
 800fba8:	f003 fbe4 	bl	8013374 <LoRaMacCryptoSecureMessage>
 800fbac:	4603      	mov	r3, r0
 800fbae:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fbb0:	7bfb      	ldrb	r3, [r7, #15]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d001      	beq.n	800fbba <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fbb6:	2311      	movs	r3, #17
 800fbb8:	e009      	b.n	800fbce <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fbba:	4b07      	ldr	r3, [pc, #28]	; (800fbd8 <SecureFrame+0xb0>)
 800fbbc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	4b05      	ldr	r3, [pc, #20]	; (800fbd8 <SecureFrame+0xb0>)
 800fbc4:	801a      	strh	r2, [r3, #0]
            break;
 800fbc6:	e001      	b.n	800fbcc <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fbc8:	2303      	movs	r3, #3
 800fbca:	e000      	b.n	800fbce <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800fbcc:	2300      	movs	r3, #0
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3710      	adds	r7, #16
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	2000044c 	.word	0x2000044c
 800fbdc:	20000554 	.word	0x20000554

0800fbe0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800fbe4:	4b09      	ldr	r3, [pc, #36]	; (800fc0c <CalculateBackOff+0x2c>)
 800fbe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d10a      	bne.n	800fc02 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800fbec:	4b07      	ldr	r3, [pc, #28]	; (800fc0c <CalculateBackOff+0x2c>)
 800fbee:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	4a06      	ldr	r2, [pc, #24]	; (800fc10 <CalculateBackOff+0x30>)
 800fbf6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800fbfa:	fb02 f303 	mul.w	r3, r2, r3
 800fbfe:	4a03      	ldr	r2, [pc, #12]	; (800fc0c <CalculateBackOff+0x2c>)
 800fc00:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800fc02:	bf00      	nop
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bc80      	pop	{r7}
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	20000954 	.word	0x20000954
 800fc10:	2000044c 	.word	0x2000044c

0800fc14 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	7139      	strb	r1, [r7, #4]
 800fc1e:	71fb      	strb	r3, [r7, #7]
 800fc20:	4613      	mov	r3, r2
 800fc22:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800fc24:	79fb      	ldrb	r3, [r7, #7]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d002      	beq.n	800fc30 <RemoveMacCommands+0x1c>
 800fc2a:	79fb      	ldrb	r3, [r7, #7]
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d10d      	bne.n	800fc4c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800fc30:	79bb      	ldrb	r3, [r7, #6]
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d108      	bne.n	800fc48 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800fc36:	793b      	ldrb	r3, [r7, #4]
 800fc38:	f003 0320 	and.w	r3, r3, #32
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d004      	beq.n	800fc4c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800fc42:	f002 fb61 	bl	8012308 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800fc46:	e001      	b.n	800fc4c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800fc48:	f002 fb5e 	bl	8012308 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800fc4c:	bf00      	nop
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800fc54:	b5b0      	push	{r4, r5, r7, lr}
 800fc56:	b08e      	sub	sp, #56	; 0x38
 800fc58:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800fc5a:	4b68      	ldr	r3, [pc, #416]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800fc62:	4b66      	ldr	r3, [pc, #408]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fc64:	2200      	movs	r2, #0
 800fc66:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800fc68:	4b65      	ldr	r3, [pc, #404]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800fc70:	4b63      	ldr	r3, [pc, #396]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fc72:	2201      	movs	r2, #1
 800fc74:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800fc78:	4b61      	ldr	r3, [pc, #388]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800fc80:	4b5f      	ldr	r3, [pc, #380]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fc82:	2200      	movs	r2, #0
 800fc84:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 800fc88:	4b5c      	ldr	r3, [pc, #368]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800fc90:	4b5a      	ldr	r3, [pc, #360]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fc92:	2201      	movs	r2, #1
 800fc94:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800fc98:	4b58      	ldr	r3, [pc, #352]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fc9a:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800fc9e:	4b57      	ldr	r3, [pc, #348]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800fca4:	4b55      	ldr	r3, [pc, #340]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fca6:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800fcaa:	4b54      	ldr	r3, [pc, #336]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fcac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800fcb0:	4b52      	ldr	r3, [pc, #328]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fcb2:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800fcb6:	4b51      	ldr	r3, [pc, #324]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fcb8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800fcbc:	4b4f      	ldr	r3, [pc, #316]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fcbe:	4a4f      	ldr	r2, [pc, #316]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fcc0:	3364      	adds	r3, #100	; 0x64
 800fcc2:	32a4      	adds	r2, #164	; 0xa4
 800fcc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fcc8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800fccc:	4b4b      	ldr	r3, [pc, #300]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fcce:	4a4b      	ldr	r2, [pc, #300]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fcd0:	336c      	adds	r3, #108	; 0x6c
 800fcd2:	32ac      	adds	r2, #172	; 0xac
 800fcd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fcd8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800fcdc:	4b47      	ldr	r3, [pc, #284]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fcde:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 800fce2:	4b46      	ldr	r3, [pc, #280]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fce4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800fce8:	4b44      	ldr	r3, [pc, #272]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fcea:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 800fcee:	4b43      	ldr	r3, [pc, #268]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fcf0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800fcf4:	4b41      	ldr	r3, [pc, #260]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fcf6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fcfa:	4a40      	ldr	r2, [pc, #256]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fcfc:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800fcfe:	4b3f      	ldr	r3, [pc, #252]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fd00:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fd04:	4a3d      	ldr	r2, [pc, #244]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fd06:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800fd08:	4b3d      	ldr	r3, [pc, #244]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800fd10:	4b3a      	ldr	r3, [pc, #232]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fd12:	2200      	movs	r2, #0
 800fd14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800fd18:	2301      	movs	r3, #1
 800fd1a:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fd1c:	4b39      	ldr	r3, [pc, #228]	; (800fe04 <ResetMacParameters+0x1b0>)
 800fd1e:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fd20:	4b39      	ldr	r3, [pc, #228]	; (800fe08 <ResetMacParameters+0x1b4>)
 800fd22:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fd24:	4b35      	ldr	r3, [pc, #212]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fd26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd2a:	1d3a      	adds	r2, r7, #4
 800fd2c:	4611      	mov	r1, r2
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f003 fff2 	bl	8013d18 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800fd34:	4b32      	ldr	r3, [pc, #200]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd36:	2200      	movs	r2, #0
 800fd38:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fd3c:	4b30      	ldr	r3, [pc, #192]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd3e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fd42:	4b2f      	ldr	r3, [pc, #188]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd44:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fd48:	4b2c      	ldr	r3, [pc, #176]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fd4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd4c:	4a2c      	ldr	r2, [pc, #176]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd4e:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fd52:	4b2a      	ldr	r3, [pc, #168]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fd54:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fd58:	4b29      	ldr	r3, [pc, #164]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd5a:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fd5e:	4b27      	ldr	r3, [pc, #156]	; (800fdfc <ResetMacParameters+0x1a8>)
 800fd60:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fd64:	4b26      	ldr	r3, [pc, #152]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd66:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fd6a:	4b25      	ldr	r3, [pc, #148]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fd72:	4b23      	ldr	r3, [pc, #140]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd74:	2201      	movs	r2, #1
 800fd76:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fd7a:	4a21      	ldr	r2, [pc, #132]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd7c:	4b20      	ldr	r3, [pc, #128]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd7e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800fd82:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800fd86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd8a:	682b      	ldr	r3, [r5, #0]
 800fd8c:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800fd8e:	4b1c      	ldr	r3, [pc, #112]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd90:	2201      	movs	r2, #1
 800fd92:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fd96:	4b1a      	ldr	r3, [pc, #104]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fd98:	2202      	movs	r2, #2
 800fd9a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800fda2:	2300      	movs	r3, #0
 800fda4:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800fda6:	4b16      	ldr	r3, [pc, #88]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fda8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d009      	beq.n	800fdc4 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800fdb0:	4b13      	ldr	r3, [pc, #76]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fdb2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800fdba:	4b11      	ldr	r3, [pc, #68]	; (800fe00 <ResetMacParameters+0x1ac>)
 800fdbc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fdc0:	691b      	ldr	r3, [r3, #16]
 800fdc2:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800fdc4:	4b11      	ldr	r3, [pc, #68]	; (800fe0c <ResetMacParameters+0x1b8>)
 800fdc6:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800fdc8:	4b11      	ldr	r3, [pc, #68]	; (800fe10 <ResetMacParameters+0x1bc>)
 800fdca:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800fdcc:	4b11      	ldr	r3, [pc, #68]	; (800fe14 <ResetMacParameters+0x1c0>)
 800fdce:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800fdd0:	4b11      	ldr	r3, [pc, #68]	; (800fe18 <ResetMacParameters+0x1c4>)
 800fdd2:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800fdd4:	4b11      	ldr	r3, [pc, #68]	; (800fe1c <ResetMacParameters+0x1c8>)
 800fdd6:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800fdd8:	4b11      	ldr	r3, [pc, #68]	; (800fe20 <ResetMacParameters+0x1cc>)
 800fdda:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800fddc:	4b11      	ldr	r3, [pc, #68]	; (800fe24 <ResetMacParameters+0x1d0>)
 800fdde:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800fde0:	4b11      	ldr	r3, [pc, #68]	; (800fe28 <ResetMacParameters+0x1d4>)
 800fde2:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800fde4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fde8:	f107 0310 	add.w	r3, r7, #16
 800fdec:	4a0f      	ldr	r2, [pc, #60]	; (800fe2c <ResetMacParameters+0x1d8>)
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f001 ffec 	bl	8011dcc <LoRaMacClassBInit>
}
 800fdf4:	bf00      	nop
 800fdf6:	3738      	adds	r7, #56	; 0x38
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bdb0      	pop	{r4, r5, r7, pc}
 800fdfc:	20000954 	.word	0x20000954
 800fe00:	2000044c 	.word	0x2000044c
 800fe04:	20000b2c 	.word	0x20000b2c
 800fe08:	20000bc0 	.word	0x20000bc0
 800fe0c:	200008ac 	.word	0x200008ac
 800fe10:	20000868 	.word	0x20000868
 800fe14:	20000898 	.word	0x20000898
 800fe18:	200008cd 	.word	0x200008cd
 800fe1c:	20000a20 	.word	0x20000a20
 800fe20:	20000994 	.word	0x20000994
 800fe24:	20000998 	.word	0x20000998
 800fe28:	20000a24 	.word	0x20000a24
 800fe2c:	20000c88 	.word	0x20000c88

0800fe30 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f00a f95e 	bl	801a0fc <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800fe40:	4b0e      	ldr	r3, [pc, #56]	; (800fe7c <RxWindowSetup+0x4c>)
 800fe42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe44:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800fe46:	4b0e      	ldr	r3, [pc, #56]	; (800fe80 <RxWindowSetup+0x50>)
 800fe48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe4c:	4a0d      	ldr	r2, [pc, #52]	; (800fe84 <RxWindowSetup+0x54>)
 800fe4e:	6839      	ldr	r1, [r7, #0]
 800fe50:	4618      	mov	r0, r3
 800fe52:	f003 ffc9 	bl	8013de8 <RegionRxConfig>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d00a      	beq.n	800fe72 <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800fe5c:	4b07      	ldr	r3, [pc, #28]	; (800fe7c <RxWindowSetup+0x4c>)
 800fe5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe60:	4a07      	ldr	r2, [pc, #28]	; (800fe80 <RxWindowSetup+0x50>)
 800fe62:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800fe64:	4610      	mov	r0, r2
 800fe66:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	7cda      	ldrb	r2, [r3, #19]
 800fe6c:	4b06      	ldr	r3, [pc, #24]	; (800fe88 <RxWindowSetup+0x58>)
 800fe6e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800fe72:	bf00      	nop
 800fe74:	3708      	adds	r7, #8
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	0801b848 	.word	0x0801b848
 800fe80:	20000954 	.word	0x20000954
 800fe84:	2000086c 	.word	0x2000086c
 800fe88:	2000044c 	.word	0x2000044c

0800fe8c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800fe8c:	b590      	push	{r4, r7, lr}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fe92:	4b18      	ldr	r3, [pc, #96]	; (800fef4 <OpenContinuousRxCWindow+0x68>)
 800fe94:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800fe98:	4b16      	ldr	r3, [pc, #88]	; (800fef4 <OpenContinuousRxCWindow+0x68>)
 800fe9a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fe9e:	b259      	sxtb	r1, r3
 800fea0:	4b14      	ldr	r3, [pc, #80]	; (800fef4 <OpenContinuousRxCWindow+0x68>)
 800fea2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fea6:	4b13      	ldr	r3, [pc, #76]	; (800fef4 <OpenContinuousRxCWindow+0x68>)
 800fea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800feaa:	4c13      	ldr	r4, [pc, #76]	; (800fef8 <OpenContinuousRxCWindow+0x6c>)
 800feac:	9400      	str	r4, [sp, #0]
 800feae:	f003 ff81 	bl	8013db4 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800feb2:	4b12      	ldr	r3, [pc, #72]	; (800fefc <OpenContinuousRxCWindow+0x70>)
 800feb4:	2202      	movs	r2, #2
 800feb6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800feba:	4b10      	ldr	r3, [pc, #64]	; (800fefc <OpenContinuousRxCWindow+0x70>)
 800febc:	2201      	movs	r2, #1
 800febe:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800fec2:	4b0c      	ldr	r3, [pc, #48]	; (800fef4 <OpenContinuousRxCWindow+0x68>)
 800fec4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fec8:	4a0d      	ldr	r2, [pc, #52]	; (800ff00 <OpenContinuousRxCWindow+0x74>)
 800feca:	490b      	ldr	r1, [pc, #44]	; (800fef8 <OpenContinuousRxCWindow+0x6c>)
 800fecc:	4618      	mov	r0, r3
 800fece:	f003 ff8b 	bl	8013de8 <RegionRxConfig>
 800fed2:	4603      	mov	r3, r0
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d009      	beq.n	800feec <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 800fed8:	4b0a      	ldr	r3, [pc, #40]	; (800ff04 <OpenContinuousRxCWindow+0x78>)
 800feda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fedc:	2000      	movs	r0, #0
 800fede:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800fee0:	4b06      	ldr	r3, [pc, #24]	; (800fefc <OpenContinuousRxCWindow+0x70>)
 800fee2:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 800fee6:	4b05      	ldr	r3, [pc, #20]	; (800fefc <OpenContinuousRxCWindow+0x70>)
 800fee8:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800feec:	bf00      	nop
 800feee:	3704      	adds	r7, #4
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd90      	pop	{r4, r7, pc}
 800fef4:	20000954 	.word	0x20000954
 800fef8:	2000082c 	.word	0x2000082c
 800fefc:	2000044c 	.word	0x2000044c
 800ff00:	2000086c 	.word	0x2000086c
 800ff04:	0801b848 	.word	0x0801b848

0800ff08 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b088      	sub	sp, #32
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	60f8      	str	r0, [r7, #12]
 800ff10:	60b9      	str	r1, [r7, #8]
 800ff12:	603b      	str	r3, [r7, #0]
 800ff14:	4613      	mov	r3, r2
 800ff16:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800ff18:	4b82      	ldr	r3, [pc, #520]	; (8010124 <PrepareFrame+0x21c>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800ff1e:	4b81      	ldr	r3, [pc, #516]	; (8010124 <PrepareFrame+0x21c>)
 800ff20:	2200      	movs	r2, #0
 800ff22:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800ff26:	2300      	movs	r3, #0
 800ff28:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d101      	bne.n	800ff3c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800ff3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ff3e:	461a      	mov	r2, r3
 800ff40:	6839      	ldr	r1, [r7, #0]
 800ff42:	4879      	ldr	r0, [pc, #484]	; (8010128 <PrepareFrame+0x220>)
 800ff44:	f006 f9c9 	bl	80162da <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800ff48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ff4a:	b2da      	uxtb	r2, r3
 800ff4c:	4b75      	ldr	r3, [pc, #468]	; (8010124 <PrepareFrame+0x21c>)
 800ff4e:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	781a      	ldrb	r2, [r3, #0]
 800ff56:	4b73      	ldr	r3, [pc, #460]	; (8010124 <PrepareFrame+0x21c>)
 800ff58:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ff62:	b2db      	uxtb	r3, r3
 800ff64:	2b07      	cmp	r3, #7
 800ff66:	f000 80b9 	beq.w	80100dc <PrepareFrame+0x1d4>
 800ff6a:	2b07      	cmp	r3, #7
 800ff6c:	f300 80d0 	bgt.w	8010110 <PrepareFrame+0x208>
 800ff70:	2b02      	cmp	r3, #2
 800ff72:	d006      	beq.n	800ff82 <PrepareFrame+0x7a>
 800ff74:	2b04      	cmp	r3, #4
 800ff76:	f040 80cb 	bne.w	8010110 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800ff7a:	4b6a      	ldr	r3, [pc, #424]	; (8010124 <PrepareFrame+0x21c>)
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800ff82:	4b68      	ldr	r3, [pc, #416]	; (8010124 <PrepareFrame+0x21c>)
 800ff84:	2204      	movs	r2, #4
 800ff86:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800ff8a:	4b66      	ldr	r3, [pc, #408]	; (8010124 <PrepareFrame+0x21c>)
 800ff8c:	4a67      	ldr	r2, [pc, #412]	; (801012c <PrepareFrame+0x224>)
 800ff8e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ff92:	4b64      	ldr	r3, [pc, #400]	; (8010124 <PrepareFrame+0x21c>)
 800ff94:	22ff      	movs	r2, #255	; 0xff
 800ff96:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	781a      	ldrb	r2, [r3, #0]
 800ff9e:	4b61      	ldr	r3, [pc, #388]	; (8010124 <PrepareFrame+0x21c>)
 800ffa0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800ffa4:	4a5f      	ldr	r2, [pc, #380]	; (8010124 <PrepareFrame+0x21c>)
 800ffa6:	79fb      	ldrb	r3, [r7, #7]
 800ffa8:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800ffac:	4b60      	ldr	r3, [pc, #384]	; (8010130 <PrepareFrame+0x228>)
 800ffae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ffb2:	4a5c      	ldr	r2, [pc, #368]	; (8010124 <PrepareFrame+0x21c>)
 800ffb4:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	781a      	ldrb	r2, [r3, #0]
 800ffbc:	4b59      	ldr	r3, [pc, #356]	; (8010124 <PrepareFrame+0x21c>)
 800ffbe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800ffc2:	4b58      	ldr	r3, [pc, #352]	; (8010124 <PrepareFrame+0x21c>)
 800ffc4:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 800ffc8:	4b56      	ldr	r3, [pc, #344]	; (8010124 <PrepareFrame+0x21c>)
 800ffca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800ffce:	4b55      	ldr	r3, [pc, #340]	; (8010124 <PrepareFrame+0x21c>)
 800ffd0:	4a55      	ldr	r2, [pc, #340]	; (8010128 <PrepareFrame+0x220>)
 800ffd2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ffd6:	f107 0318 	add.w	r3, r7, #24
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f002 ffd8 	bl	8012f90 <LoRaMacCryptoGetFCntUp>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d001      	beq.n	800ffea <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ffe6:	2312      	movs	r3, #18
 800ffe8:	e098      	b.n	801011c <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800ffea:	69bb      	ldr	r3, [r7, #24]
 800ffec:	b29a      	uxth	r2, r3
 800ffee:	4b4d      	ldr	r3, [pc, #308]	; (8010124 <PrepareFrame+0x21c>)
 800fff0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800fff4:	4b4b      	ldr	r3, [pc, #300]	; (8010124 <PrepareFrame+0x21c>)
 800fff6:	2200      	movs	r2, #0
 800fff8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 800fffc:	4b49      	ldr	r3, [pc, #292]	; (8010124 <PrepareFrame+0x21c>)
 800fffe:	2200      	movs	r2, #0
 8010000:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010004:	69bb      	ldr	r3, [r7, #24]
 8010006:	4a47      	ldr	r2, [pc, #284]	; (8010124 <PrepareFrame+0x21c>)
 8010008:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801000c:	f107 0314 	add.w	r3, r7, #20
 8010010:	4618      	mov	r0, r3
 8010012:	f002 f99b 	bl	801234c <LoRaMacCommandsGetSizeSerializedCmds>
 8010016:	4603      	mov	r3, r0
 8010018:	2b00      	cmp	r3, #0
 801001a:	d001      	beq.n	8010020 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801001c:	2313      	movs	r3, #19
 801001e:	e07d      	b.n	801011c <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d076      	beq.n	8010114 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8010026:	4b42      	ldr	r3, [pc, #264]	; (8010130 <PrepareFrame+0x228>)
 8010028:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801002c:	4618      	mov	r0, r3
 801002e:	f7fe fdab 	bl	800eb88 <GetMaxAppPayloadWithoutFOptsLength>
 8010032:	4603      	mov	r3, r0
 8010034:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010036:	4b3b      	ldr	r3, [pc, #236]	; (8010124 <PrepareFrame+0x21c>)
 8010038:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801003c:	2b00      	cmp	r3, #0
 801003e:	d01d      	beq.n	801007c <PrepareFrame+0x174>
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	2b0f      	cmp	r3, #15
 8010044:	d81a      	bhi.n	801007c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010046:	f107 0314 	add.w	r3, r7, #20
 801004a:	4a3a      	ldr	r2, [pc, #232]	; (8010134 <PrepareFrame+0x22c>)
 801004c:	4619      	mov	r1, r3
 801004e:	200f      	movs	r0, #15
 8010050:	f002 f992 	bl	8012378 <LoRaMacCommandsSerializeCmds>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d001      	beq.n	801005e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801005a:	2313      	movs	r3, #19
 801005c:	e05e      	b.n	801011c <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	f003 030f 	and.w	r3, r3, #15
 8010064:	b2d9      	uxtb	r1, r3
 8010066:	68ba      	ldr	r2, [r7, #8]
 8010068:	7813      	ldrb	r3, [r2, #0]
 801006a:	f361 0303 	bfi	r3, r1, #0, #4
 801006e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	781a      	ldrb	r2, [r3, #0]
 8010074:	4b2b      	ldr	r3, [pc, #172]	; (8010124 <PrepareFrame+0x21c>)
 8010076:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801007a:	e04b      	b.n	8010114 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801007c:	4b29      	ldr	r3, [pc, #164]	; (8010124 <PrepareFrame+0x21c>)
 801007e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010082:	2b00      	cmp	r3, #0
 8010084:	d010      	beq.n	80100a8 <PrepareFrame+0x1a0>
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	2b0f      	cmp	r3, #15
 801008a:	d90d      	bls.n	80100a8 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801008c:	7ffb      	ldrb	r3, [r7, #31]
 801008e:	f107 0114 	add.w	r1, r7, #20
 8010092:	4a29      	ldr	r2, [pc, #164]	; (8010138 <PrepareFrame+0x230>)
 8010094:	4618      	mov	r0, r3
 8010096:	f002 f96f 	bl	8012378 <LoRaMacCommandsSerializeCmds>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d001      	beq.n	80100a4 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80100a0:	2313      	movs	r3, #19
 80100a2:	e03b      	b.n	801011c <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80100a4:	230a      	movs	r3, #10
 80100a6:	e039      	b.n	801011c <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80100a8:	7ffb      	ldrb	r3, [r7, #31]
 80100aa:	f107 0114 	add.w	r1, r7, #20
 80100ae:	4a22      	ldr	r2, [pc, #136]	; (8010138 <PrepareFrame+0x230>)
 80100b0:	4618      	mov	r0, r3
 80100b2:	f002 f961 	bl	8012378 <LoRaMacCommandsSerializeCmds>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d001      	beq.n	80100c0 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80100bc:	2313      	movs	r3, #19
 80100be:	e02d      	b.n	801011c <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80100c0:	4b18      	ldr	r3, [pc, #96]	; (8010124 <PrepareFrame+0x21c>)
 80100c2:	2200      	movs	r2, #0
 80100c4:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80100c8:	4b16      	ldr	r3, [pc, #88]	; (8010124 <PrepareFrame+0x21c>)
 80100ca:	4a1b      	ldr	r2, [pc, #108]	; (8010138 <PrepareFrame+0x230>)
 80100cc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	b2da      	uxtb	r2, r3
 80100d4:	4b13      	ldr	r3, [pc, #76]	; (8010124 <PrepareFrame+0x21c>)
 80100d6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80100da:	e01b      	b.n	8010114 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d01a      	beq.n	8010118 <PrepareFrame+0x210>
 80100e2:	4b10      	ldr	r3, [pc, #64]	; (8010124 <PrepareFrame+0x21c>)
 80100e4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d015      	beq.n	8010118 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80100ec:	4813      	ldr	r0, [pc, #76]	; (801013c <PrepareFrame+0x234>)
 80100ee:	4b0d      	ldr	r3, [pc, #52]	; (8010124 <PrepareFrame+0x21c>)
 80100f0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	461a      	mov	r2, r3
 80100f8:	6839      	ldr	r1, [r7, #0]
 80100fa:	f006 f8ee 	bl	80162da <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80100fe:	4b09      	ldr	r3, [pc, #36]	; (8010124 <PrepareFrame+0x21c>)
 8010100:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010104:	b29b      	uxth	r3, r3
 8010106:	3301      	adds	r3, #1
 8010108:	b29a      	uxth	r2, r3
 801010a:	4b06      	ldr	r3, [pc, #24]	; (8010124 <PrepareFrame+0x21c>)
 801010c:	801a      	strh	r2, [r3, #0]
            }
            break;
 801010e:	e003      	b.n	8010118 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010110:	2302      	movs	r3, #2
 8010112:	e003      	b.n	801011c <PrepareFrame+0x214>
            break;
 8010114:	bf00      	nop
 8010116:	e000      	b.n	801011a <PrepareFrame+0x212>
            break;
 8010118:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801011a:	2300      	movs	r3, #0
}
 801011c:	4618      	mov	r0, r3
 801011e:	3720      	adds	r7, #32
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	2000044c 	.word	0x2000044c
 8010128:	20000584 	.word	0x20000584
 801012c:	2000044e 	.word	0x2000044e
 8010130:	20000954 	.word	0x20000954
 8010134:	20000564 	.word	0x20000564
 8010138:	200008d4 	.word	0x200008d4
 801013c:	2000044f 	.word	0x2000044f

08010140 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b08a      	sub	sp, #40	; 0x28
 8010144:	af00      	add	r7, sp, #0
 8010146:	4603      	mov	r3, r0
 8010148:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801014a:	2303      	movs	r3, #3
 801014c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010150:	2300      	movs	r3, #0
 8010152:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010154:	79fb      	ldrb	r3, [r7, #7]
 8010156:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010158:	4b47      	ldr	r3, [pc, #284]	; (8010278 <SendFrameOnChannel+0x138>)
 801015a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801015e:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010160:	4b45      	ldr	r3, [pc, #276]	; (8010278 <SendFrameOnChannel+0x138>)
 8010162:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010166:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010168:	4b43      	ldr	r3, [pc, #268]	; (8010278 <SendFrameOnChannel+0x138>)
 801016a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801016c:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801016e:	4b42      	ldr	r3, [pc, #264]	; (8010278 <SendFrameOnChannel+0x138>)
 8010170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010172:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010174:	4b41      	ldr	r3, [pc, #260]	; (801027c <SendFrameOnChannel+0x13c>)
 8010176:	881b      	ldrh	r3, [r3, #0]
 8010178:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801017a:	4b3f      	ldr	r3, [pc, #252]	; (8010278 <SendFrameOnChannel+0x138>)
 801017c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010180:	f107 020f 	add.w	r2, r7, #15
 8010184:	f107 0110 	add.w	r1, r7, #16
 8010188:	4b3d      	ldr	r3, [pc, #244]	; (8010280 <SendFrameOnChannel+0x140>)
 801018a:	f003 fe42 	bl	8013e12 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801018e:	4b3b      	ldr	r3, [pc, #236]	; (801027c <SendFrameOnChannel+0x13c>)
 8010190:	2201      	movs	r2, #1
 8010192:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010196:	4b38      	ldr	r3, [pc, #224]	; (8010278 <SendFrameOnChannel+0x138>)
 8010198:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801019c:	b2da      	uxtb	r2, r3
 801019e:	4b37      	ldr	r3, [pc, #220]	; (801027c <SendFrameOnChannel+0x13c>)
 80101a0:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 80101a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80101a8:	4b34      	ldr	r3, [pc, #208]	; (801027c <SendFrameOnChannel+0x13c>)
 80101aa:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80101ae:	79fb      	ldrb	r3, [r7, #7]
 80101b0:	4a32      	ldr	r2, [pc, #200]	; (801027c <SendFrameOnChannel+0x13c>)
 80101b2:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80101b6:	4b31      	ldr	r3, [pc, #196]	; (801027c <SendFrameOnChannel+0x13c>)
 80101b8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80101bc:	4a2f      	ldr	r2, [pc, #188]	; (801027c <SendFrameOnChannel+0x13c>)
 80101be:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80101c2:	4b2e      	ldr	r3, [pc, #184]	; (801027c <SendFrameOnChannel+0x13c>)
 80101c4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80101c8:	4a2c      	ldr	r2, [pc, #176]	; (801027c <SendFrameOnChannel+0x13c>)
 80101ca:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80101ce:	f001 fe69 	bl	8011ea4 <LoRaMacClassBIsBeaconModeActive>
 80101d2:	4603      	mov	r3, r0
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d00b      	beq.n	80101f0 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80101d8:	4b28      	ldr	r3, [pc, #160]	; (801027c <SendFrameOnChannel+0x13c>)
 80101da:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80101de:	4618      	mov	r0, r3
 80101e0:	f001 fecb 	bl	8011f7a <LoRaMacClassBIsUplinkCollision>
 80101e4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80101e6:	6a3b      	ldr	r3, [r7, #32]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d001      	beq.n	80101f0 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80101ec:	2310      	movs	r3, #16
 80101ee:	e03e      	b.n	801026e <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80101f0:	4b21      	ldr	r3, [pc, #132]	; (8010278 <SendFrameOnChannel+0x138>)
 80101f2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80101f6:	2b01      	cmp	r3, #1
 80101f8:	d101      	bne.n	80101fe <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80101fa:	f001 fec8 	bl	8011f8e <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80101fe:	f001 fe62 	bl	8011ec6 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010202:	4b1d      	ldr	r3, [pc, #116]	; (8010278 <SendFrameOnChannel+0x138>)
 8010204:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010208:	b2db      	uxtb	r3, r3
 801020a:	4a1c      	ldr	r2, [pc, #112]	; (801027c <SendFrameOnChannel+0x13c>)
 801020c:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8010210:	4611      	mov	r1, r2
 8010212:	4618      	mov	r0, r3
 8010214:	f7ff fc88 	bl	800fb28 <SecureFrame>
 8010218:	4603      	mov	r3, r0
 801021a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 801021e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010222:	2b00      	cmp	r3, #0
 8010224:	d002      	beq.n	801022c <SendFrameOnChannel+0xec>
    {
        return status;
 8010226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801022a:	e020      	b.n	801026e <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801022c:	4b13      	ldr	r3, [pc, #76]	; (801027c <SendFrameOnChannel+0x13c>)
 801022e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010232:	f043 0302 	orr.w	r3, r3, #2
 8010236:	4a11      	ldr	r2, [pc, #68]	; (801027c <SendFrameOnChannel+0x13c>)
 8010238:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 801023c:	4b0f      	ldr	r3, [pc, #60]	; (801027c <SendFrameOnChannel+0x13c>)
 801023e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010242:	f083 0301 	eor.w	r3, r3, #1
 8010246:	b2db      	uxtb	r3, r3
 8010248:	2b00      	cmp	r3, #0
 801024a:	d007      	beq.n	801025c <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 801024c:	4b0b      	ldr	r3, [pc, #44]	; (801027c <SendFrameOnChannel+0x13c>)
 801024e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010252:	3301      	adds	r3, #1
 8010254:	b2da      	uxtb	r2, r3
 8010256:	4b09      	ldr	r3, [pc, #36]	; (801027c <SendFrameOnChannel+0x13c>)
 8010258:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 801025c:	4b09      	ldr	r3, [pc, #36]	; (8010284 <SendFrameOnChannel+0x144>)
 801025e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010260:	4a06      	ldr	r2, [pc, #24]	; (801027c <SendFrameOnChannel+0x13c>)
 8010262:	8812      	ldrh	r2, [r2, #0]
 8010264:	b2d2      	uxtb	r2, r2
 8010266:	4611      	mov	r1, r2
 8010268:	4807      	ldr	r0, [pc, #28]	; (8010288 <SendFrameOnChannel+0x148>)
 801026a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	3728      	adds	r7, #40	; 0x28
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	20000954 	.word	0x20000954
 801027c:	2000044c 	.word	0x2000044c
 8010280:	20000864 	.word	0x20000864
 8010284:	0801b848 	.word	0x0801b848
 8010288:	2000044e 	.word	0x2000044e

0801028c <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b086      	sub	sp, #24
 8010290:	af00      	add	r7, sp, #0
 8010292:	4603      	mov	r3, r0
 8010294:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8010296:	4b15      	ldr	r3, [pc, #84]	; (80102ec <SetTxContinuousWave+0x60>)
 8010298:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 801029c:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801029e:	4b14      	ldr	r3, [pc, #80]	; (80102f0 <SetTxContinuousWave+0x64>)
 80102a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80102a4:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80102a6:	4b12      	ldr	r3, [pc, #72]	; (80102f0 <SetTxContinuousWave+0x64>)
 80102a8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80102ac:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80102ae:	4b10      	ldr	r3, [pc, #64]	; (80102f0 <SetTxContinuousWave+0x64>)
 80102b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102b2:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80102b4:	4b0e      	ldr	r3, [pc, #56]	; (80102f0 <SetTxContinuousWave+0x64>)
 80102b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102b8:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 80102ba:	88fb      	ldrh	r3, [r7, #6]
 80102bc:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80102be:	4b0c      	ldr	r3, [pc, #48]	; (80102f0 <SetTxContinuousWave+0x64>)
 80102c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102c4:	f107 0208 	add.w	r2, r7, #8
 80102c8:	4611      	mov	r1, r2
 80102ca:	4618      	mov	r0, r3
 80102cc:	f003 fe50 	bl	8013f70 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80102d0:	4b06      	ldr	r3, [pc, #24]	; (80102ec <SetTxContinuousWave+0x60>)
 80102d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80102d6:	f043 0302 	orr.w	r3, r3, #2
 80102da:	4a04      	ldr	r2, [pc, #16]	; (80102ec <SetTxContinuousWave+0x60>)
 80102dc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80102e0:	2300      	movs	r3, #0
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3718      	adds	r7, #24
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	2000044c 	.word	0x2000044c
 80102f0:	20000954 	.word	0x20000954

080102f4 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	4603      	mov	r3, r0
 80102fc:	6039      	str	r1, [r7, #0]
 80102fe:	80fb      	strh	r3, [r7, #6]
 8010300:	4613      	mov	r3, r2
 8010302:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010304:	4b09      	ldr	r3, [pc, #36]	; (801032c <SetTxContinuousWave1+0x38>)
 8010306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010308:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801030c:	88fa      	ldrh	r2, [r7, #6]
 801030e:	6838      	ldr	r0, [r7, #0]
 8010310:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010312:	4b07      	ldr	r3, [pc, #28]	; (8010330 <SetTxContinuousWave1+0x3c>)
 8010314:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010318:	f043 0302 	orr.w	r3, r3, #2
 801031c:	4a04      	ldr	r2, [pc, #16]	; (8010330 <SetTxContinuousWave1+0x3c>)
 801031e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8010322:	2300      	movs	r3, #0
}
 8010324:	4618      	mov	r0, r3
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}
 801032c:	0801b848 	.word	0x0801b848
 8010330:	2000044c 	.word	0x2000044c

08010334 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 8010334:	b480      	push	{r7}
 8010336:	af00      	add	r7, sp, #0
    return &Nvm;
 8010338:	4b02      	ldr	r3, [pc, #8]	; (8010344 <GetNvmData+0x10>)
}
 801033a:	4618      	mov	r0, r3
 801033c:	46bd      	mov	sp, r7
 801033e:	bc80      	pop	{r7}
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop
 8010344:	20000954 	.word	0x20000954

08010348 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010350:	2300      	movs	r3, #0
 8010352:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d101      	bne.n	801035e <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801035a:	2303      	movs	r3, #3
 801035c:	e09a      	b.n	8010494 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801035e:	4b4f      	ldr	r3, [pc, #316]	; (801049c <RestoreNvmData+0x154>)
 8010360:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010364:	2b01      	cmp	r3, #1
 8010366:	d001      	beq.n	801036c <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8010368:	2301      	movs	r3, #1
 801036a:	e093      	b.n	8010494 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2124      	movs	r1, #36	; 0x24
 8010370:	4618      	mov	r0, r3
 8010372:	f006 f807 	bl	8016384 <Crc32>
 8010376:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801037c:	68fa      	ldr	r2, [r7, #12]
 801037e:	429a      	cmp	r2, r3
 8010380:	d105      	bne.n	801038e <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2228      	movs	r2, #40	; 0x28
 8010386:	4619      	mov	r1, r3
 8010388:	4845      	ldr	r0, [pc, #276]	; (80104a0 <RestoreNvmData+0x158>)
 801038a:	f005 ffa6 	bl	80162da <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	3328      	adds	r3, #40	; 0x28
 8010392:	2114      	movs	r1, #20
 8010394:	4618      	mov	r0, r3
 8010396:	f005 fff5 	bl	8016384 <Crc32>
 801039a:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103a0:	68fa      	ldr	r2, [r7, #12]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d106      	bne.n	80103b4 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	3328      	adds	r3, #40	; 0x28
 80103aa:	2218      	movs	r2, #24
 80103ac:	4619      	mov	r1, r3
 80103ae:	483d      	ldr	r0, [pc, #244]	; (80104a4 <RestoreNvmData+0x15c>)
 80103b0:	f005 ff93 	bl	80162da <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	3340      	adds	r3, #64	; 0x40
 80103b8:	21d4      	movs	r1, #212	; 0xd4
 80103ba:	4618      	mov	r0, r3
 80103bc:	f005 ffe2 	bl	8016384 <Crc32>
 80103c0:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80103c8:	68fa      	ldr	r2, [r7, #12]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d11f      	bne.n	801040e <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	3340      	adds	r3, #64	; 0x40
 80103d2:	22d8      	movs	r2, #216	; 0xd8
 80103d4:	4619      	mov	r1, r3
 80103d6:	4834      	ldr	r0, [pc, #208]	; (80104a8 <RestoreNvmData+0x160>)
 80103d8:	f005 ff7f 	bl	80162da <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80103dc:	4b2f      	ldr	r3, [pc, #188]	; (801049c <RestoreNvmData+0x154>)
 80103de:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80103e2:	4b2e      	ldr	r3, [pc, #184]	; (801049c <RestoreNvmData+0x154>)
 80103e4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80103e8:	4b2d      	ldr	r3, [pc, #180]	; (80104a0 <RestoreNvmData+0x158>)
 80103ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103ec:	4a2b      	ldr	r2, [pc, #172]	; (801049c <RestoreNvmData+0x154>)
 80103ee:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80103f2:	4b2b      	ldr	r3, [pc, #172]	; (80104a0 <RestoreNvmData+0x158>)
 80103f4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80103f8:	4b28      	ldr	r3, [pc, #160]	; (801049c <RestoreNvmData+0x154>)
 80103fa:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80103fe:	4b27      	ldr	r3, [pc, #156]	; (801049c <RestoreNvmData+0x154>)
 8010400:	2201      	movs	r2, #1
 8010402:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010406:	4b25      	ldr	r3, [pc, #148]	; (801049c <RestoreNvmData+0x154>)
 8010408:	2202      	movs	r2, #2
 801040a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010414:	21bc      	movs	r1, #188	; 0xbc
 8010416:	4618      	mov	r0, r3
 8010418:	f005 ffb4 	bl	8016384 <Crc32>
 801041c:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8010424:	68fa      	ldr	r2, [r7, #12]
 8010426:	429a      	cmp	r2, r3
 8010428:	d107      	bne.n	801043a <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010430:	22c0      	movs	r2, #192	; 0xc0
 8010432:	4619      	mov	r1, r3
 8010434:	481d      	ldr	r0, [pc, #116]	; (80104ac <RestoreNvmData+0x164>)
 8010436:	f005 ff50 	bl	80162da <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010440:	2190      	movs	r1, #144	; 0x90
 8010442:	4618      	mov	r0, r3
 8010444:	f005 ff9e 	bl	8016384 <Crc32>
 8010448:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	429a      	cmp	r2, r3
 8010454:	d107      	bne.n	8010466 <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801045c:	2294      	movs	r2, #148	; 0x94
 801045e:	4619      	mov	r1, r3
 8010460:	4813      	ldr	r0, [pc, #76]	; (80104b0 <RestoreNvmData+0x168>)
 8010462:	f005 ff3a 	bl	80162da <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f503 734d 	add.w	r3, r3, #820	; 0x334
 801046c:	2114      	movs	r1, #20
 801046e:	4618      	mov	r0, r3
 8010470:	f005 ff88 	bl	8016384 <Crc32>
 8010474:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801047c:	68fa      	ldr	r2, [r7, #12]
 801047e:	429a      	cmp	r2, r3
 8010480:	d107      	bne.n	8010492 <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010488:	2218      	movs	r2, #24
 801048a:	4619      	mov	r1, r3
 801048c:	4809      	ldr	r0, [pc, #36]	; (80104b4 <RestoreNvmData+0x16c>)
 801048e:	f005 ff24 	bl	80162da <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 8010492:	2300      	movs	r3, #0
}
 8010494:	4618      	mov	r0, r3
 8010496:	3710      	adds	r7, #16
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	2000044c 	.word	0x2000044c
 80104a0:	20000954 	.word	0x20000954
 80104a4:	2000097c 	.word	0x2000097c
 80104a8:	20000994 	.word	0x20000994
 80104ac:	20000a6c 	.word	0x20000a6c
 80104b0:	20000b2c 	.word	0x20000b2c
 80104b4:	20000c88 	.word	0x20000c88

080104b8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d002      	beq.n	80104ce <DetermineFrameType+0x16>
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d101      	bne.n	80104d2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80104ce:	2303      	movs	r3, #3
 80104d0:	e03b      	b.n	801054a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	7b1b      	ldrb	r3, [r3, #12]
 80104d6:	f003 030f 	and.w	r3, r3, #15
 80104da:	b2db      	uxtb	r3, r3
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d008      	beq.n	80104f2 <DetermineFrameType+0x3a>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d003      	beq.n	80104f2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	2200      	movs	r2, #0
 80104ee:	701a      	strb	r2, [r3, #0]
 80104f0:	e02a      	b.n	8010548 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d103      	bne.n	8010504 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	2201      	movs	r2, #1
 8010500:	701a      	strb	r2, [r3, #0]
 8010502:	e021      	b.n	8010548 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	7b1b      	ldrb	r3, [r3, #12]
 8010508:	f003 030f 	and.w	r3, r3, #15
 801050c:	b2db      	uxtb	r3, r3
 801050e:	2b00      	cmp	r3, #0
 8010510:	d108      	bne.n	8010524 <DetermineFrameType+0x6c>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d103      	bne.n	8010524 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	2202      	movs	r2, #2
 8010520:	701a      	strb	r2, [r3, #0]
 8010522:	e011      	b.n	8010548 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	7b1b      	ldrb	r3, [r3, #12]
 8010528:	f003 030f 	and.w	r3, r3, #15
 801052c:	b2db      	uxtb	r3, r3
 801052e:	2b00      	cmp	r3, #0
 8010530:	d108      	bne.n	8010544 <DetermineFrameType+0x8c>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d003      	beq.n	8010544 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2203      	movs	r2, #3
 8010540:	701a      	strb	r2, [r3, #0]
 8010542:	e001      	b.n	8010548 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010544:	2317      	movs	r3, #23
 8010546:	e000      	b.n	801054a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010548:	2300      	movs	r3, #0
}
 801054a:	4618      	mov	r0, r3
 801054c:	370c      	adds	r7, #12
 801054e:	46bd      	mov	sp, r7
 8010550:	bc80      	pop	{r7}
 8010552:	4770      	bx	lr

08010554 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8010554:	b480      	push	{r7}
 8010556:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8010558:	4b12      	ldr	r3, [pc, #72]	; (80105a4 <CheckRetransUnconfirmedUplink+0x50>)
 801055a:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 801055e:	4b12      	ldr	r3, [pc, #72]	; (80105a8 <CheckRetransUnconfirmedUplink+0x54>)
 8010560:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8010564:	429a      	cmp	r2, r3
 8010566:	d301      	bcc.n	801056c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8010568:	2301      	movs	r3, #1
 801056a:	e016      	b.n	801059a <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801056c:	4b0d      	ldr	r3, [pc, #52]	; (80105a4 <CheckRetransUnconfirmedUplink+0x50>)
 801056e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010572:	f003 0302 	and.w	r3, r3, #2
 8010576:	b2db      	uxtb	r3, r3
 8010578:	2b00      	cmp	r3, #0
 801057a:	d00d      	beq.n	8010598 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801057c:	4b0a      	ldr	r3, [pc, #40]	; (80105a8 <CheckRetransUnconfirmedUplink+0x54>)
 801057e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8010586:	2301      	movs	r3, #1
 8010588:	e007      	b.n	801059a <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801058a:	4b06      	ldr	r3, [pc, #24]	; (80105a4 <CheckRetransUnconfirmedUplink+0x50>)
 801058c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8010590:	2b00      	cmp	r3, #0
 8010592:	d101      	bne.n	8010598 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8010594:	2301      	movs	r3, #1
 8010596:	e000      	b.n	801059a <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	46bd      	mov	sp, r7
 801059e:	bc80      	pop	{r7}
 80105a0:	4770      	bx	lr
 80105a2:	bf00      	nop
 80105a4:	2000044c 	.word	0x2000044c
 80105a8:	20000954 	.word	0x20000954

080105ac <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80105ac:	b480      	push	{r7}
 80105ae:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80105b0:	4b0e      	ldr	r3, [pc, #56]	; (80105ec <CheckRetransConfirmedUplink+0x40>)
 80105b2:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 80105b6:	4b0d      	ldr	r3, [pc, #52]	; (80105ec <CheckRetransConfirmedUplink+0x40>)
 80105b8:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80105bc:	429a      	cmp	r2, r3
 80105be:	d301      	bcc.n	80105c4 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80105c0:	2301      	movs	r3, #1
 80105c2:	e00f      	b.n	80105e4 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80105c4:	4b09      	ldr	r3, [pc, #36]	; (80105ec <CheckRetransConfirmedUplink+0x40>)
 80105c6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80105ca:	f003 0302 	and.w	r3, r3, #2
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d006      	beq.n	80105e2 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80105d4:	4b05      	ldr	r3, [pc, #20]	; (80105ec <CheckRetransConfirmedUplink+0x40>)
 80105d6:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d001      	beq.n	80105e2 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80105de:	2301      	movs	r3, #1
 80105e0:	e000      	b.n	80105e4 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80105e2:	2300      	movs	r3, #0
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bc80      	pop	{r7}
 80105ea:	4770      	bx	lr
 80105ec:	2000044c 	.word	0x2000044c

080105f0 <StopRetransmission>:

static bool StopRetransmission( void )
{
 80105f0:	b480      	push	{r7}
 80105f2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80105f4:	4b1a      	ldr	r3, [pc, #104]	; (8010660 <StopRetransmission+0x70>)
 80105f6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80105fa:	f003 0302 	and.w	r3, r3, #2
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	2b00      	cmp	r3, #0
 8010602:	d009      	beq.n	8010618 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010604:	4b16      	ldr	r3, [pc, #88]	; (8010660 <StopRetransmission+0x70>)
 8010606:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801060a:	2b00      	cmp	r3, #0
 801060c:	d00e      	beq.n	801062c <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801060e:	4b14      	ldr	r3, [pc, #80]	; (8010660 <StopRetransmission+0x70>)
 8010610:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010614:	2b01      	cmp	r3, #1
 8010616:	d009      	beq.n	801062c <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010618:	4b12      	ldr	r3, [pc, #72]	; (8010664 <StopRetransmission+0x74>)
 801061a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801061e:	2b00      	cmp	r3, #0
 8010620:	d004      	beq.n	801062c <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8010622:	4b10      	ldr	r3, [pc, #64]	; (8010664 <StopRetransmission+0x74>)
 8010624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010626:	3301      	adds	r3, #1
 8010628:	4a0e      	ldr	r2, [pc, #56]	; (8010664 <StopRetransmission+0x74>)
 801062a:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801062c:	4b0c      	ldr	r3, [pc, #48]	; (8010660 <StopRetransmission+0x70>)
 801062e:	2200      	movs	r2, #0
 8010630:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8010634:	4b0a      	ldr	r3, [pc, #40]	; (8010660 <StopRetransmission+0x70>)
 8010636:	2200      	movs	r2, #0
 8010638:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 801063c:	4b08      	ldr	r3, [pc, #32]	; (8010660 <StopRetransmission+0x70>)
 801063e:	2200      	movs	r2, #0
 8010640:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010644:	4b06      	ldr	r3, [pc, #24]	; (8010660 <StopRetransmission+0x70>)
 8010646:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801064a:	f023 0302 	bic.w	r3, r3, #2
 801064e:	4a04      	ldr	r2, [pc, #16]	; (8010660 <StopRetransmission+0x70>)
 8010650:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8010654:	2301      	movs	r3, #1
}
 8010656:	4618      	mov	r0, r3
 8010658:	46bd      	mov	sp, r7
 801065a:	bc80      	pop	{r7}
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop
 8010660:	2000044c 	.word	0x2000044c
 8010664:	20000954 	.word	0x20000954

08010668 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	4603      	mov	r3, r0
 8010670:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010672:	4b0b      	ldr	r3, [pc, #44]	; (80106a0 <CallNvmDataChangeCallback+0x38>)
 8010674:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010678:	2b00      	cmp	r3, #0
 801067a:	d00c      	beq.n	8010696 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801067c:	4b08      	ldr	r3, [pc, #32]	; (80106a0 <CallNvmDataChangeCallback+0x38>)
 801067e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010682:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010684:	2b00      	cmp	r3, #0
 8010686:	d006      	beq.n	8010696 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010688:	4b05      	ldr	r3, [pc, #20]	; (80106a0 <CallNvmDataChangeCallback+0x38>)
 801068a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	88fa      	ldrh	r2, [r7, #6]
 8010692:	4610      	mov	r0, r2
 8010694:	4798      	blx	r3
    }
}
 8010696:	bf00      	nop
 8010698:	3708      	adds	r7, #8
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	2000044c 	.word	0x2000044c

080106a4 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80106aa:	4b1b      	ldr	r3, [pc, #108]	; (8010718 <AckTimeoutRetriesProcess+0x74>)
 80106ac:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80106b0:	4b19      	ldr	r3, [pc, #100]	; (8010718 <AckTimeoutRetriesProcess+0x74>)
 80106b2:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d229      	bcs.n	801070e <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 80106ba:	4b17      	ldr	r3, [pc, #92]	; (8010718 <AckTimeoutRetriesProcess+0x74>)
 80106bc:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80106c0:	3301      	adds	r3, #1
 80106c2:	b2da      	uxtb	r2, r3
 80106c4:	4b14      	ldr	r3, [pc, #80]	; (8010718 <AckTimeoutRetriesProcess+0x74>)
 80106c6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80106ca:	4b13      	ldr	r3, [pc, #76]	; (8010718 <AckTimeoutRetriesProcess+0x74>)
 80106cc:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80106d0:	f003 0301 	and.w	r3, r3, #1
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d019      	beq.n	801070e <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80106da:	2322      	movs	r3, #34	; 0x22
 80106dc:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80106de:	4b0f      	ldr	r3, [pc, #60]	; (801071c <AckTimeoutRetriesProcess+0x78>)
 80106e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80106e4:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80106e6:	4b0d      	ldr	r3, [pc, #52]	; (801071c <AckTimeoutRetriesProcess+0x78>)
 80106e8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80106ec:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80106ee:	4b0b      	ldr	r3, [pc, #44]	; (801071c <AckTimeoutRetriesProcess+0x78>)
 80106f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106f4:	f107 0208 	add.w	r2, r7, #8
 80106f8:	4611      	mov	r1, r2
 80106fa:	4618      	mov	r0, r3
 80106fc:	f003 fae2 	bl	8013cc4 <RegionGetPhyParam>
 8010700:	4603      	mov	r3, r0
 8010702:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	b25a      	sxtb	r2, r3
 8010708:	4b04      	ldr	r3, [pc, #16]	; (801071c <AckTimeoutRetriesProcess+0x78>)
 801070a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 801070e:	bf00      	nop
 8010710:	3710      	adds	r7, #16
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	2000044c 	.word	0x2000044c
 801071c:	20000954 	.word	0x20000954

08010720 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b084      	sub	sp, #16
 8010724:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8010726:	4b14      	ldr	r3, [pc, #80]	; (8010778 <AckTimeoutRetriesFinalize+0x58>)
 8010728:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 801072c:	f083 0301 	eor.w	r3, r3, #1
 8010730:	b2db      	uxtb	r3, r3
 8010732:	2b00      	cmp	r3, #0
 8010734:	d015      	beq.n	8010762 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010736:	2302      	movs	r3, #2
 8010738:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 801073a:	4b10      	ldr	r3, [pc, #64]	; (801077c <AckTimeoutRetriesFinalize+0x5c>)
 801073c:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 801073e:	4b10      	ldr	r3, [pc, #64]	; (8010780 <AckTimeoutRetriesFinalize+0x60>)
 8010740:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010742:	4b10      	ldr	r3, [pc, #64]	; (8010784 <AckTimeoutRetriesFinalize+0x64>)
 8010744:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010748:	1d3a      	adds	r2, r7, #4
 801074a:	4611      	mov	r1, r2
 801074c:	4618      	mov	r0, r3
 801074e:	f003 fae3 	bl	8013d18 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8010752:	4b09      	ldr	r3, [pc, #36]	; (8010778 <AckTimeoutRetriesFinalize+0x58>)
 8010754:	2200      	movs	r2, #0
 8010756:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 801075a:	4b07      	ldr	r3, [pc, #28]	; (8010778 <AckTimeoutRetriesFinalize+0x58>)
 801075c:	2200      	movs	r2, #0
 801075e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010762:	4b05      	ldr	r3, [pc, #20]	; (8010778 <AckTimeoutRetriesFinalize+0x58>)
 8010764:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010768:	4b03      	ldr	r3, [pc, #12]	; (8010778 <AckTimeoutRetriesFinalize+0x58>)
 801076a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 801076e:	bf00      	nop
 8010770:	3710      	adds	r7, #16
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop
 8010778:	2000044c 	.word	0x2000044c
 801077c:	20000b2c 	.word	0x20000b2c
 8010780:	20000bc0 	.word	0x20000bc0
 8010784:	20000954 	.word	0x20000954

08010788 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8010788:	b480      	push	{r7}
 801078a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801078c:	4b0b      	ldr	r3, [pc, #44]	; (80107bc <IsRequestPending+0x34>)
 801078e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010792:	f003 0304 	and.w	r3, r3, #4
 8010796:	b2db      	uxtb	r3, r3
 8010798:	2b00      	cmp	r3, #0
 801079a:	d107      	bne.n	80107ac <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 801079c:	4b07      	ldr	r3, [pc, #28]	; (80107bc <IsRequestPending+0x34>)
 801079e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80107a2:	f003 0301 	and.w	r3, r3, #1
 80107a6:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d001      	beq.n	80107b0 <IsRequestPending+0x28>
    {
        return 1;
 80107ac:	2301      	movs	r3, #1
 80107ae:	e000      	b.n	80107b2 <IsRequestPending+0x2a>
    }
    return 0;
 80107b0:	2300      	movs	r3, #0
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bc80      	pop	{r7}
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	2000044c 	.word	0x2000044c

080107c0 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80107c0:	b590      	push	{r4, r7, lr}
 80107c2:	b08f      	sub	sp, #60	; 0x3c
 80107c4:	af02      	add	r7, sp, #8
 80107c6:	6178      	str	r0, [r7, #20]
 80107c8:	6139      	str	r1, [r7, #16]
 80107ca:	4613      	mov	r3, r2
 80107cc:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d002      	beq.n	80107da <LoRaMacInitialization+0x1a>
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d101      	bne.n	80107de <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80107da:	2303      	movs	r3, #3
 80107dc:	e275      	b.n	8010cca <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d00b      	beq.n	80107fe <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d007      	beq.n	80107fe <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d003      	beq.n	80107fe <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d101      	bne.n	8010802 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80107fe:	2303      	movs	r3, #3
 8010800:	e263      	b.n	8010cca <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010802:	7bfb      	ldrb	r3, [r7, #15]
 8010804:	4618      	mov	r0, r3
 8010806:	f003 fa4d 	bl	8013ca4 <RegionIsActive>
 801080a:	4603      	mov	r3, r0
 801080c:	f083 0301 	eor.w	r3, r3, #1
 8010810:	b2db      	uxtb	r3, r3
 8010812:	2b00      	cmp	r3, #0
 8010814:	d001      	beq.n	801081a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010816:	2309      	movs	r3, #9
 8010818:	e257      	b.n	8010cca <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801081a:	6978      	ldr	r0, [r7, #20]
 801081c:	f001 fef6 	bl	801260c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010820:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8010824:	2100      	movs	r1, #0
 8010826:	48c7      	ldr	r0, [pc, #796]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010828:	f005 fd92 	bl	8016350 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 801082c:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8010830:	2100      	movs	r1, #0
 8010832:	48c5      	ldr	r0, [pc, #788]	; (8010b48 <LoRaMacInitialization+0x388>)
 8010834:	f005 fd8c 	bl	8016350 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010838:	4bc3      	ldr	r3, [pc, #780]	; (8010b48 <LoRaMacInitialization+0x388>)
 801083a:	2201      	movs	r2, #1
 801083c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8010840:	4bc1      	ldr	r3, [pc, #772]	; (8010b48 <LoRaMacInitialization+0x388>)
 8010842:	2201      	movs	r2, #1
 8010844:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8010848:	4abe      	ldr	r2, [pc, #760]	; (8010b44 <LoRaMacInitialization+0x384>)
 801084a:	7bfb      	ldrb	r3, [r7, #15]
 801084c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010850:	4bbc      	ldr	r3, [pc, #752]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010852:	2200      	movs	r2, #0
 8010854:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010858:	4bba      	ldr	r3, [pc, #744]	; (8010b44 <LoRaMacInitialization+0x384>)
 801085a:	2200      	movs	r2, #0
 801085c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010860:	4bb8      	ldr	r3, [pc, #736]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010862:	4aba      	ldr	r2, [pc, #744]	; (8010b4c <LoRaMacInitialization+0x38c>)
 8010864:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010868:	230f      	movs	r3, #15
 801086a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801086e:	4bb5      	ldr	r3, [pc, #724]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010874:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010878:	4611      	mov	r1, r2
 801087a:	4618      	mov	r0, r3
 801087c:	f003 fa22 	bl	8013cc4 <RegionGetPhyParam>
 8010880:	4603      	mov	r3, r0
 8010882:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010886:	2b00      	cmp	r3, #0
 8010888:	bf14      	ite	ne
 801088a:	2301      	movne	r3, #1
 801088c:	2300      	moveq	r3, #0
 801088e:	b2da      	uxtb	r2, r3
 8010890:	4bac      	ldr	r3, [pc, #688]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010892:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010896:	230a      	movs	r3, #10
 8010898:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801089c:	4ba9      	ldr	r3, [pc, #676]	; (8010b44 <LoRaMacInitialization+0x384>)
 801089e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80108a6:	4611      	mov	r1, r2
 80108a8:	4618      	mov	r0, r3
 80108aa:	f003 fa0b 	bl	8013cc4 <RegionGetPhyParam>
 80108ae:	4603      	mov	r3, r0
 80108b0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80108b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b4:	b25a      	sxtb	r2, r3
 80108b6:	4ba3      	ldr	r3, [pc, #652]	; (8010b44 <LoRaMacInitialization+0x384>)
 80108b8:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 80108bc:	2306      	movs	r3, #6
 80108be:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80108c2:	4ba0      	ldr	r3, [pc, #640]	; (8010b44 <LoRaMacInitialization+0x384>)
 80108c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80108cc:	4611      	mov	r1, r2
 80108ce:	4618      	mov	r0, r3
 80108d0:	f003 f9f8 	bl	8013cc4 <RegionGetPhyParam>
 80108d4:	4603      	mov	r3, r0
 80108d6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80108d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108da:	b25a      	sxtb	r2, r3
 80108dc:	4b99      	ldr	r3, [pc, #612]	; (8010b44 <LoRaMacInitialization+0x384>)
 80108de:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80108e2:	2310      	movs	r3, #16
 80108e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80108e8:	4b96      	ldr	r3, [pc, #600]	; (8010b44 <LoRaMacInitialization+0x384>)
 80108ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80108f2:	4611      	mov	r1, r2
 80108f4:	4618      	mov	r0, r3
 80108f6:	f003 f9e5 	bl	8013cc4 <RegionGetPhyParam>
 80108fa:	4603      	mov	r3, r0
 80108fc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80108fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010900:	4a90      	ldr	r2, [pc, #576]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010902:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010906:	2311      	movs	r3, #17
 8010908:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801090c:	4b8d      	ldr	r3, [pc, #564]	; (8010b44 <LoRaMacInitialization+0x384>)
 801090e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010912:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010916:	4611      	mov	r1, r2
 8010918:	4618      	mov	r0, r3
 801091a:	f003 f9d3 	bl	8013cc4 <RegionGetPhyParam>
 801091e:	4603      	mov	r3, r0
 8010920:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010924:	4a87      	ldr	r2, [pc, #540]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801092a:	2312      	movs	r3, #18
 801092c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010930:	4b84      	ldr	r3, [pc, #528]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010936:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801093a:	4611      	mov	r1, r2
 801093c:	4618      	mov	r0, r3
 801093e:	f003 f9c1 	bl	8013cc4 <RegionGetPhyParam>
 8010942:	4603      	mov	r3, r0
 8010944:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010948:	4a7e      	ldr	r2, [pc, #504]	; (8010b44 <LoRaMacInitialization+0x384>)
 801094a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801094e:	2313      	movs	r3, #19
 8010950:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010954:	4b7b      	ldr	r3, [pc, #492]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801095a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801095e:	4611      	mov	r1, r2
 8010960:	4618      	mov	r0, r3
 8010962:	f003 f9af 	bl	8013cc4 <RegionGetPhyParam>
 8010966:	4603      	mov	r3, r0
 8010968:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096c:	4a75      	ldr	r2, [pc, #468]	; (8010b44 <LoRaMacInitialization+0x384>)
 801096e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010972:	2314      	movs	r3, #20
 8010974:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010978:	4b72      	ldr	r3, [pc, #456]	; (8010b44 <LoRaMacInitialization+0x384>)
 801097a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801097e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010982:	4611      	mov	r1, r2
 8010984:	4618      	mov	r0, r3
 8010986:	f003 f99d 	bl	8013cc4 <RegionGetPhyParam>
 801098a:	4603      	mov	r3, r0
 801098c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010990:	4a6c      	ldr	r2, [pc, #432]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010992:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010996:	2317      	movs	r3, #23
 8010998:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801099c:	4b69      	ldr	r3, [pc, #420]	; (8010b44 <LoRaMacInitialization+0x384>)
 801099e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109a6:	4611      	mov	r1, r2
 80109a8:	4618      	mov	r0, r3
 80109aa:	f003 f98b 	bl	8013cc4 <RegionGetPhyParam>
 80109ae:	4603      	mov	r3, r0
 80109b0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80109b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b4:	b2da      	uxtb	r2, r3
 80109b6:	4b63      	ldr	r3, [pc, #396]	; (8010b44 <LoRaMacInitialization+0x384>)
 80109b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80109bc:	2318      	movs	r3, #24
 80109be:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109c2:	4b60      	ldr	r3, [pc, #384]	; (8010b44 <LoRaMacInitialization+0x384>)
 80109c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109cc:	4611      	mov	r1, r2
 80109ce:	4618      	mov	r0, r3
 80109d0:	f003 f978 	bl	8013cc4 <RegionGetPhyParam>
 80109d4:	4603      	mov	r3, r0
 80109d6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80109d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109da:	4a5a      	ldr	r2, [pc, #360]	; (8010b44 <LoRaMacInitialization+0x384>)
 80109dc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80109e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e2:	4a58      	ldr	r2, [pc, #352]	; (8010b44 <LoRaMacInitialization+0x384>)
 80109e4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80109e8:	2319      	movs	r3, #25
 80109ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109ee:	4b55      	ldr	r3, [pc, #340]	; (8010b44 <LoRaMacInitialization+0x384>)
 80109f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109f8:	4611      	mov	r1, r2
 80109fa:	4618      	mov	r0, r3
 80109fc:	f003 f962 	bl	8013cc4 <RegionGetPhyParam>
 8010a00:	4603      	mov	r3, r0
 8010a02:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a06:	b2da      	uxtb	r2, r3
 8010a08:	4b4e      	ldr	r3, [pc, #312]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010a0a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a10:	b2da      	uxtb	r2, r3
 8010a12:	4b4c      	ldr	r3, [pc, #304]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010a14:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010a18:	231e      	movs	r3, #30
 8010a1a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a1e:	4b49      	ldr	r3, [pc, #292]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a28:	4611      	mov	r1, r2
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f003 f94a 	bl	8013cc4 <RegionGetPhyParam>
 8010a30:	4603      	mov	r3, r0
 8010a32:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a36:	b2da      	uxtb	r2, r3
 8010a38:	4b42      	ldr	r3, [pc, #264]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010a3a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010a3e:	231f      	movs	r3, #31
 8010a40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a44:	4b3f      	ldr	r3, [pc, #252]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a4e:	4611      	mov	r1, r2
 8010a50:	4618      	mov	r0, r3
 8010a52:	f003 f937 	bl	8013cc4 <RegionGetPhyParam>
 8010a56:	4603      	mov	r3, r0
 8010a58:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5c:	b2da      	uxtb	r2, r3
 8010a5e:	4b39      	ldr	r3, [pc, #228]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010a60:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010a64:	2320      	movs	r3, #32
 8010a66:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a6a:	4b36      	ldr	r3, [pc, #216]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a70:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a74:	4611      	mov	r1, r2
 8010a76:	4618      	mov	r0, r3
 8010a78:	f003 f924 	bl	8013cc4 <RegionGetPhyParam>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a82:	4a30      	ldr	r2, [pc, #192]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010a84:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010a88:	2321      	movs	r3, #33	; 0x21
 8010a8a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a8e:	4b2d      	ldr	r3, [pc, #180]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010a90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a94:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a98:	4611      	mov	r1, r2
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f003 f912 	bl	8013cc4 <RegionGetPhyParam>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa6:	4a27      	ldr	r2, [pc, #156]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010aa8:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010aac:	230b      	movs	r3, #11
 8010aae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ab2:	4b24      	ldr	r3, [pc, #144]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ab8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010abc:	4611      	mov	r1, r2
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f003 f900 	bl	8013cc4 <RegionGetPhyParam>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aca:	b29a      	uxth	r2, r3
 8010acc:	4b1e      	ldr	r3, [pc, #120]	; (8010b48 <LoRaMacInitialization+0x388>)
 8010ace:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010ad2:	230c      	movs	r3, #12
 8010ad4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ad8:	4b1a      	ldr	r3, [pc, #104]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ade:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ae2:	4611      	mov	r1, r2
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f003 f8ed 	bl	8013cc4 <RegionGetPhyParam>
 8010aea:	4603      	mov	r3, r0
 8010aec:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8010aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	4b15      	ldr	r3, [pc, #84]	; (8010b48 <LoRaMacInitialization+0x388>)
 8010af4:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010af8:	4b12      	ldr	r3, [pc, #72]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010afa:	2201      	movs	r2, #1
 8010afc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010b00:	4b10      	ldr	r3, [pc, #64]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010b02:	220a      	movs	r2, #10
 8010b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010b08:	4b0e      	ldr	r3, [pc, #56]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010b0a:	2206      	movs	r2, #6
 8010b0c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010b10:	4b0c      	ldr	r3, [pc, #48]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b16:	4a0b      	ldr	r2, [pc, #44]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010b18:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010b1a:	4b0a      	ldr	r3, [pc, #40]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010b1c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010b20:	4b08      	ldr	r3, [pc, #32]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010b22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010b26:	4b07      	ldr	r3, [pc, #28]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b2c:	4a05      	ldr	r2, [pc, #20]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010b30:	4b04      	ldr	r3, [pc, #16]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b36:	4a03      	ldr	r2, [pc, #12]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010b38:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010b3a:	4b02      	ldr	r3, [pc, #8]	; (8010b44 <LoRaMacInitialization+0x384>)
 8010b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010b40:	e006      	b.n	8010b50 <LoRaMacInitialization+0x390>
 8010b42:	bf00      	nop
 8010b44:	20000954 	.word	0x20000954
 8010b48:	2000044c 	.word	0x2000044c
 8010b4c:	01000300 	.word	0x01000300
 8010b50:	4a60      	ldr	r2, [pc, #384]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010b52:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010b54:	4b5f      	ldr	r3, [pc, #380]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010b5a:	4a5e      	ldr	r2, [pc, #376]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010b5c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010b5e:	4b5d      	ldr	r3, [pc, #372]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010b60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010b64:	4a5b      	ldr	r2, [pc, #364]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010b66:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010b68:	4b5a      	ldr	r3, [pc, #360]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010b6a:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8010b6e:	4b59      	ldr	r3, [pc, #356]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010b70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010b74:	2300      	movs	r3, #0
 8010b76:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010b7a:	4b57      	ldr	r3, [pc, #348]	; (8010cd8 <LoRaMacInitialization+0x518>)
 8010b7c:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010b7e:	4b57      	ldr	r3, [pc, #348]	; (8010cdc <LoRaMacInitialization+0x51c>)
 8010b80:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010b82:	4b54      	ldr	r3, [pc, #336]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b88:	f107 0218 	add.w	r2, r7, #24
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f003 f8c2 	bl	8013d18 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8010b94:	4a52      	ldr	r2, [pc, #328]	; (8010ce0 <LoRaMacInitialization+0x520>)
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010b9c:	f7ff f85a 	bl	800fc54 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010ba0:	4b4c      	ldr	r3, [pc, #304]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8010ba8:	4a4d      	ldr	r2, [pc, #308]	; (8010ce0 <LoRaMacInitialization+0x520>)
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010bb0:	4b4b      	ldr	r3, [pc, #300]	; (8010ce0 <LoRaMacInitialization+0x520>)
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010bb8:	4b49      	ldr	r3, [pc, #292]	; (8010ce0 <LoRaMacInitialization+0x520>)
 8010bba:	2201      	movs	r2, #1
 8010bbc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010bc0:	4b44      	ldr	r3, [pc, #272]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010bc6:	4b43      	ldr	r3, [pc, #268]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010bc8:	2200      	movs	r2, #0
 8010bca:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010bcc:	2300      	movs	r3, #0
 8010bce:	9300      	str	r3, [sp, #0]
 8010bd0:	4b44      	ldr	r3, [pc, #272]	; (8010ce4 <LoRaMacInitialization+0x524>)
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8010bd8:	4843      	ldr	r0, [pc, #268]	; (8010ce8 <LoRaMacInitialization+0x528>)
 8010bda:	f009 f9eb 	bl	8019fb4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010bde:	2300      	movs	r3, #0
 8010be0:	9300      	str	r3, [sp, #0]
 8010be2:	4b42      	ldr	r3, [pc, #264]	; (8010cec <LoRaMacInitialization+0x52c>)
 8010be4:	2200      	movs	r2, #0
 8010be6:	f04f 31ff 	mov.w	r1, #4294967295
 8010bea:	4841      	ldr	r0, [pc, #260]	; (8010cf0 <LoRaMacInitialization+0x530>)
 8010bec:	f009 f9e2 	bl	8019fb4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	4b3f      	ldr	r3, [pc, #252]	; (8010cf4 <LoRaMacInitialization+0x534>)
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8010bfc:	483e      	ldr	r0, [pc, #248]	; (8010cf8 <LoRaMacInitialization+0x538>)
 8010bfe:	f009 f9d9 	bl	8019fb4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010c02:	2300      	movs	r3, #0
 8010c04:	9300      	str	r3, [sp, #0]
 8010c06:	4b3d      	ldr	r3, [pc, #244]	; (8010cfc <LoRaMacInitialization+0x53c>)
 8010c08:	2200      	movs	r2, #0
 8010c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8010c0e:	483c      	ldr	r0, [pc, #240]	; (8010d00 <LoRaMacInitialization+0x540>)
 8010c10:	f009 f9d0 	bl	8019fb4 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010c14:	4c2f      	ldr	r4, [pc, #188]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010c16:	463b      	mov	r3, r7
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f008 fe43 	bl	80198a4 <SysTimeGetMcuTime>
 8010c1e:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8010c22:	463a      	mov	r2, r7
 8010c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c28:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010c2c:	4b2c      	ldr	r3, [pc, #176]	; (8010ce0 <LoRaMacInitialization+0x520>)
 8010c2e:	4a35      	ldr	r2, [pc, #212]	; (8010d04 <LoRaMacInitialization+0x544>)
 8010c30:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010c34:	4b2a      	ldr	r3, [pc, #168]	; (8010ce0 <LoRaMacInitialization+0x520>)
 8010c36:	4a34      	ldr	r2, [pc, #208]	; (8010d08 <LoRaMacInitialization+0x548>)
 8010c38:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010c3c:	4b28      	ldr	r3, [pc, #160]	; (8010ce0 <LoRaMacInitialization+0x520>)
 8010c3e:	4a33      	ldr	r2, [pc, #204]	; (8010d0c <LoRaMacInitialization+0x54c>)
 8010c40:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010c44:	4b26      	ldr	r3, [pc, #152]	; (8010ce0 <LoRaMacInitialization+0x520>)
 8010c46:	4a32      	ldr	r2, [pc, #200]	; (8010d10 <LoRaMacInitialization+0x550>)
 8010c48:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010c4c:	4b24      	ldr	r3, [pc, #144]	; (8010ce0 <LoRaMacInitialization+0x520>)
 8010c4e:	4a31      	ldr	r2, [pc, #196]	; (8010d14 <LoRaMacInitialization+0x554>)
 8010c50:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010c54:	4b30      	ldr	r3, [pc, #192]	; (8010d18 <LoRaMacInitialization+0x558>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4830      	ldr	r0, [pc, #192]	; (8010d1c <LoRaMacInitialization+0x55c>)
 8010c5a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	689b      	ldr	r3, [r3, #8]
 8010c60:	4619      	mov	r1, r3
 8010c62:	482f      	ldr	r0, [pc, #188]	; (8010d20 <LoRaMacInitialization+0x560>)
 8010c64:	f7fa ff3e 	bl	800bae4 <SecureElementInit>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010c6e:	2311      	movs	r3, #17
 8010c70:	e02b      	b.n	8010cca <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010c72:	4818      	ldr	r0, [pc, #96]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010c74:	f002 f950 	bl	8012f18 <LoRaMacCryptoInit>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d001      	beq.n	8010c82 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010c7e:	2311      	movs	r3, #17
 8010c80:	e023      	b.n	8010cca <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010c82:	f001 fa95 	bl	80121b0 <LoRaMacCommandsInit>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d001      	beq.n	8010c90 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c8c:	2313      	movs	r3, #19
 8010c8e:	e01c      	b.n	8010cca <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8010c90:	4824      	ldr	r0, [pc, #144]	; (8010d24 <LoRaMacInitialization+0x564>)
 8010c92:	f002 f9ff 	bl	8013094 <LoRaMacCryptoSetMulticastReference>
 8010c96:	4603      	mov	r3, r0
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d001      	beq.n	8010ca0 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010c9c:	2311      	movs	r3, #17
 8010c9e:	e014      	b.n	8010cca <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010ca0:	4b1d      	ldr	r3, [pc, #116]	; (8010d18 <LoRaMacInitialization+0x558>)
 8010ca2:	695b      	ldr	r3, [r3, #20]
 8010ca4:	4798      	blx	r3
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f005 faf1 	bl	8016290 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010cae:	4b1a      	ldr	r3, [pc, #104]	; (8010d18 <LoRaMacInitialization+0x558>)
 8010cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cb2:	4a08      	ldr	r2, [pc, #32]	; (8010cd4 <LoRaMacInitialization+0x514>)
 8010cb4:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8010cb8:	4610      	mov	r0, r2
 8010cba:	4798      	blx	r3
    Radio.Sleep( );
 8010cbc:	4b16      	ldr	r3, [pc, #88]	; (8010d18 <LoRaMacInitialization+0x558>)
 8010cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cc0:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010cc2:	2001      	movs	r0, #1
 8010cc4:	f7fd faaa 	bl	800e21c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010cc8:	2300      	movs	r3, #0
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3734      	adds	r7, #52	; 0x34
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd90      	pop	{r4, r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	20000954 	.word	0x20000954
 8010cd8:	20000b2c 	.word	0x20000b2c
 8010cdc:	20000bc0 	.word	0x20000bc0
 8010ce0:	2000044c 	.word	0x2000044c
 8010ce4:	0800e7a5 	.word	0x0800e7a5
 8010ce8:	200007b4 	.word	0x200007b4
 8010cec:	0800e819 	.word	0x0800e819
 8010cf0:	200007cc 	.word	0x200007cc
 8010cf4:	0800e885 	.word	0x0800e885
 8010cf8:	200007e4 	.word	0x200007e4
 8010cfc:	0800e8f9 	.word	0x0800e8f9
 8010d00:	20000844 	.word	0x20000844
 8010d04:	0800d3a9 	.word	0x0800d3a9
 8010d08:	0800d421 	.word	0x0800d421
 8010d0c:	0800d4f9 	.word	0x0800d4f9
 8010d10:	0800d4ad 	.word	0x0800d4ad
 8010d14:	0800d535 	.word	0x0800d535
 8010d18:	0801b848 	.word	0x0801b848
 8010d1c:	20000798 	.word	0x20000798
 8010d20:	20000a6c 	.word	0x20000a6c
 8010d24:	20000a24 	.word	0x20000a24

08010d28 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010d28:	b480      	push	{r7}
 8010d2a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8010d2c:	4b04      	ldr	r3, [pc, #16]	; (8010d40 <LoRaMacStart+0x18>)
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8010d34:	2300      	movs	r3, #0
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bc80      	pop	{r7}
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	2000044c 	.word	0x2000044c

08010d44 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b08a      	sub	sp, #40	; 0x28
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	6039      	str	r1, [r7, #0]
 8010d4e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010d50:	4b3e      	ldr	r3, [pc, #248]	; (8010e4c <LoRaMacQueryTxPossible+0x108>)
 8010d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d54:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010d56:	4b3d      	ldr	r3, [pc, #244]	; (8010e4c <LoRaMacQueryTxPossible+0x108>)
 8010d58:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8010d5c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010d5e:	4b3b      	ldr	r3, [pc, #236]	; (8010e4c <LoRaMacQueryTxPossible+0x108>)
 8010d60:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8010d64:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 8010d66:	2300      	movs	r3, #0
 8010d68:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d101      	bne.n	8010d74 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010d70:	2303      	movs	r3, #3
 8010d72:	e066      	b.n	8010e42 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8010d74:	4b35      	ldr	r3, [pc, #212]	; (8010e4c <LoRaMacQueryTxPossible+0x108>)
 8010d76:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010d7a:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010d80:	4b32      	ldr	r3, [pc, #200]	; (8010e4c <LoRaMacQueryTxPossible+0x108>)
 8010d82:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010d86:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010d88:	4b30      	ldr	r3, [pc, #192]	; (8010e4c <LoRaMacQueryTxPossible+0x108>)
 8010d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d8c:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010d8e:	4b30      	ldr	r3, [pc, #192]	; (8010e50 <LoRaMacQueryTxPossible+0x10c>)
 8010d90:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010d94:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010d96:	4b2e      	ldr	r3, [pc, #184]	; (8010e50 <LoRaMacQueryTxPossible+0x10c>)
 8010d98:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010d9c:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010d9e:	4b2b      	ldr	r3, [pc, #172]	; (8010e4c <LoRaMacQueryTxPossible+0x108>)
 8010da0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010da4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010da8:	4b28      	ldr	r3, [pc, #160]	; (8010e4c <LoRaMacQueryTxPossible+0x108>)
 8010daa:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010dae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010db2:	4b26      	ldr	r3, [pc, #152]	; (8010e4c <LoRaMacQueryTxPossible+0x108>)
 8010db4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010db8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010dbc:	4b23      	ldr	r3, [pc, #140]	; (8010e4c <LoRaMacQueryTxPossible+0x108>)
 8010dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010dc6:	f107 0310 	add.w	r3, r7, #16
 8010dca:	f107 020e 	add.w	r2, r7, #14
 8010dce:	f107 010f 	add.w	r1, r7, #15
 8010dd2:	f107 0014 	add.w	r0, r7, #20
 8010dd6:	f000 ffe1 	bl	8011d9c <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dde:	4618      	mov	r0, r3
 8010de0:	f7fd fed2 	bl	800eb88 <GetMaxAppPayloadWithoutFOptsLength>
 8010de4:	4603      	mov	r3, r0
 8010de6:	461a      	mov	r2, r3
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010dec:	f107 0308 	add.w	r3, r7, #8
 8010df0:	4618      	mov	r0, r3
 8010df2:	f001 faab 	bl	801234c <LoRaMacCommandsGetSizeSerializedCmds>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d001      	beq.n	8010e00 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010dfc:	2313      	movs	r3, #19
 8010dfe:	e020      	b.n	8010e42 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	2b0f      	cmp	r3, #15
 8010e04:	d819      	bhi.n	8010e3a <LoRaMacQueryTxPossible+0xf6>
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	785b      	ldrb	r3, [r3, #1]
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d313      	bcc.n	8010e3a <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	785a      	ldrb	r2, [r3, #1]
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	b2db      	uxtb	r3, r3
 8010e1a:	1ad3      	subs	r3, r2, r3
 8010e1c:	b2da      	uxtb	r2, r3
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	785b      	ldrb	r3, [r3, #1]
 8010e26:	4619      	mov	r1, r3
 8010e28:	79fa      	ldrb	r2, [r7, #7]
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	4413      	add	r3, r2
 8010e2e:	4299      	cmp	r1, r3
 8010e30:	d301      	bcc.n	8010e36 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8010e32:	2300      	movs	r3, #0
 8010e34:	e005      	b.n	8010e42 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010e36:	2308      	movs	r3, #8
 8010e38:	e003      	b.n	8010e42 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010e40:	2308      	movs	r3, #8
    }
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3728      	adds	r7, #40	; 0x28
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	20000954 	.word	0x20000954
 8010e50:	2000044c 	.word	0x2000044c

08010e54 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010e54:	b590      	push	{r4, r7, lr}
 8010e56:	b087      	sub	sp, #28
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d101      	bne.n	8010e6a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e66:	2303      	movs	r3, #3
 8010e68:	e14b      	b.n	8011102 <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	2b28      	cmp	r3, #40	; 0x28
 8010e70:	f200 8140 	bhi.w	80110f4 <LoRaMacMibGetRequestConfirm+0x2a0>
 8010e74:	a201      	add	r2, pc, #4	; (adr r2, 8010e7c <LoRaMacMibGetRequestConfirm+0x28>)
 8010e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e7a:	bf00      	nop
 8010e7c:	08010f21 	.word	0x08010f21
 8010e80:	08010f2d 	.word	0x08010f2d
 8010e84:	08010f39 	.word	0x08010f39
 8010e88:	08010f45 	.word	0x08010f45
 8010e8c:	08010f51 	.word	0x08010f51
 8010e90:	08010f5d 	.word	0x08010f5d
 8010e94:	08010f69 	.word	0x08010f69
 8010e98:	080110f5 	.word	0x080110f5
 8010e9c:	080110f5 	.word	0x080110f5
 8010ea0:	080110f5 	.word	0x080110f5
 8010ea4:	080110f5 	.word	0x080110f5
 8010ea8:	080110f5 	.word	0x080110f5
 8010eac:	080110f5 	.word	0x080110f5
 8010eb0:	080110f5 	.word	0x080110f5
 8010eb4:	080110f5 	.word	0x080110f5
 8010eb8:	08010f75 	.word	0x08010f75
 8010ebc:	08010f81 	.word	0x08010f81
 8010ec0:	08010f8d 	.word	0x08010f8d
 8010ec4:	08010faf 	.word	0x08010faf
 8010ec8:	08010fc1 	.word	0x08010fc1
 8010ecc:	08010fd3 	.word	0x08010fd3
 8010ed0:	08010fe5 	.word	0x08010fe5
 8010ed4:	08011019 	.word	0x08011019
 8010ed8:	08010ff7 	.word	0x08010ff7
 8010edc:	0801103b 	.word	0x0801103b
 8010ee0:	08011047 	.word	0x08011047
 8010ee4:	08011051 	.word	0x08011051
 8010ee8:	0801105b 	.word	0x0801105b
 8010eec:	08011065 	.word	0x08011065
 8010ef0:	0801106f 	.word	0x0801106f
 8010ef4:	08011079 	.word	0x08011079
 8010ef8:	08011085 	.word	0x08011085
 8010efc:	0801109d 	.word	0x0801109d
 8010f00:	08011091 	.word	0x08011091
 8010f04:	080110a9 	.word	0x080110a9
 8010f08:	080110b3 	.word	0x080110b3
 8010f0c:	080110bf 	.word	0x080110bf
 8010f10:	080110d5 	.word	0x080110d5
 8010f14:	080110c9 	.word	0x080110c9
 8010f18:	080110f5 	.word	0x080110f5
 8010f1c:	080110e1 	.word	0x080110e1
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8010f20:	4b7a      	ldr	r3, [pc, #488]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010f22:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	711a      	strb	r2, [r3, #4]
            break;
 8010f2a:	e0e9      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010f2c:	4b77      	ldr	r3, [pc, #476]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010f2e:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	711a      	strb	r2, [r3, #4]
            break;
 8010f36:	e0e3      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8010f38:	f7fb f88e 	bl	800c058 <SecureElementGetDevEui>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	605a      	str	r2, [r3, #4]
            break;
 8010f42:	e0dd      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8010f44:	f7fb f8aa 	bl	800c09c <SecureElementGetJoinEui>
 8010f48:	4602      	mov	r2, r0
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	605a      	str	r2, [r3, #4]
            break;
 8010f4e:	e0d7      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8010f50:	4b6e      	ldr	r3, [pc, #440]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010f52:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	711a      	strb	r2, [r3, #4]
            break;
 8010f5a:	e0d1      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8010f5c:	4b6b      	ldr	r3, [pc, #428]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010f5e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	605a      	str	r2, [r3, #4]
            break;
 8010f66:	e0cb      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8010f68:	4b68      	ldr	r3, [pc, #416]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010f6a:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	605a      	str	r2, [r3, #4]
            break;
 8010f72:	e0c5      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8010f74:	4b65      	ldr	r3, [pc, #404]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010f76:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	711a      	strb	r2, [r3, #4]
            break;
 8010f7e:	e0bf      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010f80:	4b62      	ldr	r3, [pc, #392]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010f82:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	711a      	strb	r2, [r3, #4]
            break;
 8010f8a:	e0b9      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8010f8c:	231d      	movs	r3, #29
 8010f8e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f90:	4b5e      	ldr	r3, [pc, #376]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f96:	f107 0210 	add.w	r2, r7, #16
 8010f9a:	4611      	mov	r1, r2
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f002 fe91 	bl	8013cc4 <RegionGetPhyParam>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8010fa6:	68fa      	ldr	r2, [r7, #12]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	605a      	str	r2, [r3, #4]
            break;
 8010fac:	e0a8      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	4a56      	ldr	r2, [pc, #344]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010fb2:	3304      	adds	r3, #4
 8010fb4:	3264      	adds	r2, #100	; 0x64
 8010fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fba:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010fbe:	e09f      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	4a52      	ldr	r2, [pc, #328]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010fc4:	3304      	adds	r3, #4
 8010fc6:	32a4      	adds	r2, #164	; 0xa4
 8010fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fcc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010fd0:	e096      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	4a4d      	ldr	r2, [pc, #308]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010fd6:	3304      	adds	r3, #4
 8010fd8:	326c      	adds	r2, #108	; 0x6c
 8010fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fde:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010fe2:	e08d      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	4a49      	ldr	r2, [pc, #292]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010fe8:	3304      	adds	r3, #4
 8010fea:	32ac      	adds	r2, #172	; 0xac
 8010fec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ff0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010ff4:	e084      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8010ff6:	231b      	movs	r3, #27
 8010ff8:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ffa:	4b44      	ldr	r3, [pc, #272]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011000:	f107 0210 	add.w	r2, r7, #16
 8011004:	4611      	mov	r1, r2
 8011006:	4618      	mov	r0, r3
 8011008:	f002 fe5c 	bl	8013cc4 <RegionGetPhyParam>
 801100c:	4603      	mov	r3, r0
 801100e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011010:	68fa      	ldr	r2, [r7, #12]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	605a      	str	r2, [r3, #4]
            break;
 8011016:	e073      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011018:	231a      	movs	r3, #26
 801101a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801101c:	4b3b      	ldr	r3, [pc, #236]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801101e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011022:	f107 0210 	add.w	r2, r7, #16
 8011026:	4611      	mov	r1, r2
 8011028:	4618      	mov	r0, r3
 801102a:	f002 fe4b 	bl	8013cc4 <RegionGetPhyParam>
 801102e:	4603      	mov	r3, r0
 8011030:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011032:	68fa      	ldr	r2, [r7, #12]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	605a      	str	r2, [r3, #4]
            break;
 8011038:	e062      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801103a:	4b34      	ldr	r3, [pc, #208]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801103c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	711a      	strb	r2, [r3, #4]
            break;
 8011044:	e05c      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011046:	4b31      	ldr	r3, [pc, #196]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	605a      	str	r2, [r3, #4]
            break;
 801104e:	e057      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011050:	4b2e      	ldr	r3, [pc, #184]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	605a      	str	r2, [r3, #4]
            break;
 8011058:	e052      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801105a:	4b2c      	ldr	r3, [pc, #176]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801105c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	605a      	str	r2, [r3, #4]
            break;
 8011062:	e04d      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011064:	4b29      	ldr	r3, [pc, #164]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011066:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	605a      	str	r2, [r3, #4]
            break;
 801106c:	e048      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801106e:	4b27      	ldr	r3, [pc, #156]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011070:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	605a      	str	r2, [r3, #4]
            break;
 8011076:	e043      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011078:	4b24      	ldr	r3, [pc, #144]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801107a:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	711a      	strb	r2, [r3, #4]
            break;
 8011082:	e03d      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011084:	4b21      	ldr	r3, [pc, #132]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011086:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	711a      	strb	r2, [r3, #4]
            break;
 801108e:	e037      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011090:	4b1e      	ldr	r3, [pc, #120]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011092:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	711a      	strb	r2, [r3, #4]
            break;
 801109a:	e031      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801109c:	4b1b      	ldr	r3, [pc, #108]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801109e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	711a      	strb	r2, [r3, #4]
            break;
 80110a6:	e02b      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80110a8:	4b18      	ldr	r3, [pc, #96]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	605a      	str	r2, [r3, #4]
            break;
 80110b0:	e026      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80110b2:	4b16      	ldr	r3, [pc, #88]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110b4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	711a      	strb	r2, [r3, #4]
            break;
 80110bc:	e020      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80110be:	4b13      	ldr	r3, [pc, #76]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110c0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	605a      	str	r2, [r3, #4]
            break;
 80110c6:	e01b      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 80110c8:	f7ff f934 	bl	8010334 <GetNvmData>
 80110cc:	4602      	mov	r2, r0
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	605a      	str	r2, [r3, #4]
            break;
 80110d2:	e015      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80110d4:	4b0d      	ldr	r3, [pc, #52]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110d6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	605a      	str	r2, [r3, #4]
            break;
 80110de:	e00f      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	4a0a      	ldr	r2, [pc, #40]	; (801110c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110e4:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80110e8:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80110ea:	687c      	ldr	r4, [r7, #4]
 80110ec:	f002 ff74 	bl	8013fd8 <RegionGetVersion>
 80110f0:	60a0      	str	r0, [r4, #8]
            break;
 80110f2:	e005      	b.n	8011100 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f000 fefd 	bl	8011ef4 <LoRaMacClassBMibGetRequestConfirm>
 80110fa:	4603      	mov	r3, r0
 80110fc:	75fb      	strb	r3, [r7, #23]
            break;
 80110fe:	bf00      	nop
        }
    }
    return status;
 8011100:	7dfb      	ldrb	r3, [r7, #23]
}
 8011102:	4618      	mov	r0, r3
 8011104:	371c      	adds	r7, #28
 8011106:	46bd      	mov	sp, r7
 8011108:	bd90      	pop	{r4, r7, pc}
 801110a:	bf00      	nop
 801110c:	20000954 	.word	0x20000954

08011110 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b086      	sub	sp, #24
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011118:	2300      	movs	r3, #0
 801111a:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d101      	bne.n	8011126 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011122:	2303      	movs	r3, #3
 8011124:	e32b      	b.n	801177e <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011126:	4bbe      	ldr	r3, [pc, #760]	; (8011420 <LoRaMacMibSetRequestConfirm+0x310>)
 8011128:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801112c:	f003 0302 	and.w	r3, r3, #2
 8011130:	2b00      	cmp	r3, #0
 8011132:	d001      	beq.n	8011138 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011134:	2301      	movs	r3, #1
 8011136:	e322      	b.n	801177e <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	2b27      	cmp	r3, #39	; 0x27
 801113e:	f200 82fc 	bhi.w	801173a <LoRaMacMibSetRequestConfirm+0x62a>
 8011142:	a201      	add	r2, pc, #4	; (adr r2, 8011148 <LoRaMacMibSetRequestConfirm+0x38>)
 8011144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011148:	080111e9 	.word	0x080111e9
 801114c:	080111f9 	.word	0x080111f9
 8011150:	08011213 	.word	0x08011213
 8011154:	0801122b 	.word	0x0801122b
 8011158:	08011243 	.word	0x08011243
 801115c:	0801124f 	.word	0x0801124f
 8011160:	0801125b 	.word	0x0801125b
 8011164:	08011267 	.word	0x08011267
 8011168:	0801128d 	.word	0x0801128d
 801116c:	080112b3 	.word	0x080112b3
 8011170:	080112d9 	.word	0x080112d9
 8011174:	080112ff 	.word	0x080112ff
 8011178:	08011325 	.word	0x08011325
 801117c:	0801134b 	.word	0x0801134b
 8011180:	08011371 	.word	0x08011371
 8011184:	08011397 	.word	0x08011397
 8011188:	080113b7 	.word	0x080113b7
 801118c:	0801173b 	.word	0x0801173b
 8011190:	080113c3 	.word	0x080113c3
 8011194:	0801143f 	.word	0x0801143f
 8011198:	0801147f 	.word	0x0801147f
 801119c:	080114e1 	.word	0x080114e1
 80111a0:	08011551 	.word	0x08011551
 80111a4:	08011521 	.word	0x08011521
 80111a8:	08011581 	.word	0x08011581
 80111ac:	080115a3 	.word	0x080115a3
 80111b0:	080115ad 	.word	0x080115ad
 80111b4:	080115b7 	.word	0x080115b7
 80111b8:	080115c1 	.word	0x080115c1
 80111bc:	080115cb 	.word	0x080115cb
 80111c0:	080115d5 	.word	0x080115d5
 80111c4:	08011607 	.word	0x08011607
 80111c8:	08011673 	.word	0x08011673
 80111cc:	08011641 	.word	0x08011641
 80111d0:	080116a5 	.word	0x080116a5
 80111d4:	080116bb 	.word	0x080116bb
 80111d8:	080116d3 	.word	0x080116d3
 80111dc:	080116dd 	.word	0x080116dd
 80111e0:	080116e9 	.word	0x080116e9
 80111e4:	08011711 	.word	0x08011711
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	791b      	ldrb	r3, [r3, #4]
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7fd fbfb 	bl	800e9e8 <SwitchClass>
 80111f2:	4603      	mov	r3, r0
 80111f4:	75fb      	strb	r3, [r7, #23]
            break;
 80111f6:	e2c1      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	791b      	ldrb	r3, [r3, #4]
 80111fc:	2b02      	cmp	r3, #2
 80111fe:	d005      	beq.n	801120c <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	791a      	ldrb	r2, [r3, #4]
 8011204:	4b87      	ldr	r3, [pc, #540]	; (8011424 <LoRaMacMibSetRequestConfirm+0x314>)
 8011206:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801120a:	e2b7      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801120c:	2303      	movs	r3, #3
 801120e:	75fb      	strb	r3, [r7, #23]
            break;
 8011210:	e2b4      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	4618      	mov	r0, r3
 8011218:	f7fa ff06 	bl	800c028 <SecureElementSetDevEui>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	f000 8291 	beq.w	8011746 <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011224:	2303      	movs	r3, #3
 8011226:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011228:	e28d      	b.n	8011746 <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	4618      	mov	r0, r3
 8011230:	f7fa ff1c 	bl	800c06c <SecureElementSetJoinEui>
 8011234:	4603      	mov	r3, r0
 8011236:	2b00      	cmp	r3, #0
 8011238:	f000 8287 	beq.w	801174a <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801123c:	2303      	movs	r3, #3
 801123e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011240:	e283      	b.n	801174a <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	791a      	ldrb	r2, [r3, #4]
 8011246:	4b77      	ldr	r3, [pc, #476]	; (8011424 <LoRaMacMibSetRequestConfirm+0x314>)
 8011248:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 801124c:	e296      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	4a74      	ldr	r2, [pc, #464]	; (8011424 <LoRaMacMibSetRequestConfirm+0x314>)
 8011254:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 8011258:	e290      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	4a71      	ldr	r2, [pc, #452]	; (8011424 <LoRaMacMibSetRequestConfirm+0x314>)
 8011260:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8011264:	e28a      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d00b      	beq.n	8011286 <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	685b      	ldr	r3, [r3, #4]
 8011272:	4619      	mov	r1, r3
 8011274:	2000      	movs	r0, #0
 8011276:	f001 ff35 	bl	80130e4 <LoRaMacCryptoSetKey>
 801127a:	4603      	mov	r3, r0
 801127c:	2b00      	cmp	r3, #0
 801127e:	f000 8266 	beq.w	801174e <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011282:	2311      	movs	r3, #17
 8011284:	e27b      	b.n	801177e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011286:	2303      	movs	r3, #3
 8011288:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801128a:	e260      	b.n	801174e <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d00b      	beq.n	80112ac <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	685b      	ldr	r3, [r3, #4]
 8011298:	4619      	mov	r1, r3
 801129a:	2001      	movs	r0, #1
 801129c:	f001 ff22 	bl	80130e4 <LoRaMacCryptoSetKey>
 80112a0:	4603      	mov	r3, r0
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	f000 8255 	beq.w	8011752 <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80112a8:	2311      	movs	r3, #17
 80112aa:	e268      	b.n	801177e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112ac:	2303      	movs	r3, #3
 80112ae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80112b0:	e24f      	b.n	8011752 <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	685b      	ldr	r3, [r3, #4]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d00b      	beq.n	80112d2 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	4619      	mov	r1, r3
 80112c0:	2002      	movs	r0, #2
 80112c2:	f001 ff0f 	bl	80130e4 <LoRaMacCryptoSetKey>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f000 8244 	beq.w	8011756 <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80112ce:	2311      	movs	r3, #17
 80112d0:	e255      	b.n	801177e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112d2:	2303      	movs	r3, #3
 80112d4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80112d6:	e23e      	b.n	8011756 <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d00b      	beq.n	80112f8 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	4619      	mov	r1, r3
 80112e6:	2003      	movs	r0, #3
 80112e8:	f001 fefc 	bl	80130e4 <LoRaMacCryptoSetKey>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	f000 8233 	beq.w	801175a <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80112f4:	2311      	movs	r3, #17
 80112f6:	e242      	b.n	801177e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112f8:	2303      	movs	r3, #3
 80112fa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80112fc:	e22d      	b.n	801175a <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d00b      	beq.n	801131e <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	4619      	mov	r1, r3
 801130c:	207f      	movs	r0, #127	; 0x7f
 801130e:	f001 fee9 	bl	80130e4 <LoRaMacCryptoSetKey>
 8011312:	4603      	mov	r3, r0
 8011314:	2b00      	cmp	r3, #0
 8011316:	f000 8222 	beq.w	801175e <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801131a:	2311      	movs	r3, #17
 801131c:	e22f      	b.n	801177e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801131e:	2303      	movs	r3, #3
 8011320:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011322:	e21c      	b.n	801175e <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d00b      	beq.n	8011344 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	685b      	ldr	r3, [r3, #4]
 8011330:	4619      	mov	r1, r3
 8011332:	2080      	movs	r0, #128	; 0x80
 8011334:	f001 fed6 	bl	80130e4 <LoRaMacCryptoSetKey>
 8011338:	4603      	mov	r3, r0
 801133a:	2b00      	cmp	r3, #0
 801133c:	f000 8211 	beq.w	8011762 <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011340:	2311      	movs	r3, #17
 8011342:	e21c      	b.n	801177e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011344:	2303      	movs	r3, #3
 8011346:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011348:	e20b      	b.n	8011762 <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d00b      	beq.n	801136a <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	4619      	mov	r1, r3
 8011358:	2081      	movs	r0, #129	; 0x81
 801135a:	f001 fec3 	bl	80130e4 <LoRaMacCryptoSetKey>
 801135e:	4603      	mov	r3, r0
 8011360:	2b00      	cmp	r3, #0
 8011362:	f000 8200 	beq.w	8011766 <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011366:	2311      	movs	r3, #17
 8011368:	e209      	b.n	801177e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801136a:	2303      	movs	r3, #3
 801136c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801136e:	e1fa      	b.n	8011766 <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	685b      	ldr	r3, [r3, #4]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d00b      	beq.n	8011390 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	685b      	ldr	r3, [r3, #4]
 801137c:	4619      	mov	r1, r3
 801137e:	2082      	movs	r0, #130	; 0x82
 8011380:	f001 feb0 	bl	80130e4 <LoRaMacCryptoSetKey>
 8011384:	4603      	mov	r3, r0
 8011386:	2b00      	cmp	r3, #0
 8011388:	f000 81ef 	beq.w	801176a <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801138c:	2311      	movs	r3, #17
 801138e:	e1f6      	b.n	801177e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011390:	2303      	movs	r3, #3
 8011392:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011394:	e1e9      	b.n	801176a <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	791a      	ldrb	r2, [r3, #4]
 801139a:	4b22      	ldr	r3, [pc, #136]	; (8011424 <LoRaMacMibSetRequestConfirm+0x314>)
 801139c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80113a0:	4b21      	ldr	r3, [pc, #132]	; (8011428 <LoRaMacMibSetRequestConfirm+0x318>)
 80113a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113a4:	4a1f      	ldr	r2, [pc, #124]	; (8011424 <LoRaMacMibSetRequestConfirm+0x314>)
 80113a6:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 80113aa:	4610      	mov	r0, r2
 80113ac:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80113ae:	4b1e      	ldr	r3, [pc, #120]	; (8011428 <LoRaMacMibSetRequestConfirm+0x318>)
 80113b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b2:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80113b4:	e1e2      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	791a      	ldrb	r2, [r3, #4]
 80113ba:	4b1a      	ldr	r3, [pc, #104]	; (8011424 <LoRaMacMibSetRequestConfirm+0x314>)
 80113bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80113c0:	e1dc      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	7a1b      	ldrb	r3, [r3, #8]
 80113c6:	b25b      	sxtb	r3, r3
 80113c8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80113ca:	4b16      	ldr	r3, [pc, #88]	; (8011424 <LoRaMacMibSetRequestConfirm+0x314>)
 80113cc:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80113d0:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80113d2:	4b14      	ldr	r3, [pc, #80]	; (8011424 <LoRaMacMibSetRequestConfirm+0x314>)
 80113d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113d8:	f107 0108 	add.w	r1, r7, #8
 80113dc:	2207      	movs	r2, #7
 80113de:	4618      	mov	r0, r3
 80113e0:	f002 fcac 	bl	8013d3c <RegionVerify>
 80113e4:	4603      	mov	r3, r0
 80113e6:	f083 0301 	eor.w	r3, r3, #1
 80113ea:	b2db      	uxtb	r3, r3
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d002      	beq.n	80113f6 <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113f0:	2303      	movs	r3, #3
 80113f2:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80113f4:	e1c2      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80113fc:	4b09      	ldr	r3, [pc, #36]	; (8011424 <LoRaMacMibSetRequestConfirm+0x314>)
 80113fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011402:	f107 0108 	add.w	r1, r7, #8
 8011406:	2200      	movs	r2, #0
 8011408:	4618      	mov	r0, r3
 801140a:	f002 fc97 	bl	8013d3c <RegionVerify>
 801140e:	4603      	mov	r3, r0
 8011410:	f083 0301 	eor.w	r3, r3, #1
 8011414:	b2db      	uxtb	r3, r3
 8011416:	2b00      	cmp	r3, #0
 8011418:	d008      	beq.n	801142c <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801141a:	2303      	movs	r3, #3
 801141c:	75fb      	strb	r3, [r7, #23]
            break;
 801141e:	e1ad      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
 8011420:	2000044c 	.word	0x2000044c
 8011424:	20000954 	.word	0x20000954
 8011428:	0801b848 	.word	0x0801b848
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801142c:	4bb6      	ldr	r3, [pc, #728]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801142e:	687a      	ldr	r2, [r7, #4]
 8011430:	3364      	adds	r3, #100	; 0x64
 8011432:	3204      	adds	r2, #4
 8011434:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011438:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801143c:	e19e      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	7a1b      	ldrb	r3, [r3, #8]
 8011442:	b25b      	sxtb	r3, r3
 8011444:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011446:	4bb0      	ldr	r3, [pc, #704]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011448:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801144c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801144e:	4bae      	ldr	r3, [pc, #696]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011454:	f107 0108 	add.w	r1, r7, #8
 8011458:	2207      	movs	r2, #7
 801145a:	4618      	mov	r0, r3
 801145c:	f002 fc6e 	bl	8013d3c <RegionVerify>
 8011460:	4603      	mov	r3, r0
 8011462:	2b00      	cmp	r3, #0
 8011464:	d008      	beq.n	8011478 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011466:	4ba8      	ldr	r3, [pc, #672]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011468:	687a      	ldr	r2, [r7, #4]
 801146a:	33a4      	adds	r3, #164	; 0xa4
 801146c:	3204      	adds	r2, #4
 801146e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011472:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011476:	e181      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011478:	2303      	movs	r3, #3
 801147a:	75fb      	strb	r3, [r7, #23]
            break;
 801147c:	e17e      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	7a1b      	ldrb	r3, [r3, #8]
 8011482:	b25b      	sxtb	r3, r3
 8011484:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011486:	4ba0      	ldr	r3, [pc, #640]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011488:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801148c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801148e:	4b9e      	ldr	r3, [pc, #632]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011490:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011494:	f107 0108 	add.w	r1, r7, #8
 8011498:	2207      	movs	r2, #7
 801149a:	4618      	mov	r0, r3
 801149c:	f002 fc4e 	bl	8013d3c <RegionVerify>
 80114a0:	4603      	mov	r3, r0
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d019      	beq.n	80114da <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80114a6:	4b98      	ldr	r3, [pc, #608]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	336c      	adds	r3, #108	; 0x6c
 80114ac:	3204      	adds	r2, #4
 80114ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80114b2:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80114b6:	4b94      	ldr	r3, [pc, #592]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80114b8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80114bc:	2b02      	cmp	r3, #2
 80114be:	f040 8156 	bne.w	801176e <LoRaMacMibSetRequestConfirm+0x65e>
 80114c2:	4b91      	ldr	r3, [pc, #580]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80114c4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	f000 8150 	beq.w	801176e <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80114ce:	4b8f      	ldr	r3, [pc, #572]	; (801170c <LoRaMacMibSetRequestConfirm+0x5fc>)
 80114d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d2:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80114d4:	f7fe fcda 	bl	800fe8c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80114d8:	e149      	b.n	801176e <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114da:	2303      	movs	r3, #3
 80114dc:	75fb      	strb	r3, [r7, #23]
            break;
 80114de:	e146      	b.n	801176e <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	7a1b      	ldrb	r3, [r3, #8]
 80114e4:	b25b      	sxtb	r3, r3
 80114e6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80114e8:	4b87      	ldr	r3, [pc, #540]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80114ea:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80114ee:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80114f0:	4b85      	ldr	r3, [pc, #532]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80114f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114f6:	f107 0108 	add.w	r1, r7, #8
 80114fa:	2207      	movs	r2, #7
 80114fc:	4618      	mov	r0, r3
 80114fe:	f002 fc1d 	bl	8013d3c <RegionVerify>
 8011502:	4603      	mov	r3, r0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d008      	beq.n	801151a <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011508:	4b7f      	ldr	r3, [pc, #508]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	33ac      	adds	r3, #172	; 0xac
 801150e:	3204      	adds	r2, #4
 8011510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011514:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011518:	e130      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801151a:	2303      	movs	r3, #3
 801151c:	75fb      	strb	r3, [r7, #23]
            break;
 801151e:	e12d      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011526:	2301      	movs	r3, #1
 8011528:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801152a:	4b77      	ldr	r3, [pc, #476]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801152c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011530:	f107 020c 	add.w	r2, r7, #12
 8011534:	4611      	mov	r1, r2
 8011536:	4618      	mov	r0, r3
 8011538:	f002 fc29 	bl	8013d8e <RegionChanMaskSet>
 801153c:	4603      	mov	r3, r0
 801153e:	f083 0301 	eor.w	r3, r3, #1
 8011542:	b2db      	uxtb	r3, r3
 8011544:	2b00      	cmp	r3, #0
 8011546:	f000 8114 	beq.w	8011772 <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801154a:	2303      	movs	r3, #3
 801154c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801154e:	e110      	b.n	8011772 <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011556:	2300      	movs	r3, #0
 8011558:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801155a:	4b6b      	ldr	r3, [pc, #428]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801155c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011560:	f107 020c 	add.w	r2, r7, #12
 8011564:	4611      	mov	r1, r2
 8011566:	4618      	mov	r0, r3
 8011568:	f002 fc11 	bl	8013d8e <RegionChanMaskSet>
 801156c:	4603      	mov	r3, r0
 801156e:	f083 0301 	eor.w	r3, r3, #1
 8011572:	b2db      	uxtb	r3, r3
 8011574:	2b00      	cmp	r3, #0
 8011576:	f000 80fe 	beq.w	8011776 <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801157a:	2303      	movs	r3, #3
 801157c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801157e:	e0fa      	b.n	8011776 <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	791b      	ldrb	r3, [r3, #4]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d009      	beq.n	801159c <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801158c:	2b0f      	cmp	r3, #15
 801158e:	d805      	bhi.n	801159c <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	791a      	ldrb	r2, [r3, #4]
 8011594:	4b5c      	ldr	r3, [pc, #368]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011596:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801159a:	e0ef      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801159c:	2303      	movs	r3, #3
 801159e:	75fb      	strb	r3, [r7, #23]
            break;
 80115a0:	e0ec      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	4a58      	ldr	r2, [pc, #352]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115a8:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80115aa:	e0e7      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	4a55      	ldr	r2, [pc, #340]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115b2:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80115b4:	e0e2      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	685b      	ldr	r3, [r3, #4]
 80115ba:	4a53      	ldr	r2, [pc, #332]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115bc:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80115be:	e0dd      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	4a50      	ldr	r2, [pc, #320]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115c6:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80115c8:	e0d8      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	4a4e      	ldr	r2, [pc, #312]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115d0:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80115d2:	e0d3      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80115da:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80115dc:	4b4a      	ldr	r3, [pc, #296]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115e2:	f107 0108 	add.w	r1, r7, #8
 80115e6:	2206      	movs	r2, #6
 80115e8:	4618      	mov	r0, r3
 80115ea:	f002 fba7 	bl	8013d3c <RegionVerify>
 80115ee:	4603      	mov	r3, r0
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d005      	beq.n	8011600 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80115f4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80115f8:	4b43      	ldr	r3, [pc, #268]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115fa:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80115fe:	e0bd      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011600:	2303      	movs	r3, #3
 8011602:	75fb      	strb	r3, [r7, #23]
            break;
 8011604:	e0ba      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801160c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801160e:	4b3e      	ldr	r3, [pc, #248]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011610:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011614:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011616:	4b3c      	ldr	r3, [pc, #240]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011618:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801161c:	f107 0108 	add.w	r1, r7, #8
 8011620:	2205      	movs	r2, #5
 8011622:	4618      	mov	r0, r3
 8011624:	f002 fb8a 	bl	8013d3c <RegionVerify>
 8011628:	4603      	mov	r3, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	d005      	beq.n	801163a <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801162e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011632:	4b35      	ldr	r3, [pc, #212]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011638:	e0a0      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801163a:	2303      	movs	r3, #3
 801163c:	75fb      	strb	r3, [r7, #23]
            break;
 801163e:	e09d      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011646:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011648:	4b2f      	ldr	r3, [pc, #188]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801164a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801164e:	f107 0108 	add.w	r1, r7, #8
 8011652:	220a      	movs	r2, #10
 8011654:	4618      	mov	r0, r3
 8011656:	f002 fb71 	bl	8013d3c <RegionVerify>
 801165a:	4603      	mov	r3, r0
 801165c:	2b00      	cmp	r3, #0
 801165e:	d005      	beq.n	801166c <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011660:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011664:	4b28      	ldr	r3, [pc, #160]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011666:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801166a:	e087      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801166c:	2303      	movs	r3, #3
 801166e:	75fb      	strb	r3, [r7, #23]
            break;
 8011670:	e084      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011678:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 801167a:	4b23      	ldr	r3, [pc, #140]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801167c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011680:	f107 0108 	add.w	r1, r7, #8
 8011684:	2209      	movs	r2, #9
 8011686:	4618      	mov	r0, r3
 8011688:	f002 fb58 	bl	8013d3c <RegionVerify>
 801168c:	4603      	mov	r3, r0
 801168e:	2b00      	cmp	r3, #0
 8011690:	d005      	beq.n	801169e <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011692:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011696:	4b1c      	ldr	r3, [pc, #112]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801169c:	e06e      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801169e:	2303      	movs	r3, #3
 80116a0:	75fb      	strb	r3, [r7, #23]
            break;
 80116a2:	e06b      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	4a17      	ldr	r2, [pc, #92]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80116ae:	4b16      	ldr	r3, [pc, #88]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80116b4:	4a14      	ldr	r2, [pc, #80]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116b6:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80116b8:	e060      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	791a      	ldrb	r2, [r3, #4]
 80116be:	4b12      	ldr	r3, [pc, #72]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116c0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80116c4:	4b10      	ldr	r3, [pc, #64]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116c6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80116ca:	4b0f      	ldr	r3, [pc, #60]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 80116d0:	e054      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	4a0c      	ldr	r2, [pc, #48]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116d8:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 80116da:	e04f      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	4a09      	ldr	r2, [pc, #36]	; (8011708 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116e2:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 80116e6:	e049      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	685b      	ldr	r3, [r3, #4]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d007      	beq.n	8011700 <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7fe fe27 	bl	8010348 <RestoreNvmData>
 80116fa:	4603      	mov	r3, r0
 80116fc:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80116fe:	e03d      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011700:	2303      	movs	r3, #3
 8011702:	75fb      	strb	r3, [r7, #23]
            break;
 8011704:	e03a      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
 8011706:	bf00      	nop
 8011708:	20000954 	.word	0x20000954
 801170c:	0801b848 	.word	0x0801b848
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	799b      	ldrb	r3, [r3, #6]
 8011714:	2b01      	cmp	r3, #1
 8011716:	d80d      	bhi.n	8011734 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011718:	4a1b      	ldr	r2, [pc, #108]	; (8011788 <LoRaMacMibSetRequestConfirm+0x678>)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6858      	ldr	r0, [r3, #4]
 8011726:	f001 fc23 	bl	8012f70 <LoRaMacCryptoSetLrWanVersion>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d024      	beq.n	801177a <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011730:	2311      	movs	r3, #17
 8011732:	e024      	b.n	801177e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011734:	2303      	movs	r3, #3
 8011736:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011738:	e01f      	b.n	801177a <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f000 fbe4 	bl	8011f08 <LoRaMacMibClassBSetRequestConfirm>
 8011740:	4603      	mov	r3, r0
 8011742:	75fb      	strb	r3, [r7, #23]
            break;
 8011744:	e01a      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011746:	bf00      	nop
 8011748:	e018      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801174a:	bf00      	nop
 801174c:	e016      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801174e:	bf00      	nop
 8011750:	e014      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011752:	bf00      	nop
 8011754:	e012      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011756:	bf00      	nop
 8011758:	e010      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801175a:	bf00      	nop
 801175c:	e00e      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801175e:	bf00      	nop
 8011760:	e00c      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011762:	bf00      	nop
 8011764:	e00a      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011766:	bf00      	nop
 8011768:	e008      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801176a:	bf00      	nop
 801176c:	e006      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801176e:	bf00      	nop
 8011770:	e004      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011772:	bf00      	nop
 8011774:	e002      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011776:	bf00      	nop
 8011778:	e000      	b.n	801177c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801177a:	bf00      	nop
        }
    }
    return status;
 801177c:	7dfb      	ldrb	r3, [r7, #23]
}
 801177e:	4618      	mov	r0, r3
 8011780:	3718      	adds	r7, #24
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	20000954 	.word	0x20000954

0801178c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b086      	sub	sp, #24
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011794:	2302      	movs	r3, #2
 8011796:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011798:	2300      	movs	r3, #0
 801179a:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d101      	bne.n	80117a6 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80117a2:	2303      	movs	r3, #3
 80117a4:	e127      	b.n	80119f6 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 80117a6:	f7fc fd23 	bl	800e1f0 <LoRaMacIsBusy>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d001      	beq.n	80117b4 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80117b0:	2301      	movs	r3, #1
 80117b2:	e120      	b.n	80119f6 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80117b4:	f001 f8a6 	bl	8012904 <LoRaMacConfirmQueueIsFull>
 80117b8:	4603      	mov	r3, r0
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d001      	beq.n	80117c2 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80117be:	2301      	movs	r3, #1
 80117c0:	e119      	b.n	80119f6 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80117c2:	f001 f893 	bl	80128ec <LoRaMacConfirmQueueGetCnt>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d104      	bne.n	80117d6 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80117cc:	2214      	movs	r2, #20
 80117ce:	2100      	movs	r1, #0
 80117d0:	488b      	ldr	r0, [pc, #556]	; (8011a00 <LoRaMacMlmeRequest+0x274>)
 80117d2:	f004 fdbd 	bl	8016350 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80117d6:	4b8b      	ldr	r3, [pc, #556]	; (8011a04 <LoRaMacMlmeRequest+0x278>)
 80117d8:	2201      	movs	r2, #1
 80117da:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80117de:	4a89      	ldr	r2, [pc, #548]	; (8011a04 <LoRaMacMlmeRequest+0x278>)
 80117e0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80117e4:	f043 0304 	orr.w	r3, r3, #4
 80117e8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80117f2:	2301      	movs	r3, #1
 80117f4:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 80117f6:	2300      	movs	r3, #0
 80117f8:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	3b01      	subs	r3, #1
 8011800:	2b0d      	cmp	r3, #13
 8011802:	f200 80ce 	bhi.w	80119a2 <LoRaMacMlmeRequest+0x216>
 8011806:	a201      	add	r2, pc, #4	; (adr r2, 801180c <LoRaMacMlmeRequest+0x80>)
 8011808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801180c:	08011845 	.word	0x08011845
 8011810:	080119a3 	.word	0x080119a3
 8011814:	080119a3 	.word	0x080119a3
 8011818:	080118af 	.word	0x080118af
 801181c:	080118cd 	.word	0x080118cd
 8011820:	080118dd 	.word	0x080118dd
 8011824:	080119a3 	.word	0x080119a3
 8011828:	080119a3 	.word	0x080119a3
 801182c:	080119a3 	.word	0x080119a3
 8011830:	080118f9 	.word	0x080118f9
 8011834:	080119a3 	.word	0x080119a3
 8011838:	08011977 	.word	0x08011977
 801183c:	08011917 	.word	0x08011917
 8011840:	08011959 	.word	0x08011959
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011844:	4b6f      	ldr	r3, [pc, #444]	; (8011a04 <LoRaMacMlmeRequest+0x278>)
 8011846:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801184a:	f003 0320 	and.w	r3, r3, #32
 801184e:	2b00      	cmp	r3, #0
 8011850:	d001      	beq.n	8011856 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8011852:	2301      	movs	r3, #1
 8011854:	e0cf      	b.n	80119f6 <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 8011856:	f7fe f9fd 	bl	800fc54 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801185a:	4b6b      	ldr	r3, [pc, #428]	; (8011a08 <LoRaMacMlmeRequest+0x27c>)
 801185c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	791b      	ldrb	r3, [r3, #4]
 8011864:	b25b      	sxtb	r3, r3
 8011866:	2200      	movs	r2, #0
 8011868:	4619      	mov	r1, r3
 801186a:	f002 fb4f 	bl	8013f0c <RegionAlternateDr>
 801186e:	4603      	mov	r3, r0
 8011870:	461a      	mov	r2, r3
 8011872:	4b65      	ldr	r3, [pc, #404]	; (8011a08 <LoRaMacMlmeRequest+0x27c>)
 8011874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011878:	2307      	movs	r3, #7
 801187a:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 801187c:	20ff      	movs	r0, #255	; 0xff
 801187e:	f7fd ff61 	bl	800f744 <SendReJoinReq>
 8011882:	4603      	mov	r3, r0
 8011884:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011886:	7dfb      	ldrb	r3, [r7, #23]
 8011888:	2b00      	cmp	r3, #0
 801188a:	f000 808c 	beq.w	80119a6 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 801188e:	4b5e      	ldr	r3, [pc, #376]	; (8011a08 <LoRaMacMlmeRequest+0x27c>)
 8011890:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	791b      	ldrb	r3, [r3, #4]
 8011898:	b25b      	sxtb	r3, r3
 801189a:	2201      	movs	r2, #1
 801189c:	4619      	mov	r1, r3
 801189e:	f002 fb35 	bl	8013f0c <RegionAlternateDr>
 80118a2:	4603      	mov	r3, r0
 80118a4:	461a      	mov	r2, r3
 80118a6:	4b58      	ldr	r3, [pc, #352]	; (8011a08 <LoRaMacMlmeRequest+0x27c>)
 80118a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 80118ac:	e07b      	b.n	80119a6 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80118ae:	2300      	movs	r3, #0
 80118b0:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80118b2:	f107 030c 	add.w	r3, r7, #12
 80118b6:	2200      	movs	r2, #0
 80118b8:	4619      	mov	r1, r3
 80118ba:	2002      	movs	r0, #2
 80118bc:	f000 fc88 	bl	80121d0 <LoRaMacCommandsAddCmd>
 80118c0:	4603      	mov	r3, r0
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d071      	beq.n	80119aa <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80118c6:	2313      	movs	r3, #19
 80118c8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118ca:	e06e      	b.n	80119aa <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	889b      	ldrh	r3, [r3, #4]
 80118d0:	4618      	mov	r0, r3
 80118d2:	f7fe fcdb 	bl	801028c <SetTxContinuousWave>
 80118d6:	4603      	mov	r3, r0
 80118d8:	75fb      	strb	r3, [r7, #23]
            break;
 80118da:	e06d      	b.n	80119b8 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	8898      	ldrh	r0, [r3, #4]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6899      	ldr	r1, [r3, #8]
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80118ea:	b2db      	uxtb	r3, r3
 80118ec:	461a      	mov	r2, r3
 80118ee:	f7fe fd01 	bl	80102f4 <SetTxContinuousWave1>
 80118f2:	4603      	mov	r3, r0
 80118f4:	75fb      	strb	r3, [r7, #23]
            break;
 80118f6:	e05f      	b.n	80119b8 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80118f8:	2300      	movs	r3, #0
 80118fa:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80118fc:	f107 030c 	add.w	r3, r7, #12
 8011900:	2200      	movs	r2, #0
 8011902:	4619      	mov	r1, r3
 8011904:	200d      	movs	r0, #13
 8011906:	f000 fc63 	bl	80121d0 <LoRaMacCommandsAddCmd>
 801190a:	4603      	mov	r3, r0
 801190c:	2b00      	cmp	r3, #0
 801190e:	d04e      	beq.n	80119ae <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011910:	2313      	movs	r3, #19
 8011912:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011914:	e04b      	b.n	80119ae <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011916:	4b3c      	ldr	r3, [pc, #240]	; (8011a08 <LoRaMacMlmeRequest+0x27c>)
 8011918:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801191c:	2b00      	cmp	r3, #0
 801191e:	d148      	bne.n	80119b2 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	791b      	ldrb	r3, [r3, #4]
 8011924:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	791b      	ldrb	r3, [r3, #4]
 801192a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801192e:	b2db      	uxtb	r3, r3
 8011930:	4618      	mov	r0, r3
 8011932:	f000 fabe 	bl	8011eb2 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011936:	7dbb      	ldrb	r3, [r7, #22]
 8011938:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 801193a:	2300      	movs	r3, #0
 801193c:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801193e:	f107 030c 	add.w	r3, r7, #12
 8011942:	2201      	movs	r2, #1
 8011944:	4619      	mov	r1, r3
 8011946:	2010      	movs	r0, #16
 8011948:	f000 fc42 	bl	80121d0 <LoRaMacCommandsAddCmd>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d02f      	beq.n	80119b2 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011952:	2313      	movs	r3, #19
 8011954:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011956:	e02c      	b.n	80119b2 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011958:	2300      	movs	r3, #0
 801195a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801195c:	f107 030c 	add.w	r3, r7, #12
 8011960:	2200      	movs	r2, #0
 8011962:	4619      	mov	r1, r3
 8011964:	2012      	movs	r0, #18
 8011966:	f000 fc33 	bl	80121d0 <LoRaMacCommandsAddCmd>
 801196a:	4603      	mov	r3, r0
 801196c:	2b00      	cmp	r3, #0
 801196e:	d022      	beq.n	80119b6 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011970:	2313      	movs	r3, #19
 8011972:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011974:	e01f      	b.n	80119b6 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011976:	2301      	movs	r3, #1
 8011978:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 801197a:	f000 fa50 	bl	8011e1e <LoRaMacClassBIsAcquisitionInProgress>
 801197e:	4603      	mov	r3, r0
 8011980:	f083 0301 	eor.w	r3, r3, #1
 8011984:	b2db      	uxtb	r3, r3
 8011986:	2b00      	cmp	r3, #0
 8011988:	d008      	beq.n	801199c <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 801198a:	2000      	movs	r0, #0
 801198c:	f000 fa29 	bl	8011de2 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011990:	2000      	movs	r0, #0
 8011992:	f000 fa4b 	bl	8011e2c <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011996:	2300      	movs	r3, #0
 8011998:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 801199a:	e00d      	b.n	80119b8 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 801199c:	2301      	movs	r3, #1
 801199e:	75fb      	strb	r3, [r7, #23]
            break;
 80119a0:	e00a      	b.n	80119b8 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 80119a2:	bf00      	nop
 80119a4:	e008      	b.n	80119b8 <LoRaMacMlmeRequest+0x22c>
            break;
 80119a6:	bf00      	nop
 80119a8:	e006      	b.n	80119b8 <LoRaMacMlmeRequest+0x22c>
            break;
 80119aa:	bf00      	nop
 80119ac:	e004      	b.n	80119b8 <LoRaMacMlmeRequest+0x22c>
            break;
 80119ae:	bf00      	nop
 80119b0:	e002      	b.n	80119b8 <LoRaMacMlmeRequest+0x22c>
            break;
 80119b2:	bf00      	nop
 80119b4:	e000      	b.n	80119b8 <LoRaMacMlmeRequest+0x22c>
            break;
 80119b6:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80119b8:	4b12      	ldr	r3, [pc, #72]	; (8011a04 <LoRaMacMlmeRequest+0x278>)
 80119ba:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80119c2:	7dfb      	ldrb	r3, [r7, #23]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d010      	beq.n	80119ea <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80119c8:	f000 ff90 	bl	80128ec <LoRaMacConfirmQueueGetCnt>
 80119cc:	4603      	mov	r3, r0
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d110      	bne.n	80119f4 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 80119d2:	4b0c      	ldr	r3, [pc, #48]	; (8011a04 <LoRaMacMlmeRequest+0x278>)
 80119d4:	2200      	movs	r2, #0
 80119d6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80119da:	4a0a      	ldr	r2, [pc, #40]	; (8011a04 <LoRaMacMlmeRequest+0x278>)
 80119dc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80119e0:	f36f 0382 	bfc	r3, #2, #1
 80119e4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80119e8:	e004      	b.n	80119f4 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80119ea:	f107 0310 	add.w	r3, r7, #16
 80119ee:	4618      	mov	r0, r3
 80119f0:	f000 fe2e 	bl	8012650 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80119f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	3718      	adds	r7, #24
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}
 80119fe:	bf00      	nop
 8011a00:	20000898 	.word	0x20000898
 8011a04:	2000044c 	.word	0x2000044c
 8011a08:	20000954 	.word	0x20000954

08011a0c <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b08c      	sub	sp, #48	; 0x30
 8011a10:	af02      	add	r7, sp, #8
 8011a12:	6078      	str	r0, [r7, #4]
 8011a14:	460b      	mov	r3, r1
 8011a16:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011a18:	2302      	movs	r3, #2
 8011a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011a24:	2300      	movs	r3, #0
 8011a26:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d101      	bne.n	8011a3a <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011a36:	2303      	movs	r3, #3
 8011a38:	e0d4      	b.n	8011be4 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8011a3a:	f7fc fbd9 	bl	800e1f0 <LoRaMacIsBusy>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d001      	beq.n	8011a48 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011a44:	2301      	movs	r3, #1
 8011a46:	e0cd      	b.n	8011be4 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011a4c:	2214      	movs	r2, #20
 8011a4e:	2100      	movs	r1, #0
 8011a50:	4866      	ldr	r0, [pc, #408]	; (8011bec <LoRaMacMcpsRequest+0x1e0>)
 8011a52:	f004 fc7d 	bl	8016350 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011a56:	4b66      	ldr	r3, [pc, #408]	; (8011bf0 <LoRaMacMcpsRequest+0x1e4>)
 8011a58:	2201      	movs	r2, #1
 8011a5a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011a5e:	4b64      	ldr	r3, [pc, #400]	; (8011bf0 <LoRaMacMcpsRequest+0x1e4>)
 8011a60:	2201      	movs	r2, #1
 8011a62:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	781b      	ldrb	r3, [r3, #0]
 8011a6a:	2b03      	cmp	r3, #3
 8011a6c:	d03d      	beq.n	8011aea <LoRaMacMcpsRequest+0xde>
 8011a6e:	2b03      	cmp	r3, #3
 8011a70:	dc4f      	bgt.n	8011b12 <LoRaMacMcpsRequest+0x106>
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d002      	beq.n	8011a7c <LoRaMacMcpsRequest+0x70>
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d019      	beq.n	8011aae <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011a7a:	e04a      	b.n	8011b12 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011a80:	4b5b      	ldr	r3, [pc, #364]	; (8011bf0 <LoRaMacMcpsRequest+0x1e4>)
 8011a82:	2201      	movs	r2, #1
 8011a84:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011a88:	7b3b      	ldrb	r3, [r7, #12]
 8011a8a:	2202      	movs	r2, #2
 8011a8c:	f362 1347 	bfi	r3, r2, #5, #3
 8011a90:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	791b      	ldrb	r3, [r3, #4]
 8011a96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	689b      	ldr	r3, [r3, #8]
 8011a9e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	899b      	ldrh	r3, [r3, #12]
 8011aa4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	7b9b      	ldrb	r3, [r3, #14]
 8011aaa:	777b      	strb	r3, [r7, #29]
            break;
 8011aac:	e032      	b.n	8011b14 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011aae:	2301      	movs	r3, #1
 8011ab0:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	7bdb      	ldrb	r3, [r3, #15]
 8011ab6:	2b08      	cmp	r3, #8
 8011ab8:	bf28      	it	cs
 8011aba:	2308      	movcs	r3, #8
 8011abc:	b2da      	uxtb	r2, r3
 8011abe:	4b4c      	ldr	r3, [pc, #304]	; (8011bf0 <LoRaMacMcpsRequest+0x1e4>)
 8011ac0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011ac4:	7b3b      	ldrb	r3, [r7, #12]
 8011ac6:	2204      	movs	r2, #4
 8011ac8:	f362 1347 	bfi	r3, r2, #5, #3
 8011acc:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	791b      	ldrb	r3, [r3, #4]
 8011ad2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	689b      	ldr	r3, [r3, #8]
 8011ada:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	899b      	ldrh	r3, [r3, #12]
 8011ae0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	7b9b      	ldrb	r3, [r3, #14]
 8011ae6:	777b      	strb	r3, [r7, #29]
            break;
 8011ae8:	e014      	b.n	8011b14 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011aea:	2301      	movs	r3, #1
 8011aec:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011aee:	4b40      	ldr	r3, [pc, #256]	; (8011bf0 <LoRaMacMcpsRequest+0x1e4>)
 8011af0:	2201      	movs	r2, #1
 8011af2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011af6:	7b3b      	ldrb	r3, [r7, #12]
 8011af8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011afc:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	891b      	ldrh	r3, [r3, #8]
 8011b08:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	7a9b      	ldrb	r3, [r3, #10]
 8011b0e:	777b      	strb	r3, [r7, #29]
            break;
 8011b10:	e000      	b.n	8011b14 <LoRaMacMcpsRequest+0x108>
            break;
 8011b12:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011b14:	2302      	movs	r3, #2
 8011b16:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011b18:	4b36      	ldr	r3, [pc, #216]	; (8011bf4 <LoRaMacMcpsRequest+0x1e8>)
 8011b1a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011b1e:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b20:	4b34      	ldr	r3, [pc, #208]	; (8011bf4 <LoRaMacMcpsRequest+0x1e8>)
 8011b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b26:	f107 0214 	add.w	r2, r7, #20
 8011b2a:	4611      	mov	r1, r2
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f002 f8c9 	bl	8013cc4 <RegionGetPhyParam>
 8011b32:	4603      	mov	r3, r0
 8011b34:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	b25b      	sxtb	r3, r3
 8011b3a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	bfb8      	it	lt
 8011b42:	4613      	movlt	r3, r2
 8011b44:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011b46:	7f3b      	ldrb	r3, [r7, #28]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d044      	beq.n	8011bd6 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011b4c:	4b29      	ldr	r3, [pc, #164]	; (8011bf4 <LoRaMacMcpsRequest+0x1e8>)
 8011b4e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011b52:	f083 0301 	eor.w	r3, r3, #1
 8011b56:	b2db      	uxtb	r3, r3
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d019      	beq.n	8011b90 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011b5c:	7f7b      	ldrb	r3, [r7, #29]
 8011b5e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011b60:	4b24      	ldr	r3, [pc, #144]	; (8011bf4 <LoRaMacMcpsRequest+0x1e8>)
 8011b62:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011b66:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011b68:	4b22      	ldr	r3, [pc, #136]	; (8011bf4 <LoRaMacMcpsRequest+0x1e8>)
 8011b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b6e:	f107 0108 	add.w	r1, r7, #8
 8011b72:	2205      	movs	r2, #5
 8011b74:	4618      	mov	r0, r3
 8011b76:	f002 f8e1 	bl	8013d3c <RegionVerify>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d005      	beq.n	8011b8c <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011b80:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011b84:	4b1b      	ldr	r3, [pc, #108]	; (8011bf4 <LoRaMacMcpsRequest+0x1e8>)
 8011b86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011b8a:	e001      	b.n	8011b90 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b8c:	2303      	movs	r3, #3
 8011b8e:	e029      	b.n	8011be4 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011b90:	8bfa      	ldrh	r2, [r7, #30]
 8011b92:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8011b96:	f107 000c 	add.w	r0, r7, #12
 8011b9a:	78fb      	ldrb	r3, [r7, #3]
 8011b9c:	9300      	str	r3, [sp, #0]
 8011b9e:	4613      	mov	r3, r2
 8011ba0:	6a3a      	ldr	r2, [r7, #32]
 8011ba2:	f7fd fcef 	bl	800f584 <Send>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8011bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d10c      	bne.n	8011bce <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	781a      	ldrb	r2, [r3, #0]
 8011bb8:	4b0d      	ldr	r3, [pc, #52]	; (8011bf0 <LoRaMacMcpsRequest+0x1e4>)
 8011bba:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011bbe:	4a0c      	ldr	r2, [pc, #48]	; (8011bf0 <LoRaMacMcpsRequest+0x1e4>)
 8011bc0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bc4:	f043 0301 	orr.w	r3, r3, #1
 8011bc8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011bcc:	e003      	b.n	8011bd6 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011bce:	4b08      	ldr	r3, [pc, #32]	; (8011bf0 <LoRaMacMcpsRequest+0x1e4>)
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011bd6:	4b06      	ldr	r3, [pc, #24]	; (8011bf0 <LoRaMacMcpsRequest+0x1e4>)
 8011bd8:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	611a      	str	r2, [r3, #16]

    return status;
 8011be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3728      	adds	r7, #40	; 0x28
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	20000884 	.word	0x20000884
 8011bf0:	2000044c 	.word	0x2000044c
 8011bf4:	20000954 	.word	0x20000954

08011bf8 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	4603      	mov	r3, r0
 8011c00:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011c02:	79fb      	ldrb	r3, [r7, #7]
 8011c04:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011c06:	4b0a      	ldr	r3, [pc, #40]	; (8011c30 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c0c:	f107 010c 	add.w	r1, r7, #12
 8011c10:	220f      	movs	r2, #15
 8011c12:	4618      	mov	r0, r3
 8011c14:	f002 f892 	bl	8013d3c <RegionVerify>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d003      	beq.n	8011c26 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8011c1e:	4a04      	ldr	r2, [pc, #16]	; (8011c30 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011c20:	79fb      	ldrb	r3, [r7, #7]
 8011c22:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 8011c26:	bf00      	nop
 8011c28:	3710      	adds	r7, #16
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	20000954 	.word	0x20000954

08011c34 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b08c      	sub	sp, #48	; 0x30
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	60f8      	str	r0, [r7, #12]
 8011c3c:	60b9      	str	r1, [r7, #8]
 8011c3e:	607a      	str	r2, [r7, #4]
 8011c40:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8011c42:	2300      	movs	r3, #0
 8011c44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	7c1b      	ldrb	r3, [r3, #16]
 8011c4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	7c5b      	ldrb	r3, [r3, #17]
 8011c54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	689a      	ldr	r2, [r3, #8]
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	795b      	ldrb	r3, [r3, #5]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	f000 808b 	beq.w	8011d80 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011c6a:	2302      	movs	r3, #2
 8011c6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	7c9b      	ldrb	r3, [r3, #18]
 8011c74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	7cdb      	ldrb	r3, [r3, #19]
 8011c7c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011c80:	4611      	mov	r1, r2
 8011c82:	4618      	mov	r0, r3
 8011c84:	f002 f81e 	bl	8013cc4 <RegionGetPhyParam>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8011c8c:	6a3b      	ldr	r3, [r7, #32]
 8011c8e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8011c92:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8011c96:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	bfb8      	it	lt
 8011c9e:	4613      	movlt	r3, r2
 8011ca0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8011ca4:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011ca8:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d106      	bne.n	8011cbe <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011cbc:	e060      	b.n	8011d80 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	689b      	ldr	r3, [r3, #8]
 8011cc2:	68fa      	ldr	r2, [r7, #12]
 8011cc4:	8992      	ldrh	r2, [r2, #12]
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d303      	bcc.n	8011cd2 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8011cca:	2301      	movs	r3, #1
 8011ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011cd0:	e002      	b.n	8011cd8 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	689b      	ldr	r3, [r3, #8]
 8011cdc:	68fa      	ldr	r2, [r7, #12]
 8011cde:	8992      	ldrh	r2, [r2, #12]
 8011ce0:	4611      	mov	r1, r2
 8011ce2:	68fa      	ldr	r2, [r7, #12]
 8011ce4:	89d2      	ldrh	r2, [r2, #14]
 8011ce6:	440a      	add	r2, r1
 8011ce8:	4293      	cmp	r3, r2
 8011cea:	d349      	bcc.n	8011d80 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011cec:	2308      	movs	r3, #8
 8011cee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	7cdb      	ldrb	r3, [r3, #19]
 8011cf6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011cfa:	4611      	mov	r1, r2
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f001 ffe1 	bl	8013cc4 <RegionGetPhyParam>
 8011d02:	4603      	mov	r3, r0
 8011d04:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8011d06:	6a3b      	ldr	r3, [r7, #32]
 8011d08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	689b      	ldr	r3, [r3, #8]
 8011d10:	68fa      	ldr	r2, [r7, #12]
 8011d12:	89d2      	ldrh	r2, [r2, #14]
 8011d14:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d18:	fb02 f201 	mul.w	r2, r2, r1
 8011d1c:	1a9b      	subs	r3, r3, r2
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d12e      	bne.n	8011d80 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011d22:	2322      	movs	r3, #34	; 0x22
 8011d24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8011d28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011d2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	7c9b      	ldrb	r3, [r3, #18]
 8011d34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	7cdb      	ldrb	r3, [r3, #19]
 8011d3c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011d40:	4611      	mov	r1, r2
 8011d42:	4618      	mov	r0, r3
 8011d44:	f001 ffbe 	bl	8013cc4 <RegionGetPhyParam>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8011d4c:	6a3b      	ldr	r3, [r7, #32]
 8011d4e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8011d52:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011d56:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d110      	bne.n	8011d80 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	791b      	ldrb	r3, [r3, #4]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d009      	beq.n	8011d80 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011d6c:	2302      	movs	r3, #2
 8011d6e:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	7cdb      	ldrb	r3, [r3, #19]
 8011d74:	f107 0214 	add.w	r2, r7, #20
 8011d78:	4611      	mov	r1, r2
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f001 ffcc 	bl	8013d18 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011d86:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011d8e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3730      	adds	r7, #48	; 0x30
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}

08011d9c <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b084      	sub	sp, #16
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	60f8      	str	r0, [r7, #12]
 8011da4:	60b9      	str	r1, [r7, #8]
 8011da6:	607a      	str	r2, [r7, #4]
 8011da8:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	789b      	ldrb	r3, [r3, #2]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d107      	bne.n	8011dc2 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	687a      	ldr	r2, [r7, #4]
 8011db6:	68b9      	ldr	r1, [r7, #8]
 8011db8:	68f8      	ldr	r0, [r7, #12]
 8011dba:	f7ff ff3b 	bl	8011c34 <CalcNextV10X>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	e000      	b.n	8011dc4 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011dc2:	2300      	movs	r3, #0
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3710      	adds	r7, #16
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b085      	sub	sp, #20
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	60f8      	str	r0, [r7, #12]
 8011dd4:	60b9      	str	r1, [r7, #8]
 8011dd6:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011dd8:	bf00      	nop
 8011dda:	3714      	adds	r7, #20
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bc80      	pop	{r7}
 8011de0:	4770      	bx	lr

08011de2 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011de2:	b480      	push	{r7}
 8011de4:	b083      	sub	sp, #12
 8011de6:	af00      	add	r7, sp, #0
 8011de8:	4603      	mov	r3, r0
 8011dea:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011dec:	bf00      	nop
 8011dee:	370c      	adds	r7, #12
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bc80      	pop	{r7}
 8011df4:	4770      	bx	lr

08011df6 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011df6:	b480      	push	{r7}
 8011df8:	b083      	sub	sp, #12
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e00:	bf00      	nop
 8011e02:	370c      	adds	r7, #12
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bc80      	pop	{r7}
 8011e08:	4770      	bx	lr

08011e0a <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8011e0a:	b480      	push	{r7}
 8011e0c:	b083      	sub	sp, #12
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	4603      	mov	r3, r0
 8011e12:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e14:	bf00      	nop
 8011e16:	370c      	adds	r7, #12
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bc80      	pop	{r7}
 8011e1c:	4770      	bx	lr

08011e1e <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8011e1e:	b480      	push	{r7}
 8011e20:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8011e22:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bc80      	pop	{r7}
 8011e2a:	4770      	bx	lr

08011e2c <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8011e2c:	b480      	push	{r7}
 8011e2e:	b083      	sub	sp, #12
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e34:	bf00      	nop
 8011e36:	370c      	adds	r7, #12
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bc80      	pop	{r7}
 8011e3c:	4770      	bx	lr

08011e3e <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8011e3e:	b480      	push	{r7}
 8011e40:	b083      	sub	sp, #12
 8011e42:	af00      	add	r7, sp, #0
 8011e44:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e46:	bf00      	nop
 8011e48:	370c      	adds	r7, #12
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bc80      	pop	{r7}
 8011e4e:	4770      	bx	lr

08011e50 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8011e50:	b480      	push	{r7}
 8011e52:	b083      	sub	sp, #12
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e58:	bf00      	nop
 8011e5a:	370c      	adds	r7, #12
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bc80      	pop	{r7}
 8011e60:	4770      	bx	lr

08011e62 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8011e62:	b480      	push	{r7}
 8011e64:	b083      	sub	sp, #12
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
 8011e6a:	460b      	mov	r3, r1
 8011e6c:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8011e6e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	370c      	adds	r7, #12
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bc80      	pop	{r7}
 8011e78:	4770      	bx	lr

08011e7a <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8011e7a:	b480      	push	{r7}
 8011e7c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011e7e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bc80      	pop	{r7}
 8011e86:	4770      	bx	lr

08011e88 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8011e88:	b480      	push	{r7}
 8011e8a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011e8c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bc80      	pop	{r7}
 8011e94:	4770      	bx	lr

08011e96 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8011e96:	b480      	push	{r7}
 8011e98:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011e9a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bc80      	pop	{r7}
 8011ea2:	4770      	bx	lr

08011ea4 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011ea8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bc80      	pop	{r7}
 8011eb0:	4770      	bx	lr

08011eb2 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8011eb2:	b480      	push	{r7}
 8011eb4:	b083      	sub	sp, #12
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	4603      	mov	r3, r0
 8011eba:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ebc:	bf00      	nop
 8011ebe:	370c      	adds	r7, #12
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bc80      	pop	{r7}
 8011ec4:	4770      	bx	lr

08011ec6 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8011ec6:	b480      	push	{r7}
 8011ec8:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011eca:	bf00      	nop
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bc80      	pop	{r7}
 8011ed0:	4770      	bx	lr

08011ed2 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8011ed2:	b480      	push	{r7}
 8011ed4:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ed6:	bf00      	nop
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bc80      	pop	{r7}
 8011edc:	4770      	bx	lr

08011ede <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8011ede:	b480      	push	{r7}
 8011ee0:	b083      	sub	sp, #12
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011ee8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	370c      	adds	r7, #12
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bc80      	pop	{r7}
 8011ef2:	4770      	bx	lr

08011ef4 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	b083      	sub	sp, #12
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011efc:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	370c      	adds	r7, #12
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bc80      	pop	{r7}
 8011f06:	4770      	bx	lr

08011f08 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b083      	sub	sp, #12
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011f10:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	370c      	adds	r7, #12
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bc80      	pop	{r7}
 8011f1a:	4770      	bx	lr

08011f1c <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f20:	bf00      	nop
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bc80      	pop	{r7}
 8011f26:	4770      	bx	lr

08011f28 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b083      	sub	sp, #12
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	4603      	mov	r3, r0
 8011f30:	6039      	str	r1, [r7, #0]
 8011f32:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8011f34:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	370c      	adds	r7, #12
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bc80      	pop	{r7}
 8011f3e:	4770      	bx	lr

08011f40 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8011f40:	b480      	push	{r7}
 8011f42:	b083      	sub	sp, #12
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	4603      	mov	r3, r0
 8011f48:	603a      	str	r2, [r7, #0]
 8011f4a:	80fb      	strh	r3, [r7, #6]
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f50:	bf00      	nop
 8011f52:	370c      	adds	r7, #12
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bc80      	pop	{r7}
 8011f58:	4770      	bx	lr

08011f5a <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8011f5a:	b480      	push	{r7}
 8011f5c:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f5e:	bf00      	nop
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bc80      	pop	{r7}
 8011f64:	4770      	bx	lr

08011f66 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8011f66:	b480      	push	{r7}
 8011f68:	b083      	sub	sp, #12
 8011f6a:	af00      	add	r7, sp, #0
 8011f6c:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8011f6e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	370c      	adds	r7, #12
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bc80      	pop	{r7}
 8011f78:	4770      	bx	lr

08011f7a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8011f7a:	b480      	push	{r7}
 8011f7c:	b083      	sub	sp, #12
 8011f7e:	af00      	add	r7, sp, #0
 8011f80:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8011f82:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	370c      	adds	r7, #12
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bc80      	pop	{r7}
 8011f8c:	4770      	bx	lr

08011f8e <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8011f8e:	b480      	push	{r7}
 8011f90:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f92:	bf00      	nop
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bc80      	pop	{r7}
 8011f98:	4770      	bx	lr

08011f9a <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 8011f9a:	b480      	push	{r7}
 8011f9c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f9e:	bf00      	nop
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bc80      	pop	{r7}
 8011fa4:	4770      	bx	lr

08011fa6 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8011fa6:	b480      	push	{r7}
 8011fa8:	b085      	sub	sp, #20
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	81fb      	strh	r3, [r7, #14]
 8011fb6:	e00a      	b.n	8011fce <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8011fb8:	89fb      	ldrh	r3, [r7, #14]
 8011fba:	68ba      	ldr	r2, [r7, #8]
 8011fbc:	4413      	add	r3, r2
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d001      	beq.n	8011fc8 <IsSlotFree+0x22>
        {
            return false;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	e006      	b.n	8011fd6 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011fc8:	89fb      	ldrh	r3, [r7, #14]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	81fb      	strh	r3, [r7, #14]
 8011fce:	89fb      	ldrh	r3, [r7, #14]
 8011fd0:	2b0f      	cmp	r3, #15
 8011fd2:	d9f1      	bls.n	8011fb8 <IsSlotFree+0x12>
        }
    }
    return true;
 8011fd4:	2301      	movs	r3, #1
}
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3714      	adds	r7, #20
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bc80      	pop	{r7}
 8011fde:	4770      	bx	lr

08011fe0 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b082      	sub	sp, #8
 8011fe4:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011fea:	e007      	b.n	8011ffc <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8011fec:	79fb      	ldrb	r3, [r7, #7]
 8011fee:	3301      	adds	r3, #1
 8011ff0:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8011ff2:	79fb      	ldrb	r3, [r7, #7]
 8011ff4:	2b0f      	cmp	r3, #15
 8011ff6:	d101      	bne.n	8011ffc <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	e012      	b.n	8012022 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011ffc:	79fb      	ldrb	r3, [r7, #7]
 8011ffe:	011b      	lsls	r3, r3, #4
 8012000:	3308      	adds	r3, #8
 8012002:	4a0a      	ldr	r2, [pc, #40]	; (801202c <MallocNewMacCommandSlot+0x4c>)
 8012004:	4413      	add	r3, r2
 8012006:	4618      	mov	r0, r3
 8012008:	f7ff ffcd 	bl	8011fa6 <IsSlotFree>
 801200c:	4603      	mov	r3, r0
 801200e:	f083 0301 	eor.w	r3, r3, #1
 8012012:	b2db      	uxtb	r3, r3
 8012014:	2b00      	cmp	r3, #0
 8012016:	d1e9      	bne.n	8011fec <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012018:	79fb      	ldrb	r3, [r7, #7]
 801201a:	011b      	lsls	r3, r3, #4
 801201c:	3308      	adds	r3, #8
 801201e:	4a03      	ldr	r2, [pc, #12]	; (801202c <MallocNewMacCommandSlot+0x4c>)
 8012020:	4413      	add	r3, r2
}
 8012022:	4618      	mov	r0, r3
 8012024:	3708      	adds	r7, #8
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	20000ca4 	.word	0x20000ca4

08012030 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d101      	bne.n	8012042 <FreeMacCommandSlot+0x12>
    {
        return false;
 801203e:	2300      	movs	r3, #0
 8012040:	e005      	b.n	801204e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012042:	2210      	movs	r2, #16
 8012044:	2100      	movs	r1, #0
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f004 f982 	bl	8016350 <memset1>

    return true;
 801204c:	2301      	movs	r3, #1
}
 801204e:	4618      	mov	r0, r3
 8012050:	3708      	adds	r7, #8
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}

08012056 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012056:	b480      	push	{r7}
 8012058:	b083      	sub	sp, #12
 801205a:	af00      	add	r7, sp, #0
 801205c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d101      	bne.n	8012068 <LinkedListInit+0x12>
    {
        return false;
 8012064:	2300      	movs	r3, #0
 8012066:	e006      	b.n	8012076 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2200      	movs	r2, #0
 801206c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2200      	movs	r2, #0
 8012072:	605a      	str	r2, [r3, #4]

    return true;
 8012074:	2301      	movs	r3, #1
}
 8012076:	4618      	mov	r0, r3
 8012078:	370c      	adds	r7, #12
 801207a:	46bd      	mov	sp, r7
 801207c:	bc80      	pop	{r7}
 801207e:	4770      	bx	lr

08012080 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012080:	b480      	push	{r7}
 8012082:	b083      	sub	sp, #12
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
 8012088:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d002      	beq.n	8012096 <LinkedListAdd+0x16>
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d101      	bne.n	801209a <LinkedListAdd+0x1a>
    {
        return false;
 8012096:	2300      	movs	r3, #0
 8012098:	e015      	b.n	80120c6 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d102      	bne.n	80120a8 <LinkedListAdd+0x28>
    {
        list->First = element;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	683a      	ldr	r2, [r7, #0]
 80120a6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d003      	beq.n	80120b8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	683a      	ldr	r2, [r7, #0]
 80120b6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	2200      	movs	r2, #0
 80120bc:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	683a      	ldr	r2, [r7, #0]
 80120c2:	605a      	str	r2, [r3, #4]

    return true;
 80120c4:	2301      	movs	r3, #1
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	370c      	adds	r7, #12
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bc80      	pop	{r7}
 80120ce:	4770      	bx	lr

080120d0 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80120d0:	b480      	push	{r7}
 80120d2:	b085      	sub	sp, #20
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
 80120d8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d002      	beq.n	80120e6 <LinkedListGetPrevious+0x16>
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d101      	bne.n	80120ea <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80120e6:	2300      	movs	r3, #0
 80120e8:	e016      	b.n	8012118 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80120f0:	683a      	ldr	r2, [r7, #0]
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d00c      	beq.n	8012112 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80120f8:	e002      	b.n	8012100 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d007      	beq.n	8012116 <LinkedListGetPrevious+0x46>
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	683a      	ldr	r2, [r7, #0]
 801210c:	429a      	cmp	r2, r3
 801210e:	d1f4      	bne.n	80120fa <LinkedListGetPrevious+0x2a>
 8012110:	e001      	b.n	8012116 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012112:	2300      	movs	r3, #0
 8012114:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012116:	68fb      	ldr	r3, [r7, #12]
}
 8012118:	4618      	mov	r0, r3
 801211a:	3714      	adds	r7, #20
 801211c:	46bd      	mov	sp, r7
 801211e:	bc80      	pop	{r7}
 8012120:	4770      	bx	lr

08012122 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012122:	b580      	push	{r7, lr}
 8012124:	b084      	sub	sp, #16
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
 801212a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d002      	beq.n	8012138 <LinkedListRemove+0x16>
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d101      	bne.n	801213c <LinkedListRemove+0x1a>
    {
        return false;
 8012138:	2300      	movs	r3, #0
 801213a:	e020      	b.n	801217e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 801213c:	6839      	ldr	r1, [r7, #0]
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7ff ffc6 	bl	80120d0 <LinkedListGetPrevious>
 8012144:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	683a      	ldr	r2, [r7, #0]
 801214c:	429a      	cmp	r2, r3
 801214e:	d103      	bne.n	8012158 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	685b      	ldr	r3, [r3, #4]
 801215c:	683a      	ldr	r2, [r7, #0]
 801215e:	429a      	cmp	r2, r3
 8012160:	d102      	bne.n	8012168 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	68fa      	ldr	r2, [r7, #12]
 8012166:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d003      	beq.n	8012176 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	681a      	ldr	r2, [r3, #0]
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	2200      	movs	r2, #0
 801217a:	601a      	str	r2, [r3, #0]

    return true;
 801217c:	2301      	movs	r3, #1
}
 801217e:	4618      	mov	r0, r3
 8012180:	3710      	adds	r7, #16
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}

08012186 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8012186:	b480      	push	{r7}
 8012188:	b083      	sub	sp, #12
 801218a:	af00      	add	r7, sp, #0
 801218c:	4603      	mov	r3, r0
 801218e:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012190:	79fb      	ldrb	r3, [r7, #7]
 8012192:	2b05      	cmp	r3, #5
 8012194:	d004      	beq.n	80121a0 <IsSticky+0x1a>
 8012196:	2b05      	cmp	r3, #5
 8012198:	db04      	blt.n	80121a4 <IsSticky+0x1e>
 801219a:	3b08      	subs	r3, #8
 801219c:	2b02      	cmp	r3, #2
 801219e:	d801      	bhi.n	80121a4 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 80121a0:	2301      	movs	r3, #1
 80121a2:	e000      	b.n	80121a6 <IsSticky+0x20>
        default:
            return false;
 80121a4:	2300      	movs	r3, #0
    }
}
 80121a6:	4618      	mov	r0, r3
 80121a8:	370c      	adds	r7, #12
 80121aa:	46bd      	mov	sp, r7
 80121ac:	bc80      	pop	{r7}
 80121ae:	4770      	bx	lr

080121b0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80121b4:	22fc      	movs	r2, #252	; 0xfc
 80121b6:	2100      	movs	r1, #0
 80121b8:	4804      	ldr	r0, [pc, #16]	; (80121cc <LoRaMacCommandsInit+0x1c>)
 80121ba:	f004 f8c9 	bl	8016350 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80121be:	4803      	ldr	r0, [pc, #12]	; (80121cc <LoRaMacCommandsInit+0x1c>)
 80121c0:	f7ff ff49 	bl	8012056 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80121c4:	2300      	movs	r3, #0
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop
 80121cc:	20000ca4 	.word	0x20000ca4

080121d0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b086      	sub	sp, #24
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	4603      	mov	r3, r0
 80121d8:	60b9      	str	r1, [r7, #8]
 80121da:	607a      	str	r2, [r7, #4]
 80121dc:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d101      	bne.n	80121e8 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80121e4:	2301      	movs	r3, #1
 80121e6:	e033      	b.n	8012250 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80121e8:	f7ff fefa 	bl	8011fe0 <MallocNewMacCommandSlot>
 80121ec:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d101      	bne.n	80121f8 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80121f4:	2302      	movs	r3, #2
 80121f6:	e02b      	b.n	8012250 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80121f8:	6979      	ldr	r1, [r7, #20]
 80121fa:	4817      	ldr	r0, [pc, #92]	; (8012258 <LoRaMacCommandsAddCmd+0x88>)
 80121fc:	f7ff ff40 	bl	8012080 <LinkedListAdd>
 8012200:	4603      	mov	r3, r0
 8012202:	f083 0301 	eor.w	r3, r3, #1
 8012206:	b2db      	uxtb	r3, r3
 8012208:	2b00      	cmp	r3, #0
 801220a:	d001      	beq.n	8012210 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 801220c:	2305      	movs	r3, #5
 801220e:	e01f      	b.n	8012250 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	7bfa      	ldrb	r2, [r7, #15]
 8012214:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	687a      	ldr	r2, [r7, #4]
 801221a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	3305      	adds	r3, #5
 8012220:	687a      	ldr	r2, [r7, #4]
 8012222:	b292      	uxth	r2, r2
 8012224:	68b9      	ldr	r1, [r7, #8]
 8012226:	4618      	mov	r0, r3
 8012228:	f004 f857 	bl	80162da <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801222c:	7bfb      	ldrb	r3, [r7, #15]
 801222e:	4618      	mov	r0, r3
 8012230:	f7ff ffa9 	bl	8012186 <IsSticky>
 8012234:	4603      	mov	r3, r0
 8012236:	461a      	mov	r2, r3
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801223c:	4b06      	ldr	r3, [pc, #24]	; (8012258 <LoRaMacCommandsAddCmd+0x88>)
 801223e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	4413      	add	r3, r2
 8012246:	3301      	adds	r3, #1
 8012248:	4a03      	ldr	r2, [pc, #12]	; (8012258 <LoRaMacCommandsAddCmd+0x88>)
 801224a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 801224e:	2300      	movs	r3, #0
}
 8012250:	4618      	mov	r0, r3
 8012252:	3718      	adds	r7, #24
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}
 8012258:	20000ca4 	.word	0x20000ca4

0801225c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d101      	bne.n	801226e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801226a:	2301      	movs	r3, #1
 801226c:	e021      	b.n	80122b2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801226e:	6879      	ldr	r1, [r7, #4]
 8012270:	4812      	ldr	r0, [pc, #72]	; (80122bc <LoRaMacCommandsRemoveCmd+0x60>)
 8012272:	f7ff ff56 	bl	8012122 <LinkedListRemove>
 8012276:	4603      	mov	r3, r0
 8012278:	f083 0301 	eor.w	r3, r3, #1
 801227c:	b2db      	uxtb	r3, r3
 801227e:	2b00      	cmp	r3, #0
 8012280:	d001      	beq.n	8012286 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012282:	2303      	movs	r3, #3
 8012284:	e015      	b.n	80122b2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012286:	4b0d      	ldr	r3, [pc, #52]	; (80122bc <LoRaMacCommandsRemoveCmd+0x60>)
 8012288:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	689b      	ldr	r3, [r3, #8]
 8012290:	1ad3      	subs	r3, r2, r3
 8012292:	3b01      	subs	r3, #1
 8012294:	4a09      	ldr	r2, [pc, #36]	; (80122bc <LoRaMacCommandsRemoveCmd+0x60>)
 8012296:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f7ff fec8 	bl	8012030 <FreeMacCommandSlot>
 80122a0:	4603      	mov	r3, r0
 80122a2:	f083 0301 	eor.w	r3, r3, #1
 80122a6:	b2db      	uxtb	r3, r3
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d001      	beq.n	80122b0 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80122ac:	2305      	movs	r3, #5
 80122ae:	e000      	b.n	80122b2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80122b0:	2300      	movs	r3, #0
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3708      	adds	r7, #8
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	20000ca4 	.word	0x20000ca4

080122c0 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b082      	sub	sp, #8
 80122c4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80122c6:	4b0f      	ldr	r3, [pc, #60]	; (8012304 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80122cc:	e012      	b.n	80122f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	7b1b      	ldrb	r3, [r3, #12]
 80122d2:	f083 0301 	eor.w	r3, r3, #1
 80122d6:	b2db      	uxtb	r3, r3
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d008      	beq.n	80122ee <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f7ff ffba 	bl	801225c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	607b      	str	r3, [r7, #4]
 80122ec:	e002      	b.n	80122f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d1e9      	bne.n	80122ce <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80122fa:	2300      	movs	r3, #0
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	20000ca4 	.word	0x20000ca4

08012308 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801230e:	4b0e      	ldr	r3, [pc, #56]	; (8012348 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012314:	e00f      	b.n	8012336 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	791b      	ldrb	r3, [r3, #4]
 8012320:	4618      	mov	r0, r3
 8012322:	f7ff ff30 	bl	8012186 <IsSticky>
 8012326:	4603      	mov	r3, r0
 8012328:	2b00      	cmp	r3, #0
 801232a:	d002      	beq.n	8012332 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f7ff ff95 	bl	801225c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d1ec      	bne.n	8012316 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801233c:	2300      	movs	r3, #0
}
 801233e:	4618      	mov	r0, r3
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	20000ca4 	.word	0x20000ca4

0801234c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d101      	bne.n	801235e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801235a:	2301      	movs	r3, #1
 801235c:	e005      	b.n	801236a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801235e:	4b05      	ldr	r3, [pc, #20]	; (8012374 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012360:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012368:	2300      	movs	r3, #0
}
 801236a:	4618      	mov	r0, r3
 801236c:	370c      	adds	r7, #12
 801236e:	46bd      	mov	sp, r7
 8012370:	bc80      	pop	{r7}
 8012372:	4770      	bx	lr
 8012374:	20000ca4 	.word	0x20000ca4

08012378 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b088      	sub	sp, #32
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012384:	4b25      	ldr	r3, [pc, #148]	; (801241c <LoRaMacCommandsSerializeCmds+0xa4>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801238a:	2300      	movs	r3, #0
 801238c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d002      	beq.n	801239a <LoRaMacCommandsSerializeCmds+0x22>
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d126      	bne.n	80123e8 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801239a:	2301      	movs	r3, #1
 801239c:	e039      	b.n	8012412 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801239e:	7efb      	ldrb	r3, [r7, #27]
 80123a0:	68fa      	ldr	r2, [r7, #12]
 80123a2:	1ad2      	subs	r2, r2, r3
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	689b      	ldr	r3, [r3, #8]
 80123a8:	3301      	adds	r3, #1
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d320      	bcc.n	80123f0 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80123ae:	7efb      	ldrb	r3, [r7, #27]
 80123b0:	1c5a      	adds	r2, r3, #1
 80123b2:	76fa      	strb	r2, [r7, #27]
 80123b4:	461a      	mov	r2, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	4413      	add	r3, r2
 80123ba:	69fa      	ldr	r2, [r7, #28]
 80123bc:	7912      	ldrb	r2, [r2, #4]
 80123be:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80123c0:	7efb      	ldrb	r3, [r7, #27]
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	18d0      	adds	r0, r2, r3
 80123c6:	69fb      	ldr	r3, [r7, #28]
 80123c8:	1d59      	adds	r1, r3, #5
 80123ca:	69fb      	ldr	r3, [r7, #28]
 80123cc:	689b      	ldr	r3, [r3, #8]
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	461a      	mov	r2, r3
 80123d2:	f003 ff82 	bl	80162da <memcpy1>
            itr += curElement->PayloadSize;
 80123d6:	69fb      	ldr	r3, [r7, #28]
 80123d8:	689b      	ldr	r3, [r3, #8]
 80123da:	b2da      	uxtb	r2, r3
 80123dc:	7efb      	ldrb	r3, [r7, #27]
 80123de:	4413      	add	r3, r2
 80123e0:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80123e2:	69fb      	ldr	r3, [r7, #28]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80123e8:	69fb      	ldr	r3, [r7, #28]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d1d7      	bne.n	801239e <LoRaMacCommandsSerializeCmds+0x26>
 80123ee:	e009      	b.n	8012404 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80123f0:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80123f2:	e007      	b.n	8012404 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80123f4:	69fb      	ldr	r3, [r7, #28]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80123fa:	69f8      	ldr	r0, [r7, #28]
 80123fc:	f7ff ff2e 	bl	801225c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d1f4      	bne.n	80123f4 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801240a:	68b8      	ldr	r0, [r7, #8]
 801240c:	f7ff ff9e 	bl	801234c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012410:	2300      	movs	r3, #0
}
 8012412:	4618      	mov	r0, r3
 8012414:	3720      	adds	r7, #32
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	20000ca4 	.word	0x20000ca4

08012420 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8012420:	b480      	push	{r7}
 8012422:	b085      	sub	sp, #20
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d101      	bne.n	8012432 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801242e:	2301      	movs	r3, #1
 8012430:	e016      	b.n	8012460 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8012432:	4b0e      	ldr	r3, [pc, #56]	; (801246c <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2200      	movs	r2, #0
 801243c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801243e:	e00b      	b.n	8012458 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	7b1b      	ldrb	r3, [r3, #12]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d004      	beq.n	8012452 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2201      	movs	r2, #1
 801244c:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 801244e:	2300      	movs	r3, #0
 8012450:	e006      	b.n	8012460 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d1f0      	bne.n	8012440 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801245e:	2300      	movs	r3, #0
}
 8012460:	4618      	mov	r0, r3
 8012462:	3714      	adds	r7, #20
 8012464:	46bd      	mov	sp, r7
 8012466:	bc80      	pop	{r7}
 8012468:	4770      	bx	lr
 801246a:	bf00      	nop
 801246c:	20000ca4 	.word	0x20000ca4

08012470 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012470:	b480      	push	{r7}
 8012472:	b085      	sub	sp, #20
 8012474:	af00      	add	r7, sp, #0
 8012476:	4603      	mov	r3, r0
 8012478:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801247a:	2300      	movs	r3, #0
 801247c:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801247e:	79fb      	ldrb	r3, [r7, #7]
 8012480:	3b02      	subs	r3, #2
 8012482:	2b11      	cmp	r3, #17
 8012484:	d850      	bhi.n	8012528 <LoRaMacCommandsGetCmdSize+0xb8>
 8012486:	a201      	add	r2, pc, #4	; (adr r2, 801248c <LoRaMacCommandsGetCmdSize+0x1c>)
 8012488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801248c:	080124d5 	.word	0x080124d5
 8012490:	080124db 	.word	0x080124db
 8012494:	080124e1 	.word	0x080124e1
 8012498:	080124e7 	.word	0x080124e7
 801249c:	080124ed 	.word	0x080124ed
 80124a0:	080124f3 	.word	0x080124f3
 80124a4:	080124f9 	.word	0x080124f9
 80124a8:	080124ff 	.word	0x080124ff
 80124ac:	08012505 	.word	0x08012505
 80124b0:	08012529 	.word	0x08012529
 80124b4:	08012529 	.word	0x08012529
 80124b8:	0801250b 	.word	0x0801250b
 80124bc:	08012529 	.word	0x08012529
 80124c0:	08012529 	.word	0x08012529
 80124c4:	08012511 	.word	0x08012511
 80124c8:	08012517 	.word	0x08012517
 80124cc:	0801251d 	.word	0x0801251d
 80124d0:	08012523 	.word	0x08012523
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80124d4:	2303      	movs	r3, #3
 80124d6:	73fb      	strb	r3, [r7, #15]
            break;
 80124d8:	e027      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80124da:	2305      	movs	r3, #5
 80124dc:	73fb      	strb	r3, [r7, #15]
            break;
 80124de:	e024      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80124e0:	2302      	movs	r3, #2
 80124e2:	73fb      	strb	r3, [r7, #15]
            break;
 80124e4:	e021      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80124e6:	2305      	movs	r3, #5
 80124e8:	73fb      	strb	r3, [r7, #15]
            break;
 80124ea:	e01e      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80124ec:	2301      	movs	r3, #1
 80124ee:	73fb      	strb	r3, [r7, #15]
            break;
 80124f0:	e01b      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80124f2:	2306      	movs	r3, #6
 80124f4:	73fb      	strb	r3, [r7, #15]
            break;
 80124f6:	e018      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80124f8:	2302      	movs	r3, #2
 80124fa:	73fb      	strb	r3, [r7, #15]
            break;
 80124fc:	e015      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80124fe:	2302      	movs	r3, #2
 8012500:	73fb      	strb	r3, [r7, #15]
            break;
 8012502:	e012      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012504:	2305      	movs	r3, #5
 8012506:	73fb      	strb	r3, [r7, #15]
            break;
 8012508:	e00f      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801250a:	2306      	movs	r3, #6
 801250c:	73fb      	strb	r3, [r7, #15]
            break;
 801250e:	e00c      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012510:	2301      	movs	r3, #1
 8012512:	73fb      	strb	r3, [r7, #15]
            break;
 8012514:	e009      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012516:	2305      	movs	r3, #5
 8012518:	73fb      	strb	r3, [r7, #15]
            break;
 801251a:	e006      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801251c:	2304      	movs	r3, #4
 801251e:	73fb      	strb	r3, [r7, #15]
            break;
 8012520:	e003      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8012522:	2304      	movs	r3, #4
 8012524:	73fb      	strb	r3, [r7, #15]
            break;
 8012526:	e000      	b.n	801252a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012528:	bf00      	nop
        }
    }
    return cidSize;
 801252a:	7bfb      	ldrb	r3, [r7, #15]
}
 801252c:	4618      	mov	r0, r3
 801252e:	3714      	adds	r7, #20
 8012530:	46bd      	mov	sp, r7
 8012532:	bc80      	pop	{r7}
 8012534:	4770      	bx	lr
 8012536:	bf00      	nop

08012538 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012538:	b480      	push	{r7}
 801253a:	b083      	sub	sp, #12
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	4a07      	ldr	r2, [pc, #28]	; (8012560 <IncreaseBufferPointer+0x28>)
 8012544:	4293      	cmp	r3, r2
 8012546:	d102      	bne.n	801254e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012548:	4b06      	ldr	r3, [pc, #24]	; (8012564 <IncreaseBufferPointer+0x2c>)
 801254a:	607b      	str	r3, [r7, #4]
 801254c:	e002      	b.n	8012554 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	3304      	adds	r3, #4
 8012552:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012554:	687b      	ldr	r3, [r7, #4]
}
 8012556:	4618      	mov	r0, r3
 8012558:	370c      	adds	r7, #12
 801255a:	46bd      	mov	sp, r7
 801255c:	bc80      	pop	{r7}
 801255e:	4770      	bx	lr
 8012560:	20000dbc 	.word	0x20000dbc
 8012564:	20000dac 	.word	0x20000dac

08012568 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012568:	b480      	push	{r7}
 801256a:	b083      	sub	sp, #12
 801256c:	af00      	add	r7, sp, #0
 801256e:	4603      	mov	r3, r0
 8012570:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012572:	79fb      	ldrb	r3, [r7, #7]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d101      	bne.n	801257c <IsListEmpty+0x14>
    {
        return true;
 8012578:	2301      	movs	r3, #1
 801257a:	e000      	b.n	801257e <IsListEmpty+0x16>
    }
    return false;
 801257c:	2300      	movs	r3, #0
}
 801257e:	4618      	mov	r0, r3
 8012580:	370c      	adds	r7, #12
 8012582:	46bd      	mov	sp, r7
 8012584:	bc80      	pop	{r7}
 8012586:	4770      	bx	lr

08012588 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012588:	b480      	push	{r7}
 801258a:	b083      	sub	sp, #12
 801258c:	af00      	add	r7, sp, #0
 801258e:	4603      	mov	r3, r0
 8012590:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012592:	79fb      	ldrb	r3, [r7, #7]
 8012594:	2b04      	cmp	r3, #4
 8012596:	d901      	bls.n	801259c <IsListFull+0x14>
    {
        return true;
 8012598:	2301      	movs	r3, #1
 801259a:	e000      	b.n	801259e <IsListFull+0x16>
    }
    return false;
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	370c      	adds	r7, #12
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bc80      	pop	{r7}
 80125a6:	4770      	bx	lr

080125a8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b086      	sub	sp, #24
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	4603      	mov	r3, r0
 80125b0:	60b9      	str	r1, [r7, #8]
 80125b2:	607a      	str	r2, [r7, #4]
 80125b4:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80125ba:	4b13      	ldr	r3, [pc, #76]	; (8012608 <GetElement+0x60>)
 80125bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7ff ffd1 	bl	8012568 <IsListEmpty>
 80125c6:	4603      	mov	r3, r0
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d001      	beq.n	80125d0 <GetElement+0x28>
    {
        return NULL;
 80125cc:	2300      	movs	r3, #0
 80125ce:	e017      	b.n	8012600 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80125d0:	2300      	movs	r3, #0
 80125d2:	74fb      	strb	r3, [r7, #19]
 80125d4:	e00d      	b.n	80125f2 <GetElement+0x4a>
    {
        if( element->Request == request )
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	781b      	ldrb	r3, [r3, #0]
 80125da:	7bfa      	ldrb	r2, [r7, #15]
 80125dc:	429a      	cmp	r2, r3
 80125de:	d101      	bne.n	80125e4 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	e00d      	b.n	8012600 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80125e4:	6978      	ldr	r0, [r7, #20]
 80125e6:	f7ff ffa7 	bl	8012538 <IncreaseBufferPointer>
 80125ea:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80125ec:	7cfb      	ldrb	r3, [r7, #19]
 80125ee:	3301      	adds	r3, #1
 80125f0:	74fb      	strb	r3, [r7, #19]
 80125f2:	4b05      	ldr	r3, [pc, #20]	; (8012608 <GetElement+0x60>)
 80125f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80125f8:	7cfa      	ldrb	r2, [r7, #19]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d3eb      	bcc.n	80125d6 <GetElement+0x2e>
    }

    return NULL;
 80125fe:	2300      	movs	r3, #0
}
 8012600:	4618      	mov	r0, r3
 8012602:	3718      	adds	r7, #24
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}
 8012608:	20000da0 	.word	0x20000da0

0801260c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012614:	4a0c      	ldr	r2, [pc, #48]	; (8012648 <LoRaMacConfirmQueueInit+0x3c>)
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801261a:	4b0b      	ldr	r3, [pc, #44]	; (8012648 <LoRaMacConfirmQueueInit+0x3c>)
 801261c:	2200      	movs	r2, #0
 801261e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012622:	4b09      	ldr	r3, [pc, #36]	; (8012648 <LoRaMacConfirmQueueInit+0x3c>)
 8012624:	4a09      	ldr	r2, [pc, #36]	; (801264c <LoRaMacConfirmQueueInit+0x40>)
 8012626:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012628:	4b07      	ldr	r3, [pc, #28]	; (8012648 <LoRaMacConfirmQueueInit+0x3c>)
 801262a:	4a08      	ldr	r2, [pc, #32]	; (801264c <LoRaMacConfirmQueueInit+0x40>)
 801262c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801262e:	2214      	movs	r2, #20
 8012630:	21ff      	movs	r1, #255	; 0xff
 8012632:	4806      	ldr	r0, [pc, #24]	; (801264c <LoRaMacConfirmQueueInit+0x40>)
 8012634:	f003 fe8c 	bl	8016350 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012638:	4b03      	ldr	r3, [pc, #12]	; (8012648 <LoRaMacConfirmQueueInit+0x3c>)
 801263a:	2201      	movs	r2, #1
 801263c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8012640:	bf00      	nop
 8012642:	3708      	adds	r7, #8
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}
 8012648:	20000da0 	.word	0x20000da0
 801264c:	20000dac 	.word	0x20000dac

08012650 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b082      	sub	sp, #8
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012658:	4b19      	ldr	r3, [pc, #100]	; (80126c0 <LoRaMacConfirmQueueAdd+0x70>)
 801265a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801265e:	4618      	mov	r0, r3
 8012660:	f7ff ff92 	bl	8012588 <IsListFull>
 8012664:	4603      	mov	r3, r0
 8012666:	2b00      	cmp	r3, #0
 8012668:	d001      	beq.n	801266e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801266a:	2300      	movs	r3, #0
 801266c:	e023      	b.n	80126b6 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801266e:	4b14      	ldr	r3, [pc, #80]	; (80126c0 <LoRaMacConfirmQueueAdd+0x70>)
 8012670:	689b      	ldr	r3, [r3, #8]
 8012672:	687a      	ldr	r2, [r7, #4]
 8012674:	7812      	ldrb	r2, [r2, #0]
 8012676:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012678:	4b11      	ldr	r3, [pc, #68]	; (80126c0 <LoRaMacConfirmQueueAdd+0x70>)
 801267a:	689b      	ldr	r3, [r3, #8]
 801267c:	687a      	ldr	r2, [r7, #4]
 801267e:	7852      	ldrb	r2, [r2, #1]
 8012680:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012682:	4b0f      	ldr	r3, [pc, #60]	; (80126c0 <LoRaMacConfirmQueueAdd+0x70>)
 8012684:	689b      	ldr	r3, [r3, #8]
 8012686:	687a      	ldr	r2, [r7, #4]
 8012688:	78d2      	ldrb	r2, [r2, #3]
 801268a:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 801268c:	4b0c      	ldr	r3, [pc, #48]	; (80126c0 <LoRaMacConfirmQueueAdd+0x70>)
 801268e:	689b      	ldr	r3, [r3, #8]
 8012690:	2200      	movs	r2, #0
 8012692:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012694:	4b0a      	ldr	r3, [pc, #40]	; (80126c0 <LoRaMacConfirmQueueAdd+0x70>)
 8012696:	f893 3020 	ldrb.w	r3, [r3, #32]
 801269a:	3301      	adds	r3, #1
 801269c:	b2da      	uxtb	r2, r3
 801269e:	4b08      	ldr	r3, [pc, #32]	; (80126c0 <LoRaMacConfirmQueueAdd+0x70>)
 80126a0:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80126a4:	4b06      	ldr	r3, [pc, #24]	; (80126c0 <LoRaMacConfirmQueueAdd+0x70>)
 80126a6:	689b      	ldr	r3, [r3, #8]
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7ff ff45 	bl	8012538 <IncreaseBufferPointer>
 80126ae:	4603      	mov	r3, r0
 80126b0:	4a03      	ldr	r2, [pc, #12]	; (80126c0 <LoRaMacConfirmQueueAdd+0x70>)
 80126b2:	6093      	str	r3, [r2, #8]

    return true;
 80126b4:	2301      	movs	r3, #1
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3708      	adds	r7, #8
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
 80126be:	bf00      	nop
 80126c0:	20000da0 	.word	0x20000da0

080126c4 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80126c8:	4b0e      	ldr	r3, [pc, #56]	; (8012704 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80126ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7ff ff4a 	bl	8012568 <IsListEmpty>
 80126d4:	4603      	mov	r3, r0
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d001      	beq.n	80126de <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80126da:	2300      	movs	r3, #0
 80126dc:	e010      	b.n	8012700 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80126de:	4b09      	ldr	r3, [pc, #36]	; (8012704 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80126e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80126e4:	3b01      	subs	r3, #1
 80126e6:	b2da      	uxtb	r2, r3
 80126e8:	4b06      	ldr	r3, [pc, #24]	; (8012704 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80126ea:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80126ee:	4b05      	ldr	r3, [pc, #20]	; (8012704 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7ff ff20 	bl	8012538 <IncreaseBufferPointer>
 80126f8:	4603      	mov	r3, r0
 80126fa:	4a02      	ldr	r2, [pc, #8]	; (8012704 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80126fc:	6053      	str	r3, [r2, #4]

    return true;
 80126fe:	2301      	movs	r3, #1
}
 8012700:	4618      	mov	r0, r3
 8012702:	bd80      	pop	{r7, pc}
 8012704:	20000da0 	.word	0x20000da0

08012708 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b084      	sub	sp, #16
 801270c:	af00      	add	r7, sp, #0
 801270e:	4603      	mov	r3, r0
 8012710:	460a      	mov	r2, r1
 8012712:	71fb      	strb	r3, [r7, #7]
 8012714:	4613      	mov	r3, r2
 8012716:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012718:	2300      	movs	r3, #0
 801271a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801271c:	4b10      	ldr	r3, [pc, #64]	; (8012760 <LoRaMacConfirmQueueSetStatus+0x58>)
 801271e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012722:	4618      	mov	r0, r3
 8012724:	f7ff ff20 	bl	8012568 <IsListEmpty>
 8012728:	4603      	mov	r3, r0
 801272a:	f083 0301 	eor.w	r3, r3, #1
 801272e:	b2db      	uxtb	r3, r3
 8012730:	2b00      	cmp	r3, #0
 8012732:	d011      	beq.n	8012758 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012734:	4b0a      	ldr	r3, [pc, #40]	; (8012760 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012736:	6859      	ldr	r1, [r3, #4]
 8012738:	4b09      	ldr	r3, [pc, #36]	; (8012760 <LoRaMacConfirmQueueSetStatus+0x58>)
 801273a:	689a      	ldr	r2, [r3, #8]
 801273c:	79bb      	ldrb	r3, [r7, #6]
 801273e:	4618      	mov	r0, r3
 8012740:	f7ff ff32 	bl	80125a8 <GetElement>
 8012744:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d005      	beq.n	8012758 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	79fa      	ldrb	r2, [r7, #7]
 8012750:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	2201      	movs	r2, #1
 8012756:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012758:	bf00      	nop
 801275a:	3710      	adds	r7, #16
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}
 8012760:	20000da0 	.word	0x20000da0

08012764 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b084      	sub	sp, #16
 8012768:	af00      	add	r7, sp, #0
 801276a:	4603      	mov	r3, r0
 801276c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 801276e:	2300      	movs	r3, #0
 8012770:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012772:	4b10      	ldr	r3, [pc, #64]	; (80127b4 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012778:	4618      	mov	r0, r3
 801277a:	f7ff fef5 	bl	8012568 <IsListEmpty>
 801277e:	4603      	mov	r3, r0
 8012780:	f083 0301 	eor.w	r3, r3, #1
 8012784:	b2db      	uxtb	r3, r3
 8012786:	2b00      	cmp	r3, #0
 8012788:	d00e      	beq.n	80127a8 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801278a:	4b0a      	ldr	r3, [pc, #40]	; (80127b4 <LoRaMacConfirmQueueGetStatus+0x50>)
 801278c:	6859      	ldr	r1, [r3, #4]
 801278e:	4b09      	ldr	r3, [pc, #36]	; (80127b4 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012790:	689a      	ldr	r2, [r3, #8]
 8012792:	79fb      	ldrb	r3, [r7, #7]
 8012794:	4618      	mov	r0, r3
 8012796:	f7ff ff07 	bl	80125a8 <GetElement>
 801279a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d002      	beq.n	80127a8 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	785b      	ldrb	r3, [r3, #1]
 80127a6:	e000      	b.n	80127aa <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80127a8:	2301      	movs	r3, #1
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3710      	adds	r7, #16
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}
 80127b2:	bf00      	nop
 80127b4:	20000da0 	.word	0x20000da0

080127b8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b084      	sub	sp, #16
 80127bc:	af00      	add	r7, sp, #0
 80127be:	4603      	mov	r3, r0
 80127c0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80127c2:	4b16      	ldr	r3, [pc, #88]	; (801281c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80127c4:	685b      	ldr	r3, [r3, #4]
 80127c6:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80127c8:	4a14      	ldr	r2, [pc, #80]	; (801281c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80127ca:	79fb      	ldrb	r3, [r7, #7]
 80127cc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80127d0:	4b12      	ldr	r3, [pc, #72]	; (801281c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80127d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7ff fec6 	bl	8012568 <IsListEmpty>
 80127dc:	4603      	mov	r3, r0
 80127de:	f083 0301 	eor.w	r3, r3, #1
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d015      	beq.n	8012814 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	79fa      	ldrb	r2, [r7, #7]
 80127ec:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	78db      	ldrb	r3, [r3, #3]
 80127f2:	f083 0301 	eor.w	r3, r3, #1
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d002      	beq.n	8012802 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	2201      	movs	r2, #1
 8012800:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012802:	68f8      	ldr	r0, [r7, #12]
 8012804:	f7ff fe98 	bl	8012538 <IncreaseBufferPointer>
 8012808:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801280a:	4b04      	ldr	r3, [pc, #16]	; (801281c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801280c:	689b      	ldr	r3, [r3, #8]
 801280e:	68fa      	ldr	r2, [r7, #12]
 8012810:	429a      	cmp	r2, r3
 8012812:	d1e9      	bne.n	80127e8 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012814:	bf00      	nop
 8012816:	3710      	adds	r7, #16
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}
 801281c:	20000da0 	.word	0x20000da0

08012820 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
 8012826:	4603      	mov	r3, r0
 8012828:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801282a:	4b09      	ldr	r3, [pc, #36]	; (8012850 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801282c:	6859      	ldr	r1, [r3, #4]
 801282e:	4b08      	ldr	r3, [pc, #32]	; (8012850 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012830:	689a      	ldr	r2, [r3, #8]
 8012832:	79fb      	ldrb	r3, [r7, #7]
 8012834:	4618      	mov	r0, r3
 8012836:	f7ff feb7 	bl	80125a8 <GetElement>
 801283a:	4603      	mov	r3, r0
 801283c:	2b00      	cmp	r3, #0
 801283e:	d001      	beq.n	8012844 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012840:	2301      	movs	r3, #1
 8012842:	e000      	b.n	8012846 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012844:	2300      	movs	r3, #0
}
 8012846:	4618      	mov	r0, r3
 8012848:	3708      	adds	r7, #8
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	20000da0 	.word	0x20000da0

08012854 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 801285c:	4b22      	ldr	r3, [pc, #136]	; (80128e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 801285e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012862:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012864:	2300      	movs	r3, #0
 8012866:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8012868:	2300      	movs	r3, #0
 801286a:	73fb      	strb	r3, [r7, #15]
 801286c:	e032      	b.n	80128d4 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801286e:	4b1e      	ldr	r3, [pc, #120]	; (80128e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	781a      	ldrb	r2, [r3, #0]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012878:	4b1b      	ldr	r3, [pc, #108]	; (80128e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	785a      	ldrb	r2, [r3, #1]
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012882:	4b19      	ldr	r3, [pc, #100]	; (80128e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	789b      	ldrb	r3, [r3, #2]
 8012888:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801288a:	7b7b      	ldrb	r3, [r7, #13]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d005      	beq.n	801289c <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012890:	4b15      	ldr	r3, [pc, #84]	; (80128e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	689b      	ldr	r3, [r3, #8]
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	4798      	blx	r3
 801289a:	e00b      	b.n	80128b4 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801289c:	4b12      	ldr	r3, [pc, #72]	; (80128e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80128a4:	4b10      	ldr	r3, [pc, #64]	; (80128e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 80128a6:	685b      	ldr	r3, [r3, #4]
 80128a8:	785b      	ldrb	r3, [r3, #1]
 80128aa:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80128ac:	4b0e      	ldr	r3, [pc, #56]	; (80128e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	78db      	ldrb	r3, [r3, #3]
 80128b2:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80128b4:	f7ff ff06 	bl	80126c4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80128b8:	7b7b      	ldrb	r3, [r7, #13]
 80128ba:	f083 0301 	eor.w	r3, r3, #1
 80128be:	b2db      	uxtb	r3, r3
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d004      	beq.n	80128ce <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80128c4:	f107 0308 	add.w	r3, r7, #8
 80128c8:	4618      	mov	r0, r3
 80128ca:	f7ff fec1 	bl	8012650 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80128ce:	7bfb      	ldrb	r3, [r7, #15]
 80128d0:	3301      	adds	r3, #1
 80128d2:	73fb      	strb	r3, [r7, #15]
 80128d4:	7bfa      	ldrb	r2, [r7, #15]
 80128d6:	7bbb      	ldrb	r3, [r7, #14]
 80128d8:	429a      	cmp	r2, r3
 80128da:	d3c8      	bcc.n	801286e <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 80128dc:	bf00      	nop
 80128de:	bf00      	nop
 80128e0:	3710      	adds	r7, #16
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	20000da0 	.word	0x20000da0

080128ec <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80128ec:	b480      	push	{r7}
 80128ee:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80128f0:	4b03      	ldr	r3, [pc, #12]	; (8012900 <LoRaMacConfirmQueueGetCnt+0x14>)
 80128f2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bc80      	pop	{r7}
 80128fc:	4770      	bx	lr
 80128fe:	bf00      	nop
 8012900:	20000da0 	.word	0x20000da0

08012904 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012904:	b580      	push	{r7, lr}
 8012906:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012908:	4b06      	ldr	r3, [pc, #24]	; (8012924 <LoRaMacConfirmQueueIsFull+0x20>)
 801290a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801290e:	4618      	mov	r0, r3
 8012910:	f7ff fe3a 	bl	8012588 <IsListFull>
 8012914:	4603      	mov	r3, r0
 8012916:	2b00      	cmp	r3, #0
 8012918:	d001      	beq.n	801291e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801291a:	2301      	movs	r3, #1
 801291c:	e000      	b.n	8012920 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801291e:	2300      	movs	r3, #0
    }
}
 8012920:	4618      	mov	r0, r3
 8012922:	bd80      	pop	{r7, pc}
 8012924:	20000da0 	.word	0x20000da0

08012928 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b08e      	sub	sp, #56	; 0x38
 801292c:	af00      	add	r7, sp, #0
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	607b      	str	r3, [r7, #4]
 8012932:	460b      	mov	r3, r1
 8012934:	817b      	strh	r3, [r7, #10]
 8012936:	4613      	mov	r3, r2
 8012938:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d101      	bne.n	8012944 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012940:	230a      	movs	r3, #10
 8012942:	e087      	b.n	8012a54 <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8012944:	2300      	movs	r3, #0
 8012946:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 801294a:	2301      	movs	r3, #1
 801294c:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 801294e:	2300      	movs	r3, #0
 8012950:	623b      	str	r3, [r7, #32]
 8012952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012956:	2200      	movs	r2, #0
 8012958:	601a      	str	r2, [r3, #0]
 801295a:	605a      	str	r2, [r3, #4]
 801295c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 801295e:	2300      	movs	r3, #0
 8012960:	613b      	str	r3, [r7, #16]
 8012962:	f107 0314 	add.w	r3, r7, #20
 8012966:	2200      	movs	r2, #0
 8012968:	601a      	str	r2, [r3, #0]
 801296a:	605a      	str	r2, [r3, #4]
 801296c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 801296e:	2301      	movs	r3, #1
 8012970:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012972:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012976:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	b2db      	uxtb	r3, r3
 801297c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	0a1b      	lsrs	r3, r3, #8
 8012982:	b2db      	uxtb	r3, r3
 8012984:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	0c1b      	lsrs	r3, r3, #16
 801298a:	b2db      	uxtb	r3, r3
 801298c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	0e1b      	lsrs	r3, r3, #24
 8012992:	b2db      	uxtb	r3, r3
 8012994:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012998:	b2db      	uxtb	r3, r3
 801299a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801299c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801299e:	0a1b      	lsrs	r3, r3, #8
 80129a0:	b2db      	uxtb	r3, r3
 80129a2:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80129a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129a6:	0c1b      	lsrs	r3, r3, #16
 80129a8:	b2db      	uxtb	r3, r3
 80129aa:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80129ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129ae:	0e1b      	lsrs	r3, r3, #24
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80129b4:	e049      	b.n	8012a4a <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 80129b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80129b8:	b2db      	uxtb	r3, r3
 80129ba:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80129bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80129be:	3301      	adds	r3, #1
 80129c0:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80129c2:	f107 0320 	add.w	r3, r7, #32
 80129c6:	7a7a      	ldrb	r2, [r7, #9]
 80129c8:	f107 0010 	add.w	r0, r7, #16
 80129cc:	2110      	movs	r1, #16
 80129ce:	f7f9 f9fa 	bl	800bdc6 <SecureElementAesEncrypt>
 80129d2:	4603      	mov	r3, r0
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d001      	beq.n	80129dc <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80129d8:	230f      	movs	r3, #15
 80129da:	e03b      	b.n	8012a54 <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80129dc:	2300      	movs	r3, #0
 80129de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80129e2:	e01f      	b.n	8012a24 <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80129e4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80129e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80129ec:	4413      	add	r3, r2
 80129ee:	461a      	mov	r2, r3
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	4413      	add	r3, r2
 80129f4:	7819      	ldrb	r1, [r3, #0]
 80129f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80129fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80129fe:	4413      	add	r3, r2
 8012a00:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012a04:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012a08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012a0c:	4403      	add	r3, r0
 8012a0e:	4618      	mov	r0, r3
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	4403      	add	r3, r0
 8012a14:	404a      	eors	r2, r1
 8012a16:	b2d2      	uxtb	r2, r2
 8012a18:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012a1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012a1e:	3301      	adds	r3, #1
 8012a20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012a28:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012a2c:	2a10      	cmp	r2, #16
 8012a2e:	bfa8      	it	ge
 8012a30:	2210      	movge	r2, #16
 8012a32:	b212      	sxth	r2, r2
 8012a34:	4293      	cmp	r3, r2
 8012a36:	dbd5      	blt.n	80129e4 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012a38:	897b      	ldrh	r3, [r7, #10]
 8012a3a:	3b10      	subs	r3, #16
 8012a3c:	b29b      	uxth	r3, r3
 8012a3e:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012a40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a44:	3310      	adds	r3, #16
 8012a46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012a4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	dcb1      	bgt.n	80129b6 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012a52:	2300      	movs	r3, #0
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	3738      	adds	r7, #56	; 0x38
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}

08012a5c <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012a5c:	b490      	push	{r4, r7}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	4604      	mov	r4, r0
 8012a64:	4608      	mov	r0, r1
 8012a66:	4611      	mov	r1, r2
 8012a68:	461a      	mov	r2, r3
 8012a6a:	4623      	mov	r3, r4
 8012a6c:	80fb      	strh	r3, [r7, #6]
 8012a6e:	4603      	mov	r3, r0
 8012a70:	717b      	strb	r3, [r7, #5]
 8012a72:	460b      	mov	r3, r1
 8012a74:	713b      	strb	r3, [r7, #4]
 8012a76:	4613      	mov	r3, r2
 8012a78:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012a7a:	69bb      	ldr	r3, [r7, #24]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d101      	bne.n	8012a84 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012a80:	230a      	movs	r3, #10
 8012a82:	e04e      	b.n	8012b22 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012a84:	69bb      	ldr	r3, [r7, #24]
 8012a86:	2249      	movs	r2, #73	; 0x49
 8012a88:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012a8a:	69bb      	ldr	r3, [r7, #24]
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	2200      	movs	r2, #0
 8012a90:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012a92:	69bb      	ldr	r3, [r7, #24]
 8012a94:	3302      	adds	r3, #2
 8012a96:	2200      	movs	r2, #0
 8012a98:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012a9a:	69bb      	ldr	r3, [r7, #24]
 8012a9c:	3303      	adds	r3, #3
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012aa2:	69bb      	ldr	r3, [r7, #24]
 8012aa4:	3304      	adds	r3, #4
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012aaa:	69bb      	ldr	r3, [r7, #24]
 8012aac:	3305      	adds	r3, #5
 8012aae:	78fa      	ldrb	r2, [r7, #3]
 8012ab0:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012ab2:	69bb      	ldr	r3, [r7, #24]
 8012ab4:	3306      	adds	r3, #6
 8012ab6:	693a      	ldr	r2, [r7, #16]
 8012ab8:	b2d2      	uxtb	r2, r2
 8012aba:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012abc:	693b      	ldr	r3, [r7, #16]
 8012abe:	0a1a      	lsrs	r2, r3, #8
 8012ac0:	69bb      	ldr	r3, [r7, #24]
 8012ac2:	3307      	adds	r3, #7
 8012ac4:	b2d2      	uxtb	r2, r2
 8012ac6:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012ac8:	693b      	ldr	r3, [r7, #16]
 8012aca:	0c1a      	lsrs	r2, r3, #16
 8012acc:	69bb      	ldr	r3, [r7, #24]
 8012ace:	3308      	adds	r3, #8
 8012ad0:	b2d2      	uxtb	r2, r2
 8012ad2:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	0e1a      	lsrs	r2, r3, #24
 8012ad8:	69bb      	ldr	r3, [r7, #24]
 8012ada:	3309      	adds	r3, #9
 8012adc:	b2d2      	uxtb	r2, r2
 8012ade:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012ae0:	69bb      	ldr	r3, [r7, #24]
 8012ae2:	330a      	adds	r3, #10
 8012ae4:	697a      	ldr	r2, [r7, #20]
 8012ae6:	b2d2      	uxtb	r2, r2
 8012ae8:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	0a1a      	lsrs	r2, r3, #8
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	330b      	adds	r3, #11
 8012af2:	b2d2      	uxtb	r2, r2
 8012af4:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	0c1a      	lsrs	r2, r3, #16
 8012afa:	69bb      	ldr	r3, [r7, #24]
 8012afc:	330c      	adds	r3, #12
 8012afe:	b2d2      	uxtb	r2, r2
 8012b00:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	0e1a      	lsrs	r2, r3, #24
 8012b06:	69bb      	ldr	r3, [r7, #24]
 8012b08:	330d      	adds	r3, #13
 8012b0a:	b2d2      	uxtb	r2, r2
 8012b0c:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012b0e:	69bb      	ldr	r3, [r7, #24]
 8012b10:	330e      	adds	r3, #14
 8012b12:	2200      	movs	r2, #0
 8012b14:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012b16:	69bb      	ldr	r3, [r7, #24]
 8012b18:	330f      	adds	r3, #15
 8012b1a:	88fa      	ldrh	r2, [r7, #6]
 8012b1c:	b2d2      	uxtb	r2, r2
 8012b1e:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012b20:	2300      	movs	r3, #0
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3708      	adds	r7, #8
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bc90      	pop	{r4, r7}
 8012b2a:	4770      	bx	lr

08012b2c <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012b2c:	b590      	push	{r4, r7, lr}
 8012b2e:	b08b      	sub	sp, #44	; 0x2c
 8012b30:	af04      	add	r7, sp, #16
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	4608      	mov	r0, r1
 8012b36:	4611      	mov	r1, r2
 8012b38:	461a      	mov	r2, r3
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	807b      	strh	r3, [r7, #2]
 8012b3e:	460b      	mov	r3, r1
 8012b40:	707b      	strb	r3, [r7, #1]
 8012b42:	4613      	mov	r3, r2
 8012b44:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d002      	beq.n	8012b52 <ComputeCmacB0+0x26>
 8012b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d101      	bne.n	8012b56 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012b52:	230a      	movs	r3, #10
 8012b54:	e024      	b.n	8012ba0 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012b56:	887b      	ldrh	r3, [r7, #2]
 8012b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b5c:	d901      	bls.n	8012b62 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012b5e:	230e      	movs	r3, #14
 8012b60:	e01e      	b.n	8012ba0 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012b62:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8012b66:	783a      	ldrb	r2, [r7, #0]
 8012b68:	7879      	ldrb	r1, [r7, #1]
 8012b6a:	8878      	ldrh	r0, [r7, #2]
 8012b6c:	f107 0308 	add.w	r3, r7, #8
 8012b70:	9302      	str	r3, [sp, #8]
 8012b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b74:	9301      	str	r3, [sp, #4]
 8012b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b78:	9300      	str	r3, [sp, #0]
 8012b7a:	4623      	mov	r3, r4
 8012b7c:	f7ff ff6e 	bl	8012a5c <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012b80:	7879      	ldrb	r1, [r7, #1]
 8012b82:	887a      	ldrh	r2, [r7, #2]
 8012b84:	f107 0008 	add.w	r0, r7, #8
 8012b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b8a:	9300      	str	r3, [sp, #0]
 8012b8c:	460b      	mov	r3, r1
 8012b8e:	6879      	ldr	r1, [r7, #4]
 8012b90:	f7f9 f8cc 	bl	800bd2c <SecureElementComputeAesCmac>
 8012b94:	4603      	mov	r3, r0
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d001      	beq.n	8012b9e <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012b9a:	230f      	movs	r3, #15
 8012b9c:	e000      	b.n	8012ba0 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012b9e:	2300      	movs	r3, #0
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	371c      	adds	r7, #28
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd90      	pop	{r4, r7, pc}

08012ba8 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012ba8:	b590      	push	{r4, r7, lr}
 8012baa:	b0cd      	sub	sp, #308	; 0x134
 8012bac:	af04      	add	r7, sp, #16
 8012bae:	1d3c      	adds	r4, r7, #4
 8012bb0:	6020      	str	r0, [r4, #0]
 8012bb2:	460c      	mov	r4, r1
 8012bb4:	4610      	mov	r0, r2
 8012bb6:	4619      	mov	r1, r3
 8012bb8:	1cbb      	adds	r3, r7, #2
 8012bba:	4622      	mov	r2, r4
 8012bbc:	801a      	strh	r2, [r3, #0]
 8012bbe:	1c7b      	adds	r3, r7, #1
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	701a      	strb	r2, [r3, #0]
 8012bc4:	463b      	mov	r3, r7
 8012bc6:	460a      	mov	r2, r1
 8012bc8:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012bca:	1d3b      	adds	r3, r7, #4
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d101      	bne.n	8012bd6 <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012bd2:	230a      	movs	r3, #10
 8012bd4:	e04b      	b.n	8012c6e <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012bd6:	1cbb      	adds	r3, r7, #2
 8012bd8:	881b      	ldrh	r3, [r3, #0]
 8012bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bde:	d901      	bls.n	8012be4 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012be0:	230e      	movs	r3, #14
 8012be2:	e044      	b.n	8012c6e <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012be4:	f107 030c 	add.w	r3, r7, #12
 8012be8:	f44f 7288 	mov.w	r2, #272	; 0x110
 8012bec:	2100      	movs	r1, #0
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f003 fbae 	bl	8016350 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012bf4:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8012bf8:	463b      	mov	r3, r7
 8012bfa:	781a      	ldrb	r2, [r3, #0]
 8012bfc:	1c7b      	adds	r3, r7, #1
 8012bfe:	7819      	ldrb	r1, [r3, #0]
 8012c00:	1cbb      	adds	r3, r7, #2
 8012c02:	8818      	ldrh	r0, [r3, #0]
 8012c04:	f107 030c 	add.w	r3, r7, #12
 8012c08:	9302      	str	r3, [sp, #8]
 8012c0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012c0e:	9301      	str	r3, [sp, #4]
 8012c10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012c14:	9300      	str	r3, [sp, #0]
 8012c16:	4623      	mov	r3, r4
 8012c18:	f7ff ff20 	bl	8012a5c <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8012c1c:	f107 030c 	add.w	r3, r7, #12
 8012c20:	3310      	adds	r3, #16
 8012c22:	1cba      	adds	r2, r7, #2
 8012c24:	8812      	ldrh	r2, [r2, #0]
 8012c26:	1d39      	adds	r1, r7, #4
 8012c28:	6809      	ldr	r1, [r1, #0]
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f003 fb55 	bl	80162da <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012c30:	2306      	movs	r3, #6
 8012c32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8012c36:	1cbb      	adds	r3, r7, #2
 8012c38:	881b      	ldrh	r3, [r3, #0]
 8012c3a:	3310      	adds	r3, #16
 8012c3c:	b299      	uxth	r1, r3
 8012c3e:	1c7b      	adds	r3, r7, #1
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	f107 000c 	add.w	r0, r7, #12
 8012c46:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8012c4a:	f7f9 f88d 	bl	800bd68 <SecureElementVerifyAesCmac>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012c54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d101      	bne.n	8012c60 <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	e006      	b.n	8012c6e <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8012c60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d101      	bne.n	8012c6c <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012c68:	2301      	movs	r3, #1
 8012c6a:	e000      	b.n	8012c6e <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012c6c:	230f      	movs	r3, #15
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd90      	pop	{r4, r7, pc}

08012c78 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8012c78:	b480      	push	{r7}
 8012c7a:	b085      	sub	sp, #20
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	4603      	mov	r3, r0
 8012c80:	6039      	str	r1, [r7, #0]
 8012c82:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012c84:	2300      	movs	r3, #0
 8012c86:	73fb      	strb	r3, [r7, #15]
 8012c88:	e011      	b.n	8012cae <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8012c8a:	7bfb      	ldrb	r3, [r7, #15]
 8012c8c:	4a0c      	ldr	r2, [pc, #48]	; (8012cc0 <GetKeyAddrItem+0x48>)
 8012c8e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8012c92:	79fa      	ldrb	r2, [r7, #7]
 8012c94:	429a      	cmp	r2, r3
 8012c96:	d107      	bne.n	8012ca8 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8012c98:	7bfb      	ldrb	r3, [r7, #15]
 8012c9a:	009b      	lsls	r3, r3, #2
 8012c9c:	4a08      	ldr	r2, [pc, #32]	; (8012cc0 <GetKeyAddrItem+0x48>)
 8012c9e:	441a      	add	r2, r3
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	e006      	b.n	8012cb6 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012ca8:	7bfb      	ldrb	r3, [r7, #15]
 8012caa:	3301      	adds	r3, #1
 8012cac:	73fb      	strb	r3, [r7, #15]
 8012cae:	7bfb      	ldrb	r3, [r7, #15]
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	d9ea      	bls.n	8012c8a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012cb4:	230c      	movs	r3, #12
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3714      	adds	r7, #20
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bc80      	pop	{r7}
 8012cbe:	4770      	bx	lr
 8012cc0:	20000114 	.word	0x20000114

08012cc4 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b088      	sub	sp, #32
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60b9      	str	r1, [r7, #8]
 8012ccc:	607a      	str	r2, [r7, #4]
 8012cce:	461a      	mov	r2, r3
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	73fb      	strb	r3, [r7, #15]
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012cd8:	2300      	movs	r3, #0
 8012cda:	613b      	str	r3, [r7, #16]
 8012cdc:	f107 0314 	add.w	r3, r7, #20
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	601a      	str	r2, [r3, #0]
 8012ce4:	605a      	str	r2, [r3, #4]
 8012ce6:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8012ce8:	7bfb      	ldrb	r3, [r7, #15]
 8012cea:	2b02      	cmp	r3, #2
 8012cec:	d002      	beq.n	8012cf4 <DeriveSessionKey10x+0x30>
 8012cee:	2b03      	cmp	r3, #3
 8012cf0:	d003      	beq.n	8012cfa <DeriveSessionKey10x+0x36>
 8012cf2:	e005      	b.n	8012d00 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	743b      	strb	r3, [r7, #16]
            break;
 8012cf8:	e004      	b.n	8012d04 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8012cfa:	2302      	movs	r3, #2
 8012cfc:	743b      	strb	r3, [r7, #16]
            break;
 8012cfe:	e001      	b.n	8012d04 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012d00:	230b      	movs	r3, #11
 8012d02:	e02a      	b.n	8012d5a <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	b2db      	uxtb	r3, r3
 8012d08:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	0a1b      	lsrs	r3, r3, #8
 8012d0e:	b2db      	uxtb	r3, r3
 8012d10:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	0c1b      	lsrs	r3, r3, #16
 8012d16:	b2db      	uxtb	r3, r3
 8012d18:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	b2db      	uxtb	r3, r3
 8012d1e:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	0a1b      	lsrs	r3, r3, #8
 8012d24:	b2db      	uxtb	r3, r3
 8012d26:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	0c1b      	lsrs	r3, r3, #16
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012d30:	89bb      	ldrh	r3, [r7, #12]
 8012d32:	b2db      	uxtb	r3, r3
 8012d34:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012d36:	89bb      	ldrh	r3, [r7, #12]
 8012d38:	0a1b      	lsrs	r3, r3, #8
 8012d3a:	b29b      	uxth	r3, r3
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012d40:	7bfa      	ldrb	r2, [r7, #15]
 8012d42:	f107 0310 	add.w	r3, r7, #16
 8012d46:	2101      	movs	r1, #1
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7f9 f89a 	bl	800be82 <SecureElementDeriveAndStoreKey>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d001      	beq.n	8012d58 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012d54:	230f      	movs	r3, #15
 8012d56:	e000      	b.n	8012d5a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012d58:	2300      	movs	r3, #0
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3720      	adds	r7, #32
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
	...

08012d64 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012d64:	b480      	push	{r7}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	6039      	str	r1, [r7, #0]
 8012d6e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d101      	bne.n	8012d7a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012d76:	230a      	movs	r3, #10
 8012d78:	e03b      	b.n	8012df2 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8012d7a:	79fb      	ldrb	r3, [r7, #7]
 8012d7c:	3b01      	subs	r3, #1
 8012d7e:	2b03      	cmp	r3, #3
 8012d80:	d834      	bhi.n	8012dec <GetLastFcntDown+0x88>
 8012d82:	a201      	add	r2, pc, #4	; (adr r2, 8012d88 <GetLastFcntDown+0x24>)
 8012d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d88:	08012d99 	.word	0x08012d99
 8012d8c:	08012db1 	.word	0x08012db1
 8012d90:	08012dc9 	.word	0x08012dc9
 8012d94:	08012de1 	.word	0x08012de1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012d98:	4b18      	ldr	r3, [pc, #96]	; (8012dfc <GetLastFcntDown+0x98>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	691a      	ldr	r2, [r3, #16]
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8012da2:	4b16      	ldr	r3, [pc, #88]	; (8012dfc <GetLastFcntDown+0x98>)
 8012da4:	681a      	ldr	r2, [r3, #0]
 8012da6:	4b15      	ldr	r3, [pc, #84]	; (8012dfc <GetLastFcntDown+0x98>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	6912      	ldr	r2, [r2, #16]
 8012dac:	621a      	str	r2, [r3, #32]
            break;
 8012dae:	e01f      	b.n	8012df0 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012db0:	4b12      	ldr	r3, [pc, #72]	; (8012dfc <GetLastFcntDown+0x98>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	695a      	ldr	r2, [r3, #20]
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8012dba:	4b10      	ldr	r3, [pc, #64]	; (8012dfc <GetLastFcntDown+0x98>)
 8012dbc:	681a      	ldr	r2, [r3, #0]
 8012dbe:	4b0f      	ldr	r3, [pc, #60]	; (8012dfc <GetLastFcntDown+0x98>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	6952      	ldr	r2, [r2, #20]
 8012dc4:	621a      	str	r2, [r3, #32]
            break;
 8012dc6:	e013      	b.n	8012df0 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012dc8:	4b0c      	ldr	r3, [pc, #48]	; (8012dfc <GetLastFcntDown+0x98>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	699a      	ldr	r2, [r3, #24]
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012dd2:	4b0a      	ldr	r3, [pc, #40]	; (8012dfc <GetLastFcntDown+0x98>)
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	4b09      	ldr	r3, [pc, #36]	; (8012dfc <GetLastFcntDown+0x98>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	6992      	ldr	r2, [r2, #24]
 8012ddc:	621a      	str	r2, [r3, #32]
            break;
 8012dde:	e007      	b.n	8012df0 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8012de0:	4b06      	ldr	r3, [pc, #24]	; (8012dfc <GetLastFcntDown+0x98>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	69da      	ldr	r2, [r3, #28]
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	601a      	str	r2, [r3, #0]
            break;
 8012dea:	e001      	b.n	8012df0 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012dec:	2305      	movs	r3, #5
 8012dee:	e000      	b.n	8012df2 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012df0:	2300      	movs	r3, #0
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	370c      	adds	r7, #12
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bc80      	pop	{r7}
 8012dfa:	4770      	bx	lr
 8012dfc:	20000dc4 	.word	0x20000dc4

08012e00 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b084      	sub	sp, #16
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	4603      	mov	r3, r0
 8012e08:	6039      	str	r1, [r7, #0]
 8012e0a:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8012e10:	f107 020c 	add.w	r2, r7, #12
 8012e14:	79fb      	ldrb	r3, [r7, #7]
 8012e16:	4611      	mov	r1, r2
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7ff ffa3 	bl	8012d64 <GetLastFcntDown>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d001      	beq.n	8012e28 <CheckFCntDown+0x28>
    {
        return false;
 8012e24:	2300      	movs	r3, #0
 8012e26:	e00a      	b.n	8012e3e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	683a      	ldr	r2, [r7, #0]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d803      	bhi.n	8012e38 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8012e30:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e36:	d101      	bne.n	8012e3c <CheckFCntDown+0x3c>
    {
        return true;
 8012e38:	2301      	movs	r3, #1
 8012e3a:	e000      	b.n	8012e3e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8012e3c:	2300      	movs	r3, #0
    }
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	3710      	adds	r7, #16
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}
	...

08012e48 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012e48:	b480      	push	{r7}
 8012e4a:	b083      	sub	sp, #12
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	4603      	mov	r3, r0
 8012e50:	6039      	str	r1, [r7, #0]
 8012e52:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012e54:	79fb      	ldrb	r3, [r7, #7]
 8012e56:	3b01      	subs	r3, #1
 8012e58:	2b03      	cmp	r3, #3
 8012e5a:	d81f      	bhi.n	8012e9c <UpdateFCntDown+0x54>
 8012e5c:	a201      	add	r2, pc, #4	; (adr r2, 8012e64 <UpdateFCntDown+0x1c>)
 8012e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e62:	bf00      	nop
 8012e64:	08012e75 	.word	0x08012e75
 8012e68:	08012e7f 	.word	0x08012e7f
 8012e6c:	08012e89 	.word	0x08012e89
 8012e70:	08012e93 	.word	0x08012e93
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012e74:	4b0c      	ldr	r3, [pc, #48]	; (8012ea8 <UpdateFCntDown+0x60>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	683a      	ldr	r2, [r7, #0]
 8012e7a:	611a      	str	r2, [r3, #16]
            break;
 8012e7c:	e00f      	b.n	8012e9e <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8012e7e:	4b0a      	ldr	r3, [pc, #40]	; (8012ea8 <UpdateFCntDown+0x60>)
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	683a      	ldr	r2, [r7, #0]
 8012e84:	615a      	str	r2, [r3, #20]
            break;
 8012e86:	e00a      	b.n	8012e9e <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012e88:	4b07      	ldr	r3, [pc, #28]	; (8012ea8 <UpdateFCntDown+0x60>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	683a      	ldr	r2, [r7, #0]
 8012e8e:	619a      	str	r2, [r3, #24]
            break;
 8012e90:	e005      	b.n	8012e9e <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8012e92:	4b05      	ldr	r3, [pc, #20]	; (8012ea8 <UpdateFCntDown+0x60>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	683a      	ldr	r2, [r7, #0]
 8012e98:	61da      	str	r2, [r3, #28]
            break;
 8012e9a:	e000      	b.n	8012e9e <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8012e9c:	bf00      	nop
    }
}
 8012e9e:	bf00      	nop
 8012ea0:	370c      	adds	r7, #12
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bc80      	pop	{r7}
 8012ea6:	4770      	bx	lr
 8012ea8:	20000dc4 	.word	0x20000dc4

08012eac <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8012eb2:	4b18      	ldr	r3, [pc, #96]	; (8012f14 <ResetFCnts+0x68>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012eba:	4b16      	ldr	r3, [pc, #88]	; (8012f14 <ResetFCnts+0x68>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8012ec2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012ec4:	4b13      	ldr	r3, [pc, #76]	; (8012f14 <ResetFCnts+0x68>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8012ecc:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8012ece:	4b11      	ldr	r3, [pc, #68]	; (8012f14 <ResetFCnts+0x68>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ed6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012ed8:	4b0e      	ldr	r3, [pc, #56]	; (8012f14 <ResetFCnts+0x68>)
 8012eda:	681a      	ldr	r2, [r3, #0]
 8012edc:	4b0d      	ldr	r3, [pc, #52]	; (8012f14 <ResetFCnts+0x68>)
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	6992      	ldr	r2, [r2, #24]
 8012ee2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	607b      	str	r3, [r7, #4]
 8012ee8:	e00b      	b.n	8012f02 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8012eea:	4b0a      	ldr	r3, [pc, #40]	; (8012f14 <ResetFCnts+0x68>)
 8012eec:	681a      	ldr	r2, [r3, #0]
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	3306      	adds	r3, #6
 8012ef2:	009b      	lsls	r3, r3, #2
 8012ef4:	4413      	add	r3, r2
 8012ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8012efa:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	3301      	adds	r3, #1
 8012f00:	607b      	str	r3, [r7, #4]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	ddf0      	ble.n	8012eea <ResetFCnts+0x3e>
    }
}
 8012f08:	bf00      	nop
 8012f0a:	bf00      	nop
 8012f0c:	370c      	adds	r7, #12
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bc80      	pop	{r7}
 8012f12:	4770      	bx	lr
 8012f14:	20000dc4 	.word	0x20000dc4

08012f18 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d101      	bne.n	8012f2a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8012f26:	2309      	movs	r3, #9
 8012f28:	e01c      	b.n	8012f64 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8012f2a:	4a10      	ldr	r2, [pc, #64]	; (8012f6c <LoRaMacCryptoInit+0x54>)
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8012f30:	4b0e      	ldr	r3, [pc, #56]	; (8012f6c <LoRaMacCryptoInit+0x54>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	2228      	movs	r2, #40	; 0x28
 8012f36:	2100      	movs	r1, #0
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f003 fa09 	bl	8016350 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8012f3e:	4b0b      	ldr	r3, [pc, #44]	; (8012f6c <LoRaMacCryptoInit+0x54>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	2201      	movs	r2, #1
 8012f44:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8012f46:	4b09      	ldr	r3, [pc, #36]	; (8012f6c <LoRaMacCryptoInit+0x54>)
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	2201      	movs	r2, #1
 8012f4c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8012f4e:	4b07      	ldr	r3, [pc, #28]	; (8012f6c <LoRaMacCryptoInit+0x54>)
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	2201      	movs	r2, #1
 8012f54:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8012f56:	4b05      	ldr	r3, [pc, #20]	; (8012f6c <LoRaMacCryptoInit+0x54>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8012f5e:	f7ff ffa5 	bl	8012eac <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8012f62:	2300      	movs	r3, #0
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	3708      	adds	r7, #8
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}
 8012f6c:	20000dc4 	.word	0x20000dc4

08012f70 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8012f70:	b480      	push	{r7}
 8012f72:	b083      	sub	sp, #12
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8012f78:	4b04      	ldr	r3, [pc, #16]	; (8012f8c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	687a      	ldr	r2, [r7, #4]
 8012f7e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8012f80:	2300      	movs	r3, #0
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	370c      	adds	r7, #12
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bc80      	pop	{r7}
 8012f8a:	4770      	bx	lr
 8012f8c:	20000dc4 	.word	0x20000dc4

08012f90 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8012f90:	b480      	push	{r7}
 8012f92:	b083      	sub	sp, #12
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d101      	bne.n	8012fa2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012f9e:	230a      	movs	r3, #10
 8012fa0:	e006      	b.n	8012fb0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8012fa2:	4b06      	ldr	r3, [pc, #24]	; (8012fbc <LoRaMacCryptoGetFCntUp+0x2c>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	68db      	ldr	r3, [r3, #12]
 8012fa8:	1c5a      	adds	r2, r3, #1
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012fae:	2300      	movs	r3, #0
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	370c      	adds	r7, #12
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bc80      	pop	{r7}
 8012fb8:	4770      	bx	lr
 8012fba:	bf00      	nop
 8012fbc:	20000dc4 	.word	0x20000dc4

08012fc0 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8012fc0:	b5b0      	push	{r4, r5, r7, lr}
 8012fc2:	b088      	sub	sp, #32
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	60ba      	str	r2, [r7, #8]
 8012fc8:	607b      	str	r3, [r7, #4]
 8012fca:	4603      	mov	r3, r0
 8012fcc:	73fb      	strb	r3, [r7, #15]
 8012fce:	460b      	mov	r3, r1
 8012fd0:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012fda:	2313      	movs	r3, #19
 8012fdc:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d101      	bne.n	8012fe8 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012fe4:	230a      	movs	r3, #10
 8012fe6:	e04f      	b.n	8013088 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8012fe8:	f107 0214 	add.w	r2, r7, #20
 8012fec:	7bfb      	ldrb	r3, [r7, #15]
 8012fee:	4611      	mov	r1, r2
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7ff feb7 	bl	8012d64 <GetLastFcntDown>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8012ffa:	7efb      	ldrb	r3, [r7, #27]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d001      	beq.n	8013004 <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 8013000:	7efb      	ldrb	r3, [r7, #27]
 8013002:	e041      	b.n	8013088 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801300a:	d103      	bne.n	8013014 <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	68ba      	ldr	r2, [r7, #8]
 8013010:	601a      	str	r2, [r3, #0]
 8013012:	e01e      	b.n	8013052 <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	b29b      	uxth	r3, r3
 8013018:	68ba      	ldr	r2, [r7, #8]
 801301a:	1ad3      	subs	r3, r2, r3
 801301c:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 801301e:	69fb      	ldr	r3, [r7, #28]
 8013020:	2b00      	cmp	r3, #0
 8013022:	dd05      	ble.n	8013030 <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013024:	697a      	ldr	r2, [r7, #20]
 8013026:	69fb      	ldr	r3, [r7, #28]
 8013028:	441a      	add	r2, r3
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	601a      	str	r2, [r3, #0]
 801302e:	e010      	b.n	8013052 <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 8013030:	69fb      	ldr	r3, [r7, #28]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d104      	bne.n	8013040 <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013036:	697a      	ldr	r2, [r7, #20]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801303c:	2307      	movs	r3, #7
 801303e:	e023      	b.n	8013088 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	0c1b      	lsrs	r3, r3, #16
 8013044:	041b      	lsls	r3, r3, #16
 8013046:	68ba      	ldr	r2, [r7, #8]
 8013048:	4413      	add	r3, r2
 801304a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013052:	4b0f      	ldr	r3, [pc, #60]	; (8013090 <LoRaMacCryptoGetFCntDown+0xd0>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	789b      	ldrb	r3, [r3, #2]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d114      	bne.n	8013086 <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	4618      	mov	r0, r3
 8013062:	f04f 0100 	mov.w	r1, #0
 8013066:	697b      	ldr	r3, [r7, #20]
 8013068:	461a      	mov	r2, r3
 801306a:	f04f 0300 	mov.w	r3, #0
 801306e:	1a84      	subs	r4, r0, r2
 8013070:	eb61 0503 	sbc.w	r5, r1, r3
 8013074:	89ba      	ldrh	r2, [r7, #12]
 8013076:	f04f 0300 	mov.w	r3, #0
 801307a:	4294      	cmp	r4, r2
 801307c:	eb75 0303 	sbcs.w	r3, r5, r3
 8013080:	db01      	blt.n	8013086 <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8013082:	2308      	movs	r3, #8
 8013084:	e000      	b.n	8013088 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013086:	2300      	movs	r3, #0
}
 8013088:	4618      	mov	r0, r3
 801308a:	3720      	adds	r7, #32
 801308c:	46bd      	mov	sp, r7
 801308e:	bdb0      	pop	{r4, r5, r7, pc}
 8013090:	20000dc4 	.word	0x20000dc4

08013094 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013094:	b480      	push	{r7}
 8013096:	b085      	sub	sp, #20
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d101      	bne.n	80130a6 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80130a2:	230a      	movs	r3, #10
 80130a4:	e017      	b.n	80130d6 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80130a6:	2300      	movs	r3, #0
 80130a8:	60fb      	str	r3, [r7, #12]
 80130aa:	e010      	b.n	80130ce <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80130ac:	4b0c      	ldr	r3, [pc, #48]	; (80130e0 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80130ae:	6819      	ldr	r1, [r3, #0]
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	222c      	movs	r2, #44	; 0x2c
 80130b4:	fb02 f303 	mul.w	r3, r2, r3
 80130b8:	687a      	ldr	r2, [r7, #4]
 80130ba:	4413      	add	r3, r2
 80130bc:	68fa      	ldr	r2, [r7, #12]
 80130be:	3206      	adds	r2, #6
 80130c0:	0092      	lsls	r2, r2, #2
 80130c2:	440a      	add	r2, r1
 80130c4:	3204      	adds	r2, #4
 80130c6:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	3301      	adds	r3, #1
 80130cc:	60fb      	str	r3, [r7, #12]
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	ddeb      	ble.n	80130ac <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80130d4:	2300      	movs	r3, #0
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3714      	adds	r7, #20
 80130da:	46bd      	mov	sp, r7
 80130dc:	bc80      	pop	{r7}
 80130de:	4770      	bx	lr
 80130e0:	20000dc4 	.word	0x20000dc4

080130e4 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	4603      	mov	r3, r0
 80130ec:	6039      	str	r1, [r7, #0]
 80130ee:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80130f0:	79fb      	ldrb	r3, [r7, #7]
 80130f2:	6839      	ldr	r1, [r7, #0]
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7f8 fdbb 	bl	800bc70 <SecureElementSetKey>
 80130fa:	4603      	mov	r3, r0
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d001      	beq.n	8013104 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013100:	230f      	movs	r3, #15
 8013102:	e018      	b.n	8013136 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8013104:	79fb      	ldrb	r3, [r7, #7]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d114      	bne.n	8013134 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 801310a:	4b0d      	ldr	r3, [pc, #52]	; (8013140 <LoRaMacCryptoSetKey+0x5c>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	789b      	ldrb	r3, [r3, #2]
 8013110:	79fa      	ldrb	r2, [r7, #7]
 8013112:	4611      	mov	r1, r2
 8013114:	4618      	mov	r0, r3
 8013116:	f000 fa3f 	bl	8013598 <LoRaMacCryptoDeriveMcRootKey>
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	d001      	beq.n	8013124 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013120:	230f      	movs	r3, #15
 8013122:	e008      	b.n	8013136 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013124:	2004      	movs	r0, #4
 8013126:	f000 fa62 	bl	80135ee <LoRaMacCryptoDeriveMcKEKey>
 801312a:	4603      	mov	r3, r0
 801312c:	2b00      	cmp	r3, #0
 801312e:	d001      	beq.n	8013134 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013130:	230f      	movs	r3, #15
 8013132:	e000      	b.n	8013136 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013134:	2300      	movs	r3, #0
}
 8013136:	4618      	mov	r0, r3
 8013138:	3708      	adds	r7, #8
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}
 801313e:	bf00      	nop
 8013140:	20000dc4 	.word	0x20000dc4

08013144 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b086      	sub	sp, #24
 8013148:	af02      	add	r7, sp, #8
 801314a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d101      	bne.n	8013156 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013152:	230a      	movs	r3, #10
 8013154:	e033      	b.n	80131be <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8013156:	2301      	movs	r3, #1
 8013158:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801315a:	2300      	movs	r3, #0
 801315c:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 801315e:	f107 0308 	add.w	r3, r7, #8
 8013162:	4618      	mov	r0, r3
 8013164:	f7f8 ff4a 	bl	800bffc <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8013168:	68ba      	ldr	r2, [r7, #8]
 801316a:	4b17      	ldr	r3, [pc, #92]	; (80131c8 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	b292      	uxth	r2, r2
 8013170:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8013172:	4b15      	ldr	r3, [pc, #84]	; (80131c8 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	889a      	ldrh	r2, [r3, #4]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f000 fc18 	bl	80139b2 <LoRaMacSerializerJoinRequest>
 8013182:	4603      	mov	r3, r0
 8013184:	2b00      	cmp	r3, #0
 8013186:	d001      	beq.n	801318c <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013188:	2311      	movs	r3, #17
 801318a:	e018      	b.n	80131be <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	6819      	ldr	r1, [r3, #0]
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	3318      	adds	r3, #24
 8013194:	7bfa      	ldrb	r2, [r7, #15]
 8013196:	9300      	str	r3, [sp, #0]
 8013198:	4613      	mov	r3, r2
 801319a:	2213      	movs	r2, #19
 801319c:	2000      	movs	r0, #0
 801319e:	f7f8 fdc5 	bl	800bd2c <SecureElementComputeAesCmac>
 80131a2:	4603      	mov	r3, r0
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d001      	beq.n	80131ac <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80131a8:	230f      	movs	r3, #15
 80131aa:	e008      	b.n	80131be <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f000 fc00 	bl	80139b2 <LoRaMacSerializerJoinRequest>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d001      	beq.n	80131bc <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80131b8:	2311      	movs	r3, #17
 80131ba:	e000      	b.n	80131be <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80131bc:	2300      	movs	r3, #0
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3710      	adds	r7, #16
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	20000dc4 	.word	0x20000dc4

080131cc <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80131cc:	b590      	push	{r4, r7, lr}
 80131ce:	b097      	sub	sp, #92	; 0x5c
 80131d0:	af04      	add	r7, sp, #16
 80131d2:	4603      	mov	r3, r0
 80131d4:	60b9      	str	r1, [r7, #8]
 80131d6:	607a      	str	r2, [r7, #4]
 80131d8:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d002      	beq.n	80131e6 <LoRaMacCryptoHandleJoinAccept+0x1a>
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d101      	bne.n	80131ea <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80131e6:	230a      	movs	r3, #10
 80131e8:	e0bd      	b.n	8013366 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80131ea:	2313      	movs	r3, #19
 80131ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80131f0:	2300      	movs	r3, #0
 80131f2:	61bb      	str	r3, [r7, #24]
 80131f4:	f107 031c 	add.w	r3, r7, #28
 80131f8:	221d      	movs	r2, #29
 80131fa:	2100      	movs	r1, #0
 80131fc:	4618      	mov	r0, r3
 80131fe:	f007 fc25 	bl	801aa4c <memset>
    uint8_t versionMinor         = 0;
 8013202:	2300      	movs	r3, #0
 8013204:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013206:	4b5a      	ldr	r3, [pc, #360]	; (8013370 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	889b      	ldrh	r3, [r3, #4]
 801320c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	681c      	ldr	r4, [r3, #0]
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	791b      	ldrb	r3, [r3, #4]
 8013218:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 801321c:	7bf8      	ldrb	r0, [r7, #15]
 801321e:	f107 0217 	add.w	r2, r7, #23
 8013222:	9202      	str	r2, [sp, #8]
 8013224:	f107 0218 	add.w	r2, r7, #24
 8013228:	9201      	str	r2, [sp, #4]
 801322a:	9300      	str	r3, [sp, #0]
 801322c:	4623      	mov	r3, r4
 801322e:	460a      	mov	r2, r1
 8013230:	68b9      	ldr	r1, [r7, #8]
 8013232:	f7f8 fe66 	bl	800bf02 <SecureElementProcessJoinAccept>
 8013236:	4603      	mov	r3, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	d001      	beq.n	8013240 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801323c:	230f      	movs	r3, #15
 801323e:	e092      	b.n	8013366 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	6818      	ldr	r0, [r3, #0]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	791b      	ldrb	r3, [r3, #4]
 8013248:	b29a      	uxth	r2, r3
 801324a:	f107 0318 	add.w	r3, r7, #24
 801324e:	4619      	mov	r1, r3
 8013250:	f003 f843 	bl	80162da <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f000 f9ed 	bl	8013634 <LoRaMacParserJoinAccept>
 801325a:	4603      	mov	r3, r0
 801325c:	2b00      	cmp	r3, #0
 801325e:	d001      	beq.n	8013264 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013260:	2310      	movs	r3, #16
 8013262:	e080      	b.n	8013366 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	799b      	ldrb	r3, [r3, #6]
 8013268:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	79db      	ldrb	r3, [r3, #7]
 801326e:	021b      	lsls	r3, r3, #8
 8013270:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013272:	4313      	orrs	r3, r2
 8013274:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	7a1b      	ldrb	r3, [r3, #8]
 801327a:	041b      	lsls	r3, r3, #16
 801327c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801327e:	4313      	orrs	r3, r2
 8013280:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013282:	4b3b      	ldr	r3, [pc, #236]	; (8013370 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	689b      	ldr	r3, [r3, #8]
 8013288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801328a:	429a      	cmp	r2, r3
 801328c:	d010      	beq.n	80132b0 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801328e:	4b38      	ldr	r3, [pc, #224]	; (8013370 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013294:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8013296:	7dfb      	ldrb	r3, [r7, #23]
 8013298:	2100      	movs	r1, #0
 801329a:	4618      	mov	r0, r3
 801329c:	f000 f97c 	bl	8013598 <LoRaMacCryptoDeriveMcRootKey>
 80132a0:	4603      	mov	r3, r0
 80132a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80132a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d005      	beq.n	80132ba <LoRaMacCryptoHandleJoinAccept+0xee>
 80132ae:	e001      	b.n	80132b4 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80132b0:	2303      	movs	r3, #3
 80132b2:	e058      	b.n	8013366 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80132b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80132b8:	e055      	b.n	8013366 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80132ba:	2004      	movs	r0, #4
 80132bc:	f000 f997 	bl	80135ee <LoRaMacCryptoDeriveMcKEKey>
 80132c0:	4603      	mov	r3, r0
 80132c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80132c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d002      	beq.n	80132d4 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 80132ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80132d2:	e048      	b.n	8013366 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	7a5b      	ldrb	r3, [r3, #9]
 80132d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	7a9b      	ldrb	r3, [r3, #10]
 80132de:	021b      	lsls	r3, r3, #8
 80132e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132e2:	4313      	orrs	r3, r2
 80132e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	7adb      	ldrb	r3, [r3, #11]
 80132ea:	041b      	lsls	r3, r3, #16
 80132ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132ee:	4313      	orrs	r3, r2
 80132f0:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80132f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80132f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80132fa:	2003      	movs	r0, #3
 80132fc:	f7ff fce2 	bl	8012cc4 <DeriveSessionKey10x>
 8013300:	4603      	mov	r3, r0
 8013302:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013306:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801330a:	2b00      	cmp	r3, #0
 801330c:	d002      	beq.n	8013314 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 801330e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013312:	e028      	b.n	8013366 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013314:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801331a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801331c:	2002      	movs	r0, #2
 801331e:	f7ff fcd1 	bl	8012cc4 <DeriveSessionKey10x>
 8013322:	4603      	mov	r3, r0
 8013324:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013328:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801332c:	2b00      	cmp	r3, #0
 801332e:	d002      	beq.n	8013336 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8013330:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013334:	e017      	b.n	8013366 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013336:	4b0e      	ldr	r3, [pc, #56]	; (8013370 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	7dfa      	ldrb	r2, [r7, #23]
 801333c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 801333e:	4b0c      	ldr	r3, [pc, #48]	; (8013370 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	2200      	movs	r2, #0
 8013344:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013346:	4b0a      	ldr	r3, [pc, #40]	; (8013370 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	f04f 32ff 	mov.w	r2, #4294967295
 801334e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013350:	4b07      	ldr	r3, [pc, #28]	; (8013370 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	f04f 32ff 	mov.w	r2, #4294967295
 8013358:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801335a:	4b05      	ldr	r3, [pc, #20]	; (8013370 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	f04f 32ff 	mov.w	r2, #4294967295
 8013362:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013364:	2300      	movs	r3, #0
}
 8013366:	4618      	mov	r0, r3
 8013368:	374c      	adds	r7, #76	; 0x4c
 801336a:	46bd      	mov	sp, r7
 801336c:	bd90      	pop	{r4, r7, pc}
 801336e:	bf00      	nop
 8013370:	20000dc4 	.word	0x20000dc4

08013374 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013374:	b590      	push	{r4, r7, lr}
 8013376:	b08b      	sub	sp, #44	; 0x2c
 8013378:	af04      	add	r7, sp, #16
 801337a:	60f8      	str	r0, [r7, #12]
 801337c:	607b      	str	r3, [r7, #4]
 801337e:	460b      	mov	r3, r1
 8013380:	72fb      	strb	r3, [r7, #11]
 8013382:	4613      	mov	r3, r2
 8013384:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013386:	2313      	movs	r3, #19
 8013388:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801338a:	2303      	movs	r3, #3
 801338c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d101      	bne.n	8013398 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013394:	230a      	movs	r3, #10
 8013396:	e05f      	b.n	8013458 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013398:	4b31      	ldr	r3, [pc, #196]	; (8013460 <LoRaMacCryptoSecureMessage+0xec>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	68db      	ldr	r3, [r3, #12]
 801339e:	68fa      	ldr	r2, [r7, #12]
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d201      	bcs.n	80133a8 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80133a4:	2306      	movs	r3, #6
 80133a6:	e057      	b.n	8013458 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d101      	bne.n	80133b6 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80133b2:	2302      	movs	r3, #2
 80133b4:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80133b6:	4b2a      	ldr	r3, [pc, #168]	; (8013460 <LoRaMacCryptoSecureMessage+0xec>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	68fa      	ldr	r2, [r7, #12]
 80133be:	429a      	cmp	r2, r3
 80133c0:	d916      	bls.n	80133f0 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80133cc:	b219      	sxth	r1, r3
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	689c      	ldr	r4, [r3, #8]
 80133d2:	7dfa      	ldrb	r2, [r7, #23]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	9301      	str	r3, [sp, #4]
 80133d8:	2300      	movs	r3, #0
 80133da:	9300      	str	r3, [sp, #0]
 80133dc:	4623      	mov	r3, r4
 80133de:	f7ff faa3 	bl	8012928 <PayloadEncrypt>
 80133e2:	4603      	mov	r3, r0
 80133e4:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80133e6:	7dbb      	ldrb	r3, [r7, #22]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d001      	beq.n	80133f0 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80133ec:	7dbb      	ldrb	r3, [r7, #22]
 80133ee:	e033      	b.n	8013458 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f000 fb60 	bl	8013ab6 <LoRaMacSerializerData>
 80133f6:	4603      	mov	r3, r0
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d001      	beq.n	8013400 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80133fc:	2311      	movs	r3, #17
 80133fe:	e02b      	b.n	8013458 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013400:	2302      	movs	r3, #2
 8013402:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6818      	ldr	r0, [r3, #0]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	791b      	ldrb	r3, [r3, #4]
 801340c:	b29b      	uxth	r3, r3
 801340e:	3b04      	subs	r3, #4
 8013410:	b299      	uxth	r1, r3
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	689b      	ldr	r3, [r3, #8]
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	322c      	adds	r2, #44	; 0x2c
 801341a:	7dfc      	ldrb	r4, [r7, #23]
 801341c:	9203      	str	r2, [sp, #12]
 801341e:	68fa      	ldr	r2, [r7, #12]
 8013420:	9202      	str	r2, [sp, #8]
 8013422:	9301      	str	r3, [sp, #4]
 8013424:	2300      	movs	r3, #0
 8013426:	9300      	str	r3, [sp, #0]
 8013428:	2300      	movs	r3, #0
 801342a:	4622      	mov	r2, r4
 801342c:	f7ff fb7e 	bl	8012b2c <ComputeCmacB0>
 8013430:	4603      	mov	r3, r0
 8013432:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013434:	7dbb      	ldrb	r3, [r7, #22]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d001      	beq.n	801343e <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 801343a:	7dbb      	ldrb	r3, [r7, #22]
 801343c:	e00c      	b.n	8013458 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f000 fb39 	bl	8013ab6 <LoRaMacSerializerData>
 8013444:	4603      	mov	r3, r0
 8013446:	2b00      	cmp	r3, #0
 8013448:	d001      	beq.n	801344e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801344a:	2311      	movs	r3, #17
 801344c:	e004      	b.n	8013458 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801344e:	4b04      	ldr	r3, [pc, #16]	; (8013460 <LoRaMacCryptoSecureMessage+0xec>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	68fa      	ldr	r2, [r7, #12]
 8013454:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8013456:	2300      	movs	r3, #0
}
 8013458:	4618      	mov	r0, r3
 801345a:	371c      	adds	r7, #28
 801345c:	46bd      	mov	sp, r7
 801345e:	bd90      	pop	{r4, r7, pc}
 8013460:	20000dc4 	.word	0x20000dc4

08013464 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013464:	b590      	push	{r4, r7, lr}
 8013466:	b08b      	sub	sp, #44	; 0x2c
 8013468:	af04      	add	r7, sp, #16
 801346a:	60b9      	str	r1, [r7, #8]
 801346c:	607b      	str	r3, [r7, #4]
 801346e:	4603      	mov	r3, r0
 8013470:	73fb      	strb	r3, [r7, #15]
 8013472:	4613      	mov	r3, r2
 8013474:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013478:	2b00      	cmp	r3, #0
 801347a:	d101      	bne.n	8013480 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801347c:	230a      	movs	r3, #10
 801347e:	e084      	b.n	801358a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013480:	7bbb      	ldrb	r3, [r7, #14]
 8013482:	6879      	ldr	r1, [r7, #4]
 8013484:	4618      	mov	r0, r3
 8013486:	f7ff fcbb 	bl	8012e00 <CheckFCntDown>
 801348a:	4603      	mov	r3, r0
 801348c:	f083 0301 	eor.w	r3, r3, #1
 8013490:	b2db      	uxtb	r3, r3
 8013492:	2b00      	cmp	r3, #0
 8013494:	d001      	beq.n	801349a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013496:	2306      	movs	r3, #6
 8013498:	e077      	b.n	801358a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801349a:	2313      	movs	r3, #19
 801349c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801349e:	2303      	movs	r3, #3
 80134a0:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80134a2:	2302      	movs	r3, #2
 80134a4:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80134a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134a8:	f000 f98f 	bl	80137ca <LoRaMacParserData>
 80134ac:	4603      	mov	r3, r0
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d001      	beq.n	80134b6 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80134b2:	2310      	movs	r3, #16
 80134b4:	e069      	b.n	801358a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80134b6:	f107 0210 	add.w	r2, r7, #16
 80134ba:	7bfb      	ldrb	r3, [r7, #15]
 80134bc:	4611      	mov	r1, r2
 80134be:	4618      	mov	r0, r3
 80134c0:	f7ff fbda 	bl	8012c78 <GetKeyAddrItem>
 80134c4:	4603      	mov	r3, r0
 80134c6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80134c8:	7d7b      	ldrb	r3, [r7, #21]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d001      	beq.n	80134d2 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80134ce:	7d7b      	ldrb	r3, [r7, #21]
 80134d0:	e05b      	b.n	801358a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	785b      	ldrb	r3, [r3, #1]
 80134d6:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80134d8:	693b      	ldr	r3, [r7, #16]
 80134da:	789b      	ldrb	r3, [r3, #2]
 80134dc:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80134de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e0:	689b      	ldr	r3, [r3, #8]
 80134e2:	68ba      	ldr	r2, [r7, #8]
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d001      	beq.n	80134ec <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80134e8:	2302      	movs	r3, #2
 80134ea:	e04e      	b.n	801358a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80134ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ee:	7b1b      	ldrb	r3, [r3, #12]
 80134f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80134f4:	b2db      	uxtb	r3, r3
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	bf14      	ite	ne
 80134fa:	2301      	movne	r3, #1
 80134fc:	2300      	moveq	r3, #0
 80134fe:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013500:	4b24      	ldr	r3, [pc, #144]	; (8013594 <LoRaMacCryptoUnsecureMessage+0x130>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	789b      	ldrb	r3, [r3, #2]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d101      	bne.n	801350e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801350a:	2300      	movs	r3, #0
 801350c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013510:	6818      	ldr	r0, [r3, #0]
 8013512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013514:	791b      	ldrb	r3, [r3, #4]
 8013516:	b29b      	uxth	r3, r3
 8013518:	3b04      	subs	r3, #4
 801351a:	b299      	uxth	r1, r3
 801351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013520:	7dbc      	ldrb	r4, [r7, #22]
 8013522:	7d3a      	ldrb	r2, [r7, #20]
 8013524:	9303      	str	r3, [sp, #12]
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	9302      	str	r3, [sp, #8]
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	9301      	str	r3, [sp, #4]
 801352e:	2301      	movs	r3, #1
 8013530:	9300      	str	r3, [sp, #0]
 8013532:	4623      	mov	r3, r4
 8013534:	f7ff fb38 	bl	8012ba8 <VerifyCmacB0>
 8013538:	4603      	mov	r3, r0
 801353a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801353c:	7d7b      	ldrb	r3, [r7, #21]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d001      	beq.n	8013546 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8013542:	7d7b      	ldrb	r3, [r7, #21]
 8013544:	e021      	b.n	801358a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013548:	f893 3020 	ldrb.w	r3, [r3, #32]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d101      	bne.n	8013554 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013550:	2302      	movs	r3, #2
 8013552:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013556:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801355a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801355e:	b219      	sxth	r1, r3
 8013560:	7dfa      	ldrb	r2, [r7, #23]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	9301      	str	r3, [sp, #4]
 8013566:	2301      	movs	r3, #1
 8013568:	9300      	str	r3, [sp, #0]
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	f7ff f9dc 	bl	8012928 <PayloadEncrypt>
 8013570:	4603      	mov	r3, r0
 8013572:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013574:	7d7b      	ldrb	r3, [r7, #21]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d001      	beq.n	801357e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 801357a:	7d7b      	ldrb	r3, [r7, #21]
 801357c:	e005      	b.n	801358a <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801357e:	7bbb      	ldrb	r3, [r7, #14]
 8013580:	6879      	ldr	r1, [r7, #4]
 8013582:	4618      	mov	r0, r3
 8013584:	f7ff fc60 	bl	8012e48 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013588:	2300      	movs	r3, #0
}
 801358a:	4618      	mov	r0, r3
 801358c:	371c      	adds	r7, #28
 801358e:	46bd      	mov	sp, r7
 8013590:	bd90      	pop	{r4, r7, pc}
 8013592:	bf00      	nop
 8013594:	20000dc4 	.word	0x20000dc4

08013598 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b086      	sub	sp, #24
 801359c:	af00      	add	r7, sp, #0
 801359e:	4603      	mov	r3, r0
 80135a0:	460a      	mov	r2, r1
 80135a2:	71fb      	strb	r3, [r7, #7]
 80135a4:	4613      	mov	r3, r2
 80135a6:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80135a8:	79bb      	ldrb	r3, [r7, #6]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d001      	beq.n	80135b2 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80135ae:	230b      	movs	r3, #11
 80135b0:	e019      	b.n	80135e6 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 80135b2:	2300      	movs	r3, #0
 80135b4:	60bb      	str	r3, [r7, #8]
 80135b6:	f107 030c 	add.w	r3, r7, #12
 80135ba:	2200      	movs	r2, #0
 80135bc:	601a      	str	r2, [r3, #0]
 80135be:	605a      	str	r2, [r3, #4]
 80135c0:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80135c2:	79fb      	ldrb	r3, [r7, #7]
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	d101      	bne.n	80135cc <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80135c8:	2320      	movs	r3, #32
 80135ca:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80135cc:	79b9      	ldrb	r1, [r7, #6]
 80135ce:	f107 0308 	add.w	r3, r7, #8
 80135d2:	2204      	movs	r2, #4
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7f8 fc54 	bl	800be82 <SecureElementDeriveAndStoreKey>
 80135da:	4603      	mov	r3, r0
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d001      	beq.n	80135e4 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80135e0:	230f      	movs	r3, #15
 80135e2:	e000      	b.n	80135e6 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80135e4:	2300      	movs	r3, #0
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3718      	adds	r7, #24
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}

080135ee <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80135ee:	b580      	push	{r7, lr}
 80135f0:	b086      	sub	sp, #24
 80135f2:	af00      	add	r7, sp, #0
 80135f4:	4603      	mov	r3, r0
 80135f6:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80135f8:	79fb      	ldrb	r3, [r7, #7]
 80135fa:	2b04      	cmp	r3, #4
 80135fc:	d001      	beq.n	8013602 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80135fe:	230b      	movs	r3, #11
 8013600:	e014      	b.n	801362c <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8013602:	2300      	movs	r3, #0
 8013604:	60bb      	str	r3, [r7, #8]
 8013606:	f107 030c 	add.w	r3, r7, #12
 801360a:	2200      	movs	r2, #0
 801360c:	601a      	str	r2, [r3, #0]
 801360e:	605a      	str	r2, [r3, #4]
 8013610:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013612:	79f9      	ldrb	r1, [r7, #7]
 8013614:	f107 0308 	add.w	r3, r7, #8
 8013618:	227f      	movs	r2, #127	; 0x7f
 801361a:	4618      	mov	r0, r3
 801361c:	f7f8 fc31 	bl	800be82 <SecureElementDeriveAndStoreKey>
 8013620:	4603      	mov	r3, r0
 8013622:	2b00      	cmp	r3, #0
 8013624:	d001      	beq.n	801362a <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013626:	230f      	movs	r3, #15
 8013628:	e000      	b.n	801362c <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801362a:	2300      	movs	r3, #0
}
 801362c:	4618      	mov	r0, r3
 801362e:	3718      	adds	r7, #24
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}

08013634 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b084      	sub	sp, #16
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d003      	beq.n	801364a <LoRaMacParserJoinAccept+0x16>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d101      	bne.n	801364e <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801364a:	2302      	movs	r3, #2
 801364c:	e0b9      	b.n	80137c2 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 801364e:	2300      	movs	r3, #0
 8013650:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681a      	ldr	r2, [r3, #0]
 8013656:	89fb      	ldrh	r3, [r7, #14]
 8013658:	1c59      	adds	r1, r3, #1
 801365a:	81f9      	strh	r1, [r7, #14]
 801365c:	4413      	add	r3, r2
 801365e:	781a      	ldrb	r2, [r3, #0]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	1d98      	adds	r0, r3, #6
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681a      	ldr	r2, [r3, #0]
 801366c:	89fb      	ldrh	r3, [r7, #14]
 801366e:	4413      	add	r3, r2
 8013670:	2203      	movs	r2, #3
 8013672:	4619      	mov	r1, r3
 8013674:	f002 fe31 	bl	80162da <memcpy1>
    bufItr = bufItr + 3;
 8013678:	89fb      	ldrh	r3, [r7, #14]
 801367a:	3303      	adds	r3, #3
 801367c:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	f103 0009 	add.w	r0, r3, #9
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	681a      	ldr	r2, [r3, #0]
 8013688:	89fb      	ldrh	r3, [r7, #14]
 801368a:	4413      	add	r3, r2
 801368c:	2203      	movs	r2, #3
 801368e:	4619      	mov	r1, r3
 8013690:	f002 fe23 	bl	80162da <memcpy1>
    bufItr = bufItr + 3;
 8013694:	89fb      	ldrh	r3, [r7, #14]
 8013696:	3303      	adds	r3, #3
 8013698:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	681a      	ldr	r2, [r3, #0]
 801369e:	89fb      	ldrh	r3, [r7, #14]
 80136a0:	1c59      	adds	r1, r3, #1
 80136a2:	81f9      	strh	r1, [r7, #14]
 80136a4:	4413      	add	r3, r2
 80136a6:	781b      	ldrb	r3, [r3, #0]
 80136a8:	461a      	mov	r2, r3
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681a      	ldr	r2, [r3, #0]
 80136b2:	89fb      	ldrh	r3, [r7, #14]
 80136b4:	1c59      	adds	r1, r3, #1
 80136b6:	81f9      	strh	r1, [r7, #14]
 80136b8:	4413      	add	r3, r2
 80136ba:	781b      	ldrb	r3, [r3, #0]
 80136bc:	021a      	lsls	r2, r3, #8
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	68db      	ldr	r3, [r3, #12]
 80136c2:	431a      	orrs	r2, r3
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681a      	ldr	r2, [r3, #0]
 80136cc:	89fb      	ldrh	r3, [r7, #14]
 80136ce:	1c59      	adds	r1, r3, #1
 80136d0:	81f9      	strh	r1, [r7, #14]
 80136d2:	4413      	add	r3, r2
 80136d4:	781b      	ldrb	r3, [r3, #0]
 80136d6:	041a      	lsls	r2, r3, #16
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	431a      	orrs	r2, r3
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	89fb      	ldrh	r3, [r7, #14]
 80136e8:	1c59      	adds	r1, r3, #1
 80136ea:	81f9      	strh	r1, [r7, #14]
 80136ec:	4413      	add	r3, r2
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	061a      	lsls	r2, r3, #24
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	68db      	ldr	r3, [r3, #12]
 80136f6:	431a      	orrs	r2, r3
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	89fb      	ldrh	r3, [r7, #14]
 8013702:	1c59      	adds	r1, r3, #1
 8013704:	81f9      	strh	r1, [r7, #14]
 8013706:	4413      	add	r3, r2
 8013708:	781a      	ldrb	r2, [r3, #0]
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681a      	ldr	r2, [r3, #0]
 8013712:	89fb      	ldrh	r3, [r7, #14]
 8013714:	1c59      	adds	r1, r3, #1
 8013716:	81f9      	strh	r1, [r7, #14]
 8013718:	4413      	add	r3, r2
 801371a:	781a      	ldrb	r2, [r3, #0]
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	791b      	ldrb	r3, [r3, #4]
 8013724:	1f1a      	subs	r2, r3, #4
 8013726:	89fb      	ldrh	r3, [r7, #14]
 8013728:	1ad3      	subs	r3, r2, r3
 801372a:	2b10      	cmp	r3, #16
 801372c:	d10e      	bne.n	801374c <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f103 0012 	add.w	r0, r3, #18
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681a      	ldr	r2, [r3, #0]
 8013738:	89fb      	ldrh	r3, [r7, #14]
 801373a:	4413      	add	r3, r2
 801373c:	2210      	movs	r2, #16
 801373e:	4619      	mov	r1, r3
 8013740:	f002 fdcb 	bl	80162da <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013744:	89fb      	ldrh	r3, [r7, #14]
 8013746:	3310      	adds	r3, #16
 8013748:	81fb      	strh	r3, [r7, #14]
 801374a:	e008      	b.n	801375e <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	791b      	ldrb	r3, [r3, #4]
 8013750:	1f1a      	subs	r2, r3, #4
 8013752:	89fb      	ldrh	r3, [r7, #14]
 8013754:	1ad3      	subs	r3, r2, r3
 8013756:	2b00      	cmp	r3, #0
 8013758:	dd01      	ble.n	801375e <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 801375a:	2301      	movs	r3, #1
 801375c:	e031      	b.n	80137c2 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681a      	ldr	r2, [r3, #0]
 8013762:	89fb      	ldrh	r3, [r7, #14]
 8013764:	1c59      	adds	r1, r3, #1
 8013766:	81f9      	strh	r1, [r7, #14]
 8013768:	4413      	add	r3, r2
 801376a:	781b      	ldrb	r3, [r3, #0]
 801376c:	461a      	mov	r2, r3
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681a      	ldr	r2, [r3, #0]
 8013776:	89fb      	ldrh	r3, [r7, #14]
 8013778:	1c59      	adds	r1, r3, #1
 801377a:	81f9      	strh	r1, [r7, #14]
 801377c:	4413      	add	r3, r2
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	021a      	lsls	r2, r3, #8
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013786:	431a      	orrs	r2, r3
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	89fb      	ldrh	r3, [r7, #14]
 8013792:	1c59      	adds	r1, r3, #1
 8013794:	81f9      	strh	r1, [r7, #14]
 8013796:	4413      	add	r3, r2
 8013798:	781b      	ldrb	r3, [r3, #0]
 801379a:	041a      	lsls	r2, r3, #16
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137a0:	431a      	orrs	r2, r3
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681a      	ldr	r2, [r3, #0]
 80137aa:	89fb      	ldrh	r3, [r7, #14]
 80137ac:	1c59      	adds	r1, r3, #1
 80137ae:	81f9      	strh	r1, [r7, #14]
 80137b0:	4413      	add	r3, r2
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	061a      	lsls	r2, r3, #24
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137ba:	431a      	orrs	r2, r3
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80137c0:	2300      	movs	r3, #0
}
 80137c2:	4618      	mov	r0, r3
 80137c4:	3710      	adds	r7, #16
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}

080137ca <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80137ca:	b580      	push	{r7, lr}
 80137cc:	b084      	sub	sp, #16
 80137ce:	af00      	add	r7, sp, #0
 80137d0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d003      	beq.n	80137e0 <LoRaMacParserData+0x16>
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d101      	bne.n	80137e4 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80137e0:	2302      	movs	r3, #2
 80137e2:	e0e2      	b.n	80139aa <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 80137e4:	2300      	movs	r3, #0
 80137e6:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681a      	ldr	r2, [r3, #0]
 80137ec:	89fb      	ldrh	r3, [r7, #14]
 80137ee:	1c59      	adds	r1, r3, #1
 80137f0:	81f9      	strh	r1, [r7, #14]
 80137f2:	4413      	add	r3, r2
 80137f4:	781a      	ldrb	r2, [r3, #0]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681a      	ldr	r2, [r3, #0]
 80137fe:	89fb      	ldrh	r3, [r7, #14]
 8013800:	1c59      	adds	r1, r3, #1
 8013802:	81f9      	strh	r1, [r7, #14]
 8013804:	4413      	add	r3, r2
 8013806:	781b      	ldrb	r3, [r3, #0]
 8013808:	461a      	mov	r2, r3
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681a      	ldr	r2, [r3, #0]
 8013812:	89fb      	ldrh	r3, [r7, #14]
 8013814:	1c59      	adds	r1, r3, #1
 8013816:	81f9      	strh	r1, [r7, #14]
 8013818:	4413      	add	r3, r2
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	021a      	lsls	r2, r3, #8
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	689b      	ldr	r3, [r3, #8]
 8013822:	431a      	orrs	r2, r3
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	681a      	ldr	r2, [r3, #0]
 801382c:	89fb      	ldrh	r3, [r7, #14]
 801382e:	1c59      	adds	r1, r3, #1
 8013830:	81f9      	strh	r1, [r7, #14]
 8013832:	4413      	add	r3, r2
 8013834:	781b      	ldrb	r3, [r3, #0]
 8013836:	041a      	lsls	r2, r3, #16
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	689b      	ldr	r3, [r3, #8]
 801383c:	431a      	orrs	r2, r3
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681a      	ldr	r2, [r3, #0]
 8013846:	89fb      	ldrh	r3, [r7, #14]
 8013848:	1c59      	adds	r1, r3, #1
 801384a:	81f9      	strh	r1, [r7, #14]
 801384c:	4413      	add	r3, r2
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	061a      	lsls	r2, r3, #24
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	689b      	ldr	r3, [r3, #8]
 8013856:	431a      	orrs	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	89fb      	ldrh	r3, [r7, #14]
 8013862:	1c59      	adds	r1, r3, #1
 8013864:	81f9      	strh	r1, [r7, #14]
 8013866:	4413      	add	r3, r2
 8013868:	781a      	ldrb	r2, [r3, #0]
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	681a      	ldr	r2, [r3, #0]
 8013872:	89fb      	ldrh	r3, [r7, #14]
 8013874:	1c59      	adds	r1, r3, #1
 8013876:	81f9      	strh	r1, [r7, #14]
 8013878:	4413      	add	r3, r2
 801387a:	781b      	ldrb	r3, [r3, #0]
 801387c:	b29a      	uxth	r2, r3
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	681a      	ldr	r2, [r3, #0]
 8013886:	89fb      	ldrh	r3, [r7, #14]
 8013888:	1c59      	adds	r1, r3, #1
 801388a:	81f9      	strh	r1, [r7, #14]
 801388c:	4413      	add	r3, r2
 801388e:	781b      	ldrb	r3, [r3, #0]
 8013890:	0219      	lsls	r1, r3, #8
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	89db      	ldrh	r3, [r3, #14]
 8013896:	b21a      	sxth	r2, r3
 8013898:	b20b      	sxth	r3, r1
 801389a:	4313      	orrs	r3, r2
 801389c:	b21b      	sxth	r3, r3
 801389e:	b29a      	uxth	r2, r3
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f103 0010 	add.w	r0, r3, #16
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	89fb      	ldrh	r3, [r7, #14]
 80138b0:	18d1      	adds	r1, r2, r3
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	7b1b      	ldrb	r3, [r3, #12]
 80138b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80138ba:	b2db      	uxtb	r3, r3
 80138bc:	b29b      	uxth	r3, r3
 80138be:	461a      	mov	r2, r3
 80138c0:	f002 fd0b 	bl	80162da <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	7b1b      	ldrb	r3, [r3, #12]
 80138c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	89fb      	ldrh	r3, [r7, #14]
 80138d2:	4413      	add	r3, r2
 80138d4:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	2200      	movs	r2, #0
 80138da:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	2200      	movs	r2, #0
 80138e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	791b      	ldrb	r3, [r3, #4]
 80138ea:	461a      	mov	r2, r3
 80138ec:	89fb      	ldrh	r3, [r7, #14]
 80138ee:	1ad3      	subs	r3, r2, r3
 80138f0:	2b04      	cmp	r3, #4
 80138f2:	dd28      	ble.n	8013946 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681a      	ldr	r2, [r3, #0]
 80138f8:	89fb      	ldrh	r3, [r7, #14]
 80138fa:	1c59      	adds	r1, r3, #1
 80138fc:	81f9      	strh	r1, [r7, #14]
 80138fe:	4413      	add	r3, r2
 8013900:	781a      	ldrb	r2, [r3, #0]
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	791a      	ldrb	r2, [r3, #4]
 801390c:	89fb      	ldrh	r3, [r7, #14]
 801390e:	b2db      	uxtb	r3, r3
 8013910:	1ad3      	subs	r3, r2, r3
 8013912:	b2db      	uxtb	r3, r3
 8013914:	3b04      	subs	r3, #4
 8013916:	b2da      	uxtb	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681a      	ldr	r2, [r3, #0]
 8013926:	89fb      	ldrh	r3, [r7, #14]
 8013928:	18d1      	adds	r1, r2, r3
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013930:	b29b      	uxth	r3, r3
 8013932:	461a      	mov	r2, r3
 8013934:	f002 fcd1 	bl	80162da <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801393e:	b29a      	uxth	r2, r3
 8013940:	89fb      	ldrh	r3, [r7, #14]
 8013942:	4413      	add	r3, r2
 8013944:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	681a      	ldr	r2, [r3, #0]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	791b      	ldrb	r3, [r3, #4]
 801394e:	3b04      	subs	r3, #4
 8013950:	4413      	add	r3, r2
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	461a      	mov	r2, r3
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6819      	ldr	r1, [r3, #0]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	791b      	ldrb	r3, [r3, #4]
 8013966:	3b03      	subs	r3, #3
 8013968:	440b      	add	r3, r1
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	021b      	lsls	r3, r3, #8
 801396e:	431a      	orrs	r2, r3
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6819      	ldr	r1, [r3, #0]
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	791b      	ldrb	r3, [r3, #4]
 8013980:	3b02      	subs	r3, #2
 8013982:	440b      	add	r3, r1
 8013984:	781b      	ldrb	r3, [r3, #0]
 8013986:	041b      	lsls	r3, r3, #16
 8013988:	431a      	orrs	r2, r3
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	6819      	ldr	r1, [r3, #0]
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	791b      	ldrb	r3, [r3, #4]
 801399a:	3b01      	subs	r3, #1
 801399c:	440b      	add	r3, r1
 801399e:	781b      	ldrb	r3, [r3, #0]
 80139a0:	061b      	lsls	r3, r3, #24
 80139a2:	431a      	orrs	r2, r3
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80139a8:	2300      	movs	r3, #0
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	3710      	adds	r7, #16
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}

080139b2 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80139b2:	b580      	push	{r7, lr}
 80139b4:	b084      	sub	sp, #16
 80139b6:	af00      	add	r7, sp, #0
 80139b8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d003      	beq.n	80139c8 <LoRaMacSerializerJoinRequest+0x16>
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d101      	bne.n	80139cc <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80139c8:	2301      	movs	r3, #1
 80139ca:	e070      	b.n	8013aae <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80139cc:	2300      	movs	r3, #0
 80139ce:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	791b      	ldrb	r3, [r3, #4]
 80139d4:	2b16      	cmp	r3, #22
 80139d6:	d801      	bhi.n	80139dc <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80139d8:	2302      	movs	r3, #2
 80139da:	e068      	b.n	8013aae <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	681a      	ldr	r2, [r3, #0]
 80139e0:	89fb      	ldrh	r3, [r7, #14]
 80139e2:	1c59      	adds	r1, r3, #1
 80139e4:	81f9      	strh	r1, [r7, #14]
 80139e6:	4413      	add	r3, r2
 80139e8:	687a      	ldr	r2, [r7, #4]
 80139ea:	7952      	ldrb	r2, [r2, #5]
 80139ec:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	681a      	ldr	r2, [r3, #0]
 80139f2:	89fb      	ldrh	r3, [r7, #14]
 80139f4:	18d0      	adds	r0, r2, r3
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	3306      	adds	r3, #6
 80139fa:	2208      	movs	r2, #8
 80139fc:	4619      	mov	r1, r3
 80139fe:	f002 fc87 	bl	8016310 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013a02:	89fb      	ldrh	r3, [r7, #14]
 8013a04:	3308      	adds	r3, #8
 8013a06:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681a      	ldr	r2, [r3, #0]
 8013a0c:	89fb      	ldrh	r3, [r7, #14]
 8013a0e:	18d0      	adds	r0, r2, r3
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	330e      	adds	r3, #14
 8013a14:	2208      	movs	r2, #8
 8013a16:	4619      	mov	r1, r3
 8013a18:	f002 fc7a 	bl	8016310 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013a1c:	89fb      	ldrh	r3, [r7, #14]
 8013a1e:	3308      	adds	r3, #8
 8013a20:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	8ad9      	ldrh	r1, [r3, #22]
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681a      	ldr	r2, [r3, #0]
 8013a2a:	89fb      	ldrh	r3, [r7, #14]
 8013a2c:	1c58      	adds	r0, r3, #1
 8013a2e:	81f8      	strh	r0, [r7, #14]
 8013a30:	4413      	add	r3, r2
 8013a32:	b2ca      	uxtb	r2, r1
 8013a34:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	8adb      	ldrh	r3, [r3, #22]
 8013a3a:	0a1b      	lsrs	r3, r3, #8
 8013a3c:	b299      	uxth	r1, r3
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	89fb      	ldrh	r3, [r7, #14]
 8013a44:	1c58      	adds	r0, r3, #1
 8013a46:	81f8      	strh	r0, [r7, #14]
 8013a48:	4413      	add	r3, r2
 8013a4a:	b2ca      	uxtb	r2, r1
 8013a4c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6999      	ldr	r1, [r3, #24]
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681a      	ldr	r2, [r3, #0]
 8013a56:	89fb      	ldrh	r3, [r7, #14]
 8013a58:	1c58      	adds	r0, r3, #1
 8013a5a:	81f8      	strh	r0, [r7, #14]
 8013a5c:	4413      	add	r3, r2
 8013a5e:	b2ca      	uxtb	r2, r1
 8013a60:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	699b      	ldr	r3, [r3, #24]
 8013a66:	0a19      	lsrs	r1, r3, #8
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	681a      	ldr	r2, [r3, #0]
 8013a6c:	89fb      	ldrh	r3, [r7, #14]
 8013a6e:	1c58      	adds	r0, r3, #1
 8013a70:	81f8      	strh	r0, [r7, #14]
 8013a72:	4413      	add	r3, r2
 8013a74:	b2ca      	uxtb	r2, r1
 8013a76:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	699b      	ldr	r3, [r3, #24]
 8013a7c:	0c19      	lsrs	r1, r3, #16
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681a      	ldr	r2, [r3, #0]
 8013a82:	89fb      	ldrh	r3, [r7, #14]
 8013a84:	1c58      	adds	r0, r3, #1
 8013a86:	81f8      	strh	r0, [r7, #14]
 8013a88:	4413      	add	r3, r2
 8013a8a:	b2ca      	uxtb	r2, r1
 8013a8c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	699b      	ldr	r3, [r3, #24]
 8013a92:	0e19      	lsrs	r1, r3, #24
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	681a      	ldr	r2, [r3, #0]
 8013a98:	89fb      	ldrh	r3, [r7, #14]
 8013a9a:	1c58      	adds	r0, r3, #1
 8013a9c:	81f8      	strh	r0, [r7, #14]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	b2ca      	uxtb	r2, r1
 8013aa2:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013aa4:	89fb      	ldrh	r3, [r7, #14]
 8013aa6:	b2da      	uxtb	r2, r3
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013aac:	2300      	movs	r3, #0
}
 8013aae:	4618      	mov	r0, r3
 8013ab0:	3710      	adds	r7, #16
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}

08013ab6 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013ab6:	b580      	push	{r7, lr}
 8013ab8:	b084      	sub	sp, #16
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d003      	beq.n	8013acc <LoRaMacSerializerData+0x16>
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d101      	bne.n	8013ad0 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013acc:	2301      	movs	r3, #1
 8013ace:	e0e5      	b.n	8013c9c <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013ad4:	2308      	movs	r3, #8
 8013ad6:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	7b1b      	ldrb	r3, [r3, #12]
 8013adc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	b29a      	uxth	r2, r3
 8013ae4:	89bb      	ldrh	r3, [r7, #12]
 8013ae6:	4413      	add	r3, r2
 8013ae8:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d002      	beq.n	8013afa <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013af4:	89bb      	ldrh	r3, [r7, #12]
 8013af6:	3301      	adds	r3, #1
 8013af8:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b00:	b29a      	uxth	r2, r3
 8013b02:	89bb      	ldrh	r3, [r7, #12]
 8013b04:	4413      	add	r3, r2
 8013b06:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013b08:	89bb      	ldrh	r3, [r7, #12]
 8013b0a:	3304      	adds	r3, #4
 8013b0c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	791b      	ldrb	r3, [r3, #4]
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	89ba      	ldrh	r2, [r7, #12]
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d901      	bls.n	8013b1e <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013b1a:	2302      	movs	r3, #2
 8013b1c:	e0be      	b.n	8013c9c <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681a      	ldr	r2, [r3, #0]
 8013b22:	89fb      	ldrh	r3, [r7, #14]
 8013b24:	1c59      	adds	r1, r3, #1
 8013b26:	81f9      	strh	r1, [r7, #14]
 8013b28:	4413      	add	r3, r2
 8013b2a:	687a      	ldr	r2, [r7, #4]
 8013b2c:	7952      	ldrb	r2, [r2, #5]
 8013b2e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	6899      	ldr	r1, [r3, #8]
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681a      	ldr	r2, [r3, #0]
 8013b38:	89fb      	ldrh	r3, [r7, #14]
 8013b3a:	1c58      	adds	r0, r3, #1
 8013b3c:	81f8      	strh	r0, [r7, #14]
 8013b3e:	4413      	add	r3, r2
 8013b40:	b2ca      	uxtb	r2, r1
 8013b42:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	689b      	ldr	r3, [r3, #8]
 8013b48:	0a19      	lsrs	r1, r3, #8
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681a      	ldr	r2, [r3, #0]
 8013b4e:	89fb      	ldrh	r3, [r7, #14]
 8013b50:	1c58      	adds	r0, r3, #1
 8013b52:	81f8      	strh	r0, [r7, #14]
 8013b54:	4413      	add	r3, r2
 8013b56:	b2ca      	uxtb	r2, r1
 8013b58:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	689b      	ldr	r3, [r3, #8]
 8013b5e:	0c19      	lsrs	r1, r3, #16
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	681a      	ldr	r2, [r3, #0]
 8013b64:	89fb      	ldrh	r3, [r7, #14]
 8013b66:	1c58      	adds	r0, r3, #1
 8013b68:	81f8      	strh	r0, [r7, #14]
 8013b6a:	4413      	add	r3, r2
 8013b6c:	b2ca      	uxtb	r2, r1
 8013b6e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	689b      	ldr	r3, [r3, #8]
 8013b74:	0e19      	lsrs	r1, r3, #24
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	681a      	ldr	r2, [r3, #0]
 8013b7a:	89fb      	ldrh	r3, [r7, #14]
 8013b7c:	1c58      	adds	r0, r3, #1
 8013b7e:	81f8      	strh	r0, [r7, #14]
 8013b80:	4413      	add	r3, r2
 8013b82:	b2ca      	uxtb	r2, r1
 8013b84:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	89fb      	ldrh	r3, [r7, #14]
 8013b8c:	1c59      	adds	r1, r3, #1
 8013b8e:	81f9      	strh	r1, [r7, #14]
 8013b90:	4413      	add	r3, r2
 8013b92:	687a      	ldr	r2, [r7, #4]
 8013b94:	7b12      	ldrb	r2, [r2, #12]
 8013b96:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	89d9      	ldrh	r1, [r3, #14]
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	681a      	ldr	r2, [r3, #0]
 8013ba0:	89fb      	ldrh	r3, [r7, #14]
 8013ba2:	1c58      	adds	r0, r3, #1
 8013ba4:	81f8      	strh	r0, [r7, #14]
 8013ba6:	4413      	add	r3, r2
 8013ba8:	b2ca      	uxtb	r2, r1
 8013baa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	89db      	ldrh	r3, [r3, #14]
 8013bb0:	0a1b      	lsrs	r3, r3, #8
 8013bb2:	b299      	uxth	r1, r3
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681a      	ldr	r2, [r3, #0]
 8013bb8:	89fb      	ldrh	r3, [r7, #14]
 8013bba:	1c58      	adds	r0, r3, #1
 8013bbc:	81f8      	strh	r0, [r7, #14]
 8013bbe:	4413      	add	r3, r2
 8013bc0:	b2ca      	uxtb	r2, r1
 8013bc2:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	681a      	ldr	r2, [r3, #0]
 8013bc8:	89fb      	ldrh	r3, [r7, #14]
 8013bca:	18d0      	adds	r0, r2, r3
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f103 0110 	add.w	r1, r3, #16
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	7b1b      	ldrb	r3, [r3, #12]
 8013bd6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013bda:	b2db      	uxtb	r3, r3
 8013bdc:	b29b      	uxth	r3, r3
 8013bde:	461a      	mov	r2, r3
 8013be0:	f002 fb7b 	bl	80162da <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	7b1b      	ldrb	r3, [r3, #12]
 8013be8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013bec:	b2db      	uxtb	r3, r3
 8013bee:	b29a      	uxth	r2, r3
 8013bf0:	89fb      	ldrh	r3, [r7, #14]
 8013bf2:	4413      	add	r3, r2
 8013bf4:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d009      	beq.n	8013c14 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	681a      	ldr	r2, [r3, #0]
 8013c04:	89fb      	ldrh	r3, [r7, #14]
 8013c06:	1c59      	adds	r1, r3, #1
 8013c08:	81f9      	strh	r1, [r7, #14]
 8013c0a:	4413      	add	r3, r2
 8013c0c:	687a      	ldr	r2, [r7, #4]
 8013c0e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013c12:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681a      	ldr	r2, [r3, #0]
 8013c18:	89fb      	ldrh	r3, [r7, #14]
 8013c1a:	18d0      	adds	r0, r2, r3
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c26:	b29b      	uxth	r3, r3
 8013c28:	461a      	mov	r2, r3
 8013c2a:	f002 fb56 	bl	80162da <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	89fb      	ldrh	r3, [r7, #14]
 8013c38:	4413      	add	r3, r2
 8013c3a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	681a      	ldr	r2, [r3, #0]
 8013c44:	89fb      	ldrh	r3, [r7, #14]
 8013c46:	1c58      	adds	r0, r3, #1
 8013c48:	81f8      	strh	r0, [r7, #14]
 8013c4a:	4413      	add	r3, r2
 8013c4c:	b2ca      	uxtb	r2, r1
 8013c4e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c54:	0a19      	lsrs	r1, r3, #8
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681a      	ldr	r2, [r3, #0]
 8013c5a:	89fb      	ldrh	r3, [r7, #14]
 8013c5c:	1c58      	adds	r0, r3, #1
 8013c5e:	81f8      	strh	r0, [r7, #14]
 8013c60:	4413      	add	r3, r2
 8013c62:	b2ca      	uxtb	r2, r1
 8013c64:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c6a:	0c19      	lsrs	r1, r3, #16
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681a      	ldr	r2, [r3, #0]
 8013c70:	89fb      	ldrh	r3, [r7, #14]
 8013c72:	1c58      	adds	r0, r3, #1
 8013c74:	81f8      	strh	r0, [r7, #14]
 8013c76:	4413      	add	r3, r2
 8013c78:	b2ca      	uxtb	r2, r1
 8013c7a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c80:	0e19      	lsrs	r1, r3, #24
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681a      	ldr	r2, [r3, #0]
 8013c86:	89fb      	ldrh	r3, [r7, #14]
 8013c88:	1c58      	adds	r0, r3, #1
 8013c8a:	81f8      	strh	r0, [r7, #14]
 8013c8c:	4413      	add	r3, r2
 8013c8e:	b2ca      	uxtb	r2, r1
 8013c90:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013c92:	89fb      	ldrh	r3, [r7, #14]
 8013c94:	b2da      	uxtb	r2, r3
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013c9a:	2300      	movs	r3, #0
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3710      	adds	r7, #16
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8013ca4:	b480      	push	{r7}
 8013ca6:	b083      	sub	sp, #12
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	4603      	mov	r3, r0
 8013cac:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013cae:	79fb      	ldrb	r3, [r7, #7]
 8013cb0:	2b05      	cmp	r3, #5
 8013cb2:	d101      	bne.n	8013cb8 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	e000      	b.n	8013cba <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8013cb8:	2300      	movs	r3, #0
        }
    }
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	370c      	adds	r7, #12
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bc80      	pop	{r7}
 8013cc2:	4770      	bx	lr

08013cc4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b084      	sub	sp, #16
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	4603      	mov	r3, r0
 8013ccc:	6039      	str	r1, [r7, #0]
 8013cce:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	60bb      	str	r3, [r7, #8]
    switch( region )
 8013cd4:	79fb      	ldrb	r3, [r7, #7]
 8013cd6:	2b05      	cmp	r3, #5
 8013cd8:	d105      	bne.n	8013ce6 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8013cda:	6838      	ldr	r0, [r7, #0]
 8013cdc:	f001 f992 	bl	8015004 <RegionEU868GetPhyParam>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	60fb      	str	r3, [r7, #12]
 8013ce4:	e001      	b.n	8013cea <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8013ce6:	68bb      	ldr	r3, [r7, #8]
 8013ce8:	60fb      	str	r3, [r7, #12]
 8013cea:	2300      	movs	r3, #0
 8013cec:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3710      	adds	r7, #16
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}

08013cf6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8013cf6:	b580      	push	{r7, lr}
 8013cf8:	b082      	sub	sp, #8
 8013cfa:	af00      	add	r7, sp, #0
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	6039      	str	r1, [r7, #0]
 8013d00:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013d02:	79fb      	ldrb	r3, [r7, #7]
 8013d04:	2b05      	cmp	r3, #5
 8013d06:	d103      	bne.n	8013d10 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8013d08:	6838      	ldr	r0, [r7, #0]
 8013d0a:	f001 fac5 	bl	8015298 <RegionEU868SetBandTxDone>
 8013d0e:	e000      	b.n	8013d12 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013d10:	bf00      	nop
        }
    }
}
 8013d12:	3708      	adds	r7, #8
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}

08013d18 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b082      	sub	sp, #8
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	4603      	mov	r3, r0
 8013d20:	6039      	str	r1, [r7, #0]
 8013d22:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013d24:	79fb      	ldrb	r3, [r7, #7]
 8013d26:	2b05      	cmp	r3, #5
 8013d28:	d103      	bne.n	8013d32 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8013d2a:	6838      	ldr	r0, [r7, #0]
 8013d2c:	f001 fae0 	bl	80152f0 <RegionEU868InitDefaults>
 8013d30:	e000      	b.n	8013d34 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8013d32:	bf00      	nop
        }
    }
}
 8013d34:	bf00      	nop
 8013d36:	3708      	adds	r7, #8
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}

08013d3c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b082      	sub	sp, #8
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	4603      	mov	r3, r0
 8013d44:	6039      	str	r1, [r7, #0]
 8013d46:	71fb      	strb	r3, [r7, #7]
 8013d48:	4613      	mov	r3, r2
 8013d4a:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8013d4c:	79fb      	ldrb	r3, [r7, #7]
 8013d4e:	2b05      	cmp	r3, #5
 8013d50:	d106      	bne.n	8013d60 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013d52:	79bb      	ldrb	r3, [r7, #6]
 8013d54:	4619      	mov	r1, r3
 8013d56:	6838      	ldr	r0, [r7, #0]
 8013d58:	f001 fb66 	bl	8015428 <RegionEU868Verify>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	e000      	b.n	8013d62 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8013d60:	2300      	movs	r3, #0
        }
    }
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3708      	adds	r7, #8
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8013d6a:	b580      	push	{r7, lr}
 8013d6c:	b082      	sub	sp, #8
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	4603      	mov	r3, r0
 8013d72:	6039      	str	r1, [r7, #0]
 8013d74:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013d76:	79fb      	ldrb	r3, [r7, #7]
 8013d78:	2b05      	cmp	r3, #5
 8013d7a:	d103      	bne.n	8013d84 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8013d7c:	6838      	ldr	r0, [r7, #0]
 8013d7e:	f001 fbcf 	bl	8015520 <RegionEU868ApplyCFList>
 8013d82:	e000      	b.n	8013d86 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013d84:	bf00      	nop
        }
    }
}
 8013d86:	bf00      	nop
 8013d88:	3708      	adds	r7, #8
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}

08013d8e <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013d8e:	b580      	push	{r7, lr}
 8013d90:	b082      	sub	sp, #8
 8013d92:	af00      	add	r7, sp, #0
 8013d94:	4603      	mov	r3, r0
 8013d96:	6039      	str	r1, [r7, #0]
 8013d98:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013d9a:	79fb      	ldrb	r3, [r7, #7]
 8013d9c:	2b05      	cmp	r3, #5
 8013d9e:	d104      	bne.n	8013daa <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013da0:	6838      	ldr	r0, [r7, #0]
 8013da2:	f001 fc31 	bl	8015608 <RegionEU868ChanMaskSet>
 8013da6:	4603      	mov	r3, r0
 8013da8:	e000      	b.n	8013dac <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8013daa:	2300      	movs	r3, #0
        }
    }
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	3708      	adds	r7, #8
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}

08013db4 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b082      	sub	sp, #8
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	603b      	str	r3, [r7, #0]
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	71fb      	strb	r3, [r7, #7]
 8013dc0:	460b      	mov	r3, r1
 8013dc2:	71bb      	strb	r3, [r7, #6]
 8013dc4:	4613      	mov	r3, r2
 8013dc6:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013dc8:	79fb      	ldrb	r3, [r7, #7]
 8013dca:	2b05      	cmp	r3, #5
 8013dcc:	d107      	bne.n	8013dde <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013dce:	7979      	ldrb	r1, [r7, #5]
 8013dd0:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	683a      	ldr	r2, [r7, #0]
 8013dd8:	f001 fc40 	bl	801565c <RegionEU868ComputeRxWindowParameters>
 8013ddc:	e000      	b.n	8013de0 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8013dde:	bf00      	nop
        }
    }
}
 8013de0:	bf00      	nop
 8013de2:	3708      	adds	r7, #8
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}

08013de8 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b084      	sub	sp, #16
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	4603      	mov	r3, r0
 8013df0:	60b9      	str	r1, [r7, #8]
 8013df2:	607a      	str	r2, [r7, #4]
 8013df4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013df6:	7bfb      	ldrb	r3, [r7, #15]
 8013df8:	2b05      	cmp	r3, #5
 8013dfa:	d105      	bne.n	8013e08 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013dfc:	6879      	ldr	r1, [r7, #4]
 8013dfe:	68b8      	ldr	r0, [r7, #8]
 8013e00:	f001 fc86 	bl	8015710 <RegionEU868RxConfig>
 8013e04:	4603      	mov	r3, r0
 8013e06:	e000      	b.n	8013e0a <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013e08:	2300      	movs	r3, #0
        }
    }
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3710      	adds	r7, #16
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}

08013e12 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013e12:	b580      	push	{r7, lr}
 8013e14:	b084      	sub	sp, #16
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	60b9      	str	r1, [r7, #8]
 8013e1a:	607a      	str	r2, [r7, #4]
 8013e1c:	603b      	str	r3, [r7, #0]
 8013e1e:	4603      	mov	r3, r0
 8013e20:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013e22:	7bfb      	ldrb	r3, [r7, #15]
 8013e24:	2b05      	cmp	r3, #5
 8013e26:	d106      	bne.n	8013e36 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013e28:	683a      	ldr	r2, [r7, #0]
 8013e2a:	6879      	ldr	r1, [r7, #4]
 8013e2c:	68b8      	ldr	r0, [r7, #8]
 8013e2e:	f001 fd3f 	bl	80158b0 <RegionEU868TxConfig>
 8013e32:	4603      	mov	r3, r0
 8013e34:	e000      	b.n	8013e38 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013e36:	2300      	movs	r3, #0
        }
    }
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3710      	adds	r7, #16
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b086      	sub	sp, #24
 8013e44:	af02      	add	r7, sp, #8
 8013e46:	60b9      	str	r1, [r7, #8]
 8013e48:	607a      	str	r2, [r7, #4]
 8013e4a:	603b      	str	r3, [r7, #0]
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013e50:	7bfb      	ldrb	r3, [r7, #15]
 8013e52:	2b05      	cmp	r3, #5
 8013e54:	d109      	bne.n	8013e6a <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013e56:	69fb      	ldr	r3, [r7, #28]
 8013e58:	9300      	str	r3, [sp, #0]
 8013e5a:	69bb      	ldr	r3, [r7, #24]
 8013e5c:	683a      	ldr	r2, [r7, #0]
 8013e5e:	6879      	ldr	r1, [r7, #4]
 8013e60:	68b8      	ldr	r0, [r7, #8]
 8013e62:	f001 fdf5 	bl	8015a50 <RegionEU868LinkAdrReq>
 8013e66:	4603      	mov	r3, r0
 8013e68:	e000      	b.n	8013e6c <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8013e6a:	2300      	movs	r3, #0
        }
    }
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3710      	adds	r7, #16
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	6039      	str	r1, [r7, #0]
 8013e7e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e80:	79fb      	ldrb	r3, [r7, #7]
 8013e82:	2b05      	cmp	r3, #5
 8013e84:	d104      	bne.n	8013e90 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8013e86:	6838      	ldr	r0, [r7, #0]
 8013e88:	f001 ff04 	bl	8015c94 <RegionEU868RxParamSetupReq>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	e000      	b.n	8013e92 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013e90:	2300      	movs	r3, #0
        }
    }
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3708      	adds	r7, #8
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}

08013e9a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8013e9a:	b580      	push	{r7, lr}
 8013e9c:	b082      	sub	sp, #8
 8013e9e:	af00      	add	r7, sp, #0
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	6039      	str	r1, [r7, #0]
 8013ea4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013ea6:	79fb      	ldrb	r3, [r7, #7]
 8013ea8:	2b05      	cmp	r3, #5
 8013eaa:	d104      	bne.n	8013eb6 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8013eac:	6838      	ldr	r0, [r7, #0]
 8013eae:	f001 ff2f 	bl	8015d10 <RegionEU868NewChannelReq>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	e000      	b.n	8013eb8 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013eb6:	2300      	movs	r3, #0
        }
    }
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3708      	adds	r7, #8
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}

08013ec0 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	6039      	str	r1, [r7, #0]
 8013eca:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013ecc:	79fb      	ldrb	r3, [r7, #7]
 8013ece:	2b05      	cmp	r3, #5
 8013ed0:	d104      	bne.n	8013edc <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8013ed2:	6838      	ldr	r0, [r7, #0]
 8013ed4:	f001 ff7a 	bl	8015dcc <RegionEU868TxParamSetupReq>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	e000      	b.n	8013ede <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013edc:	2300      	movs	r3, #0
        }
    }
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3708      	adds	r7, #8
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}

08013ee6 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8013ee6:	b580      	push	{r7, lr}
 8013ee8:	b082      	sub	sp, #8
 8013eea:	af00      	add	r7, sp, #0
 8013eec:	4603      	mov	r3, r0
 8013eee:	6039      	str	r1, [r7, #0]
 8013ef0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013ef2:	79fb      	ldrb	r3, [r7, #7]
 8013ef4:	2b05      	cmp	r3, #5
 8013ef6:	d104      	bne.n	8013f02 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8013ef8:	6838      	ldr	r0, [r7, #0]
 8013efa:	f001 ff73 	bl	8015de4 <RegionEU868DlChannelReq>
 8013efe:	4603      	mov	r3, r0
 8013f00:	e000      	b.n	8013f04 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013f02:	2300      	movs	r3, #0
        }
    }
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	3708      	adds	r7, #8
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b082      	sub	sp, #8
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	4603      	mov	r3, r0
 8013f14:	71fb      	strb	r3, [r7, #7]
 8013f16:	460b      	mov	r3, r1
 8013f18:	71bb      	strb	r3, [r7, #6]
 8013f1a:	4613      	mov	r3, r2
 8013f1c:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013f1e:	79fb      	ldrb	r3, [r7, #7]
 8013f20:	2b05      	cmp	r3, #5
 8013f22:	d108      	bne.n	8013f36 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8013f24:	797a      	ldrb	r2, [r7, #5]
 8013f26:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013f2a:	4611      	mov	r1, r2
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f001 ff9d 	bl	8015e6c <RegionEU868AlternateDr>
 8013f32:	4603      	mov	r3, r0
 8013f34:	e000      	b.n	8013f38 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8013f36:	2300      	movs	r3, #0
        }
    }
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3708      	adds	r7, #8
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b084      	sub	sp, #16
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60b9      	str	r1, [r7, #8]
 8013f48:	607a      	str	r2, [r7, #4]
 8013f4a:	603b      	str	r3, [r7, #0]
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f50:	7bfb      	ldrb	r3, [r7, #15]
 8013f52:	2b05      	cmp	r3, #5
 8013f54:	d107      	bne.n	8013f66 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8013f56:	69bb      	ldr	r3, [r7, #24]
 8013f58:	683a      	ldr	r2, [r7, #0]
 8013f5a:	6879      	ldr	r1, [r7, #4]
 8013f5c:	68b8      	ldr	r0, [r7, #8]
 8013f5e:	f001 ff95 	bl	8015e8c <RegionEU868NextChannel>
 8013f62:	4603      	mov	r3, r0
 8013f64:	e000      	b.n	8013f68 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013f66:	2309      	movs	r3, #9
        }
    }
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3710      	adds	r7, #16
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	4603      	mov	r3, r0
 8013f78:	6039      	str	r1, [r7, #0]
 8013f7a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013f7c:	79fb      	ldrb	r3, [r7, #7]
 8013f7e:	2b05      	cmp	r3, #5
 8013f80:	d103      	bne.n	8013f8a <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8013f82:	6838      	ldr	r0, [r7, #0]
 8013f84:	f002 f8fa 	bl	801617c <RegionEU868SetContinuousWave>
 8013f88:	e000      	b.n	8013f8c <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8013f8a:	bf00      	nop
        }
    }
}
 8013f8c:	bf00      	nop
 8013f8e:	3708      	adds	r7, #8
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}

08013f94 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8013f94:	b590      	push	{r4, r7, lr}
 8013f96:	b083      	sub	sp, #12
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	4604      	mov	r4, r0
 8013f9c:	4608      	mov	r0, r1
 8013f9e:	4611      	mov	r1, r2
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	4623      	mov	r3, r4
 8013fa4:	71fb      	strb	r3, [r7, #7]
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	71bb      	strb	r3, [r7, #6]
 8013faa:	460b      	mov	r3, r1
 8013fac:	717b      	strb	r3, [r7, #5]
 8013fae:	4613      	mov	r3, r2
 8013fb0:	713b      	strb	r3, [r7, #4]
    switch( region )
 8013fb2:	79fb      	ldrb	r3, [r7, #7]
 8013fb4:	2b05      	cmp	r3, #5
 8013fb6:	d109      	bne.n	8013fcc <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8013fb8:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8013fbc:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013fc0:	79bb      	ldrb	r3, [r7, #6]
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f002 f928 	bl	8016218 <RegionEU868ApplyDrOffset>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	e000      	b.n	8013fce <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8013fcc:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	370c      	adds	r7, #12
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd90      	pop	{r4, r7, pc}
	...

08013fd8 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8013fd8:	b480      	push	{r7}
 8013fda:	b083      	sub	sp, #12
 8013fdc:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8013fde:	4b04      	ldr	r3, [pc, #16]	; (8013ff0 <RegionGetVersion+0x18>)
 8013fe0:	607b      	str	r3, [r7, #4]

    return version;
 8013fe2:	687b      	ldr	r3, [r7, #4]
}
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	370c      	adds	r7, #12
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bc80      	pop	{r7}
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop
 8013ff0:	01000300 	.word	0x01000300

08013ff4 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	b087      	sub	sp, #28
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	60f8      	str	r0, [r7, #12]
 8013ffc:	4608      	mov	r0, r1
 8013ffe:	4639      	mov	r1, r7
 8014000:	e881 000c 	stmia.w	r1, {r2, r3}
 8014004:	4603      	mov	r3, r0
 8014006:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	881b      	ldrh	r3, [r3, #0]
 801400c:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801400e:	7afb      	ldrb	r3, [r7, #11]
 8014010:	f083 0301 	eor.w	r3, r3, #1
 8014014:	b2db      	uxtb	r3, r3
 8014016:	2b00      	cmp	r3, #0
 8014018:	d01b      	beq.n	8014052 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 801401a:	f242 7310 	movw	r3, #10000	; 0x2710
 801401e:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8014026:	d202      	bcs.n	801402e <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014028:	2364      	movs	r3, #100	; 0x64
 801402a:	82bb      	strh	r3, [r7, #20]
 801402c:	e00b      	b.n	8014046 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8014034:	4293      	cmp	r3, r2
 8014036:	d803      	bhi.n	8014040 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801403c:	82bb      	strh	r3, [r7, #20]
 801403e:	e002      	b.n	8014046 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014040:	f242 7310 	movw	r3, #10000	; 0x2710
 8014044:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8014046:	8aba      	ldrh	r2, [r7, #20]
 8014048:	8afb      	ldrh	r3, [r7, #22]
 801404a:	4293      	cmp	r3, r2
 801404c:	bf38      	it	cc
 801404e:	4613      	movcc	r3, r2
 8014050:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8014052:	8afb      	ldrh	r3, [r7, #22]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d101      	bne.n	801405c <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014058:	2301      	movs	r3, #1
 801405a:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801405c:	8afb      	ldrh	r3, [r7, #22]
}
 801405e:	4618      	mov	r0, r3
 8014060:	371c      	adds	r7, #28
 8014062:	46bd      	mov	sp, r7
 8014064:	bc80      	pop	{r7}
 8014066:	4770      	bx	lr

08014068 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b08e      	sub	sp, #56	; 0x38
 801406c:	af02      	add	r7, sp, #8
 801406e:	60f8      	str	r0, [r7, #12]
 8014070:	4608      	mov	r0, r1
 8014072:	4639      	mov	r1, r7
 8014074:	e881 000c 	stmia.w	r1, {r2, r3}
 8014078:	4603      	mov	r3, r0
 801407a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	881b      	ldrh	r3, [r3, #0]
 8014080:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014082:	4b4b      	ldr	r3, [pc, #300]	; (80141b0 <SetMaxTimeCredits+0x148>)
 8014084:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8014086:	463b      	mov	r3, r7
 8014088:	e893 0003 	ldmia.w	r3, {r0, r1}
 801408c:	f005 fc2a 	bl	80198e4 <SysTimeToMs>
 8014090:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8014092:	f107 0314 	add.w	r3, r7, #20
 8014096:	2200      	movs	r2, #0
 8014098:	601a      	str	r2, [r3, #0]
 801409a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801409c:	7af9      	ldrb	r1, [r7, #11]
 801409e:	463b      	mov	r3, r7
 80140a0:	cb0c      	ldmia	r3, {r2, r3}
 80140a2:	68f8      	ldr	r0, [r7, #12]
 80140a4:	f7ff ffa6 	bl	8013ff4 <GetDutyCycle>
 80140a8:	4603      	mov	r3, r0
 80140aa:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80140ac:	7afb      	ldrb	r3, [r7, #11]
 80140ae:	f083 0301 	eor.w	r3, r3, #1
 80140b2:	b2db      	uxtb	r3, r3
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d062      	beq.n	801417e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80140b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80140ba:	2b64      	cmp	r3, #100	; 0x64
 80140bc:	d105      	bne.n	80140ca <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80140be:	4b3c      	ldr	r3, [pc, #240]	; (80141b0 <SetMaxTimeCredits+0x148>)
 80140c0:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140c6:	609a      	str	r2, [r3, #8]
 80140c8:	e00b      	b.n	80140e2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80140ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80140cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80140d0:	d105      	bne.n	80140de <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80140d2:	4b38      	ldr	r3, [pc, #224]	; (80141b4 <SetMaxTimeCredits+0x14c>)
 80140d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140da:	609a      	str	r2, [r3, #8]
 80140dc:	e001      	b.n	80140e2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80140de:	4b36      	ldr	r3, [pc, #216]	; (80141b8 <SetMaxTimeCredits+0x150>)
 80140e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	689a      	ldr	r2, [r3, #8]
 80140e6:	f107 031c 	add.w	r3, r7, #28
 80140ea:	4611      	mov	r1, r2
 80140ec:	4618      	mov	r0, r3
 80140ee:	f005 fc21 	bl	8019934 <SysTimeFromMs>
 80140f2:	f107 0014 	add.w	r0, r7, #20
 80140f6:	6a3b      	ldr	r3, [r7, #32]
 80140f8:	9300      	str	r3, [sp, #0]
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	463a      	mov	r2, r7
 80140fe:	ca06      	ldmia	r2, {r1, r2}
 8014100:	f005 fb31 	bl	8019766 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014104:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014108:	f083 0301 	eor.w	r3, r3, #1
 801410c:	b2db      	uxtb	r3, r3
 801410e:	2b00      	cmp	r3, #0
 8014110:	d006      	beq.n	8014120 <SetMaxTimeCredits+0xb8>
 8014112:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014116:	f083 0301 	eor.w	r3, r3, #1
 801411a:	b2db      	uxtb	r3, r3
 801411c:	2b00      	cmp	r3, #0
 801411e:	d108      	bne.n	8014132 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014126:	429a      	cmp	r2, r3
 8014128:	d103      	bne.n	8014132 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801412a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 801412c:	4a23      	ldr	r2, [pc, #140]	; (80141bc <SetMaxTimeCredits+0x154>)
 801412e:	4293      	cmp	r3, r2
 8014130:	d92f      	bls.n	8014192 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014136:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	4a21      	ldr	r2, [pc, #132]	; (80141c0 <SetMaxTimeCredits+0x158>)
 801413c:	4293      	cmp	r3, r2
 801413e:	d928      	bls.n	8014192 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014146:	3b30      	subs	r3, #48	; 0x30
 8014148:	4a1e      	ldr	r2, [pc, #120]	; (80141c4 <SetMaxTimeCredits+0x15c>)
 801414a:	fba2 2303 	umull	r2, r3, r2, r3
 801414e:	0c1b      	lsrs	r3, r3, #16
 8014150:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	4a1c      	ldr	r2, [pc, #112]	; (80141c8 <SetMaxTimeCredits+0x160>)
 8014156:	fb02 f303 	mul.w	r3, r2, r3
 801415a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8014162:	3330      	adds	r3, #48	; 0x30
 8014164:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8014166:	2300      	movs	r3, #0
 8014168:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801416a:	f107 0314 	add.w	r3, r7, #20
 801416e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014172:	f005 fbb7 	bl	80198e4 <SysTimeToMs>
 8014176:	4602      	mov	r2, r0
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	609a      	str	r2, [r3, #8]
 801417c:	e009      	b.n	8014192 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801417e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014182:	f083 0301 	eor.w	r3, r3, #1
 8014186:	b2db      	uxtb	r3, r3
 8014188:	2b00      	cmp	r3, #0
 801418a:	d002      	beq.n	8014192 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014190:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	685b      	ldr	r3, [r3, #4]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d102      	bne.n	80141a0 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801419e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141a4:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80141a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3730      	adds	r7, #48	; 0x30
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}
 80141b0:	001b7740 	.word	0x001b7740
 80141b4:	0112a880 	.word	0x0112a880
 80141b8:	02932e00 	.word	0x02932e00
 80141bc:	0001517f 	.word	0x0001517f
 80141c0:	0001ec2f 	.word	0x0001ec2f
 80141c4:	c22e4507 	.word	0xc22e4507
 80141c8:	00015180 	.word	0x00015180

080141cc <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b086      	sub	sp, #24
 80141d0:	af02      	add	r7, sp, #8
 80141d2:	6078      	str	r0, [r7, #4]
 80141d4:	4608      	mov	r0, r1
 80141d6:	4611      	mov	r1, r2
 80141d8:	461a      	mov	r2, r3
 80141da:	4603      	mov	r3, r0
 80141dc:	70fb      	strb	r3, [r7, #3]
 80141de:	460b      	mov	r3, r1
 80141e0:	70bb      	strb	r3, [r7, #2]
 80141e2:	4613      	mov	r3, r2
 80141e4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80141e6:	78f9      	ldrb	r1, [r7, #3]
 80141e8:	787b      	ldrb	r3, [r7, #1]
 80141ea:	9301      	str	r3, [sp, #4]
 80141ec:	78bb      	ldrb	r3, [r7, #2]
 80141ee:	9300      	str	r3, [sp, #0]
 80141f0:	f107 0318 	add.w	r3, r7, #24
 80141f4:	cb0c      	ldmia	r3, {r2, r3}
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f7ff ff36 	bl	8014068 <SetMaxTimeCredits>
 80141fc:	4603      	mov	r3, r0
 80141fe:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8014200:	78fb      	ldrb	r3, [r7, #3]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d00a      	beq.n	801421c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	4618      	mov	r0, r3
 801420c:	f006 f8a2 	bl	801a354 <UTIL_TIMER_GetElapsedTime>
 8014210:	4602      	mov	r2, r0
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	68db      	ldr	r3, [r3, #12]
 8014216:	441a      	add	r2, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	68da      	ldr	r2, [r3, #12]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	691b      	ldr	r3, [r3, #16]
 8014224:	429a      	cmp	r2, r3
 8014226:	d903      	bls.n	8014230 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	691a      	ldr	r2, [r3, #16]
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	6a3a      	ldr	r2, [r7, #32]
 8014234:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8014236:	89fb      	ldrh	r3, [r7, #14]
}
 8014238:	4618      	mov	r0, r3
 801423a:	3710      	adds	r7, #16
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}

08014240 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014240:	b480      	push	{r7}
 8014242:	b085      	sub	sp, #20
 8014244:	af00      	add	r7, sp, #0
 8014246:	4603      	mov	r3, r0
 8014248:	460a      	mov	r2, r1
 801424a:	80fb      	strh	r3, [r7, #6]
 801424c:	4613      	mov	r3, r2
 801424e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014250:	2300      	movs	r3, #0
 8014252:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014254:	2300      	movs	r3, #0
 8014256:	73bb      	strb	r3, [r7, #14]
 8014258:	e011      	b.n	801427e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801425a:	88fa      	ldrh	r2, [r7, #6]
 801425c:	7bbb      	ldrb	r3, [r7, #14]
 801425e:	2101      	movs	r1, #1
 8014260:	fa01 f303 	lsl.w	r3, r1, r3
 8014264:	401a      	ands	r2, r3
 8014266:	7bbb      	ldrb	r3, [r7, #14]
 8014268:	2101      	movs	r1, #1
 801426a:	fa01 f303 	lsl.w	r3, r1, r3
 801426e:	429a      	cmp	r2, r3
 8014270:	d102      	bne.n	8014278 <CountChannels+0x38>
        {
            nbActiveBits++;
 8014272:	7bfb      	ldrb	r3, [r7, #15]
 8014274:	3301      	adds	r3, #1
 8014276:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014278:	7bbb      	ldrb	r3, [r7, #14]
 801427a:	3301      	adds	r3, #1
 801427c:	73bb      	strb	r3, [r7, #14]
 801427e:	7bba      	ldrb	r2, [r7, #14]
 8014280:	797b      	ldrb	r3, [r7, #5]
 8014282:	429a      	cmp	r2, r3
 8014284:	d3e9      	bcc.n	801425a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8014286:	7bfb      	ldrb	r3, [r7, #15]
}
 8014288:	4618      	mov	r0, r3
 801428a:	3714      	adds	r7, #20
 801428c:	46bd      	mov	sp, r7
 801428e:	bc80      	pop	{r7}
 8014290:	4770      	bx	lr

08014292 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8014292:	b580      	push	{r7, lr}
 8014294:	b084      	sub	sp, #16
 8014296:	af00      	add	r7, sp, #0
 8014298:	6039      	str	r1, [r7, #0]
 801429a:	4611      	mov	r1, r2
 801429c:	461a      	mov	r2, r3
 801429e:	4603      	mov	r3, r0
 80142a0:	71fb      	strb	r3, [r7, #7]
 80142a2:	460b      	mov	r3, r1
 80142a4:	71bb      	strb	r3, [r7, #6]
 80142a6:	4613      	mov	r3, r2
 80142a8:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80142aa:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80142ae:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80142b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80142b6:	4618      	mov	r0, r3
 80142b8:	f000 f85d 	bl	8014376 <RegionCommonValueInRange>
 80142bc:	4603      	mov	r3, r0
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d101      	bne.n	80142c6 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80142c2:	2300      	movs	r3, #0
 80142c4:	e053      	b.n	801436e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80142c6:	2300      	movs	r3, #0
 80142c8:	73fb      	strb	r3, [r7, #15]
 80142ca:	2300      	movs	r3, #0
 80142cc:	73bb      	strb	r3, [r7, #14]
 80142ce:	e049      	b.n	8014364 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80142d0:	2300      	movs	r3, #0
 80142d2:	737b      	strb	r3, [r7, #13]
 80142d4:	e03d      	b.n	8014352 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80142d6:	7bbb      	ldrb	r3, [r7, #14]
 80142d8:	005b      	lsls	r3, r3, #1
 80142da:	683a      	ldr	r2, [r7, #0]
 80142dc:	4413      	add	r3, r2
 80142de:	881b      	ldrh	r3, [r3, #0]
 80142e0:	461a      	mov	r2, r3
 80142e2:	7b7b      	ldrb	r3, [r7, #13]
 80142e4:	fa42 f303 	asr.w	r3, r2, r3
 80142e8:	f003 0301 	and.w	r3, r3, #1
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d02d      	beq.n	801434c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80142f0:	7bfa      	ldrb	r2, [r7, #15]
 80142f2:	7b7b      	ldrb	r3, [r7, #13]
 80142f4:	4413      	add	r3, r2
 80142f6:	461a      	mov	r2, r3
 80142f8:	4613      	mov	r3, r2
 80142fa:	005b      	lsls	r3, r3, #1
 80142fc:	4413      	add	r3, r2
 80142fe:	009b      	lsls	r3, r3, #2
 8014300:	461a      	mov	r2, r3
 8014302:	69fb      	ldr	r3, [r7, #28]
 8014304:	4413      	add	r3, r2
 8014306:	7a1b      	ldrb	r3, [r3, #8]
 8014308:	f343 0303 	sbfx	r3, r3, #0, #4
 801430c:	b25b      	sxtb	r3, r3
 801430e:	f003 030f 	and.w	r3, r3, #15
 8014312:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8014314:	7bfa      	ldrb	r2, [r7, #15]
 8014316:	7b7b      	ldrb	r3, [r7, #13]
 8014318:	4413      	add	r3, r2
 801431a:	461a      	mov	r2, r3
 801431c:	4613      	mov	r3, r2
 801431e:	005b      	lsls	r3, r3, #1
 8014320:	4413      	add	r3, r2
 8014322:	009b      	lsls	r3, r3, #2
 8014324:	461a      	mov	r2, r3
 8014326:	69fb      	ldr	r3, [r7, #28]
 8014328:	4413      	add	r3, r2
 801432a:	7a1b      	ldrb	r3, [r3, #8]
 801432c:	f343 1303 	sbfx	r3, r3, #4, #4
 8014330:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014332:	f003 030f 	and.w	r3, r3, #15
 8014336:	b25a      	sxtb	r2, r3
 8014338:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801433c:	4618      	mov	r0, r3
 801433e:	f000 f81a 	bl	8014376 <RegionCommonValueInRange>
 8014342:	4603      	mov	r3, r0
 8014344:	2b01      	cmp	r3, #1
 8014346:	d101      	bne.n	801434c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014348:	2301      	movs	r3, #1
 801434a:	e010      	b.n	801436e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801434c:	7b7b      	ldrb	r3, [r7, #13]
 801434e:	3301      	adds	r3, #1
 8014350:	737b      	strb	r3, [r7, #13]
 8014352:	7b7b      	ldrb	r3, [r7, #13]
 8014354:	2b0f      	cmp	r3, #15
 8014356:	d9be      	bls.n	80142d6 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014358:	7bfb      	ldrb	r3, [r7, #15]
 801435a:	3310      	adds	r3, #16
 801435c:	73fb      	strb	r3, [r7, #15]
 801435e:	7bbb      	ldrb	r3, [r7, #14]
 8014360:	3301      	adds	r3, #1
 8014362:	73bb      	strb	r3, [r7, #14]
 8014364:	7bfa      	ldrb	r2, [r7, #15]
 8014366:	79fb      	ldrb	r3, [r7, #7]
 8014368:	429a      	cmp	r2, r3
 801436a:	d3b1      	bcc.n	80142d0 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801436c:	2300      	movs	r3, #0
}
 801436e:	4618      	mov	r0, r3
 8014370:	3710      	adds	r7, #16
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}

08014376 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014376:	b480      	push	{r7}
 8014378:	b083      	sub	sp, #12
 801437a:	af00      	add	r7, sp, #0
 801437c:	4603      	mov	r3, r0
 801437e:	71fb      	strb	r3, [r7, #7]
 8014380:	460b      	mov	r3, r1
 8014382:	71bb      	strb	r3, [r7, #6]
 8014384:	4613      	mov	r3, r2
 8014386:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014388:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801438c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014390:	429a      	cmp	r2, r3
 8014392:	db07      	blt.n	80143a4 <RegionCommonValueInRange+0x2e>
 8014394:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014398:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801439c:	429a      	cmp	r2, r3
 801439e:	dc01      	bgt.n	80143a4 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80143a0:	2301      	movs	r3, #1
 80143a2:	e000      	b.n	80143a6 <RegionCommonValueInRange+0x30>
    }
    return 0;
 80143a4:	2300      	movs	r3, #0
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	370c      	adds	r7, #12
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bc80      	pop	{r7}
 80143ae:	4770      	bx	lr

080143b0 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80143b0:	b480      	push	{r7}
 80143b2:	b085      	sub	sp, #20
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	460b      	mov	r3, r1
 80143ba:	70fb      	strb	r3, [r7, #3]
 80143bc:	4613      	mov	r3, r2
 80143be:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80143c0:	78fb      	ldrb	r3, [r7, #3]
 80143c2:	091b      	lsrs	r3, r3, #4
 80143c4:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80143c6:	78bb      	ldrb	r3, [r7, #2]
 80143c8:	091b      	lsrs	r3, r3, #4
 80143ca:	b2db      	uxtb	r3, r3
 80143cc:	7bfa      	ldrb	r2, [r7, #15]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d803      	bhi.n	80143da <RegionCommonChanDisable+0x2a>
 80143d2:	78fa      	ldrb	r2, [r7, #3]
 80143d4:	78bb      	ldrb	r3, [r7, #2]
 80143d6:	429a      	cmp	r2, r3
 80143d8:	d301      	bcc.n	80143de <RegionCommonChanDisable+0x2e>
    {
        return false;
 80143da:	2300      	movs	r3, #0
 80143dc:	e017      	b.n	801440e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80143de:	7bfb      	ldrb	r3, [r7, #15]
 80143e0:	005b      	lsls	r3, r3, #1
 80143e2:	687a      	ldr	r2, [r7, #4]
 80143e4:	4413      	add	r3, r2
 80143e6:	881b      	ldrh	r3, [r3, #0]
 80143e8:	b21a      	sxth	r2, r3
 80143ea:	78fb      	ldrb	r3, [r7, #3]
 80143ec:	f003 030f 	and.w	r3, r3, #15
 80143f0:	2101      	movs	r1, #1
 80143f2:	fa01 f303 	lsl.w	r3, r1, r3
 80143f6:	b21b      	sxth	r3, r3
 80143f8:	43db      	mvns	r3, r3
 80143fa:	b21b      	sxth	r3, r3
 80143fc:	4013      	ands	r3, r2
 80143fe:	b219      	sxth	r1, r3
 8014400:	7bfb      	ldrb	r3, [r7, #15]
 8014402:	005b      	lsls	r3, r3, #1
 8014404:	687a      	ldr	r2, [r7, #4]
 8014406:	4413      	add	r3, r2
 8014408:	b28a      	uxth	r2, r1
 801440a:	801a      	strh	r2, [r3, #0]

    return true;
 801440c:	2301      	movs	r3, #1
}
 801440e:	4618      	mov	r0, r3
 8014410:	3714      	adds	r7, #20
 8014412:	46bd      	mov	sp, r7
 8014414:	bc80      	pop	{r7}
 8014416:	4770      	bx	lr

08014418 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b084      	sub	sp, #16
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
 8014420:	460b      	mov	r3, r1
 8014422:	70fb      	strb	r3, [r7, #3]
 8014424:	4613      	mov	r3, r2
 8014426:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014428:	2300      	movs	r3, #0
 801442a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d101      	bne.n	8014436 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8014432:	2300      	movs	r3, #0
 8014434:	e018      	b.n	8014468 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014436:	78fb      	ldrb	r3, [r7, #3]
 8014438:	73bb      	strb	r3, [r7, #14]
 801443a:	e010      	b.n	801445e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801443c:	7bbb      	ldrb	r3, [r7, #14]
 801443e:	005b      	lsls	r3, r3, #1
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	4413      	add	r3, r2
 8014444:	881b      	ldrh	r3, [r3, #0]
 8014446:	2110      	movs	r1, #16
 8014448:	4618      	mov	r0, r3
 801444a:	f7ff fef9 	bl	8014240 <CountChannels>
 801444e:	4603      	mov	r3, r0
 8014450:	461a      	mov	r2, r3
 8014452:	7bfb      	ldrb	r3, [r7, #15]
 8014454:	4413      	add	r3, r2
 8014456:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014458:	7bbb      	ldrb	r3, [r7, #14]
 801445a:	3301      	adds	r3, #1
 801445c:	73bb      	strb	r3, [r7, #14]
 801445e:	7bba      	ldrb	r2, [r7, #14]
 8014460:	78bb      	ldrb	r3, [r7, #2]
 8014462:	429a      	cmp	r2, r3
 8014464:	d3ea      	bcc.n	801443c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8014466:	7bfb      	ldrb	r3, [r7, #15]
}
 8014468:	4618      	mov	r0, r3
 801446a:	3710      	adds	r7, #16
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}

08014470 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014470:	b480      	push	{r7}
 8014472:	b087      	sub	sp, #28
 8014474:	af00      	add	r7, sp, #0
 8014476:	60f8      	str	r0, [r7, #12]
 8014478:	60b9      	str	r1, [r7, #8]
 801447a:	4613      	mov	r3, r2
 801447c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d016      	beq.n	80144b2 <RegionCommonChanMaskCopy+0x42>
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d013      	beq.n	80144b2 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801448a:	2300      	movs	r3, #0
 801448c:	75fb      	strb	r3, [r7, #23]
 801448e:	e00c      	b.n	80144aa <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8014490:	7dfb      	ldrb	r3, [r7, #23]
 8014492:	005b      	lsls	r3, r3, #1
 8014494:	68ba      	ldr	r2, [r7, #8]
 8014496:	441a      	add	r2, r3
 8014498:	7dfb      	ldrb	r3, [r7, #23]
 801449a:	005b      	lsls	r3, r3, #1
 801449c:	68f9      	ldr	r1, [r7, #12]
 801449e:	440b      	add	r3, r1
 80144a0:	8812      	ldrh	r2, [r2, #0]
 80144a2:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80144a4:	7dfb      	ldrb	r3, [r7, #23]
 80144a6:	3301      	adds	r3, #1
 80144a8:	75fb      	strb	r3, [r7, #23]
 80144aa:	7dfa      	ldrb	r2, [r7, #23]
 80144ac:	79fb      	ldrb	r3, [r7, #7]
 80144ae:	429a      	cmp	r2, r3
 80144b0:	d3ee      	bcc.n	8014490 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80144b2:	bf00      	nop
 80144b4:	371c      	adds	r7, #28
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bc80      	pop	{r7}
 80144ba:	4770      	bx	lr

080144bc <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80144bc:	b082      	sub	sp, #8
 80144be:	b580      	push	{r7, lr}
 80144c0:	b086      	sub	sp, #24
 80144c2:	af00      	add	r7, sp, #0
 80144c4:	60f8      	str	r0, [r7, #12]
 80144c6:	60b9      	str	r1, [r7, #8]
 80144c8:	627b      	str	r3, [r7, #36]	; 0x24
 80144ca:	4613      	mov	r3, r2
 80144cc:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80144ce:	79f9      	ldrb	r1, [r7, #7]
 80144d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80144d4:	cb0c      	ldmia	r3, {r2, r3}
 80144d6:	68f8      	ldr	r0, [r7, #12]
 80144d8:	f7ff fd8c 	bl	8013ff4 <GetDutyCycle>
 80144dc:	4603      	mov	r3, r0
 80144de:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	68da      	ldr	r2, [r3, #12]
 80144e4:	8afb      	ldrh	r3, [r7, #22]
 80144e6:	68b9      	ldr	r1, [r7, #8]
 80144e8:	fb01 f303 	mul.w	r3, r1, r3
 80144ec:	429a      	cmp	r2, r3
 80144ee:	d909      	bls.n	8014504 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	68da      	ldr	r2, [r3, #12]
 80144f4:	8afb      	ldrh	r3, [r7, #22]
 80144f6:	68b9      	ldr	r1, [r7, #8]
 80144f8:	fb01 f303 	mul.w	r3, r1, r3
 80144fc:	1ad2      	subs	r2, r2, r3
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8014502:	e002      	b.n	801450a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	2200      	movs	r2, #0
 8014508:	60da      	str	r2, [r3, #12]
}
 801450a:	bf00      	nop
 801450c:	3718      	adds	r7, #24
 801450e:	46bd      	mov	sp, r7
 8014510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014514:	b002      	add	sp, #8
 8014516:	4770      	bx	lr

08014518 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801451a:	b08f      	sub	sp, #60	; 0x3c
 801451c:	af04      	add	r7, sp, #16
 801451e:	6039      	str	r1, [r7, #0]
 8014520:	4611      	mov	r1, r2
 8014522:	461a      	mov	r2, r3
 8014524:	4603      	mov	r3, r0
 8014526:	71fb      	strb	r3, [r7, #7]
 8014528:	460b      	mov	r3, r1
 801452a:	71bb      	strb	r3, [r7, #6]
 801452c:	4613      	mov	r3, r2
 801452e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8014530:	f04f 33ff 	mov.w	r3, #4294967295
 8014534:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8014536:	f005 fefb 	bl	801a330 <UTIL_TIMER_GetCurrentTime>
 801453a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 801453c:	2300      	movs	r3, #0
 801453e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8014540:	2301      	movs	r3, #1
 8014542:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8014544:	2300      	movs	r3, #0
 8014546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801454a:	2300      	movs	r3, #0
 801454c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014550:	e0ba      	b.n	80146c8 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8014552:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014556:	4613      	mov	r3, r2
 8014558:	005b      	lsls	r3, r3, #1
 801455a:	4413      	add	r3, r2
 801455c:	00db      	lsls	r3, r3, #3
 801455e:	461a      	mov	r2, r3
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	189c      	adds	r4, r3, r2
 8014564:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8014568:	797a      	ldrb	r2, [r7, #5]
 801456a:	79fd      	ldrb	r5, [r7, #7]
 801456c:	69fb      	ldr	r3, [r7, #28]
 801456e:	9302      	str	r3, [sp, #8]
 8014570:	46ec      	mov	ip, sp
 8014572:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014576:	e893 0003 	ldmia.w	r3, {r0, r1}
 801457a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801457e:	4633      	mov	r3, r6
 8014580:	4629      	mov	r1, r5
 8014582:	4620      	mov	r0, r4
 8014584:	f7ff fe22 	bl	80141cc <UpdateTimeCredits>
 8014588:	4603      	mov	r3, r0
 801458a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801458c:	8afa      	ldrh	r2, [r7, #22]
 801458e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014590:	fb02 f303 	mul.w	r3, r2, r3
 8014594:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014596:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801459a:	4613      	mov	r3, r2
 801459c:	005b      	lsls	r3, r3, #1
 801459e:	4413      	add	r3, r2
 80145a0:	00db      	lsls	r3, r3, #3
 80145a2:	461a      	mov	r2, r3
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	4413      	add	r3, r2
 80145a8:	68db      	ldr	r3, [r3, #12]
 80145aa:	69ba      	ldr	r2, [r7, #24]
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d308      	bcc.n	80145c2 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80145b0:	797b      	ldrb	r3, [r7, #5]
 80145b2:	f083 0301 	eor.w	r3, r3, #1
 80145b6:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d013      	beq.n	80145e4 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80145bc:	79fb      	ldrb	r3, [r7, #7]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d010      	beq.n	80145e4 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80145c2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80145c6:	4613      	mov	r3, r2
 80145c8:	005b      	lsls	r3, r3, #1
 80145ca:	4413      	add	r3, r2
 80145cc:	00db      	lsls	r3, r3, #3
 80145ce:	461a      	mov	r2, r3
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	4413      	add	r3, r2
 80145d4:	2201      	movs	r2, #1
 80145d6:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80145d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80145dc:	3301      	adds	r3, #1
 80145de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80145e2:	e06c      	b.n	80146be <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80145e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80145e8:	4613      	mov	r3, r2
 80145ea:	005b      	lsls	r3, r3, #1
 80145ec:	4413      	add	r3, r2
 80145ee:	00db      	lsls	r3, r3, #3
 80145f0:	461a      	mov	r2, r3
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	4413      	add	r3, r2
 80145f6:	2200      	movs	r2, #0
 80145f8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80145fa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80145fe:	4613      	mov	r3, r2
 8014600:	005b      	lsls	r3, r3, #1
 8014602:	4413      	add	r3, r2
 8014604:	00db      	lsls	r3, r3, #3
 8014606:	461a      	mov	r2, r3
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	4413      	add	r3, r2
 801460c:	691b      	ldr	r3, [r3, #16]
 801460e:	69ba      	ldr	r2, [r7, #24]
 8014610:	429a      	cmp	r2, r3
 8014612:	d215      	bcs.n	8014640 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8014614:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014618:	4613      	mov	r3, r2
 801461a:	005b      	lsls	r3, r3, #1
 801461c:	4413      	add	r3, r2
 801461e:	00db      	lsls	r3, r3, #3
 8014620:	461a      	mov	r2, r3
 8014622:	683b      	ldr	r3, [r7, #0]
 8014624:	4413      	add	r3, r2
 8014626:	68db      	ldr	r3, [r3, #12]
 8014628:	69ba      	ldr	r2, [r7, #24]
 801462a:	1ad3      	subs	r3, r2, r3
 801462c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801462e:	4293      	cmp	r3, r2
 8014630:	bf28      	it	cs
 8014632:	4613      	movcs	r3, r2
 8014634:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014636:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801463a:	3301      	adds	r3, #1
 801463c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014640:	79fb      	ldrb	r3, [r7, #7]
 8014642:	f083 0301 	eor.w	r3, r3, #1
 8014646:	b2db      	uxtb	r3, r3
 8014648:	2b00      	cmp	r3, #0
 801464a:	d038      	beq.n	80146be <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801464c:	2300      	movs	r3, #0
 801464e:	60fb      	str	r3, [r7, #12]
 8014650:	2300      	movs	r3, #0
 8014652:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014654:	8afb      	ldrh	r3, [r7, #22]
 8014656:	2b64      	cmp	r3, #100	; 0x64
 8014658:	d103      	bne.n	8014662 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801465a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801465e:	60fb      	str	r3, [r7, #12]
 8014660:	e009      	b.n	8014676 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014662:	8afb      	ldrh	r3, [r7, #22]
 8014664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014668:	d103      	bne.n	8014672 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801466a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801466e:	60fb      	str	r3, [r7, #12]
 8014670:	e001      	b.n	8014676 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014672:	4b1e      	ldr	r3, [pc, #120]	; (80146ec <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014674:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014678:	4a1c      	ldr	r2, [pc, #112]	; (80146ec <RegionCommonUpdateBandTimeOff+0x1d4>)
 801467a:	4293      	cmp	r3, r2
 801467c:	d90e      	bls.n	801469c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801467e:	68fa      	ldr	r2, [r7, #12]
 8014680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014682:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014686:	3b30      	subs	r3, #48	; 0x30
 8014688:	4919      	ldr	r1, [pc, #100]	; (80146f0 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801468a:	fba1 1303 	umull	r1, r3, r1, r3
 801468e:	0c1b      	lsrs	r3, r3, #16
 8014690:	3301      	adds	r3, #1
 8014692:	4918      	ldr	r1, [pc, #96]	; (80146f4 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8014694:	fb01 f303 	mul.w	r3, r1, r3
 8014698:	4413      	add	r3, r2
 801469a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801469c:	f107 000c 	add.w	r0, r7, #12
 80146a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80146a2:	9300      	str	r3, [sp, #0]
 80146a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146a6:	f107 020c 	add.w	r2, r7, #12
 80146aa:	ca06      	ldmia	r2, {r1, r2}
 80146ac:	f005 f85b 	bl	8019766 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80146b0:	f107 030c 	add.w	r3, r7, #12
 80146b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80146b8:	f005 f914 	bl	80198e4 <SysTimeToMs>
 80146bc:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80146be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80146c2:	3301      	adds	r3, #1
 80146c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80146c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146cc:	79bb      	ldrb	r3, [r7, #6]
 80146ce:	429a      	cmp	r2, r3
 80146d0:	f4ff af3f 	bcc.w	8014552 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 80146d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d102      	bne.n	80146e2 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80146dc:	f04f 33ff 	mov.w	r3, #4294967295
 80146e0:	e000      	b.n	80146e4 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80146e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	372c      	adds	r7, #44	; 0x2c
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146ec:	0001ec30 	.word	0x0001ec30
 80146f0:	c22e4507 	.word	0xc22e4507
 80146f4:	00015180 	.word	0x00015180

080146f8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80146f8:	b480      	push	{r7}
 80146fa:	b085      	sub	sp, #20
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8014702:	2300      	movs	r3, #0
 8014704:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	781b      	ldrb	r3, [r3, #0]
 801470a:	2b03      	cmp	r3, #3
 801470c:	d13f      	bne.n	801478e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	3301      	adds	r3, #1
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	b25a      	sxtb	r2, r3
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014720:	f003 030f 	and.w	r3, r3, #15
 8014724:	b25a      	sxtb	r2, r3
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014730:	b2db      	uxtb	r3, r3
 8014732:	091b      	lsrs	r3, r3, #4
 8014734:	b2db      	uxtb	r3, r3
 8014736:	b25a      	sxtb	r2, r3
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	3302      	adds	r3, #2
 8014740:	781b      	ldrb	r3, [r3, #0]
 8014742:	b29a      	uxth	r2, r3
 8014744:	683b      	ldr	r3, [r7, #0]
 8014746:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	889b      	ldrh	r3, [r3, #4]
 801474c:	b21a      	sxth	r2, r3
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	3303      	adds	r3, #3
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	021b      	lsls	r3, r3, #8
 8014756:	b21b      	sxth	r3, r3
 8014758:	4313      	orrs	r3, r2
 801475a:	b21b      	sxth	r3, r3
 801475c:	b29a      	uxth	r2, r3
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	791a      	ldrb	r2, [r3, #4]
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	781b      	ldrb	r3, [r3, #0]
 801476e:	091b      	lsrs	r3, r3, #4
 8014770:	b2db      	uxtb	r3, r3
 8014772:	f003 0307 	and.w	r3, r3, #7
 8014776:	b2da      	uxtb	r2, r3
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	781b      	ldrb	r3, [r3, #0]
 8014780:	f003 030f 	and.w	r3, r3, #15
 8014784:	b2da      	uxtb	r2, r3
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801478a:	2305      	movs	r3, #5
 801478c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801478e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014790:	4618      	mov	r0, r3
 8014792:	3714      	adds	r7, #20
 8014794:	46bd      	mov	sp, r7
 8014796:	bc80      	pop	{r7}
 8014798:	4770      	bx	lr

0801479a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801479a:	b5b0      	push	{r4, r5, r7, lr}
 801479c:	b088      	sub	sp, #32
 801479e:	af02      	add	r7, sp, #8
 80147a0:	60f8      	str	r0, [r7, #12]
 80147a2:	60b9      	str	r1, [r7, #8]
 80147a4:	607a      	str	r2, [r7, #4]
 80147a6:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	791b      	ldrb	r3, [r3, #4]
 80147ac:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	799b      	ldrb	r3, [r3, #6]
 80147b2:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	79db      	ldrb	r3, [r3, #7]
 80147b8:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	7a1b      	ldrb	r3, [r3, #8]
 80147be:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	795b      	ldrb	r3, [r3, #5]
 80147c4:	f083 0301 	eor.w	r3, r3, #1
 80147c8:	b2db      	uxtb	r3, r3
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d008      	beq.n	80147e0 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	7adb      	ldrb	r3, [r3, #11]
 80147d2:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	7a5b      	ldrb	r3, [r3, #9]
 80147d8:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	7a9b      	ldrb	r3, [r3, #10]
 80147de:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80147e0:	7dfb      	ldrb	r3, [r7, #23]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d03a      	beq.n	801485c <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	7b18      	ldrb	r0, [r3, #12]
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	6919      	ldr	r1, [r3, #16]
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80147fa:	68fa      	ldr	r2, [r7, #12]
 80147fc:	6992      	ldr	r2, [r2, #24]
 80147fe:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8014802:	9201      	str	r2, [sp, #4]
 8014804:	9300      	str	r3, [sp, #0]
 8014806:	462b      	mov	r3, r5
 8014808:	4622      	mov	r2, r4
 801480a:	f7ff fd42 	bl	8014292 <RegionCommonChanVerifyDr>
 801480e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8014810:	f083 0301 	eor.w	r3, r3, #1
 8014814:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014816:	2b00      	cmp	r3, #0
 8014818:	d003      	beq.n	8014822 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 801481a:	7dfb      	ldrb	r3, [r7, #23]
 801481c:	f023 0302 	bic.w	r3, r3, #2
 8014820:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801482e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014832:	4618      	mov	r0, r3
 8014834:	f7ff fd9f 	bl	8014376 <RegionCommonValueInRange>
 8014838:	4603      	mov	r3, r0
 801483a:	2b00      	cmp	r3, #0
 801483c:	d10e      	bne.n	801485c <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8014844:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014848:	429a      	cmp	r2, r3
 801484a:	da03      	bge.n	8014854 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	7f5b      	ldrb	r3, [r3, #29]
 8014850:	757b      	strb	r3, [r7, #21]
 8014852:	e003      	b.n	801485c <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8014854:	7dfb      	ldrb	r3, [r7, #23]
 8014856:	f023 0304 	bic.w	r3, r3, #4
 801485a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801485c:	7dfb      	ldrb	r3, [r7, #23]
 801485e:	2b07      	cmp	r3, #7
 8014860:	d105      	bne.n	801486e <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8014862:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d101      	bne.n	801486e <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 801486a:	2301      	movs	r3, #1
 801486c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801486e:	68bb      	ldr	r3, [r7, #8]
 8014870:	7dba      	ldrb	r2, [r7, #22]
 8014872:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	7d7a      	ldrb	r2, [r7, #21]
 8014878:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801487a:	7d3a      	ldrb	r2, [r7, #20]
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	701a      	strb	r2, [r3, #0]

    return status;
 8014880:	7dfb      	ldrb	r3, [r7, #23]
}
 8014882:	4618      	mov	r0, r3
 8014884:	3718      	adds	r7, #24
 8014886:	46bd      	mov	sp, r7
 8014888:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801488c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801488c:	b480      	push	{r7}
 801488e:	b083      	sub	sp, #12
 8014890:	af00      	add	r7, sp, #0
 8014892:	4603      	mov	r3, r0
 8014894:	6039      	str	r1, [r7, #0]
 8014896:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014898:	79fb      	ldrb	r3, [r7, #7]
 801489a:	4a06      	ldr	r2, [pc, #24]	; (80148b4 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801489c:	fa02 f303 	lsl.w	r3, r2, r3
 80148a0:	461a      	mov	r2, r3
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	370c      	adds	r7, #12
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bc80      	pop	{r7}
 80148b0:	4770      	bx	lr
 80148b2:	bf00      	nop
 80148b4:	000f4240 	.word	0x000f4240

080148b8 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80148b8:	b480      	push	{r7}
 80148ba:	b083      	sub	sp, #12
 80148bc:	af00      	add	r7, sp, #0
 80148be:	4603      	mov	r3, r0
 80148c0:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80148c2:	79fb      	ldrb	r3, [r7, #7]
 80148c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80148c8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80148cc:	4618      	mov	r0, r3
 80148ce:	370c      	adds	r7, #12
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bc80      	pop	{r7}
 80148d4:	4770      	bx	lr
	...

080148d8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80148d8:	b480      	push	{r7}
 80148da:	b085      	sub	sp, #20
 80148dc:	af00      	add	r7, sp, #0
 80148de:	60f8      	str	r0, [r7, #12]
 80148e0:	607a      	str	r2, [r7, #4]
 80148e2:	603b      	str	r3, [r7, #0]
 80148e4:	460b      	mov	r3, r1
 80148e6:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80148e8:	7afa      	ldrb	r2, [r7, #11]
 80148ea:	7afb      	ldrb	r3, [r7, #11]
 80148ec:	3b04      	subs	r3, #4
 80148ee:	4619      	mov	r1, r3
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	fb03 f101 	mul.w	r1, r3, r1
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80148fc:	fb00 f303 	mul.w	r3, r0, r3
 8014900:	440b      	add	r3, r1
 8014902:	005b      	lsls	r3, r3, #1
 8014904:	2b00      	cmp	r3, #0
 8014906:	d013      	beq.n	8014930 <RegionCommonComputeRxWindowParameters+0x58>
 8014908:	7afb      	ldrb	r3, [r7, #11]
 801490a:	3b04      	subs	r3, #4
 801490c:	4619      	mov	r1, r3
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	fb03 f101 	mul.w	r1, r3, r1
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801491a:	fb00 f303 	mul.w	r3, r0, r3
 801491e:	440b      	add	r3, r1
 8014920:	0059      	lsls	r1, r3, #1
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	440b      	add	r3, r1
 8014926:	1e59      	subs	r1, r3, #1
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	fbb1 f3f3 	udiv	r3, r1, r3
 801492e:	e00f      	b.n	8014950 <RegionCommonComputeRxWindowParameters+0x78>
 8014930:	7afb      	ldrb	r3, [r7, #11]
 8014932:	3b04      	subs	r3, #4
 8014934:	4619      	mov	r1, r3
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	fb03 f101 	mul.w	r1, r3, r1
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014942:	fb00 f303 	mul.w	r3, r0, r3
 8014946:	440b      	add	r3, r1
 8014948:	0059      	lsls	r1, r3, #1
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	fbb1 f3f3 	udiv	r3, r1, r3
 8014950:	429a      	cmp	r2, r3
 8014952:	bf38      	it	cc
 8014954:	461a      	movcc	r2, r3
 8014956:	69bb      	ldr	r3, [r7, #24]
 8014958:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	009b      	lsls	r3, r3, #2
 801495e:	4619      	mov	r1, r3
 8014960:	69bb      	ldr	r3, [r7, #24]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	68fa      	ldr	r2, [r7, #12]
 8014966:	fb02 f303 	mul.w	r3, r2, r3
 801496a:	2b00      	cmp	r3, #0
 801496c:	d007      	beq.n	801497e <RegionCommonComputeRxWindowParameters+0xa6>
 801496e:	69bb      	ldr	r3, [r7, #24]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	68fa      	ldr	r2, [r7, #12]
 8014974:	fb02 f303 	mul.w	r3, r2, r3
 8014978:	3301      	adds	r3, #1
 801497a:	085b      	lsrs	r3, r3, #1
 801497c:	e005      	b.n	801498a <RegionCommonComputeRxWindowParameters+0xb2>
 801497e:	69bb      	ldr	r3, [r7, #24]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	68fa      	ldr	r2, [r7, #12]
 8014984:	fb02 f303 	mul.w	r3, r2, r3
 8014988:	085b      	lsrs	r3, r3, #1
 801498a:	1acb      	subs	r3, r1, r3
 801498c:	683a      	ldr	r2, [r7, #0]
 801498e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014992:	fb01 f202 	mul.w	r2, r1, r2
 8014996:	1a9b      	subs	r3, r3, r2
 8014998:	2b00      	cmp	r3, #0
 801499a:	dd27      	ble.n	80149ec <RegionCommonComputeRxWindowParameters+0x114>
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	009b      	lsls	r3, r3, #2
 80149a0:	4619      	mov	r1, r3
 80149a2:	69bb      	ldr	r3, [r7, #24]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	68fa      	ldr	r2, [r7, #12]
 80149a8:	fb02 f303 	mul.w	r3, r2, r3
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d007      	beq.n	80149c0 <RegionCommonComputeRxWindowParameters+0xe8>
 80149b0:	69bb      	ldr	r3, [r7, #24]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	68fa      	ldr	r2, [r7, #12]
 80149b6:	fb02 f303 	mul.w	r3, r2, r3
 80149ba:	3301      	adds	r3, #1
 80149bc:	085b      	lsrs	r3, r3, #1
 80149be:	e005      	b.n	80149cc <RegionCommonComputeRxWindowParameters+0xf4>
 80149c0:	69bb      	ldr	r3, [r7, #24]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	68fa      	ldr	r2, [r7, #12]
 80149c6:	fb02 f303 	mul.w	r3, r2, r3
 80149ca:	085b      	lsrs	r3, r3, #1
 80149cc:	1acb      	subs	r3, r1, r3
 80149ce:	683a      	ldr	r2, [r7, #0]
 80149d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80149d4:	fb01 f202 	mul.w	r2, r1, r2
 80149d8:	1a9b      	subs	r3, r3, r2
 80149da:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80149de:	4a19      	ldr	r2, [pc, #100]	; (8014a44 <RegionCommonComputeRxWindowParameters+0x16c>)
 80149e0:	fb82 1203 	smull	r1, r2, r2, r3
 80149e4:	1192      	asrs	r2, r2, #6
 80149e6:	17db      	asrs	r3, r3, #31
 80149e8:	1ad3      	subs	r3, r2, r3
 80149ea:	e024      	b.n	8014a36 <RegionCommonComputeRxWindowParameters+0x15e>
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	009b      	lsls	r3, r3, #2
 80149f0:	4619      	mov	r1, r3
 80149f2:	69bb      	ldr	r3, [r7, #24]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	68fa      	ldr	r2, [r7, #12]
 80149f8:	fb02 f303 	mul.w	r3, r2, r3
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d007      	beq.n	8014a10 <RegionCommonComputeRxWindowParameters+0x138>
 8014a00:	69bb      	ldr	r3, [r7, #24]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	68fa      	ldr	r2, [r7, #12]
 8014a06:	fb02 f303 	mul.w	r3, r2, r3
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	085b      	lsrs	r3, r3, #1
 8014a0e:	e005      	b.n	8014a1c <RegionCommonComputeRxWindowParameters+0x144>
 8014a10:	69bb      	ldr	r3, [r7, #24]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	68fa      	ldr	r2, [r7, #12]
 8014a16:	fb02 f303 	mul.w	r3, r2, r3
 8014a1a:	085b      	lsrs	r3, r3, #1
 8014a1c:	1acb      	subs	r3, r1, r3
 8014a1e:	683a      	ldr	r2, [r7, #0]
 8014a20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014a24:	fb01 f202 	mul.w	r2, r1, r2
 8014a28:	1a9b      	subs	r3, r3, r2
 8014a2a:	4a06      	ldr	r2, [pc, #24]	; (8014a44 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014a2c:	fb82 1203 	smull	r1, r2, r2, r3
 8014a30:	1192      	asrs	r2, r2, #6
 8014a32:	17db      	asrs	r3, r3, #31
 8014a34:	1ad3      	subs	r3, r2, r3
 8014a36:	69fa      	ldr	r2, [r7, #28]
 8014a38:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014a3a:	bf00      	nop
 8014a3c:	3714      	adds	r7, #20
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bc80      	pop	{r7}
 8014a42:	4770      	bx	lr
 8014a44:	10624dd3 	.word	0x10624dd3

08014a48 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b086      	sub	sp, #24
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	4603      	mov	r3, r0
 8014a50:	60b9      	str	r1, [r7, #8]
 8014a52:	607a      	str	r2, [r7, #4]
 8014a54:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014a56:	2300      	movs	r3, #0
 8014a58:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a5e:	005b      	lsls	r3, r3, #1
 8014a60:	4618      	mov	r0, r3
 8014a62:	f7eb feb3 	bl	80007cc <__aeabi_ui2f>
 8014a66:	4603      	mov	r3, r0
 8014a68:	4619      	mov	r1, r3
 8014a6a:	68b8      	ldr	r0, [r7, #8]
 8014a6c:	f7eb fdfc 	bl	8000668 <__aeabi_fsub>
 8014a70:	4603      	mov	r3, r0
 8014a72:	6879      	ldr	r1, [r7, #4]
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7eb fdf7 	bl	8000668 <__aeabi_fsub>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f7eb fce7 	bl	8000450 <__aeabi_f2d>
 8014a82:	4602      	mov	r2, r0
 8014a84:	460b      	mov	r3, r1
 8014a86:	4610      	mov	r0, r2
 8014a88:	4619      	mov	r1, r3
 8014a8a:	f005 ffe9 	bl	801aa60 <floor>
 8014a8e:	4602      	mov	r2, r0
 8014a90:	460b      	mov	r3, r1
 8014a92:	4610      	mov	r0, r2
 8014a94:	4619      	mov	r1, r3
 8014a96:	f7eb fdbb 	bl	8000610 <__aeabi_d2iz>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3718      	adds	r7, #24
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}

08014aaa <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014aaa:	b590      	push	{r4, r7, lr}
 8014aac:	b087      	sub	sp, #28
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	60f8      	str	r0, [r7, #12]
 8014ab2:	60b9      	str	r1, [r7, #8]
 8014ab4:	607a      	str	r2, [r7, #4]
 8014ab6:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014ab8:	2300      	movs	r3, #0
 8014aba:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014abc:	2300      	movs	r3, #0
 8014abe:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	757b      	strb	r3, [r7, #21]
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	753b      	strb	r3, [r7, #20]
 8014ac8:	e09c      	b.n	8014c04 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014aca:	2300      	movs	r3, #0
 8014acc:	74fb      	strb	r3, [r7, #19]
 8014ace:	e08f      	b.n	8014bf0 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	685a      	ldr	r2, [r3, #4]
 8014ad4:	7d3b      	ldrb	r3, [r7, #20]
 8014ad6:	005b      	lsls	r3, r3, #1
 8014ad8:	4413      	add	r3, r2
 8014ada:	881b      	ldrh	r3, [r3, #0]
 8014adc:	461a      	mov	r2, r3
 8014ade:	7cfb      	ldrb	r3, [r7, #19]
 8014ae0:	fa42 f303 	asr.w	r3, r2, r3
 8014ae4:	f003 0301 	and.w	r3, r3, #1
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d07e      	beq.n	8014bea <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	689a      	ldr	r2, [r3, #8]
 8014af0:	7d79      	ldrb	r1, [r7, #21]
 8014af2:	7cfb      	ldrb	r3, [r7, #19]
 8014af4:	440b      	add	r3, r1
 8014af6:	4619      	mov	r1, r3
 8014af8:	460b      	mov	r3, r1
 8014afa:	005b      	lsls	r3, r3, #1
 8014afc:	440b      	add	r3, r1
 8014afe:	009b      	lsls	r3, r3, #2
 8014b00:	4413      	add	r3, r2
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d06b      	beq.n	8014be0 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	781b      	ldrb	r3, [r3, #0]
 8014b0c:	f083 0301 	eor.w	r3, r3, #1
 8014b10:	b2db      	uxtb	r3, r3
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d011      	beq.n	8014b3a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d00d      	beq.n	8014b3a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	695a      	ldr	r2, [r3, #20]
 8014b22:	7d3b      	ldrb	r3, [r7, #20]
 8014b24:	005b      	lsls	r3, r3, #1
 8014b26:	4413      	add	r3, r2
 8014b28:	881b      	ldrh	r3, [r3, #0]
 8014b2a:	461a      	mov	r2, r3
 8014b2c:	7cfb      	ldrb	r3, [r7, #19]
 8014b2e:	fa42 f303 	asr.w	r3, r2, r3
 8014b32:	f003 0301 	and.w	r3, r3, #1
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d054      	beq.n	8014be4 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	785b      	ldrb	r3, [r3, #1]
 8014b3e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	689a      	ldr	r2, [r3, #8]
 8014b44:	7d79      	ldrb	r1, [r7, #21]
 8014b46:	7cfb      	ldrb	r3, [r7, #19]
 8014b48:	440b      	add	r3, r1
 8014b4a:	4619      	mov	r1, r3
 8014b4c:	460b      	mov	r3, r1
 8014b4e:	005b      	lsls	r3, r3, #1
 8014b50:	440b      	add	r3, r1
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	4413      	add	r3, r2
 8014b56:	7a1b      	ldrb	r3, [r3, #8]
 8014b58:	f343 0303 	sbfx	r3, r3, #0, #4
 8014b5c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014b5e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	689a      	ldr	r2, [r3, #8]
 8014b64:	7d79      	ldrb	r1, [r7, #21]
 8014b66:	7cfb      	ldrb	r3, [r7, #19]
 8014b68:	440b      	add	r3, r1
 8014b6a:	4619      	mov	r1, r3
 8014b6c:	460b      	mov	r3, r1
 8014b6e:	005b      	lsls	r3, r3, #1
 8014b70:	440b      	add	r3, r1
 8014b72:	009b      	lsls	r3, r3, #2
 8014b74:	4413      	add	r3, r2
 8014b76:	7a1b      	ldrb	r3, [r3, #8]
 8014b78:	f343 1303 	sbfx	r3, r3, #4, #4
 8014b7c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014b7e:	461a      	mov	r2, r3
 8014b80:	4621      	mov	r1, r4
 8014b82:	f7ff fbf8 	bl	8014376 <RegionCommonValueInRange>
 8014b86:	4603      	mov	r3, r0
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d02d      	beq.n	8014be8 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	68da      	ldr	r2, [r3, #12]
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	6899      	ldr	r1, [r3, #8]
 8014b94:	7d78      	ldrb	r0, [r7, #21]
 8014b96:	7cfb      	ldrb	r3, [r7, #19]
 8014b98:	4403      	add	r3, r0
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	005b      	lsls	r3, r3, #1
 8014ba0:	4403      	add	r3, r0
 8014ba2:	009b      	lsls	r3, r3, #2
 8014ba4:	440b      	add	r3, r1
 8014ba6:	7a5b      	ldrb	r3, [r3, #9]
 8014ba8:	4619      	mov	r1, r3
 8014baa:	460b      	mov	r3, r1
 8014bac:	005b      	lsls	r3, r3, #1
 8014bae:	440b      	add	r3, r1
 8014bb0:	00db      	lsls	r3, r3, #3
 8014bb2:	4413      	add	r3, r2
 8014bb4:	7d1b      	ldrb	r3, [r3, #20]
 8014bb6:	f083 0301 	eor.w	r3, r3, #1
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d003      	beq.n	8014bc8 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014bc0:	7dbb      	ldrb	r3, [r7, #22]
 8014bc2:	3301      	adds	r3, #1
 8014bc4:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014bc6:	e010      	b.n	8014bea <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014bc8:	7dfb      	ldrb	r3, [r7, #23]
 8014bca:	1c5a      	adds	r2, r3, #1
 8014bcc:	75fa      	strb	r2, [r7, #23]
 8014bce:	461a      	mov	r2, r3
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	4413      	add	r3, r2
 8014bd4:	7d79      	ldrb	r1, [r7, #21]
 8014bd6:	7cfa      	ldrb	r2, [r7, #19]
 8014bd8:	440a      	add	r2, r1
 8014bda:	b2d2      	uxtb	r2, r2
 8014bdc:	701a      	strb	r2, [r3, #0]
 8014bde:	e004      	b.n	8014bea <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014be0:	bf00      	nop
 8014be2:	e002      	b.n	8014bea <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014be4:	bf00      	nop
 8014be6:	e000      	b.n	8014bea <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014be8:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014bea:	7cfb      	ldrb	r3, [r7, #19]
 8014bec:	3301      	adds	r3, #1
 8014bee:	74fb      	strb	r3, [r7, #19]
 8014bf0:	7cfb      	ldrb	r3, [r7, #19]
 8014bf2:	2b0f      	cmp	r3, #15
 8014bf4:	f67f af6c 	bls.w	8014ad0 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014bf8:	7d7b      	ldrb	r3, [r7, #21]
 8014bfa:	3310      	adds	r3, #16
 8014bfc:	757b      	strb	r3, [r7, #21]
 8014bfe:	7d3b      	ldrb	r3, [r7, #20]
 8014c00:	3301      	adds	r3, #1
 8014c02:	753b      	strb	r3, [r7, #20]
 8014c04:	7d7b      	ldrb	r3, [r7, #21]
 8014c06:	b29a      	uxth	r2, r3
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	8a1b      	ldrh	r3, [r3, #16]
 8014c0c:	429a      	cmp	r2, r3
 8014c0e:	f4ff af5c 	bcc.w	8014aca <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	7dfa      	ldrb	r2, [r7, #23]
 8014c16:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	7dba      	ldrb	r2, [r7, #22]
 8014c1c:	701a      	strb	r2, [r3, #0]
}
 8014c1e:	bf00      	nop
 8014c20:	371c      	adds	r7, #28
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd90      	pop	{r4, r7, pc}

08014c26 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c28:	b08b      	sub	sp, #44	; 0x2c
 8014c2a:	af04      	add	r7, sp, #16
 8014c2c:	60f8      	str	r0, [r7, #12]
 8014c2e:	60b9      	str	r1, [r7, #8]
 8014c30:	607a      	str	r2, [r7, #4]
 8014c32:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	685b      	ldr	r3, [r3, #4]
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f005 fb8b 	bl	801a354 <UTIL_TIMER_GetElapsedTime>
 8014c3e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	681a      	ldr	r2, [r3, #0]
 8014c44:	697b      	ldr	r3, [r7, #20]
 8014c46:	1ad2      	subs	r2, r2, r3
 8014c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c4a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8014c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c4e:	2201      	movs	r2, #1
 8014c50:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014c52:	683b      	ldr	r3, [r7, #0]
 8014c54:	2200      	movs	r2, #0
 8014c56:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	685b      	ldr	r3, [r3, #4]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d004      	beq.n	8014c6a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014c64:	697a      	ldr	r2, [r7, #20]
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d32b      	bcc.n	8014cc2 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014c6a:	68bb      	ldr	r3, [r7, #8]
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	69db      	ldr	r3, [r3, #28]
 8014c74:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014c7a:	68dd      	ldr	r5, [r3, #12]
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	7a5e      	ldrb	r6, [r3, #9]
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	f893 c008 	ldrb.w	ip, [r3, #8]
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	7d1b      	ldrb	r3, [r3, #20]
 8014c8a:	68fa      	ldr	r2, [r7, #12]
 8014c8c:	6992      	ldr	r2, [r2, #24]
 8014c8e:	9203      	str	r2, [sp, #12]
 8014c90:	68fa      	ldr	r2, [r7, #12]
 8014c92:	f10d 0e04 	add.w	lr, sp, #4
 8014c96:	320c      	adds	r2, #12
 8014c98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c9c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014ca0:	9300      	str	r3, [sp, #0]
 8014ca2:	4663      	mov	r3, ip
 8014ca4:	4632      	mov	r2, r6
 8014ca6:	4629      	mov	r1, r5
 8014ca8:	4620      	mov	r0, r4
 8014caa:	f7ff fc35 	bl	8014518 <RegionCommonUpdateBandTimeOff>
 8014cae:	4602      	mov	r2, r0
 8014cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cb2:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	69d8      	ldr	r0, [r3, #28]
 8014cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cba:	683a      	ldr	r2, [r7, #0]
 8014cbc:	6879      	ldr	r1, [r7, #4]
 8014cbe:	f7ff fef4 	bl	8014aaa <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	781b      	ldrb	r3, [r3, #0]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d004      	beq.n	8014cd4 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8014cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ccc:	2200      	movs	r2, #0
 8014cce:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	e006      	b.n	8014ce2 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd6:	781b      	ldrb	r3, [r3, #0]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d001      	beq.n	8014ce0 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014cdc:	230b      	movs	r3, #11
 8014cde:	e000      	b.n	8014ce2 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014ce0:	230c      	movs	r3, #12
    }
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	371c      	adds	r7, #28
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014cea <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8014cea:	b5b0      	push	{r4, r5, r7, lr}
 8014cec:	b086      	sub	sp, #24
 8014cee:	af02      	add	r7, sp, #8
 8014cf0:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f993 2000 	ldrsb.w	r2, [r3]
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d103      	bne.n	8014d10 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014d0e:	e026      	b.n	8014d5e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014d10:	7bfb      	ldrb	r3, [r7, #15]
 8014d12:	3b01      	subs	r3, #1
 8014d14:	b2db      	uxtb	r3, r3
 8014d16:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014d1e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014d22:	429a      	cmp	r2, r3
 8014d24:	d019      	beq.n	8014d5a <RegionCommonGetNextLowerTxDr+0x70>
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	78d8      	ldrb	r0, [r3, #3]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	6859      	ldr	r1, [r3, #4]
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d3a:	687a      	ldr	r2, [r7, #4]
 8014d3c:	6892      	ldr	r2, [r2, #8]
 8014d3e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014d42:	9201      	str	r2, [sp, #4]
 8014d44:	9300      	str	r3, [sp, #0]
 8014d46:	462b      	mov	r3, r5
 8014d48:	4622      	mov	r2, r4
 8014d4a:	f7ff faa2 	bl	8014292 <RegionCommonChanVerifyDr>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	f083 0301 	eor.w	r3, r3, #1
 8014d54:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d1da      	bne.n	8014d10 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8014d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3710      	adds	r7, #16
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bdb0      	pop	{r4, r5, r7, pc}

08014d66 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014d66:	b480      	push	{r7}
 8014d68:	b083      	sub	sp, #12
 8014d6a:	af00      	add	r7, sp, #0
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	460a      	mov	r2, r1
 8014d70:	71fb      	strb	r3, [r7, #7]
 8014d72:	4613      	mov	r3, r2
 8014d74:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014d76:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014d7e:	4293      	cmp	r3, r2
 8014d80:	bfb8      	it	lt
 8014d82:	4613      	movlt	r3, r2
 8014d84:	b25b      	sxtb	r3, r3
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	370c      	adds	r7, #12
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bc80      	pop	{r7}
 8014d8e:	4770      	bx	lr

08014d90 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014d90:	b480      	push	{r7}
 8014d92:	b083      	sub	sp, #12
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
 8014d98:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	009b      	lsls	r3, r3, #2
 8014d9e:	683a      	ldr	r2, [r7, #0]
 8014da0:	4413      	add	r3, r2
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	4a07      	ldr	r2, [pc, #28]	; (8014dc4 <RegionCommonGetBandwidth+0x34>)
 8014da6:	4293      	cmp	r3, r2
 8014da8:	d004      	beq.n	8014db4 <RegionCommonGetBandwidth+0x24>
 8014daa:	4a07      	ldr	r2, [pc, #28]	; (8014dc8 <RegionCommonGetBandwidth+0x38>)
 8014dac:	4293      	cmp	r3, r2
 8014dae:	d003      	beq.n	8014db8 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014db0:	2300      	movs	r3, #0
 8014db2:	e002      	b.n	8014dba <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014db4:	2301      	movs	r3, #1
 8014db6:	e000      	b.n	8014dba <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014db8:	2302      	movs	r3, #2
    }
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	370c      	adds	r7, #12
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bc80      	pop	{r7}
 8014dc2:	4770      	bx	lr
 8014dc4:	0003d090 	.word	0x0003d090
 8014dc8:	0007a120 	.word	0x0007a120

08014dcc <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8014dcc:	b5b0      	push	{r4, r5, r7, lr}
 8014dce:	b08c      	sub	sp, #48	; 0x30
 8014dd0:	af04      	add	r7, sp, #16
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	6039      	str	r1, [r7, #0]
 8014dd6:	71fb      	strb	r3, [r7, #7]
 8014dd8:	4613      	mov	r3, r2
 8014dda:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8014ddc:	4b17      	ldr	r3, [pc, #92]	; (8014e3c <RegionCommonRxConfigPrint+0x70>)
 8014dde:	f107 0408 	add.w	r4, r7, #8
 8014de2:	461d      	mov	r5, r3
 8014de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014de8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014dec:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8014df0:	79fb      	ldrb	r3, [r7, #7]
 8014df2:	2b05      	cmp	r3, #5
 8014df4:	d813      	bhi.n	8014e1e <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8014df6:	79fb      	ldrb	r3, [r7, #7]
 8014df8:	009b      	lsls	r3, r3, #2
 8014dfa:	f107 0220 	add.w	r2, r7, #32
 8014dfe:	4413      	add	r3, r2
 8014e00:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8014e04:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014e08:	9202      	str	r2, [sp, #8]
 8014e0a:	683a      	ldr	r2, [r7, #0]
 8014e0c:	9201      	str	r2, [sp, #4]
 8014e0e:	9300      	str	r3, [sp, #0]
 8014e10:	4b0b      	ldr	r3, [pc, #44]	; (8014e40 <RegionCommonRxConfigPrint+0x74>)
 8014e12:	2201      	movs	r2, #1
 8014e14:	2100      	movs	r1, #0
 8014e16:	2002      	movs	r0, #2
 8014e18:	f005 fb7a 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014e1c:	e00a      	b.n	8014e34 <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014e1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014e22:	9301      	str	r3, [sp, #4]
 8014e24:	683b      	ldr	r3, [r7, #0]
 8014e26:	9300      	str	r3, [sp, #0]
 8014e28:	4b06      	ldr	r3, [pc, #24]	; (8014e44 <RegionCommonRxConfigPrint+0x78>)
 8014e2a:	2201      	movs	r2, #1
 8014e2c:	2100      	movs	r1, #0
 8014e2e:	2002      	movs	r0, #2
 8014e30:	f005 fb6e 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
}
 8014e34:	bf00      	nop
 8014e36:	3720      	adds	r7, #32
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8014e3c:	0801b284 	.word	0x0801b284
 8014e40:	0801b248 	.word	0x0801b248
 8014e44:	0801b268 	.word	0x0801b268

08014e48 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b084      	sub	sp, #16
 8014e4c:	af02      	add	r7, sp, #8
 8014e4e:	6078      	str	r0, [r7, #4]
 8014e50:	460b      	mov	r3, r1
 8014e52:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014e58:	9301      	str	r3, [sp, #4]
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	9300      	str	r3, [sp, #0]
 8014e5e:	4b05      	ldr	r3, [pc, #20]	; (8014e74 <RegionCommonTxConfigPrint+0x2c>)
 8014e60:	2201      	movs	r2, #1
 8014e62:	2100      	movs	r1, #0
 8014e64:	2002      	movs	r0, #2
 8014e66:	f005 fb53 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
}
 8014e6a:	bf00      	nop
 8014e6c:	3708      	adds	r7, #8
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bd80      	pop	{r7, pc}
 8014e72:	bf00      	nop
 8014e74:	0801b29c 	.word	0x0801b29c

08014e78 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
 8014e80:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014e82:	4b2d      	ldr	r3, [pc, #180]	; (8014f38 <VerifyRfFreq+0xc0>)
 8014e84:	6a1b      	ldr	r3, [r3, #32]
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	4798      	blx	r3
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	f083 0301 	eor.w	r3, r3, #1
 8014e90:	b2db      	uxtb	r3, r3
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d001      	beq.n	8014e9a <VerifyRfFreq+0x22>
    {
        return false;
 8014e96:	2300      	movs	r3, #0
 8014e98:	e04a      	b.n	8014f30 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	4a27      	ldr	r2, [pc, #156]	; (8014f3c <VerifyRfFreq+0xc4>)
 8014e9e:	4293      	cmp	r3, r2
 8014ea0:	d307      	bcc.n	8014eb2 <VerifyRfFreq+0x3a>
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	4a26      	ldr	r2, [pc, #152]	; (8014f40 <VerifyRfFreq+0xc8>)
 8014ea6:	4293      	cmp	r3, r2
 8014ea8:	d803      	bhi.n	8014eb2 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	2202      	movs	r2, #2
 8014eae:	701a      	strb	r2, [r3, #0]
 8014eb0:	e03d      	b.n	8014f2e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	4a22      	ldr	r2, [pc, #136]	; (8014f40 <VerifyRfFreq+0xc8>)
 8014eb6:	4293      	cmp	r3, r2
 8014eb8:	d907      	bls.n	8014eca <VerifyRfFreq+0x52>
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	4a21      	ldr	r2, [pc, #132]	; (8014f44 <VerifyRfFreq+0xcc>)
 8014ebe:	4293      	cmp	r3, r2
 8014ec0:	d803      	bhi.n	8014eca <VerifyRfFreq+0x52>
    {
        *band = 0;
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	701a      	strb	r2, [r3, #0]
 8014ec8:	e031      	b.n	8014f2e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	4a1d      	ldr	r2, [pc, #116]	; (8014f44 <VerifyRfFreq+0xcc>)
 8014ece:	4293      	cmp	r3, r2
 8014ed0:	d907      	bls.n	8014ee2 <VerifyRfFreq+0x6a>
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	4a1c      	ldr	r2, [pc, #112]	; (8014f48 <VerifyRfFreq+0xd0>)
 8014ed6:	4293      	cmp	r3, r2
 8014ed8:	d803      	bhi.n	8014ee2 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	2201      	movs	r2, #1
 8014ede:	701a      	strb	r2, [r3, #0]
 8014ee0:	e025      	b.n	8014f2e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	4a19      	ldr	r2, [pc, #100]	; (8014f4c <VerifyRfFreq+0xd4>)
 8014ee6:	4293      	cmp	r3, r2
 8014ee8:	d907      	bls.n	8014efa <VerifyRfFreq+0x82>
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	4a18      	ldr	r2, [pc, #96]	; (8014f50 <VerifyRfFreq+0xd8>)
 8014eee:	4293      	cmp	r3, r2
 8014ef0:	d803      	bhi.n	8014efa <VerifyRfFreq+0x82>
    {
        *band = 5;
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	2205      	movs	r2, #5
 8014ef6:	701a      	strb	r2, [r3, #0]
 8014ef8:	e019      	b.n	8014f2e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	4a15      	ldr	r2, [pc, #84]	; (8014f54 <VerifyRfFreq+0xdc>)
 8014efe:	4293      	cmp	r3, r2
 8014f00:	d907      	bls.n	8014f12 <VerifyRfFreq+0x9a>
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	4a14      	ldr	r2, [pc, #80]	; (8014f58 <VerifyRfFreq+0xe0>)
 8014f06:	4293      	cmp	r3, r2
 8014f08:	d803      	bhi.n	8014f12 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	2203      	movs	r2, #3
 8014f0e:	701a      	strb	r2, [r3, #0]
 8014f10:	e00d      	b.n	8014f2e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	4a11      	ldr	r2, [pc, #68]	; (8014f5c <VerifyRfFreq+0xe4>)
 8014f16:	4293      	cmp	r3, r2
 8014f18:	d307      	bcc.n	8014f2a <VerifyRfFreq+0xb2>
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	4a10      	ldr	r2, [pc, #64]	; (8014f60 <VerifyRfFreq+0xe8>)
 8014f1e:	4293      	cmp	r3, r2
 8014f20:	d803      	bhi.n	8014f2a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	2204      	movs	r2, #4
 8014f26:	701a      	strb	r2, [r3, #0]
 8014f28:	e001      	b.n	8014f2e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	e000      	b.n	8014f30 <VerifyRfFreq+0xb8>
    }
    return true;
 8014f2e:	2301      	movs	r3, #1
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	3708      	adds	r7, #8
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}
 8014f38:	0801b848 	.word	0x0801b848
 8014f3c:	337055c0 	.word	0x337055c0
 8014f40:	338eda3f 	.word	0x338eda3f
 8014f44:	33bca100 	.word	0x33bca100
 8014f48:	33c5c8c0 	.word	0x33c5c8c0
 8014f4c:	33c74f5f 	.word	0x33c74f5f
 8014f50:	33cef080 	.word	0x33cef080
 8014f54:	33d1fdbf 	.word	0x33d1fdbf
 8014f58:	33d5ce50 	.word	0x33d5ce50
 8014f5c:	33d691a0 	.word	0x33d691a0
 8014f60:	33db2580 	.word	0x33db2580

08014f64 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014f64:	b590      	push	{r4, r7, lr}
 8014f66:	b08b      	sub	sp, #44	; 0x2c
 8014f68:	af04      	add	r7, sp, #16
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	460a      	mov	r2, r1
 8014f6e:	71fb      	strb	r3, [r7, #7]
 8014f70:	4613      	mov	r3, r2
 8014f72:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8014f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f78:	4a1f      	ldr	r2, [pc, #124]	; (8014ff8 <GetTimeOnAir+0x94>)
 8014f7a:	5cd3      	ldrb	r3, [r2, r3]
 8014f7c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8014f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f82:	491e      	ldr	r1, [pc, #120]	; (8014ffc <GetTimeOnAir+0x98>)
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7ff ff03 	bl	8014d90 <RegionCommonGetBandwidth>
 8014f8a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8014f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f94:	2b07      	cmp	r3, #7
 8014f96:	d118      	bne.n	8014fca <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8014f98:	4b19      	ldr	r3, [pc, #100]	; (8015000 <GetTimeOnAir+0x9c>)
 8014f9a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014f9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014fa4:	fb02 f303 	mul.w	r3, r2, r3
 8014fa8:	4619      	mov	r1, r3
 8014faa:	88bb      	ldrh	r3, [r7, #4]
 8014fac:	b2db      	uxtb	r3, r3
 8014fae:	2201      	movs	r2, #1
 8014fb0:	9203      	str	r2, [sp, #12]
 8014fb2:	9302      	str	r3, [sp, #8]
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	9301      	str	r3, [sp, #4]
 8014fb8:	2305      	movs	r3, #5
 8014fba:	9300      	str	r3, [sp, #0]
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	460a      	mov	r2, r1
 8014fc0:	68f9      	ldr	r1, [r7, #12]
 8014fc2:	2000      	movs	r0, #0
 8014fc4:	47a0      	blx	r4
 8014fc6:	6178      	str	r0, [r7, #20]
 8014fc8:	e011      	b.n	8014fee <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014fca:	4b0d      	ldr	r3, [pc, #52]	; (8015000 <GetTimeOnAir+0x9c>)
 8014fcc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014fce:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014fd2:	88bb      	ldrh	r3, [r7, #4]
 8014fd4:	b2db      	uxtb	r3, r3
 8014fd6:	2101      	movs	r1, #1
 8014fd8:	9103      	str	r1, [sp, #12]
 8014fda:	9302      	str	r3, [sp, #8]
 8014fdc:	2300      	movs	r3, #0
 8014fde:	9301      	str	r3, [sp, #4]
 8014fe0:	2308      	movs	r3, #8
 8014fe2:	9300      	str	r3, [sp, #0]
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	68f9      	ldr	r1, [r7, #12]
 8014fe8:	2001      	movs	r0, #1
 8014fea:	47a0      	blx	r4
 8014fec:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8014fee:	697b      	ldr	r3, [r7, #20]
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	371c      	adds	r7, #28
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd90      	pop	{r4, r7, pc}
 8014ff8:	0801b810 	.word	0x0801b810
 8014ffc:	0801b818 	.word	0x0801b818
 8015000:	0801b848 	.word	0x0801b848

08015004 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b088      	sub	sp, #32
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801500c:	2300      	movs	r3, #0
 801500e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	781b      	ldrb	r3, [r3, #0]
 8015014:	3b01      	subs	r3, #1
 8015016:	2b38      	cmp	r3, #56	; 0x38
 8015018:	f200 8125 	bhi.w	8015266 <RegionEU868GetPhyParam+0x262>
 801501c:	a201      	add	r2, pc, #4	; (adr r2, 8015024 <RegionEU868GetPhyParam+0x20>)
 801501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015022:	bf00      	nop
 8015024:	08015109 	.word	0x08015109
 8015028:	0801510f 	.word	0x0801510f
 801502c:	08015267 	.word	0x08015267
 8015030:	08015267 	.word	0x08015267
 8015034:	08015267 	.word	0x08015267
 8015038:	08015115 	.word	0x08015115
 801503c:	08015267 	.word	0x08015267
 8015040:	0801514d 	.word	0x0801514d
 8015044:	08015267 	.word	0x08015267
 8015048:	08015153 	.word	0x08015153
 801504c:	08015159 	.word	0x08015159
 8015050:	0801515f 	.word	0x0801515f
 8015054:	08015165 	.word	0x08015165
 8015058:	08015175 	.word	0x08015175
 801505c:	08015185 	.word	0x08015185
 8015060:	0801518b 	.word	0x0801518b
 8015064:	08015193 	.word	0x08015193
 8015068:	0801519b 	.word	0x0801519b
 801506c:	080151a3 	.word	0x080151a3
 8015070:	080151ab 	.word	0x080151ab
 8015074:	080151b3 	.word	0x080151b3
 8015078:	080151bb 	.word	0x080151bb
 801507c:	080151cf 	.word	0x080151cf
 8015080:	080151d5 	.word	0x080151d5
 8015084:	080151db 	.word	0x080151db
 8015088:	080151e1 	.word	0x080151e1
 801508c:	080151eb 	.word	0x080151eb
 8015090:	080151f5 	.word	0x080151f5
 8015094:	080151fb 	.word	0x080151fb
 8015098:	08015203 	.word	0x08015203
 801509c:	08015209 	.word	0x08015209
 80150a0:	0801520f 	.word	0x0801520f
 80150a4:	08015217 	.word	0x08015217
 80150a8:	0801511b 	.word	0x0801511b
 80150ac:	08015267 	.word	0x08015267
 80150b0:	08015267 	.word	0x08015267
 80150b4:	08015267 	.word	0x08015267
 80150b8:	08015267 	.word	0x08015267
 80150bc:	08015267 	.word	0x08015267
 80150c0:	08015267 	.word	0x08015267
 80150c4:	08015267 	.word	0x08015267
 80150c8:	08015267 	.word	0x08015267
 80150cc:	08015267 	.word	0x08015267
 80150d0:	08015267 	.word	0x08015267
 80150d4:	08015267 	.word	0x08015267
 80150d8:	08015267 	.word	0x08015267
 80150dc:	08015267 	.word	0x08015267
 80150e0:	0801521d 	.word	0x0801521d
 80150e4:	08015223 	.word	0x08015223
 80150e8:	08015231 	.word	0x08015231
 80150ec:	08015267 	.word	0x08015267
 80150f0:	08015267 	.word	0x08015267
 80150f4:	08015237 	.word	0x08015237
 80150f8:	0801523d 	.word	0x0801523d
 80150fc:	08015267 	.word	0x08015267
 8015100:	08015243 	.word	0x08015243
 8015104:	08015253 	.word	0x08015253
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8015108:	2300      	movs	r3, #0
 801510a:	61bb      	str	r3, [r7, #24]
            break;
 801510c:	e0ac      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801510e:	2300      	movs	r3, #0
 8015110:	61bb      	str	r3, [r7, #24]
            break;
 8015112:	e0a9      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8015114:	2300      	movs	r3, #0
 8015116:	61bb      	str	r3, [r7, #24]
            break;
 8015118:	e0a6      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015120:	733b      	strb	r3, [r7, #12]
 8015122:	2307      	movs	r3, #7
 8015124:	737b      	strb	r3, [r7, #13]
 8015126:	2300      	movs	r3, #0
 8015128:	73bb      	strb	r3, [r7, #14]
 801512a:	2310      	movs	r3, #16
 801512c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801512e:	4b52      	ldr	r3, [pc, #328]	; (8015278 <RegionEU868GetPhyParam+0x274>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015134:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015136:	4b50      	ldr	r3, [pc, #320]	; (8015278 <RegionEU868GetPhyParam+0x274>)
 8015138:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801513a:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801513c:	f107 030c 	add.w	r3, r7, #12
 8015140:	4618      	mov	r0, r3
 8015142:	f7ff fdd2 	bl	8014cea <RegionCommonGetNextLowerTxDr>
 8015146:	4603      	mov	r3, r0
 8015148:	61bb      	str	r3, [r7, #24]
            break;
 801514a:	e08d      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801514c:	2300      	movs	r3, #0
 801514e:	61bb      	str	r3, [r7, #24]
            break;
 8015150:	e08a      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8015152:	2300      	movs	r3, #0
 8015154:	61bb      	str	r3, [r7, #24]
            break;
 8015156:	e087      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015158:	2340      	movs	r3, #64	; 0x40
 801515a:	61bb      	str	r3, [r7, #24]
            break;
 801515c:	e084      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801515e:	2320      	movs	r3, #32
 8015160:	61bb      	str	r3, [r7, #24]
            break;
 8015162:	e081      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801516a:	461a      	mov	r2, r3
 801516c:	4b43      	ldr	r3, [pc, #268]	; (801527c <RegionEU868GetPhyParam+0x278>)
 801516e:	5c9b      	ldrb	r3, [r3, r2]
 8015170:	61bb      	str	r3, [r7, #24]
            break;
 8015172:	e079      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801517a:	461a      	mov	r2, r3
 801517c:	4b40      	ldr	r3, [pc, #256]	; (8015280 <RegionEU868GetPhyParam+0x27c>)
 801517e:	5c9b      	ldrb	r3, [r3, r2]
 8015180:	61bb      	str	r3, [r7, #24]
            break;
 8015182:	e071      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8015184:	2301      	movs	r3, #1
 8015186:	61bb      	str	r3, [r7, #24]
            break;
 8015188:	e06e      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801518a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801518e:	61bb      	str	r3, [r7, #24]
            break;
 8015190:	e06a      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8015192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015196:	61bb      	str	r3, [r7, #24]
            break;
 8015198:	e066      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801519a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801519e:	61bb      	str	r3, [r7, #24]
            break;
 80151a0:	e062      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80151a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80151a6:	61bb      	str	r3, [r7, #24]
            break;
 80151a8:	e05e      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80151aa:	f241 7370 	movw	r3, #6000	; 0x1770
 80151ae:	61bb      	str	r3, [r7, #24]
            break;
 80151b0:	e05a      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80151b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80151b6:	61bb      	str	r3, [r7, #24]
            break;
 80151b8:	e056      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80151ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80151be:	4831      	ldr	r0, [pc, #196]	; (8015284 <RegionEU868GetPhyParam+0x280>)
 80151c0:	f001 f874 	bl	80162ac <randr>
 80151c4:	4603      	mov	r3, r0
 80151c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80151ca:	61bb      	str	r3, [r7, #24]
            break;
 80151cc:	e04c      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80151ce:	2300      	movs	r3, #0
 80151d0:	61bb      	str	r3, [r7, #24]
            break;
 80151d2:	e049      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80151d4:	4b2c      	ldr	r3, [pc, #176]	; (8015288 <RegionEU868GetPhyParam+0x284>)
 80151d6:	61bb      	str	r3, [r7, #24]
            break;
 80151d8:	e046      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80151da:	2300      	movs	r3, #0
 80151dc:	61bb      	str	r3, [r7, #24]
            break;
 80151de:	e043      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80151e0:	4b25      	ldr	r3, [pc, #148]	; (8015278 <RegionEU868GetPhyParam+0x274>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	33c0      	adds	r3, #192	; 0xc0
 80151e6:	61bb      	str	r3, [r7, #24]
            break;
 80151e8:	e03e      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80151ea:	4b23      	ldr	r3, [pc, #140]	; (8015278 <RegionEU868GetPhyParam+0x274>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	33c2      	adds	r3, #194	; 0xc2
 80151f0:	61bb      	str	r3, [r7, #24]
            break;
 80151f2:	e039      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80151f4:	2310      	movs	r3, #16
 80151f6:	61bb      	str	r3, [r7, #24]
            break;
 80151f8:	e036      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80151fa:	4b1f      	ldr	r3, [pc, #124]	; (8015278 <RegionEU868GetPhyParam+0x274>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	61bb      	str	r3, [r7, #24]
            break;
 8015200:	e032      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8015202:	2300      	movs	r3, #0
 8015204:	61bb      	str	r3, [r7, #24]
            break;
 8015206:	e02f      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015208:	2300      	movs	r3, #0
 801520a:	61bb      	str	r3, [r7, #24]
            break;
 801520c:	e02c      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801520e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8015212:	61bb      	str	r3, [r7, #24]
            break;
 8015214:	e028      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8015216:	4b1d      	ldr	r3, [pc, #116]	; (801528c <RegionEU868GetPhyParam+0x288>)
 8015218:	61bb      	str	r3, [r7, #24]
            break;
 801521a:	e025      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801521c:	4b1a      	ldr	r3, [pc, #104]	; (8015288 <RegionEU868GetPhyParam+0x284>)
 801521e:	61bb      	str	r3, [r7, #24]
            break;
 8015220:	e022      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8015222:	2311      	movs	r3, #17
 8015224:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8015226:	2302      	movs	r3, #2
 8015228:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801522a:	2300      	movs	r3, #0
 801522c:	76bb      	strb	r3, [r7, #26]
            break;
 801522e:	e01b      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8015230:	2303      	movs	r3, #3
 8015232:	61bb      	str	r3, [r7, #24]
            break;
 8015234:	e018      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015236:	4b14      	ldr	r3, [pc, #80]	; (8015288 <RegionEU868GetPhyParam+0x284>)
 8015238:	61bb      	str	r3, [r7, #24]
            break;
 801523a:	e015      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801523c:	2303      	movs	r3, #3
 801523e:	61bb      	str	r3, [r7, #24]
            break;
 8015240:	e012      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015248:	461a      	mov	r2, r3
 801524a:	4b11      	ldr	r3, [pc, #68]	; (8015290 <RegionEU868GetPhyParam+0x28c>)
 801524c:	5c9b      	ldrb	r3, [r3, r2]
 801524e:	61bb      	str	r3, [r7, #24]
            break;
 8015250:	e00a      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015258:	490e      	ldr	r1, [pc, #56]	; (8015294 <RegionEU868GetPhyParam+0x290>)
 801525a:	4618      	mov	r0, r3
 801525c:	f7ff fd98 	bl	8014d90 <RegionCommonGetBandwidth>
 8015260:	4603      	mov	r3, r0
 8015262:	61bb      	str	r3, [r7, #24]
            break;
 8015264:	e000      	b.n	8015268 <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 8015266:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015268:	69bb      	ldr	r3, [r7, #24]
 801526a:	61fb      	str	r3, [r7, #28]
 801526c:	2300      	movs	r3, #0
 801526e:	69fb      	ldr	r3, [r7, #28]
}
 8015270:	4618      	mov	r0, r3
 8015272:	3720      	adds	r7, #32
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}
 8015278:	20000dcc 	.word	0x20000dcc
 801527c:	0801b838 	.word	0x0801b838
 8015280:	0801b840 	.word	0x0801b840
 8015284:	fffffc18 	.word	0xfffffc18
 8015288:	33d3e608 	.word	0x33d3e608
 801528c:	4009999a 	.word	0x4009999a
 8015290:	0801b810 	.word	0x0801b810
 8015294:	0801b818 	.word	0x0801b818

08015298 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015298:	b590      	push	{r4, r7, lr}
 801529a:	b085      	sub	sp, #20
 801529c:	af02      	add	r7, sp, #8
 801529e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80152a0:	4b11      	ldr	r3, [pc, #68]	; (80152e8 <RegionEU868SetBandTxDone+0x50>)
 80152a2:	681a      	ldr	r2, [r3, #0]
 80152a4:	4b11      	ldr	r3, [pc, #68]	; (80152ec <RegionEU868SetBandTxDone+0x54>)
 80152a6:	6819      	ldr	r1, [r3, #0]
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	781b      	ldrb	r3, [r3, #0]
 80152ac:	4618      	mov	r0, r3
 80152ae:	4603      	mov	r3, r0
 80152b0:	005b      	lsls	r3, r3, #1
 80152b2:	4403      	add	r3, r0
 80152b4:	009b      	lsls	r3, r3, #2
 80152b6:	440b      	add	r3, r1
 80152b8:	3309      	adds	r3, #9
 80152ba:	781b      	ldrb	r3, [r3, #0]
 80152bc:	4619      	mov	r1, r3
 80152be:	460b      	mov	r3, r1
 80152c0:	005b      	lsls	r3, r3, #1
 80152c2:	440b      	add	r3, r1
 80152c4:	00db      	lsls	r3, r3, #3
 80152c6:	18d0      	adds	r0, r2, r3
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	6899      	ldr	r1, [r3, #8]
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	785c      	ldrb	r4, [r3, #1]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	691a      	ldr	r2, [r3, #16]
 80152d4:	9200      	str	r2, [sp, #0]
 80152d6:	68db      	ldr	r3, [r3, #12]
 80152d8:	4622      	mov	r2, r4
 80152da:	f7ff f8ef 	bl	80144bc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 80152de:	bf00      	nop
 80152e0:	370c      	adds	r7, #12
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd90      	pop	{r4, r7, pc}
 80152e6:	bf00      	nop
 80152e8:	20000dc8 	.word	0x20000dc8
 80152ec:	20000dcc 	.word	0x20000dcc

080152f0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b0b0      	sub	sp, #192	; 0xc0
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80152f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80152fc:	2290      	movs	r2, #144	; 0x90
 80152fe:	2100      	movs	r1, #0
 8015300:	4618      	mov	r0, r3
 8015302:	f005 fba3 	bl	801aa4c <memset>
 8015306:	2364      	movs	r3, #100	; 0x64
 8015308:	863b      	strh	r3, [r7, #48]	; 0x30
 801530a:	2364      	movs	r3, #100	; 0x64
 801530c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8015310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015314:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8015318:	230a      	movs	r3, #10
 801531a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801531e:	2364      	movs	r3, #100	; 0x64
 8015320:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8015324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015328:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	7a1b      	ldrb	r3, [r3, #8]
 8015330:	2b02      	cmp	r3, #2
 8015332:	d05c      	beq.n	80153ee <RegionEU868InitDefaults+0xfe>
 8015334:	2b02      	cmp	r3, #2
 8015336:	dc69      	bgt.n	801540c <RegionEU868InitDefaults+0x11c>
 8015338:	2b00      	cmp	r3, #0
 801533a:	d002      	beq.n	8015342 <RegionEU868InitDefaults+0x52>
 801533c:	2b01      	cmp	r3, #1
 801533e:	d03e      	beq.n	80153be <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015340:	e064      	b.n	801540c <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d061      	beq.n	801540e <RegionEU868InitDefaults+0x11e>
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	685b      	ldr	r3, [r3, #4]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d05d      	beq.n	801540e <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	4a2f      	ldr	r2, [pc, #188]	; (8015414 <RegionEU868InitDefaults+0x124>)
 8015358:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	4a2e      	ldr	r2, [pc, #184]	; (8015418 <RegionEU868InitDefaults+0x128>)
 8015360:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8015362:	4b2c      	ldr	r3, [pc, #176]	; (8015414 <RegionEU868InitDefaults+0x124>)
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	4618      	mov	r0, r3
 8015368:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801536c:	2290      	movs	r2, #144	; 0x90
 801536e:	4619      	mov	r1, r3
 8015370:	f000 ffb3 	bl	80162da <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8015374:	4b28      	ldr	r3, [pc, #160]	; (8015418 <RegionEU868InitDefaults+0x128>)
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	4a28      	ldr	r2, [pc, #160]	; (801541c <RegionEU868InitDefaults+0x12c>)
 801537a:	ca07      	ldmia	r2, {r0, r1, r2}
 801537c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015380:	4b25      	ldr	r3, [pc, #148]	; (8015418 <RegionEU868InitDefaults+0x128>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	4a26      	ldr	r2, [pc, #152]	; (8015420 <RegionEU868InitDefaults+0x130>)
 8015386:	330c      	adds	r3, #12
 8015388:	ca07      	ldmia	r2, {r0, r1, r2}
 801538a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801538e:	4b22      	ldr	r3, [pc, #136]	; (8015418 <RegionEU868InitDefaults+0x128>)
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	4a24      	ldr	r2, [pc, #144]	; (8015424 <RegionEU868InitDefaults+0x134>)
 8015394:	3318      	adds	r3, #24
 8015396:	ca07      	ldmia	r2, {r0, r1, r2}
 8015398:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801539c:	4b1e      	ldr	r3, [pc, #120]	; (8015418 <RegionEU868InitDefaults+0x128>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	2207      	movs	r2, #7
 80153a2:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80153a6:	4b1c      	ldr	r3, [pc, #112]	; (8015418 <RegionEU868InitDefaults+0x128>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80153ae:	4b1a      	ldr	r3, [pc, #104]	; (8015418 <RegionEU868InitDefaults+0x128>)
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	33c2      	adds	r3, #194	; 0xc2
 80153b4:	2201      	movs	r2, #1
 80153b6:	4619      	mov	r1, r3
 80153b8:	f7ff f85a 	bl	8014470 <RegionCommonChanMaskCopy>
 80153bc:	e027      	b.n	801540e <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80153be:	4b16      	ldr	r3, [pc, #88]	; (8015418 <RegionEU868InitDefaults+0x128>)
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	2200      	movs	r2, #0
 80153c4:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80153c6:	4b14      	ldr	r3, [pc, #80]	; (8015418 <RegionEU868InitDefaults+0x128>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	2200      	movs	r2, #0
 80153cc:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80153ce:	4b12      	ldr	r3, [pc, #72]	; (8015418 <RegionEU868InitDefaults+0x128>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	2200      	movs	r2, #0
 80153d4:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80153d6:	4b10      	ldr	r3, [pc, #64]	; (8015418 <RegionEU868InitDefaults+0x128>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80153de:	4b0e      	ldr	r3, [pc, #56]	; (8015418 <RegionEU868InitDefaults+0x128>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	33c2      	adds	r3, #194	; 0xc2
 80153e4:	2201      	movs	r2, #1
 80153e6:	4619      	mov	r1, r3
 80153e8:	f7ff f842 	bl	8014470 <RegionCommonChanMaskCopy>
            break;
 80153ec:	e00f      	b.n	801540e <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80153ee:	4b0a      	ldr	r3, [pc, #40]	; (8015418 <RegionEU868InitDefaults+0x128>)
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80153f6:	4b08      	ldr	r3, [pc, #32]	; (8015418 <RegionEU868InitDefaults+0x128>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 80153fe:	4b06      	ldr	r3, [pc, #24]	; (8015418 <RegionEU868InitDefaults+0x128>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	430a      	orrs	r2, r1
 8015404:	b292      	uxth	r2, r2
 8015406:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 801540a:	e000      	b.n	801540e <RegionEU868InitDefaults+0x11e>
            break;
 801540c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801540e:	37c0      	adds	r7, #192	; 0xc0
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	20000dc8 	.word	0x20000dc8
 8015418:	20000dcc 	.word	0x20000dcc
 801541c:	0801b2b8 	.word	0x0801b2b8
 8015420:	0801b2c4 	.word	0x0801b2c4
 8015424:	0801b2d0 	.word	0x0801b2d0

08015428 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b084      	sub	sp, #16
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	460b      	mov	r3, r1
 8015432:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015434:	78fb      	ldrb	r3, [r7, #3]
 8015436:	2b0f      	cmp	r3, #15
 8015438:	d86c      	bhi.n	8015514 <RegionEU868Verify+0xec>
 801543a:	a201      	add	r2, pc, #4	; (adr r2, 8015440 <RegionEU868Verify+0x18>)
 801543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015440:	08015481 	.word	0x08015481
 8015444:	08015515 	.word	0x08015515
 8015448:	08015515 	.word	0x08015515
 801544c:	08015515 	.word	0x08015515
 8015450:	08015515 	.word	0x08015515
 8015454:	08015499 	.word	0x08015499
 8015458:	080154b7 	.word	0x080154b7
 801545c:	080154d5 	.word	0x080154d5
 8015460:	08015515 	.word	0x08015515
 8015464:	080154f3 	.word	0x080154f3
 8015468:	080154f3 	.word	0x080154f3
 801546c:	08015515 	.word	0x08015515
 8015470:	08015515 	.word	0x08015515
 8015474:	08015515 	.word	0x08015515
 8015478:	08015515 	.word	0x08015515
 801547c:	08015511 	.word	0x08015511
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015480:	2300      	movs	r3, #0
 8015482:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	f107 020f 	add.w	r2, r7, #15
 801548c:	4611      	mov	r1, r2
 801548e:	4618      	mov	r0, r3
 8015490:	f7ff fcf2 	bl	8014e78 <VerifyRfFreq>
 8015494:	4603      	mov	r3, r0
 8015496:	e03e      	b.n	8015516 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f993 3000 	ldrsb.w	r3, [r3]
 801549e:	2207      	movs	r2, #7
 80154a0:	2100      	movs	r1, #0
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7fe ff67 	bl	8014376 <RegionCommonValueInRange>
 80154a8:	4603      	mov	r3, r0
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	bf14      	ite	ne
 80154ae:	2301      	movne	r3, #1
 80154b0:	2300      	moveq	r3, #0
 80154b2:	b2db      	uxtb	r3, r3
 80154b4:	e02f      	b.n	8015516 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f993 3000 	ldrsb.w	r3, [r3]
 80154bc:	2205      	movs	r2, #5
 80154be:	2100      	movs	r1, #0
 80154c0:	4618      	mov	r0, r3
 80154c2:	f7fe ff58 	bl	8014376 <RegionCommonValueInRange>
 80154c6:	4603      	mov	r3, r0
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	bf14      	ite	ne
 80154cc:	2301      	movne	r3, #1
 80154ce:	2300      	moveq	r3, #0
 80154d0:	b2db      	uxtb	r3, r3
 80154d2:	e020      	b.n	8015516 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f993 3000 	ldrsb.w	r3, [r3]
 80154da:	2207      	movs	r2, #7
 80154dc:	2100      	movs	r1, #0
 80154de:	4618      	mov	r0, r3
 80154e0:	f7fe ff49 	bl	8014376 <RegionCommonValueInRange>
 80154e4:	4603      	mov	r3, r0
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	bf14      	ite	ne
 80154ea:	2301      	movne	r3, #1
 80154ec:	2300      	moveq	r3, #0
 80154ee:	b2db      	uxtb	r3, r3
 80154f0:	e011      	b.n	8015516 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f993 3000 	ldrsb.w	r3, [r3]
 80154f8:	2207      	movs	r2, #7
 80154fa:	2100      	movs	r1, #0
 80154fc:	4618      	mov	r0, r3
 80154fe:	f7fe ff3a 	bl	8014376 <RegionCommonValueInRange>
 8015502:	4603      	mov	r3, r0
 8015504:	2b00      	cmp	r3, #0
 8015506:	bf14      	ite	ne
 8015508:	2301      	movne	r3, #1
 801550a:	2300      	moveq	r3, #0
 801550c:	b2db      	uxtb	r3, r3
 801550e:	e002      	b.n	8015516 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8015510:	2301      	movs	r3, #1
 8015512:	e000      	b.n	8015516 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8015514:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8015516:	4618      	mov	r0, r3
 8015518:	3710      	adds	r7, #16
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}
 801551e:	bf00      	nop

08015520 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b08a      	sub	sp, #40	; 0x28
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015528:	2350      	movs	r3, #80	; 0x50
 801552a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	791b      	ldrb	r3, [r3, #4]
 8015532:	2b10      	cmp	r3, #16
 8015534:	d162      	bne.n	80155fc <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	330f      	adds	r3, #15
 801553c:	781b      	ldrb	r3, [r3, #0]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d15e      	bne.n	8015600 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015542:	2300      	movs	r3, #0
 8015544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015548:	2303      	movs	r3, #3
 801554a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801554e:	e050      	b.n	80155f2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015550:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015554:	2b07      	cmp	r3, #7
 8015556:	d824      	bhi.n	80155a2 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681a      	ldr	r2, [r3, #0]
 801555c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015560:	4413      	add	r3, r2
 8015562:	781b      	ldrb	r3, [r3, #0]
 8015564:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015566:	69ba      	ldr	r2, [r7, #24]
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6819      	ldr	r1, [r3, #0]
 801556c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015570:	3301      	adds	r3, #1
 8015572:	440b      	add	r3, r1
 8015574:	781b      	ldrb	r3, [r3, #0]
 8015576:	021b      	lsls	r3, r3, #8
 8015578:	4313      	orrs	r3, r2
 801557a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801557c:	69ba      	ldr	r2, [r7, #24]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	6819      	ldr	r1, [r3, #0]
 8015582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015586:	3302      	adds	r3, #2
 8015588:	440b      	add	r3, r1
 801558a:	781b      	ldrb	r3, [r3, #0]
 801558c:	041b      	lsls	r3, r3, #16
 801558e:	4313      	orrs	r3, r2
 8015590:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015592:	69bb      	ldr	r3, [r7, #24]
 8015594:	2264      	movs	r2, #100	; 0x64
 8015596:	fb02 f303 	mul.w	r3, r2, r3
 801559a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801559c:	2300      	movs	r3, #0
 801559e:	61fb      	str	r3, [r7, #28]
 80155a0:	e006      	b.n	80155b0 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80155a2:	2300      	movs	r3, #0
 80155a4:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80155a6:	2300      	movs	r3, #0
 80155a8:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80155ac:	2300      	movs	r3, #0
 80155ae:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80155b0:	69bb      	ldr	r3, [r7, #24]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d00b      	beq.n	80155ce <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80155b6:	f107 0318 	add.w	r3, r7, #24
 80155ba:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80155bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80155c0:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80155c2:	f107 0310 	add.w	r3, r7, #16
 80155c6:	4618      	mov	r0, r3
 80155c8:	f000 fd0e 	bl	8015fe8 <RegionEU868ChannelAdd>
 80155cc:	e007      	b.n	80155de <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80155ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80155d2:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80155d4:	f107 030c 	add.w	r3, r7, #12
 80155d8:	4618      	mov	r0, r3
 80155da:	f000 fda7 	bl	801612c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80155de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155e2:	3303      	adds	r3, #3
 80155e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80155e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80155ec:	3301      	adds	r3, #1
 80155ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80155f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80155f6:	2b0f      	cmp	r3, #15
 80155f8:	d9aa      	bls.n	8015550 <RegionEU868ApplyCFList+0x30>
 80155fa:	e002      	b.n	8015602 <RegionEU868ApplyCFList+0xe2>
        return;
 80155fc:	bf00      	nop
 80155fe:	e000      	b.n	8015602 <RegionEU868ApplyCFList+0xe2>
        return;
 8015600:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015602:	3728      	adds	r7, #40	; 0x28
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}

08015608 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	791b      	ldrb	r3, [r3, #4]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d002      	beq.n	801561e <RegionEU868ChanMaskSet+0x16>
 8015618:	2b01      	cmp	r3, #1
 801561a:	d00b      	beq.n	8015634 <RegionEU868ChanMaskSet+0x2c>
 801561c:	e015      	b.n	801564a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801561e:	4b0e      	ldr	r3, [pc, #56]	; (8015658 <RegionEU868ChanMaskSet+0x50>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	2201      	movs	r2, #1
 801562c:	4619      	mov	r1, r3
 801562e:	f7fe ff1f 	bl	8014470 <RegionCommonChanMaskCopy>
            break;
 8015632:	e00c      	b.n	801564e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015634:	4b08      	ldr	r3, [pc, #32]	; (8015658 <RegionEU868ChanMaskSet+0x50>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	2201      	movs	r2, #1
 8015642:	4619      	mov	r1, r3
 8015644:	f7fe ff14 	bl	8014470 <RegionCommonChanMaskCopy>
            break;
 8015648:	e001      	b.n	801564e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801564a:	2300      	movs	r3, #0
 801564c:	e000      	b.n	8015650 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801564e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015650:	4618      	mov	r0, r3
 8015652:	3708      	adds	r7, #8
 8015654:	46bd      	mov	sp, r7
 8015656:	bd80      	pop	{r7, pc}
 8015658:	20000dcc 	.word	0x20000dcc

0801565c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b088      	sub	sp, #32
 8015660:	af02      	add	r7, sp, #8
 8015662:	60ba      	str	r2, [r7, #8]
 8015664:	607b      	str	r3, [r7, #4]
 8015666:	4603      	mov	r3, r0
 8015668:	73fb      	strb	r3, [r7, #15]
 801566a:	460b      	mov	r3, r1
 801566c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801566e:	2300      	movs	r3, #0
 8015670:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015676:	2b07      	cmp	r3, #7
 8015678:	bfa8      	it	ge
 801567a:	2307      	movge	r3, #7
 801567c:	b25a      	sxtb	r2, r3
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015688:	491e      	ldr	r1, [pc, #120]	; (8015704 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801568a:	4618      	mov	r0, r3
 801568c:	f7ff fb80 	bl	8014d90 <RegionCommonGetBandwidth>
 8015690:	4603      	mov	r3, r0
 8015692:	b2da      	uxtb	r2, r3
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801569e:	2b07      	cmp	r3, #7
 80156a0:	d10a      	bne.n	80156b8 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80156a8:	461a      	mov	r2, r3
 80156aa:	4b17      	ldr	r3, [pc, #92]	; (8015708 <RegionEU868ComputeRxWindowParameters+0xac>)
 80156ac:	5c9b      	ldrb	r3, [r3, r2]
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7ff f902 	bl	80148b8 <RegionCommonComputeSymbolTimeFsk>
 80156b4:	6178      	str	r0, [r7, #20]
 80156b6:	e011      	b.n	80156dc <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80156be:	461a      	mov	r2, r3
 80156c0:	4b11      	ldr	r3, [pc, #68]	; (8015708 <RegionEU868ComputeRxWindowParameters+0xac>)
 80156c2:	5c9a      	ldrb	r2, [r3, r2]
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80156ca:	4619      	mov	r1, r3
 80156cc:	4b0d      	ldr	r3, [pc, #52]	; (8015704 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80156ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80156d2:	4619      	mov	r1, r3
 80156d4:	4610      	mov	r0, r2
 80156d6:	f7ff f8d9 	bl	801488c <RegionCommonComputeSymbolTimeLoRa>
 80156da:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80156dc:	4b0b      	ldr	r3, [pc, #44]	; (801570c <RegionEU868ComputeRxWindowParameters+0xb0>)
 80156de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80156e0:	4798      	blx	r3
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	3308      	adds	r3, #8
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	320c      	adds	r2, #12
 80156ea:	7bb9      	ldrb	r1, [r7, #14]
 80156ec:	9201      	str	r2, [sp, #4]
 80156ee:	9300      	str	r3, [sp, #0]
 80156f0:	4603      	mov	r3, r0
 80156f2:	68ba      	ldr	r2, [r7, #8]
 80156f4:	6978      	ldr	r0, [r7, #20]
 80156f6:	f7ff f8ef 	bl	80148d8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80156fa:	bf00      	nop
 80156fc:	3718      	adds	r7, #24
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}
 8015702:	bf00      	nop
 8015704:	0801b818 	.word	0x0801b818
 8015708:	0801b810 	.word	0x0801b810
 801570c:	0801b848 	.word	0x0801b848

08015710 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015710:	b5b0      	push	{r4, r5, r7, lr}
 8015712:	b090      	sub	sp, #64	; 0x40
 8015714:	af0a      	add	r7, sp, #40	; 0x28
 8015716:	6078      	str	r0, [r7, #4]
 8015718:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	785b      	ldrb	r3, [r3, #1]
 801571e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015720:	2300      	movs	r3, #0
 8015722:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015724:	2300      	movs	r3, #0
 8015726:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	685b      	ldr	r3, [r3, #4]
 801572c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801572e:	4b5a      	ldr	r3, [pc, #360]	; (8015898 <RegionEU868RxConfig+0x188>)
 8015730:	685b      	ldr	r3, [r3, #4]
 8015732:	4798      	blx	r3
 8015734:	4603      	mov	r3, r0
 8015736:	2b00      	cmp	r3, #0
 8015738:	d001      	beq.n	801573e <RegionEU868RxConfig+0x2e>
    {
        return false;
 801573a:	2300      	movs	r3, #0
 801573c:	e0a8      	b.n	8015890 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	7cdb      	ldrb	r3, [r3, #19]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d126      	bne.n	8015794 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015746:	4b55      	ldr	r3, [pc, #340]	; (801589c <RegionEU868RxConfig+0x18c>)
 8015748:	681a      	ldr	r2, [r3, #0]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	4619      	mov	r1, r3
 8015750:	460b      	mov	r3, r1
 8015752:	005b      	lsls	r3, r3, #1
 8015754:	440b      	add	r3, r1
 8015756:	009b      	lsls	r3, r3, #2
 8015758:	4413      	add	r3, r2
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801575e:	4b4f      	ldr	r3, [pc, #316]	; (801589c <RegionEU868RxConfig+0x18c>)
 8015760:	681a      	ldr	r2, [r3, #0]
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	781b      	ldrb	r3, [r3, #0]
 8015766:	4619      	mov	r1, r3
 8015768:	460b      	mov	r3, r1
 801576a:	005b      	lsls	r3, r3, #1
 801576c:	440b      	add	r3, r1
 801576e:	009b      	lsls	r3, r3, #2
 8015770:	4413      	add	r3, r2
 8015772:	3304      	adds	r3, #4
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d00c      	beq.n	8015794 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801577a:	4b48      	ldr	r3, [pc, #288]	; (801589c <RegionEU868RxConfig+0x18c>)
 801577c:	681a      	ldr	r2, [r3, #0]
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	781b      	ldrb	r3, [r3, #0]
 8015782:	4619      	mov	r1, r3
 8015784:	460b      	mov	r3, r1
 8015786:	005b      	lsls	r3, r3, #1
 8015788:	440b      	add	r3, r1
 801578a:	009b      	lsls	r3, r3, #2
 801578c:	4413      	add	r3, r2
 801578e:	3304      	adds	r3, #4
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015798:	4a41      	ldr	r2, [pc, #260]	; (80158a0 <RegionEU868RxConfig+0x190>)
 801579a:	5cd3      	ldrb	r3, [r2, r3]
 801579c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801579e:	4b3e      	ldr	r3, [pc, #248]	; (8015898 <RegionEU868RxConfig+0x188>)
 80157a0:	68db      	ldr	r3, [r3, #12]
 80157a2:	6938      	ldr	r0, [r7, #16]
 80157a4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80157a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157aa:	2b07      	cmp	r3, #7
 80157ac:	d128      	bne.n	8015800 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80157ae:	2300      	movs	r3, #0
 80157b0:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80157b2:	4b39      	ldr	r3, [pc, #228]	; (8015898 <RegionEU868RxConfig+0x188>)
 80157b4:	699c      	ldr	r4, [r3, #24]
 80157b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80157ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80157be:	fb02 f303 	mul.w	r3, r2, r3
 80157c2:	4619      	mov	r1, r3
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	689b      	ldr	r3, [r3, #8]
 80157c8:	b29b      	uxth	r3, r3
 80157ca:	687a      	ldr	r2, [r7, #4]
 80157cc:	7c92      	ldrb	r2, [r2, #18]
 80157ce:	7df8      	ldrb	r0, [r7, #23]
 80157d0:	9209      	str	r2, [sp, #36]	; 0x24
 80157d2:	2200      	movs	r2, #0
 80157d4:	9208      	str	r2, [sp, #32]
 80157d6:	2200      	movs	r2, #0
 80157d8:	9207      	str	r2, [sp, #28]
 80157da:	2200      	movs	r2, #0
 80157dc:	9206      	str	r2, [sp, #24]
 80157de:	2201      	movs	r2, #1
 80157e0:	9205      	str	r2, [sp, #20]
 80157e2:	2200      	movs	r2, #0
 80157e4:	9204      	str	r2, [sp, #16]
 80157e6:	2200      	movs	r2, #0
 80157e8:	9203      	str	r2, [sp, #12]
 80157ea:	9302      	str	r3, [sp, #8]
 80157ec:	2305      	movs	r3, #5
 80157ee:	9301      	str	r3, [sp, #4]
 80157f0:	4b2c      	ldr	r3, [pc, #176]	; (80158a4 <RegionEU868RxConfig+0x194>)
 80157f2:	9300      	str	r3, [sp, #0]
 80157f4:	2300      	movs	r3, #0
 80157f6:	460a      	mov	r2, r1
 80157f8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80157fc:	47a0      	blx	r4
 80157fe:	e024      	b.n	801584a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015800:	2301      	movs	r3, #1
 8015802:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015804:	4b24      	ldr	r3, [pc, #144]	; (8015898 <RegionEU868RxConfig+0x188>)
 8015806:	699c      	ldr	r4, [r3, #24]
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	789b      	ldrb	r3, [r3, #2]
 801580c:	461d      	mov	r5, r3
 801580e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	689b      	ldr	r3, [r3, #8]
 8015816:	b29b      	uxth	r3, r3
 8015818:	687a      	ldr	r2, [r7, #4]
 801581a:	7c92      	ldrb	r2, [r2, #18]
 801581c:	7df8      	ldrb	r0, [r7, #23]
 801581e:	9209      	str	r2, [sp, #36]	; 0x24
 8015820:	2201      	movs	r2, #1
 8015822:	9208      	str	r2, [sp, #32]
 8015824:	2200      	movs	r2, #0
 8015826:	9207      	str	r2, [sp, #28]
 8015828:	2200      	movs	r2, #0
 801582a:	9206      	str	r2, [sp, #24]
 801582c:	2200      	movs	r2, #0
 801582e:	9205      	str	r2, [sp, #20]
 8015830:	2200      	movs	r2, #0
 8015832:	9204      	str	r2, [sp, #16]
 8015834:	2200      	movs	r2, #0
 8015836:	9203      	str	r2, [sp, #12]
 8015838:	9302      	str	r3, [sp, #8]
 801583a:	2308      	movs	r3, #8
 801583c:	9301      	str	r3, [sp, #4]
 801583e:	2300      	movs	r3, #0
 8015840:	9300      	str	r3, [sp, #0]
 8015842:	2301      	movs	r3, #1
 8015844:	460a      	mov	r2, r1
 8015846:	4629      	mov	r1, r5
 8015848:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	7c5b      	ldrb	r3, [r3, #17]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d005      	beq.n	801585e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8015852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015856:	4a14      	ldr	r2, [pc, #80]	; (80158a8 <RegionEU868RxConfig+0x198>)
 8015858:	5cd3      	ldrb	r3, [r2, r3]
 801585a:	75bb      	strb	r3, [r7, #22]
 801585c:	e004      	b.n	8015868 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801585e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015862:	4a12      	ldr	r2, [pc, #72]	; (80158ac <RegionEU868RxConfig+0x19c>)
 8015864:	5cd3      	ldrb	r3, [r2, r3]
 8015866:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015868:	4b0b      	ldr	r3, [pc, #44]	; (8015898 <RegionEU868RxConfig+0x188>)
 801586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801586c:	7dba      	ldrb	r2, [r7, #22]
 801586e:	320d      	adds	r2, #13
 8015870:	b2d1      	uxtb	r1, r2
 8015872:	7dfa      	ldrb	r2, [r7, #23]
 8015874:	4610      	mov	r0, r2
 8015876:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	7cdb      	ldrb	r3, [r3, #19]
 801587c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015880:	6939      	ldr	r1, [r7, #16]
 8015882:	4618      	mov	r0, r3
 8015884:	f7ff faa2 	bl	8014dcc <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015888:	683b      	ldr	r3, [r7, #0]
 801588a:	7bfa      	ldrb	r2, [r7, #15]
 801588c:	701a      	strb	r2, [r3, #0]
    return true;
 801588e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015890:	4618      	mov	r0, r3
 8015892:	3718      	adds	r7, #24
 8015894:	46bd      	mov	sp, r7
 8015896:	bdb0      	pop	{r4, r5, r7, pc}
 8015898:	0801b848 	.word	0x0801b848
 801589c:	20000dcc 	.word	0x20000dcc
 80158a0:	0801b810 	.word	0x0801b810
 80158a4:	00014585 	.word	0x00014585
 80158a8:	0801b840 	.word	0x0801b840
 80158ac:	0801b838 	.word	0x0801b838

080158b0 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80158b0:	b590      	push	{r4, r7, lr}
 80158b2:	b093      	sub	sp, #76	; 0x4c
 80158b4:	af0a      	add	r7, sp, #40	; 0x28
 80158b6:	60f8      	str	r0, [r7, #12]
 80158b8:	60b9      	str	r1, [r7, #8]
 80158ba:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80158c2:	461a      	mov	r2, r3
 80158c4:	4b5d      	ldr	r3, [pc, #372]	; (8015a3c <RegionEU868TxConfig+0x18c>)
 80158c6:	5c9b      	ldrb	r3, [r3, r2]
 80158c8:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80158d0:	4b5b      	ldr	r3, [pc, #364]	; (8015a40 <RegionEU868TxConfig+0x190>)
 80158d2:	681a      	ldr	r2, [r3, #0]
 80158d4:	4b5b      	ldr	r3, [pc, #364]	; (8015a44 <RegionEU868TxConfig+0x194>)
 80158d6:	6819      	ldr	r1, [r3, #0]
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	461c      	mov	r4, r3
 80158de:	4623      	mov	r3, r4
 80158e0:	005b      	lsls	r3, r3, #1
 80158e2:	4423      	add	r3, r4
 80158e4:	009b      	lsls	r3, r3, #2
 80158e6:	440b      	add	r3, r1
 80158e8:	3309      	adds	r3, #9
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	4619      	mov	r1, r3
 80158ee:	460b      	mov	r3, r1
 80158f0:	005b      	lsls	r3, r3, #1
 80158f2:	440b      	add	r3, r1
 80158f4:	00db      	lsls	r3, r3, #3
 80158f6:	4413      	add	r3, r2
 80158f8:	3302      	adds	r3, #2
 80158fa:	f993 3000 	ldrsb.w	r3, [r3]
 80158fe:	4619      	mov	r1, r3
 8015900:	f7ff fa31 	bl	8014d66 <RegionCommonLimitTxPower>
 8015904:	4603      	mov	r3, r0
 8015906:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801590e:	494e      	ldr	r1, [pc, #312]	; (8015a48 <RegionEU868TxConfig+0x198>)
 8015910:	4618      	mov	r0, r3
 8015912:	f7ff fa3d 	bl	8014d90 <RegionCommonGetBandwidth>
 8015916:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015918:	2300      	movs	r3, #0
 801591a:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	6859      	ldr	r1, [r3, #4]
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	689a      	ldr	r2, [r3, #8]
 8015924:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015928:	4618      	mov	r0, r3
 801592a:	f7ff f88d 	bl	8014a48 <RegionCommonComputeTxPower>
 801592e:	4603      	mov	r3, r0
 8015930:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015932:	4b46      	ldr	r3, [pc, #280]	; (8015a4c <RegionEU868TxConfig+0x19c>)
 8015934:	68da      	ldr	r2, [r3, #12]
 8015936:	4b43      	ldr	r3, [pc, #268]	; (8015a44 <RegionEU868TxConfig+0x194>)
 8015938:	6819      	ldr	r1, [r3, #0]
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	781b      	ldrb	r3, [r3, #0]
 801593e:	4618      	mov	r0, r3
 8015940:	4603      	mov	r3, r0
 8015942:	005b      	lsls	r3, r3, #1
 8015944:	4403      	add	r3, r0
 8015946:	009b      	lsls	r3, r3, #2
 8015948:	440b      	add	r3, r1
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	4618      	mov	r0, r3
 801594e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015956:	2b07      	cmp	r3, #7
 8015958:	d124      	bne.n	80159a4 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801595a:	2300      	movs	r3, #0
 801595c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801595e:	4b3b      	ldr	r3, [pc, #236]	; (8015a4c <RegionEU868TxConfig+0x19c>)
 8015960:	69dc      	ldr	r4, [r3, #28]
 8015962:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801596a:	fb02 f303 	mul.w	r3, r2, r3
 801596e:	461a      	mov	r2, r3
 8015970:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015974:	7ff8      	ldrb	r0, [r7, #31]
 8015976:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801597a:	9308      	str	r3, [sp, #32]
 801597c:	2300      	movs	r3, #0
 801597e:	9307      	str	r3, [sp, #28]
 8015980:	2300      	movs	r3, #0
 8015982:	9306      	str	r3, [sp, #24]
 8015984:	2300      	movs	r3, #0
 8015986:	9305      	str	r3, [sp, #20]
 8015988:	2301      	movs	r3, #1
 801598a:	9304      	str	r3, [sp, #16]
 801598c:	2300      	movs	r3, #0
 801598e:	9303      	str	r3, [sp, #12]
 8015990:	2305      	movs	r3, #5
 8015992:	9302      	str	r3, [sp, #8]
 8015994:	2300      	movs	r3, #0
 8015996:	9301      	str	r3, [sp, #4]
 8015998:	9200      	str	r2, [sp, #0]
 801599a:	69bb      	ldr	r3, [r7, #24]
 801599c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80159a0:	47a0      	blx	r4
 80159a2:	e01d      	b.n	80159e0 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80159a4:	2301      	movs	r3, #1
 80159a6:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80159a8:	4b28      	ldr	r3, [pc, #160]	; (8015a4c <RegionEU868TxConfig+0x19c>)
 80159aa:	69dc      	ldr	r4, [r3, #28]
 80159ac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80159b0:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80159b4:	7ff8      	ldrb	r0, [r7, #31]
 80159b6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80159ba:	9208      	str	r2, [sp, #32]
 80159bc:	2200      	movs	r2, #0
 80159be:	9207      	str	r2, [sp, #28]
 80159c0:	2200      	movs	r2, #0
 80159c2:	9206      	str	r2, [sp, #24]
 80159c4:	2200      	movs	r2, #0
 80159c6:	9205      	str	r2, [sp, #20]
 80159c8:	2201      	movs	r2, #1
 80159ca:	9204      	str	r2, [sp, #16]
 80159cc:	2200      	movs	r2, #0
 80159ce:	9203      	str	r2, [sp, #12]
 80159d0:	2208      	movs	r2, #8
 80159d2:	9202      	str	r2, [sp, #8]
 80159d4:	2201      	movs	r2, #1
 80159d6:	9201      	str	r2, [sp, #4]
 80159d8:	9300      	str	r3, [sp, #0]
 80159da:	69bb      	ldr	r3, [r7, #24]
 80159dc:	2200      	movs	r2, #0
 80159de:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80159e0:	4b18      	ldr	r3, [pc, #96]	; (8015a44 <RegionEU868TxConfig+0x194>)
 80159e2:	681a      	ldr	r2, [r3, #0]
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	781b      	ldrb	r3, [r3, #0]
 80159e8:	4619      	mov	r1, r3
 80159ea:	460b      	mov	r3, r1
 80159ec:	005b      	lsls	r3, r3, #1
 80159ee:	440b      	add	r3, r1
 80159f0:	009b      	lsls	r3, r3, #2
 80159f2:	4413      	add	r3, r2
 80159f4:	681a      	ldr	r2, [r3, #0]
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159fc:	4619      	mov	r1, r3
 80159fe:	4610      	mov	r0, r2
 8015a00:	f7ff fa22 	bl	8014e48 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	899b      	ldrh	r3, [r3, #12]
 8015a0e:	4619      	mov	r1, r3
 8015a10:	4610      	mov	r0, r2
 8015a12:	f7ff faa7 	bl	8014f64 <GetTimeOnAir>
 8015a16:	4602      	mov	r2, r0
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015a1c:	4b0b      	ldr	r3, [pc, #44]	; (8015a4c <RegionEU868TxConfig+0x19c>)
 8015a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a20:	68fa      	ldr	r2, [r7, #12]
 8015a22:	8992      	ldrh	r2, [r2, #12]
 8015a24:	b2d1      	uxtb	r1, r2
 8015a26:	7ffa      	ldrb	r2, [r7, #31]
 8015a28:	4610      	mov	r0, r2
 8015a2a:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015a2c:	68bb      	ldr	r3, [r7, #8]
 8015a2e:	7f7a      	ldrb	r2, [r7, #29]
 8015a30:	701a      	strb	r2, [r3, #0]
    return true;
 8015a32:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015a34:	4618      	mov	r0, r3
 8015a36:	3724      	adds	r7, #36	; 0x24
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd90      	pop	{r4, r7, pc}
 8015a3c:	0801b810 	.word	0x0801b810
 8015a40:	20000dc8 	.word	0x20000dc8
 8015a44:	20000dcc 	.word	0x20000dcc
 8015a48:	0801b818 	.word	0x0801b818
 8015a4c:	0801b848 	.word	0x0801b848

08015a50 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015a50:	b590      	push	{r4, r7, lr}
 8015a52:	b093      	sub	sp, #76	; 0x4c
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	60f8      	str	r0, [r7, #12]
 8015a58:	60b9      	str	r1, [r7, #8]
 8015a5a:	607a      	str	r2, [r7, #4]
 8015a5c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015a5e:	2307      	movs	r3, #7
 8015a60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015a64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015a68:	2200      	movs	r2, #0
 8015a6a:	601a      	str	r2, [r3, #0]
 8015a6c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015a74:	2300      	movs	r3, #0
 8015a76:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015a7e:	e085      	b.n	8015b8c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	685a      	ldr	r2, [r3, #4]
 8015a84:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015a88:	4413      	add	r3, r2
 8015a8a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015a8e:	4611      	mov	r1, r2
 8015a90:	4618      	mov	r0, r3
 8015a92:	f7fe fe31 	bl	80146f8 <RegionCommonParseLinkAdrReq>
 8015a96:	4603      	mov	r3, r0
 8015a98:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015a9c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d07b      	beq.n	8015b9c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015aa4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015aa8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015aac:	4413      	add	r3, r2
 8015aae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015ab2:	2307      	movs	r3, #7
 8015ab4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015ab8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015abc:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015abe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d109      	bne.n	8015ada <RegionEU868LinkAdrReq+0x8a>
 8015ac6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d106      	bne.n	8015ada <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015acc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ad0:	f023 0301 	bic.w	r3, r3, #1
 8015ad4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015ad8:	e058      	b.n	8015b8c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015ada:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d003      	beq.n	8015aea <RegionEU868LinkAdrReq+0x9a>
 8015ae2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015ae6:	2b05      	cmp	r3, #5
 8015ae8:	d903      	bls.n	8015af2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015aea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015aee:	2b06      	cmp	r3, #6
 8015af0:	d906      	bls.n	8015b00 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015af2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015af6:	f023 0301 	bic.w	r3, r3, #1
 8015afa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015afe:	e045      	b.n	8015b8c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015b00:	2300      	movs	r3, #0
 8015b02:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015b06:	e03d      	b.n	8015b84 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015b08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015b0c:	2b06      	cmp	r3, #6
 8015b0e:	d118      	bne.n	8015b42 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015b10:	4b5f      	ldr	r3, [pc, #380]	; (8015c90 <RegionEU868LinkAdrReq+0x240>)
 8015b12:	6819      	ldr	r1, [r3, #0]
 8015b14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015b18:	4613      	mov	r3, r2
 8015b1a:	005b      	lsls	r3, r3, #1
 8015b1c:	4413      	add	r3, r2
 8015b1e:	009b      	lsls	r3, r3, #2
 8015b20:	440b      	add	r3, r1
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d028      	beq.n	8015b7a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015b28:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015b2c:	2201      	movs	r2, #1
 8015b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8015b32:	b21a      	sxth	r2, r3
 8015b34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b36:	b21b      	sxth	r3, r3
 8015b38:	4313      	orrs	r3, r2
 8015b3a:	b21b      	sxth	r3, r3
 8015b3c:	b29b      	uxth	r3, r3
 8015b3e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015b40:	e01b      	b.n	8015b7a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015b42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b44:	461a      	mov	r2, r3
 8015b46:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015b4a:	fa42 f303 	asr.w	r3, r2, r3
 8015b4e:	f003 0301 	and.w	r3, r3, #1
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d011      	beq.n	8015b7a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015b56:	4b4e      	ldr	r3, [pc, #312]	; (8015c90 <RegionEU868LinkAdrReq+0x240>)
 8015b58:	6819      	ldr	r1, [r3, #0]
 8015b5a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015b5e:	4613      	mov	r3, r2
 8015b60:	005b      	lsls	r3, r3, #1
 8015b62:	4413      	add	r3, r2
 8015b64:	009b      	lsls	r3, r3, #2
 8015b66:	440b      	add	r3, r1
 8015b68:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d105      	bne.n	8015b7a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015b6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015b72:	f023 0301 	bic.w	r3, r3, #1
 8015b76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015b7a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015b7e:	3301      	adds	r3, #1
 8015b80:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015b84:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015b88:	2b0f      	cmp	r3, #15
 8015b8a:	d9bd      	bls.n	8015b08 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	7a1b      	ldrb	r3, [r3, #8]
 8015b90:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015b94:	429a      	cmp	r2, r3
 8015b96:	f4ff af73 	bcc.w	8015a80 <RegionEU868LinkAdrReq+0x30>
 8015b9a:	e000      	b.n	8015b9e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015b9c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015b9e:	2302      	movs	r3, #2
 8015ba0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	7a5b      	ldrb	r3, [r3, #9]
 8015ba8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7ff fa27 	bl	8015004 <RegionEU868GetPhyParam>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015bba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015bbe:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	7a9b      	ldrb	r3, [r3, #10]
 8015bc4:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015bc6:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015bca:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015bcc:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015bd0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015bd2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015bd6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015bde:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015be6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	7b5b      	ldrb	r3, [r3, #13]
 8015bec:	b25b      	sxtb	r3, r3
 8015bee:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015bf0:	2310      	movs	r3, #16
 8015bf2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015bf4:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8015bf8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bfc:	b25b      	sxtb	r3, r3
 8015bfe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015c02:	2307      	movs	r3, #7
 8015c04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015c08:	4b21      	ldr	r3, [pc, #132]	; (8015c90 <RegionEU868LinkAdrReq+0x240>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015c0e:	2307      	movs	r3, #7
 8015c10:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015c14:	2300      	movs	r3, #0
 8015c16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015c20:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8015c24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015c28:	1c9a      	adds	r2, r3, #2
 8015c2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015c2e:	1c59      	adds	r1, r3, #1
 8015c30:	f107 0010 	add.w	r0, r7, #16
 8015c34:	4623      	mov	r3, r4
 8015c36:	f7fe fdb0 	bl	801479a <RegionCommonLinkAdrReqVerifyParams>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015c40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c44:	2b07      	cmp	r3, #7
 8015c46:	d10c      	bne.n	8015c62 <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015c48:	4b11      	ldr	r3, [pc, #68]	; (8015c90 <RegionEU868LinkAdrReq+0x240>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	33c0      	adds	r3, #192	; 0xc0
 8015c4e:	2202      	movs	r2, #2
 8015c50:	2100      	movs	r1, #0
 8015c52:	4618      	mov	r0, r3
 8015c54:	f000 fb7c 	bl	8016350 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015c58:	4b0d      	ldr	r3, [pc, #52]	; (8015c90 <RegionEU868LinkAdrReq+0x240>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015c5e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015c62:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8015c66:	68bb      	ldr	r3, [r7, #8]
 8015c68:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015c6a:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015c72:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015c7c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015c80:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015c82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	374c      	adds	r7, #76	; 0x4c
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd90      	pop	{r4, r7, pc}
 8015c8e:	bf00      	nop
 8015c90:	20000dcc 	.word	0x20000dcc

08015c94 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b084      	sub	sp, #16
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015c9c:	2307      	movs	r3, #7
 8015c9e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	f107 020e 	add.w	r2, r7, #14
 8015cac:	4611      	mov	r1, r2
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7ff f8e2 	bl	8014e78 <VerifyRfFreq>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	f083 0301 	eor.w	r3, r3, #1
 8015cba:	b2db      	uxtb	r3, r3
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d003      	beq.n	8015cc8 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015cc0:	7bfb      	ldrb	r3, [r7, #15]
 8015cc2:	f023 0301 	bic.w	r3, r3, #1
 8015cc6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f993 3000 	ldrsb.w	r3, [r3]
 8015cce:	2207      	movs	r2, #7
 8015cd0:	2100      	movs	r1, #0
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	f7fe fb4f 	bl	8014376 <RegionCommonValueInRange>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d103      	bne.n	8015ce6 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8015cde:	7bfb      	ldrb	r3, [r7, #15]
 8015ce0:	f023 0302 	bic.w	r3, r3, #2
 8015ce4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015cec:	2205      	movs	r2, #5
 8015cee:	2100      	movs	r1, #0
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f7fe fb40 	bl	8014376 <RegionCommonValueInRange>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d103      	bne.n	8015d04 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015cfc:	7bfb      	ldrb	r3, [r7, #15]
 8015cfe:	f023 0304 	bic.w	r3, r3, #4
 8015d02:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	3710      	adds	r7, #16
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}
	...

08015d10 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b086      	sub	sp, #24
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015d18:	2303      	movs	r3, #3
 8015d1a:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d114      	bne.n	8015d50 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015d2c:	b2db      	uxtb	r3, r3
 8015d2e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015d30:	f107 0308 	add.w	r3, r7, #8
 8015d34:	4618      	mov	r0, r3
 8015d36:	f000 f9f9 	bl	801612c <RegionEU868ChannelsRemove>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	f083 0301 	eor.w	r3, r3, #1
 8015d40:	b2db      	uxtb	r3, r3
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d03b      	beq.n	8015dbe <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015d46:	7dfb      	ldrb	r3, [r7, #23]
 8015d48:	f023 0303 	bic.w	r3, r3, #3
 8015d4c:	75fb      	strb	r3, [r7, #23]
 8015d4e:	e036      	b.n	8015dbe <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015d5c:	b2db      	uxtb	r3, r3
 8015d5e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015d60:	f107 030c 	add.w	r3, r7, #12
 8015d64:	4618      	mov	r0, r3
 8015d66:	f000 f93f 	bl	8015fe8 <RegionEU868ChannelAdd>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	2b06      	cmp	r3, #6
 8015d6e:	d820      	bhi.n	8015db2 <RegionEU868NewChannelReq+0xa2>
 8015d70:	a201      	add	r2, pc, #4	; (adr r2, 8015d78 <RegionEU868NewChannelReq+0x68>)
 8015d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d76:	bf00      	nop
 8015d78:	08015dbd 	.word	0x08015dbd
 8015d7c:	08015db3 	.word	0x08015db3
 8015d80:	08015db3 	.word	0x08015db3
 8015d84:	08015db3 	.word	0x08015db3
 8015d88:	08015d95 	.word	0x08015d95
 8015d8c:	08015d9f 	.word	0x08015d9f
 8015d90:	08015da9 	.word	0x08015da9
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015d94:	7dfb      	ldrb	r3, [r7, #23]
 8015d96:	f023 0301 	bic.w	r3, r3, #1
 8015d9a:	75fb      	strb	r3, [r7, #23]
                break;
 8015d9c:	e00f      	b.n	8015dbe <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015d9e:	7dfb      	ldrb	r3, [r7, #23]
 8015da0:	f023 0302 	bic.w	r3, r3, #2
 8015da4:	75fb      	strb	r3, [r7, #23]
                break;
 8015da6:	e00a      	b.n	8015dbe <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015da8:	7dfb      	ldrb	r3, [r7, #23]
 8015daa:	f023 0303 	bic.w	r3, r3, #3
 8015dae:	75fb      	strb	r3, [r7, #23]
                break;
 8015db0:	e005      	b.n	8015dbe <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015db2:	7dfb      	ldrb	r3, [r7, #23]
 8015db4:	f023 0303 	bic.w	r3, r3, #3
 8015db8:	75fb      	strb	r3, [r7, #23]
                break;
 8015dba:	e000      	b.n	8015dbe <RegionEU868NewChannelReq+0xae>
                break;
 8015dbc:	bf00      	nop
            }
        }
    }

    return status;
 8015dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	3718      	adds	r7, #24
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}
 8015dca:	bf00      	nop

08015dcc <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015dcc:	b480      	push	{r7}
 8015dce:	b083      	sub	sp, #12
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015dd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	370c      	adds	r7, #12
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bc80      	pop	{r7}
 8015de0:	4770      	bx	lr
	...

08015de4 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b084      	sub	sp, #16
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015dec:	2303      	movs	r3, #3
 8015dee:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015df0:	2300      	movs	r3, #0
 8015df2:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	f107 020e 	add.w	r2, r7, #14
 8015dfc:	4611      	mov	r1, r2
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f7ff f83a 	bl	8014e78 <VerifyRfFreq>
 8015e04:	4603      	mov	r3, r0
 8015e06:	f083 0301 	eor.w	r3, r3, #1
 8015e0a:	b2db      	uxtb	r3, r3
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d003      	beq.n	8015e18 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8015e10:	7bfb      	ldrb	r3, [r7, #15]
 8015e12:	f023 0301 	bic.w	r3, r3, #1
 8015e16:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015e18:	4b13      	ldr	r3, [pc, #76]	; (8015e68 <RegionEU868DlChannelReq+0x84>)
 8015e1a:	681a      	ldr	r2, [r3, #0]
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	781b      	ldrb	r3, [r3, #0]
 8015e20:	4619      	mov	r1, r3
 8015e22:	460b      	mov	r3, r1
 8015e24:	005b      	lsls	r3, r3, #1
 8015e26:	440b      	add	r3, r1
 8015e28:	009b      	lsls	r3, r3, #2
 8015e2a:	4413      	add	r3, r2
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d103      	bne.n	8015e3a <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8015e32:	7bfb      	ldrb	r3, [r7, #15]
 8015e34:	f023 0302 	bic.w	r3, r3, #2
 8015e38:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015e3a:	7bfb      	ldrb	r3, [r7, #15]
 8015e3c:	2b03      	cmp	r3, #3
 8015e3e:	d10d      	bne.n	8015e5c <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015e40:	4b09      	ldr	r3, [pc, #36]	; (8015e68 <RegionEU868DlChannelReq+0x84>)
 8015e42:	6819      	ldr	r1, [r3, #0]
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	4618      	mov	r0, r3
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	685a      	ldr	r2, [r3, #4]
 8015e4e:	4603      	mov	r3, r0
 8015e50:	005b      	lsls	r3, r3, #1
 8015e52:	4403      	add	r3, r0
 8015e54:	009b      	lsls	r3, r3, #2
 8015e56:	440b      	add	r3, r1
 8015e58:	3304      	adds	r3, #4
 8015e5a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8015e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3710      	adds	r7, #16
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}
 8015e68:	20000dcc 	.word	0x20000dcc

08015e6c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015e6c:	b480      	push	{r7}
 8015e6e:	b083      	sub	sp, #12
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	4603      	mov	r3, r0
 8015e74:	460a      	mov	r2, r1
 8015e76:	71fb      	strb	r3, [r7, #7]
 8015e78:	4613      	mov	r3, r2
 8015e7a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8015e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8015e80:	4618      	mov	r0, r3
 8015e82:	370c      	adds	r7, #12
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bc80      	pop	{r7}
 8015e88:	4770      	bx	lr
	...

08015e8c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b09a      	sub	sp, #104	; 0x68
 8015e90:	af02      	add	r7, sp, #8
 8015e92:	60f8      	str	r0, [r7, #12]
 8015e94:	60b9      	str	r1, [r7, #8]
 8015e96:	607a      	str	r2, [r7, #4]
 8015e98:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015eae:	2200      	movs	r2, #0
 8015eb0:	601a      	str	r2, [r3, #0]
 8015eb2:	605a      	str	r2, [r3, #4]
 8015eb4:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015eb6:	230c      	movs	r3, #12
 8015eb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8015ebc:	2307      	movs	r3, #7
 8015ebe:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015ec0:	4b47      	ldr	r3, [pc, #284]	; (8015fe0 <RegionEU868NextChannel+0x154>)
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	33c0      	adds	r3, #192	; 0xc0
 8015ec6:	2201      	movs	r2, #1
 8015ec8:	2100      	movs	r1, #0
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7fe faa4 	bl	8014418 <RegionCommonCountChannels>
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d10a      	bne.n	8015eec <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015ed6:	4b42      	ldr	r3, [pc, #264]	; (8015fe0 <RegionEU868NextChannel+0x154>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8015ede:	4b40      	ldr	r3, [pc, #256]	; (8015fe0 <RegionEU868NextChannel+0x154>)
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	f042 0207 	orr.w	r2, r2, #7
 8015ee6:	b292      	uxth	r2, r2
 8015ee8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	7a5b      	ldrb	r3, [r3, #9]
 8015ef0:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015ef8:	b2db      	uxtb	r3, r3
 8015efa:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015efc:	4b38      	ldr	r3, [pc, #224]	; (8015fe0 <RegionEU868NextChannel+0x154>)
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	33c0      	adds	r3, #192	; 0xc0
 8015f02:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015f04:	4b36      	ldr	r3, [pc, #216]	; (8015fe0 <RegionEU868NextChannel+0x154>)
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8015f0a:	4b36      	ldr	r3, [pc, #216]	; (8015fe4 <RegionEU868NextChannel+0x158>)
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8015f10:	2310      	movs	r3, #16
 8015f12:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015f14:	f107 0312 	add.w	r3, r7, #18
 8015f18:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	685b      	ldr	r3, [r3, #4]
 8015f24:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	7a9b      	ldrb	r3, [r3, #10]
 8015f2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8015f2e:	2306      	movs	r3, #6
 8015f30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015f34:	68fa      	ldr	r2, [r7, #12]
 8015f36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015f3a:	320c      	adds	r2, #12
 8015f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f40:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	7d1b      	ldrb	r3, [r3, #20]
 8015f48:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	8adb      	ldrh	r3, [r3, #22]
 8015f56:	4619      	mov	r1, r3
 8015f58:	4610      	mov	r0, r2
 8015f5a:	f7ff f803 	bl	8014f64 <GetTimeOnAir>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015f62:	f107 0314 	add.w	r3, r7, #20
 8015f66:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015f68:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8015f6c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8015f70:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	9301      	str	r3, [sp, #4]
 8015f78:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8015f7c:	9300      	str	r3, [sp, #0]
 8015f7e:	460b      	mov	r3, r1
 8015f80:	6839      	ldr	r1, [r7, #0]
 8015f82:	f7fe fe50 	bl	8014c26 <RegionCommonIdentifyChannels>
 8015f86:	4603      	mov	r3, r0
 8015f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d10f      	bne.n	8015fb4 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015f94:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8015f98:	3b01      	subs	r3, #1
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	2000      	movs	r0, #0
 8015f9e:	f000 f985 	bl	80162ac <randr>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8015fa8:	4413      	add	r3, r2
 8015faa:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	701a      	strb	r2, [r3, #0]
 8015fb2:	e00e      	b.n	8015fd2 <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8015fb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015fb8:	2b0c      	cmp	r3, #12
 8015fba:	d10a      	bne.n	8015fd2 <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015fbc:	4b08      	ldr	r3, [pc, #32]	; (8015fe0 <RegionEU868NextChannel+0x154>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8015fc4:	4b06      	ldr	r3, [pc, #24]	; (8015fe0 <RegionEU868NextChannel+0x154>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	f042 0207 	orr.w	r2, r2, #7
 8015fcc:	b292      	uxth	r2, r2
 8015fce:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 8015fd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	3760      	adds	r7, #96	; 0x60
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
 8015fde:	bf00      	nop
 8015fe0:	20000dcc 	.word	0x20000dcc
 8015fe4:	20000dc8 	.word	0x20000dc8

08015fe8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b084      	sub	sp, #16
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	791b      	ldrb	r3, [r3, #4]
 8016000:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016002:	7b7b      	ldrb	r3, [r7, #13]
 8016004:	2b02      	cmp	r3, #2
 8016006:	d801      	bhi.n	801600c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016008:	2306      	movs	r3, #6
 801600a:	e089      	b.n	8016120 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801600c:	7b7b      	ldrb	r3, [r7, #13]
 801600e:	2b0f      	cmp	r3, #15
 8016010:	d901      	bls.n	8016016 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016012:	2303      	movs	r3, #3
 8016014:	e084      	b.n	8016120 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	7a1b      	ldrb	r3, [r3, #8]
 801601c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016020:	b25b      	sxtb	r3, r3
 8016022:	2207      	movs	r2, #7
 8016024:	2100      	movs	r1, #0
 8016026:	4618      	mov	r0, r3
 8016028:	f7fe f9a5 	bl	8014376 <RegionCommonValueInRange>
 801602c:	4603      	mov	r3, r0
 801602e:	2b00      	cmp	r3, #0
 8016030:	d101      	bne.n	8016036 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8016032:	2301      	movs	r3, #1
 8016034:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	7a1b      	ldrb	r3, [r3, #8]
 801603c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016040:	b25b      	sxtb	r3, r3
 8016042:	2207      	movs	r2, #7
 8016044:	2100      	movs	r1, #0
 8016046:	4618      	mov	r0, r3
 8016048:	f7fe f995 	bl	8014376 <RegionCommonValueInRange>
 801604c:	4603      	mov	r3, r0
 801604e:	2b00      	cmp	r3, #0
 8016050:	d101      	bne.n	8016056 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8016052:	2301      	movs	r3, #1
 8016054:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	7a1b      	ldrb	r3, [r3, #8]
 801605c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016060:	b25a      	sxtb	r2, r3
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	7a1b      	ldrb	r3, [r3, #8]
 8016068:	f343 1303 	sbfx	r3, r3, #4, #4
 801606c:	b25b      	sxtb	r3, r3
 801606e:	429a      	cmp	r2, r3
 8016070:	dd01      	ble.n	8016076 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8016072:	2301      	movs	r3, #1
 8016074:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8016076:	7bbb      	ldrb	r3, [r7, #14]
 8016078:	f083 0301 	eor.w	r3, r3, #1
 801607c:	b2db      	uxtb	r3, r3
 801607e:	2b00      	cmp	r3, #0
 8016080:	d010      	beq.n	80160a4 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	f107 020c 	add.w	r2, r7, #12
 801608c:	4611      	mov	r1, r2
 801608e:	4618      	mov	r0, r3
 8016090:	f7fe fef2 	bl	8014e78 <VerifyRfFreq>
 8016094:	4603      	mov	r3, r0
 8016096:	f083 0301 	eor.w	r3, r3, #1
 801609a:	b2db      	uxtb	r3, r3
 801609c:	2b00      	cmp	r3, #0
 801609e:	d001      	beq.n	80160a4 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80160a0:	2301      	movs	r3, #1
 80160a2:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80160a4:	7bfb      	ldrb	r3, [r7, #15]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d004      	beq.n	80160b4 <RegionEU868ChannelAdd+0xcc>
 80160aa:	7bbb      	ldrb	r3, [r7, #14]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d001      	beq.n	80160b4 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80160b0:	2306      	movs	r3, #6
 80160b2:	e035      	b.n	8016120 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80160b4:	7bfb      	ldrb	r3, [r7, #15]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d001      	beq.n	80160be <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80160ba:	2305      	movs	r3, #5
 80160bc:	e030      	b.n	8016120 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80160be:	7bbb      	ldrb	r3, [r7, #14]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d001      	beq.n	80160c8 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80160c4:	2304      	movs	r3, #4
 80160c6:	e02b      	b.n	8016120 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80160c8:	4b17      	ldr	r3, [pc, #92]	; (8016128 <RegionEU868ChannelAdd+0x140>)
 80160ca:	6819      	ldr	r1, [r3, #0]
 80160cc:	7b7a      	ldrb	r2, [r7, #13]
 80160ce:	4613      	mov	r3, r2
 80160d0:	005b      	lsls	r3, r3, #1
 80160d2:	4413      	add	r3, r2
 80160d4:	009b      	lsls	r3, r3, #2
 80160d6:	18c8      	adds	r0, r1, r3
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	220c      	movs	r2, #12
 80160de:	4619      	mov	r1, r3
 80160e0:	f000 f8fb 	bl	80162da <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80160e4:	4b10      	ldr	r3, [pc, #64]	; (8016128 <RegionEU868ChannelAdd+0x140>)
 80160e6:	6819      	ldr	r1, [r3, #0]
 80160e8:	7b7a      	ldrb	r2, [r7, #13]
 80160ea:	7b38      	ldrb	r0, [r7, #12]
 80160ec:	4613      	mov	r3, r2
 80160ee:	005b      	lsls	r3, r3, #1
 80160f0:	4413      	add	r3, r2
 80160f2:	009b      	lsls	r3, r3, #2
 80160f4:	440b      	add	r3, r1
 80160f6:	3309      	adds	r3, #9
 80160f8:	4602      	mov	r2, r0
 80160fa:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80160fc:	4b0a      	ldr	r3, [pc, #40]	; (8016128 <RegionEU868ChannelAdd+0x140>)
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8016104:	b21a      	sxth	r2, r3
 8016106:	7b7b      	ldrb	r3, [r7, #13]
 8016108:	2101      	movs	r1, #1
 801610a:	fa01 f303 	lsl.w	r3, r1, r3
 801610e:	b21b      	sxth	r3, r3
 8016110:	4313      	orrs	r3, r2
 8016112:	b21a      	sxth	r2, r3
 8016114:	4b04      	ldr	r3, [pc, #16]	; (8016128 <RegionEU868ChannelAdd+0x140>)
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	b292      	uxth	r2, r2
 801611a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 801611e:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016120:	4618      	mov	r0, r3
 8016122:	3710      	adds	r7, #16
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}
 8016128:	20000dcc 	.word	0x20000dcc

0801612c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801612c:	b580      	push	{r7, lr}
 801612e:	b086      	sub	sp, #24
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	781b      	ldrb	r3, [r3, #0]
 8016138:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801613a:	7dfb      	ldrb	r3, [r7, #23]
 801613c:	2b02      	cmp	r3, #2
 801613e:	d801      	bhi.n	8016144 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8016140:	2300      	movs	r3, #0
 8016142:	e015      	b.n	8016170 <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016144:	4b0c      	ldr	r3, [pc, #48]	; (8016178 <RegionEU868ChannelsRemove+0x4c>)
 8016146:	6819      	ldr	r1, [r3, #0]
 8016148:	7dfa      	ldrb	r2, [r7, #23]
 801614a:	4613      	mov	r3, r2
 801614c:	005b      	lsls	r3, r3, #1
 801614e:	4413      	add	r3, r2
 8016150:	009b      	lsls	r3, r3, #2
 8016152:	440b      	add	r3, r1
 8016154:	461a      	mov	r2, r3
 8016156:	2300      	movs	r3, #0
 8016158:	6013      	str	r3, [r2, #0]
 801615a:	6053      	str	r3, [r2, #4]
 801615c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801615e:	4b06      	ldr	r3, [pc, #24]	; (8016178 <RegionEU868ChannelsRemove+0x4c>)
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	33c0      	adds	r3, #192	; 0xc0
 8016164:	7df9      	ldrb	r1, [r7, #23]
 8016166:	2210      	movs	r2, #16
 8016168:	4618      	mov	r0, r3
 801616a:	f7fe f921 	bl	80143b0 <RegionCommonChanDisable>
 801616e:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8016170:	4618      	mov	r0, r3
 8016172:	3718      	adds	r7, #24
 8016174:	46bd      	mov	sp, r7
 8016176:	bd80      	pop	{r7, pc}
 8016178:	20000dcc 	.word	0x20000dcc

0801617c <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801617c:	b590      	push	{r4, r7, lr}
 801617e:	b085      	sub	sp, #20
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801618a:	4b20      	ldr	r3, [pc, #128]	; (801620c <RegionEU868SetContinuousWave+0x90>)
 801618c:	681a      	ldr	r2, [r3, #0]
 801618e:	4b20      	ldr	r3, [pc, #128]	; (8016210 <RegionEU868SetContinuousWave+0x94>)
 8016190:	6819      	ldr	r1, [r3, #0]
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	461c      	mov	r4, r3
 8016198:	4623      	mov	r3, r4
 801619a:	005b      	lsls	r3, r3, #1
 801619c:	4423      	add	r3, r4
 801619e:	009b      	lsls	r3, r3, #2
 80161a0:	440b      	add	r3, r1
 80161a2:	3309      	adds	r3, #9
 80161a4:	781b      	ldrb	r3, [r3, #0]
 80161a6:	4619      	mov	r1, r3
 80161a8:	460b      	mov	r3, r1
 80161aa:	005b      	lsls	r3, r3, #1
 80161ac:	440b      	add	r3, r1
 80161ae:	00db      	lsls	r3, r3, #3
 80161b0:	4413      	add	r3, r2
 80161b2:	3302      	adds	r3, #2
 80161b4:	f993 3000 	ldrsb.w	r3, [r3]
 80161b8:	4619      	mov	r1, r3
 80161ba:	f7fe fdd4 	bl	8014d66 <RegionCommonLimitTxPower>
 80161be:	4603      	mov	r3, r0
 80161c0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80161c2:	2300      	movs	r3, #0
 80161c4:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80161c6:	4b12      	ldr	r3, [pc, #72]	; (8016210 <RegionEU868SetContinuousWave+0x94>)
 80161c8:	681a      	ldr	r2, [r3, #0]
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	781b      	ldrb	r3, [r3, #0]
 80161ce:	4619      	mov	r1, r3
 80161d0:	460b      	mov	r3, r1
 80161d2:	005b      	lsls	r3, r3, #1
 80161d4:	440b      	add	r3, r1
 80161d6:	009b      	lsls	r3, r3, #2
 80161d8:	4413      	add	r3, r2
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	6859      	ldr	r1, [r3, #4]
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	689a      	ldr	r2, [r3, #8]
 80161e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161ea:	4618      	mov	r0, r3
 80161ec:	f7fe fc2c 	bl	8014a48 <RegionCommonComputeTxPower>
 80161f0:	4603      	mov	r3, r0
 80161f2:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80161f4:	4b07      	ldr	r3, [pc, #28]	; (8016214 <RegionEU868SetContinuousWave+0x98>)
 80161f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80161f8:	687a      	ldr	r2, [r7, #4]
 80161fa:	8992      	ldrh	r2, [r2, #12]
 80161fc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016200:	68b8      	ldr	r0, [r7, #8]
 8016202:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8016204:	bf00      	nop
 8016206:	3714      	adds	r7, #20
 8016208:	46bd      	mov	sp, r7
 801620a:	bd90      	pop	{r4, r7, pc}
 801620c:	20000dc8 	.word	0x20000dc8
 8016210:	20000dcc 	.word	0x20000dcc
 8016214:	0801b848 	.word	0x0801b848

08016218 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016218:	b480      	push	{r7}
 801621a:	b085      	sub	sp, #20
 801621c:	af00      	add	r7, sp, #0
 801621e:	4603      	mov	r3, r0
 8016220:	71fb      	strb	r3, [r7, #7]
 8016222:	460b      	mov	r3, r1
 8016224:	71bb      	strb	r3, [r7, #6]
 8016226:	4613      	mov	r3, r2
 8016228:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801622a:	79ba      	ldrb	r2, [r7, #6]
 801622c:	797b      	ldrb	r3, [r7, #5]
 801622e:	1ad3      	subs	r3, r2, r3
 8016230:	b2db      	uxtb	r3, r3
 8016232:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8016234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016238:	2b00      	cmp	r3, #0
 801623a:	da01      	bge.n	8016240 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801623c:	2300      	movs	r3, #0
 801623e:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8016240:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8016242:	4618      	mov	r0, r3
 8016244:	3714      	adds	r7, #20
 8016246:	46bd      	mov	sp, r7
 8016248:	bc80      	pop	{r7}
 801624a:	4770      	bx	lr

0801624c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801624c:	b480      	push	{r7}
 801624e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016250:	4b0d      	ldr	r3, [pc, #52]	; (8016288 <rand1+0x3c>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	4a0d      	ldr	r2, [pc, #52]	; (801628c <rand1+0x40>)
 8016256:	fb02 f303 	mul.w	r3, r2, r3
 801625a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801625e:	3339      	adds	r3, #57	; 0x39
 8016260:	4a09      	ldr	r2, [pc, #36]	; (8016288 <rand1+0x3c>)
 8016262:	6013      	str	r3, [r2, #0]
 8016264:	4b08      	ldr	r3, [pc, #32]	; (8016288 <rand1+0x3c>)
 8016266:	681a      	ldr	r2, [r3, #0]
 8016268:	2303      	movs	r3, #3
 801626a:	fba3 1302 	umull	r1, r3, r3, r2
 801626e:	1ad1      	subs	r1, r2, r3
 8016270:	0849      	lsrs	r1, r1, #1
 8016272:	440b      	add	r3, r1
 8016274:	0f99      	lsrs	r1, r3, #30
 8016276:	460b      	mov	r3, r1
 8016278:	07db      	lsls	r3, r3, #31
 801627a:	1a5b      	subs	r3, r3, r1
 801627c:	1ad1      	subs	r1, r2, r3
 801627e:	460b      	mov	r3, r1
}
 8016280:	4618      	mov	r0, r3
 8016282:	46bd      	mov	sp, r7
 8016284:	bc80      	pop	{r7}
 8016286:	4770      	bx	lr
 8016288:	2000011c 	.word	0x2000011c
 801628c:	41c64e6d 	.word	0x41c64e6d

08016290 <srand1>:

void srand1( uint32_t seed )
{
 8016290:	b480      	push	{r7}
 8016292:	b083      	sub	sp, #12
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
    next = seed;
 8016298:	4a03      	ldr	r2, [pc, #12]	; (80162a8 <srand1+0x18>)
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	6013      	str	r3, [r2, #0]
}
 801629e:	bf00      	nop
 80162a0:	370c      	adds	r7, #12
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bc80      	pop	{r7}
 80162a6:	4770      	bx	lr
 80162a8:	2000011c 	.word	0x2000011c

080162ac <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80162b6:	f7ff ffc9 	bl	801624c <rand1>
 80162ba:	4602      	mov	r2, r0
 80162bc:	6839      	ldr	r1, [r7, #0]
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	1acb      	subs	r3, r1, r3
 80162c2:	3301      	adds	r3, #1
 80162c4:	fb92 f1f3 	sdiv	r1, r2, r3
 80162c8:	fb03 f301 	mul.w	r3, r3, r1
 80162cc:	1ad2      	subs	r2, r2, r3
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	4413      	add	r3, r2
}
 80162d2:	4618      	mov	r0, r3
 80162d4:	3708      	adds	r7, #8
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}

080162da <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80162da:	b480      	push	{r7}
 80162dc:	b085      	sub	sp, #20
 80162de:	af00      	add	r7, sp, #0
 80162e0:	60f8      	str	r0, [r7, #12]
 80162e2:	60b9      	str	r1, [r7, #8]
 80162e4:	4613      	mov	r3, r2
 80162e6:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80162e8:	e007      	b.n	80162fa <memcpy1+0x20>
    {
        *dst++ = *src++;
 80162ea:	68ba      	ldr	r2, [r7, #8]
 80162ec:	1c53      	adds	r3, r2, #1
 80162ee:	60bb      	str	r3, [r7, #8]
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	1c59      	adds	r1, r3, #1
 80162f4:	60f9      	str	r1, [r7, #12]
 80162f6:	7812      	ldrb	r2, [r2, #0]
 80162f8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80162fa:	88fb      	ldrh	r3, [r7, #6]
 80162fc:	1e5a      	subs	r2, r3, #1
 80162fe:	80fa      	strh	r2, [r7, #6]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d1f2      	bne.n	80162ea <memcpy1+0x10>
    }
}
 8016304:	bf00      	nop
 8016306:	bf00      	nop
 8016308:	3714      	adds	r7, #20
 801630a:	46bd      	mov	sp, r7
 801630c:	bc80      	pop	{r7}
 801630e:	4770      	bx	lr

08016310 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016310:	b480      	push	{r7}
 8016312:	b085      	sub	sp, #20
 8016314:	af00      	add	r7, sp, #0
 8016316:	60f8      	str	r0, [r7, #12]
 8016318:	60b9      	str	r1, [r7, #8]
 801631a:	4613      	mov	r3, r2
 801631c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801631e:	88fb      	ldrh	r3, [r7, #6]
 8016320:	3b01      	subs	r3, #1
 8016322:	68fa      	ldr	r2, [r7, #12]
 8016324:	4413      	add	r3, r2
 8016326:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016328:	e007      	b.n	801633a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801632a:	68ba      	ldr	r2, [r7, #8]
 801632c:	1c53      	adds	r3, r2, #1
 801632e:	60bb      	str	r3, [r7, #8]
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	1e59      	subs	r1, r3, #1
 8016334:	60f9      	str	r1, [r7, #12]
 8016336:	7812      	ldrb	r2, [r2, #0]
 8016338:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801633a:	88fb      	ldrh	r3, [r7, #6]
 801633c:	1e5a      	subs	r2, r3, #1
 801633e:	80fa      	strh	r2, [r7, #6]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d1f2      	bne.n	801632a <memcpyr+0x1a>
    }
}
 8016344:	bf00      	nop
 8016346:	bf00      	nop
 8016348:	3714      	adds	r7, #20
 801634a:	46bd      	mov	sp, r7
 801634c:	bc80      	pop	{r7}
 801634e:	4770      	bx	lr

08016350 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016350:	b480      	push	{r7}
 8016352:	b083      	sub	sp, #12
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
 8016358:	460b      	mov	r3, r1
 801635a:	70fb      	strb	r3, [r7, #3]
 801635c:	4613      	mov	r3, r2
 801635e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016360:	e004      	b.n	801636c <memset1+0x1c>
    {
        *dst++ = value;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	1c5a      	adds	r2, r3, #1
 8016366:	607a      	str	r2, [r7, #4]
 8016368:	78fa      	ldrb	r2, [r7, #3]
 801636a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801636c:	883b      	ldrh	r3, [r7, #0]
 801636e:	1e5a      	subs	r2, r3, #1
 8016370:	803a      	strh	r2, [r7, #0]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d1f5      	bne.n	8016362 <memset1+0x12>
    }
}
 8016376:	bf00      	nop
 8016378:	bf00      	nop
 801637a:	370c      	adds	r7, #12
 801637c:	46bd      	mov	sp, r7
 801637e:	bc80      	pop	{r7}
 8016380:	4770      	bx	lr
	...

08016384 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016384:	b480      	push	{r7}
 8016386:	b087      	sub	sp, #28
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
 801638c:	460b      	mov	r3, r1
 801638e:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8016390:	4b1a      	ldr	r3, [pc, #104]	; (80163fc <Crc32+0x78>)
 8016392:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016394:	f04f 33ff 	mov.w	r3, #4294967295
 8016398:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d101      	bne.n	80163a4 <Crc32+0x20>
    {
        return 0;
 80163a0:	2300      	movs	r3, #0
 80163a2:	e026      	b.n	80163f2 <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 80163a4:	2300      	movs	r3, #0
 80163a6:	827b      	strh	r3, [r7, #18]
 80163a8:	e01d      	b.n	80163e6 <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 80163aa:	8a7b      	ldrh	r3, [r7, #18]
 80163ac:	687a      	ldr	r2, [r7, #4]
 80163ae:	4413      	add	r3, r2
 80163b0:	781b      	ldrb	r3, [r3, #0]
 80163b2:	461a      	mov	r2, r3
 80163b4:	697b      	ldr	r3, [r7, #20]
 80163b6:	4053      	eors	r3, r2
 80163b8:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80163ba:	2300      	movs	r3, #0
 80163bc:	823b      	strh	r3, [r7, #16]
 80163be:	e00c      	b.n	80163da <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80163c0:	697b      	ldr	r3, [r7, #20]
 80163c2:	085a      	lsrs	r2, r3, #1
 80163c4:	697b      	ldr	r3, [r7, #20]
 80163c6:	f003 0301 	and.w	r3, r3, #1
 80163ca:	4259      	negs	r1, r3
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	400b      	ands	r3, r1
 80163d0:	4053      	eors	r3, r2
 80163d2:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80163d4:	8a3b      	ldrh	r3, [r7, #16]
 80163d6:	3301      	adds	r3, #1
 80163d8:	823b      	strh	r3, [r7, #16]
 80163da:	8a3b      	ldrh	r3, [r7, #16]
 80163dc:	2b07      	cmp	r3, #7
 80163de:	d9ef      	bls.n	80163c0 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 80163e0:	8a7b      	ldrh	r3, [r7, #18]
 80163e2:	3301      	adds	r3, #1
 80163e4:	827b      	strh	r3, [r7, #18]
 80163e6:	8a7a      	ldrh	r2, [r7, #18]
 80163e8:	887b      	ldrh	r3, [r7, #2]
 80163ea:	429a      	cmp	r2, r3
 80163ec:	d3dd      	bcc.n	80163aa <Crc32+0x26>
        }
    }

    return ~crc;
 80163ee:	697b      	ldr	r3, [r7, #20]
 80163f0:	43db      	mvns	r3, r3
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	371c      	adds	r7, #28
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bc80      	pop	{r7}
 80163fa:	4770      	bx	lr
 80163fc:	edb88320 	.word	0xedb88320

08016400 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016400:	b480      	push	{r7}
 8016402:	b083      	sub	sp, #12
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
 8016408:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	683a      	ldr	r2, [r7, #0]
 801640e:	619a      	str	r2, [r3, #24]
}
 8016410:	bf00      	nop
 8016412:	370c      	adds	r7, #12
 8016414:	46bd      	mov	sp, r7
 8016416:	bc80      	pop	{r7}
 8016418:	4770      	bx	lr

0801641a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 801641a:	b480      	push	{r7}
 801641c:	b083      	sub	sp, #12
 801641e:	af00      	add	r7, sp, #0
 8016420:	6078      	str	r0, [r7, #4]
 8016422:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	683a      	ldr	r2, [r7, #0]
 8016428:	629a      	str	r2, [r3, #40]	; 0x28
}
 801642a:	bf00      	nop
 801642c:	370c      	adds	r7, #12
 801642e:	46bd      	mov	sp, r7
 8016430:	bc80      	pop	{r7}
 8016432:	4770      	bx	lr

08016434 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b084      	sub	sp, #16
 8016438:	af02      	add	r7, sp, #8
 801643a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801643c:	4a21      	ldr	r2, [pc, #132]	; (80164c4 <RadioInit+0x90>)
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8016442:	4b21      	ldr	r3, [pc, #132]	; (80164c8 <RadioInit+0x94>)
 8016444:	2200      	movs	r2, #0
 8016446:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016448:	4b1f      	ldr	r3, [pc, #124]	; (80164c8 <RadioInit+0x94>)
 801644a:	2200      	movs	r2, #0
 801644c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801644e:	4b1e      	ldr	r3, [pc, #120]	; (80164c8 <RadioInit+0x94>)
 8016450:	2200      	movs	r2, #0
 8016452:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8016454:	481d      	ldr	r0, [pc, #116]	; (80164cc <RadioInit+0x98>)
 8016456:	f001 fee3 	bl	8018220 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 801645a:	2000      	movs	r0, #0
 801645c:	f001 f82a 	bl	80174b4 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8016460:	f002 f974 	bl	801874c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016464:	2100      	movs	r1, #0
 8016466:	2000      	movs	r0, #0
 8016468:	f002 fcca 	bl	8018e00 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 801646c:	2204      	movs	r2, #4
 801646e:	2100      	movs	r1, #0
 8016470:	2001      	movs	r0, #1
 8016472:	f002 faf5 	bl	8018a60 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016476:	2300      	movs	r3, #0
 8016478:	2200      	movs	r2, #0
 801647a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801647e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016482:	f002 fa29 	bl	80188d8 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8016486:	f000 fea1 	bl	80171cc <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801648a:	2300      	movs	r3, #0
 801648c:	9300      	str	r3, [sp, #0]
 801648e:	4b10      	ldr	r3, [pc, #64]	; (80164d0 <RadioInit+0x9c>)
 8016490:	2200      	movs	r2, #0
 8016492:	f04f 31ff 	mov.w	r1, #4294967295
 8016496:	480f      	ldr	r0, [pc, #60]	; (80164d4 <RadioInit+0xa0>)
 8016498:	f003 fd8c 	bl	8019fb4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801649c:	2300      	movs	r3, #0
 801649e:	9300      	str	r3, [sp, #0]
 80164a0:	4b0d      	ldr	r3, [pc, #52]	; (80164d8 <RadioInit+0xa4>)
 80164a2:	2200      	movs	r2, #0
 80164a4:	f04f 31ff 	mov.w	r1, #4294967295
 80164a8:	480c      	ldr	r0, [pc, #48]	; (80164dc <RadioInit+0xa8>)
 80164aa:	f003 fd83 	bl	8019fb4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80164ae:	4809      	ldr	r0, [pc, #36]	; (80164d4 <RadioInit+0xa0>)
 80164b0:	f003 fe24 	bl	801a0fc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80164b4:	4809      	ldr	r0, [pc, #36]	; (80164dc <RadioInit+0xa8>)
 80164b6:	f003 fe21 	bl	801a0fc <UTIL_TIMER_Stop>
}
 80164ba:	bf00      	nop
 80164bc:	3708      	adds	r7, #8
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}
 80164c2:	bf00      	nop
 80164c4:	20000ed0 	.word	0x20000ed0
 80164c8:	200017b0 	.word	0x200017b0
 80164cc:	080175ad 	.word	0x080175ad
 80164d0:	08017521 	.word	0x08017521
 80164d4:	20001808 	.word	0x20001808
 80164d8:	08017535 	.word	0x08017535
 80164dc:	20001820 	.word	0x20001820

080164e0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80164e4:	f001 fede 	bl	80182a4 <SUBGRF_GetOperatingMode>
 80164e8:	4603      	mov	r3, r0
 80164ea:	2b07      	cmp	r3, #7
 80164ec:	d00a      	beq.n	8016504 <RadioGetStatus+0x24>
 80164ee:	2b07      	cmp	r3, #7
 80164f0:	dc0a      	bgt.n	8016508 <RadioGetStatus+0x28>
 80164f2:	2b04      	cmp	r3, #4
 80164f4:	d002      	beq.n	80164fc <RadioGetStatus+0x1c>
 80164f6:	2b05      	cmp	r3, #5
 80164f8:	d002      	beq.n	8016500 <RadioGetStatus+0x20>
 80164fa:	e005      	b.n	8016508 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80164fc:	2302      	movs	r3, #2
 80164fe:	e004      	b.n	801650a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016500:	2301      	movs	r3, #1
 8016502:	e002      	b.n	801650a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016504:	2303      	movs	r3, #3
 8016506:	e000      	b.n	801650a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016508:	2300      	movs	r3, #0
    }
}
 801650a:	4618      	mov	r0, r3
 801650c:	bd80      	pop	{r7, pc}
	...

08016510 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
 8016516:	4603      	mov	r3, r0
 8016518:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801651a:	4a25      	ldr	r2, [pc, #148]	; (80165b0 <RadioSetModem+0xa0>)
 801651c:	79fb      	ldrb	r3, [r7, #7]
 801651e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8016520:	79fb      	ldrb	r3, [r7, #7]
 8016522:	4618      	mov	r0, r3
 8016524:	f003 f831 	bl	801958a <RFW_SetRadioModem>
    switch( modem )
 8016528:	79fb      	ldrb	r3, [r7, #7]
 801652a:	3b01      	subs	r3, #1
 801652c:	2b03      	cmp	r3, #3
 801652e:	d80b      	bhi.n	8016548 <RadioSetModem+0x38>
 8016530:	a201      	add	r2, pc, #4	; (adr r2, 8016538 <RadioSetModem+0x28>)
 8016532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016536:	bf00      	nop
 8016538:	08016557 	.word	0x08016557
 801653c:	0801657d 	.word	0x0801657d
 8016540:	0801658b 	.word	0x0801658b
 8016544:	08016599 	.word	0x08016599
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016548:	2000      	movs	r0, #0
 801654a:	f002 fa63 	bl	8018a14 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801654e:	4b18      	ldr	r3, [pc, #96]	; (80165b0 <RadioSetModem+0xa0>)
 8016550:	2200      	movs	r2, #0
 8016552:	735a      	strb	r2, [r3, #13]
        break;
 8016554:	e028      	b.n	80165a8 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8016556:	2001      	movs	r0, #1
 8016558:	f002 fa5c 	bl	8018a14 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801655c:	4b14      	ldr	r3, [pc, #80]	; (80165b0 <RadioSetModem+0xa0>)
 801655e:	7b5a      	ldrb	r2, [r3, #13]
 8016560:	4b13      	ldr	r3, [pc, #76]	; (80165b0 <RadioSetModem+0xa0>)
 8016562:	7b1b      	ldrb	r3, [r3, #12]
 8016564:	429a      	cmp	r2, r3
 8016566:	d01e      	beq.n	80165a6 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016568:	4b11      	ldr	r3, [pc, #68]	; (80165b0 <RadioSetModem+0xa0>)
 801656a:	7b1a      	ldrb	r2, [r3, #12]
 801656c:	4b10      	ldr	r3, [pc, #64]	; (80165b0 <RadioSetModem+0xa0>)
 801656e:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016570:	4b0f      	ldr	r3, [pc, #60]	; (80165b0 <RadioSetModem+0xa0>)
 8016572:	7b5b      	ldrb	r3, [r3, #13]
 8016574:	4618      	mov	r0, r3
 8016576:	f000 ff9d 	bl	80174b4 <RadioSetPublicNetwork>
        }
        break;
 801657a:	e014      	b.n	80165a6 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801657c:	2002      	movs	r0, #2
 801657e:	f002 fa49 	bl	8018a14 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016582:	4b0b      	ldr	r3, [pc, #44]	; (80165b0 <RadioSetModem+0xa0>)
 8016584:	2200      	movs	r2, #0
 8016586:	735a      	strb	r2, [r3, #13]
        break;
 8016588:	e00e      	b.n	80165a8 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801658a:	2002      	movs	r0, #2
 801658c:	f002 fa42 	bl	8018a14 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016590:	4b07      	ldr	r3, [pc, #28]	; (80165b0 <RadioSetModem+0xa0>)
 8016592:	2200      	movs	r2, #0
 8016594:	735a      	strb	r2, [r3, #13]
        break;
 8016596:	e007      	b.n	80165a8 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016598:	2000      	movs	r0, #0
 801659a:	f002 fa3b 	bl	8018a14 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801659e:	4b04      	ldr	r3, [pc, #16]	; (80165b0 <RadioSetModem+0xa0>)
 80165a0:	2200      	movs	r2, #0
 80165a2:	735a      	strb	r2, [r3, #13]
        break;
 80165a4:	e000      	b.n	80165a8 <RadioSetModem+0x98>
        break;
 80165a6:	bf00      	nop
    }
}
 80165a8:	bf00      	nop
 80165aa:	3708      	adds	r7, #8
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}
 80165b0:	200017b0 	.word	0x200017b0

080165b4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b082      	sub	sp, #8
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f002 f9e7 	bl	8018990 <SUBGRF_SetRfFrequency>
}
 80165c2:	bf00      	nop
 80165c4:	3708      	adds	r7, #8
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}

080165ca <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80165ca:	b580      	push	{r7, lr}
 80165cc:	b090      	sub	sp, #64	; 0x40
 80165ce:	af0a      	add	r7, sp, #40	; 0x28
 80165d0:	60f8      	str	r0, [r7, #12]
 80165d2:	60b9      	str	r1, [r7, #8]
 80165d4:	603b      	str	r3, [r7, #0]
 80165d6:	4613      	mov	r3, r2
 80165d8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80165da:	2301      	movs	r3, #1
 80165dc:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80165de:	2300      	movs	r3, #0
 80165e0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80165e2:	2300      	movs	r3, #0
 80165e4:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80165e6:	f000 fe04 	bl	80171f2 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 80165ea:	2000      	movs	r0, #0
 80165ec:	f7ff ff90 	bl	8016510 <RadioSetModem>

    RadioSetChannel( freq );
 80165f0:	68f8      	ldr	r0, [r7, #12]
 80165f2:	f7ff ffdf 	bl	80165b4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80165f6:	2301      	movs	r3, #1
 80165f8:	9309      	str	r3, [sp, #36]	; 0x24
 80165fa:	2300      	movs	r3, #0
 80165fc:	9308      	str	r3, [sp, #32]
 80165fe:	2300      	movs	r3, #0
 8016600:	9307      	str	r3, [sp, #28]
 8016602:	2300      	movs	r3, #0
 8016604:	9306      	str	r3, [sp, #24]
 8016606:	2300      	movs	r3, #0
 8016608:	9305      	str	r3, [sp, #20]
 801660a:	2300      	movs	r3, #0
 801660c:	9304      	str	r3, [sp, #16]
 801660e:	2300      	movs	r3, #0
 8016610:	9303      	str	r3, [sp, #12]
 8016612:	2300      	movs	r3, #0
 8016614:	9302      	str	r3, [sp, #8]
 8016616:	2303      	movs	r3, #3
 8016618:	9301      	str	r3, [sp, #4]
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	9300      	str	r3, [sp, #0]
 801661e:	2300      	movs	r3, #0
 8016620:	f44f 7216 	mov.w	r2, #600	; 0x258
 8016624:	68b9      	ldr	r1, [r7, #8]
 8016626:	2000      	movs	r0, #0
 8016628:	f000 f840 	bl	80166ac <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801662c:	2000      	movs	r0, #0
 801662e:	f000 fde7 	bl	8017200 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016632:	f000 ff6d 	bl	8017510 <RadioGetWakeupTime>
 8016636:	4603      	mov	r3, r0
 8016638:	4618      	mov	r0, r3
 801663a:	f7eb fb02 	bl	8001c42 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801663e:	f003 fe77 	bl	801a330 <UTIL_TIMER_GetCurrentTime>
 8016642:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016644:	e00d      	b.n	8016662 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016646:	2000      	movs	r0, #0
 8016648:	f000 feb2 	bl	80173b0 <RadioRssi>
 801664c:	4603      	mov	r3, r0
 801664e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016650:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016654:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016658:	429a      	cmp	r2, r3
 801665a:	dd02      	ble.n	8016662 <RadioIsChannelFree+0x98>
        {
            status = false;
 801665c:	2300      	movs	r3, #0
 801665e:	75fb      	strb	r3, [r7, #23]
            break;
 8016660:	e006      	b.n	8016670 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016662:	6938      	ldr	r0, [r7, #16]
 8016664:	f003 fe76 	bl	801a354 <UTIL_TIMER_GetElapsedTime>
 8016668:	4602      	mov	r2, r0
 801666a:	683b      	ldr	r3, [r7, #0]
 801666c:	4293      	cmp	r3, r2
 801666e:	d8ea      	bhi.n	8016646 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8016670:	f000 fdbf 	bl	80171f2 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8016674:	7dfb      	ldrb	r3, [r7, #23]
}
 8016676:	4618      	mov	r0, r3
 8016678:	3718      	adds	r7, #24
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}

0801667e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801667e:	b580      	push	{r7, lr}
 8016680:	b082      	sub	sp, #8
 8016682:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016684:	2300      	movs	r3, #0
 8016686:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8016688:	2001      	movs	r0, #1
 801668a:	f7ff ff41 	bl	8016510 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801668e:	2300      	movs	r3, #0
 8016690:	2200      	movs	r2, #0
 8016692:	2100      	movs	r1, #0
 8016694:	2000      	movs	r0, #0
 8016696:	f002 f91f 	bl	80188d8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801669a:	f001 fed4 	bl	8018446 <SUBGRF_GetRandom>
 801669e:	6078      	str	r0, [r7, #4]

    return rnd;
 80166a0:	687b      	ldr	r3, [r7, #4]
}
 80166a2:	4618      	mov	r0, r3
 80166a4:	3708      	adds	r7, #8
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}
	...

080166ac <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b08a      	sub	sp, #40	; 0x28
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	60b9      	str	r1, [r7, #8]
 80166b4:	607a      	str	r2, [r7, #4]
 80166b6:	461a      	mov	r2, r3
 80166b8:	4603      	mov	r3, r0
 80166ba:	73fb      	strb	r3, [r7, #15]
 80166bc:	4613      	mov	r3, r2
 80166be:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 80166c0:	4abd      	ldr	r2, [pc, #756]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80166c2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80166c6:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80166c8:	f002 ff1d 	bl	8019506 <RFW_DeInit>
    if( rxContinuous == true )
 80166cc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d001      	beq.n	80166d8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80166d4:	2300      	movs	r3, #0
 80166d6:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80166d8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d004      	beq.n	80166ea <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80166e0:	4ab6      	ldr	r2, [pc, #728]	; (80169bc <RadioSetRxConfig+0x310>)
 80166e2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80166e6:	7013      	strb	r3, [r2, #0]
 80166e8:	e002      	b.n	80166f0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80166ea:	4bb4      	ldr	r3, [pc, #720]	; (80169bc <RadioSetRxConfig+0x310>)
 80166ec:	22ff      	movs	r2, #255	; 0xff
 80166ee:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80166f0:	7bfb      	ldrb	r3, [r7, #15]
 80166f2:	2b04      	cmp	r3, #4
 80166f4:	d009      	beq.n	801670a <RadioSetRxConfig+0x5e>
 80166f6:	2b04      	cmp	r3, #4
 80166f8:	f300 81da 	bgt.w	8016ab0 <RadioSetRxConfig+0x404>
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	f000 80bf 	beq.w	8016880 <RadioSetRxConfig+0x1d4>
 8016702:	2b01      	cmp	r3, #1
 8016704:	f000 812c 	beq.w	8016960 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016708:	e1d2      	b.n	8016ab0 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801670a:	2001      	movs	r0, #1
 801670c:	f001 ffe0 	bl	80186d0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016710:	4ba9      	ldr	r3, [pc, #676]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016712:	2200      	movs	r2, #0
 8016714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016718:	4aa7      	ldr	r2, [pc, #668]	; (80169b8 <RadioSetRxConfig+0x30c>)
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801671e:	4ba6      	ldr	r3, [pc, #664]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016720:	2209      	movs	r2, #9
 8016722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016726:	4ba4      	ldr	r3, [pc, #656]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016728:	f44f 7248 	mov.w	r2, #800	; 0x320
 801672c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801672e:	68b8      	ldr	r0, [r7, #8]
 8016730:	f002 fe1a 	bl	8019368 <SUBGRF_GetFskBandwidthRegValue>
 8016734:	4603      	mov	r3, r0
 8016736:	461a      	mov	r2, r3
 8016738:	4b9f      	ldr	r3, [pc, #636]	; (80169b8 <RadioSetRxConfig+0x30c>)
 801673a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801673e:	4b9e      	ldr	r3, [pc, #632]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016740:	2200      	movs	r2, #0
 8016742:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016744:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016746:	00db      	lsls	r3, r3, #3
 8016748:	b29a      	uxth	r2, r3
 801674a:	4b9b      	ldr	r3, [pc, #620]	; (80169b8 <RadioSetRxConfig+0x30c>)
 801674c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801674e:	4b9a      	ldr	r3, [pc, #616]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016750:	2200      	movs	r2, #0
 8016752:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016754:	4b98      	ldr	r3, [pc, #608]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016756:	2210      	movs	r2, #16
 8016758:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801675a:	4b97      	ldr	r3, [pc, #604]	; (80169b8 <RadioSetRxConfig+0x30c>)
 801675c:	2200      	movs	r2, #0
 801675e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016760:	4b95      	ldr	r3, [pc, #596]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016762:	2200      	movs	r2, #0
 8016764:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016766:	4b95      	ldr	r3, [pc, #596]	; (80169bc <RadioSetRxConfig+0x310>)
 8016768:	781a      	ldrb	r2, [r3, #0]
 801676a:	4b93      	ldr	r3, [pc, #588]	; (80169b8 <RadioSetRxConfig+0x30c>)
 801676c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801676e:	4b92      	ldr	r3, [pc, #584]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016770:	2201      	movs	r2, #1
 8016772:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016774:	4b90      	ldr	r3, [pc, #576]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016776:	2200      	movs	r2, #0
 8016778:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801677a:	2004      	movs	r0, #4
 801677c:	f7ff fec8 	bl	8016510 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016780:	488f      	ldr	r0, [pc, #572]	; (80169c0 <RadioSetRxConfig+0x314>)
 8016782:	f002 f9d3 	bl	8018b2c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016786:	488f      	ldr	r0, [pc, #572]	; (80169c4 <RadioSetRxConfig+0x318>)
 8016788:	f002 fa9c 	bl	8018cc4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801678c:	4a8e      	ldr	r2, [pc, #568]	; (80169c8 <RadioSetRxConfig+0x31c>)
 801678e:	f107 031c 	add.w	r3, r7, #28
 8016792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016796:	e883 0003 	stmia.w	r3, {r0, r1}
 801679a:	f107 031c 	add.w	r3, r7, #28
 801679e:	4618      	mov	r0, r3
 80167a0:	f001 fdcf 	bl	8018342 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80167a4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80167a8:	f001 fe1a 	bl	80183e0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 80167ac:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80167b0:	f000 fe1d 	bl	80173ee <RadioRead>
 80167b4:	4603      	mov	r3, r0
 80167b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80167ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167be:	f023 0310 	bic.w	r3, r3, #16
 80167c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 80167c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167ca:	4619      	mov	r1, r3
 80167cc:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80167d0:	f000 fdfb 	bl	80173ca <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 80167d4:	2104      	movs	r1, #4
 80167d6:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80167da:	f000 fdf6 	bl	80173ca <RadioWrite>
            modReg= RadioRead(0x89b);
 80167de:	f640 009b 	movw	r0, #2203	; 0x89b
 80167e2:	f000 fe04 	bl	80173ee <RadioRead>
 80167e6:	4603      	mov	r3, r0
 80167e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80167ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167f0:	f023 031c 	bic.w	r3, r3, #28
 80167f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 80167f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167fc:	f043 0308 	orr.w	r3, r3, #8
 8016800:	b2db      	uxtb	r3, r3
 8016802:	4619      	mov	r1, r3
 8016804:	f640 009b 	movw	r0, #2203	; 0x89b
 8016808:	f000 fddf 	bl	80173ca <RadioWrite>
            modReg= RadioRead(0x6d1);
 801680c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016810:	f000 fded 	bl	80173ee <RadioRead>
 8016814:	4603      	mov	r3, r0
 8016816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801681a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801681e:	f023 0318 	bic.w	r3, r3, #24
 8016822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8016826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801682a:	f043 0318 	orr.w	r3, r3, #24
 801682e:	b2db      	uxtb	r3, r3
 8016830:	4619      	mov	r1, r3
 8016832:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016836:	f000 fdc8 	bl	80173ca <RadioWrite>
            modReg= RadioRead(0x6ac);
 801683a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801683e:	f000 fdd6 	bl	80173ee <RadioRead>
 8016842:	4603      	mov	r3, r0
 8016844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801684c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8016854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016858:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801685c:	b2db      	uxtb	r3, r3
 801685e:	4619      	mov	r1, r3
 8016860:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016864:	f000 fdb1 	bl	80173ca <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016868:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801686a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801686e:	fb02 f303 	mul.w	r3, r2, r3
 8016872:	461a      	mov	r2, r3
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	fbb2 f3f3 	udiv	r3, r2, r3
 801687a:	4a4f      	ldr	r2, [pc, #316]	; (80169b8 <RadioSetRxConfig+0x30c>)
 801687c:	6093      	str	r3, [r2, #8]
            break;
 801687e:	e118      	b.n	8016ab2 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016880:	2000      	movs	r0, #0
 8016882:	f001 ff25 	bl	80186d0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016886:	4b4c      	ldr	r3, [pc, #304]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016888:	2200      	movs	r2, #0
 801688a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801688e:	4a4a      	ldr	r2, [pc, #296]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016894:	4b48      	ldr	r3, [pc, #288]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016896:	220b      	movs	r2, #11
 8016898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801689c:	68b8      	ldr	r0, [r7, #8]
 801689e:	f002 fd63 	bl	8019368 <SUBGRF_GetFskBandwidthRegValue>
 80168a2:	4603      	mov	r3, r0
 80168a4:	461a      	mov	r2, r3
 80168a6:	4b44      	ldr	r3, [pc, #272]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80168a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80168ac:	4b42      	ldr	r3, [pc, #264]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80168ae:	2200      	movs	r2, #0
 80168b0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80168b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80168b4:	00db      	lsls	r3, r3, #3
 80168b6:	b29a      	uxth	r2, r3
 80168b8:	4b3f      	ldr	r3, [pc, #252]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80168ba:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80168bc:	4b3e      	ldr	r3, [pc, #248]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80168be:	2204      	movs	r2, #4
 80168c0:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80168c2:	4b3d      	ldr	r3, [pc, #244]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80168c4:	2218      	movs	r2, #24
 80168c6:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80168c8:	4b3b      	ldr	r3, [pc, #236]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80168ca:	2200      	movs	r2, #0
 80168cc:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80168ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80168d2:	f083 0301 	eor.w	r3, r3, #1
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	461a      	mov	r2, r3
 80168da:	4b37      	ldr	r3, [pc, #220]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80168dc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80168de:	4b37      	ldr	r3, [pc, #220]	; (80169bc <RadioSetRxConfig+0x310>)
 80168e0:	781a      	ldrb	r2, [r3, #0]
 80168e2:	4b35      	ldr	r3, [pc, #212]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80168e4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80168e6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d003      	beq.n	80168f6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80168ee:	4b32      	ldr	r3, [pc, #200]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80168f0:	22f2      	movs	r2, #242	; 0xf2
 80168f2:	75da      	strb	r2, [r3, #23]
 80168f4:	e002      	b.n	80168fc <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80168f6:	4b30      	ldr	r3, [pc, #192]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80168f8:	2201      	movs	r2, #1
 80168fa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80168fc:	4b2e      	ldr	r3, [pc, #184]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80168fe:	2201      	movs	r2, #1
 8016900:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016902:	f000 fc76 	bl	80171f2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016906:	4b2c      	ldr	r3, [pc, #176]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016908:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801690c:	2b00      	cmp	r3, #0
 801690e:	bf14      	ite	ne
 8016910:	2301      	movne	r3, #1
 8016912:	2300      	moveq	r3, #0
 8016914:	b2db      	uxtb	r3, r3
 8016916:	4618      	mov	r0, r3
 8016918:	f7ff fdfa 	bl	8016510 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801691c:	4828      	ldr	r0, [pc, #160]	; (80169c0 <RadioSetRxConfig+0x314>)
 801691e:	f002 f905 	bl	8018b2c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016922:	4828      	ldr	r0, [pc, #160]	; (80169c4 <RadioSetRxConfig+0x318>)
 8016924:	f002 f9ce 	bl	8018cc4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016928:	4a28      	ldr	r2, [pc, #160]	; (80169cc <RadioSetRxConfig+0x320>)
 801692a:	f107 0314 	add.w	r3, r7, #20
 801692e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016932:	e883 0003 	stmia.w	r3, {r0, r1}
 8016936:	f107 0314 	add.w	r3, r7, #20
 801693a:	4618      	mov	r0, r3
 801693c:	f001 fd01 	bl	8018342 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016940:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016944:	f001 fd4c 	bl	80183e0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016948:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801694a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801694e:	fb02 f303 	mul.w	r3, r2, r3
 8016952:	461a      	mov	r2, r3
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	fbb2 f3f3 	udiv	r3, r2, r3
 801695a:	4a17      	ldr	r2, [pc, #92]	; (80169b8 <RadioSetRxConfig+0x30c>)
 801695c:	6093      	str	r3, [r2, #8]
            break;
 801695e:	e0a8      	b.n	8016ab2 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016960:	2000      	movs	r0, #0
 8016962:	f001 feb5 	bl	80186d0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016966:	4b14      	ldr	r3, [pc, #80]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016968:	2201      	movs	r2, #1
 801696a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	b2da      	uxtb	r2, r3
 8016972:	4b11      	ldr	r3, [pc, #68]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016978:	4a15      	ldr	r2, [pc, #84]	; (80169d0 <RadioSetRxConfig+0x324>)
 801697a:	68bb      	ldr	r3, [r7, #8]
 801697c:	4413      	add	r3, r2
 801697e:	781a      	ldrb	r2, [r3, #0]
 8016980:	4b0d      	ldr	r3, [pc, #52]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016986:	4a0c      	ldr	r2, [pc, #48]	; (80169b8 <RadioSetRxConfig+0x30c>)
 8016988:	7bbb      	ldrb	r3, [r7, #14]
 801698a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d105      	bne.n	80169a0 <RadioSetRxConfig+0x2f4>
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2b0b      	cmp	r3, #11
 8016998:	d008      	beq.n	80169ac <RadioSetRxConfig+0x300>
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	2b0c      	cmp	r3, #12
 801699e:	d005      	beq.n	80169ac <RadioSetRxConfig+0x300>
 80169a0:	68bb      	ldr	r3, [r7, #8]
 80169a2:	2b01      	cmp	r3, #1
 80169a4:	d116      	bne.n	80169d4 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	2b0c      	cmp	r3, #12
 80169aa:	d113      	bne.n	80169d4 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80169ac:	4b02      	ldr	r3, [pc, #8]	; (80169b8 <RadioSetRxConfig+0x30c>)
 80169ae:	2201      	movs	r2, #1
 80169b0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80169b4:	e012      	b.n	80169dc <RadioSetRxConfig+0x330>
 80169b6:	bf00      	nop
 80169b8:	200017b0 	.word	0x200017b0
 80169bc:	20000120 	.word	0x20000120
 80169c0:	200017e8 	.word	0x200017e8
 80169c4:	200017be 	.word	0x200017be
 80169c8:	0801b2dc 	.word	0x0801b2dc
 80169cc:	0801b2e4 	.word	0x0801b2e4
 80169d0:	0801b8cc 	.word	0x0801b8cc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80169d4:	4b39      	ldr	r3, [pc, #228]	; (8016abc <RadioSetRxConfig+0x410>)
 80169d6:	2200      	movs	r2, #0
 80169d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80169dc:	4b37      	ldr	r3, [pc, #220]	; (8016abc <RadioSetRxConfig+0x410>)
 80169de:	2201      	movs	r2, #1
 80169e0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80169e2:	4b36      	ldr	r3, [pc, #216]	; (8016abc <RadioSetRxConfig+0x410>)
 80169e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80169e8:	2b05      	cmp	r3, #5
 80169ea:	d004      	beq.n	80169f6 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80169ec:	4b33      	ldr	r3, [pc, #204]	; (8016abc <RadioSetRxConfig+0x410>)
 80169ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80169f2:	2b06      	cmp	r3, #6
 80169f4:	d10a      	bne.n	8016a0c <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 80169f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80169f8:	2b0b      	cmp	r3, #11
 80169fa:	d803      	bhi.n	8016a04 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80169fc:	4b2f      	ldr	r3, [pc, #188]	; (8016abc <RadioSetRxConfig+0x410>)
 80169fe:	220c      	movs	r2, #12
 8016a00:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016a02:	e006      	b.n	8016a12 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016a04:	4a2d      	ldr	r2, [pc, #180]	; (8016abc <RadioSetRxConfig+0x410>)
 8016a06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016a08:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016a0a:	e002      	b.n	8016a12 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016a0c:	4a2b      	ldr	r2, [pc, #172]	; (8016abc <RadioSetRxConfig+0x410>)
 8016a0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016a10:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016a12:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016a16:	4b29      	ldr	r3, [pc, #164]	; (8016abc <RadioSetRxConfig+0x410>)
 8016a18:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016a1a:	4b29      	ldr	r3, [pc, #164]	; (8016ac0 <RadioSetRxConfig+0x414>)
 8016a1c:	781a      	ldrb	r2, [r3, #0]
 8016a1e:	4b27      	ldr	r3, [pc, #156]	; (8016abc <RadioSetRxConfig+0x410>)
 8016a20:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016a22:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016a26:	4b25      	ldr	r3, [pc, #148]	; (8016abc <RadioSetRxConfig+0x410>)
 8016a28:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016a2c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016a30:	4b22      	ldr	r3, [pc, #136]	; (8016abc <RadioSetRxConfig+0x410>)
 8016a32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016a36:	f000 fbdc 	bl	80171f2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016a3a:	4b20      	ldr	r3, [pc, #128]	; (8016abc <RadioSetRxConfig+0x410>)
 8016a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	bf14      	ite	ne
 8016a44:	2301      	movne	r3, #1
 8016a46:	2300      	moveq	r3, #0
 8016a48:	b2db      	uxtb	r3, r3
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f7ff fd60 	bl	8016510 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016a50:	481c      	ldr	r0, [pc, #112]	; (8016ac4 <RadioSetRxConfig+0x418>)
 8016a52:	f002 f86b 	bl	8018b2c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016a56:	481c      	ldr	r0, [pc, #112]	; (8016ac8 <RadioSetRxConfig+0x41c>)
 8016a58:	f002 f934 	bl	8018cc4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016a5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016a5e:	b2db      	uxtb	r3, r3
 8016a60:	4618      	mov	r0, r3
 8016a62:	f001 fe44 	bl	80186ee <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016a66:	4b15      	ldr	r3, [pc, #84]	; (8016abc <RadioSetRxConfig+0x410>)
 8016a68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016a6c:	2b01      	cmp	r3, #1
 8016a6e:	d10d      	bne.n	8016a8c <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8016a70:	f240 7036 	movw	r0, #1846	; 0x736
 8016a74:	f002 fa82 	bl	8018f7c <SUBGRF_ReadRegister>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	f023 0304 	bic.w	r3, r3, #4
 8016a7e:	b2db      	uxtb	r3, r3
 8016a80:	4619      	mov	r1, r3
 8016a82:	f240 7036 	movw	r0, #1846	; 0x736
 8016a86:	f002 fa65 	bl	8018f54 <SUBGRF_WriteRegister>
 8016a8a:	e00c      	b.n	8016aa6 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8016a8c:	f240 7036 	movw	r0, #1846	; 0x736
 8016a90:	f002 fa74 	bl	8018f7c <SUBGRF_ReadRegister>
 8016a94:	4603      	mov	r3, r0
 8016a96:	f043 0304 	orr.w	r3, r3, #4
 8016a9a:	b2db      	uxtb	r3, r3
 8016a9c:	4619      	mov	r1, r3
 8016a9e:	f240 7036 	movw	r0, #1846	; 0x736
 8016aa2:	f002 fa57 	bl	8018f54 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016aa6:	4b05      	ldr	r3, [pc, #20]	; (8016abc <RadioSetRxConfig+0x410>)
 8016aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016aac:	609a      	str	r2, [r3, #8]
            break;
 8016aae:	e000      	b.n	8016ab2 <RadioSetRxConfig+0x406>
            break;
 8016ab0:	bf00      	nop
    }
}
 8016ab2:	bf00      	nop
 8016ab4:	3728      	adds	r7, #40	; 0x28
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}
 8016aba:	bf00      	nop
 8016abc:	200017b0 	.word	0x200017b0
 8016ac0:	20000120 	.word	0x20000120
 8016ac4:	200017e8 	.word	0x200017e8
 8016ac8:	200017be 	.word	0x200017be

08016acc <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b086      	sub	sp, #24
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	60ba      	str	r2, [r7, #8]
 8016ad4:	607b      	str	r3, [r7, #4]
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	73fb      	strb	r3, [r7, #15]
 8016ada:	460b      	mov	r3, r1
 8016adc:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016ade:	f002 fd12 	bl	8019506 <RFW_DeInit>
    switch( modem )
 8016ae2:	7bfb      	ldrb	r3, [r7, #15]
 8016ae4:	2b03      	cmp	r3, #3
 8016ae6:	f000 80d7 	beq.w	8016c98 <RadioSetTxConfig+0x1cc>
 8016aea:	2b03      	cmp	r3, #3
 8016aec:	f300 80e6 	bgt.w	8016cbc <RadioSetTxConfig+0x1f0>
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d002      	beq.n	8016afa <RadioSetTxConfig+0x2e>
 8016af4:	2b01      	cmp	r3, #1
 8016af6:	d061      	beq.n	8016bbc <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8016af8:	e0e0      	b.n	8016cbc <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016afa:	4b7c      	ldr	r3, [pc, #496]	; (8016cec <RadioSetTxConfig+0x220>)
 8016afc:	2200      	movs	r2, #0
 8016afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016b02:	4a7a      	ldr	r2, [pc, #488]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b04:	6a3b      	ldr	r3, [r7, #32]
 8016b06:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016b08:	4b78      	ldr	r3, [pc, #480]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b0a:	220b      	movs	r2, #11
 8016b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016b10:	6878      	ldr	r0, [r7, #4]
 8016b12:	f002 fc29 	bl	8019368 <SUBGRF_GetFskBandwidthRegValue>
 8016b16:	4603      	mov	r3, r0
 8016b18:	461a      	mov	r2, r3
 8016b1a:	4b74      	ldr	r3, [pc, #464]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016b20:	4a72      	ldr	r2, [pc, #456]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b22:	68bb      	ldr	r3, [r7, #8]
 8016b24:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016b26:	4b71      	ldr	r3, [pc, #452]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b28:	2200      	movs	r2, #0
 8016b2a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016b2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016b2e:	00db      	lsls	r3, r3, #3
 8016b30:	b29a      	uxth	r2, r3
 8016b32:	4b6e      	ldr	r3, [pc, #440]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b34:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016b36:	4b6d      	ldr	r3, [pc, #436]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b38:	2204      	movs	r2, #4
 8016b3a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016b3c:	4b6b      	ldr	r3, [pc, #428]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b3e:	2218      	movs	r2, #24
 8016b40:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016b42:	4b6a      	ldr	r3, [pc, #424]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b44:	2200      	movs	r2, #0
 8016b46:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016b48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016b4c:	f083 0301 	eor.w	r3, r3, #1
 8016b50:	b2db      	uxtb	r3, r3
 8016b52:	461a      	mov	r2, r3
 8016b54:	4b65      	ldr	r3, [pc, #404]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b56:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016b58:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d003      	beq.n	8016b68 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016b60:	4b62      	ldr	r3, [pc, #392]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b62:	22f2      	movs	r2, #242	; 0xf2
 8016b64:	75da      	strb	r2, [r3, #23]
 8016b66:	e002      	b.n	8016b6e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016b68:	4b60      	ldr	r3, [pc, #384]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b6a:	2201      	movs	r2, #1
 8016b6c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016b6e:	4b5f      	ldr	r3, [pc, #380]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b70:	2201      	movs	r2, #1
 8016b72:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016b74:	f000 fb3d 	bl	80171f2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016b78:	4b5c      	ldr	r3, [pc, #368]	; (8016cec <RadioSetTxConfig+0x220>)
 8016b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	bf14      	ite	ne
 8016b82:	2301      	movne	r3, #1
 8016b84:	2300      	moveq	r3, #0
 8016b86:	b2db      	uxtb	r3, r3
 8016b88:	4618      	mov	r0, r3
 8016b8a:	f7ff fcc1 	bl	8016510 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016b8e:	4858      	ldr	r0, [pc, #352]	; (8016cf0 <RadioSetTxConfig+0x224>)
 8016b90:	f001 ffcc 	bl	8018b2c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b94:	4857      	ldr	r0, [pc, #348]	; (8016cf4 <RadioSetTxConfig+0x228>)
 8016b96:	f002 f895 	bl	8018cc4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016b9a:	4a57      	ldr	r2, [pc, #348]	; (8016cf8 <RadioSetTxConfig+0x22c>)
 8016b9c:	f107 0310 	add.w	r3, r7, #16
 8016ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ba4:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ba8:	f107 0310 	add.w	r3, r7, #16
 8016bac:	4618      	mov	r0, r3
 8016bae:	f001 fbc8 	bl	8018342 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016bb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016bb6:	f001 fc13 	bl	80183e0 <SUBGRF_SetWhiteningSeed>
            break;
 8016bba:	e080      	b.n	8016cbe <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016bbc:	4b4b      	ldr	r3, [pc, #300]	; (8016cec <RadioSetTxConfig+0x220>)
 8016bbe:	2201      	movs	r2, #1
 8016bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016bc4:	6a3b      	ldr	r3, [r7, #32]
 8016bc6:	b2da      	uxtb	r2, r3
 8016bc8:	4b48      	ldr	r3, [pc, #288]	; (8016cec <RadioSetTxConfig+0x220>)
 8016bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016bce:	4a4b      	ldr	r2, [pc, #300]	; (8016cfc <RadioSetTxConfig+0x230>)
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	4413      	add	r3, r2
 8016bd4:	781a      	ldrb	r2, [r3, #0]
 8016bd6:	4b45      	ldr	r3, [pc, #276]	; (8016cec <RadioSetTxConfig+0x220>)
 8016bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016bdc:	4a43      	ldr	r2, [pc, #268]	; (8016cec <RadioSetTxConfig+0x220>)
 8016bde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016be2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d105      	bne.n	8016bf8 <RadioSetTxConfig+0x12c>
 8016bec:	6a3b      	ldr	r3, [r7, #32]
 8016bee:	2b0b      	cmp	r3, #11
 8016bf0:	d008      	beq.n	8016c04 <RadioSetTxConfig+0x138>
 8016bf2:	6a3b      	ldr	r3, [r7, #32]
 8016bf4:	2b0c      	cmp	r3, #12
 8016bf6:	d005      	beq.n	8016c04 <RadioSetTxConfig+0x138>
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2b01      	cmp	r3, #1
 8016bfc:	d107      	bne.n	8016c0e <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016bfe:	6a3b      	ldr	r3, [r7, #32]
 8016c00:	2b0c      	cmp	r3, #12
 8016c02:	d104      	bne.n	8016c0e <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016c04:	4b39      	ldr	r3, [pc, #228]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c06:	2201      	movs	r2, #1
 8016c08:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016c0c:	e003      	b.n	8016c16 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016c0e:	4b37      	ldr	r3, [pc, #220]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c10:	2200      	movs	r2, #0
 8016c12:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016c16:	4b35      	ldr	r3, [pc, #212]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c18:	2201      	movs	r2, #1
 8016c1a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016c1c:	4b33      	ldr	r3, [pc, #204]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016c22:	2b05      	cmp	r3, #5
 8016c24:	d004      	beq.n	8016c30 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016c26:	4b31      	ldr	r3, [pc, #196]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016c2c:	2b06      	cmp	r3, #6
 8016c2e:	d10a      	bne.n	8016c46 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8016c30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016c32:	2b0b      	cmp	r3, #11
 8016c34:	d803      	bhi.n	8016c3e <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016c36:	4b2d      	ldr	r3, [pc, #180]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c38:	220c      	movs	r2, #12
 8016c3a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016c3c:	e006      	b.n	8016c4c <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016c3e:	4a2b      	ldr	r2, [pc, #172]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016c42:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016c44:	e002      	b.n	8016c4c <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016c46:	4a29      	ldr	r2, [pc, #164]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016c4a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016c4c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016c50:	4b26      	ldr	r3, [pc, #152]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c52:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016c54:	4b2a      	ldr	r3, [pc, #168]	; (8016d00 <RadioSetTxConfig+0x234>)
 8016c56:	781a      	ldrb	r2, [r3, #0]
 8016c58:	4b24      	ldr	r3, [pc, #144]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c5a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016c5c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016c60:	4b22      	ldr	r3, [pc, #136]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c62:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016c66:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016c6a:	4b20      	ldr	r3, [pc, #128]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016c70:	f000 fabf 	bl	80171f2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016c74:	4b1d      	ldr	r3, [pc, #116]	; (8016cec <RadioSetTxConfig+0x220>)
 8016c76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	bf14      	ite	ne
 8016c7e:	2301      	movne	r3, #1
 8016c80:	2300      	moveq	r3, #0
 8016c82:	b2db      	uxtb	r3, r3
 8016c84:	4618      	mov	r0, r3
 8016c86:	f7ff fc43 	bl	8016510 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016c8a:	4819      	ldr	r0, [pc, #100]	; (8016cf0 <RadioSetTxConfig+0x224>)
 8016c8c:	f001 ff4e 	bl	8018b2c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016c90:	4818      	ldr	r0, [pc, #96]	; (8016cf4 <RadioSetTxConfig+0x228>)
 8016c92:	f002 f817 	bl	8018cc4 <SUBGRF_SetPacketParams>
            break;
 8016c96:	e012      	b.n	8016cbe <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8016c98:	2003      	movs	r0, #3
 8016c9a:	f7ff fc39 	bl	8016510 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8016c9e:	4b13      	ldr	r3, [pc, #76]	; (8016cec <RadioSetTxConfig+0x220>)
 8016ca0:	2202      	movs	r2, #2
 8016ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8016ca6:	4a11      	ldr	r2, [pc, #68]	; (8016cec <RadioSetTxConfig+0x220>)
 8016ca8:	6a3b      	ldr	r3, [r7, #32]
 8016caa:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8016cac:	4b0f      	ldr	r3, [pc, #60]	; (8016cec <RadioSetTxConfig+0x220>)
 8016cae:	2216      	movs	r2, #22
 8016cb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016cb4:	480e      	ldr	r0, [pc, #56]	; (8016cf0 <RadioSetTxConfig+0x224>)
 8016cb6:	f001 ff39 	bl	8018b2c <SUBGRF_SetModulationParams>
            break;
 8016cba:	e000      	b.n	8016cbe <RadioSetTxConfig+0x1f2>
            break;
 8016cbc:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016cbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f002 fa62 	bl	801918c <SUBGRF_SetRfTxPower>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	461a      	mov	r2, r3
 8016ccc:	4b07      	ldr	r3, [pc, #28]	; (8016cec <RadioSetTxConfig+0x220>)
 8016cce:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8016cd2:	4b06      	ldr	r3, [pc, #24]	; (8016cec <RadioSetTxConfig+0x220>)
 8016cd4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016cd8:	4618      	mov	r0, r3
 8016cda:	f002 fc28 	bl	801952e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8016cde:	4a03      	ldr	r2, [pc, #12]	; (8016cec <RadioSetTxConfig+0x220>)
 8016ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ce2:	6053      	str	r3, [r2, #4]
}
 8016ce4:	bf00      	nop
 8016ce6:	3718      	adds	r7, #24
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}
 8016cec:	200017b0 	.word	0x200017b0
 8016cf0:	200017e8 	.word	0x200017e8
 8016cf4:	200017be 	.word	0x200017be
 8016cf8:	0801b2e4 	.word	0x0801b2e4
 8016cfc:	0801b8cc 	.word	0x0801b8cc
 8016d00:	20000120 	.word	0x20000120

08016d04 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8016d04:	b480      	push	{r7}
 8016d06:	b083      	sub	sp, #12
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
    return true;
 8016d0c:	2301      	movs	r3, #1
}
 8016d0e:	4618      	mov	r0, r3
 8016d10:	370c      	adds	r7, #12
 8016d12:	46bd      	mov	sp, r7
 8016d14:	bc80      	pop	{r7}
 8016d16:	4770      	bx	lr

08016d18 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8016d18:	b480      	push	{r7}
 8016d1a:	b085      	sub	sp, #20
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	4603      	mov	r3, r0
 8016d20:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8016d22:	2300      	movs	r3, #0
 8016d24:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8016d26:	79fb      	ldrb	r3, [r7, #7]
 8016d28:	2b0a      	cmp	r3, #10
 8016d2a:	d83e      	bhi.n	8016daa <RadioGetLoRaBandwidthInHz+0x92>
 8016d2c:	a201      	add	r2, pc, #4	; (adr r2, 8016d34 <RadioGetLoRaBandwidthInHz+0x1c>)
 8016d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d32:	bf00      	nop
 8016d34:	08016d61 	.word	0x08016d61
 8016d38:	08016d71 	.word	0x08016d71
 8016d3c:	08016d81 	.word	0x08016d81
 8016d40:	08016d91 	.word	0x08016d91
 8016d44:	08016d99 	.word	0x08016d99
 8016d48:	08016d9f 	.word	0x08016d9f
 8016d4c:	08016da5 	.word	0x08016da5
 8016d50:	08016dab 	.word	0x08016dab
 8016d54:	08016d69 	.word	0x08016d69
 8016d58:	08016d79 	.word	0x08016d79
 8016d5c:	08016d89 	.word	0x08016d89
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8016d60:	f641 6384 	movw	r3, #7812	; 0x1e84
 8016d64:	60fb      	str	r3, [r7, #12]
        break;
 8016d66:	e020      	b.n	8016daa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8016d68:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8016d6c:	60fb      	str	r3, [r7, #12]
        break;
 8016d6e:	e01c      	b.n	8016daa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8016d70:	f643 5309 	movw	r3, #15625	; 0x3d09
 8016d74:	60fb      	str	r3, [r7, #12]
        break;
 8016d76:	e018      	b.n	8016daa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8016d78:	f245 1361 	movw	r3, #20833	; 0x5161
 8016d7c:	60fb      	str	r3, [r7, #12]
        break;
 8016d7e:	e014      	b.n	8016daa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8016d80:	f647 2312 	movw	r3, #31250	; 0x7a12
 8016d84:	60fb      	str	r3, [r7, #12]
        break;
 8016d86:	e010      	b.n	8016daa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8016d88:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8016d8c:	60fb      	str	r3, [r7, #12]
        break;
 8016d8e:	e00c      	b.n	8016daa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8016d90:	f24f 4324 	movw	r3, #62500	; 0xf424
 8016d94:	60fb      	str	r3, [r7, #12]
        break;
 8016d96:	e008      	b.n	8016daa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8016d98:	4b07      	ldr	r3, [pc, #28]	; (8016db8 <RadioGetLoRaBandwidthInHz+0xa0>)
 8016d9a:	60fb      	str	r3, [r7, #12]
        break;
 8016d9c:	e005      	b.n	8016daa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8016d9e:	4b07      	ldr	r3, [pc, #28]	; (8016dbc <RadioGetLoRaBandwidthInHz+0xa4>)
 8016da0:	60fb      	str	r3, [r7, #12]
        break;
 8016da2:	e002      	b.n	8016daa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8016da4:	4b06      	ldr	r3, [pc, #24]	; (8016dc0 <RadioGetLoRaBandwidthInHz+0xa8>)
 8016da6:	60fb      	str	r3, [r7, #12]
        break;
 8016da8:	bf00      	nop
    }

    return bandwidthInHz;
 8016daa:	68fb      	ldr	r3, [r7, #12]
}
 8016dac:	4618      	mov	r0, r3
 8016dae:	3714      	adds	r7, #20
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bc80      	pop	{r7}
 8016db4:	4770      	bx	lr
 8016db6:	bf00      	nop
 8016db8:	0001e848 	.word	0x0001e848
 8016dbc:	0003d090 	.word	0x0003d090
 8016dc0:	0007a120 	.word	0x0007a120

08016dc4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016dc4:	b480      	push	{r7}
 8016dc6:	b083      	sub	sp, #12
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
 8016dcc:	4608      	mov	r0, r1
 8016dce:	4611      	mov	r1, r2
 8016dd0:	461a      	mov	r2, r3
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	70fb      	strb	r3, [r7, #3]
 8016dd6:	460b      	mov	r3, r1
 8016dd8:	803b      	strh	r3, [r7, #0]
 8016dda:	4613      	mov	r3, r2
 8016ddc:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8016dde:	883b      	ldrh	r3, [r7, #0]
 8016de0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016de2:	78ba      	ldrb	r2, [r7, #2]
 8016de4:	f082 0201 	eor.w	r2, r2, #1
 8016de8:	b2d2      	uxtb	r2, r2
 8016dea:	2a00      	cmp	r2, #0
 8016dec:	d001      	beq.n	8016df2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8016dee:	2208      	movs	r2, #8
 8016df0:	e000      	b.n	8016df4 <RadioGetGfskTimeOnAirNumerator+0x30>
 8016df2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8016df4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016df6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8016dfa:	7c3b      	ldrb	r3, [r7, #16]
 8016dfc:	7d39      	ldrb	r1, [r7, #20]
 8016dfe:	2900      	cmp	r1, #0
 8016e00:	d001      	beq.n	8016e06 <RadioGetGfskTimeOnAirNumerator+0x42>
 8016e02:	2102      	movs	r1, #2
 8016e04:	e000      	b.n	8016e08 <RadioGetGfskTimeOnAirNumerator+0x44>
 8016e06:	2100      	movs	r1, #0
 8016e08:	440b      	add	r3, r1
 8016e0a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016e0c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8016e0e:	4618      	mov	r0, r3
 8016e10:	370c      	adds	r7, #12
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bc80      	pop	{r7}
 8016e16:	4770      	bx	lr

08016e18 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016e18:	b480      	push	{r7}
 8016e1a:	b08b      	sub	sp, #44	; 0x2c
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	60f8      	str	r0, [r7, #12]
 8016e20:	60b9      	str	r1, [r7, #8]
 8016e22:	4611      	mov	r1, r2
 8016e24:	461a      	mov	r2, r3
 8016e26:	460b      	mov	r3, r1
 8016e28:	71fb      	strb	r3, [r7, #7]
 8016e2a:	4613      	mov	r3, r2
 8016e2c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8016e2e:	79fb      	ldrb	r3, [r7, #7]
 8016e30:	3304      	adds	r3, #4
 8016e32:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8016e34:	2300      	movs	r3, #0
 8016e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8016e3a:	68bb      	ldr	r3, [r7, #8]
 8016e3c:	2b05      	cmp	r3, #5
 8016e3e:	d002      	beq.n	8016e46 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8016e40:	68bb      	ldr	r3, [r7, #8]
 8016e42:	2b06      	cmp	r3, #6
 8016e44:	d104      	bne.n	8016e50 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8016e46:	88bb      	ldrh	r3, [r7, #4]
 8016e48:	2b0b      	cmp	r3, #11
 8016e4a:	d801      	bhi.n	8016e50 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8016e4c:	230c      	movs	r3, #12
 8016e4e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d105      	bne.n	8016e62 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8016e56:	68bb      	ldr	r3, [r7, #8]
 8016e58:	2b0b      	cmp	r3, #11
 8016e5a:	d008      	beq.n	8016e6e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016e5c:	68bb      	ldr	r3, [r7, #8]
 8016e5e:	2b0c      	cmp	r3, #12
 8016e60:	d005      	beq.n	8016e6e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	2b01      	cmp	r3, #1
 8016e66:	d105      	bne.n	8016e74 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016e68:	68bb      	ldr	r3, [r7, #8]
 8016e6a:	2b0c      	cmp	r3, #12
 8016e6c:	d102      	bne.n	8016e74 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8016e6e:	2301      	movs	r3, #1
 8016e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016e74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016e78:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8016e7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016e7e:	2a00      	cmp	r2, #0
 8016e80:	d001      	beq.n	8016e86 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8016e82:	2210      	movs	r2, #16
 8016e84:	e000      	b.n	8016e88 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8016e86:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016e88:	4413      	add	r3, r2
 8016e8a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8016e8c:	68bb      	ldr	r3, [r7, #8]
 8016e8e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8016e90:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8016e92:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016e96:	2a00      	cmp	r2, #0
 8016e98:	d001      	beq.n	8016e9e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	e000      	b.n	8016ea0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8016e9e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8016ea0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016ea2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8016ea4:	68bb      	ldr	r3, [r7, #8]
 8016ea6:	2b06      	cmp	r3, #6
 8016ea8:	d803      	bhi.n	8016eb2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8016eaa:	68bb      	ldr	r3, [r7, #8]
 8016eac:	009b      	lsls	r3, r3, #2
 8016eae:	623b      	str	r3, [r7, #32]
 8016eb0:	e00e      	b.n	8016ed0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8016eb2:	69fb      	ldr	r3, [r7, #28]
 8016eb4:	3308      	adds	r3, #8
 8016eb6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8016eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d004      	beq.n	8016eca <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8016ec0:	68bb      	ldr	r3, [r7, #8]
 8016ec2:	3b02      	subs	r3, #2
 8016ec4:	009b      	lsls	r3, r3, #2
 8016ec6:	623b      	str	r3, [r7, #32]
 8016ec8:	e002      	b.n	8016ed0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	009b      	lsls	r3, r3, #2
 8016ece:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8016ed0:	69fb      	ldr	r3, [r7, #28]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	da01      	bge.n	8016eda <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8016eda:	69fa      	ldr	r2, [r7, #28]
 8016edc:	6a3b      	ldr	r3, [r7, #32]
 8016ede:	4413      	add	r3, r2
 8016ee0:	1e5a      	subs	r2, r3, #1
 8016ee2:	6a3b      	ldr	r3, [r7, #32]
 8016ee4:	fb92 f3f3 	sdiv	r3, r2, r3
 8016ee8:	697a      	ldr	r2, [r7, #20]
 8016eea:	fb02 f203 	mul.w	r2, r2, r3
 8016eee:	88bb      	ldrh	r3, [r7, #4]
 8016ef0:	4413      	add	r3, r2
    int32_t intermediate =
 8016ef2:	330c      	adds	r3, #12
 8016ef4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8016ef6:	68bb      	ldr	r3, [r7, #8]
 8016ef8:	2b06      	cmp	r3, #6
 8016efa:	d802      	bhi.n	8016f02 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8016efc:	69bb      	ldr	r3, [r7, #24]
 8016efe:	3302      	adds	r3, #2
 8016f00:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8016f02:	69bb      	ldr	r3, [r7, #24]
 8016f04:	009b      	lsls	r3, r3, #2
 8016f06:	1c5a      	adds	r2, r3, #1
 8016f08:	68bb      	ldr	r3, [r7, #8]
 8016f0a:	3b02      	subs	r3, #2
 8016f0c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8016f10:	4618      	mov	r0, r3
 8016f12:	372c      	adds	r7, #44	; 0x2c
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bc80      	pop	{r7}
 8016f18:	4770      	bx	lr
	...

08016f1c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b08a      	sub	sp, #40	; 0x28
 8016f20:	af04      	add	r7, sp, #16
 8016f22:	60b9      	str	r1, [r7, #8]
 8016f24:	607a      	str	r2, [r7, #4]
 8016f26:	461a      	mov	r2, r3
 8016f28:	4603      	mov	r3, r0
 8016f2a:	73fb      	strb	r3, [r7, #15]
 8016f2c:	4613      	mov	r3, r2
 8016f2e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8016f30:	2300      	movs	r3, #0
 8016f32:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8016f34:	2301      	movs	r3, #1
 8016f36:	613b      	str	r3, [r7, #16]

    switch( modem )
 8016f38:	7bfb      	ldrb	r3, [r7, #15]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d002      	beq.n	8016f44 <RadioTimeOnAir+0x28>
 8016f3e:	2b01      	cmp	r3, #1
 8016f40:	d017      	beq.n	8016f72 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8016f42:	e035      	b.n	8016fb0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8016f44:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8016f48:	8c3a      	ldrh	r2, [r7, #32]
 8016f4a:	7bb9      	ldrb	r1, [r7, #14]
 8016f4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016f50:	9301      	str	r3, [sp, #4]
 8016f52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016f56:	9300      	str	r3, [sp, #0]
 8016f58:	4603      	mov	r3, r0
 8016f5a:	6878      	ldr	r0, [r7, #4]
 8016f5c:	f7ff ff32 	bl	8016dc4 <RadioGetGfskTimeOnAirNumerator>
 8016f60:	4603      	mov	r3, r0
 8016f62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016f66:	fb02 f303 	mul.w	r3, r2, r3
 8016f6a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	613b      	str	r3, [r7, #16]
        break;
 8016f70:	e01e      	b.n	8016fb0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8016f72:	8c39      	ldrh	r1, [r7, #32]
 8016f74:	7bba      	ldrb	r2, [r7, #14]
 8016f76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016f7a:	9302      	str	r3, [sp, #8]
 8016f7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016f80:	9301      	str	r3, [sp, #4]
 8016f82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016f86:	9300      	str	r3, [sp, #0]
 8016f88:	460b      	mov	r3, r1
 8016f8a:	6879      	ldr	r1, [r7, #4]
 8016f8c:	68b8      	ldr	r0, [r7, #8]
 8016f8e:	f7ff ff43 	bl	8016e18 <RadioGetLoRaTimeOnAirNumerator>
 8016f92:	4603      	mov	r3, r0
 8016f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016f98:	fb02 f303 	mul.w	r3, r2, r3
 8016f9c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8016f9e:	4a0a      	ldr	r2, [pc, #40]	; (8016fc8 <RadioTimeOnAir+0xac>)
 8016fa0:	68bb      	ldr	r3, [r7, #8]
 8016fa2:	4413      	add	r3, r2
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f7ff feb6 	bl	8016d18 <RadioGetLoRaBandwidthInHz>
 8016fac:	6138      	str	r0, [r7, #16]
        break;
 8016fae:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8016fb0:	697a      	ldr	r2, [r7, #20]
 8016fb2:	693b      	ldr	r3, [r7, #16]
 8016fb4:	4413      	add	r3, r2
 8016fb6:	1e5a      	subs	r2, r3, #1
 8016fb8:	693b      	ldr	r3, [r7, #16]
 8016fba:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	3718      	adds	r7, #24
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	bd80      	pop	{r7, pc}
 8016fc6:	bf00      	nop
 8016fc8:	0801b8cc 	.word	0x0801b8cc

08016fcc <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b084      	sub	sp, #16
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	6078      	str	r0, [r7, #4]
 8016fd4:	460b      	mov	r3, r1
 8016fd6:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8016fd8:	2300      	movs	r3, #0
 8016fda:	2200      	movs	r2, #0
 8016fdc:	f240 2101 	movw	r1, #513	; 0x201
 8016fe0:	f240 2001 	movw	r0, #513	; 0x201
 8016fe4:	f001 fc78 	bl	80188d8 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE );
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 8016fe8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016fec:	4871      	ldr	r0, [pc, #452]	; (80171b4 <RadioSend+0x1e8>)
 8016fee:	f7ff fa07 	bl	8016400 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8016ff2:	4b71      	ldr	r3, [pc, #452]	; (80171b8 <RadioSend+0x1ec>)
 8016ff4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016ff8:	2101      	movs	r1, #1
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f002 f89e 	bl	801913c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8017000:	4b6d      	ldr	r3, [pc, #436]	; (80171b8 <RadioSend+0x1ec>)
 8017002:	781b      	ldrb	r3, [r3, #0]
 8017004:	2b01      	cmp	r3, #1
 8017006:	d112      	bne.n	801702e <RadioSend+0x62>
 8017008:	4b6b      	ldr	r3, [pc, #428]	; (80171b8 <RadioSend+0x1ec>)
 801700a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801700e:	2b06      	cmp	r3, #6
 8017010:	d10d      	bne.n	801702e <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8017012:	f640 0089 	movw	r0, #2185	; 0x889
 8017016:	f001 ffb1 	bl	8018f7c <SUBGRF_ReadRegister>
 801701a:	4603      	mov	r3, r0
 801701c:	f023 0304 	bic.w	r3, r3, #4
 8017020:	b2db      	uxtb	r3, r3
 8017022:	4619      	mov	r1, r3
 8017024:	f640 0089 	movw	r0, #2185	; 0x889
 8017028:	f001 ff94 	bl	8018f54 <SUBGRF_WriteRegister>
 801702c:	e00c      	b.n	8017048 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801702e:	f640 0089 	movw	r0, #2185	; 0x889
 8017032:	f001 ffa3 	bl	8018f7c <SUBGRF_ReadRegister>
 8017036:	4603      	mov	r3, r0
 8017038:	f043 0304 	orr.w	r3, r3, #4
 801703c:	b2db      	uxtb	r3, r3
 801703e:	4619      	mov	r1, r3
 8017040:	f640 0089 	movw	r0, #2185	; 0x889
 8017044:	f001 ff86 	bl	8018f54 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8017048:	4b5b      	ldr	r3, [pc, #364]	; (80171b8 <RadioSend+0x1ec>)
 801704a:	781b      	ldrb	r3, [r3, #0]
 801704c:	2b03      	cmp	r3, #3
 801704e:	f200 80a4 	bhi.w	801719a <RadioSend+0x1ce>
 8017052:	a201      	add	r2, pc, #4	; (adr r2, 8017058 <RadioSend+0x8c>)
 8017054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017058:	08017083 	.word	0x08017083
 801705c:	08017069 	.word	0x08017069
 8017060:	080170e3 	.word	0x080170e3
 8017064:	08017103 	.word	0x08017103
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017068:	4a53      	ldr	r2, [pc, #332]	; (80171b8 <RadioSend+0x1ec>)
 801706a:	78fb      	ldrb	r3, [r7, #3]
 801706c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801706e:	4853      	ldr	r0, [pc, #332]	; (80171bc <RadioSend+0x1f0>)
 8017070:	f001 fe28 	bl	8018cc4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017074:	78fb      	ldrb	r3, [r7, #3]
 8017076:	2200      	movs	r2, #0
 8017078:	4619      	mov	r1, r3
 801707a:	6878      	ldr	r0, [r7, #4]
 801707c:	f001 f94e 	bl	801831c <SUBGRF_SendPayload>
            break;
 8017080:	e08c      	b.n	801719c <RadioSend+0x1d0>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017082:	f002 fa46 	bl	8019512 <RFW_Is_Init>
 8017086:	4603      	mov	r3, r0
 8017088:	2b01      	cmp	r3, #1
 801708a:	d11d      	bne.n	80170c8 <RadioSend+0xfc>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801708c:	f107 020d 	add.w	r2, r7, #13
 8017090:	78fb      	ldrb	r3, [r7, #3]
 8017092:	4619      	mov	r1, r3
 8017094:	6878      	ldr	r0, [r7, #4]
 8017096:	f002 fa54 	bl	8019542 <RFW_TransmitInit>
 801709a:	4603      	mov	r3, r0
 801709c:	2b00      	cmp	r3, #0
 801709e:	d10c      	bne.n	80170ba <RadioSend+0xee>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80170a0:	7b7a      	ldrb	r2, [r7, #13]
 80170a2:	4b45      	ldr	r3, [pc, #276]	; (80171b8 <RadioSend+0x1ec>)
 80170a4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80170a6:	4845      	ldr	r0, [pc, #276]	; (80171bc <RadioSend+0x1f0>)
 80170a8:	f001 fe0c 	bl	8018cc4 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80170ac:	7b7b      	ldrb	r3, [r7, #13]
 80170ae:	2200      	movs	r2, #0
 80170b0:	4619      	mov	r1, r3
 80170b2:	6878      	ldr	r0, [r7, #4]
 80170b4:	f001 f932 	bl	801831c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80170b8:	e070      	b.n	801719c <RadioSend+0x1d0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80170ba:	4b41      	ldr	r3, [pc, #260]	; (80171c0 <RadioSend+0x1f4>)
 80170bc:	2201      	movs	r2, #1
 80170be:	2100      	movs	r1, #0
 80170c0:	2002      	movs	r0, #2
 80170c2:	f003 fa25 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
 80170c6:	e072      	b.n	80171ae <RadioSend+0x1e2>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80170c8:	4a3b      	ldr	r2, [pc, #236]	; (80171b8 <RadioSend+0x1ec>)
 80170ca:	78fb      	ldrb	r3, [r7, #3]
 80170cc:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80170ce:	483b      	ldr	r0, [pc, #236]	; (80171bc <RadioSend+0x1f0>)
 80170d0:	f001 fdf8 	bl	8018cc4 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80170d4:	78fb      	ldrb	r3, [r7, #3]
 80170d6:	2200      	movs	r2, #0
 80170d8:	4619      	mov	r1, r3
 80170da:	6878      	ldr	r0, [r7, #4]
 80170dc:	f001 f91e 	bl	801831c <SUBGRF_SendPayload>
            break;
 80170e0:	e05c      	b.n	801719c <RadioSend+0x1d0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80170e2:	4b35      	ldr	r3, [pc, #212]	; (80171b8 <RadioSend+0x1ec>)
 80170e4:	2202      	movs	r2, #2
 80170e6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80170e8:	4a33      	ldr	r2, [pc, #204]	; (80171b8 <RadioSend+0x1ec>)
 80170ea:	78fb      	ldrb	r3, [r7, #3]
 80170ec:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80170ee:	4833      	ldr	r0, [pc, #204]	; (80171bc <RadioSend+0x1f0>)
 80170f0:	f001 fde8 	bl	8018cc4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80170f4:	78fb      	ldrb	r3, [r7, #3]
 80170f6:	2200      	movs	r2, #0
 80170f8:	4619      	mov	r1, r3
 80170fa:	6878      	ldr	r0, [r7, #4]
 80170fc:	f001 f90e 	bl	801831c <SUBGRF_SendPayload>
            break;
 8017100:	e04c      	b.n	801719c <RadioSend+0x1d0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017102:	78fb      	ldrb	r3, [r7, #3]
 8017104:	461a      	mov	r2, r3
 8017106:	6879      	ldr	r1, [r7, #4]
 8017108:	482e      	ldr	r0, [pc, #184]	; (80171c4 <RadioSend+0x1f8>)
 801710a:	f000 fc8e 	bl	8017a2a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801710e:	4b2a      	ldr	r3, [pc, #168]	; (80171b8 <RadioSend+0x1ec>)
 8017110:	2202      	movs	r2, #2
 8017112:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017114:	78fb      	ldrb	r3, [r7, #3]
 8017116:	3301      	adds	r3, #1
 8017118:	b2da      	uxtb	r2, r3
 801711a:	4b27      	ldr	r3, [pc, #156]	; (80171b8 <RadioSend+0x1ec>)
 801711c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801711e:	4827      	ldr	r0, [pc, #156]	; (80171bc <RadioSend+0x1f0>)
 8017120:	f001 fdd0 	bl	8018cc4 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8017124:	2100      	movs	r1, #0
 8017126:	20f1      	movs	r0, #241	; 0xf1
 8017128:	f000 f94f 	bl	80173ca <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 801712c:	2100      	movs	r1, #0
 801712e:	20f0      	movs	r0, #240	; 0xf0
 8017130:	f000 f94b 	bl	80173ca <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017134:	4b20      	ldr	r3, [pc, #128]	; (80171b8 <RadioSend+0x1ec>)
 8017136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017138:	2b64      	cmp	r3, #100	; 0x64
 801713a:	d108      	bne.n	801714e <RadioSend+0x182>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 801713c:	2170      	movs	r1, #112	; 0x70
 801713e:	20f3      	movs	r0, #243	; 0xf3
 8017140:	f000 f943 	bl	80173ca <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8017144:	211d      	movs	r1, #29
 8017146:	20f2      	movs	r0, #242	; 0xf2
 8017148:	f000 f93f 	bl	80173ca <RadioWrite>
 801714c:	e007      	b.n	801715e <RadioSend+0x192>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 801714e:	21e1      	movs	r1, #225	; 0xe1
 8017150:	20f3      	movs	r0, #243	; 0xf3
 8017152:	f000 f93a 	bl	80173ca <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8017156:	2104      	movs	r1, #4
 8017158:	20f2      	movs	r0, #242	; 0xf2
 801715a:	f000 f936 	bl	80173ca <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801715e:	78fb      	ldrb	r3, [r7, #3]
 8017160:	b29b      	uxth	r3, r3
 8017162:	00db      	lsls	r3, r3, #3
 8017164:	b29b      	uxth	r3, r3
 8017166:	3302      	adds	r3, #2
 8017168:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801716a:	89fb      	ldrh	r3, [r7, #14]
 801716c:	0a1b      	lsrs	r3, r3, #8
 801716e:	b29b      	uxth	r3, r3
 8017170:	b2db      	uxtb	r3, r3
 8017172:	4619      	mov	r1, r3
 8017174:	20f4      	movs	r0, #244	; 0xf4
 8017176:	f000 f928 	bl	80173ca <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 801717a:	89fb      	ldrh	r3, [r7, #14]
 801717c:	b2db      	uxtb	r3, r3
 801717e:	4619      	mov	r1, r3
 8017180:	20f5      	movs	r0, #245	; 0xf5
 8017182:	f000 f922 	bl	80173ca <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8017186:	78fb      	ldrb	r3, [r7, #3]
 8017188:	3301      	adds	r3, #1
 801718a:	b2db      	uxtb	r3, r3
 801718c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017190:	4619      	mov	r1, r3
 8017192:	480c      	ldr	r0, [pc, #48]	; (80171c4 <RadioSend+0x1f8>)
 8017194:	f001 f8c2 	bl	801831c <SUBGRF_SendPayload>
            break;
 8017198:	e000      	b.n	801719c <RadioSend+0x1d0>
        }
        default:
            break;
 801719a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801719c:	4b06      	ldr	r3, [pc, #24]	; (80171b8 <RadioSend+0x1ec>)
 801719e:	685b      	ldr	r3, [r3, #4]
 80171a0:	4619      	mov	r1, r3
 80171a2:	4809      	ldr	r0, [pc, #36]	; (80171c8 <RadioSend+0x1fc>)
 80171a4:	f003 f81a 	bl	801a1dc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80171a8:	4807      	ldr	r0, [pc, #28]	; (80171c8 <RadioSend+0x1fc>)
 80171aa:	f002 ff39 	bl	801a020 <UTIL_TIMER_Start>
}
 80171ae:	3710      	adds	r7, #16
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bd80      	pop	{r7, pc}
 80171b4:	48000400 	.word	0x48000400
 80171b8:	200017b0 	.word	0x200017b0
 80171bc:	200017be 	.word	0x200017be
 80171c0:	0801b2ec 	.word	0x0801b2ec
 80171c4:	20000dd0 	.word	0x20000dd0
 80171c8:	20001808 	.word	0x20001808

080171cc <RadioSleep>:

static void RadioSleep( void )
{
 80171cc:	b580      	push	{r7, lr}
 80171ce:	b082      	sub	sp, #8
 80171d0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80171d2:	2300      	movs	r3, #0
 80171d4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80171d6:	793b      	ldrb	r3, [r7, #4]
 80171d8:	f043 0304 	orr.w	r3, r3, #4
 80171dc:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80171de:	7938      	ldrb	r0, [r7, #4]
 80171e0:	f001 f978 	bl	80184d4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80171e4:	2002      	movs	r0, #2
 80171e6:	f7ea fd2c 	bl	8001c42 <HAL_Delay>
}
 80171ea:	bf00      	nop
 80171ec:	3708      	adds	r7, #8
 80171ee:	46bd      	mov	sp, r7
 80171f0:	bd80      	pop	{r7, pc}

080171f2 <RadioStandby>:

static void RadioStandby( void )
{
 80171f2:	b580      	push	{r7, lr}
 80171f4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80171f6:	2000      	movs	r0, #0
 80171f8:	f001 f99e 	bl	8018538 <SUBGRF_SetStandby>
}
 80171fc:	bf00      	nop
 80171fe:	bd80      	pop	{r7, pc}

08017200 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8017208:	f002 f983 	bl	8019512 <RFW_Is_Init>
 801720c:	4603      	mov	r3, r0
 801720e:	2b01      	cmp	r3, #1
 8017210:	d102      	bne.n	8017218 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8017212:	f002 f9a6 	bl	8019562 <RFW_ReceiveInit>
 8017216:	e007      	b.n	8017228 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017218:	2300      	movs	r3, #0
 801721a:	2200      	movs	r2, #0
 801721c:	f240 2162 	movw	r1, #610	; 0x262
 8017220:	f240 2062 	movw	r0, #610	; 0x262
 8017224:	f001 fb58 	bl	80188d8 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d006      	beq.n	801723c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801722e:	6879      	ldr	r1, [r7, #4]
 8017230:	4812      	ldr	r0, [pc, #72]	; (801727c <RadioRx+0x7c>)
 8017232:	f002 ffd3 	bl	801a1dc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017236:	4811      	ldr	r0, [pc, #68]	; (801727c <RadioRx+0x7c>)
 8017238:	f002 fef2 	bl	801a020 <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 801723c:	2101      	movs	r1, #1
 801723e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017242:	f7ff f8dd 	bl	8016400 <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017246:	4b0e      	ldr	r3, [pc, #56]	; (8017280 <RadioRx+0x80>)
 8017248:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801724c:	2100      	movs	r1, #0
 801724e:	4618      	mov	r0, r3
 8017250:	f001 ff74 	bl	801913c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8017254:	4b0a      	ldr	r3, [pc, #40]	; (8017280 <RadioRx+0x80>)
 8017256:	785b      	ldrb	r3, [r3, #1]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d004      	beq.n	8017266 <RadioRx+0x66>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801725c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017260:	f001 f9a6 	bl	80185b0 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017264:	e005      	b.n	8017272 <RadioRx+0x72>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8017266:	4b06      	ldr	r3, [pc, #24]	; (8017280 <RadioRx+0x80>)
 8017268:	689b      	ldr	r3, [r3, #8]
 801726a:	019b      	lsls	r3, r3, #6
 801726c:	4618      	mov	r0, r3
 801726e:	f001 f99f 	bl	80185b0 <SUBGRF_SetRx>
}
 8017272:	bf00      	nop
 8017274:	3708      	adds	r7, #8
 8017276:	46bd      	mov	sp, r7
 8017278:	bd80      	pop	{r7, pc}
 801727a:	bf00      	nop
 801727c:	20001820 	.word	0x20001820
 8017280:	200017b0 	.word	0x200017b0

08017284 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b082      	sub	sp, #8
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 801728c:	f002 f941 	bl	8019512 <RFW_Is_Init>
 8017290:	4603      	mov	r3, r0
 8017292:	2b01      	cmp	r3, #1
 8017294:	d102      	bne.n	801729c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8017296:	f002 f964 	bl	8019562 <RFW_ReceiveInit>
 801729a:	e007      	b.n	80172ac <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801729c:	2300      	movs	r3, #0
 801729e:	2200      	movs	r2, #0
 80172a0:	f240 2162 	movw	r1, #610	; 0x262
 80172a4:	f240 2062 	movw	r0, #610	; 0x262
 80172a8:	f001 fb16 	bl	80188d8 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d006      	beq.n	80172c0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80172b2:	6879      	ldr	r1, [r7, #4]
 80172b4:	480f      	ldr	r0, [pc, #60]	; (80172f4 <RadioRxBoosted+0x70>)
 80172b6:	f002 ff91 	bl	801a1dc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80172ba:	480e      	ldr	r0, [pc, #56]	; (80172f4 <RadioRxBoosted+0x70>)
 80172bc:	f002 feb0 	bl	801a020 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80172c0:	4b0d      	ldr	r3, [pc, #52]	; (80172f8 <RadioRxBoosted+0x74>)
 80172c2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80172c6:	2100      	movs	r1, #0
 80172c8:	4618      	mov	r0, r3
 80172ca:	f001 ff37 	bl	801913c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80172ce:	4b0a      	ldr	r3, [pc, #40]	; (80172f8 <RadioRxBoosted+0x74>)
 80172d0:	785b      	ldrb	r3, [r3, #1]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d004      	beq.n	80172e0 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80172d6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80172da:	f001 f989 	bl	80185f0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80172de:	e005      	b.n	80172ec <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80172e0:	4b05      	ldr	r3, [pc, #20]	; (80172f8 <RadioRxBoosted+0x74>)
 80172e2:	689b      	ldr	r3, [r3, #8]
 80172e4:	019b      	lsls	r3, r3, #6
 80172e6:	4618      	mov	r0, r3
 80172e8:	f001 f982 	bl	80185f0 <SUBGRF_SetRxBoosted>
}
 80172ec:	bf00      	nop
 80172ee:	3708      	adds	r7, #8
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}
 80172f4:	20001820 	.word	0x20001820
 80172f8:	200017b0 	.word	0x200017b0

080172fc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b082      	sub	sp, #8
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
 8017304:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017306:	4b07      	ldr	r3, [pc, #28]	; (8017324 <RadioSetRxDutyCycle+0x28>)
 8017308:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801730c:	2100      	movs	r1, #0
 801730e:	4618      	mov	r0, r3
 8017310:	f001 ff14 	bl	801913c <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017314:	6839      	ldr	r1, [r7, #0]
 8017316:	6878      	ldr	r0, [r7, #4]
 8017318:	f001 f98e 	bl	8018638 <SUBGRF_SetRxDutyCycle>
}
 801731c:	bf00      	nop
 801731e:	3708      	adds	r7, #8
 8017320:	46bd      	mov	sp, r7
 8017322:	bd80      	pop	{r7, pc}
 8017324:	200017b0 	.word	0x200017b0

08017328 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017328:	b580      	push	{r7, lr}
 801732a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801732c:	4b09      	ldr	r3, [pc, #36]	; (8017354 <RadioStartCad+0x2c>)
 801732e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017332:	2100      	movs	r1, #0
 8017334:	4618      	mov	r0, r3
 8017336:	f001 ff01 	bl	801913c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801733a:	2300      	movs	r3, #0
 801733c:	2200      	movs	r2, #0
 801733e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8017342:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8017346:	f001 fac7 	bl	80188d8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801734a:	f001 f9a1 	bl	8018690 <SUBGRF_SetCad>
}
 801734e:	bf00      	nop
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	200017b0 	.word	0x200017b0

08017358 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b084      	sub	sp, #16
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
 8017360:	460b      	mov	r3, r1
 8017362:	70fb      	strb	r3, [r7, #3]
 8017364:	4613      	mov	r3, r2
 8017366:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8017368:	883b      	ldrh	r3, [r7, #0]
 801736a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801736e:	fb02 f303 	mul.w	r3, r2, r3
 8017372:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f001 fb0b 	bl	8018990 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801737a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801737e:	4618      	mov	r0, r3
 8017380:	f001 ff04 	bl	801918c <SUBGRF_SetRfTxPower>
 8017384:	4603      	mov	r3, r0
 8017386:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8017388:	7afb      	ldrb	r3, [r7, #11]
 801738a:	2101      	movs	r1, #1
 801738c:	4618      	mov	r0, r3
 801738e:	f001 fed5 	bl	801913c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017392:	f001 f98b 	bl	80186ac <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017396:	68f9      	ldr	r1, [r7, #12]
 8017398:	4804      	ldr	r0, [pc, #16]	; (80173ac <RadioSetTxContinuousWave+0x54>)
 801739a:	f002 ff1f 	bl	801a1dc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801739e:	4803      	ldr	r0, [pc, #12]	; (80173ac <RadioSetTxContinuousWave+0x54>)
 80173a0:	f002 fe3e 	bl	801a020 <UTIL_TIMER_Start>
}
 80173a4:	bf00      	nop
 80173a6:	3710      	adds	r7, #16
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}
 80173ac:	20001808 	.word	0x20001808

080173b0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	4603      	mov	r3, r0
 80173b8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80173ba:	f001 fd38 	bl	8018e2e <SUBGRF_GetRssiInst>
 80173be:	4603      	mov	r3, r0
 80173c0:	b21b      	sxth	r3, r3
}
 80173c2:	4618      	mov	r0, r3
 80173c4:	3708      	adds	r7, #8
 80173c6:	46bd      	mov	sp, r7
 80173c8:	bd80      	pop	{r7, pc}

080173ca <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80173ca:	b580      	push	{r7, lr}
 80173cc:	b082      	sub	sp, #8
 80173ce:	af00      	add	r7, sp, #0
 80173d0:	4603      	mov	r3, r0
 80173d2:	460a      	mov	r2, r1
 80173d4:	80fb      	strh	r3, [r7, #6]
 80173d6:	4613      	mov	r3, r2
 80173d8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 80173da:	797a      	ldrb	r2, [r7, #5]
 80173dc:	88fb      	ldrh	r3, [r7, #6]
 80173de:	4611      	mov	r1, r2
 80173e0:	4618      	mov	r0, r3
 80173e2:	f001 fdb7 	bl	8018f54 <SUBGRF_WriteRegister>
}
 80173e6:	bf00      	nop
 80173e8:	3708      	adds	r7, #8
 80173ea:	46bd      	mov	sp, r7
 80173ec:	bd80      	pop	{r7, pc}

080173ee <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80173ee:	b580      	push	{r7, lr}
 80173f0:	b082      	sub	sp, #8
 80173f2:	af00      	add	r7, sp, #0
 80173f4:	4603      	mov	r3, r0
 80173f6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 80173f8:	88fb      	ldrh	r3, [r7, #6]
 80173fa:	4618      	mov	r0, r3
 80173fc:	f001 fdbe 	bl	8018f7c <SUBGRF_ReadRegister>
 8017400:	4603      	mov	r3, r0
}
 8017402:	4618      	mov	r0, r3
 8017404:	3708      	adds	r7, #8
 8017406:	46bd      	mov	sp, r7
 8017408:	bd80      	pop	{r7, pc}

0801740a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801740a:	b580      	push	{r7, lr}
 801740c:	b082      	sub	sp, #8
 801740e:	af00      	add	r7, sp, #0
 8017410:	4603      	mov	r3, r0
 8017412:	6039      	str	r1, [r7, #0]
 8017414:	80fb      	strh	r3, [r7, #6]
 8017416:	4613      	mov	r3, r2
 8017418:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801741a:	797b      	ldrb	r3, [r7, #5]
 801741c:	b29a      	uxth	r2, r3
 801741e:	88fb      	ldrh	r3, [r7, #6]
 8017420:	6839      	ldr	r1, [r7, #0]
 8017422:	4618      	mov	r0, r3
 8017424:	f001 fdbe 	bl	8018fa4 <SUBGRF_WriteRegisters>
}
 8017428:	bf00      	nop
 801742a:	3708      	adds	r7, #8
 801742c:	46bd      	mov	sp, r7
 801742e:	bd80      	pop	{r7, pc}

08017430 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b082      	sub	sp, #8
 8017434:	af00      	add	r7, sp, #0
 8017436:	4603      	mov	r3, r0
 8017438:	6039      	str	r1, [r7, #0]
 801743a:	80fb      	strh	r3, [r7, #6]
 801743c:	4613      	mov	r3, r2
 801743e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017440:	797b      	ldrb	r3, [r7, #5]
 8017442:	b29a      	uxth	r2, r3
 8017444:	88fb      	ldrh	r3, [r7, #6]
 8017446:	6839      	ldr	r1, [r7, #0]
 8017448:	4618      	mov	r0, r3
 801744a:	f001 fdcd 	bl	8018fe8 <SUBGRF_ReadRegisters>
}
 801744e:	bf00      	nop
 8017450:	3708      	adds	r7, #8
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}
	...

08017458 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b082      	sub	sp, #8
 801745c:	af00      	add	r7, sp, #0
 801745e:	4603      	mov	r3, r0
 8017460:	460a      	mov	r2, r1
 8017462:	71fb      	strb	r3, [r7, #7]
 8017464:	4613      	mov	r3, r2
 8017466:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017468:	79fb      	ldrb	r3, [r7, #7]
 801746a:	2b01      	cmp	r3, #1
 801746c:	d10a      	bne.n	8017484 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801746e:	4a0e      	ldr	r2, [pc, #56]	; (80174a8 <RadioSetMaxPayloadLength+0x50>)
 8017470:	79bb      	ldrb	r3, [r7, #6]
 8017472:	7013      	strb	r3, [r2, #0]
 8017474:	4b0c      	ldr	r3, [pc, #48]	; (80174a8 <RadioSetMaxPayloadLength+0x50>)
 8017476:	781a      	ldrb	r2, [r3, #0]
 8017478:	4b0c      	ldr	r3, [pc, #48]	; (80174ac <RadioSetMaxPayloadLength+0x54>)
 801747a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801747c:	480c      	ldr	r0, [pc, #48]	; (80174b0 <RadioSetMaxPayloadLength+0x58>)
 801747e:	f001 fc21 	bl	8018cc4 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8017482:	e00d      	b.n	80174a0 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017484:	4b09      	ldr	r3, [pc, #36]	; (80174ac <RadioSetMaxPayloadLength+0x54>)
 8017486:	7d5b      	ldrb	r3, [r3, #21]
 8017488:	2b01      	cmp	r3, #1
 801748a:	d109      	bne.n	80174a0 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801748c:	4a06      	ldr	r2, [pc, #24]	; (80174a8 <RadioSetMaxPayloadLength+0x50>)
 801748e:	79bb      	ldrb	r3, [r7, #6]
 8017490:	7013      	strb	r3, [r2, #0]
 8017492:	4b05      	ldr	r3, [pc, #20]	; (80174a8 <RadioSetMaxPayloadLength+0x50>)
 8017494:	781a      	ldrb	r2, [r3, #0]
 8017496:	4b05      	ldr	r3, [pc, #20]	; (80174ac <RadioSetMaxPayloadLength+0x54>)
 8017498:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801749a:	4805      	ldr	r0, [pc, #20]	; (80174b0 <RadioSetMaxPayloadLength+0x58>)
 801749c:	f001 fc12 	bl	8018cc4 <SUBGRF_SetPacketParams>
}
 80174a0:	bf00      	nop
 80174a2:	3708      	adds	r7, #8
 80174a4:	46bd      	mov	sp, r7
 80174a6:	bd80      	pop	{r7, pc}
 80174a8:	20000120 	.word	0x20000120
 80174ac:	200017b0 	.word	0x200017b0
 80174b0:	200017be 	.word	0x200017be

080174b4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b082      	sub	sp, #8
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	4603      	mov	r3, r0
 80174bc:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80174be:	4a13      	ldr	r2, [pc, #76]	; (801750c <RadioSetPublicNetwork+0x58>)
 80174c0:	79fb      	ldrb	r3, [r7, #7]
 80174c2:	7313      	strb	r3, [r2, #12]
 80174c4:	4b11      	ldr	r3, [pc, #68]	; (801750c <RadioSetPublicNetwork+0x58>)
 80174c6:	7b1a      	ldrb	r2, [r3, #12]
 80174c8:	4b10      	ldr	r3, [pc, #64]	; (801750c <RadioSetPublicNetwork+0x58>)
 80174ca:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80174cc:	2001      	movs	r0, #1
 80174ce:	f7ff f81f 	bl	8016510 <RadioSetModem>
    if( enable == true )
 80174d2:	79fb      	ldrb	r3, [r7, #7]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d00a      	beq.n	80174ee <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80174d8:	2134      	movs	r1, #52	; 0x34
 80174da:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80174de:	f001 fd39 	bl	8018f54 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80174e2:	2144      	movs	r1, #68	; 0x44
 80174e4:	f240 7041 	movw	r0, #1857	; 0x741
 80174e8:	f001 fd34 	bl	8018f54 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80174ec:	e009      	b.n	8017502 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80174ee:	2114      	movs	r1, #20
 80174f0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80174f4:	f001 fd2e 	bl	8018f54 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80174f8:	2124      	movs	r1, #36	; 0x24
 80174fa:	f240 7041 	movw	r0, #1857	; 0x741
 80174fe:	f001 fd29 	bl	8018f54 <SUBGRF_WriteRegister>
}
 8017502:	bf00      	nop
 8017504:	3708      	adds	r7, #8
 8017506:	46bd      	mov	sp, r7
 8017508:	bd80      	pop	{r7, pc}
 801750a:	bf00      	nop
 801750c:	200017b0 	.word	0x200017b0

08017510 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017510:	b580      	push	{r7, lr}
 8017512:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017514:	f001 fe6e 	bl	80191f4 <SUBGRF_GetRadioWakeUpTime>
 8017518:	4603      	mov	r3, r0
 801751a:	3303      	adds	r3, #3
}
 801751c:	4618      	mov	r0, r3
 801751e:	bd80      	pop	{r7, pc}

08017520 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b082      	sub	sp, #8
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017528:	f000 f80e 	bl	8017548 <RadioOnTxTimeoutProcess>
}
 801752c:	bf00      	nop
 801752e:	3708      	adds	r7, #8
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}

08017534 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b082      	sub	sp, #8
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801753c:	f000 f81e 	bl	801757c <RadioOnRxTimeoutProcess>
}
 8017540:	bf00      	nop
 8017542:	3708      	adds	r7, #8
 8017544:	46bd      	mov	sp, r7
 8017546:	bd80      	pop	{r7, pc}

08017548 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017548:	b580      	push	{r7, lr}
 801754a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 801754c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017550:	4808      	ldr	r0, [pc, #32]	; (8017574 <RadioOnTxTimeoutProcess+0x2c>)
 8017552:	f7fe ff62 	bl	801641a <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017556:	4b08      	ldr	r3, [pc, #32]	; (8017578 <RadioOnTxTimeoutProcess+0x30>)
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d008      	beq.n	8017570 <RadioOnTxTimeoutProcess+0x28>
 801755e:	4b06      	ldr	r3, [pc, #24]	; (8017578 <RadioOnTxTimeoutProcess+0x30>)
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	685b      	ldr	r3, [r3, #4]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d003      	beq.n	8017570 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8017568:	4b03      	ldr	r3, [pc, #12]	; (8017578 <RadioOnTxTimeoutProcess+0x30>)
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	685b      	ldr	r3, [r3, #4]
 801756e:	4798      	blx	r3
    }
}
 8017570:	bf00      	nop
 8017572:	bd80      	pop	{r7, pc}
 8017574:	48000400 	.word	0x48000400
 8017578:	20000ed0 	.word	0x20000ed0

0801757c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801757c:	b580      	push	{r7, lr}
 801757e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 8017580:	2101      	movs	r1, #1
 8017582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017586:	f7fe ff48 	bl	801641a <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801758a:	4b07      	ldr	r3, [pc, #28]	; (80175a8 <RadioOnRxTimeoutProcess+0x2c>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d008      	beq.n	80175a4 <RadioOnRxTimeoutProcess+0x28>
 8017592:	4b05      	ldr	r3, [pc, #20]	; (80175a8 <RadioOnRxTimeoutProcess+0x2c>)
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	68db      	ldr	r3, [r3, #12]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d003      	beq.n	80175a4 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 801759c:	4b02      	ldr	r3, [pc, #8]	; (80175a8 <RadioOnRxTimeoutProcess+0x2c>)
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	68db      	ldr	r3, [r3, #12]
 80175a2:	4798      	blx	r3
    }
}
 80175a4:	bf00      	nop
 80175a6:	bd80      	pop	{r7, pc}
 80175a8:	20000ed0 	.word	0x20000ed0

080175ac <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b082      	sub	sp, #8
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	4603      	mov	r3, r0
 80175b4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80175b6:	4a05      	ldr	r2, [pc, #20]	; (80175cc <RadioOnDioIrq+0x20>)
 80175b8:	88fb      	ldrh	r3, [r7, #6]
 80175ba:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80175be:	f000 f807 	bl	80175d0 <RadioIrqProcess>
}
 80175c2:	bf00      	nop
 80175c4:	3708      	adds	r7, #8
 80175c6:	46bd      	mov	sp, r7
 80175c8:	bd80      	pop	{r7, pc}
 80175ca:	bf00      	nop
 80175cc:	200017b0 	.word	0x200017b0

080175d0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80175d0:	b590      	push	{r4, r7, lr}
 80175d2:	b083      	sub	sp, #12
 80175d4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80175d6:	2300      	movs	r3, #0
 80175d8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80175da:	2300      	movs	r3, #0
 80175dc:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 80175de:	4bbf      	ldr	r3, [pc, #764]	; (80178dc <RadioIrqProcess+0x30c>)
 80175e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80175e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80175e8:	f000 8116 	beq.w	8017818 <RadioIrqProcess+0x248>
 80175ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80175f0:	f300 81cb 	bgt.w	801798a <RadioIrqProcess+0x3ba>
 80175f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80175f8:	f000 80fa 	beq.w	80177f0 <RadioIrqProcess+0x220>
 80175fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017600:	f300 81c3 	bgt.w	801798a <RadioIrqProcess+0x3ba>
 8017604:	2b80      	cmp	r3, #128	; 0x80
 8017606:	f000 80df 	beq.w	80177c8 <RadioIrqProcess+0x1f8>
 801760a:	2b80      	cmp	r3, #128	; 0x80
 801760c:	f300 81bd 	bgt.w	801798a <RadioIrqProcess+0x3ba>
 8017610:	2b20      	cmp	r3, #32
 8017612:	dc49      	bgt.n	80176a8 <RadioIrqProcess+0xd8>
 8017614:	2b00      	cmp	r3, #0
 8017616:	f340 81b8 	ble.w	801798a <RadioIrqProcess+0x3ba>
 801761a:	3b01      	subs	r3, #1
 801761c:	2b1f      	cmp	r3, #31
 801761e:	f200 81b4 	bhi.w	801798a <RadioIrqProcess+0x3ba>
 8017622:	a201      	add	r2, pc, #4	; (adr r2, 8017628 <RadioIrqProcess+0x58>)
 8017624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017628:	080176b1 	.word	0x080176b1
 801762c:	080176f5 	.word	0x080176f5
 8017630:	0801798b 	.word	0x0801798b
 8017634:	080178a5 	.word	0x080178a5
 8017638:	0801798b 	.word	0x0801798b
 801763c:	0801798b 	.word	0x0801798b
 8017640:	0801798b 	.word	0x0801798b
 8017644:	080178b3 	.word	0x080178b3
 8017648:	0801798b 	.word	0x0801798b
 801764c:	0801798b 	.word	0x0801798b
 8017650:	0801798b 	.word	0x0801798b
 8017654:	0801798b 	.word	0x0801798b
 8017658:	0801798b 	.word	0x0801798b
 801765c:	0801798b 	.word	0x0801798b
 8017660:	0801798b 	.word	0x0801798b
 8017664:	080178cf 	.word	0x080178cf
 8017668:	0801798b 	.word	0x0801798b
 801766c:	0801798b 	.word	0x0801798b
 8017670:	0801798b 	.word	0x0801798b
 8017674:	0801798b 	.word	0x0801798b
 8017678:	0801798b 	.word	0x0801798b
 801767c:	0801798b 	.word	0x0801798b
 8017680:	0801798b 	.word	0x0801798b
 8017684:	0801798b 	.word	0x0801798b
 8017688:	0801798b 	.word	0x0801798b
 801768c:	0801798b 	.word	0x0801798b
 8017690:	0801798b 	.word	0x0801798b
 8017694:	0801798b 	.word	0x0801798b
 8017698:	0801798b 	.word	0x0801798b
 801769c:	0801798b 	.word	0x0801798b
 80176a0:	0801798b 	.word	0x0801798b
 80176a4:	0801790d 	.word	0x0801790d
 80176a8:	2b40      	cmp	r3, #64	; 0x40
 80176aa:	f000 8150 	beq.w	801794e <RadioIrqProcess+0x37e>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80176ae:	e16c      	b.n	801798a <RadioIrqProcess+0x3ba>
        DBG_GPIO_RADIO_TX(RST);
 80176b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80176b4:	488a      	ldr	r0, [pc, #552]	; (80178e0 <RadioIrqProcess+0x310>)
 80176b6:	f7fe feb0 	bl	801641a <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 80176ba:	488a      	ldr	r0, [pc, #552]	; (80178e4 <RadioIrqProcess+0x314>)
 80176bc:	f002 fd1e 	bl	801a0fc <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80176c0:	2000      	movs	r0, #0
 80176c2:	f000 ff39 	bl	8018538 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 80176c6:	f001 ff2b 	bl	8019520 <RFW_Is_LongPacketModeEnabled>
 80176ca:	4603      	mov	r3, r0
 80176cc:	2b01      	cmp	r3, #1
 80176ce:	d101      	bne.n	80176d4 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 80176d0:	f001 ff4f 	bl	8019572 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80176d4:	4b84      	ldr	r3, [pc, #528]	; (80178e8 <RadioIrqProcess+0x318>)
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	f000 8158 	beq.w	801798e <RadioIrqProcess+0x3be>
 80176de:	4b82      	ldr	r3, [pc, #520]	; (80178e8 <RadioIrqProcess+0x318>)
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	f000 8152 	beq.w	801798e <RadioIrqProcess+0x3be>
            RadioEvents->TxDone( );
 80176ea:	4b7f      	ldr	r3, [pc, #508]	; (80178e8 <RadioIrqProcess+0x318>)
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	4798      	blx	r3
        break;
 80176f2:	e14c      	b.n	801798e <RadioIrqProcess+0x3be>
        DBG_GPIO_RADIO_RX(RST);
 80176f4:	2101      	movs	r1, #1
 80176f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80176fa:	f7fe fe8e 	bl	801641a <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 80176fe:	487b      	ldr	r0, [pc, #492]	; (80178ec <RadioIrqProcess+0x31c>)
 8017700:	f002 fcfc 	bl	801a0fc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017704:	4b75      	ldr	r3, [pc, #468]	; (80178dc <RadioIrqProcess+0x30c>)
 8017706:	785b      	ldrb	r3, [r3, #1]
 8017708:	f083 0301 	eor.w	r3, r3, #1
 801770c:	b2db      	uxtb	r3, r3
 801770e:	2b00      	cmp	r3, #0
 8017710:	d014      	beq.n	801773c <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8017712:	2000      	movs	r0, #0
 8017714:	f000 ff10 	bl	8018538 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8017718:	2100      	movs	r1, #0
 801771a:	f640 1002 	movw	r0, #2306	; 0x902
 801771e:	f001 fc19 	bl	8018f54 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8017722:	f640 1044 	movw	r0, #2372	; 0x944
 8017726:	f001 fc29 	bl	8018f7c <SUBGRF_ReadRegister>
 801772a:	4603      	mov	r3, r0
 801772c:	f043 0302 	orr.w	r3, r3, #2
 8017730:	b2db      	uxtb	r3, r3
 8017732:	4619      	mov	r1, r3
 8017734:	f640 1044 	movw	r0, #2372	; 0x944
 8017738:	f001 fc0c 	bl	8018f54 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 801773c:	1dfb      	adds	r3, r7, #7
 801773e:	22ff      	movs	r2, #255	; 0xff
 8017740:	4619      	mov	r1, r3
 8017742:	486b      	ldr	r0, [pc, #428]	; (80178f0 <RadioIrqProcess+0x320>)
 8017744:	f000 fdc8 	bl	80182d8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8017748:	486a      	ldr	r0, [pc, #424]	; (80178f4 <RadioIrqProcess+0x324>)
 801774a:	f001 fbb1 	bl	8018eb0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801774e:	4b66      	ldr	r3, [pc, #408]	; (80178e8 <RadioIrqProcess+0x318>)
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d036      	beq.n	80177c4 <RadioIrqProcess+0x1f4>
 8017756:	4b64      	ldr	r3, [pc, #400]	; (80178e8 <RadioIrqProcess+0x318>)
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	689b      	ldr	r3, [r3, #8]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d031      	beq.n	80177c4 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 8017760:	4b5e      	ldr	r3, [pc, #376]	; (80178dc <RadioIrqProcess+0x30c>)
 8017762:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017766:	2b01      	cmp	r3, #1
 8017768:	d10e      	bne.n	8017788 <RadioIrqProcess+0x1b8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801776a:	4b5f      	ldr	r3, [pc, #380]	; (80178e8 <RadioIrqProcess+0x318>)
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	689c      	ldr	r4, [r3, #8]
 8017770:	79fb      	ldrb	r3, [r7, #7]
 8017772:	b299      	uxth	r1, r3
 8017774:	4b59      	ldr	r3, [pc, #356]	; (80178dc <RadioIrqProcess+0x30c>)
 8017776:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801777a:	b21a      	sxth	r2, r3
 801777c:	4b57      	ldr	r3, [pc, #348]	; (80178dc <RadioIrqProcess+0x30c>)
 801777e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8017782:	485b      	ldr	r0, [pc, #364]	; (80178f0 <RadioIrqProcess+0x320>)
 8017784:	47a0      	blx	r4
                break;
 8017786:	e01e      	b.n	80177c6 <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017788:	4b54      	ldr	r3, [pc, #336]	; (80178dc <RadioIrqProcess+0x30c>)
 801778a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801778c:	463a      	mov	r2, r7
 801778e:	4611      	mov	r1, r2
 8017790:	4618      	mov	r0, r3
 8017792:	f001 fe11 	bl	80193b8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8017796:	4b54      	ldr	r3, [pc, #336]	; (80178e8 <RadioIrqProcess+0x318>)
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	689c      	ldr	r4, [r3, #8]
 801779c:	79fb      	ldrb	r3, [r7, #7]
 801779e:	b299      	uxth	r1, r3
 80177a0:	4b4e      	ldr	r3, [pc, #312]	; (80178dc <RadioIrqProcess+0x30c>)
 80177a2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80177a6:	b218      	sxth	r0, r3
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80177ae:	4a52      	ldr	r2, [pc, #328]	; (80178f8 <RadioIrqProcess+0x328>)
 80177b0:	fb82 c203 	smull	ip, r2, r2, r3
 80177b4:	1192      	asrs	r2, r2, #6
 80177b6:	17db      	asrs	r3, r3, #31
 80177b8:	1ad3      	subs	r3, r2, r3
 80177ba:	b25b      	sxtb	r3, r3
 80177bc:	4602      	mov	r2, r0
 80177be:	484c      	ldr	r0, [pc, #304]	; (80178f0 <RadioIrqProcess+0x320>)
 80177c0:	47a0      	blx	r4
                break;
 80177c2:	e000      	b.n	80177c6 <RadioIrqProcess+0x1f6>
        }
 80177c4:	bf00      	nop
        break;
 80177c6:	e0ef      	b.n	80179a8 <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 80177c8:	2000      	movs	r0, #0
 80177ca:	f000 feb5 	bl	8018538 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80177ce:	4b46      	ldr	r3, [pc, #280]	; (80178e8 <RadioIrqProcess+0x318>)
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	f000 80dd 	beq.w	8017992 <RadioIrqProcess+0x3c2>
 80177d8:	4b43      	ldr	r3, [pc, #268]	; (80178e8 <RadioIrqProcess+0x318>)
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	699b      	ldr	r3, [r3, #24]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	f000 80d7 	beq.w	8017992 <RadioIrqProcess+0x3c2>
            RadioEvents->CadDone( false );
 80177e4:	4b40      	ldr	r3, [pc, #256]	; (80178e8 <RadioIrqProcess+0x318>)
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	699b      	ldr	r3, [r3, #24]
 80177ea:	2000      	movs	r0, #0
 80177ec:	4798      	blx	r3
        break;
 80177ee:	e0d0      	b.n	8017992 <RadioIrqProcess+0x3c2>
        SUBGRF_SetStandby( STDBY_RC );
 80177f0:	2000      	movs	r0, #0
 80177f2:	f000 fea1 	bl	8018538 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80177f6:	4b3c      	ldr	r3, [pc, #240]	; (80178e8 <RadioIrqProcess+0x318>)
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	f000 80cb 	beq.w	8017996 <RadioIrqProcess+0x3c6>
 8017800:	4b39      	ldr	r3, [pc, #228]	; (80178e8 <RadioIrqProcess+0x318>)
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	699b      	ldr	r3, [r3, #24]
 8017806:	2b00      	cmp	r3, #0
 8017808:	f000 80c5 	beq.w	8017996 <RadioIrqProcess+0x3c6>
            RadioEvents->CadDone( true );
 801780c:	4b36      	ldr	r3, [pc, #216]	; (80178e8 <RadioIrqProcess+0x318>)
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	699b      	ldr	r3, [r3, #24]
 8017812:	2001      	movs	r0, #1
 8017814:	4798      	blx	r3
        break;
 8017816:	e0be      	b.n	8017996 <RadioIrqProcess+0x3c6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017818:	4b38      	ldr	r3, [pc, #224]	; (80178fc <RadioIrqProcess+0x32c>)
 801781a:	2201      	movs	r2, #1
 801781c:	2100      	movs	r1, #0
 801781e:	2002      	movs	r0, #2
 8017820:	f002 fe76 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017824:	f000 fd3e 	bl	80182a4 <SUBGRF_GetOperatingMode>
 8017828:	4603      	mov	r3, r0
 801782a:	2b04      	cmp	r3, #4
 801782c:	d11a      	bne.n	8017864 <RadioIrqProcess+0x294>
            DBG_GPIO_RADIO_TX(RST);
 801782e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017832:	482b      	ldr	r0, [pc, #172]	; (80178e0 <RadioIrqProcess+0x310>)
 8017834:	f7fe fdf1 	bl	801641a <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8017838:	482a      	ldr	r0, [pc, #168]	; (80178e4 <RadioIrqProcess+0x314>)
 801783a:	f002 fc5f 	bl	801a0fc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801783e:	2000      	movs	r0, #0
 8017840:	f000 fe7a 	bl	8018538 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017844:	4b28      	ldr	r3, [pc, #160]	; (80178e8 <RadioIrqProcess+0x318>)
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	2b00      	cmp	r3, #0
 801784a:	f000 80a6 	beq.w	801799a <RadioIrqProcess+0x3ca>
 801784e:	4b26      	ldr	r3, [pc, #152]	; (80178e8 <RadioIrqProcess+0x318>)
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	685b      	ldr	r3, [r3, #4]
 8017854:	2b00      	cmp	r3, #0
 8017856:	f000 80a0 	beq.w	801799a <RadioIrqProcess+0x3ca>
                RadioEvents->TxTimeout( );
 801785a:	4b23      	ldr	r3, [pc, #140]	; (80178e8 <RadioIrqProcess+0x318>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	685b      	ldr	r3, [r3, #4]
 8017860:	4798      	blx	r3
        break;
 8017862:	e09a      	b.n	801799a <RadioIrqProcess+0x3ca>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017864:	f000 fd1e 	bl	80182a4 <SUBGRF_GetOperatingMode>
 8017868:	4603      	mov	r3, r0
 801786a:	2b05      	cmp	r3, #5
 801786c:	f040 8095 	bne.w	801799a <RadioIrqProcess+0x3ca>
            DBG_GPIO_RADIO_RX(RST);
 8017870:	2101      	movs	r1, #1
 8017872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017876:	f7fe fdd0 	bl	801641a <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 801787a:	481c      	ldr	r0, [pc, #112]	; (80178ec <RadioIrqProcess+0x31c>)
 801787c:	f002 fc3e 	bl	801a0fc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017880:	2000      	movs	r0, #0
 8017882:	f000 fe59 	bl	8018538 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017886:	4b18      	ldr	r3, [pc, #96]	; (80178e8 <RadioIrqProcess+0x318>)
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	2b00      	cmp	r3, #0
 801788c:	f000 8085 	beq.w	801799a <RadioIrqProcess+0x3ca>
 8017890:	4b15      	ldr	r3, [pc, #84]	; (80178e8 <RadioIrqProcess+0x318>)
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	68db      	ldr	r3, [r3, #12]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d07f      	beq.n	801799a <RadioIrqProcess+0x3ca>
                RadioEvents->RxTimeout( );
 801789a:	4b13      	ldr	r3, [pc, #76]	; (80178e8 <RadioIrqProcess+0x318>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	68db      	ldr	r3, [r3, #12]
 80178a0:	4798      	blx	r3
        break;
 80178a2:	e07a      	b.n	801799a <RadioIrqProcess+0x3ca>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80178a4:	4b16      	ldr	r3, [pc, #88]	; (8017900 <RadioIrqProcess+0x330>)
 80178a6:	2201      	movs	r2, #1
 80178a8:	2100      	movs	r1, #0
 80178aa:	2002      	movs	r0, #2
 80178ac:	f002 fe30 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80178b0:	e07a      	b.n	80179a8 <RadioIrqProcess+0x3d8>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80178b2:	4b14      	ldr	r3, [pc, #80]	; (8017904 <RadioIrqProcess+0x334>)
 80178b4:	2201      	movs	r2, #1
 80178b6:	2100      	movs	r1, #0
 80178b8:	2002      	movs	r0, #2
 80178ba:	f002 fe29 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 80178be:	f001 fe28 	bl	8019512 <RFW_Is_Init>
 80178c2:	4603      	mov	r3, r0
 80178c4:	2b01      	cmp	r3, #1
 80178c6:	d16a      	bne.n	801799e <RadioIrqProcess+0x3ce>
            RFW_ReceivePayload( );
 80178c8:	f001 fe59 	bl	801957e <RFW_ReceivePayload>
        break;
 80178cc:	e067      	b.n	801799e <RadioIrqProcess+0x3ce>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80178ce:	4b0e      	ldr	r3, [pc, #56]	; (8017908 <RadioIrqProcess+0x338>)
 80178d0:	2201      	movs	r2, #1
 80178d2:	2100      	movs	r1, #0
 80178d4:	2002      	movs	r0, #2
 80178d6:	f002 fe1b 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80178da:	e065      	b.n	80179a8 <RadioIrqProcess+0x3d8>
 80178dc:	200017b0 	.word	0x200017b0
 80178e0:	48000400 	.word	0x48000400
 80178e4:	20001808 	.word	0x20001808
 80178e8:	20000ed0 	.word	0x20000ed0
 80178ec:	20001820 	.word	0x20001820
 80178f0:	20000dd0 	.word	0x20000dd0
 80178f4:	200017d4 	.word	0x200017d4
 80178f8:	10624dd3 	.word	0x10624dd3
 80178fc:	0801b304 	.word	0x0801b304
 8017900:	0801b318 	.word	0x0801b318
 8017904:	0801b324 	.word	0x0801b324
 8017908:	0801b330 	.word	0x0801b330
        TimerStop( &RxTimeoutTimer );
 801790c:	4828      	ldr	r0, [pc, #160]	; (80179b0 <RadioIrqProcess+0x3e0>)
 801790e:	f002 fbf5 	bl	801a0fc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017912:	4b28      	ldr	r3, [pc, #160]	; (80179b4 <RadioIrqProcess+0x3e4>)
 8017914:	785b      	ldrb	r3, [r3, #1]
 8017916:	f083 0301 	eor.w	r3, r3, #1
 801791a:	b2db      	uxtb	r3, r3
 801791c:	2b00      	cmp	r3, #0
 801791e:	d002      	beq.n	8017926 <RadioIrqProcess+0x356>
            SUBGRF_SetStandby( STDBY_RC );
 8017920:	2000      	movs	r0, #0
 8017922:	f000 fe09 	bl	8018538 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017926:	4b24      	ldr	r3, [pc, #144]	; (80179b8 <RadioIrqProcess+0x3e8>)
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d039      	beq.n	80179a2 <RadioIrqProcess+0x3d2>
 801792e:	4b22      	ldr	r3, [pc, #136]	; (80179b8 <RadioIrqProcess+0x3e8>)
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	68db      	ldr	r3, [r3, #12]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d034      	beq.n	80179a2 <RadioIrqProcess+0x3d2>
            RadioEvents->RxTimeout( );
 8017938:	4b1f      	ldr	r3, [pc, #124]	; (80179b8 <RadioIrqProcess+0x3e8>)
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	68db      	ldr	r3, [r3, #12]
 801793e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017940:	4b1e      	ldr	r3, [pc, #120]	; (80179bc <RadioIrqProcess+0x3ec>)
 8017942:	2201      	movs	r2, #1
 8017944:	2100      	movs	r1, #0
 8017946:	2002      	movs	r0, #2
 8017948:	f002 fde2 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801794c:	e029      	b.n	80179a2 <RadioIrqProcess+0x3d2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801794e:	4b1c      	ldr	r3, [pc, #112]	; (80179c0 <RadioIrqProcess+0x3f0>)
 8017950:	2201      	movs	r2, #1
 8017952:	2100      	movs	r1, #0
 8017954:	2002      	movs	r0, #2
 8017956:	f002 fddb 	bl	801a510 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801795a:	4b16      	ldr	r3, [pc, #88]	; (80179b4 <RadioIrqProcess+0x3e4>)
 801795c:	785b      	ldrb	r3, [r3, #1]
 801795e:	f083 0301 	eor.w	r3, r3, #1
 8017962:	b2db      	uxtb	r3, r3
 8017964:	2b00      	cmp	r3, #0
 8017966:	d002      	beq.n	801796e <RadioIrqProcess+0x39e>
            SUBGRF_SetStandby( STDBY_RC );
 8017968:	2000      	movs	r0, #0
 801796a:	f000 fde5 	bl	8018538 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801796e:	4b12      	ldr	r3, [pc, #72]	; (80179b8 <RadioIrqProcess+0x3e8>)
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d017      	beq.n	80179a6 <RadioIrqProcess+0x3d6>
 8017976:	4b10      	ldr	r3, [pc, #64]	; (80179b8 <RadioIrqProcess+0x3e8>)
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	691b      	ldr	r3, [r3, #16]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d012      	beq.n	80179a6 <RadioIrqProcess+0x3d6>
            RadioEvents->RxError( );
 8017980:	4b0d      	ldr	r3, [pc, #52]	; (80179b8 <RadioIrqProcess+0x3e8>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	691b      	ldr	r3, [r3, #16]
 8017986:	4798      	blx	r3
        break;
 8017988:	e00d      	b.n	80179a6 <RadioIrqProcess+0x3d6>
        break;
 801798a:	bf00      	nop
 801798c:	e00c      	b.n	80179a8 <RadioIrqProcess+0x3d8>
        break;
 801798e:	bf00      	nop
 8017990:	e00a      	b.n	80179a8 <RadioIrqProcess+0x3d8>
        break;
 8017992:	bf00      	nop
 8017994:	e008      	b.n	80179a8 <RadioIrqProcess+0x3d8>
        break;
 8017996:	bf00      	nop
 8017998:	e006      	b.n	80179a8 <RadioIrqProcess+0x3d8>
        break;
 801799a:	bf00      	nop
 801799c:	e004      	b.n	80179a8 <RadioIrqProcess+0x3d8>
        break;
 801799e:	bf00      	nop
 80179a0:	e002      	b.n	80179a8 <RadioIrqProcess+0x3d8>
        break;
 80179a2:	bf00      	nop
 80179a4:	e000      	b.n	80179a8 <RadioIrqProcess+0x3d8>
        break;
 80179a6:	bf00      	nop
  }
}
 80179a8:	bf00      	nop
 80179aa:	370c      	adds	r7, #12
 80179ac:	46bd      	mov	sp, r7
 80179ae:	bd90      	pop	{r4, r7, pc}
 80179b0:	20001820 	.word	0x20001820
 80179b4:	200017b0 	.word	0x200017b0
 80179b8:	20000ed0 	.word	0x20000ed0
 80179bc:	0801b33c 	.word	0x0801b33c
 80179c0:	0801b348 	.word	0x0801b348

080179c4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80179c8:	4b09      	ldr	r3, [pc, #36]	; (80179f0 <RadioTxPrbs+0x2c>)
 80179ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80179ce:	2101      	movs	r1, #1
 80179d0:	4618      	mov	r0, r3
 80179d2:	f001 fbb3 	bl	801913c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 80179d6:	4b07      	ldr	r3, [pc, #28]	; (80179f4 <RadioTxPrbs+0x30>)
 80179d8:	212d      	movs	r1, #45	; 0x2d
 80179da:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80179de:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80179e0:	f000 fe6d 	bl	80186be <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80179e4:	4804      	ldr	r0, [pc, #16]	; (80179f8 <RadioTxPrbs+0x34>)
 80179e6:	f000 fdc3 	bl	8018570 <SUBGRF_SetTx>
}
 80179ea:	bf00      	nop
 80179ec:	bd80      	pop	{r7, pc}
 80179ee:	bf00      	nop
 80179f0:	200017b0 	.word	0x200017b0
 80179f4:	080173cb 	.word	0x080173cb
 80179f8:	000fffff 	.word	0x000fffff

080179fc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b084      	sub	sp, #16
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	4603      	mov	r3, r0
 8017a04:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f001 fbbe 	bl	801918c <SUBGRF_SetRfTxPower>
 8017a10:	4603      	mov	r3, r0
 8017a12:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017a14:	7bfb      	ldrb	r3, [r7, #15]
 8017a16:	2101      	movs	r1, #1
 8017a18:	4618      	mov	r0, r3
 8017a1a:	f001 fb8f 	bl	801913c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017a1e:	f000 fe45 	bl	80186ac <SUBGRF_SetTxContinuousWave>
}
 8017a22:	bf00      	nop
 8017a24:	3710      	adds	r7, #16
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}

08017a2a <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017a2a:	b480      	push	{r7}
 8017a2c:	b089      	sub	sp, #36	; 0x24
 8017a2e:	af00      	add	r7, sp, #0
 8017a30:	60f8      	str	r0, [r7, #12]
 8017a32:	60b9      	str	r1, [r7, #8]
 8017a34:	4613      	mov	r3, r2
 8017a36:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017a38:	2300      	movs	r3, #0
 8017a3a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8017a40:	2300      	movs	r3, #0
 8017a42:	61bb      	str	r3, [r7, #24]
 8017a44:	e011      	b.n	8017a6a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017a46:	69bb      	ldr	r3, [r7, #24]
 8017a48:	68ba      	ldr	r2, [r7, #8]
 8017a4a:	4413      	add	r3, r2
 8017a4c:	781a      	ldrb	r2, [r3, #0]
 8017a4e:	69bb      	ldr	r3, [r7, #24]
 8017a50:	68b9      	ldr	r1, [r7, #8]
 8017a52:	440b      	add	r3, r1
 8017a54:	43d2      	mvns	r2, r2
 8017a56:	b2d2      	uxtb	r2, r2
 8017a58:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017a5a:	69bb      	ldr	r3, [r7, #24]
 8017a5c:	68fa      	ldr	r2, [r7, #12]
 8017a5e:	4413      	add	r3, r2
 8017a60:	2200      	movs	r2, #0
 8017a62:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8017a64:	69bb      	ldr	r3, [r7, #24]
 8017a66:	3301      	adds	r3, #1
 8017a68:	61bb      	str	r3, [r7, #24]
 8017a6a:	79fb      	ldrb	r3, [r7, #7]
 8017a6c:	69ba      	ldr	r2, [r7, #24]
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	dbe9      	blt.n	8017a46 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8017a72:	2300      	movs	r3, #0
 8017a74:	61bb      	str	r3, [r7, #24]
 8017a76:	e049      	b.n	8017b0c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017a78:	69bb      	ldr	r3, [r7, #24]
 8017a7a:	425a      	negs	r2, r3
 8017a7c:	f003 0307 	and.w	r3, r3, #7
 8017a80:	f002 0207 	and.w	r2, r2, #7
 8017a84:	bf58      	it	pl
 8017a86:	4253      	negpl	r3, r2
 8017a88:	b2db      	uxtb	r3, r3
 8017a8a:	f1c3 0307 	rsb	r3, r3, #7
 8017a8e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017a90:	69bb      	ldr	r3, [r7, #24]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	da00      	bge.n	8017a98 <payload_integration+0x6e>
 8017a96:	3307      	adds	r3, #7
 8017a98:	10db      	asrs	r3, r3, #3
 8017a9a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017a9c:	69bb      	ldr	r3, [r7, #24]
 8017a9e:	3301      	adds	r3, #1
 8017aa0:	425a      	negs	r2, r3
 8017aa2:	f003 0307 	and.w	r3, r3, #7
 8017aa6:	f002 0207 	and.w	r2, r2, #7
 8017aaa:	bf58      	it	pl
 8017aac:	4253      	negpl	r3, r2
 8017aae:	b2db      	uxtb	r3, r3
 8017ab0:	f1c3 0307 	rsb	r3, r3, #7
 8017ab4:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017ab6:	69bb      	ldr	r3, [r7, #24]
 8017ab8:	3301      	adds	r3, #1
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	da00      	bge.n	8017ac0 <payload_integration+0x96>
 8017abe:	3307      	adds	r3, #7
 8017ac0:	10db      	asrs	r3, r3, #3
 8017ac2:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017ac4:	7dbb      	ldrb	r3, [r7, #22]
 8017ac6:	68ba      	ldr	r2, [r7, #8]
 8017ac8:	4413      	add	r3, r2
 8017aca:	781b      	ldrb	r3, [r3, #0]
 8017acc:	461a      	mov	r2, r3
 8017ace:	7dfb      	ldrb	r3, [r7, #23]
 8017ad0:	fa42 f303 	asr.w	r3, r2, r3
 8017ad4:	b2db      	uxtb	r3, r3
 8017ad6:	f003 0301 	and.w	r3, r3, #1
 8017ada:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017adc:	7ffa      	ldrb	r2, [r7, #31]
 8017ade:	7cfb      	ldrb	r3, [r7, #19]
 8017ae0:	4053      	eors	r3, r2
 8017ae2:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017ae4:	7d3b      	ldrb	r3, [r7, #20]
 8017ae6:	68fa      	ldr	r2, [r7, #12]
 8017ae8:	4413      	add	r3, r2
 8017aea:	781b      	ldrb	r3, [r3, #0]
 8017aec:	b25a      	sxtb	r2, r3
 8017aee:	7ff9      	ldrb	r1, [r7, #31]
 8017af0:	7d7b      	ldrb	r3, [r7, #21]
 8017af2:	fa01 f303 	lsl.w	r3, r1, r3
 8017af6:	b25b      	sxtb	r3, r3
 8017af8:	4313      	orrs	r3, r2
 8017afa:	b259      	sxtb	r1, r3
 8017afc:	7d3b      	ldrb	r3, [r7, #20]
 8017afe:	68fa      	ldr	r2, [r7, #12]
 8017b00:	4413      	add	r3, r2
 8017b02:	b2ca      	uxtb	r2, r1
 8017b04:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8017b06:	69bb      	ldr	r3, [r7, #24]
 8017b08:	3301      	adds	r3, #1
 8017b0a:	61bb      	str	r3, [r7, #24]
 8017b0c:	79fb      	ldrb	r3, [r7, #7]
 8017b0e:	00db      	lsls	r3, r3, #3
 8017b10:	69ba      	ldr	r2, [r7, #24]
 8017b12:	429a      	cmp	r2, r3
 8017b14:	dbb0      	blt.n	8017a78 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017b16:	7ffb      	ldrb	r3, [r7, #31]
 8017b18:	01db      	lsls	r3, r3, #7
 8017b1a:	b25a      	sxtb	r2, r3
 8017b1c:	7ffb      	ldrb	r3, [r7, #31]
 8017b1e:	019b      	lsls	r3, r3, #6
 8017b20:	b25b      	sxtb	r3, r3
 8017b22:	4313      	orrs	r3, r2
 8017b24:	b25b      	sxtb	r3, r3
 8017b26:	7ffa      	ldrb	r2, [r7, #31]
 8017b28:	2a00      	cmp	r2, #0
 8017b2a:	d101      	bne.n	8017b30 <payload_integration+0x106>
 8017b2c:	2220      	movs	r2, #32
 8017b2e:	e000      	b.n	8017b32 <payload_integration+0x108>
 8017b30:	2200      	movs	r2, #0
 8017b32:	4313      	orrs	r3, r2
 8017b34:	b259      	sxtb	r1, r3
 8017b36:	79fb      	ldrb	r3, [r7, #7]
 8017b38:	68fa      	ldr	r2, [r7, #12]
 8017b3a:	4413      	add	r3, r2
 8017b3c:	b2ca      	uxtb	r2, r1
 8017b3e:	701a      	strb	r2, [r3, #0]
}
 8017b40:	bf00      	nop
 8017b42:	3724      	adds	r7, #36	; 0x24
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bc80      	pop	{r7}
 8017b48:	4770      	bx	lr
	...

08017b4c <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b08c      	sub	sp, #48	; 0x30
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	60b9      	str	r1, [r7, #8]
 8017b54:	607a      	str	r2, [r7, #4]
 8017b56:	603b      	str	r3, [r7, #0]
 8017b58:	4603      	mov	r3, r0
 8017b5a:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8017b60:	2300      	movs	r3, #0
 8017b62:	61fb      	str	r3, [r7, #28]
 8017b64:	2300      	movs	r3, #0
 8017b66:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017b68:	f001 fccd 	bl	8019506 <RFW_DeInit>

    if( rxContinuous != 0 )
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d001      	beq.n	8017b76 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017b72:	2300      	movs	r3, #0
 8017b74:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	bf14      	ite	ne
 8017b7c:	2301      	movne	r3, #1
 8017b7e:	2300      	moveq	r3, #0
 8017b80:	b2da      	uxtb	r2, r3
 8017b82:	4ba9      	ldr	r3, [pc, #676]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017b84:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017b86:	7bfb      	ldrb	r3, [r7, #15]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d003      	beq.n	8017b94 <RadioSetRxGenericConfig+0x48>
 8017b8c:	2b01      	cmp	r3, #1
 8017b8e:	f000 80e8 	beq.w	8017d62 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017b92:	e1a0      	b.n	8017ed6 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017b94:	68bb      	ldr	r3, [r7, #8]
 8017b96:	68db      	ldr	r3, [r3, #12]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d003      	beq.n	8017ba4 <RadioSetRxGenericConfig+0x58>
 8017b9c:	68bb      	ldr	r3, [r7, #8]
 8017b9e:	691b      	ldr	r3, [r3, #16]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d102      	bne.n	8017baa <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8017ba8:	e196      	b.n	8017ed8 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8017baa:	68bb      	ldr	r3, [r7, #8]
 8017bac:	7d5b      	ldrb	r3, [r3, #21]
 8017bae:	2b08      	cmp	r3, #8
 8017bb0:	d902      	bls.n	8017bb8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8017bb6:	e18f      	b.n	8017ed8 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017bb8:	2300      	movs	r3, #0
 8017bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8017bbc:	e00d      	b.n	8017bda <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8017bbe:	68bb      	ldr	r3, [r7, #8]
 8017bc0:	699a      	ldr	r2, [r3, #24]
 8017bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bc4:	4413      	add	r3, r2
 8017bc6:	7819      	ldrb	r1, [r3, #0]
 8017bc8:	f107 021c 	add.w	r2, r7, #28
 8017bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bce:	4413      	add	r3, r2
 8017bd0:	460a      	mov	r2, r1
 8017bd2:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bd6:	3301      	adds	r3, #1
 8017bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8017bda:	68bb      	ldr	r3, [r7, #8]
 8017bdc:	7d5b      	ldrb	r3, [r3, #21]
 8017bde:	461a      	mov	r2, r3
 8017be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017be2:	4293      	cmp	r3, r2
 8017be4:	dbeb      	blt.n	8017bbe <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017be6:	68bb      	ldr	r3, [r7, #8]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	bf14      	ite	ne
 8017bee:	2301      	movne	r3, #1
 8017bf0:	2300      	moveq	r3, #0
 8017bf2:	b2db      	uxtb	r3, r3
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f000 fd6b 	bl	80186d0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017bfa:	4b8b      	ldr	r3, [pc, #556]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017c02:	68bb      	ldr	r3, [r7, #8]
 8017c04:	68db      	ldr	r3, [r3, #12]
 8017c06:	4a88      	ldr	r2, [pc, #544]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017c08:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8017c0a:	68bb      	ldr	r3, [r7, #8]
 8017c0c:	791a      	ldrb	r2, [r3, #4]
 8017c0e:	4b86      	ldr	r3, [pc, #536]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017c14:	68bb      	ldr	r3, [r7, #8]
 8017c16:	689b      	ldr	r3, [r3, #8]
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f001 fba5 	bl	8019368 <SUBGRF_GetFskBandwidthRegValue>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	461a      	mov	r2, r3
 8017c22:	4b81      	ldr	r3, [pc, #516]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017c28:	4b7f      	ldr	r3, [pc, #508]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8017c2e:	68bb      	ldr	r3, [r7, #8]
 8017c30:	691b      	ldr	r3, [r3, #16]
 8017c32:	b29b      	uxth	r3, r3
 8017c34:	00db      	lsls	r3, r3, #3
 8017c36:	b29a      	uxth	r2, r3
 8017c38:	4b7b      	ldr	r3, [pc, #492]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017c3a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8017c3c:	68bb      	ldr	r3, [r7, #8]
 8017c3e:	7d1a      	ldrb	r2, [r3, #20]
 8017c40:	4b79      	ldr	r3, [pc, #484]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017c42:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017c44:	68bb      	ldr	r3, [r7, #8]
 8017c46:	7d5b      	ldrb	r3, [r3, #21]
 8017c48:	00db      	lsls	r3, r3, #3
 8017c4a:	b2da      	uxtb	r2, r3
 8017c4c:	4b76      	ldr	r3, [pc, #472]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017c4e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8017c50:	68bb      	ldr	r3, [r7, #8]
 8017c52:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8017c56:	4b74      	ldr	r3, [pc, #464]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017c58:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8017c5a:	68bb      	ldr	r3, [r7, #8]
 8017c5c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d105      	bne.n	8017c70 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8017c64:	68bb      	ldr	r3, [r7, #8]
 8017c66:	69db      	ldr	r3, [r3, #28]
 8017c68:	b2da      	uxtb	r2, r3
 8017c6a:	4b6f      	ldr	r3, [pc, #444]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017c6c:	759a      	strb	r2, [r3, #22]
 8017c6e:	e00b      	b.n	8017c88 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8017c70:	68bb      	ldr	r3, [r7, #8]
 8017c72:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017c76:	2b02      	cmp	r3, #2
 8017c78:	d103      	bne.n	8017c82 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017c7a:	4b6b      	ldr	r3, [pc, #428]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017c7c:	22ff      	movs	r2, #255	; 0xff
 8017c7e:	759a      	strb	r2, [r3, #22]
 8017c80:	e002      	b.n	8017c88 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017c82:	4b69      	ldr	r3, [pc, #420]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017c84:	22ff      	movs	r2, #255	; 0xff
 8017c86:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017c88:	68bb      	ldr	r3, [r7, #8]
 8017c8a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8017c8e:	2b02      	cmp	r3, #2
 8017c90:	d004      	beq.n	8017c9c <RadioSetRxGenericConfig+0x150>
 8017c92:	68bb      	ldr	r3, [r7, #8]
 8017c94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017c98:	2b02      	cmp	r3, #2
 8017c9a:	d12d      	bne.n	8017cf8 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017c9c:	68bb      	ldr	r3, [r7, #8]
 8017c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017ca2:	2bf1      	cmp	r3, #241	; 0xf1
 8017ca4:	d00c      	beq.n	8017cc0 <RadioSetRxGenericConfig+0x174>
 8017ca6:	68bb      	ldr	r3, [r7, #8]
 8017ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017cac:	2bf2      	cmp	r3, #242	; 0xf2
 8017cae:	d007      	beq.n	8017cc0 <RadioSetRxGenericConfig+0x174>
 8017cb0:	68bb      	ldr	r3, [r7, #8]
 8017cb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017cb6:	2b01      	cmp	r3, #1
 8017cb8:	d002      	beq.n	8017cc0 <RadioSetRxGenericConfig+0x174>
            return -1;
 8017cba:	f04f 33ff 	mov.w	r3, #4294967295
 8017cbe:	e10b      	b.n	8017ed8 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8017cc4:	68bb      	ldr	r3, [r7, #8]
 8017cc6:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8017cc8:	4b58      	ldr	r3, [pc, #352]	; (8017e2c <RadioSetRxGenericConfig+0x2e0>)
 8017cca:	6819      	ldr	r1, [r3, #0]
 8017ccc:	f107 0310 	add.w	r3, r7, #16
 8017cd0:	4a57      	ldr	r2, [pc, #348]	; (8017e30 <RadioSetRxGenericConfig+0x2e4>)
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	f001 fc0a 	bl	80194ec <RFW_Init>
 8017cd8:	4603      	mov	r3, r0
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d002      	beq.n	8017ce4 <RadioSetRxGenericConfig+0x198>
            return -1;
 8017cde:	f04f 33ff 	mov.w	r3, #4294967295
 8017ce2:	e0f9      	b.n	8017ed8 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017ce4:	4b50      	ldr	r3, [pc, #320]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017ce6:	2200      	movs	r2, #0
 8017ce8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8017cea:	4b4f      	ldr	r3, [pc, #316]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017cec:	2201      	movs	r2, #1
 8017cee:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8017cf0:	4b4d      	ldr	r3, [pc, #308]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	755a      	strb	r2, [r3, #21]
        {
 8017cf6:	e00e      	b.n	8017d16 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017cf8:	68bb      	ldr	r3, [r7, #8]
 8017cfa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8017cfe:	4b4a      	ldr	r3, [pc, #296]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017d00:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017d02:	68bb      	ldr	r3, [r7, #8]
 8017d04:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017d08:	4b47      	ldr	r3, [pc, #284]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017d0a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8017d0c:	68bb      	ldr	r3, [r7, #8]
 8017d0e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017d12:	4b45      	ldr	r3, [pc, #276]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017d14:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8017d16:	f7ff fa6c 	bl	80171f2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8017d1a:	2000      	movs	r0, #0
 8017d1c:	f7fe fbf8 	bl	8016510 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017d20:	4844      	ldr	r0, [pc, #272]	; (8017e34 <RadioSetRxGenericConfig+0x2e8>)
 8017d22:	f000 ff03 	bl	8018b2c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017d26:	4844      	ldr	r0, [pc, #272]	; (8017e38 <RadioSetRxGenericConfig+0x2ec>)
 8017d28:	f000 ffcc 	bl	8018cc4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017d2c:	f107 031c 	add.w	r3, r7, #28
 8017d30:	4618      	mov	r0, r3
 8017d32:	f000 fb06 	bl	8018342 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8017d36:	68bb      	ldr	r3, [r7, #8]
 8017d38:	8c1b      	ldrh	r3, [r3, #32]
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f000 fb50 	bl	80183e0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017d44:	4618      	mov	r0, r3
 8017d46:	f000 fb2b 	bl	80183a0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8017d4a:	683b      	ldr	r3, [r7, #0]
 8017d4c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017d50:	fb02 f203 	mul.w	r2, r2, r3
 8017d54:	68bb      	ldr	r3, [r7, #8]
 8017d56:	68db      	ldr	r3, [r3, #12]
 8017d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8017d5c:	4a32      	ldr	r2, [pc, #200]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017d5e:	6093      	str	r3, [r2, #8]
        break;
 8017d60:	e0b9      	b.n	8017ed6 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8017d62:	68bb      	ldr	r3, [r7, #8]
 8017d64:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d102      	bne.n	8017d70 <RadioSetRxGenericConfig+0x224>
            return -1;
 8017d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d6e:	e0b3      	b.n	8017ed8 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8017d70:	68bb      	ldr	r3, [r7, #8]
 8017d72:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017d76:	2b01      	cmp	r3, #1
 8017d78:	d104      	bne.n	8017d84 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8017d7a:	68bb      	ldr	r3, [r7, #8]
 8017d7c:	69db      	ldr	r3, [r3, #28]
 8017d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017d82:	e002      	b.n	8017d8a <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8017d84:	23ff      	movs	r3, #255	; 0xff
 8017d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017d8a:	68bb      	ldr	r3, [r7, #8]
 8017d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	bf14      	ite	ne
 8017d92:	2301      	movne	r3, #1
 8017d94:	2300      	moveq	r3, #0
 8017d96:	b2db      	uxtb	r3, r3
 8017d98:	4618      	mov	r0, r3
 8017d9a:	f000 fc99 	bl	80186d0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017d9e:	683b      	ldr	r3, [r7, #0]
 8017da0:	b2db      	uxtb	r3, r3
 8017da2:	4618      	mov	r0, r3
 8017da4:	f000 fca3 	bl	80186ee <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017da8:	4b1f      	ldr	r3, [pc, #124]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017daa:	2201      	movs	r2, #1
 8017dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017db0:	68bb      	ldr	r3, [r7, #8]
 8017db2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017db6:	4b1c      	ldr	r3, [pc, #112]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8017dbc:	68bb      	ldr	r3, [r7, #8]
 8017dbe:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8017dc2:	4b19      	ldr	r3, [pc, #100]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8017dce:	4b16      	ldr	r3, [pc, #88]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017dd0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8017dd4:	68bb      	ldr	r3, [r7, #8]
 8017dd6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8017dda:	2b02      	cmp	r3, #2
 8017ddc:	d010      	beq.n	8017e00 <RadioSetRxGenericConfig+0x2b4>
 8017dde:	2b02      	cmp	r3, #2
 8017de0:	dc2c      	bgt.n	8017e3c <RadioSetRxGenericConfig+0x2f0>
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d002      	beq.n	8017dec <RadioSetRxGenericConfig+0x2a0>
 8017de6:	2b01      	cmp	r3, #1
 8017de8:	d005      	beq.n	8017df6 <RadioSetRxGenericConfig+0x2aa>
            break;
 8017dea:	e027      	b.n	8017e3c <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017dec:	4b0e      	ldr	r3, [pc, #56]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017dee:	2200      	movs	r2, #0
 8017df0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017df4:	e023      	b.n	8017e3e <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017df6:	4b0c      	ldr	r3, [pc, #48]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017df8:	2201      	movs	r2, #1
 8017dfa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017dfe:	e01e      	b.n	8017e3e <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8017e00:	68bb      	ldr	r3, [r7, #8]
 8017e02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e06:	2b0b      	cmp	r3, #11
 8017e08:	d004      	beq.n	8017e14 <RadioSetRxGenericConfig+0x2c8>
 8017e0a:	68bb      	ldr	r3, [r7, #8]
 8017e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e10:	2b0c      	cmp	r3, #12
 8017e12:	d104      	bne.n	8017e1e <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017e14:	4b04      	ldr	r3, [pc, #16]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017e16:	2201      	movs	r2, #1
 8017e18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017e1c:	e00f      	b.n	8017e3e <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017e1e:	4b02      	ldr	r3, [pc, #8]	; (8017e28 <RadioSetRxGenericConfig+0x2dc>)
 8017e20:	2200      	movs	r2, #0
 8017e22:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017e26:	e00a      	b.n	8017e3e <RadioSetRxGenericConfig+0x2f2>
 8017e28:	200017b0 	.word	0x200017b0
 8017e2c:	20000ed0 	.word	0x20000ed0
 8017e30:	20001820 	.word	0x20001820
 8017e34:	200017e8 	.word	0x200017e8
 8017e38:	200017be 	.word	0x200017be
            break;
 8017e3c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017e3e:	4b28      	ldr	r3, [pc, #160]	; (8017ee0 <RadioSetRxGenericConfig+0x394>)
 8017e40:	2201      	movs	r2, #1
 8017e42:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8017e44:	68bb      	ldr	r3, [r7, #8]
 8017e46:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8017e48:	4b25      	ldr	r3, [pc, #148]	; (8017ee0 <RadioSetRxGenericConfig+0x394>)
 8017e4a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017e4c:	68bb      	ldr	r3, [r7, #8]
 8017e4e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8017e52:	4b23      	ldr	r3, [pc, #140]	; (8017ee0 <RadioSetRxGenericConfig+0x394>)
 8017e54:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017e56:	4a22      	ldr	r2, [pc, #136]	; (8017ee0 <RadioSetRxGenericConfig+0x394>)
 8017e58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017e5c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8017e5e:	68bb      	ldr	r3, [r7, #8]
 8017e60:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8017e64:	4b1e      	ldr	r3, [pc, #120]	; (8017ee0 <RadioSetRxGenericConfig+0x394>)
 8017e66:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8017e6a:	68bb      	ldr	r3, [r7, #8]
 8017e6c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8017e70:	4b1b      	ldr	r3, [pc, #108]	; (8017ee0 <RadioSetRxGenericConfig+0x394>)
 8017e72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8017e76:	f7ff f9bc 	bl	80171f2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8017e7a:	2001      	movs	r0, #1
 8017e7c:	f7fe fb48 	bl	8016510 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017e80:	4818      	ldr	r0, [pc, #96]	; (8017ee4 <RadioSetRxGenericConfig+0x398>)
 8017e82:	f000 fe53 	bl	8018b2c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e86:	4818      	ldr	r0, [pc, #96]	; (8017ee8 <RadioSetRxGenericConfig+0x39c>)
 8017e88:	f000 ff1c 	bl	8018cc4 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017e8c:	4b14      	ldr	r3, [pc, #80]	; (8017ee0 <RadioSetRxGenericConfig+0x394>)
 8017e8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017e92:	2b01      	cmp	r3, #1
 8017e94:	d10d      	bne.n	8017eb2 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8017e96:	f240 7036 	movw	r0, #1846	; 0x736
 8017e9a:	f001 f86f 	bl	8018f7c <SUBGRF_ReadRegister>
 8017e9e:	4603      	mov	r3, r0
 8017ea0:	f023 0304 	bic.w	r3, r3, #4
 8017ea4:	b2db      	uxtb	r3, r3
 8017ea6:	4619      	mov	r1, r3
 8017ea8:	f240 7036 	movw	r0, #1846	; 0x736
 8017eac:	f001 f852 	bl	8018f54 <SUBGRF_WriteRegister>
 8017eb0:	e00c      	b.n	8017ecc <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8017eb2:	f240 7036 	movw	r0, #1846	; 0x736
 8017eb6:	f001 f861 	bl	8018f7c <SUBGRF_ReadRegister>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	f043 0304 	orr.w	r3, r3, #4
 8017ec0:	b2db      	uxtb	r3, r3
 8017ec2:	4619      	mov	r1, r3
 8017ec4:	f240 7036 	movw	r0, #1846	; 0x736
 8017ec8:	f001 f844 	bl	8018f54 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8017ecc:	4b04      	ldr	r3, [pc, #16]	; (8017ee0 <RadioSetRxGenericConfig+0x394>)
 8017ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ed2:	609a      	str	r2, [r3, #8]
        break;
 8017ed4:	bf00      	nop
    }
    return status;
 8017ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017ed8:	4618      	mov	r0, r3
 8017eda:	3730      	adds	r7, #48	; 0x30
 8017edc:	46bd      	mov	sp, r7
 8017ede:	bd80      	pop	{r7, pc}
 8017ee0:	200017b0 	.word	0x200017b0
 8017ee4:	200017e8 	.word	0x200017e8
 8017ee8:	200017be 	.word	0x200017be

08017eec <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b08a      	sub	sp, #40	; 0x28
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	60b9      	str	r1, [r7, #8]
 8017ef4:	607b      	str	r3, [r7, #4]
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	73fb      	strb	r3, [r7, #15]
 8017efa:	4613      	mov	r3, r2
 8017efc:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8017efe:	2300      	movs	r3, #0
 8017f00:	61fb      	str	r3, [r7, #28]
 8017f02:	2300      	movs	r3, #0
 8017f04:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017f06:	f001 fafe 	bl	8019506 <RFW_DeInit>
    switch( modem )
 8017f0a:	7bfb      	ldrb	r3, [r7, #15]
 8017f0c:	2b02      	cmp	r3, #2
 8017f0e:	f000 8144 	beq.w	801819a <RadioSetTxGenericConfig+0x2ae>
 8017f12:	2b02      	cmp	r3, #2
 8017f14:	f300 8160 	bgt.w	80181d8 <RadioSetTxGenericConfig+0x2ec>
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d003      	beq.n	8017f24 <RadioSetTxGenericConfig+0x38>
 8017f1c:	2b01      	cmp	r3, #1
 8017f1e:	f000 80b7 	beq.w	8018090 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8017f22:	e159      	b.n	80181d8 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017f24:	68bb      	ldr	r3, [r7, #8]
 8017f26:	689b      	ldr	r3, [r3, #8]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d003      	beq.n	8017f34 <RadioSetTxGenericConfig+0x48>
 8017f2c:	68bb      	ldr	r3, [r7, #8]
 8017f2e:	691b      	ldr	r3, [r3, #16]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d102      	bne.n	8017f3a <RadioSetTxGenericConfig+0x4e>
            return -1;
 8017f34:	f04f 33ff 	mov.w	r3, #4294967295
 8017f38:	e163      	b.n	8018202 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 8017f3a:	68bb      	ldr	r3, [r7, #8]
 8017f3c:	7d1b      	ldrb	r3, [r3, #20]
 8017f3e:	2b08      	cmp	r3, #8
 8017f40:	d902      	bls.n	8017f48 <RadioSetTxGenericConfig+0x5c>
            return -1;
 8017f42:	f04f 33ff 	mov.w	r3, #4294967295
 8017f46:	e15c      	b.n	8018202 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017f48:	2300      	movs	r3, #0
 8017f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8017f4c:	e00d      	b.n	8017f6a <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8017f4e:	68bb      	ldr	r3, [r7, #8]
 8017f50:	699a      	ldr	r2, [r3, #24]
 8017f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f54:	4413      	add	r3, r2
 8017f56:	7819      	ldrb	r1, [r3, #0]
 8017f58:	f107 021c 	add.w	r2, r7, #28
 8017f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f5e:	4413      	add	r3, r2
 8017f60:	460a      	mov	r2, r1
 8017f62:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f66:	3301      	adds	r3, #1
 8017f68:	627b      	str	r3, [r7, #36]	; 0x24
 8017f6a:	68bb      	ldr	r3, [r7, #8]
 8017f6c:	7d1b      	ldrb	r3, [r3, #20]
 8017f6e:	461a      	mov	r2, r3
 8017f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f72:	4293      	cmp	r3, r2
 8017f74:	dbeb      	blt.n	8017f4e <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017f76:	4ba5      	ldr	r3, [pc, #660]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8017f78:	2200      	movs	r2, #0
 8017f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017f7e:	68bb      	ldr	r3, [r7, #8]
 8017f80:	689b      	ldr	r3, [r3, #8]
 8017f82:	4aa2      	ldr	r2, [pc, #648]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8017f84:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8017f86:	68bb      	ldr	r3, [r7, #8]
 8017f88:	781a      	ldrb	r2, [r3, #0]
 8017f8a:	4ba0      	ldr	r3, [pc, #640]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8017f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017f90:	68bb      	ldr	r3, [r7, #8]
 8017f92:	685b      	ldr	r3, [r3, #4]
 8017f94:	4618      	mov	r0, r3
 8017f96:	f001 f9e7 	bl	8019368 <SUBGRF_GetFskBandwidthRegValue>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	461a      	mov	r2, r3
 8017f9e:	4b9b      	ldr	r3, [pc, #620]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8017fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	68db      	ldr	r3, [r3, #12]
 8017fa8:	4a98      	ldr	r2, [pc, #608]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8017faa:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017fac:	4b97      	ldr	r3, [pc, #604]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8017fae:	2200      	movs	r2, #0
 8017fb0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8017fb2:	68bb      	ldr	r3, [r7, #8]
 8017fb4:	691b      	ldr	r3, [r3, #16]
 8017fb6:	b29b      	uxth	r3, r3
 8017fb8:	00db      	lsls	r3, r3, #3
 8017fba:	b29a      	uxth	r2, r3
 8017fbc:	4b93      	ldr	r3, [pc, #588]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8017fbe:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8017fc0:	4b92      	ldr	r3, [pc, #584]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8017fc2:	2204      	movs	r2, #4
 8017fc4:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017fc6:	68bb      	ldr	r3, [r7, #8]
 8017fc8:	7d1b      	ldrb	r3, [r3, #20]
 8017fca:	00db      	lsls	r3, r3, #3
 8017fcc:	b2da      	uxtb	r2, r3
 8017fce:	4b8f      	ldr	r3, [pc, #572]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8017fd0:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8017fd2:	4b8e      	ldr	r3, [pc, #568]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017fd8:	68bb      	ldr	r3, [r7, #8]
 8017fda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017fde:	2b02      	cmp	r3, #2
 8017fe0:	d003      	beq.n	8017fea <RadioSetTxGenericConfig+0xfe>
 8017fe2:	68bb      	ldr	r3, [r7, #8]
 8017fe4:	7f9b      	ldrb	r3, [r3, #30]
 8017fe6:	2b02      	cmp	r3, #2
 8017fe8:	d12a      	bne.n	8018040 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017fea:	68bb      	ldr	r3, [r7, #8]
 8017fec:	7fdb      	ldrb	r3, [r3, #31]
 8017fee:	2bf1      	cmp	r3, #241	; 0xf1
 8017ff0:	d00a      	beq.n	8018008 <RadioSetTxGenericConfig+0x11c>
 8017ff2:	68bb      	ldr	r3, [r7, #8]
 8017ff4:	7fdb      	ldrb	r3, [r3, #31]
 8017ff6:	2bf2      	cmp	r3, #242	; 0xf2
 8017ff8:	d006      	beq.n	8018008 <RadioSetTxGenericConfig+0x11c>
 8017ffa:	68bb      	ldr	r3, [r7, #8]
 8017ffc:	7fdb      	ldrb	r3, [r3, #31]
 8017ffe:	2b01      	cmp	r3, #1
 8018000:	d002      	beq.n	8018008 <RadioSetTxGenericConfig+0x11c>
                return -1;
 8018002:	f04f 33ff 	mov.w	r3, #4294967295
 8018006:	e0fc      	b.n	8018202 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8018008:	2301      	movs	r3, #1
 801800a:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 801800c:	68bb      	ldr	r3, [r7, #8]
 801800e:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018010:	4b7f      	ldr	r3, [pc, #508]	; (8018210 <RadioSetTxGenericConfig+0x324>)
 8018012:	6819      	ldr	r1, [r3, #0]
 8018014:	f107 0310 	add.w	r3, r7, #16
 8018018:	4a7e      	ldr	r2, [pc, #504]	; (8018214 <RadioSetTxGenericConfig+0x328>)
 801801a:	4618      	mov	r0, r3
 801801c:	f001 fa66 	bl	80194ec <RFW_Init>
 8018020:	4603      	mov	r3, r0
 8018022:	2b00      	cmp	r3, #0
 8018024:	d002      	beq.n	801802c <RadioSetTxGenericConfig+0x140>
              return -1;
 8018026:	f04f 33ff 	mov.w	r3, #4294967295
 801802a:	e0ea      	b.n	8018202 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801802c:	4b77      	ldr	r3, [pc, #476]	; (801820c <RadioSetTxGenericConfig+0x320>)
 801802e:	2200      	movs	r2, #0
 8018030:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018032:	4b76      	ldr	r3, [pc, #472]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8018034:	2201      	movs	r2, #1
 8018036:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018038:	4b74      	ldr	r3, [pc, #464]	; (801820c <RadioSetTxGenericConfig+0x320>)
 801803a:	2200      	movs	r2, #0
 801803c:	755a      	strb	r2, [r3, #21]
        {
 801803e:	e00c      	b.n	801805a <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018040:	68bb      	ldr	r3, [r7, #8]
 8018042:	7fda      	ldrb	r2, [r3, #31]
 8018044:	4b71      	ldr	r3, [pc, #452]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8018046:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018048:	68bb      	ldr	r3, [r7, #8]
 801804a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801804e:	4b6f      	ldr	r3, [pc, #444]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8018050:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018052:	68bb      	ldr	r3, [r7, #8]
 8018054:	7f9a      	ldrb	r2, [r3, #30]
 8018056:	4b6d      	ldr	r3, [pc, #436]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8018058:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801805a:	f7ff f8ca 	bl	80171f2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801805e:	2000      	movs	r0, #0
 8018060:	f7fe fa56 	bl	8016510 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018064:	486c      	ldr	r0, [pc, #432]	; (8018218 <RadioSetTxGenericConfig+0x32c>)
 8018066:	f000 fd61 	bl	8018b2c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801806a:	486c      	ldr	r0, [pc, #432]	; (801821c <RadioSetTxGenericConfig+0x330>)
 801806c:	f000 fe2a 	bl	8018cc4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018070:	f107 031c 	add.w	r3, r7, #28
 8018074:	4618      	mov	r0, r3
 8018076:	f000 f964 	bl	8018342 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801807a:	68bb      	ldr	r3, [r7, #8]
 801807c:	8b9b      	ldrh	r3, [r3, #28]
 801807e:	4618      	mov	r0, r3
 8018080:	f000 f9ae 	bl	80183e0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018084:	68bb      	ldr	r3, [r7, #8]
 8018086:	8c1b      	ldrh	r3, [r3, #32]
 8018088:	4618      	mov	r0, r3
 801808a:	f000 f989 	bl	80183a0 <SUBGRF_SetCrcPolynomial>
        break;
 801808e:	e0a4      	b.n	80181da <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018090:	4b5e      	ldr	r3, [pc, #376]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8018092:	2201      	movs	r2, #1
 8018094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018098:	68bb      	ldr	r3, [r7, #8]
 801809a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801809e:	4b5b      	ldr	r3, [pc, #364]	; (801820c <RadioSetTxGenericConfig+0x320>)
 80180a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80180a4:	68bb      	ldr	r3, [r7, #8]
 80180a6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80180aa:	4b58      	ldr	r3, [pc, #352]	; (801820c <RadioSetTxGenericConfig+0x320>)
 80180ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80180b0:	68bb      	ldr	r3, [r7, #8]
 80180b2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80180b6:	4b55      	ldr	r3, [pc, #340]	; (801820c <RadioSetTxGenericConfig+0x320>)
 80180b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80180bc:	68bb      	ldr	r3, [r7, #8]
 80180be:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80180c2:	2b02      	cmp	r3, #2
 80180c4:	d010      	beq.n	80180e8 <RadioSetTxGenericConfig+0x1fc>
 80180c6:	2b02      	cmp	r3, #2
 80180c8:	dc22      	bgt.n	8018110 <RadioSetTxGenericConfig+0x224>
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d002      	beq.n	80180d4 <RadioSetTxGenericConfig+0x1e8>
 80180ce:	2b01      	cmp	r3, #1
 80180d0:	d005      	beq.n	80180de <RadioSetTxGenericConfig+0x1f2>
            break;
 80180d2:	e01d      	b.n	8018110 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80180d4:	4b4d      	ldr	r3, [pc, #308]	; (801820c <RadioSetTxGenericConfig+0x320>)
 80180d6:	2200      	movs	r2, #0
 80180d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80180dc:	e019      	b.n	8018112 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80180de:	4b4b      	ldr	r3, [pc, #300]	; (801820c <RadioSetTxGenericConfig+0x320>)
 80180e0:	2201      	movs	r2, #1
 80180e2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80180e6:	e014      	b.n	8018112 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80180e8:	68bb      	ldr	r3, [r7, #8]
 80180ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80180ee:	2b0b      	cmp	r3, #11
 80180f0:	d004      	beq.n	80180fc <RadioSetTxGenericConfig+0x210>
 80180f2:	68bb      	ldr	r3, [r7, #8]
 80180f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80180f8:	2b0c      	cmp	r3, #12
 80180fa:	d104      	bne.n	8018106 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80180fc:	4b43      	ldr	r3, [pc, #268]	; (801820c <RadioSetTxGenericConfig+0x320>)
 80180fe:	2201      	movs	r2, #1
 8018100:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018104:	e005      	b.n	8018112 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018106:	4b41      	ldr	r3, [pc, #260]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8018108:	2200      	movs	r2, #0
 801810a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801810e:	e000      	b.n	8018112 <RadioSetTxGenericConfig+0x226>
            break;
 8018110:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018112:	4b3e      	ldr	r3, [pc, #248]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8018114:	2201      	movs	r2, #1
 8018116:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801811c:	4b3b      	ldr	r3, [pc, #236]	; (801820c <RadioSetTxGenericConfig+0x320>)
 801811e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8018126:	4b39      	ldr	r3, [pc, #228]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8018128:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801812a:	68bb      	ldr	r3, [r7, #8]
 801812c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018130:	4b36      	ldr	r3, [pc, #216]	; (801820c <RadioSetTxGenericConfig+0x320>)
 8018132:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018136:	68bb      	ldr	r3, [r7, #8]
 8018138:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801813c:	4b33      	ldr	r3, [pc, #204]	; (801820c <RadioSetTxGenericConfig+0x320>)
 801813e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8018142:	f7ff f856 	bl	80171f2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018146:	2001      	movs	r0, #1
 8018148:	f7fe f9e2 	bl	8016510 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801814c:	4832      	ldr	r0, [pc, #200]	; (8018218 <RadioSetTxGenericConfig+0x32c>)
 801814e:	f000 fced 	bl	8018b2c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018152:	4832      	ldr	r0, [pc, #200]	; (801821c <RadioSetTxGenericConfig+0x330>)
 8018154:	f000 fdb6 	bl	8018cc4 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8018158:	4b2c      	ldr	r3, [pc, #176]	; (801820c <RadioSetTxGenericConfig+0x320>)
 801815a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801815e:	2b06      	cmp	r3, #6
 8018160:	d10d      	bne.n	801817e <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8018162:	f640 0089 	movw	r0, #2185	; 0x889
 8018166:	f000 ff09 	bl	8018f7c <SUBGRF_ReadRegister>
 801816a:	4603      	mov	r3, r0
 801816c:	f023 0304 	bic.w	r3, r3, #4
 8018170:	b2db      	uxtb	r3, r3
 8018172:	4619      	mov	r1, r3
 8018174:	f640 0089 	movw	r0, #2185	; 0x889
 8018178:	f000 feec 	bl	8018f54 <SUBGRF_WriteRegister>
        break;
 801817c:	e02d      	b.n	80181da <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801817e:	f640 0089 	movw	r0, #2185	; 0x889
 8018182:	f000 fefb 	bl	8018f7c <SUBGRF_ReadRegister>
 8018186:	4603      	mov	r3, r0
 8018188:	f043 0304 	orr.w	r3, r3, #4
 801818c:	b2db      	uxtb	r3, r3
 801818e:	4619      	mov	r1, r3
 8018190:	f640 0089 	movw	r0, #2185	; 0x889
 8018194:	f000 fede 	bl	8018f54 <SUBGRF_WriteRegister>
        break;
 8018198:	e01f      	b.n	80181da <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801819a:	68bb      	ldr	r3, [r7, #8]
 801819c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d004      	beq.n	80181ac <RadioSetTxGenericConfig+0x2c0>
 80181a2:	68bb      	ldr	r3, [r7, #8]
 80181a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80181a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80181aa:	d902      	bls.n	80181b2 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 80181ac:	f04f 33ff 	mov.w	r3, #4294967295
 80181b0:	e027      	b.n	8018202 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 80181b2:	2002      	movs	r0, #2
 80181b4:	f7fe f9ac 	bl	8016510 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80181b8:	4b14      	ldr	r3, [pc, #80]	; (801820c <RadioSetTxGenericConfig+0x320>)
 80181ba:	2202      	movs	r2, #2
 80181bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80181c0:	68bb      	ldr	r3, [r7, #8]
 80181c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80181c4:	4a11      	ldr	r2, [pc, #68]	; (801820c <RadioSetTxGenericConfig+0x320>)
 80181c6:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80181c8:	4b10      	ldr	r3, [pc, #64]	; (801820c <RadioSetTxGenericConfig+0x320>)
 80181ca:	2216      	movs	r2, #22
 80181cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80181d0:	4811      	ldr	r0, [pc, #68]	; (8018218 <RadioSetTxGenericConfig+0x32c>)
 80181d2:	f000 fcab 	bl	8018b2c <SUBGRF_SetModulationParams>
        break;
 80181d6:	e000      	b.n	80181da <RadioSetTxGenericConfig+0x2ee>
        break;
 80181d8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80181da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80181de:	4618      	mov	r0, r3
 80181e0:	f000 ffd4 	bl	801918c <SUBGRF_SetRfTxPower>
 80181e4:	4603      	mov	r3, r0
 80181e6:	461a      	mov	r2, r3
 80181e8:	4b08      	ldr	r3, [pc, #32]	; (801820c <RadioSetTxGenericConfig+0x320>)
 80181ea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80181ee:	4b07      	ldr	r3, [pc, #28]	; (801820c <RadioSetTxGenericConfig+0x320>)
 80181f0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80181f4:	4618      	mov	r0, r3
 80181f6:	f001 f99a 	bl	801952e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80181fa:	4a04      	ldr	r2, [pc, #16]	; (801820c <RadioSetTxGenericConfig+0x320>)
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	6053      	str	r3, [r2, #4]
    return 0;
 8018200:	2300      	movs	r3, #0
}
 8018202:	4618      	mov	r0, r3
 8018204:	3728      	adds	r7, #40	; 0x28
 8018206:	46bd      	mov	sp, r7
 8018208:	bd80      	pop	{r7, pc}
 801820a:	bf00      	nop
 801820c:	200017b0 	.word	0x200017b0
 8018210:	20000ed0 	.word	0x20000ed0
 8018214:	20001808 	.word	0x20001808
 8018218:	200017e8 	.word	0x200017e8
 801821c:	200017be 	.word	0x200017be

08018220 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b084      	sub	sp, #16
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d002      	beq.n	8018234 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801822e:	4a1a      	ldr	r2, [pc, #104]	; (8018298 <SUBGRF_Init+0x78>)
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018234:	f7e9 fb4a 	bl	80018cc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018238:	2002      	movs	r0, #2
 801823a:	f001 f873 	bl	8019324 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801823e:	4b17      	ldr	r3, [pc, #92]	; (801829c <SUBGRF_Init+0x7c>)
 8018240:	2200      	movs	r2, #0
 8018242:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018244:	2000      	movs	r0, #0
 8018246:	f000 f977 	bl	8018538 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801824a:	f7f2 fb11 	bl	800a870 <RBI_IsTCXO>
 801824e:	4603      	mov	r3, r0
 8018250:	2b01      	cmp	r3, #1
 8018252:	d10e      	bne.n	8018272 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018254:	2140      	movs	r1, #64	; 0x40
 8018256:	2001      	movs	r0, #1
 8018258:	f000 fb78 	bl	801894c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801825c:	2100      	movs	r1, #0
 801825e:	f640 1011 	movw	r0, #2321	; 0x911
 8018262:	f000 fe77 	bl	8018f54 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018266:	237f      	movs	r3, #127	; 0x7f
 8018268:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801826a:	7b38      	ldrb	r0, [r7, #12]
 801826c:	f000 fa85 	bl	801877a <SUBGRF_Calibrate>
 8018270:	e009      	b.n	8018286 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018272:	2120      	movs	r1, #32
 8018274:	f640 1011 	movw	r0, #2321	; 0x911
 8018278:	f000 fe6c 	bl	8018f54 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801827c:	2120      	movs	r1, #32
 801827e:	f640 1012 	movw	r0, #2322	; 0x912
 8018282:	f000 fe67 	bl	8018f54 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8018286:	f7f2 fad7 	bl	800a838 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801828a:	4b05      	ldr	r3, [pc, #20]	; (80182a0 <SUBGRF_Init+0x80>)
 801828c:	2201      	movs	r2, #1
 801828e:	701a      	strb	r2, [r3, #0]
}
 8018290:	bf00      	nop
 8018292:	3710      	adds	r7, #16
 8018294:	46bd      	mov	sp, r7
 8018296:	bd80      	pop	{r7, pc}
 8018298:	20000ee0 	.word	0x20000ee0
 801829c:	20000edc 	.word	0x20000edc
 80182a0:	20000ed4 	.word	0x20000ed4

080182a4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80182a4:	b480      	push	{r7}
 80182a6:	af00      	add	r7, sp, #0
    return OperatingMode;
 80182a8:	4b02      	ldr	r3, [pc, #8]	; (80182b4 <SUBGRF_GetOperatingMode+0x10>)
 80182aa:	781b      	ldrb	r3, [r3, #0]
}
 80182ac:	4618      	mov	r0, r3
 80182ae:	46bd      	mov	sp, r7
 80182b0:	bc80      	pop	{r7}
 80182b2:	4770      	bx	lr
 80182b4:	20000ed4 	.word	0x20000ed4

080182b8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b082      	sub	sp, #8
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
 80182c0:	460b      	mov	r3, r1
 80182c2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80182c4:	78fb      	ldrb	r3, [r7, #3]
 80182c6:	461a      	mov	r2, r3
 80182c8:	6879      	ldr	r1, [r7, #4]
 80182ca:	2000      	movs	r0, #0
 80182cc:	f000 feae 	bl	801902c <SUBGRF_WriteBuffer>
}
 80182d0:	bf00      	nop
 80182d2:	3708      	adds	r7, #8
 80182d4:	46bd      	mov	sp, r7
 80182d6:	bd80      	pop	{r7, pc}

080182d8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80182d8:	b580      	push	{r7, lr}
 80182da:	b086      	sub	sp, #24
 80182dc:	af00      	add	r7, sp, #0
 80182de:	60f8      	str	r0, [r7, #12]
 80182e0:	60b9      	str	r1, [r7, #8]
 80182e2:	4613      	mov	r3, r2
 80182e4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80182e6:	2300      	movs	r3, #0
 80182e8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80182ea:	f107 0317 	add.w	r3, r7, #23
 80182ee:	4619      	mov	r1, r3
 80182f0:	68b8      	ldr	r0, [r7, #8]
 80182f2:	f000 fdb1 	bl	8018e58 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80182f6:	68bb      	ldr	r3, [r7, #8]
 80182f8:	781b      	ldrb	r3, [r3, #0]
 80182fa:	79fa      	ldrb	r2, [r7, #7]
 80182fc:	429a      	cmp	r2, r3
 80182fe:	d201      	bcs.n	8018304 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018300:	2301      	movs	r3, #1
 8018302:	e007      	b.n	8018314 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018304:	7df8      	ldrb	r0, [r7, #23]
 8018306:	68bb      	ldr	r3, [r7, #8]
 8018308:	781b      	ldrb	r3, [r3, #0]
 801830a:	461a      	mov	r2, r3
 801830c:	68f9      	ldr	r1, [r7, #12]
 801830e:	f000 feaf 	bl	8019070 <SUBGRF_ReadBuffer>

    return 0;
 8018312:	2300      	movs	r3, #0
}
 8018314:	4618      	mov	r0, r3
 8018316:	3718      	adds	r7, #24
 8018318:	46bd      	mov	sp, r7
 801831a:	bd80      	pop	{r7, pc}

0801831c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b084      	sub	sp, #16
 8018320:	af00      	add	r7, sp, #0
 8018322:	60f8      	str	r0, [r7, #12]
 8018324:	460b      	mov	r3, r1
 8018326:	607a      	str	r2, [r7, #4]
 8018328:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801832a:	7afb      	ldrb	r3, [r7, #11]
 801832c:	4619      	mov	r1, r3
 801832e:	68f8      	ldr	r0, [r7, #12]
 8018330:	f7ff ffc2 	bl	80182b8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018334:	6878      	ldr	r0, [r7, #4]
 8018336:	f000 f91b 	bl	8018570 <SUBGRF_SetTx>
}
 801833a:	bf00      	nop
 801833c:	3710      	adds	r7, #16
 801833e:	46bd      	mov	sp, r7
 8018340:	bd80      	pop	{r7, pc}

08018342 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8018342:	b580      	push	{r7, lr}
 8018344:	b082      	sub	sp, #8
 8018346:	af00      	add	r7, sp, #0
 8018348:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801834a:	2208      	movs	r2, #8
 801834c:	6879      	ldr	r1, [r7, #4]
 801834e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8018352:	f000 fe27 	bl	8018fa4 <SUBGRF_WriteRegisters>
    return 0;
 8018356:	2300      	movs	r3, #0
}
 8018358:	4618      	mov	r0, r3
 801835a:	3708      	adds	r7, #8
 801835c:	46bd      	mov	sp, r7
 801835e:	bd80      	pop	{r7, pc}

08018360 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b084      	sub	sp, #16
 8018364:	af00      	add	r7, sp, #0
 8018366:	4603      	mov	r3, r0
 8018368:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801836a:	88fb      	ldrh	r3, [r7, #6]
 801836c:	0a1b      	lsrs	r3, r3, #8
 801836e:	b29b      	uxth	r3, r3
 8018370:	b2db      	uxtb	r3, r3
 8018372:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018374:	88fb      	ldrh	r3, [r7, #6]
 8018376:	b2db      	uxtb	r3, r3
 8018378:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801837a:	f000 fb67 	bl	8018a4c <SUBGRF_GetPacketType>
 801837e:	4603      	mov	r3, r0
 8018380:	2b00      	cmp	r3, #0
 8018382:	d108      	bne.n	8018396 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018384:	f107 030c 	add.w	r3, r7, #12
 8018388:	2202      	movs	r2, #2
 801838a:	4619      	mov	r1, r3
 801838c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8018390:	f000 fe08 	bl	8018fa4 <SUBGRF_WriteRegisters>
            break;
 8018394:	e000      	b.n	8018398 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8018396:	bf00      	nop
    }
}
 8018398:	bf00      	nop
 801839a:	3710      	adds	r7, #16
 801839c:	46bd      	mov	sp, r7
 801839e:	bd80      	pop	{r7, pc}

080183a0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b084      	sub	sp, #16
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	4603      	mov	r3, r0
 80183a8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80183aa:	88fb      	ldrh	r3, [r7, #6]
 80183ac:	0a1b      	lsrs	r3, r3, #8
 80183ae:	b29b      	uxth	r3, r3
 80183b0:	b2db      	uxtb	r3, r3
 80183b2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80183b4:	88fb      	ldrh	r3, [r7, #6]
 80183b6:	b2db      	uxtb	r3, r3
 80183b8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80183ba:	f000 fb47 	bl	8018a4c <SUBGRF_GetPacketType>
 80183be:	4603      	mov	r3, r0
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d108      	bne.n	80183d6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80183c4:	f107 030c 	add.w	r3, r7, #12
 80183c8:	2202      	movs	r2, #2
 80183ca:	4619      	mov	r1, r3
 80183cc:	f240 60be 	movw	r0, #1726	; 0x6be
 80183d0:	f000 fde8 	bl	8018fa4 <SUBGRF_WriteRegisters>
            break;
 80183d4:	e000      	b.n	80183d8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80183d6:	bf00      	nop
    }
}
 80183d8:	bf00      	nop
 80183da:	3710      	adds	r7, #16
 80183dc:	46bd      	mov	sp, r7
 80183de:	bd80      	pop	{r7, pc}

080183e0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b084      	sub	sp, #16
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	4603      	mov	r3, r0
 80183e8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80183ea:	2300      	movs	r3, #0
 80183ec:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80183ee:	f000 fb2d 	bl	8018a4c <SUBGRF_GetPacketType>
 80183f2:	4603      	mov	r3, r0
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d121      	bne.n	801843c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80183f8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80183fc:	f000 fdbe 	bl	8018f7c <SUBGRF_ReadRegister>
 8018400:	4603      	mov	r3, r0
 8018402:	f023 0301 	bic.w	r3, r3, #1
 8018406:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018408:	88fb      	ldrh	r3, [r7, #6]
 801840a:	0a1b      	lsrs	r3, r3, #8
 801840c:	b29b      	uxth	r3, r3
 801840e:	b25b      	sxtb	r3, r3
 8018410:	f003 0301 	and.w	r3, r3, #1
 8018414:	b25a      	sxtb	r2, r3
 8018416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801841a:	4313      	orrs	r3, r2
 801841c:	b25b      	sxtb	r3, r3
 801841e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018420:	7bfb      	ldrb	r3, [r7, #15]
 8018422:	4619      	mov	r1, r3
 8018424:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018428:	f000 fd94 	bl	8018f54 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801842c:	88fb      	ldrh	r3, [r7, #6]
 801842e:	b2db      	uxtb	r3, r3
 8018430:	4619      	mov	r1, r3
 8018432:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8018436:	f000 fd8d 	bl	8018f54 <SUBGRF_WriteRegister>
            break;
 801843a:	e000      	b.n	801843e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801843c:	bf00      	nop
    }
}
 801843e:	bf00      	nop
 8018440:	3710      	adds	r7, #16
 8018442:	46bd      	mov	sp, r7
 8018444:	bd80      	pop	{r7, pc}

08018446 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8018446:	b580      	push	{r7, lr}
 8018448:	b082      	sub	sp, #8
 801844a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801844c:	2300      	movs	r3, #0
 801844e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018450:	2300      	movs	r3, #0
 8018452:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018454:	2300      	movs	r3, #0
 8018456:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018458:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801845c:	f000 fd8e 	bl	8018f7c <SUBGRF_ReadRegister>
 8018460:	4603      	mov	r3, r0
 8018462:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018464:	79fb      	ldrb	r3, [r7, #7]
 8018466:	f023 0301 	bic.w	r3, r3, #1
 801846a:	b2db      	uxtb	r3, r3
 801846c:	4619      	mov	r1, r3
 801846e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018472:	f000 fd6f 	bl	8018f54 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8018476:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801847a:	f000 fd7f 	bl	8018f7c <SUBGRF_ReadRegister>
 801847e:	4603      	mov	r3, r0
 8018480:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018482:	79bb      	ldrb	r3, [r7, #6]
 8018484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018488:	b2db      	uxtb	r3, r3
 801848a:	4619      	mov	r1, r3
 801848c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018490:	f000 fd60 	bl	8018f54 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018494:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018498:	f000 f88a 	bl	80185b0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801849c:	463b      	mov	r3, r7
 801849e:	2204      	movs	r2, #4
 80184a0:	4619      	mov	r1, r3
 80184a2:	f640 0019 	movw	r0, #2073	; 0x819
 80184a6:	f000 fd9f 	bl	8018fe8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80184aa:	2000      	movs	r0, #0
 80184ac:	f000 f844 	bl	8018538 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80184b0:	79fb      	ldrb	r3, [r7, #7]
 80184b2:	4619      	mov	r1, r3
 80184b4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80184b8:	f000 fd4c 	bl	8018f54 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80184bc:	79bb      	ldrb	r3, [r7, #6]
 80184be:	4619      	mov	r1, r3
 80184c0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80184c4:	f000 fd46 	bl	8018f54 <SUBGRF_WriteRegister>

    return number;
 80184c8:	683b      	ldr	r3, [r7, #0]
}
 80184ca:	4618      	mov	r0, r3
 80184cc:	3708      	adds	r7, #8
 80184ce:	46bd      	mov	sp, r7
 80184d0:	bd80      	pop	{r7, pc}
	...

080184d4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b084      	sub	sp, #16
 80184d8:	af00      	add	r7, sp, #0
 80184da:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80184dc:	2000      	movs	r0, #0
 80184de:	f7f2 f9b2 	bl	800a846 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80184e2:	2002      	movs	r0, #2
 80184e4:	f000 ff1e 	bl	8019324 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80184e8:	793b      	ldrb	r3, [r7, #4]
 80184ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80184ee:	b2db      	uxtb	r3, r3
 80184f0:	009b      	lsls	r3, r3, #2
 80184f2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80184f4:	793b      	ldrb	r3, [r7, #4]
 80184f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80184fe:	b25b      	sxtb	r3, r3
 8018500:	4313      	orrs	r3, r2
 8018502:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018504:	793b      	ldrb	r3, [r7, #4]
 8018506:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801850a:	b2db      	uxtb	r3, r3
 801850c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801850e:	4313      	orrs	r3, r2
 8018510:	b25b      	sxtb	r3, r3
 8018512:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018514:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018516:	f107 030f 	add.w	r3, r7, #15
 801851a:	2201      	movs	r2, #1
 801851c:	4619      	mov	r1, r3
 801851e:	2084      	movs	r0, #132	; 0x84
 8018520:	f000 fdc8 	bl	80190b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018524:	4b03      	ldr	r3, [pc, #12]	; (8018534 <SUBGRF_SetSleep+0x60>)
 8018526:	2200      	movs	r2, #0
 8018528:	701a      	strb	r2, [r3, #0]
}
 801852a:	bf00      	nop
 801852c:	3710      	adds	r7, #16
 801852e:	46bd      	mov	sp, r7
 8018530:	bd80      	pop	{r7, pc}
 8018532:	bf00      	nop
 8018534:	20000ed4 	.word	0x20000ed4

08018538 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b082      	sub	sp, #8
 801853c:	af00      	add	r7, sp, #0
 801853e:	4603      	mov	r3, r0
 8018540:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018542:	1dfb      	adds	r3, r7, #7
 8018544:	2201      	movs	r2, #1
 8018546:	4619      	mov	r1, r3
 8018548:	2080      	movs	r0, #128	; 0x80
 801854a:	f000 fdb3 	bl	80190b4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801854e:	79fb      	ldrb	r3, [r7, #7]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d103      	bne.n	801855c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018554:	4b05      	ldr	r3, [pc, #20]	; (801856c <SUBGRF_SetStandby+0x34>)
 8018556:	2201      	movs	r2, #1
 8018558:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801855a:	e002      	b.n	8018562 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801855c:	4b03      	ldr	r3, [pc, #12]	; (801856c <SUBGRF_SetStandby+0x34>)
 801855e:	2202      	movs	r2, #2
 8018560:	701a      	strb	r2, [r3, #0]
}
 8018562:	bf00      	nop
 8018564:	3708      	adds	r7, #8
 8018566:	46bd      	mov	sp, r7
 8018568:	bd80      	pop	{r7, pc}
 801856a:	bf00      	nop
 801856c:	20000ed4 	.word	0x20000ed4

08018570 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b084      	sub	sp, #16
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018578:	4b0c      	ldr	r3, [pc, #48]	; (80185ac <SUBGRF_SetTx+0x3c>)
 801857a:	2204      	movs	r2, #4
 801857c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	0c1b      	lsrs	r3, r3, #16
 8018582:	b2db      	uxtb	r3, r3
 8018584:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	0a1b      	lsrs	r3, r3, #8
 801858a:	b2db      	uxtb	r3, r3
 801858c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	b2db      	uxtb	r3, r3
 8018592:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018594:	f107 030c 	add.w	r3, r7, #12
 8018598:	2203      	movs	r2, #3
 801859a:	4619      	mov	r1, r3
 801859c:	2083      	movs	r0, #131	; 0x83
 801859e:	f000 fd89 	bl	80190b4 <SUBGRF_WriteCommand>
}
 80185a2:	bf00      	nop
 80185a4:	3710      	adds	r7, #16
 80185a6:	46bd      	mov	sp, r7
 80185a8:	bd80      	pop	{r7, pc}
 80185aa:	bf00      	nop
 80185ac:	20000ed4 	.word	0x20000ed4

080185b0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b084      	sub	sp, #16
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80185b8:	4b0c      	ldr	r3, [pc, #48]	; (80185ec <SUBGRF_SetRx+0x3c>)
 80185ba:	2205      	movs	r2, #5
 80185bc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	0c1b      	lsrs	r3, r3, #16
 80185c2:	b2db      	uxtb	r3, r3
 80185c4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	0a1b      	lsrs	r3, r3, #8
 80185ca:	b2db      	uxtb	r3, r3
 80185cc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	b2db      	uxtb	r3, r3
 80185d2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80185d4:	f107 030c 	add.w	r3, r7, #12
 80185d8:	2203      	movs	r2, #3
 80185da:	4619      	mov	r1, r3
 80185dc:	2082      	movs	r0, #130	; 0x82
 80185de:	f000 fd69 	bl	80190b4 <SUBGRF_WriteCommand>
}
 80185e2:	bf00      	nop
 80185e4:	3710      	adds	r7, #16
 80185e6:	46bd      	mov	sp, r7
 80185e8:	bd80      	pop	{r7, pc}
 80185ea:	bf00      	nop
 80185ec:	20000ed4 	.word	0x20000ed4

080185f0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b084      	sub	sp, #16
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80185f8:	4b0e      	ldr	r3, [pc, #56]	; (8018634 <SUBGRF_SetRxBoosted+0x44>)
 80185fa:	2205      	movs	r2, #5
 80185fc:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80185fe:	2197      	movs	r1, #151	; 0x97
 8018600:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8018604:	f000 fca6 	bl	8018f54 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	0c1b      	lsrs	r3, r3, #16
 801860c:	b2db      	uxtb	r3, r3
 801860e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	0a1b      	lsrs	r3, r3, #8
 8018614:	b2db      	uxtb	r3, r3
 8018616:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	b2db      	uxtb	r3, r3
 801861c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801861e:	f107 030c 	add.w	r3, r7, #12
 8018622:	2203      	movs	r2, #3
 8018624:	4619      	mov	r1, r3
 8018626:	2082      	movs	r0, #130	; 0x82
 8018628:	f000 fd44 	bl	80190b4 <SUBGRF_WriteCommand>
}
 801862c:	bf00      	nop
 801862e:	3710      	adds	r7, #16
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}
 8018634:	20000ed4 	.word	0x20000ed4

08018638 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b084      	sub	sp, #16
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	0c1b      	lsrs	r3, r3, #16
 8018646:	b2db      	uxtb	r3, r3
 8018648:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	0a1b      	lsrs	r3, r3, #8
 801864e:	b2db      	uxtb	r3, r3
 8018650:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	b2db      	uxtb	r3, r3
 8018656:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018658:	683b      	ldr	r3, [r7, #0]
 801865a:	0c1b      	lsrs	r3, r3, #16
 801865c:	b2db      	uxtb	r3, r3
 801865e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018660:	683b      	ldr	r3, [r7, #0]
 8018662:	0a1b      	lsrs	r3, r3, #8
 8018664:	b2db      	uxtb	r3, r3
 8018666:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018668:	683b      	ldr	r3, [r7, #0]
 801866a:	b2db      	uxtb	r3, r3
 801866c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801866e:	f107 0308 	add.w	r3, r7, #8
 8018672:	2206      	movs	r2, #6
 8018674:	4619      	mov	r1, r3
 8018676:	2094      	movs	r0, #148	; 0x94
 8018678:	f000 fd1c 	bl	80190b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801867c:	4b03      	ldr	r3, [pc, #12]	; (801868c <SUBGRF_SetRxDutyCycle+0x54>)
 801867e:	2206      	movs	r2, #6
 8018680:	701a      	strb	r2, [r3, #0]
}
 8018682:	bf00      	nop
 8018684:	3710      	adds	r7, #16
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}
 801868a:	bf00      	nop
 801868c:	20000ed4 	.word	0x20000ed4

08018690 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018690:	b580      	push	{r7, lr}
 8018692:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018694:	2200      	movs	r2, #0
 8018696:	2100      	movs	r1, #0
 8018698:	20c5      	movs	r0, #197	; 0xc5
 801869a:	f000 fd0b 	bl	80190b4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801869e:	4b02      	ldr	r3, [pc, #8]	; (80186a8 <SUBGRF_SetCad+0x18>)
 80186a0:	2207      	movs	r2, #7
 80186a2:	701a      	strb	r2, [r3, #0]
}
 80186a4:	bf00      	nop
 80186a6:	bd80      	pop	{r7, pc}
 80186a8:	20000ed4 	.word	0x20000ed4

080186ac <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80186b0:	2200      	movs	r2, #0
 80186b2:	2100      	movs	r1, #0
 80186b4:	20d1      	movs	r0, #209	; 0xd1
 80186b6:	f000 fcfd 	bl	80190b4 <SUBGRF_WriteCommand>
}
 80186ba:	bf00      	nop
 80186bc:	bd80      	pop	{r7, pc}

080186be <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80186be:	b580      	push	{r7, lr}
 80186c0:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80186c2:	2200      	movs	r2, #0
 80186c4:	2100      	movs	r1, #0
 80186c6:	20d2      	movs	r0, #210	; 0xd2
 80186c8:	f000 fcf4 	bl	80190b4 <SUBGRF_WriteCommand>
}
 80186cc:	bf00      	nop
 80186ce:	bd80      	pop	{r7, pc}

080186d0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b082      	sub	sp, #8
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	4603      	mov	r3, r0
 80186d8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80186da:	1dfb      	adds	r3, r7, #7
 80186dc:	2201      	movs	r2, #1
 80186de:	4619      	mov	r1, r3
 80186e0:	209f      	movs	r0, #159	; 0x9f
 80186e2:	f000 fce7 	bl	80190b4 <SUBGRF_WriteCommand>
}
 80186e6:	bf00      	nop
 80186e8:	3708      	adds	r7, #8
 80186ea:	46bd      	mov	sp, r7
 80186ec:	bd80      	pop	{r7, pc}

080186ee <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 80186ee:	b580      	push	{r7, lr}
 80186f0:	b084      	sub	sp, #16
 80186f2:	af00      	add	r7, sp, #0
 80186f4:	4603      	mov	r3, r0
 80186f6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80186f8:	1dfb      	adds	r3, r7, #7
 80186fa:	2201      	movs	r2, #1
 80186fc:	4619      	mov	r1, r3
 80186fe:	20a0      	movs	r0, #160	; 0xa0
 8018700:	f000 fcd8 	bl	80190b4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018704:	79fb      	ldrb	r3, [r7, #7]
 8018706:	2b3f      	cmp	r3, #63	; 0x3f
 8018708:	d91c      	bls.n	8018744 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801870a:	79fb      	ldrb	r3, [r7, #7]
 801870c:	085b      	lsrs	r3, r3, #1
 801870e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018710:	2300      	movs	r3, #0
 8018712:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018714:	2300      	movs	r3, #0
 8018716:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018718:	e005      	b.n	8018726 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801871a:	7bfb      	ldrb	r3, [r7, #15]
 801871c:	089b      	lsrs	r3, r3, #2
 801871e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018720:	7bbb      	ldrb	r3, [r7, #14]
 8018722:	3301      	adds	r3, #1
 8018724:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018726:	7bfb      	ldrb	r3, [r7, #15]
 8018728:	2b1f      	cmp	r3, #31
 801872a:	d8f6      	bhi.n	801871a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801872c:	7bfb      	ldrb	r3, [r7, #15]
 801872e:	00db      	lsls	r3, r3, #3
 8018730:	b2da      	uxtb	r2, r3
 8018732:	7bbb      	ldrb	r3, [r7, #14]
 8018734:	4413      	add	r3, r2
 8018736:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018738:	7b7b      	ldrb	r3, [r7, #13]
 801873a:	4619      	mov	r1, r3
 801873c:	f240 7006 	movw	r0, #1798	; 0x706
 8018740:	f000 fc08 	bl	8018f54 <SUBGRF_WriteRegister>
    }
}
 8018744:	bf00      	nop
 8018746:	3710      	adds	r7, #16
 8018748:	46bd      	mov	sp, r7
 801874a:	bd80      	pop	{r7, pc}

0801874c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b082      	sub	sp, #8
 8018750:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018752:	f7f2 f894 	bl	800a87e <RBI_IsDCDC>
 8018756:	4603      	mov	r3, r0
 8018758:	2b01      	cmp	r3, #1
 801875a:	d102      	bne.n	8018762 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801875c:	2301      	movs	r3, #1
 801875e:	71fb      	strb	r3, [r7, #7]
 8018760:	e001      	b.n	8018766 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018762:	2300      	movs	r3, #0
 8018764:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018766:	1dfb      	adds	r3, r7, #7
 8018768:	2201      	movs	r2, #1
 801876a:	4619      	mov	r1, r3
 801876c:	2096      	movs	r0, #150	; 0x96
 801876e:	f000 fca1 	bl	80190b4 <SUBGRF_WriteCommand>
}
 8018772:	bf00      	nop
 8018774:	3708      	adds	r7, #8
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}

0801877a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801877a:	b580      	push	{r7, lr}
 801877c:	b084      	sub	sp, #16
 801877e:	af00      	add	r7, sp, #0
 8018780:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018782:	793b      	ldrb	r3, [r7, #4]
 8018784:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018788:	b2db      	uxtb	r3, r3
 801878a:	019b      	lsls	r3, r3, #6
 801878c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801878e:	793b      	ldrb	r3, [r7, #4]
 8018790:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018794:	b2db      	uxtb	r3, r3
 8018796:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018798:	b25b      	sxtb	r3, r3
 801879a:	4313      	orrs	r3, r2
 801879c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801879e:	793b      	ldrb	r3, [r7, #4]
 80187a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80187a4:	b2db      	uxtb	r3, r3
 80187a6:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80187a8:	b25b      	sxtb	r3, r3
 80187aa:	4313      	orrs	r3, r2
 80187ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80187ae:	793b      	ldrb	r3, [r7, #4]
 80187b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80187b4:	b2db      	uxtb	r3, r3
 80187b6:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80187b8:	b25b      	sxtb	r3, r3
 80187ba:	4313      	orrs	r3, r2
 80187bc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80187be:	793b      	ldrb	r3, [r7, #4]
 80187c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80187c4:	b2db      	uxtb	r3, r3
 80187c6:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80187c8:	b25b      	sxtb	r3, r3
 80187ca:	4313      	orrs	r3, r2
 80187cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80187ce:	793b      	ldrb	r3, [r7, #4]
 80187d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80187d4:	b2db      	uxtb	r3, r3
 80187d6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80187d8:	b25b      	sxtb	r3, r3
 80187da:	4313      	orrs	r3, r2
 80187dc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80187de:	793b      	ldrb	r3, [r7, #4]
 80187e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80187e4:	b2db      	uxtb	r3, r3
 80187e6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80187e8:	4313      	orrs	r3, r2
 80187ea:	b25b      	sxtb	r3, r3
 80187ec:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80187ee:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80187f0:	f107 030f 	add.w	r3, r7, #15
 80187f4:	2201      	movs	r2, #1
 80187f6:	4619      	mov	r1, r3
 80187f8:	2089      	movs	r0, #137	; 0x89
 80187fa:	f000 fc5b 	bl	80190b4 <SUBGRF_WriteCommand>
}
 80187fe:	bf00      	nop
 8018800:	3710      	adds	r7, #16
 8018802:	46bd      	mov	sp, r7
 8018804:	bd80      	pop	{r7, pc}
	...

08018808 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b084      	sub	sp, #16
 801880c:	af00      	add	r7, sp, #0
 801880e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	4a1b      	ldr	r2, [pc, #108]	; (8018880 <SUBGRF_CalibrateImage+0x78>)
 8018814:	4293      	cmp	r3, r2
 8018816:	d904      	bls.n	8018822 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018818:	23e1      	movs	r3, #225	; 0xe1
 801881a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801881c:	23e9      	movs	r3, #233	; 0xe9
 801881e:	737b      	strb	r3, [r7, #13]
 8018820:	e022      	b.n	8018868 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	4a17      	ldr	r2, [pc, #92]	; (8018884 <SUBGRF_CalibrateImage+0x7c>)
 8018826:	4293      	cmp	r3, r2
 8018828:	d904      	bls.n	8018834 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801882a:	23d7      	movs	r3, #215	; 0xd7
 801882c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801882e:	23db      	movs	r3, #219	; 0xdb
 8018830:	737b      	strb	r3, [r7, #13]
 8018832:	e019      	b.n	8018868 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	4a14      	ldr	r2, [pc, #80]	; (8018888 <SUBGRF_CalibrateImage+0x80>)
 8018838:	4293      	cmp	r3, r2
 801883a:	d904      	bls.n	8018846 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801883c:	23c1      	movs	r3, #193	; 0xc1
 801883e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018840:	23c5      	movs	r3, #197	; 0xc5
 8018842:	737b      	strb	r3, [r7, #13]
 8018844:	e010      	b.n	8018868 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	4a10      	ldr	r2, [pc, #64]	; (801888c <SUBGRF_CalibrateImage+0x84>)
 801884a:	4293      	cmp	r3, r2
 801884c:	d904      	bls.n	8018858 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801884e:	2375      	movs	r3, #117	; 0x75
 8018850:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018852:	2381      	movs	r3, #129	; 0x81
 8018854:	737b      	strb	r3, [r7, #13]
 8018856:	e007      	b.n	8018868 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	4a0d      	ldr	r2, [pc, #52]	; (8018890 <SUBGRF_CalibrateImage+0x88>)
 801885c:	4293      	cmp	r3, r2
 801885e:	d903      	bls.n	8018868 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018860:	236b      	movs	r3, #107	; 0x6b
 8018862:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018864:	236f      	movs	r3, #111	; 0x6f
 8018866:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018868:	f107 030c 	add.w	r3, r7, #12
 801886c:	2202      	movs	r2, #2
 801886e:	4619      	mov	r1, r3
 8018870:	2098      	movs	r0, #152	; 0x98
 8018872:	f000 fc1f 	bl	80190b4 <SUBGRF_WriteCommand>
}
 8018876:	bf00      	nop
 8018878:	3710      	adds	r7, #16
 801887a:	46bd      	mov	sp, r7
 801887c:	bd80      	pop	{r7, pc}
 801887e:	bf00      	nop
 8018880:	35a4e900 	.word	0x35a4e900
 8018884:	32a9f880 	.word	0x32a9f880
 8018888:	2de54480 	.word	0x2de54480
 801888c:	1b6b0b00 	.word	0x1b6b0b00
 8018890:	1954fc40 	.word	0x1954fc40

08018894 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018894:	b590      	push	{r4, r7, lr}
 8018896:	b085      	sub	sp, #20
 8018898:	af00      	add	r7, sp, #0
 801889a:	4604      	mov	r4, r0
 801889c:	4608      	mov	r0, r1
 801889e:	4611      	mov	r1, r2
 80188a0:	461a      	mov	r2, r3
 80188a2:	4623      	mov	r3, r4
 80188a4:	71fb      	strb	r3, [r7, #7]
 80188a6:	4603      	mov	r3, r0
 80188a8:	71bb      	strb	r3, [r7, #6]
 80188aa:	460b      	mov	r3, r1
 80188ac:	717b      	strb	r3, [r7, #5]
 80188ae:	4613      	mov	r3, r2
 80188b0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80188b2:	79fb      	ldrb	r3, [r7, #7]
 80188b4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80188b6:	79bb      	ldrb	r3, [r7, #6]
 80188b8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80188ba:	797b      	ldrb	r3, [r7, #5]
 80188bc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80188be:	793b      	ldrb	r3, [r7, #4]
 80188c0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80188c2:	f107 030c 	add.w	r3, r7, #12
 80188c6:	2204      	movs	r2, #4
 80188c8:	4619      	mov	r1, r3
 80188ca:	2095      	movs	r0, #149	; 0x95
 80188cc:	f000 fbf2 	bl	80190b4 <SUBGRF_WriteCommand>
}
 80188d0:	bf00      	nop
 80188d2:	3714      	adds	r7, #20
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd90      	pop	{r4, r7, pc}

080188d8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80188d8:	b590      	push	{r4, r7, lr}
 80188da:	b085      	sub	sp, #20
 80188dc:	af00      	add	r7, sp, #0
 80188de:	4604      	mov	r4, r0
 80188e0:	4608      	mov	r0, r1
 80188e2:	4611      	mov	r1, r2
 80188e4:	461a      	mov	r2, r3
 80188e6:	4623      	mov	r3, r4
 80188e8:	80fb      	strh	r3, [r7, #6]
 80188ea:	4603      	mov	r3, r0
 80188ec:	80bb      	strh	r3, [r7, #4]
 80188ee:	460b      	mov	r3, r1
 80188f0:	807b      	strh	r3, [r7, #2]
 80188f2:	4613      	mov	r3, r2
 80188f4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80188f6:	88fb      	ldrh	r3, [r7, #6]
 80188f8:	0a1b      	lsrs	r3, r3, #8
 80188fa:	b29b      	uxth	r3, r3
 80188fc:	b2db      	uxtb	r3, r3
 80188fe:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018900:	88fb      	ldrh	r3, [r7, #6]
 8018902:	b2db      	uxtb	r3, r3
 8018904:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018906:	88bb      	ldrh	r3, [r7, #4]
 8018908:	0a1b      	lsrs	r3, r3, #8
 801890a:	b29b      	uxth	r3, r3
 801890c:	b2db      	uxtb	r3, r3
 801890e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018910:	88bb      	ldrh	r3, [r7, #4]
 8018912:	b2db      	uxtb	r3, r3
 8018914:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018916:	887b      	ldrh	r3, [r7, #2]
 8018918:	0a1b      	lsrs	r3, r3, #8
 801891a:	b29b      	uxth	r3, r3
 801891c:	b2db      	uxtb	r3, r3
 801891e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018920:	887b      	ldrh	r3, [r7, #2]
 8018922:	b2db      	uxtb	r3, r3
 8018924:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018926:	883b      	ldrh	r3, [r7, #0]
 8018928:	0a1b      	lsrs	r3, r3, #8
 801892a:	b29b      	uxth	r3, r3
 801892c:	b2db      	uxtb	r3, r3
 801892e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018930:	883b      	ldrh	r3, [r7, #0]
 8018932:	b2db      	uxtb	r3, r3
 8018934:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018936:	f107 0308 	add.w	r3, r7, #8
 801893a:	2208      	movs	r2, #8
 801893c:	4619      	mov	r1, r3
 801893e:	2008      	movs	r0, #8
 8018940:	f000 fbb8 	bl	80190b4 <SUBGRF_WriteCommand>
}
 8018944:	bf00      	nop
 8018946:	3714      	adds	r7, #20
 8018948:	46bd      	mov	sp, r7
 801894a:	bd90      	pop	{r4, r7, pc}

0801894c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801894c:	b580      	push	{r7, lr}
 801894e:	b084      	sub	sp, #16
 8018950:	af00      	add	r7, sp, #0
 8018952:	4603      	mov	r3, r0
 8018954:	6039      	str	r1, [r7, #0]
 8018956:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018958:	79fb      	ldrb	r3, [r7, #7]
 801895a:	f003 0307 	and.w	r3, r3, #7
 801895e:	b2db      	uxtb	r3, r3
 8018960:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018962:	683b      	ldr	r3, [r7, #0]
 8018964:	0c1b      	lsrs	r3, r3, #16
 8018966:	b2db      	uxtb	r3, r3
 8018968:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801896a:	683b      	ldr	r3, [r7, #0]
 801896c:	0a1b      	lsrs	r3, r3, #8
 801896e:	b2db      	uxtb	r3, r3
 8018970:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	b2db      	uxtb	r3, r3
 8018976:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018978:	f107 030c 	add.w	r3, r7, #12
 801897c:	2204      	movs	r2, #4
 801897e:	4619      	mov	r1, r3
 8018980:	2097      	movs	r0, #151	; 0x97
 8018982:	f000 fb97 	bl	80190b4 <SUBGRF_WriteCommand>
}
 8018986:	bf00      	nop
 8018988:	3710      	adds	r7, #16
 801898a:	46bd      	mov	sp, r7
 801898c:	bd80      	pop	{r7, pc}
	...

08018990 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018990:	b5b0      	push	{r4, r5, r7, lr}
 8018992:	b084      	sub	sp, #16
 8018994:	af00      	add	r7, sp, #0
 8018996:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018998:	2300      	movs	r3, #0
 801899a:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801899c:	4b1b      	ldr	r3, [pc, #108]	; (8018a0c <SUBGRF_SetRfFrequency+0x7c>)
 801899e:	781b      	ldrb	r3, [r3, #0]
 80189a0:	f083 0301 	eor.w	r3, r3, #1
 80189a4:	b2db      	uxtb	r3, r3
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d005      	beq.n	80189b6 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 80189aa:	6878      	ldr	r0, [r7, #4]
 80189ac:	f7ff ff2c 	bl	8018808 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80189b0:	4b16      	ldr	r3, [pc, #88]	; (8018a0c <SUBGRF_SetRfFrequency+0x7c>)
 80189b2:	2201      	movs	r2, #1
 80189b4:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	461a      	mov	r2, r3
 80189ba:	f04f 0300 	mov.w	r3, #0
 80189be:	09d5      	lsrs	r5, r2, #7
 80189c0:	0654      	lsls	r4, r2, #25
 80189c2:	4a13      	ldr	r2, [pc, #76]	; (8018a10 <SUBGRF_SetRfFrequency+0x80>)
 80189c4:	f04f 0300 	mov.w	r3, #0
 80189c8:	4620      	mov	r0, r4
 80189ca:	4629      	mov	r1, r5
 80189cc:	f7e8 f8c6 	bl	8000b5c <__aeabi_uldivmod>
 80189d0:	4602      	mov	r2, r0
 80189d2:	460b      	mov	r3, r1
 80189d4:	4613      	mov	r3, r2
 80189d6:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	0e1b      	lsrs	r3, r3, #24
 80189dc:	b2db      	uxtb	r3, r3
 80189de:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	0c1b      	lsrs	r3, r3, #16
 80189e4:	b2db      	uxtb	r3, r3
 80189e6:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	0a1b      	lsrs	r3, r3, #8
 80189ec:	b2db      	uxtb	r3, r3
 80189ee:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	b2db      	uxtb	r3, r3
 80189f4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80189f6:	f107 0308 	add.w	r3, r7, #8
 80189fa:	2204      	movs	r2, #4
 80189fc:	4619      	mov	r1, r3
 80189fe:	2086      	movs	r0, #134	; 0x86
 8018a00:	f000 fb58 	bl	80190b4 <SUBGRF_WriteCommand>
}
 8018a04:	bf00      	nop
 8018a06:	3710      	adds	r7, #16
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8018a0c:	20000edc 	.word	0x20000edc
 8018a10:	01e84800 	.word	0x01e84800

08018a14 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	b082      	sub	sp, #8
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	4603      	mov	r3, r0
 8018a1c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018a1e:	79fa      	ldrb	r2, [r7, #7]
 8018a20:	4b09      	ldr	r3, [pc, #36]	; (8018a48 <SUBGRF_SetPacketType+0x34>)
 8018a22:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018a24:	79fb      	ldrb	r3, [r7, #7]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d104      	bne.n	8018a34 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018a2a:	2100      	movs	r1, #0
 8018a2c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018a30:	f000 fa90 	bl	8018f54 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018a34:	1dfb      	adds	r3, r7, #7
 8018a36:	2201      	movs	r2, #1
 8018a38:	4619      	mov	r1, r3
 8018a3a:	208a      	movs	r0, #138	; 0x8a
 8018a3c:	f000 fb3a 	bl	80190b4 <SUBGRF_WriteCommand>
}
 8018a40:	bf00      	nop
 8018a42:	3708      	adds	r7, #8
 8018a44:	46bd      	mov	sp, r7
 8018a46:	bd80      	pop	{r7, pc}
 8018a48:	20000ed5 	.word	0x20000ed5

08018a4c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018a4c:	b480      	push	{r7}
 8018a4e:	af00      	add	r7, sp, #0
    return PacketType;
 8018a50:	4b02      	ldr	r3, [pc, #8]	; (8018a5c <SUBGRF_GetPacketType+0x10>)
 8018a52:	781b      	ldrb	r3, [r3, #0]
}
 8018a54:	4618      	mov	r0, r3
 8018a56:	46bd      	mov	sp, r7
 8018a58:	bc80      	pop	{r7}
 8018a5a:	4770      	bx	lr
 8018a5c:	20000ed5 	.word	0x20000ed5

08018a60 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b084      	sub	sp, #16
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	4603      	mov	r3, r0
 8018a68:	71fb      	strb	r3, [r7, #7]
 8018a6a:	460b      	mov	r3, r1
 8018a6c:	71bb      	strb	r3, [r7, #6]
 8018a6e:	4613      	mov	r3, r2
 8018a70:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8018a72:	79fb      	ldrb	r3, [r7, #7]
 8018a74:	2b01      	cmp	r3, #1
 8018a76:	d124      	bne.n	8018ac2 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8018a78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018a7c:	2b0f      	cmp	r3, #15
 8018a7e:	d106      	bne.n	8018a8e <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8018a80:	2301      	movs	r3, #1
 8018a82:	2201      	movs	r2, #1
 8018a84:	2100      	movs	r1, #0
 8018a86:	2006      	movs	r0, #6
 8018a88:	f7ff ff04 	bl	8018894 <SUBGRF_SetPaConfig>
 8018a8c:	e005      	b.n	8018a9a <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8018a8e:	2301      	movs	r3, #1
 8018a90:	2201      	movs	r2, #1
 8018a92:	2100      	movs	r1, #0
 8018a94:	2004      	movs	r0, #4
 8018a96:	f7ff fefd 	bl	8018894 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8018a9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018a9e:	2b0d      	cmp	r3, #13
 8018aa0:	dd02      	ble.n	8018aa8 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8018aa2:	230e      	movs	r3, #14
 8018aa4:	71bb      	strb	r3, [r7, #6]
 8018aa6:	e006      	b.n	8018ab6 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8018aa8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018aac:	f113 0f11 	cmn.w	r3, #17
 8018ab0:	da01      	bge.n	8018ab6 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8018ab2:	23ef      	movs	r3, #239	; 0xef
 8018ab4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8018ab6:	2118      	movs	r1, #24
 8018ab8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018abc:	f000 fa4a 	bl	8018f54 <SUBGRF_WriteRegister>
 8018ac0:	e025      	b.n	8018b0e <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8018ac2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018ac6:	f000 fa59 	bl	8018f7c <SUBGRF_ReadRegister>
 8018aca:	4603      	mov	r3, r0
 8018acc:	f043 031e 	orr.w	r3, r3, #30
 8018ad0:	b2db      	uxtb	r3, r3
 8018ad2:	4619      	mov	r1, r3
 8018ad4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018ad8:	f000 fa3c 	bl	8018f54 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8018adc:	2301      	movs	r3, #1
 8018ade:	2200      	movs	r2, #0
 8018ae0:	2107      	movs	r1, #7
 8018ae2:	2004      	movs	r0, #4
 8018ae4:	f7ff fed6 	bl	8018894 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8018ae8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018aec:	2b16      	cmp	r3, #22
 8018aee:	dd02      	ble.n	8018af6 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8018af0:	2316      	movs	r3, #22
 8018af2:	71bb      	strb	r3, [r7, #6]
 8018af4:	e006      	b.n	8018b04 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8018af6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018afa:	f113 0f09 	cmn.w	r3, #9
 8018afe:	da01      	bge.n	8018b04 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8018b00:	23f7      	movs	r3, #247	; 0xf7
 8018b02:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8018b04:	2138      	movs	r1, #56	; 0x38
 8018b06:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018b0a:	f000 fa23 	bl	8018f54 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018b0e:	79bb      	ldrb	r3, [r7, #6]
 8018b10:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8018b12:	797b      	ldrb	r3, [r7, #5]
 8018b14:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8018b16:	f107 030c 	add.w	r3, r7, #12
 8018b1a:	2202      	movs	r2, #2
 8018b1c:	4619      	mov	r1, r3
 8018b1e:	208e      	movs	r0, #142	; 0x8e
 8018b20:	f000 fac8 	bl	80190b4 <SUBGRF_WriteCommand>
}
 8018b24:	bf00      	nop
 8018b26:	3710      	adds	r7, #16
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd80      	pop	{r7, pc}

08018b2c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018b2c:	b5b0      	push	{r4, r5, r7, lr}
 8018b2e:	b086      	sub	sp, #24
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018b34:	2300      	movs	r3, #0
 8018b36:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018b38:	4a5e      	ldr	r2, [pc, #376]	; (8018cb4 <SUBGRF_SetModulationParams+0x188>)
 8018b3a:	f107 0308 	add.w	r3, r7, #8
 8018b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b42:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	781a      	ldrb	r2, [r3, #0]
 8018b4a:	4b5b      	ldr	r3, [pc, #364]	; (8018cb8 <SUBGRF_SetModulationParams+0x18c>)
 8018b4c:	781b      	ldrb	r3, [r3, #0]
 8018b4e:	429a      	cmp	r2, r3
 8018b50:	d004      	beq.n	8018b5c <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	781b      	ldrb	r3, [r3, #0]
 8018b56:	4618      	mov	r0, r3
 8018b58:	f7ff ff5c 	bl	8018a14 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	781b      	ldrb	r3, [r3, #0]
 8018b60:	2b03      	cmp	r3, #3
 8018b62:	f200 80a2 	bhi.w	8018caa <SUBGRF_SetModulationParams+0x17e>
 8018b66:	a201      	add	r2, pc, #4	; (adr r2, 8018b6c <SUBGRF_SetModulationParams+0x40>)
 8018b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b6c:	08018b7d 	.word	0x08018b7d
 8018b70:	08018c39 	.word	0x08018c39
 8018b74:	08018bfb 	.word	0x08018bfb
 8018b78:	08018c67 	.word	0x08018c67
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018b7c:	2308      	movs	r3, #8
 8018b7e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	685b      	ldr	r3, [r3, #4]
 8018b84:	4a4d      	ldr	r2, [pc, #308]	; (8018cbc <SUBGRF_SetModulationParams+0x190>)
 8018b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b8a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018b8c:	697b      	ldr	r3, [r7, #20]
 8018b8e:	0c1b      	lsrs	r3, r3, #16
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018b94:	697b      	ldr	r3, [r7, #20]
 8018b96:	0a1b      	lsrs	r3, r3, #8
 8018b98:	b2db      	uxtb	r3, r3
 8018b9a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018b9c:	697b      	ldr	r3, [r7, #20]
 8018b9e:	b2db      	uxtb	r3, r3
 8018ba0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	7b1b      	ldrb	r3, [r3, #12]
 8018ba6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	7b5b      	ldrb	r3, [r3, #13]
 8018bac:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	689b      	ldr	r3, [r3, #8]
 8018bb2:	461a      	mov	r2, r3
 8018bb4:	f04f 0300 	mov.w	r3, #0
 8018bb8:	09d5      	lsrs	r5, r2, #7
 8018bba:	0654      	lsls	r4, r2, #25
 8018bbc:	4a40      	ldr	r2, [pc, #256]	; (8018cc0 <SUBGRF_SetModulationParams+0x194>)
 8018bbe:	f04f 0300 	mov.w	r3, #0
 8018bc2:	4620      	mov	r0, r4
 8018bc4:	4629      	mov	r1, r5
 8018bc6:	f7e7 ffc9 	bl	8000b5c <__aeabi_uldivmod>
 8018bca:	4602      	mov	r2, r0
 8018bcc:	460b      	mov	r3, r1
 8018bce:	4613      	mov	r3, r2
 8018bd0:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018bd2:	697b      	ldr	r3, [r7, #20]
 8018bd4:	0c1b      	lsrs	r3, r3, #16
 8018bd6:	b2db      	uxtb	r3, r3
 8018bd8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018bda:	697b      	ldr	r3, [r7, #20]
 8018bdc:	0a1b      	lsrs	r3, r3, #8
 8018bde:	b2db      	uxtb	r3, r3
 8018be0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018be2:	697b      	ldr	r3, [r7, #20]
 8018be4:	b2db      	uxtb	r3, r3
 8018be6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018be8:	7cfb      	ldrb	r3, [r7, #19]
 8018bea:	b29a      	uxth	r2, r3
 8018bec:	f107 0308 	add.w	r3, r7, #8
 8018bf0:	4619      	mov	r1, r3
 8018bf2:	208b      	movs	r0, #139	; 0x8b
 8018bf4:	f000 fa5e 	bl	80190b4 <SUBGRF_WriteCommand>
        break;
 8018bf8:	e058      	b.n	8018cac <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8018bfa:	2304      	movs	r3, #4
 8018bfc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	691b      	ldr	r3, [r3, #16]
 8018c02:	4a2e      	ldr	r2, [pc, #184]	; (8018cbc <SUBGRF_SetModulationParams+0x190>)
 8018c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c08:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018c0a:	697b      	ldr	r3, [r7, #20]
 8018c0c:	0c1b      	lsrs	r3, r3, #16
 8018c0e:	b2db      	uxtb	r3, r3
 8018c10:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018c12:	697b      	ldr	r3, [r7, #20]
 8018c14:	0a1b      	lsrs	r3, r3, #8
 8018c16:	b2db      	uxtb	r3, r3
 8018c18:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018c1a:	697b      	ldr	r3, [r7, #20]
 8018c1c:	b2db      	uxtb	r3, r3
 8018c1e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	7d1b      	ldrb	r3, [r3, #20]
 8018c24:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018c26:	7cfb      	ldrb	r3, [r7, #19]
 8018c28:	b29a      	uxth	r2, r3
 8018c2a:	f107 0308 	add.w	r3, r7, #8
 8018c2e:	4619      	mov	r1, r3
 8018c30:	208b      	movs	r0, #139	; 0x8b
 8018c32:	f000 fa3f 	bl	80190b4 <SUBGRF_WriteCommand>
        break;
 8018c36:	e039      	b.n	8018cac <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8018c38:	2304      	movs	r3, #4
 8018c3a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	7e1b      	ldrb	r3, [r3, #24]
 8018c40:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	7e5b      	ldrb	r3, [r3, #25]
 8018c46:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	7e9b      	ldrb	r3, [r3, #26]
 8018c4c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	7edb      	ldrb	r3, [r3, #27]
 8018c52:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018c54:	7cfb      	ldrb	r3, [r7, #19]
 8018c56:	b29a      	uxth	r2, r3
 8018c58:	f107 0308 	add.w	r3, r7, #8
 8018c5c:	4619      	mov	r1, r3
 8018c5e:	208b      	movs	r0, #139	; 0x8b
 8018c60:	f000 fa28 	bl	80190b4 <SUBGRF_WriteCommand>

        break;
 8018c64:	e022      	b.n	8018cac <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018c66:	2305      	movs	r3, #5
 8018c68:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	685b      	ldr	r3, [r3, #4]
 8018c6e:	4a13      	ldr	r2, [pc, #76]	; (8018cbc <SUBGRF_SetModulationParams+0x190>)
 8018c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c74:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018c76:	697b      	ldr	r3, [r7, #20]
 8018c78:	0c1b      	lsrs	r3, r3, #16
 8018c7a:	b2db      	uxtb	r3, r3
 8018c7c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018c7e:	697b      	ldr	r3, [r7, #20]
 8018c80:	0a1b      	lsrs	r3, r3, #8
 8018c82:	b2db      	uxtb	r3, r3
 8018c84:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018c86:	697b      	ldr	r3, [r7, #20]
 8018c88:	b2db      	uxtb	r3, r3
 8018c8a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	7b1b      	ldrb	r3, [r3, #12]
 8018c90:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	7b5b      	ldrb	r3, [r3, #13]
 8018c96:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018c98:	7cfb      	ldrb	r3, [r7, #19]
 8018c9a:	b29a      	uxth	r2, r3
 8018c9c:	f107 0308 	add.w	r3, r7, #8
 8018ca0:	4619      	mov	r1, r3
 8018ca2:	208b      	movs	r0, #139	; 0x8b
 8018ca4:	f000 fa06 	bl	80190b4 <SUBGRF_WriteCommand>
        break;
 8018ca8:	e000      	b.n	8018cac <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8018caa:	bf00      	nop
    }
}
 8018cac:	bf00      	nop
 8018cae:	3718      	adds	r7, #24
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8018cb4:	0801b358 	.word	0x0801b358
 8018cb8:	20000ed5 	.word	0x20000ed5
 8018cbc:	3d090000 	.word	0x3d090000
 8018cc0:	01e84800 	.word	0x01e84800

08018cc4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b086      	sub	sp, #24
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8018ccc:	2300      	movs	r3, #0
 8018cce:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018cd0:	4a48      	ldr	r2, [pc, #288]	; (8018df4 <SUBGRF_SetPacketParams+0x130>)
 8018cd2:	f107 030c 	add.w	r3, r7, #12
 8018cd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8018cd8:	c303      	stmia	r3!, {r0, r1}
 8018cda:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	781a      	ldrb	r2, [r3, #0]
 8018ce0:	4b45      	ldr	r3, [pc, #276]	; (8018df8 <SUBGRF_SetPacketParams+0x134>)
 8018ce2:	781b      	ldrb	r3, [r3, #0]
 8018ce4:	429a      	cmp	r2, r3
 8018ce6:	d004      	beq.n	8018cf2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	781b      	ldrb	r3, [r3, #0]
 8018cec:	4618      	mov	r0, r3
 8018cee:	f7ff fe91 	bl	8018a14 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	781b      	ldrb	r3, [r3, #0]
 8018cf6:	2b03      	cmp	r3, #3
 8018cf8:	d878      	bhi.n	8018dec <SUBGRF_SetPacketParams+0x128>
 8018cfa:	a201      	add	r2, pc, #4	; (adr r2, 8018d00 <SUBGRF_SetPacketParams+0x3c>)
 8018cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d00:	08018d11 	.word	0x08018d11
 8018d04:	08018da1 	.word	0x08018da1
 8018d08:	08018d95 	.word	0x08018d95
 8018d0c:	08018d11 	.word	0x08018d11
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	7a5b      	ldrb	r3, [r3, #9]
 8018d14:	2bf1      	cmp	r3, #241	; 0xf1
 8018d16:	d10a      	bne.n	8018d2e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8018d18:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018d1c:	f7ff fb20 	bl	8018360 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018d20:	f248 0005 	movw	r0, #32773	; 0x8005
 8018d24:	f7ff fb3c 	bl	80183a0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8018d28:	2302      	movs	r3, #2
 8018d2a:	75bb      	strb	r3, [r7, #22]
 8018d2c:	e011      	b.n	8018d52 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	7a5b      	ldrb	r3, [r3, #9]
 8018d32:	2bf2      	cmp	r3, #242	; 0xf2
 8018d34:	d10a      	bne.n	8018d4c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8018d36:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8018d3a:	f7ff fb11 	bl	8018360 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8018d3e:	f241 0021 	movw	r0, #4129	; 0x1021
 8018d42:	f7ff fb2d 	bl	80183a0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8018d46:	2306      	movs	r3, #6
 8018d48:	75bb      	strb	r3, [r7, #22]
 8018d4a:	e002      	b.n	8018d52 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	7a5b      	ldrb	r3, [r3, #9]
 8018d50:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8018d52:	2309      	movs	r3, #9
 8018d54:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	885b      	ldrh	r3, [r3, #2]
 8018d5a:	0a1b      	lsrs	r3, r3, #8
 8018d5c:	b29b      	uxth	r3, r3
 8018d5e:	b2db      	uxtb	r3, r3
 8018d60:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	885b      	ldrh	r3, [r3, #2]
 8018d66:	b2db      	uxtb	r3, r3
 8018d68:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	791b      	ldrb	r3, [r3, #4]
 8018d6e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	795b      	ldrb	r3, [r3, #5]
 8018d74:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	799b      	ldrb	r3, [r3, #6]
 8018d7a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	79db      	ldrb	r3, [r3, #7]
 8018d80:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	7a1b      	ldrb	r3, [r3, #8]
 8018d86:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8018d88:	7dbb      	ldrb	r3, [r7, #22]
 8018d8a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	7a9b      	ldrb	r3, [r3, #10]
 8018d90:	753b      	strb	r3, [r7, #20]
        break;
 8018d92:	e022      	b.n	8018dda <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8018d94:	2301      	movs	r3, #1
 8018d96:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	7b1b      	ldrb	r3, [r3, #12]
 8018d9c:	733b      	strb	r3, [r7, #12]
        break;
 8018d9e:	e01c      	b.n	8018dda <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8018da0:	2306      	movs	r3, #6
 8018da2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	89db      	ldrh	r3, [r3, #14]
 8018da8:	0a1b      	lsrs	r3, r3, #8
 8018daa:	b29b      	uxth	r3, r3
 8018dac:	b2db      	uxtb	r3, r3
 8018dae:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	89db      	ldrh	r3, [r3, #14]
 8018db4:	b2db      	uxtb	r3, r3
 8018db6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	7c1a      	ldrb	r2, [r3, #16]
 8018dbc:	4b0f      	ldr	r3, [pc, #60]	; (8018dfc <SUBGRF_SetPacketParams+0x138>)
 8018dbe:	4611      	mov	r1, r2
 8018dc0:	7019      	strb	r1, [r3, #0]
 8018dc2:	4613      	mov	r3, r2
 8018dc4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	7c5b      	ldrb	r3, [r3, #17]
 8018dca:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	7c9b      	ldrb	r3, [r3, #18]
 8018dd0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	7cdb      	ldrb	r3, [r3, #19]
 8018dd6:	747b      	strb	r3, [r7, #17]
        break;
 8018dd8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8018dda:	7dfb      	ldrb	r3, [r7, #23]
 8018ddc:	b29a      	uxth	r2, r3
 8018dde:	f107 030c 	add.w	r3, r7, #12
 8018de2:	4619      	mov	r1, r3
 8018de4:	208c      	movs	r0, #140	; 0x8c
 8018de6:	f000 f965 	bl	80190b4 <SUBGRF_WriteCommand>
 8018dea:	e000      	b.n	8018dee <SUBGRF_SetPacketParams+0x12a>
        return;
 8018dec:	bf00      	nop
}
 8018dee:	3718      	adds	r7, #24
 8018df0:	46bd      	mov	sp, r7
 8018df2:	bd80      	pop	{r7, pc}
 8018df4:	0801b360 	.word	0x0801b360
 8018df8:	20000ed5 	.word	0x20000ed5
 8018dfc:	20000ed6 	.word	0x20000ed6

08018e00 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b084      	sub	sp, #16
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	4603      	mov	r3, r0
 8018e08:	460a      	mov	r2, r1
 8018e0a:	71fb      	strb	r3, [r7, #7]
 8018e0c:	4613      	mov	r3, r2
 8018e0e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8018e10:	79fb      	ldrb	r3, [r7, #7]
 8018e12:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8018e14:	79bb      	ldrb	r3, [r7, #6]
 8018e16:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8018e18:	f107 030c 	add.w	r3, r7, #12
 8018e1c:	2202      	movs	r2, #2
 8018e1e:	4619      	mov	r1, r3
 8018e20:	208f      	movs	r0, #143	; 0x8f
 8018e22:	f000 f947 	bl	80190b4 <SUBGRF_WriteCommand>
}
 8018e26:	bf00      	nop
 8018e28:	3710      	adds	r7, #16
 8018e2a:	46bd      	mov	sp, r7
 8018e2c:	bd80      	pop	{r7, pc}

08018e2e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8018e2e:	b580      	push	{r7, lr}
 8018e30:	b082      	sub	sp, #8
 8018e32:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8018e34:	2300      	movs	r3, #0
 8018e36:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8018e38:	1d3b      	adds	r3, r7, #4
 8018e3a:	2201      	movs	r2, #1
 8018e3c:	4619      	mov	r1, r3
 8018e3e:	2015      	movs	r0, #21
 8018e40:	f000 f95a 	bl	80190f8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8018e44:	793b      	ldrb	r3, [r7, #4]
 8018e46:	425b      	negs	r3, r3
 8018e48:	105b      	asrs	r3, r3, #1
 8018e4a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8018e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8018e50:	4618      	mov	r0, r3
 8018e52:	3708      	adds	r7, #8
 8018e54:	46bd      	mov	sp, r7
 8018e56:	bd80      	pop	{r7, pc}

08018e58 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8018e58:	b580      	push	{r7, lr}
 8018e5a:	b084      	sub	sp, #16
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	6078      	str	r0, [r7, #4]
 8018e60:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8018e62:	f107 030c 	add.w	r3, r7, #12
 8018e66:	2202      	movs	r2, #2
 8018e68:	4619      	mov	r1, r3
 8018e6a:	2013      	movs	r0, #19
 8018e6c:	f000 f944 	bl	80190f8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8018e70:	f7ff fdec 	bl	8018a4c <SUBGRF_GetPacketType>
 8018e74:	4603      	mov	r3, r0
 8018e76:	2b01      	cmp	r3, #1
 8018e78:	d10d      	bne.n	8018e96 <SUBGRF_GetRxBufferStatus+0x3e>
 8018e7a:	4b0c      	ldr	r3, [pc, #48]	; (8018eac <SUBGRF_GetRxBufferStatus+0x54>)
 8018e7c:	781b      	ldrb	r3, [r3, #0]
 8018e7e:	b2db      	uxtb	r3, r3
 8018e80:	2b01      	cmp	r3, #1
 8018e82:	d108      	bne.n	8018e96 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8018e84:	f240 7002 	movw	r0, #1794	; 0x702
 8018e88:	f000 f878 	bl	8018f7c <SUBGRF_ReadRegister>
 8018e8c:	4603      	mov	r3, r0
 8018e8e:	461a      	mov	r2, r3
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	701a      	strb	r2, [r3, #0]
 8018e94:	e002      	b.n	8018e9c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8018e96:	7b3a      	ldrb	r2, [r7, #12]
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8018e9c:	7b7a      	ldrb	r2, [r7, #13]
 8018e9e:	683b      	ldr	r3, [r7, #0]
 8018ea0:	701a      	strb	r2, [r3, #0]
}
 8018ea2:	bf00      	nop
 8018ea4:	3710      	adds	r7, #16
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bd80      	pop	{r7, pc}
 8018eaa:	bf00      	nop
 8018eac:	20000ed6 	.word	0x20000ed6

08018eb0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	b084      	sub	sp, #16
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8018eb8:	f107 030c 	add.w	r3, r7, #12
 8018ebc:	2203      	movs	r2, #3
 8018ebe:	4619      	mov	r1, r3
 8018ec0:	2014      	movs	r0, #20
 8018ec2:	f000 f919 	bl	80190f8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8018ec6:	f7ff fdc1 	bl	8018a4c <SUBGRF_GetPacketType>
 8018eca:	4603      	mov	r3, r0
 8018ecc:	461a      	mov	r2, r3
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	781b      	ldrb	r3, [r3, #0]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d002      	beq.n	8018ee0 <SUBGRF_GetPacketStatus+0x30>
 8018eda:	2b01      	cmp	r3, #1
 8018edc:	d013      	beq.n	8018f06 <SUBGRF_GetPacketStatus+0x56>
 8018ede:	e02a      	b.n	8018f36 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8018ee0:	7b3a      	ldrb	r2, [r7, #12]
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8018ee6:	7b7b      	ldrb	r3, [r7, #13]
 8018ee8:	425b      	negs	r3, r3
 8018eea:	105b      	asrs	r3, r3, #1
 8018eec:	b25a      	sxtb	r2, r3
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8018ef2:	7bbb      	ldrb	r3, [r7, #14]
 8018ef4:	425b      	negs	r3, r3
 8018ef6:	105b      	asrs	r3, r3, #1
 8018ef8:	b25a      	sxtb	r2, r3
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	2200      	movs	r2, #0
 8018f02:	609a      	str	r2, [r3, #8]
            break;
 8018f04:	e020      	b.n	8018f48 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8018f06:	7b3b      	ldrb	r3, [r7, #12]
 8018f08:	425b      	negs	r3, r3
 8018f0a:	105b      	asrs	r3, r3, #1
 8018f0c:	b25a      	sxtb	r2, r3
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8018f12:	7b7b      	ldrb	r3, [r7, #13]
 8018f14:	b25b      	sxtb	r3, r3
 8018f16:	3302      	adds	r3, #2
 8018f18:	109b      	asrs	r3, r3, #2
 8018f1a:	b25a      	sxtb	r2, r3
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8018f20:	7bbb      	ldrb	r3, [r7, #14]
 8018f22:	425b      	negs	r3, r3
 8018f24:	105b      	asrs	r3, r3, #1
 8018f26:	b25a      	sxtb	r2, r3
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8018f2c:	4b08      	ldr	r3, [pc, #32]	; (8018f50 <SUBGRF_GetPacketStatus+0xa0>)
 8018f2e:	681a      	ldr	r2, [r3, #0]
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	611a      	str	r2, [r3, #16]
            break;
 8018f34:	e008      	b.n	8018f48 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8018f36:	2214      	movs	r2, #20
 8018f38:	2100      	movs	r1, #0
 8018f3a:	6878      	ldr	r0, [r7, #4]
 8018f3c:	f000 fbbf 	bl	80196be <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	220f      	movs	r2, #15
 8018f44:	701a      	strb	r2, [r3, #0]
            break;
 8018f46:	bf00      	nop
    }
}
 8018f48:	bf00      	nop
 8018f4a:	3710      	adds	r7, #16
 8018f4c:	46bd      	mov	sp, r7
 8018f4e:	bd80      	pop	{r7, pc}
 8018f50:	20000ed8 	.word	0x20000ed8

08018f54 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b082      	sub	sp, #8
 8018f58:	af00      	add	r7, sp, #0
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	460a      	mov	r2, r1
 8018f5e:	80fb      	strh	r3, [r7, #6]
 8018f60:	4613      	mov	r3, r2
 8018f62:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8018f64:	1d7a      	adds	r2, r7, #5
 8018f66:	88f9      	ldrh	r1, [r7, #6]
 8018f68:	2301      	movs	r3, #1
 8018f6a:	4803      	ldr	r0, [pc, #12]	; (8018f78 <SUBGRF_WriteRegister+0x24>)
 8018f6c:	f7ee fb8c 	bl	8007688 <HAL_SUBGHZ_WriteRegisters>
}
 8018f70:	bf00      	nop
 8018f72:	3708      	adds	r7, #8
 8018f74:	46bd      	mov	sp, r7
 8018f76:	bd80      	pop	{r7, pc}
 8018f78:	20001684 	.word	0x20001684

08018f7c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b084      	sub	sp, #16
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	4603      	mov	r3, r0
 8018f84:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8018f86:	f107 020f 	add.w	r2, r7, #15
 8018f8a:	88f9      	ldrh	r1, [r7, #6]
 8018f8c:	2301      	movs	r3, #1
 8018f8e:	4804      	ldr	r0, [pc, #16]	; (8018fa0 <SUBGRF_ReadRegister+0x24>)
 8018f90:	f7ee fbd9 	bl	8007746 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8018f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f96:	4618      	mov	r0, r3
 8018f98:	3710      	adds	r7, #16
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	bd80      	pop	{r7, pc}
 8018f9e:	bf00      	nop
 8018fa0:	20001684 	.word	0x20001684

08018fa4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b086      	sub	sp, #24
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	4603      	mov	r3, r0
 8018fac:	6039      	str	r1, [r7, #0]
 8018fae:	80fb      	strh	r3, [r7, #6]
 8018fb0:	4613      	mov	r3, r2
 8018fb2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8018fb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8018fba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018fbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018fbe:	b672      	cpsid	i
}
 8018fc0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8018fc2:	88bb      	ldrh	r3, [r7, #4]
 8018fc4:	88f9      	ldrh	r1, [r7, #6]
 8018fc6:	683a      	ldr	r2, [r7, #0]
 8018fc8:	4806      	ldr	r0, [pc, #24]	; (8018fe4 <SUBGRF_WriteRegisters+0x40>)
 8018fca:	f7ee fb5d 	bl	8007688 <HAL_SUBGHZ_WriteRegisters>
 8018fce:	697b      	ldr	r3, [r7, #20]
 8018fd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fd2:	693b      	ldr	r3, [r7, #16]
 8018fd4:	f383 8810 	msr	PRIMASK, r3
}
 8018fd8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018fda:	bf00      	nop
 8018fdc:	3718      	adds	r7, #24
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	bd80      	pop	{r7, pc}
 8018fe2:	bf00      	nop
 8018fe4:	20001684 	.word	0x20001684

08018fe8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b086      	sub	sp, #24
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	4603      	mov	r3, r0
 8018ff0:	6039      	str	r1, [r7, #0]
 8018ff2:	80fb      	strh	r3, [r7, #6]
 8018ff4:	4613      	mov	r3, r2
 8018ff6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8018ffc:	60fb      	str	r3, [r7, #12]
  return(result);
 8018ffe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019000:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019002:	b672      	cpsid	i
}
 8019004:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019006:	88bb      	ldrh	r3, [r7, #4]
 8019008:	88f9      	ldrh	r1, [r7, #6]
 801900a:	683a      	ldr	r2, [r7, #0]
 801900c:	4806      	ldr	r0, [pc, #24]	; (8019028 <SUBGRF_ReadRegisters+0x40>)
 801900e:	f7ee fb9a 	bl	8007746 <HAL_SUBGHZ_ReadRegisters>
 8019012:	697b      	ldr	r3, [r7, #20]
 8019014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019016:	693b      	ldr	r3, [r7, #16]
 8019018:	f383 8810 	msr	PRIMASK, r3
}
 801901c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801901e:	bf00      	nop
 8019020:	3718      	adds	r7, #24
 8019022:	46bd      	mov	sp, r7
 8019024:	bd80      	pop	{r7, pc}
 8019026:	bf00      	nop
 8019028:	20001684 	.word	0x20001684

0801902c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b086      	sub	sp, #24
 8019030:	af00      	add	r7, sp, #0
 8019032:	4603      	mov	r3, r0
 8019034:	6039      	str	r1, [r7, #0]
 8019036:	71fb      	strb	r3, [r7, #7]
 8019038:	4613      	mov	r3, r2
 801903a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801903c:	f3ef 8310 	mrs	r3, PRIMASK
 8019040:	60fb      	str	r3, [r7, #12]
  return(result);
 8019042:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019044:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019046:	b672      	cpsid	i
}
 8019048:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801904a:	79bb      	ldrb	r3, [r7, #6]
 801904c:	b29b      	uxth	r3, r3
 801904e:	79f9      	ldrb	r1, [r7, #7]
 8019050:	683a      	ldr	r2, [r7, #0]
 8019052:	4806      	ldr	r0, [pc, #24]	; (801906c <SUBGRF_WriteBuffer+0x40>)
 8019054:	f7ee fc8b 	bl	800796e <HAL_SUBGHZ_WriteBuffer>
 8019058:	697b      	ldr	r3, [r7, #20]
 801905a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801905c:	693b      	ldr	r3, [r7, #16]
 801905e:	f383 8810 	msr	PRIMASK, r3
}
 8019062:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019064:	bf00      	nop
 8019066:	3718      	adds	r7, #24
 8019068:	46bd      	mov	sp, r7
 801906a:	bd80      	pop	{r7, pc}
 801906c:	20001684 	.word	0x20001684

08019070 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019070:	b580      	push	{r7, lr}
 8019072:	b086      	sub	sp, #24
 8019074:	af00      	add	r7, sp, #0
 8019076:	4603      	mov	r3, r0
 8019078:	6039      	str	r1, [r7, #0]
 801907a:	71fb      	strb	r3, [r7, #7]
 801907c:	4613      	mov	r3, r2
 801907e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019080:	f3ef 8310 	mrs	r3, PRIMASK
 8019084:	60fb      	str	r3, [r7, #12]
  return(result);
 8019086:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019088:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801908a:	b672      	cpsid	i
}
 801908c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801908e:	79bb      	ldrb	r3, [r7, #6]
 8019090:	b29b      	uxth	r3, r3
 8019092:	79f9      	ldrb	r1, [r7, #7]
 8019094:	683a      	ldr	r2, [r7, #0]
 8019096:	4806      	ldr	r0, [pc, #24]	; (80190b0 <SUBGRF_ReadBuffer+0x40>)
 8019098:	f7ee fcbc 	bl	8007a14 <HAL_SUBGHZ_ReadBuffer>
 801909c:	697b      	ldr	r3, [r7, #20]
 801909e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190a0:	693b      	ldr	r3, [r7, #16]
 80190a2:	f383 8810 	msr	PRIMASK, r3
}
 80190a6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80190a8:	bf00      	nop
 80190aa:	3718      	adds	r7, #24
 80190ac:	46bd      	mov	sp, r7
 80190ae:	bd80      	pop	{r7, pc}
 80190b0:	20001684 	.word	0x20001684

080190b4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b086      	sub	sp, #24
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	4603      	mov	r3, r0
 80190bc:	6039      	str	r1, [r7, #0]
 80190be:	71fb      	strb	r3, [r7, #7]
 80190c0:	4613      	mov	r3, r2
 80190c2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190c4:	f3ef 8310 	mrs	r3, PRIMASK
 80190c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80190ca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80190cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80190ce:	b672      	cpsid	i
}
 80190d0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80190d2:	88bb      	ldrh	r3, [r7, #4]
 80190d4:	79f9      	ldrb	r1, [r7, #7]
 80190d6:	683a      	ldr	r2, [r7, #0]
 80190d8:	4806      	ldr	r0, [pc, #24]	; (80190f4 <SUBGRF_WriteCommand+0x40>)
 80190da:	f7ee fb95 	bl	8007808 <HAL_SUBGHZ_ExecSetCmd>
 80190de:	697b      	ldr	r3, [r7, #20]
 80190e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190e2:	693b      	ldr	r3, [r7, #16]
 80190e4:	f383 8810 	msr	PRIMASK, r3
}
 80190e8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80190ea:	bf00      	nop
 80190ec:	3718      	adds	r7, #24
 80190ee:	46bd      	mov	sp, r7
 80190f0:	bd80      	pop	{r7, pc}
 80190f2:	bf00      	nop
 80190f4:	20001684 	.word	0x20001684

080190f8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b086      	sub	sp, #24
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	4603      	mov	r3, r0
 8019100:	6039      	str	r1, [r7, #0]
 8019102:	71fb      	strb	r3, [r7, #7]
 8019104:	4613      	mov	r3, r2
 8019106:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019108:	f3ef 8310 	mrs	r3, PRIMASK
 801910c:	60fb      	str	r3, [r7, #12]
  return(result);
 801910e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019110:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019112:	b672      	cpsid	i
}
 8019114:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019116:	88bb      	ldrh	r3, [r7, #4]
 8019118:	79f9      	ldrb	r1, [r7, #7]
 801911a:	683a      	ldr	r2, [r7, #0]
 801911c:	4806      	ldr	r0, [pc, #24]	; (8019138 <SUBGRF_ReadCommand+0x40>)
 801911e:	f7ee fbd2 	bl	80078c6 <HAL_SUBGHZ_ExecGetCmd>
 8019122:	697b      	ldr	r3, [r7, #20]
 8019124:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019126:	693b      	ldr	r3, [r7, #16]
 8019128:	f383 8810 	msr	PRIMASK, r3
}
 801912c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801912e:	bf00      	nop
 8019130:	3718      	adds	r7, #24
 8019132:	46bd      	mov	sp, r7
 8019134:	bd80      	pop	{r7, pc}
 8019136:	bf00      	nop
 8019138:	20001684 	.word	0x20001684

0801913c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b084      	sub	sp, #16
 8019140:	af00      	add	r7, sp, #0
 8019142:	4603      	mov	r3, r0
 8019144:	460a      	mov	r2, r1
 8019146:	71fb      	strb	r3, [r7, #7]
 8019148:	4613      	mov	r3, r2
 801914a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801914c:	2301      	movs	r3, #1
 801914e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019150:	79bb      	ldrb	r3, [r7, #6]
 8019152:	2b01      	cmp	r3, #1
 8019154:	d10d      	bne.n	8019172 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019156:	79fb      	ldrb	r3, [r7, #7]
 8019158:	2b01      	cmp	r3, #1
 801915a:	d104      	bne.n	8019166 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801915c:	2302      	movs	r3, #2
 801915e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019160:	2004      	movs	r0, #4
 8019162:	f000 f8df 	bl	8019324 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019166:	79fb      	ldrb	r3, [r7, #7]
 8019168:	2b02      	cmp	r3, #2
 801916a:	d107      	bne.n	801917c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801916c:	2303      	movs	r3, #3
 801916e:	73fb      	strb	r3, [r7, #15]
 8019170:	e004      	b.n	801917c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019172:	79bb      	ldrb	r3, [r7, #6]
 8019174:	2b00      	cmp	r3, #0
 8019176:	d101      	bne.n	801917c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019178:	2301      	movs	r3, #1
 801917a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801917c:	7bfb      	ldrb	r3, [r7, #15]
 801917e:	4618      	mov	r0, r3
 8019180:	f7f1 fb61 	bl	800a846 <RBI_ConfigRFSwitch>
}
 8019184:	bf00      	nop
 8019186:	3710      	adds	r7, #16
 8019188:	46bd      	mov	sp, r7
 801918a:	bd80      	pop	{r7, pc}

0801918c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 801918c:	b580      	push	{r7, lr}
 801918e:	b084      	sub	sp, #16
 8019190:	af00      	add	r7, sp, #0
 8019192:	4603      	mov	r3, r0
 8019194:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019196:	2301      	movs	r3, #1
 8019198:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801919a:	f7f1 fb62 	bl	800a862 <RBI_GetTxConfig>
 801919e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80191a0:	68bb      	ldr	r3, [r7, #8]
 80191a2:	2b02      	cmp	r3, #2
 80191a4:	d016      	beq.n	80191d4 <SUBGRF_SetRfTxPower+0x48>
 80191a6:	68bb      	ldr	r3, [r7, #8]
 80191a8:	2b02      	cmp	r3, #2
 80191aa:	dc16      	bgt.n	80191da <SUBGRF_SetRfTxPower+0x4e>
 80191ac:	68bb      	ldr	r3, [r7, #8]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d003      	beq.n	80191ba <SUBGRF_SetRfTxPower+0x2e>
 80191b2:	68bb      	ldr	r3, [r7, #8]
 80191b4:	2b01      	cmp	r3, #1
 80191b6:	d00a      	beq.n	80191ce <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80191b8:	e00f      	b.n	80191da <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80191ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80191be:	2b0f      	cmp	r3, #15
 80191c0:	dd02      	ble.n	80191c8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80191c2:	2302      	movs	r3, #2
 80191c4:	73fb      	strb	r3, [r7, #15]
            break;
 80191c6:	e009      	b.n	80191dc <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80191c8:	2301      	movs	r3, #1
 80191ca:	73fb      	strb	r3, [r7, #15]
            break;
 80191cc:	e006      	b.n	80191dc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80191ce:	2301      	movs	r3, #1
 80191d0:	73fb      	strb	r3, [r7, #15]
            break;
 80191d2:	e003      	b.n	80191dc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80191d4:	2302      	movs	r3, #2
 80191d6:	73fb      	strb	r3, [r7, #15]
            break;
 80191d8:	e000      	b.n	80191dc <SUBGRF_SetRfTxPower+0x50>
            break;
 80191da:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80191dc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80191e0:	7bfb      	ldrb	r3, [r7, #15]
 80191e2:	2202      	movs	r2, #2
 80191e4:	4618      	mov	r0, r3
 80191e6:	f7ff fc3b 	bl	8018a60 <SUBGRF_SetTxParams>

    return paSelect;
 80191ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80191ec:	4618      	mov	r0, r3
 80191ee:	3710      	adds	r7, #16
 80191f0:	46bd      	mov	sp, r7
 80191f2:	bd80      	pop	{r7, pc}

080191f4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80191f4:	b480      	push	{r7}
 80191f6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80191f8:	2301      	movs	r3, #1
}
 80191fa:	4618      	mov	r0, r3
 80191fc:	46bd      	mov	sp, r7
 80191fe:	bc80      	pop	{r7}
 8019200:	4770      	bx	lr
	...

08019204 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019204:	b580      	push	{r7, lr}
 8019206:	b082      	sub	sp, #8
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801920c:	4b03      	ldr	r3, [pc, #12]	; (801921c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	2001      	movs	r0, #1
 8019212:	4798      	blx	r3
}
 8019214:	bf00      	nop
 8019216:	3708      	adds	r7, #8
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}
 801921c:	20000ee0 	.word	0x20000ee0

08019220 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b082      	sub	sp, #8
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019228:	4b03      	ldr	r3, [pc, #12]	; (8019238 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	2002      	movs	r0, #2
 801922e:	4798      	blx	r3
}
 8019230:	bf00      	nop
 8019232:	3708      	adds	r7, #8
 8019234:	46bd      	mov	sp, r7
 8019236:	bd80      	pop	{r7, pc}
 8019238:	20000ee0 	.word	0x20000ee0

0801923c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b082      	sub	sp, #8
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019244:	4b03      	ldr	r3, [pc, #12]	; (8019254 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	2040      	movs	r0, #64	; 0x40
 801924a:	4798      	blx	r3
}
 801924c:	bf00      	nop
 801924e:	3708      	adds	r7, #8
 8019250:	46bd      	mov	sp, r7
 8019252:	bd80      	pop	{r7, pc}
 8019254:	20000ee0 	.word	0x20000ee0

08019258 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b082      	sub	sp, #8
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
 8019260:	460b      	mov	r3, r1
 8019262:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019264:	78fb      	ldrb	r3, [r7, #3]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d002      	beq.n	8019270 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801926a:	2b01      	cmp	r3, #1
 801926c:	d005      	beq.n	801927a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801926e:	e00a      	b.n	8019286 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019270:	4b07      	ldr	r3, [pc, #28]	; (8019290 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	2080      	movs	r0, #128	; 0x80
 8019276:	4798      	blx	r3
            break;
 8019278:	e005      	b.n	8019286 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801927a:	4b05      	ldr	r3, [pc, #20]	; (8019290 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019282:	4798      	blx	r3
            break;
 8019284:	bf00      	nop
    }
}
 8019286:	bf00      	nop
 8019288:	3708      	adds	r7, #8
 801928a:	46bd      	mov	sp, r7
 801928c:	bd80      	pop	{r7, pc}
 801928e:	bf00      	nop
 8019290:	20000ee0 	.word	0x20000ee0

08019294 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b082      	sub	sp, #8
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801929c:	4b04      	ldr	r3, [pc, #16]	; (80192b0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80192a4:	4798      	blx	r3
}
 80192a6:	bf00      	nop
 80192a8:	3708      	adds	r7, #8
 80192aa:	46bd      	mov	sp, r7
 80192ac:	bd80      	pop	{r7, pc}
 80192ae:	bf00      	nop
 80192b0:	20000ee0 	.word	0x20000ee0

080192b4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b082      	sub	sp, #8
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80192bc:	4b03      	ldr	r3, [pc, #12]	; (80192cc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	2020      	movs	r0, #32
 80192c2:	4798      	blx	r3
}
 80192c4:	bf00      	nop
 80192c6:	3708      	adds	r7, #8
 80192c8:	46bd      	mov	sp, r7
 80192ca:	bd80      	pop	{r7, pc}
 80192cc:	20000ee0 	.word	0x20000ee0

080192d0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b082      	sub	sp, #8
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80192d8:	4b03      	ldr	r3, [pc, #12]	; (80192e8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	2004      	movs	r0, #4
 80192de:	4798      	blx	r3
}
 80192e0:	bf00      	nop
 80192e2:	3708      	adds	r7, #8
 80192e4:	46bd      	mov	sp, r7
 80192e6:	bd80      	pop	{r7, pc}
 80192e8:	20000ee0 	.word	0x20000ee0

080192ec <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b082      	sub	sp, #8
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80192f4:	4b03      	ldr	r3, [pc, #12]	; (8019304 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	2008      	movs	r0, #8
 80192fa:	4798      	blx	r3
}
 80192fc:	bf00      	nop
 80192fe:	3708      	adds	r7, #8
 8019300:	46bd      	mov	sp, r7
 8019302:	bd80      	pop	{r7, pc}
 8019304:	20000ee0 	.word	0x20000ee0

08019308 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019308:	b580      	push	{r7, lr}
 801930a:	b082      	sub	sp, #8
 801930c:	af00      	add	r7, sp, #0
 801930e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019310:	4b03      	ldr	r3, [pc, #12]	; (8019320 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	2010      	movs	r0, #16
 8019316:	4798      	blx	r3
}
 8019318:	bf00      	nop
 801931a:	3708      	adds	r7, #8
 801931c:	46bd      	mov	sp, r7
 801931e:	bd80      	pop	{r7, pc}
 8019320:	20000ee0 	.word	0x20000ee0

08019324 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8019324:	b580      	push	{r7, lr}
 8019326:	b084      	sub	sp, #16
 8019328:	af00      	add	r7, sp, #0
 801932a:	4603      	mov	r3, r0
 801932c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801932e:	f7f1 faa6 	bl	800a87e <RBI_IsDCDC>
 8019332:	4603      	mov	r3, r0
 8019334:	2b01      	cmp	r3, #1
 8019336:	d112      	bne.n	801935e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019338:	f640 1023 	movw	r0, #2339	; 0x923
 801933c:	f7ff fe1e 	bl	8018f7c <SUBGRF_ReadRegister>
 8019340:	4603      	mov	r3, r0
 8019342:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019344:	7bfb      	ldrb	r3, [r7, #15]
 8019346:	f023 0306 	bic.w	r3, r3, #6
 801934a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801934c:	7bfa      	ldrb	r2, [r7, #15]
 801934e:	79fb      	ldrb	r3, [r7, #7]
 8019350:	4313      	orrs	r3, r2
 8019352:	b2db      	uxtb	r3, r3
 8019354:	4619      	mov	r1, r3
 8019356:	f640 1023 	movw	r0, #2339	; 0x923
 801935a:	f7ff fdfb 	bl	8018f54 <SUBGRF_WriteRegister>
  }
}
 801935e:	bf00      	nop
 8019360:	3710      	adds	r7, #16
 8019362:	46bd      	mov	sp, r7
 8019364:	bd80      	pop	{r7, pc}
	...

08019368 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019368:	b480      	push	{r7}
 801936a:	b085      	sub	sp, #20
 801936c:	af00      	add	r7, sp, #0
 801936e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d101      	bne.n	801937a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8019376:	231f      	movs	r3, #31
 8019378:	e016      	b.n	80193a8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801937a:	2300      	movs	r3, #0
 801937c:	73fb      	strb	r3, [r7, #15]
 801937e:	e00f      	b.n	80193a0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019380:	7bfb      	ldrb	r3, [r7, #15]
 8019382:	4a0c      	ldr	r2, [pc, #48]	; (80193b4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019384:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019388:	687a      	ldr	r2, [r7, #4]
 801938a:	429a      	cmp	r2, r3
 801938c:	d205      	bcs.n	801939a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801938e:	7bfb      	ldrb	r3, [r7, #15]
 8019390:	4a08      	ldr	r2, [pc, #32]	; (80193b4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019392:	00db      	lsls	r3, r3, #3
 8019394:	4413      	add	r3, r2
 8019396:	791b      	ldrb	r3, [r3, #4]
 8019398:	e006      	b.n	80193a8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801939a:	7bfb      	ldrb	r3, [r7, #15]
 801939c:	3301      	adds	r3, #1
 801939e:	73fb      	strb	r3, [r7, #15]
 80193a0:	7bfb      	ldrb	r3, [r7, #15]
 80193a2:	2b15      	cmp	r3, #21
 80193a4:	d9ec      	bls.n	8019380 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80193a6:	e7fe      	b.n	80193a6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80193a8:	4618      	mov	r0, r3
 80193aa:	3714      	adds	r7, #20
 80193ac:	46bd      	mov	sp, r7
 80193ae:	bc80      	pop	{r7}
 80193b0:	4770      	bx	lr
 80193b2:	bf00      	nop
 80193b4:	0801b8d0 	.word	0x0801b8d0

080193b8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b08a      	sub	sp, #40	; 0x28
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
 80193c0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80193c2:	4b36      	ldr	r3, [pc, #216]	; (801949c <SUBGRF_GetCFO+0xe4>)
 80193c4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80193c6:	f640 0007 	movw	r0, #2055	; 0x807
 80193ca:	f7ff fdd7 	bl	8018f7c <SUBGRF_ReadRegister>
 80193ce:	4603      	mov	r3, r0
 80193d0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80193d2:	7ffb      	ldrb	r3, [r7, #31]
 80193d4:	08db      	lsrs	r3, r3, #3
 80193d6:	b2db      	uxtb	r3, r3
 80193d8:	f003 0303 	and.w	r3, r3, #3
 80193dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80193e0:	4413      	add	r3, r2
 80193e2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80193e6:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80193e8:	7ffb      	ldrb	r3, [r7, #31]
 80193ea:	f003 0307 	and.w	r3, r3, #7
 80193ee:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80193f0:	7fba      	ldrb	r2, [r7, #30]
 80193f2:	7f7b      	ldrb	r3, [r7, #29]
 80193f4:	3b01      	subs	r3, #1
 80193f6:	fa02 f303 	lsl.w	r3, r2, r3
 80193fa:	461a      	mov	r2, r3
 80193fc:	4b28      	ldr	r3, [pc, #160]	; (80194a0 <SUBGRF_GetCFO+0xe8>)
 80193fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8019402:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019404:	69ba      	ldr	r2, [r7, #24]
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	fbb2 f3f3 	udiv	r3, r2, r3
 801940c:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801940e:	2301      	movs	r3, #1
 8019410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019418:	697a      	ldr	r2, [r7, #20]
 801941a:	fb02 f303 	mul.w	r3, r2, r3
 801941e:	2b07      	cmp	r3, #7
 8019420:	d802      	bhi.n	8019428 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8019422:	2302      	movs	r3, #2
 8019424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8019428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801942c:	697a      	ldr	r2, [r7, #20]
 801942e:	fb02 f303 	mul.w	r3, r2, r3
 8019432:	2b03      	cmp	r3, #3
 8019434:	d802      	bhi.n	801943c <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8019436:	2304      	movs	r3, #4
 8019438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801943c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019440:	69bb      	ldr	r3, [r7, #24]
 8019442:	fb02 f303 	mul.w	r3, r2, r3
 8019446:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8019448:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801944c:	f7ff fd96 	bl	8018f7c <SUBGRF_ReadRegister>
 8019450:	4603      	mov	r3, r0
 8019452:	021b      	lsls	r3, r3, #8
 8019454:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019458:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 801945a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801945e:	f7ff fd8d 	bl	8018f7c <SUBGRF_ReadRegister>
 8019462:	4603      	mov	r3, r0
 8019464:	461a      	mov	r2, r3
 8019466:	6a3b      	ldr	r3, [r7, #32]
 8019468:	4313      	orrs	r3, r2
 801946a:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801946c:	6a3b      	ldr	r3, [r7, #32]
 801946e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019472:	2b00      	cmp	r3, #0
 8019474:	d005      	beq.n	8019482 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8019476:	6a3b      	ldr	r3, [r7, #32]
 8019478:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801947c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019480:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019482:	693b      	ldr	r3, [r7, #16]
 8019484:	095b      	lsrs	r3, r3, #5
 8019486:	6a3a      	ldr	r2, [r7, #32]
 8019488:	fb02 f303 	mul.w	r3, r2, r3
 801948c:	11da      	asrs	r2, r3, #7
 801948e:	683b      	ldr	r3, [r7, #0]
 8019490:	601a      	str	r2, [r3, #0]
}
 8019492:	bf00      	nop
 8019494:	3728      	adds	r7, #40	; 0x28
 8019496:	46bd      	mov	sp, r7
 8019498:	bd80      	pop	{r7, pc}
 801949a:	bf00      	nop
 801949c:	0c0a0804 	.word	0x0c0a0804
 80194a0:	01e84800 	.word	0x01e84800

080194a4 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 80194a4:	b480      	push	{r7}
 80194a6:	b087      	sub	sp, #28
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	4603      	mov	r3, r0
 80194ac:	60b9      	str	r1, [r7, #8]
 80194ae:	607a      	str	r2, [r7, #4]
 80194b0:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 80194b2:	2300      	movs	r3, #0
 80194b4:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 80194b6:	f04f 33ff 	mov.w	r3, #4294967295
 80194ba:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80194bc:	697b      	ldr	r3, [r7, #20]
}
 80194be:	4618      	mov	r0, r3
 80194c0:	371c      	adds	r7, #28
 80194c2:	46bd      	mov	sp, r7
 80194c4:	bc80      	pop	{r7}
 80194c6:	4770      	bx	lr

080194c8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 80194c8:	b480      	push	{r7}
 80194ca:	b087      	sub	sp, #28
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	4603      	mov	r3, r0
 80194d0:	60b9      	str	r1, [r7, #8]
 80194d2:	607a      	str	r2, [r7, #4]
 80194d4:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 80194d6:	2300      	movs	r3, #0
 80194d8:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 80194da:	f04f 33ff 	mov.w	r3, #4294967295
 80194de:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80194e0:	697b      	ldr	r3, [r7, #20]
}
 80194e2:	4618      	mov	r0, r3
 80194e4:	371c      	adds	r7, #28
 80194e6:	46bd      	mov	sp, r7
 80194e8:	bc80      	pop	{r7}
 80194ea:	4770      	bx	lr

080194ec <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 80194ec:	b480      	push	{r7}
 80194ee:	b085      	sub	sp, #20
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	60f8      	str	r0, [r7, #12]
 80194f4:	60b9      	str	r1, [r7, #8]
 80194f6:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 80194f8:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80194fc:	4618      	mov	r0, r3
 80194fe:	3714      	adds	r7, #20
 8019500:	46bd      	mov	sp, r7
 8019502:	bc80      	pop	{r7}
 8019504:	4770      	bx	lr

08019506 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8019506:	b480      	push	{r7}
 8019508:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801950a:	bf00      	nop
 801950c:	46bd      	mov	sp, r7
 801950e:	bc80      	pop	{r7}
 8019510:	4770      	bx	lr

08019512 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8019512:	b480      	push	{r7}
 8019514:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8019516:	2300      	movs	r3, #0
#endif
}
 8019518:	4618      	mov	r0, r3
 801951a:	46bd      	mov	sp, r7
 801951c:	bc80      	pop	{r7}
 801951e:	4770      	bx	lr

08019520 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8019520:	b480      	push	{r7}
 8019522:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8019524:	2300      	movs	r3, #0
#endif
}
 8019526:	4618      	mov	r0, r3
 8019528:	46bd      	mov	sp, r7
 801952a:	bc80      	pop	{r7}
 801952c:	4770      	bx	lr

0801952e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801952e:	b480      	push	{r7}
 8019530:	b083      	sub	sp, #12
 8019532:	af00      	add	r7, sp, #0
 8019534:	4603      	mov	r3, r0
 8019536:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019538:	bf00      	nop
 801953a:	370c      	adds	r7, #12
 801953c:	46bd      	mov	sp, r7
 801953e:	bc80      	pop	{r7}
 8019540:	4770      	bx	lr

08019542 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8019542:	b480      	push	{r7}
 8019544:	b087      	sub	sp, #28
 8019546:	af00      	add	r7, sp, #0
 8019548:	60f8      	str	r0, [r7, #12]
 801954a:	460b      	mov	r3, r1
 801954c:	607a      	str	r2, [r7, #4]
 801954e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019550:	f04f 33ff 	mov.w	r3, #4294967295
 8019554:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8019556:	697b      	ldr	r3, [r7, #20]
}
 8019558:	4618      	mov	r0, r3
 801955a:	371c      	adds	r7, #28
 801955c:	46bd      	mov	sp, r7
 801955e:	bc80      	pop	{r7}
 8019560:	4770      	bx	lr

08019562 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019562:	b480      	push	{r7}
 8019564:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8019566:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801956a:	4618      	mov	r0, r3
 801956c:	46bd      	mov	sp, r7
 801956e:	bc80      	pop	{r7}
 8019570:	4770      	bx	lr

08019572 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8019572:	b480      	push	{r7}
 8019574:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8019576:	bf00      	nop
 8019578:	46bd      	mov	sp, r7
 801957a:	bc80      	pop	{r7}
 801957c:	4770      	bx	lr

0801957e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801957e:	b480      	push	{r7}
 8019580:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8019582:	bf00      	nop
 8019584:	46bd      	mov	sp, r7
 8019586:	bc80      	pop	{r7}
 8019588:	4770      	bx	lr

0801958a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801958a:	b480      	push	{r7}
 801958c:	b083      	sub	sp, #12
 801958e:	af00      	add	r7, sp, #0
 8019590:	4603      	mov	r3, r0
 8019592:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8019594:	bf00      	nop
 8019596:	370c      	adds	r7, #12
 8019598:	46bd      	mov	sp, r7
 801959a:	bc80      	pop	{r7}
 801959c:	4770      	bx	lr
	...

080195a0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80195a0:	b480      	push	{r7}
 80195a2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80195a4:	4b04      	ldr	r3, [pc, #16]	; (80195b8 <UTIL_LPM_Init+0x18>)
 80195a6:	2200      	movs	r2, #0
 80195a8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80195aa:	4b04      	ldr	r3, [pc, #16]	; (80195bc <UTIL_LPM_Init+0x1c>)
 80195ac:	2200      	movs	r2, #0
 80195ae:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80195b0:	bf00      	nop
 80195b2:	46bd      	mov	sp, r7
 80195b4:	bc80      	pop	{r7}
 80195b6:	4770      	bx	lr
 80195b8:	20000ee4 	.word	0x20000ee4
 80195bc:	20000ee8 	.word	0x20000ee8

080195c0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80195c0:	b480      	push	{r7}
 80195c2:	b087      	sub	sp, #28
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
 80195c8:	460b      	mov	r3, r1
 80195ca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80195cc:	f3ef 8310 	mrs	r3, PRIMASK
 80195d0:	613b      	str	r3, [r7, #16]
  return(result);
 80195d2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80195d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80195d6:	b672      	cpsid	i
}
 80195d8:	bf00      	nop
  
  switch( state )
 80195da:	78fb      	ldrb	r3, [r7, #3]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d008      	beq.n	80195f2 <UTIL_LPM_SetStopMode+0x32>
 80195e0:	2b01      	cmp	r3, #1
 80195e2:	d10e      	bne.n	8019602 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80195e4:	4b0d      	ldr	r3, [pc, #52]	; (801961c <UTIL_LPM_SetStopMode+0x5c>)
 80195e6:	681a      	ldr	r2, [r3, #0]
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	4313      	orrs	r3, r2
 80195ec:	4a0b      	ldr	r2, [pc, #44]	; (801961c <UTIL_LPM_SetStopMode+0x5c>)
 80195ee:	6013      	str	r3, [r2, #0]
      break;
 80195f0:	e008      	b.n	8019604 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	43da      	mvns	r2, r3
 80195f6:	4b09      	ldr	r3, [pc, #36]	; (801961c <UTIL_LPM_SetStopMode+0x5c>)
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	4013      	ands	r3, r2
 80195fc:	4a07      	ldr	r2, [pc, #28]	; (801961c <UTIL_LPM_SetStopMode+0x5c>)
 80195fe:	6013      	str	r3, [r2, #0]
      break;
 8019600:	e000      	b.n	8019604 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8019602:	bf00      	nop
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	f383 8810 	msr	PRIMASK, r3
}
 801960e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019610:	bf00      	nop
 8019612:	371c      	adds	r7, #28
 8019614:	46bd      	mov	sp, r7
 8019616:	bc80      	pop	{r7}
 8019618:	4770      	bx	lr
 801961a:	bf00      	nop
 801961c:	20000ee4 	.word	0x20000ee4

08019620 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019620:	b480      	push	{r7}
 8019622:	b087      	sub	sp, #28
 8019624:	af00      	add	r7, sp, #0
 8019626:	6078      	str	r0, [r7, #4]
 8019628:	460b      	mov	r3, r1
 801962a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801962c:	f3ef 8310 	mrs	r3, PRIMASK
 8019630:	613b      	str	r3, [r7, #16]
  return(result);
 8019632:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019634:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019636:	b672      	cpsid	i
}
 8019638:	bf00      	nop
  
  switch(state)
 801963a:	78fb      	ldrb	r3, [r7, #3]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d008      	beq.n	8019652 <UTIL_LPM_SetOffMode+0x32>
 8019640:	2b01      	cmp	r3, #1
 8019642:	d10e      	bne.n	8019662 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019644:	4b0d      	ldr	r3, [pc, #52]	; (801967c <UTIL_LPM_SetOffMode+0x5c>)
 8019646:	681a      	ldr	r2, [r3, #0]
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	4313      	orrs	r3, r2
 801964c:	4a0b      	ldr	r2, [pc, #44]	; (801967c <UTIL_LPM_SetOffMode+0x5c>)
 801964e:	6013      	str	r3, [r2, #0]
      break;
 8019650:	e008      	b.n	8019664 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	43da      	mvns	r2, r3
 8019656:	4b09      	ldr	r3, [pc, #36]	; (801967c <UTIL_LPM_SetOffMode+0x5c>)
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	4013      	ands	r3, r2
 801965c:	4a07      	ldr	r2, [pc, #28]	; (801967c <UTIL_LPM_SetOffMode+0x5c>)
 801965e:	6013      	str	r3, [r2, #0]
      break;
 8019660:	e000      	b.n	8019664 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019662:	bf00      	nop
 8019664:	697b      	ldr	r3, [r7, #20]
 8019666:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	f383 8810 	msr	PRIMASK, r3
}
 801966e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019670:	bf00      	nop
 8019672:	371c      	adds	r7, #28
 8019674:	46bd      	mov	sp, r7
 8019676:	bc80      	pop	{r7}
 8019678:	4770      	bx	lr
 801967a:	bf00      	nop
 801967c:	20000ee8 	.word	0x20000ee8

08019680 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8019680:	b480      	push	{r7}
 8019682:	b087      	sub	sp, #28
 8019684:	af00      	add	r7, sp, #0
 8019686:	60f8      	str	r0, [r7, #12]
 8019688:	60b9      	str	r1, [r7, #8]
 801968a:	4613      	mov	r3, r2
 801968c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8019692:	68bb      	ldr	r3, [r7, #8]
 8019694:	613b      	str	r3, [r7, #16]

  while( size-- )
 8019696:	e007      	b.n	80196a8 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8019698:	693a      	ldr	r2, [r7, #16]
 801969a:	1c53      	adds	r3, r2, #1
 801969c:	613b      	str	r3, [r7, #16]
 801969e:	697b      	ldr	r3, [r7, #20]
 80196a0:	1c59      	adds	r1, r3, #1
 80196a2:	6179      	str	r1, [r7, #20]
 80196a4:	7812      	ldrb	r2, [r2, #0]
 80196a6:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80196a8:	88fb      	ldrh	r3, [r7, #6]
 80196aa:	1e5a      	subs	r2, r3, #1
 80196ac:	80fa      	strh	r2, [r7, #6]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d1f2      	bne.n	8019698 <UTIL_MEM_cpy_8+0x18>
    }
}
 80196b2:	bf00      	nop
 80196b4:	bf00      	nop
 80196b6:	371c      	adds	r7, #28
 80196b8:	46bd      	mov	sp, r7
 80196ba:	bc80      	pop	{r7}
 80196bc:	4770      	bx	lr

080196be <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80196be:	b480      	push	{r7}
 80196c0:	b085      	sub	sp, #20
 80196c2:	af00      	add	r7, sp, #0
 80196c4:	6078      	str	r0, [r7, #4]
 80196c6:	460b      	mov	r3, r1
 80196c8:	70fb      	strb	r3, [r7, #3]
 80196ca:	4613      	mov	r3, r2
 80196cc:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80196d2:	e004      	b.n	80196de <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	1c5a      	adds	r2, r3, #1
 80196d8:	60fa      	str	r2, [r7, #12]
 80196da:	78fa      	ldrb	r2, [r7, #3]
 80196dc:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80196de:	883b      	ldrh	r3, [r7, #0]
 80196e0:	1e5a      	subs	r2, r3, #1
 80196e2:	803a      	strh	r2, [r7, #0]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d1f5      	bne.n	80196d4 <UTIL_MEM_set_8+0x16>
  }
}
 80196e8:	bf00      	nop
 80196ea:	bf00      	nop
 80196ec:	3714      	adds	r7, #20
 80196ee:	46bd      	mov	sp, r7
 80196f0:	bc80      	pop	{r7}
 80196f2:	4770      	bx	lr

080196f4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80196f4:	b082      	sub	sp, #8
 80196f6:	b480      	push	{r7}
 80196f8:	b087      	sub	sp, #28
 80196fa:	af00      	add	r7, sp, #0
 80196fc:	60f8      	str	r0, [r7, #12]
 80196fe:	1d38      	adds	r0, r7, #4
 8019700:	e880 0006 	stmia.w	r0, {r1, r2}
 8019704:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019706:	2300      	movs	r3, #0
 8019708:	613b      	str	r3, [r7, #16]
 801970a:	2300      	movs	r3, #0
 801970c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801970e:	687a      	ldr	r2, [r7, #4]
 8019710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019712:	4413      	add	r3, r2
 8019714:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019716:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801971a:	b29a      	uxth	r2, r3
 801971c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019720:	b29b      	uxth	r3, r3
 8019722:	4413      	add	r3, r2
 8019724:	b29b      	uxth	r3, r3
 8019726:	b21b      	sxth	r3, r3
 8019728:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801972a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801972e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019732:	db0a      	blt.n	801974a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019734:	693b      	ldr	r3, [r7, #16]
 8019736:	3301      	adds	r3, #1
 8019738:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801973a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801973e:	b29b      	uxth	r3, r3
 8019740:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019744:	b29b      	uxth	r3, r3
 8019746:	b21b      	sxth	r3, r3
 8019748:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	461a      	mov	r2, r3
 801974e:	f107 0310 	add.w	r3, r7, #16
 8019752:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019756:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801975a:	68f8      	ldr	r0, [r7, #12]
 801975c:	371c      	adds	r7, #28
 801975e:	46bd      	mov	sp, r7
 8019760:	bc80      	pop	{r7}
 8019762:	b002      	add	sp, #8
 8019764:	4770      	bx	lr

08019766 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8019766:	b082      	sub	sp, #8
 8019768:	b480      	push	{r7}
 801976a:	b087      	sub	sp, #28
 801976c:	af00      	add	r7, sp, #0
 801976e:	60f8      	str	r0, [r7, #12]
 8019770:	1d38      	adds	r0, r7, #4
 8019772:	e880 0006 	stmia.w	r0, {r1, r2}
 8019776:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019778:	2300      	movs	r3, #0
 801977a:	613b      	str	r3, [r7, #16]
 801977c:	2300      	movs	r3, #0
 801977e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019780:	687a      	ldr	r2, [r7, #4]
 8019782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019784:	1ad3      	subs	r3, r2, r3
 8019786:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019788:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801978c:	b29a      	uxth	r2, r3
 801978e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019792:	b29b      	uxth	r3, r3
 8019794:	1ad3      	subs	r3, r2, r3
 8019796:	b29b      	uxth	r3, r3
 8019798:	b21b      	sxth	r3, r3
 801979a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801979c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	da0a      	bge.n	80197ba <SysTimeSub+0x54>
  {
    c.Seconds--;
 80197a4:	693b      	ldr	r3, [r7, #16]
 80197a6:	3b01      	subs	r3, #1
 80197a8:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 80197aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80197ae:	b29b      	uxth	r3, r3
 80197b0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80197b4:	b29b      	uxth	r3, r3
 80197b6:	b21b      	sxth	r3, r3
 80197b8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	461a      	mov	r2, r3
 80197be:	f107 0310 	add.w	r3, r7, #16
 80197c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80197c6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80197ca:	68f8      	ldr	r0, [r7, #12]
 80197cc:	371c      	adds	r7, #28
 80197ce:	46bd      	mov	sp, r7
 80197d0:	bc80      	pop	{r7}
 80197d2:	b002      	add	sp, #8
 80197d4:	4770      	bx	lr
	...

080197d8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b088      	sub	sp, #32
 80197dc:	af02      	add	r7, sp, #8
 80197de:	463b      	mov	r3, r7
 80197e0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80197e4:	2300      	movs	r3, #0
 80197e6:	60bb      	str	r3, [r7, #8]
 80197e8:	2300      	movs	r3, #0
 80197ea:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80197ec:	4b10      	ldr	r3, [pc, #64]	; (8019830 <SysTimeSet+0x58>)
 80197ee:	691b      	ldr	r3, [r3, #16]
 80197f0:	f107 0208 	add.w	r2, r7, #8
 80197f4:	3204      	adds	r2, #4
 80197f6:	4610      	mov	r0, r2
 80197f8:	4798      	blx	r3
 80197fa:	4603      	mov	r3, r0
 80197fc:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 80197fe:	f107 0010 	add.w	r0, r7, #16
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	9300      	str	r3, [sp, #0]
 8019806:	68bb      	ldr	r3, [r7, #8]
 8019808:	463a      	mov	r2, r7
 801980a:	ca06      	ldmia	r2, {r1, r2}
 801980c:	f7ff ffab 	bl	8019766 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019810:	4b07      	ldr	r3, [pc, #28]	; (8019830 <SysTimeSet+0x58>)
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	693a      	ldr	r2, [r7, #16]
 8019816:	4610      	mov	r0, r2
 8019818:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801981a:	4b05      	ldr	r3, [pc, #20]	; (8019830 <SysTimeSet+0x58>)
 801981c:	689b      	ldr	r3, [r3, #8]
 801981e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019822:	4610      	mov	r0, r2
 8019824:	4798      	blx	r3
}
 8019826:	bf00      	nop
 8019828:	3718      	adds	r7, #24
 801982a:	46bd      	mov	sp, r7
 801982c:	bd80      	pop	{r7, pc}
 801982e:	bf00      	nop
 8019830:	0801b494 	.word	0x0801b494

08019834 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b08a      	sub	sp, #40	; 0x28
 8019838:	af02      	add	r7, sp, #8
 801983a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801983c:	2300      	movs	r3, #0
 801983e:	61bb      	str	r3, [r7, #24]
 8019840:	2300      	movs	r3, #0
 8019842:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019844:	2300      	movs	r3, #0
 8019846:	613b      	str	r3, [r7, #16]
 8019848:	2300      	movs	r3, #0
 801984a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801984c:	4b14      	ldr	r3, [pc, #80]	; (80198a0 <SysTimeGet+0x6c>)
 801984e:	691b      	ldr	r3, [r3, #16]
 8019850:	f107 0218 	add.w	r2, r7, #24
 8019854:	3204      	adds	r2, #4
 8019856:	4610      	mov	r0, r2
 8019858:	4798      	blx	r3
 801985a:	4603      	mov	r3, r0
 801985c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801985e:	4b10      	ldr	r3, [pc, #64]	; (80198a0 <SysTimeGet+0x6c>)
 8019860:	68db      	ldr	r3, [r3, #12]
 8019862:	4798      	blx	r3
 8019864:	4603      	mov	r3, r0
 8019866:	b21b      	sxth	r3, r3
 8019868:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801986a:	4b0d      	ldr	r3, [pc, #52]	; (80198a0 <SysTimeGet+0x6c>)
 801986c:	685b      	ldr	r3, [r3, #4]
 801986e:	4798      	blx	r3
 8019870:	4603      	mov	r3, r0
 8019872:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8019874:	f107 0010 	add.w	r0, r7, #16
 8019878:	69fb      	ldr	r3, [r7, #28]
 801987a:	9300      	str	r3, [sp, #0]
 801987c:	69bb      	ldr	r3, [r7, #24]
 801987e:	f107 0208 	add.w	r2, r7, #8
 8019882:	ca06      	ldmia	r2, {r1, r2}
 8019884:	f7ff ff36 	bl	80196f4 <SysTimeAdd>

  return sysTime;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	461a      	mov	r2, r3
 801988c:	f107 0310 	add.w	r3, r7, #16
 8019890:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019894:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019898:	6878      	ldr	r0, [r7, #4]
 801989a:	3720      	adds	r7, #32
 801989c:	46bd      	mov	sp, r7
 801989e:	bd80      	pop	{r7, pc}
 80198a0:	0801b494 	.word	0x0801b494

080198a4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b084      	sub	sp, #16
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80198ac:	2300      	movs	r3, #0
 80198ae:	60bb      	str	r3, [r7, #8]
 80198b0:	2300      	movs	r3, #0
 80198b2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80198b4:	4b0a      	ldr	r3, [pc, #40]	; (80198e0 <SysTimeGetMcuTime+0x3c>)
 80198b6:	691b      	ldr	r3, [r3, #16]
 80198b8:	f107 0208 	add.w	r2, r7, #8
 80198bc:	3204      	adds	r2, #4
 80198be:	4610      	mov	r0, r2
 80198c0:	4798      	blx	r3
 80198c2:	4603      	mov	r3, r0
 80198c4:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	461a      	mov	r2, r3
 80198ca:	f107 0308 	add.w	r3, r7, #8
 80198ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80198d2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80198d6:	6878      	ldr	r0, [r7, #4]
 80198d8:	3710      	adds	r7, #16
 80198da:	46bd      	mov	sp, r7
 80198dc:	bd80      	pop	{r7, pc}
 80198de:	bf00      	nop
 80198e0:	0801b494 	.word	0x0801b494

080198e4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80198e4:	b580      	push	{r7, lr}
 80198e6:	b088      	sub	sp, #32
 80198e8:	af02      	add	r7, sp, #8
 80198ea:	463b      	mov	r3, r7
 80198ec:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80198f0:	4b0f      	ldr	r3, [pc, #60]	; (8019930 <SysTimeToMs+0x4c>)
 80198f2:	68db      	ldr	r3, [r3, #12]
 80198f4:	4798      	blx	r3
 80198f6:	4603      	mov	r3, r0
 80198f8:	b21b      	sxth	r3, r3
 80198fa:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80198fc:	4b0c      	ldr	r3, [pc, #48]	; (8019930 <SysTimeToMs+0x4c>)
 80198fe:	685b      	ldr	r3, [r3, #4]
 8019900:	4798      	blx	r3
 8019902:	4603      	mov	r3, r0
 8019904:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019906:	f107 0008 	add.w	r0, r7, #8
 801990a:	697b      	ldr	r3, [r7, #20]
 801990c:	9300      	str	r3, [sp, #0]
 801990e:	693b      	ldr	r3, [r7, #16]
 8019910:	463a      	mov	r2, r7
 8019912:	ca06      	ldmia	r2, {r1, r2}
 8019914:	f7ff ff27 	bl	8019766 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019918:	68bb      	ldr	r3, [r7, #8]
 801991a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801991e:	fb02 f303 	mul.w	r3, r2, r3
 8019922:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019926:	4413      	add	r3, r2
}
 8019928:	4618      	mov	r0, r3
 801992a:	3718      	adds	r7, #24
 801992c:	46bd      	mov	sp, r7
 801992e:	bd80      	pop	{r7, pc}
 8019930:	0801b494 	.word	0x0801b494

08019934 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019934:	b580      	push	{r7, lr}
 8019936:	b08a      	sub	sp, #40	; 0x28
 8019938:	af02      	add	r7, sp, #8
 801993a:	6078      	str	r0, [r7, #4]
 801993c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801993e:	683b      	ldr	r3, [r7, #0]
 8019940:	4a19      	ldr	r2, [pc, #100]	; (80199a8 <SysTimeFromMs+0x74>)
 8019942:	fba2 2303 	umull	r2, r3, r2, r3
 8019946:	099b      	lsrs	r3, r3, #6
 8019948:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801994a:	69fb      	ldr	r3, [r7, #28]
 801994c:	617b      	str	r3, [r7, #20]
 801994e:	683b      	ldr	r3, [r7, #0]
 8019950:	b29a      	uxth	r2, r3
 8019952:	69fb      	ldr	r3, [r7, #28]
 8019954:	b29b      	uxth	r3, r3
 8019956:	4619      	mov	r1, r3
 8019958:	0149      	lsls	r1, r1, #5
 801995a:	1ac9      	subs	r1, r1, r3
 801995c:	0089      	lsls	r1, r1, #2
 801995e:	440b      	add	r3, r1
 8019960:	00db      	lsls	r3, r3, #3
 8019962:	b29b      	uxth	r3, r3
 8019964:	1ad3      	subs	r3, r2, r3
 8019966:	b29b      	uxth	r3, r3
 8019968:	b21b      	sxth	r3, r3
 801996a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801996c:	f107 030c 	add.w	r3, r7, #12
 8019970:	2200      	movs	r2, #0
 8019972:	601a      	str	r2, [r3, #0]
 8019974:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019976:	4b0d      	ldr	r3, [pc, #52]	; (80199ac <SysTimeFromMs+0x78>)
 8019978:	68db      	ldr	r3, [r3, #12]
 801997a:	4798      	blx	r3
 801997c:	4603      	mov	r3, r0
 801997e:	b21b      	sxth	r3, r3
 8019980:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019982:	4b0a      	ldr	r3, [pc, #40]	; (80199ac <SysTimeFromMs+0x78>)
 8019984:	685b      	ldr	r3, [r3, #4]
 8019986:	4798      	blx	r3
 8019988:	4603      	mov	r3, r0
 801998a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801998c:	6878      	ldr	r0, [r7, #4]
 801998e:	693b      	ldr	r3, [r7, #16]
 8019990:	9300      	str	r3, [sp, #0]
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	f107 0214 	add.w	r2, r7, #20
 8019998:	ca06      	ldmia	r2, {r1, r2}
 801999a:	f7ff feab 	bl	80196f4 <SysTimeAdd>
}
 801999e:	6878      	ldr	r0, [r7, #4]
 80199a0:	3720      	adds	r7, #32
 80199a2:	46bd      	mov	sp, r7
 80199a4:	bd80      	pop	{r7, pc}
 80199a6:	bf00      	nop
 80199a8:	10624dd3 	.word	0x10624dd3
 80199ac:	0801b494 	.word	0x0801b494

080199b0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80199b0:	b480      	push	{r7}
 80199b2:	b085      	sub	sp, #20
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
  int i = 0;
 80199b8:	2300      	movs	r3, #0
 80199ba:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80199bc:	e00e      	b.n	80199dc <ee_skip_atoi+0x2c>
 80199be:	68fa      	ldr	r2, [r7, #12]
 80199c0:	4613      	mov	r3, r2
 80199c2:	009b      	lsls	r3, r3, #2
 80199c4:	4413      	add	r3, r2
 80199c6:	005b      	lsls	r3, r3, #1
 80199c8:	4618      	mov	r0, r3
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	1c59      	adds	r1, r3, #1
 80199d0:	687a      	ldr	r2, [r7, #4]
 80199d2:	6011      	str	r1, [r2, #0]
 80199d4:	781b      	ldrb	r3, [r3, #0]
 80199d6:	4403      	add	r3, r0
 80199d8:	3b30      	subs	r3, #48	; 0x30
 80199da:	60fb      	str	r3, [r7, #12]
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	781b      	ldrb	r3, [r3, #0]
 80199e2:	2b2f      	cmp	r3, #47	; 0x2f
 80199e4:	d904      	bls.n	80199f0 <ee_skip_atoi+0x40>
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	781b      	ldrb	r3, [r3, #0]
 80199ec:	2b39      	cmp	r3, #57	; 0x39
 80199ee:	d9e6      	bls.n	80199be <ee_skip_atoi+0xe>
  return i;
 80199f0:	68fb      	ldr	r3, [r7, #12]
}
 80199f2:	4618      	mov	r0, r3
 80199f4:	3714      	adds	r7, #20
 80199f6:	46bd      	mov	sp, r7
 80199f8:	bc80      	pop	{r7}
 80199fa:	4770      	bx	lr

080199fc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80199fc:	b480      	push	{r7}
 80199fe:	b099      	sub	sp, #100	; 0x64
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	60f8      	str	r0, [r7, #12]
 8019a04:	60b9      	str	r1, [r7, #8]
 8019a06:	607a      	str	r2, [r7, #4]
 8019a08:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019a0a:	4b72      	ldr	r3, [pc, #456]	; (8019bd4 <ee_number+0x1d8>)
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8019a10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d002      	beq.n	8019a20 <ee_number+0x24>
 8019a1a:	4b6f      	ldr	r3, [pc, #444]	; (8019bd8 <ee_number+0x1dc>)
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8019a20:	683b      	ldr	r3, [r7, #0]
 8019a22:	2b01      	cmp	r3, #1
 8019a24:	dd02      	ble.n	8019a2c <ee_number+0x30>
 8019a26:	683b      	ldr	r3, [r7, #0]
 8019a28:	2b24      	cmp	r3, #36	; 0x24
 8019a2a:	dd01      	ble.n	8019a30 <ee_number+0x34>
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	e0cc      	b.n	8019bca <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8019a30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019a32:	f003 0301 	and.w	r3, r3, #1
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d001      	beq.n	8019a3e <ee_number+0x42>
 8019a3a:	2330      	movs	r3, #48	; 0x30
 8019a3c:	e000      	b.n	8019a40 <ee_number+0x44>
 8019a3e:	2320      	movs	r3, #32
 8019a40:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8019a44:	2300      	movs	r3, #0
 8019a46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019a4c:	f003 0302 	and.w	r3, r3, #2
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d00b      	beq.n	8019a6c <ee_number+0x70>
  {
    if (num < 0)
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	da08      	bge.n	8019a6c <ee_number+0x70>
    {
      sign = '-';
 8019a5a:	232d      	movs	r3, #45	; 0x2d
 8019a5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	425b      	negs	r3, r3
 8019a64:	607b      	str	r3, [r7, #4]
      size--;
 8019a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019a68:	3b01      	subs	r3, #1
 8019a6a:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8019a6c:	2300      	movs	r3, #0
 8019a6e:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d120      	bne.n	8019ab8 <ee_number+0xbc>
    tmp[i++] = '0';
 8019a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a78:	1c5a      	adds	r2, r3, #1
 8019a7a:	657a      	str	r2, [r7, #84]	; 0x54
 8019a7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8019a80:	4413      	add	r3, r2
 8019a82:	2230      	movs	r2, #48	; 0x30
 8019a84:	f803 2c50 	strb.w	r2, [r3, #-80]
 8019a88:	e019      	b.n	8019abe <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	683a      	ldr	r2, [r7, #0]
 8019a8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8019a92:	fb02 f201 	mul.w	r2, r2, r1
 8019a96:	1a9b      	subs	r3, r3, r2
 8019a98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019a9a:	441a      	add	r2, r3
 8019a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a9e:	1c59      	adds	r1, r3, #1
 8019aa0:	6579      	str	r1, [r7, #84]	; 0x54
 8019aa2:	7812      	ldrb	r2, [r2, #0]
 8019aa4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019aa8:	440b      	add	r3, r1
 8019aaa:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8019aae:	687a      	ldr	r2, [r7, #4]
 8019ab0:	683b      	ldr	r3, [r7, #0]
 8019ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019ab6:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d1e5      	bne.n	8019a8a <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 8019abe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ac2:	429a      	cmp	r2, r3
 8019ac4:	dd01      	ble.n	8019aca <ee_number+0xce>
 8019ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019aca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ace:	1ad3      	subs	r3, r2, r3
 8019ad0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8019ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019ad4:	f003 0301 	and.w	r3, r3, #1
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d112      	bne.n	8019b02 <ee_number+0x106>
 8019adc:	e00c      	b.n	8019af8 <ee_number+0xfc>
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	1c5a      	adds	r2, r3, #1
 8019ae2:	60fa      	str	r2, [r7, #12]
 8019ae4:	2220      	movs	r2, #32
 8019ae6:	701a      	strb	r2, [r3, #0]
 8019ae8:	68bb      	ldr	r3, [r7, #8]
 8019aea:	3b01      	subs	r3, #1
 8019aec:	60bb      	str	r3, [r7, #8]
 8019aee:	68bb      	ldr	r3, [r7, #8]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d101      	bne.n	8019af8 <ee_number+0xfc>
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	e068      	b.n	8019bca <ee_number+0x1ce>
 8019af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019afa:	1e5a      	subs	r2, r3, #1
 8019afc:	66ba      	str	r2, [r7, #104]	; 0x68
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	dced      	bgt.n	8019ade <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 8019b02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d01b      	beq.n	8019b42 <ee_number+0x146>
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	1c5a      	adds	r2, r3, #1
 8019b0e:	60fa      	str	r2, [r7, #12]
 8019b10:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019b14:	701a      	strb	r2, [r3, #0]
 8019b16:	68bb      	ldr	r3, [r7, #8]
 8019b18:	3b01      	subs	r3, #1
 8019b1a:	60bb      	str	r3, [r7, #8]
 8019b1c:	68bb      	ldr	r3, [r7, #8]
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d10f      	bne.n	8019b42 <ee_number+0x146>
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	e051      	b.n	8019bca <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	1c5a      	adds	r2, r3, #1
 8019b2a:	60fa      	str	r2, [r7, #12]
 8019b2c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019b30:	701a      	strb	r2, [r3, #0]
 8019b32:	68bb      	ldr	r3, [r7, #8]
 8019b34:	3b01      	subs	r3, #1
 8019b36:	60bb      	str	r3, [r7, #8]
 8019b38:	68bb      	ldr	r3, [r7, #8]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d101      	bne.n	8019b42 <ee_number+0x146>
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	e043      	b.n	8019bca <ee_number+0x1ce>
 8019b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019b44:	1e5a      	subs	r2, r3, #1
 8019b46:	66ba      	str	r2, [r7, #104]	; 0x68
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	dcec      	bgt.n	8019b26 <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019b4c:	e00c      	b.n	8019b68 <ee_number+0x16c>
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	1c5a      	adds	r2, r3, #1
 8019b52:	60fa      	str	r2, [r7, #12]
 8019b54:	2230      	movs	r2, #48	; 0x30
 8019b56:	701a      	strb	r2, [r3, #0]
 8019b58:	68bb      	ldr	r3, [r7, #8]
 8019b5a:	3b01      	subs	r3, #1
 8019b5c:	60bb      	str	r3, [r7, #8]
 8019b5e:	68bb      	ldr	r3, [r7, #8]
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d101      	bne.n	8019b68 <ee_number+0x16c>
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	e030      	b.n	8019bca <ee_number+0x1ce>
 8019b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019b6a:	1e5a      	subs	r2, r3, #1
 8019b6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019b6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019b70:	429a      	cmp	r2, r3
 8019b72:	dbec      	blt.n	8019b4e <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8019b74:	e010      	b.n	8019b98 <ee_number+0x19c>
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	1c5a      	adds	r2, r3, #1
 8019b7a:	60fa      	str	r2, [r7, #12]
 8019b7c:	f107 0110 	add.w	r1, r7, #16
 8019b80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019b82:	440a      	add	r2, r1
 8019b84:	7812      	ldrb	r2, [r2, #0]
 8019b86:	701a      	strb	r2, [r3, #0]
 8019b88:	68bb      	ldr	r3, [r7, #8]
 8019b8a:	3b01      	subs	r3, #1
 8019b8c:	60bb      	str	r3, [r7, #8]
 8019b8e:	68bb      	ldr	r3, [r7, #8]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d101      	bne.n	8019b98 <ee_number+0x19c>
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	e018      	b.n	8019bca <ee_number+0x1ce>
 8019b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019b9a:	1e5a      	subs	r2, r3, #1
 8019b9c:	657a      	str	r2, [r7, #84]	; 0x54
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	dce9      	bgt.n	8019b76 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 8019ba2:	e00c      	b.n	8019bbe <ee_number+0x1c2>
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	1c5a      	adds	r2, r3, #1
 8019ba8:	60fa      	str	r2, [r7, #12]
 8019baa:	2220      	movs	r2, #32
 8019bac:	701a      	strb	r2, [r3, #0]
 8019bae:	68bb      	ldr	r3, [r7, #8]
 8019bb0:	3b01      	subs	r3, #1
 8019bb2:	60bb      	str	r3, [r7, #8]
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d101      	bne.n	8019bbe <ee_number+0x1c2>
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	e005      	b.n	8019bca <ee_number+0x1ce>
 8019bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019bc0:	1e5a      	subs	r2, r3, #1
 8019bc2:	66ba      	str	r2, [r7, #104]	; 0x68
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	dced      	bgt.n	8019ba4 <ee_number+0x1a8>

  return str;
 8019bc8:	68fb      	ldr	r3, [r7, #12]
}
 8019bca:	4618      	mov	r0, r3
 8019bcc:	3764      	adds	r7, #100	; 0x64
 8019bce:	46bd      	mov	sp, r7
 8019bd0:	bc80      	pop	{r7}
 8019bd2:	4770      	bx	lr
 8019bd4:	20000124 	.word	0x20000124
 8019bd8:	20000128 	.word	0x20000128

08019bdc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8019bdc:	b580      	push	{r7, lr}
 8019bde:	b092      	sub	sp, #72	; 0x48
 8019be0:	af04      	add	r7, sp, #16
 8019be2:	60f8      	str	r0, [r7, #12]
 8019be4:	60b9      	str	r1, [r7, #8]
 8019be6:	607a      	str	r2, [r7, #4]
 8019be8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8019bea:	68bb      	ldr	r3, [r7, #8]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	dc01      	bgt.n	8019bf4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	e142      	b.n	8019e7a <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019bf8:	e12a      	b.n	8019e50 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 8019bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	1ad2      	subs	r2, r2, r3
 8019c00:	68bb      	ldr	r3, [r7, #8]
 8019c02:	3b01      	subs	r3, #1
 8019c04:	429a      	cmp	r2, r3
 8019c06:	f280 8131 	bge.w	8019e6c <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	781b      	ldrb	r3, [r3, #0]
 8019c0e:	2b25      	cmp	r3, #37	; 0x25
 8019c10:	d006      	beq.n	8019c20 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8019c12:	687a      	ldr	r2, [r7, #4]
 8019c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c16:	1c59      	adds	r1, r3, #1
 8019c18:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019c1a:	7812      	ldrb	r2, [r2, #0]
 8019c1c:	701a      	strb	r2, [r3, #0]
      continue;
 8019c1e:	e114      	b.n	8019e4a <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 8019c20:	2300      	movs	r3, #0
 8019c22:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	3301      	adds	r3, #1
 8019c28:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	781b      	ldrb	r3, [r3, #0]
 8019c2e:	2b30      	cmp	r3, #48	; 0x30
 8019c30:	d103      	bne.n	8019c3a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8019c32:	6a3b      	ldr	r3, [r7, #32]
 8019c34:	f043 0301 	orr.w	r3, r3, #1
 8019c38:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 8019c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8019c3e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	781b      	ldrb	r3, [r3, #0]
 8019c44:	2b2f      	cmp	r3, #47	; 0x2f
 8019c46:	d908      	bls.n	8019c5a <tiny_vsnprintf_like+0x7e>
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	781b      	ldrb	r3, [r3, #0]
 8019c4c:	2b39      	cmp	r3, #57	; 0x39
 8019c4e:	d804      	bhi.n	8019c5a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8019c50:	1d3b      	adds	r3, r7, #4
 8019c52:	4618      	mov	r0, r3
 8019c54:	f7ff feac 	bl	80199b0 <ee_skip_atoi>
 8019c58:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 8019c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8019c5e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 8019c60:	f04f 33ff 	mov.w	r3, #4294967295
 8019c64:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 8019c66:	230a      	movs	r3, #10
 8019c68:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	781b      	ldrb	r3, [r3, #0]
 8019c6e:	3b58      	subs	r3, #88	; 0x58
 8019c70:	2b20      	cmp	r3, #32
 8019c72:	f200 8094 	bhi.w	8019d9e <tiny_vsnprintf_like+0x1c2>
 8019c76:	a201      	add	r2, pc, #4	; (adr r2, 8019c7c <tiny_vsnprintf_like+0xa0>)
 8019c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c7c:	08019d87 	.word	0x08019d87
 8019c80:	08019d9f 	.word	0x08019d9f
 8019c84:	08019d9f 	.word	0x08019d9f
 8019c88:	08019d9f 	.word	0x08019d9f
 8019c8c:	08019d9f 	.word	0x08019d9f
 8019c90:	08019d9f 	.word	0x08019d9f
 8019c94:	08019d9f 	.word	0x08019d9f
 8019c98:	08019d9f 	.word	0x08019d9f
 8019c9c:	08019d9f 	.word	0x08019d9f
 8019ca0:	08019d9f 	.word	0x08019d9f
 8019ca4:	08019d9f 	.word	0x08019d9f
 8019ca8:	08019d0b 	.word	0x08019d0b
 8019cac:	08019d95 	.word	0x08019d95
 8019cb0:	08019d9f 	.word	0x08019d9f
 8019cb4:	08019d9f 	.word	0x08019d9f
 8019cb8:	08019d9f 	.word	0x08019d9f
 8019cbc:	08019d9f 	.word	0x08019d9f
 8019cc0:	08019d95 	.word	0x08019d95
 8019cc4:	08019d9f 	.word	0x08019d9f
 8019cc8:	08019d9f 	.word	0x08019d9f
 8019ccc:	08019d9f 	.word	0x08019d9f
 8019cd0:	08019d9f 	.word	0x08019d9f
 8019cd4:	08019d9f 	.word	0x08019d9f
 8019cd8:	08019d9f 	.word	0x08019d9f
 8019cdc:	08019d9f 	.word	0x08019d9f
 8019ce0:	08019d9f 	.word	0x08019d9f
 8019ce4:	08019d9f 	.word	0x08019d9f
 8019ce8:	08019d2b 	.word	0x08019d2b
 8019cec:	08019d9f 	.word	0x08019d9f
 8019cf0:	08019deb 	.word	0x08019deb
 8019cf4:	08019d9f 	.word	0x08019d9f
 8019cf8:	08019d9f 	.word	0x08019d9f
 8019cfc:	08019d8f 	.word	0x08019d8f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8019d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d02:	1c5a      	adds	r2, r3, #1
 8019d04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019d06:	2220      	movs	r2, #32
 8019d08:	701a      	strb	r2, [r3, #0]
 8019d0a:	69fb      	ldr	r3, [r7, #28]
 8019d0c:	3b01      	subs	r3, #1
 8019d0e:	61fb      	str	r3, [r7, #28]
 8019d10:	69fb      	ldr	r3, [r7, #28]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	dcf4      	bgt.n	8019d00 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 8019d16:	683b      	ldr	r3, [r7, #0]
 8019d18:	1d1a      	adds	r2, r3, #4
 8019d1a:	603a      	str	r2, [r7, #0]
 8019d1c:	6819      	ldr	r1, [r3, #0]
 8019d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d20:	1c5a      	adds	r2, r3, #1
 8019d22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019d24:	b2ca      	uxtb	r2, r1
 8019d26:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8019d28:	e08f      	b.n	8019e4a <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 8019d2a:	683b      	ldr	r3, [r7, #0]
 8019d2c:	1d1a      	adds	r2, r3, #4
 8019d2e:	603a      	str	r2, [r7, #0]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 8019d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d101      	bne.n	8019d3e <tiny_vsnprintf_like+0x162>
 8019d3a:	4b52      	ldr	r3, [pc, #328]	; (8019e84 <tiny_vsnprintf_like+0x2a8>)
 8019d3c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 8019d3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019d40:	f7e6 fa1a 	bl	8000178 <strlen>
 8019d44:	4603      	mov	r3, r0
 8019d46:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8019d48:	e004      	b.n	8019d54 <tiny_vsnprintf_like+0x178>
 8019d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d4c:	1c5a      	adds	r2, r3, #1
 8019d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019d50:	2220      	movs	r2, #32
 8019d52:	701a      	strb	r2, [r3, #0]
 8019d54:	69fb      	ldr	r3, [r7, #28]
 8019d56:	1e5a      	subs	r2, r3, #1
 8019d58:	61fa      	str	r2, [r7, #28]
 8019d5a:	693a      	ldr	r2, [r7, #16]
 8019d5c:	429a      	cmp	r2, r3
 8019d5e:	dbf4      	blt.n	8019d4a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8019d60:	2300      	movs	r3, #0
 8019d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8019d64:	e00a      	b.n	8019d7c <tiny_vsnprintf_like+0x1a0>
 8019d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d68:	1c53      	adds	r3, r2, #1
 8019d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8019d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d6e:	1c59      	adds	r1, r3, #1
 8019d70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019d72:	7812      	ldrb	r2, [r2, #0]
 8019d74:	701a      	strb	r2, [r3, #0]
 8019d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d78:	3301      	adds	r3, #1
 8019d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8019d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d7e:	693b      	ldr	r3, [r7, #16]
 8019d80:	429a      	cmp	r2, r3
 8019d82:	dbf0      	blt.n	8019d66 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8019d84:	e061      	b.n	8019e4a <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8019d86:	6a3b      	ldr	r3, [r7, #32]
 8019d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d8c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 8019d8e:	2310      	movs	r3, #16
 8019d90:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8019d92:	e02d      	b.n	8019df0 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 8019d94:	6a3b      	ldr	r3, [r7, #32]
 8019d96:	f043 0302 	orr.w	r3, r3, #2
 8019d9a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8019d9c:	e025      	b.n	8019dea <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	781b      	ldrb	r3, [r3, #0]
 8019da2:	2b25      	cmp	r3, #37	; 0x25
 8019da4:	d004      	beq.n	8019db0 <tiny_vsnprintf_like+0x1d4>
 8019da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019da8:	1c5a      	adds	r2, r3, #1
 8019daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019dac:	2225      	movs	r2, #37	; 0x25
 8019dae:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 8019db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	1ad2      	subs	r2, r2, r3
 8019db6:	68bb      	ldr	r3, [r7, #8]
 8019db8:	3b01      	subs	r3, #1
 8019dba:	429a      	cmp	r2, r3
 8019dbc:	da17      	bge.n	8019dee <tiny_vsnprintf_like+0x212>
        if (*fmt)
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	781b      	ldrb	r3, [r3, #0]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d006      	beq.n	8019dd4 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 8019dc6:	687a      	ldr	r2, [r7, #4]
 8019dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dca:	1c59      	adds	r1, r3, #1
 8019dcc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019dce:	7812      	ldrb	r2, [r2, #0]
 8019dd0:	701a      	strb	r2, [r3, #0]
 8019dd2:	e002      	b.n	8019dda <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	3b01      	subs	r3, #1
 8019dd8:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 8019dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	1ad2      	subs	r2, r2, r3
 8019de0:	68bb      	ldr	r3, [r7, #8]
 8019de2:	3b01      	subs	r3, #1
 8019de4:	429a      	cmp	r2, r3
 8019de6:	db2f      	blt.n	8019e48 <tiny_vsnprintf_like+0x26c>
 8019de8:	e002      	b.n	8019df0 <tiny_vsnprintf_like+0x214>
        break;
 8019dea:	bf00      	nop
 8019dec:	e000      	b.n	8019df0 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 8019dee:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8019df0:	697b      	ldr	r3, [r7, #20]
 8019df2:	2b6c      	cmp	r3, #108	; 0x6c
 8019df4:	d105      	bne.n	8019e02 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 8019df6:	683b      	ldr	r3, [r7, #0]
 8019df8:	1d1a      	adds	r2, r3, #4
 8019dfa:	603a      	str	r2, [r7, #0]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8019e00:	e00f      	b.n	8019e22 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 8019e02:	6a3b      	ldr	r3, [r7, #32]
 8019e04:	f003 0302 	and.w	r3, r3, #2
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d005      	beq.n	8019e18 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	1d1a      	adds	r2, r3, #4
 8019e10:	603a      	str	r2, [r7, #0]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	637b      	str	r3, [r7, #52]	; 0x34
 8019e16:	e004      	b.n	8019e22 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 8019e18:	683b      	ldr	r3, [r7, #0]
 8019e1a:	1d1a      	adds	r2, r3, #4
 8019e1c:	603a      	str	r2, [r7, #0]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8019e22:	68bb      	ldr	r3, [r7, #8]
 8019e24:	1e5a      	subs	r2, r3, #1
 8019e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	1acb      	subs	r3, r1, r3
 8019e2c:	1ad1      	subs	r1, r2, r3
 8019e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019e30:	6a3b      	ldr	r3, [r7, #32]
 8019e32:	9302      	str	r3, [sp, #8]
 8019e34:	69bb      	ldr	r3, [r7, #24]
 8019e36:	9301      	str	r3, [sp, #4]
 8019e38:	69fb      	ldr	r3, [r7, #28]
 8019e3a:	9300      	str	r3, [sp, #0]
 8019e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019e40:	f7ff fddc 	bl	80199fc <ee_number>
 8019e44:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019e46:	e000      	b.n	8019e4a <tiny_vsnprintf_like+0x26e>
        continue;
 8019e48:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	3301      	adds	r3, #1
 8019e4e:	607b      	str	r3, [r7, #4]
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	781b      	ldrb	r3, [r3, #0]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	f47f aed0 	bne.w	8019bfa <tiny_vsnprintf_like+0x1e>
 8019e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	1ad2      	subs	r2, r2, r3
 8019e60:	68bb      	ldr	r3, [r7, #8]
 8019e62:	3b01      	subs	r3, #1
 8019e64:	429a      	cmp	r2, r3
 8019e66:	f6bf aec8 	bge.w	8019bfa <tiny_vsnprintf_like+0x1e>
 8019e6a:	e000      	b.n	8019e6e <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 8019e6c:	bf00      	nop
  }

  *str = '\0';
 8019e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e70:	2200      	movs	r2, #0
 8019e72:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8019e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	1ad3      	subs	r3, r2, r3
}
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	3738      	adds	r7, #56	; 0x38
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	bd80      	pop	{r7, pc}
 8019e82:	bf00      	nop
 8019e84:	0801b3bc 	.word	0x0801b3bc

08019e88 <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b088      	sub	sp, #32
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	60f8      	str	r0, [r7, #12]
 8019e90:	60b9      	str	r1, [r7, #8]
 8019e92:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e94:	f3ef 8310 	mrs	r3, PRIMASK
 8019e98:	617b      	str	r3, [r7, #20]
  return(result);
 8019e9a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8019e9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019e9e:	b672      	cpsid	i
}
 8019ea0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019ea2:	68f8      	ldr	r0, [r7, #12]
 8019ea4:	f000 f83e 	bl	8019f24 <SEQ_BitPosition>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	4619      	mov	r1, r3
 8019eac:	4a06      	ldr	r2, [pc, #24]	; (8019ec8 <UTIL_SEQ_RegTask+0x40>)
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019eb4:	69fb      	ldr	r3, [r7, #28]
 8019eb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019eb8:	69bb      	ldr	r3, [r7, #24]
 8019eba:	f383 8810 	msr	PRIMASK, r3
}
 8019ebe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019ec0:	bf00      	nop
}
 8019ec2:	3720      	adds	r7, #32
 8019ec4:	46bd      	mov	sp, r7
 8019ec6:	bd80      	pop	{r7, pc}
 8019ec8:	20000ef0 	.word	0x20000ef0

08019ecc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019ecc:	b480      	push	{r7}
 8019ece:	b087      	sub	sp, #28
 8019ed0:	af00      	add	r7, sp, #0
 8019ed2:	6078      	str	r0, [r7, #4]
 8019ed4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8019eda:	60fb      	str	r3, [r7, #12]
  return(result);
 8019edc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019ede:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019ee0:	b672      	cpsid	i
}
 8019ee2:	bf00      	nop

  TaskSet |= TaskId_bm;
 8019ee4:	4b0d      	ldr	r3, [pc, #52]	; (8019f1c <UTIL_SEQ_SetTask+0x50>)
 8019ee6:	681a      	ldr	r2, [r3, #0]
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	4313      	orrs	r3, r2
 8019eec:	4a0b      	ldr	r2, [pc, #44]	; (8019f1c <UTIL_SEQ_SetTask+0x50>)
 8019eee:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019ef0:	4a0b      	ldr	r2, [pc, #44]	; (8019f20 <UTIL_SEQ_SetTask+0x54>)
 8019ef2:	683b      	ldr	r3, [r7, #0]
 8019ef4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	431a      	orrs	r2, r3
 8019efc:	4908      	ldr	r1, [pc, #32]	; (8019f20 <UTIL_SEQ_SetTask+0x54>)
 8019efe:	683b      	ldr	r3, [r7, #0]
 8019f00:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8019f04:	697b      	ldr	r3, [r7, #20]
 8019f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f08:	693b      	ldr	r3, [r7, #16]
 8019f0a:	f383 8810 	msr	PRIMASK, r3
}
 8019f0e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019f10:	bf00      	nop
}
 8019f12:	371c      	adds	r7, #28
 8019f14:	46bd      	mov	sp, r7
 8019f16:	bc80      	pop	{r7}
 8019f18:	4770      	bx	lr
 8019f1a:	bf00      	nop
 8019f1c:	20000eec 	.word	0x20000eec
 8019f20:	20000f70 	.word	0x20000f70

08019f24 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8019f24:	b480      	push	{r7}
 8019f26:	b085      	sub	sp, #20
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8019f2c:	2300      	movs	r3, #0
 8019f2e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	0c1b      	lsrs	r3, r3, #16
 8019f34:	041b      	lsls	r3, r3, #16
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d104      	bne.n	8019f44 <SEQ_BitPosition+0x20>
 8019f3a:	2310      	movs	r3, #16
 8019f3c:	73fb      	strb	r3, [r7, #15]
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	041b      	lsls	r3, r3, #16
 8019f42:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d105      	bne.n	8019f5a <SEQ_BitPosition+0x36>
 8019f4e:	7bfb      	ldrb	r3, [r7, #15]
 8019f50:	3308      	adds	r3, #8
 8019f52:	73fb      	strb	r3, [r7, #15]
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	021b      	lsls	r3, r3, #8
 8019f58:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d105      	bne.n	8019f70 <SEQ_BitPosition+0x4c>
 8019f64:	7bfb      	ldrb	r3, [r7, #15]
 8019f66:	3304      	adds	r3, #4
 8019f68:	73fb      	strb	r3, [r7, #15]
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	011b      	lsls	r3, r3, #4
 8019f6e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	0f1b      	lsrs	r3, r3, #28
 8019f74:	4a06      	ldr	r2, [pc, #24]	; (8019f90 <SEQ_BitPosition+0x6c>)
 8019f76:	5cd2      	ldrb	r2, [r2, r3]
 8019f78:	7bfb      	ldrb	r3, [r7, #15]
 8019f7a:	4413      	add	r3, r2
 8019f7c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8019f7e:	7bfb      	ldrb	r3, [r7, #15]
 8019f80:	f1c3 031f 	rsb	r3, r3, #31
 8019f84:	b2db      	uxtb	r3, r3
}
 8019f86:	4618      	mov	r0, r3
 8019f88:	3714      	adds	r7, #20
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bc80      	pop	{r7}
 8019f8e:	4770      	bx	lr
 8019f90:	0801b980 	.word	0x0801b980

08019f94 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8019f98:	4b04      	ldr	r3, [pc, #16]	; (8019fac <UTIL_TIMER_Init+0x18>)
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8019f9e:	4b04      	ldr	r3, [pc, #16]	; (8019fb0 <UTIL_TIMER_Init+0x1c>)
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	4798      	blx	r3
 8019fa4:	4603      	mov	r3, r0
}
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	bd80      	pop	{r7, pc}
 8019faa:	bf00      	nop
 8019fac:	20000f80 	.word	0x20000f80
 8019fb0:	0801b468 	.word	0x0801b468

08019fb4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b084      	sub	sp, #16
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	60f8      	str	r0, [r7, #12]
 8019fbc:	60b9      	str	r1, [r7, #8]
 8019fbe:	603b      	str	r3, [r7, #0]
 8019fc0:	4613      	mov	r3, r2
 8019fc2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d023      	beq.n	801a012 <UTIL_TIMER_Create+0x5e>
 8019fca:	683b      	ldr	r3, [r7, #0]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d020      	beq.n	801a012 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	2200      	movs	r2, #0
 8019fd4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8019fd6:	4b11      	ldr	r3, [pc, #68]	; (801a01c <UTIL_TIMER_Create+0x68>)
 8019fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fda:	68b8      	ldr	r0, [r7, #8]
 8019fdc:	4798      	blx	r3
 8019fde:	4602      	mov	r2, r0
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	2200      	movs	r2, #0
 8019fe8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	2200      	movs	r2, #0
 8019fee:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	2200      	movs	r2, #0
 8019ff4:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	683a      	ldr	r2, [r7, #0]
 8019ffa:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	69ba      	ldr	r2, [r7, #24]
 801a000:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	79fa      	ldrb	r2, [r7, #7]
 801a006:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	2200      	movs	r2, #0
 801a00c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a00e:	2300      	movs	r3, #0
 801a010:	e000      	b.n	801a014 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a012:	2301      	movs	r3, #1
  }
}
 801a014:	4618      	mov	r0, r3
 801a016:	3710      	adds	r7, #16
 801a018:	46bd      	mov	sp, r7
 801a01a:	bd80      	pop	{r7, pc}
 801a01c:	0801b468 	.word	0x0801b468

0801a020 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b08a      	sub	sp, #40	; 0x28
 801a024:	af00      	add	r7, sp, #0
 801a026:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a028:	2300      	movs	r3, #0
 801a02a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d056      	beq.n	801a0e2 <UTIL_TIMER_Start+0xc2>
 801a034:	6878      	ldr	r0, [r7, #4]
 801a036:	f000 f9a9 	bl	801a38c <TimerExists>
 801a03a:	4603      	mov	r3, r0
 801a03c:	f083 0301 	eor.w	r3, r3, #1
 801a040:	b2db      	uxtb	r3, r3
 801a042:	2b00      	cmp	r3, #0
 801a044:	d04d      	beq.n	801a0e2 <UTIL_TIMER_Start+0xc2>
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	7a5b      	ldrb	r3, [r3, #9]
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d149      	bne.n	801a0e2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a04e:	f3ef 8310 	mrs	r3, PRIMASK
 801a052:	613b      	str	r3, [r7, #16]
  return(result);
 801a054:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a056:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a058:	b672      	cpsid	i
}
 801a05a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	685b      	ldr	r3, [r3, #4]
 801a060:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a062:	4b24      	ldr	r3, [pc, #144]	; (801a0f4 <UTIL_TIMER_Start+0xd4>)
 801a064:	6a1b      	ldr	r3, [r3, #32]
 801a066:	4798      	blx	r3
 801a068:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a06a:	6a3a      	ldr	r2, [r7, #32]
 801a06c:	69bb      	ldr	r3, [r7, #24]
 801a06e:	429a      	cmp	r2, r3
 801a070:	d201      	bcs.n	801a076 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a072:	69bb      	ldr	r3, [r7, #24]
 801a074:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	6a3a      	ldr	r2, [r7, #32]
 801a07a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	2200      	movs	r2, #0
 801a080:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	2201      	movs	r2, #1
 801a086:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	2200      	movs	r2, #0
 801a08c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a08e:	4b1a      	ldr	r3, [pc, #104]	; (801a0f8 <UTIL_TIMER_Start+0xd8>)
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	2b00      	cmp	r3, #0
 801a094:	d106      	bne.n	801a0a4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a096:	4b17      	ldr	r3, [pc, #92]	; (801a0f4 <UTIL_TIMER_Start+0xd4>)
 801a098:	691b      	ldr	r3, [r3, #16]
 801a09a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a09c:	6878      	ldr	r0, [r7, #4]
 801a09e:	f000 f9eb 	bl	801a478 <TimerInsertNewHeadTimer>
 801a0a2:	e017      	b.n	801a0d4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a0a4:	4b13      	ldr	r3, [pc, #76]	; (801a0f4 <UTIL_TIMER_Start+0xd4>)
 801a0a6:	699b      	ldr	r3, [r3, #24]
 801a0a8:	4798      	blx	r3
 801a0aa:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	681a      	ldr	r2, [r3, #0]
 801a0b0:	697b      	ldr	r3, [r7, #20]
 801a0b2:	441a      	add	r2, r3
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	681a      	ldr	r2, [r3, #0]
 801a0bc:	4b0e      	ldr	r3, [pc, #56]	; (801a0f8 <UTIL_TIMER_Start+0xd8>)
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	429a      	cmp	r2, r3
 801a0c4:	d203      	bcs.n	801a0ce <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a0c6:	6878      	ldr	r0, [r7, #4]
 801a0c8:	f000 f9d6 	bl	801a478 <TimerInsertNewHeadTimer>
 801a0cc:	e002      	b.n	801a0d4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a0ce:	6878      	ldr	r0, [r7, #4]
 801a0d0:	f000 f9a2 	bl	801a418 <TimerInsertTimer>
 801a0d4:	69fb      	ldr	r3, [r7, #28]
 801a0d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	f383 8810 	msr	PRIMASK, r3
}
 801a0de:	bf00      	nop
  {
 801a0e0:	e002      	b.n	801a0e8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a0e2:	2301      	movs	r3, #1
 801a0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801a0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	3728      	adds	r7, #40	; 0x28
 801a0f0:	46bd      	mov	sp, r7
 801a0f2:	bd80      	pop	{r7, pc}
 801a0f4:	0801b468 	.word	0x0801b468
 801a0f8:	20000f80 	.word	0x20000f80

0801a0fc <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b088      	sub	sp, #32
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a104:	2300      	movs	r3, #0
 801a106:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d05b      	beq.n	801a1c6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a10e:	f3ef 8310 	mrs	r3, PRIMASK
 801a112:	60fb      	str	r3, [r7, #12]
  return(result);
 801a114:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a118:	b672      	cpsid	i
}
 801a11a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a11c:	4b2d      	ldr	r3, [pc, #180]	; (801a1d4 <UTIL_TIMER_Stop+0xd8>)
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a122:	4b2c      	ldr	r3, [pc, #176]	; (801a1d4 <UTIL_TIMER_Stop+0xd8>)
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	2201      	movs	r2, #1
 801a12c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a12e:	4b29      	ldr	r3, [pc, #164]	; (801a1d4 <UTIL_TIMER_Stop+0xd8>)
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d041      	beq.n	801a1ba <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	2200      	movs	r2, #0
 801a13a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a13c:	4b25      	ldr	r3, [pc, #148]	; (801a1d4 <UTIL_TIMER_Stop+0xd8>)
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	687a      	ldr	r2, [r7, #4]
 801a142:	429a      	cmp	r2, r3
 801a144:	d134      	bne.n	801a1b0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a146:	4b23      	ldr	r3, [pc, #140]	; (801a1d4 <UTIL_TIMER_Stop+0xd8>)
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	2200      	movs	r2, #0
 801a14c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a14e:	4b21      	ldr	r3, [pc, #132]	; (801a1d4 <UTIL_TIMER_Stop+0xd8>)
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	695b      	ldr	r3, [r3, #20]
 801a154:	2b00      	cmp	r3, #0
 801a156:	d00a      	beq.n	801a16e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a158:	4b1e      	ldr	r3, [pc, #120]	; (801a1d4 <UTIL_TIMER_Stop+0xd8>)
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	695b      	ldr	r3, [r3, #20]
 801a15e:	4a1d      	ldr	r2, [pc, #116]	; (801a1d4 <UTIL_TIMER_Stop+0xd8>)
 801a160:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a162:	4b1c      	ldr	r3, [pc, #112]	; (801a1d4 <UTIL_TIMER_Stop+0xd8>)
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	4618      	mov	r0, r3
 801a168:	f000 f92c 	bl	801a3c4 <TimerSetTimeout>
 801a16c:	e023      	b.n	801a1b6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a16e:	4b1a      	ldr	r3, [pc, #104]	; (801a1d8 <UTIL_TIMER_Stop+0xdc>)
 801a170:	68db      	ldr	r3, [r3, #12]
 801a172:	4798      	blx	r3
            TimerListHead = NULL;
 801a174:	4b17      	ldr	r3, [pc, #92]	; (801a1d4 <UTIL_TIMER_Stop+0xd8>)
 801a176:	2200      	movs	r2, #0
 801a178:	601a      	str	r2, [r3, #0]
 801a17a:	e01c      	b.n	801a1b6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a17c:	697a      	ldr	r2, [r7, #20]
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	429a      	cmp	r2, r3
 801a182:	d110      	bne.n	801a1a6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a184:	697b      	ldr	r3, [r7, #20]
 801a186:	695b      	ldr	r3, [r3, #20]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d006      	beq.n	801a19a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a18c:	697b      	ldr	r3, [r7, #20]
 801a18e:	695b      	ldr	r3, [r3, #20]
 801a190:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a192:	69bb      	ldr	r3, [r7, #24]
 801a194:	697a      	ldr	r2, [r7, #20]
 801a196:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a198:	e00d      	b.n	801a1b6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a19a:	2300      	movs	r3, #0
 801a19c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a19e:	69bb      	ldr	r3, [r7, #24]
 801a1a0:	697a      	ldr	r2, [r7, #20]
 801a1a2:	615a      	str	r2, [r3, #20]
            break;
 801a1a4:	e007      	b.n	801a1b6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a1a6:	697b      	ldr	r3, [r7, #20]
 801a1a8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a1aa:	697b      	ldr	r3, [r7, #20]
 801a1ac:	695b      	ldr	r3, [r3, #20]
 801a1ae:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a1b0:	697b      	ldr	r3, [r7, #20]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d1e2      	bne.n	801a17c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a1b6:	2300      	movs	r3, #0
 801a1b8:	77fb      	strb	r3, [r7, #31]
 801a1ba:	693b      	ldr	r3, [r7, #16]
 801a1bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1be:	68bb      	ldr	r3, [r7, #8]
 801a1c0:	f383 8810 	msr	PRIMASK, r3
}
 801a1c4:	e001      	b.n	801a1ca <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a1c6:	2301      	movs	r3, #1
 801a1c8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a1ca:	7ffb      	ldrb	r3, [r7, #31]
}
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	3720      	adds	r7, #32
 801a1d0:	46bd      	mov	sp, r7
 801a1d2:	bd80      	pop	{r7, pc}
 801a1d4:	20000f80 	.word	0x20000f80
 801a1d8:	0801b468 	.word	0x0801b468

0801a1dc <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	b084      	sub	sp, #16
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	6078      	str	r0, [r7, #4]
 801a1e4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a1e6:	2300      	movs	r3, #0
 801a1e8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d102      	bne.n	801a1f6 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a1f0:	2301      	movs	r3, #1
 801a1f2:	73fb      	strb	r3, [r7, #15]
 801a1f4:	e014      	b.n	801a220 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a1f6:	4b0d      	ldr	r3, [pc, #52]	; (801a22c <UTIL_TIMER_SetPeriod+0x50>)
 801a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1fa:	6838      	ldr	r0, [r7, #0]
 801a1fc:	4798      	blx	r3
 801a1fe:	4602      	mov	r2, r0
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a204:	6878      	ldr	r0, [r7, #4]
 801a206:	f000 f8c1 	bl	801a38c <TimerExists>
 801a20a:	4603      	mov	r3, r0
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d007      	beq.n	801a220 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a210:	6878      	ldr	r0, [r7, #4]
 801a212:	f7ff ff73 	bl	801a0fc <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a216:	6878      	ldr	r0, [r7, #4]
 801a218:	f7ff ff02 	bl	801a020 <UTIL_TIMER_Start>
 801a21c:	4603      	mov	r3, r0
 801a21e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a220:	7bfb      	ldrb	r3, [r7, #15]
}
 801a222:	4618      	mov	r0, r3
 801a224:	3710      	adds	r7, #16
 801a226:	46bd      	mov	sp, r7
 801a228:	bd80      	pop	{r7, pc}
 801a22a:	bf00      	nop
 801a22c:	0801b468 	.word	0x0801b468

0801a230 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801a230:	b590      	push	{r4, r7, lr}
 801a232:	b089      	sub	sp, #36	; 0x24
 801a234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a236:	f3ef 8310 	mrs	r3, PRIMASK
 801a23a:	60bb      	str	r3, [r7, #8]
  return(result);
 801a23c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a23e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a240:	b672      	cpsid	i
}
 801a242:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801a244:	4b38      	ldr	r3, [pc, #224]	; (801a328 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a246:	695b      	ldr	r3, [r3, #20]
 801a248:	4798      	blx	r3
 801a24a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801a24c:	4b36      	ldr	r3, [pc, #216]	; (801a328 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a24e:	691b      	ldr	r3, [r3, #16]
 801a250:	4798      	blx	r3
 801a252:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801a254:	693a      	ldr	r2, [r7, #16]
 801a256:	697b      	ldr	r3, [r7, #20]
 801a258:	1ad3      	subs	r3, r2, r3
 801a25a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801a25c:	4b33      	ldr	r3, [pc, #204]	; (801a32c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d037      	beq.n	801a2d4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801a264:	4b31      	ldr	r3, [pc, #196]	; (801a32c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801a26a:	69fb      	ldr	r3, [r7, #28]
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	68fa      	ldr	r2, [r7, #12]
 801a270:	429a      	cmp	r2, r3
 801a272:	d206      	bcs.n	801a282 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801a274:	69fb      	ldr	r3, [r7, #28]
 801a276:	681a      	ldr	r2, [r3, #0]
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	1ad2      	subs	r2, r2, r3
 801a27c:	69fb      	ldr	r3, [r7, #28]
 801a27e:	601a      	str	r2, [r3, #0]
 801a280:	e002      	b.n	801a288 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801a282:	69fb      	ldr	r3, [r7, #28]
 801a284:	2200      	movs	r2, #0
 801a286:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801a288:	69fb      	ldr	r3, [r7, #28]
 801a28a:	695b      	ldr	r3, [r3, #20]
 801a28c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801a28e:	69fb      	ldr	r3, [r7, #28]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d1ea      	bne.n	801a26a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a294:	e01e      	b.n	801a2d4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801a296:	4b25      	ldr	r3, [pc, #148]	; (801a32c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801a29c:	4b23      	ldr	r3, [pc, #140]	; (801a32c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	695b      	ldr	r3, [r3, #20]
 801a2a2:	4a22      	ldr	r2, [pc, #136]	; (801a32c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a2a4:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801a2a6:	69fb      	ldr	r3, [r7, #28]
 801a2a8:	2200      	movs	r2, #0
 801a2aa:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801a2ac:	69fb      	ldr	r3, [r7, #28]
 801a2ae:	2200      	movs	r2, #0
 801a2b0:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801a2b2:	69fb      	ldr	r3, [r7, #28]
 801a2b4:	68db      	ldr	r3, [r3, #12]
 801a2b6:	69fa      	ldr	r2, [r7, #28]
 801a2b8:	6912      	ldr	r2, [r2, #16]
 801a2ba:	4610      	mov	r0, r2
 801a2bc:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801a2be:	69fb      	ldr	r3, [r7, #28]
 801a2c0:	7adb      	ldrb	r3, [r3, #11]
 801a2c2:	2b01      	cmp	r3, #1
 801a2c4:	d106      	bne.n	801a2d4 <UTIL_TIMER_IRQ_Handler+0xa4>
 801a2c6:	69fb      	ldr	r3, [r7, #28]
 801a2c8:	7a9b      	ldrb	r3, [r3, #10]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d102      	bne.n	801a2d4 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801a2ce:	69f8      	ldr	r0, [r7, #28]
 801a2d0:	f7ff fea6 	bl	801a020 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a2d4:	4b15      	ldr	r3, [pc, #84]	; (801a32c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d00d      	beq.n	801a2f8 <UTIL_TIMER_IRQ_Handler+0xc8>
 801a2dc:	4b13      	ldr	r3, [pc, #76]	; (801a32c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d0d7      	beq.n	801a296 <UTIL_TIMER_IRQ_Handler+0x66>
 801a2e6:	4b11      	ldr	r3, [pc, #68]	; (801a32c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	681c      	ldr	r4, [r3, #0]
 801a2ec:	4b0e      	ldr	r3, [pc, #56]	; (801a328 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a2ee:	699b      	ldr	r3, [r3, #24]
 801a2f0:	4798      	blx	r3
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	429c      	cmp	r4, r3
 801a2f6:	d3ce      	bcc.n	801a296 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801a2f8:	4b0c      	ldr	r3, [pc, #48]	; (801a32c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d009      	beq.n	801a314 <UTIL_TIMER_IRQ_Handler+0xe4>
 801a300:	4b0a      	ldr	r3, [pc, #40]	; (801a32c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	7a1b      	ldrb	r3, [r3, #8]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d104      	bne.n	801a314 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801a30a:	4b08      	ldr	r3, [pc, #32]	; (801a32c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	4618      	mov	r0, r3
 801a310:	f000 f858 	bl	801a3c4 <TimerSetTimeout>
 801a314:	69bb      	ldr	r3, [r7, #24]
 801a316:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	f383 8810 	msr	PRIMASK, r3
}
 801a31e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801a320:	bf00      	nop
 801a322:	3724      	adds	r7, #36	; 0x24
 801a324:	46bd      	mov	sp, r7
 801a326:	bd90      	pop	{r4, r7, pc}
 801a328:	0801b468 	.word	0x0801b468
 801a32c:	20000f80 	.word	0x20000f80

0801a330 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b082      	sub	sp, #8
 801a334:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a336:	4b06      	ldr	r3, [pc, #24]	; (801a350 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a338:	69db      	ldr	r3, [r3, #28]
 801a33a:	4798      	blx	r3
 801a33c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a33e:	4b04      	ldr	r3, [pc, #16]	; (801a350 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a342:	6878      	ldr	r0, [r7, #4]
 801a344:	4798      	blx	r3
 801a346:	4603      	mov	r3, r0
}
 801a348:	4618      	mov	r0, r3
 801a34a:	3708      	adds	r7, #8
 801a34c:	46bd      	mov	sp, r7
 801a34e:	bd80      	pop	{r7, pc}
 801a350:	0801b468 	.word	0x0801b468

0801a354 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a354:	b580      	push	{r7, lr}
 801a356:	b084      	sub	sp, #16
 801a358:	af00      	add	r7, sp, #0
 801a35a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a35c:	4b0a      	ldr	r3, [pc, #40]	; (801a388 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a35e:	69db      	ldr	r3, [r3, #28]
 801a360:	4798      	blx	r3
 801a362:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a364:	4b08      	ldr	r3, [pc, #32]	; (801a388 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a368:	6878      	ldr	r0, [r7, #4]
 801a36a:	4798      	blx	r3
 801a36c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a36e:	4b06      	ldr	r3, [pc, #24]	; (801a388 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a372:	68f9      	ldr	r1, [r7, #12]
 801a374:	68ba      	ldr	r2, [r7, #8]
 801a376:	1a8a      	subs	r2, r1, r2
 801a378:	4610      	mov	r0, r2
 801a37a:	4798      	blx	r3
 801a37c:	4603      	mov	r3, r0
}
 801a37e:	4618      	mov	r0, r3
 801a380:	3710      	adds	r7, #16
 801a382:	46bd      	mov	sp, r7
 801a384:	bd80      	pop	{r7, pc}
 801a386:	bf00      	nop
 801a388:	0801b468 	.word	0x0801b468

0801a38c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a38c:	b480      	push	{r7}
 801a38e:	b085      	sub	sp, #20
 801a390:	af00      	add	r7, sp, #0
 801a392:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a394:	4b0a      	ldr	r3, [pc, #40]	; (801a3c0 <TimerExists+0x34>)
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a39a:	e008      	b.n	801a3ae <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a39c:	68fa      	ldr	r2, [r7, #12]
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	429a      	cmp	r2, r3
 801a3a2:	d101      	bne.n	801a3a8 <TimerExists+0x1c>
    {
      return true;
 801a3a4:	2301      	movs	r3, #1
 801a3a6:	e006      	b.n	801a3b6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	695b      	ldr	r3, [r3, #20]
 801a3ac:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d1f3      	bne.n	801a39c <TimerExists+0x10>
  }
  return false;
 801a3b4:	2300      	movs	r3, #0
}
 801a3b6:	4618      	mov	r0, r3
 801a3b8:	3714      	adds	r7, #20
 801a3ba:	46bd      	mov	sp, r7
 801a3bc:	bc80      	pop	{r7}
 801a3be:	4770      	bx	lr
 801a3c0:	20000f80 	.word	0x20000f80

0801a3c4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801a3c4:	b590      	push	{r4, r7, lr}
 801a3c6:	b085      	sub	sp, #20
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801a3cc:	4b11      	ldr	r3, [pc, #68]	; (801a414 <TimerSetTimeout+0x50>)
 801a3ce:	6a1b      	ldr	r3, [r3, #32]
 801a3d0:	4798      	blx	r3
 801a3d2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	2201      	movs	r2, #1
 801a3d8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	681c      	ldr	r4, [r3, #0]
 801a3de:	4b0d      	ldr	r3, [pc, #52]	; (801a414 <TimerSetTimeout+0x50>)
 801a3e0:	699b      	ldr	r3, [r3, #24]
 801a3e2:	4798      	blx	r3
 801a3e4:	4602      	mov	r2, r0
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	4413      	add	r3, r2
 801a3ea:	429c      	cmp	r4, r3
 801a3ec:	d207      	bcs.n	801a3fe <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801a3ee:	4b09      	ldr	r3, [pc, #36]	; (801a414 <TimerSetTimeout+0x50>)
 801a3f0:	699b      	ldr	r3, [r3, #24]
 801a3f2:	4798      	blx	r3
 801a3f4:	4602      	mov	r2, r0
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	441a      	add	r2, r3
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801a3fe:	4b05      	ldr	r3, [pc, #20]	; (801a414 <TimerSetTimeout+0x50>)
 801a400:	689b      	ldr	r3, [r3, #8]
 801a402:	687a      	ldr	r2, [r7, #4]
 801a404:	6812      	ldr	r2, [r2, #0]
 801a406:	4610      	mov	r0, r2
 801a408:	4798      	blx	r3
}
 801a40a:	bf00      	nop
 801a40c:	3714      	adds	r7, #20
 801a40e:	46bd      	mov	sp, r7
 801a410:	bd90      	pop	{r4, r7, pc}
 801a412:	bf00      	nop
 801a414:	0801b468 	.word	0x0801b468

0801a418 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801a418:	b480      	push	{r7}
 801a41a:	b085      	sub	sp, #20
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a420:	4b14      	ldr	r3, [pc, #80]	; (801a474 <TimerInsertTimer+0x5c>)
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801a426:	4b13      	ldr	r3, [pc, #76]	; (801a474 <TimerInsertTimer+0x5c>)
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	695b      	ldr	r3, [r3, #20]
 801a42c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801a42e:	e012      	b.n	801a456 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681a      	ldr	r2, [r3, #0]
 801a434:	68bb      	ldr	r3, [r7, #8]
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	429a      	cmp	r2, r3
 801a43a:	d905      	bls.n	801a448 <TimerInsertTimer+0x30>
    {
        cur = next;
 801a43c:	68bb      	ldr	r3, [r7, #8]
 801a43e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801a440:	68bb      	ldr	r3, [r7, #8]
 801a442:	695b      	ldr	r3, [r3, #20]
 801a444:	60bb      	str	r3, [r7, #8]
 801a446:	e006      	b.n	801a456 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	687a      	ldr	r2, [r7, #4]
 801a44c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	68ba      	ldr	r2, [r7, #8]
 801a452:	615a      	str	r2, [r3, #20]
        return;
 801a454:	e009      	b.n	801a46a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	695b      	ldr	r3, [r3, #20]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d1e8      	bne.n	801a430 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	687a      	ldr	r2, [r7, #4]
 801a462:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	2200      	movs	r2, #0
 801a468:	615a      	str	r2, [r3, #20]
}
 801a46a:	3714      	adds	r7, #20
 801a46c:	46bd      	mov	sp, r7
 801a46e:	bc80      	pop	{r7}
 801a470:	4770      	bx	lr
 801a472:	bf00      	nop
 801a474:	20000f80 	.word	0x20000f80

0801a478 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801a478:	b580      	push	{r7, lr}
 801a47a:	b084      	sub	sp, #16
 801a47c:	af00      	add	r7, sp, #0
 801a47e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a480:	4b0b      	ldr	r3, [pc, #44]	; (801a4b0 <TimerInsertNewHeadTimer+0x38>)
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d002      	beq.n	801a492 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	2200      	movs	r2, #0
 801a490:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	68fa      	ldr	r2, [r7, #12]
 801a496:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a498:	4a05      	ldr	r2, [pc, #20]	; (801a4b0 <TimerInsertNewHeadTimer+0x38>)
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a49e:	4b04      	ldr	r3, [pc, #16]	; (801a4b0 <TimerInsertNewHeadTimer+0x38>)
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f7ff ff8e 	bl	801a3c4 <TimerSetTimeout>
}
 801a4a8:	bf00      	nop
 801a4aa:	3710      	adds	r7, #16
 801a4ac:	46bd      	mov	sp, r7
 801a4ae:	bd80      	pop	{r7, pc}
 801a4b0:	20000f80 	.word	0x20000f80

0801a4b4 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801a4b4:	b580      	push	{r7, lr}
 801a4b6:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801a4b8:	2218      	movs	r2, #24
 801a4ba:	2100      	movs	r1, #0
 801a4bc:	4807      	ldr	r0, [pc, #28]	; (801a4dc <UTIL_ADV_TRACE_Init+0x28>)
 801a4be:	f7ff f8fe 	bl	80196be <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801a4c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a4c6:	2100      	movs	r1, #0
 801a4c8:	4805      	ldr	r0, [pc, #20]	; (801a4e0 <UTIL_ADV_TRACE_Init+0x2c>)
 801a4ca:	f7ff f8f8 	bl	80196be <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801a4ce:	4b05      	ldr	r3, [pc, #20]	; (801a4e4 <UTIL_ADV_TRACE_Init+0x30>)
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	4805      	ldr	r0, [pc, #20]	; (801a4e8 <UTIL_ADV_TRACE_Init+0x34>)
 801a4d4:	4798      	blx	r3
 801a4d6:	4603      	mov	r3, r0
}
 801a4d8:	4618      	mov	r0, r3
 801a4da:	bd80      	pop	{r7, pc}
 801a4dc:	20000f84 	.word	0x20000f84
 801a4e0:	20000f9c 	.word	0x20000f9c
 801a4e4:	0801b4a8 	.word	0x0801b4a8
 801a4e8:	0801a759 	.word	0x0801a759

0801a4ec <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801a4ec:	b480      	push	{r7}
 801a4ee:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a4f0:	4b06      	ldr	r3, [pc, #24]	; (801a50c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a4f2:	8a5a      	ldrh	r2, [r3, #18]
 801a4f4:	4b05      	ldr	r3, [pc, #20]	; (801a50c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a4f6:	8a1b      	ldrh	r3, [r3, #16]
 801a4f8:	429a      	cmp	r2, r3
 801a4fa:	d101      	bne.n	801a500 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801a4fc:	2301      	movs	r3, #1
 801a4fe:	e000      	b.n	801a502 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801a500:	2300      	movs	r3, #0
}
 801a502:	4618      	mov	r0, r3
 801a504:	46bd      	mov	sp, r7
 801a506:	bc80      	pop	{r7}
 801a508:	4770      	bx	lr
 801a50a:	bf00      	nop
 801a50c:	20000f84 	.word	0x20000f84

0801a510 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801a510:	b408      	push	{r3}
 801a512:	b580      	push	{r7, lr}
 801a514:	b08d      	sub	sp, #52	; 0x34
 801a516:	af00      	add	r7, sp, #0
 801a518:	60f8      	str	r0, [r7, #12]
 801a51a:	60b9      	str	r1, [r7, #8]
 801a51c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801a51e:	2300      	movs	r3, #0
 801a520:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801a522:	2300      	movs	r3, #0
 801a524:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801a526:	4b38      	ldr	r3, [pc, #224]	; (801a608 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a528:	7a1b      	ldrb	r3, [r3, #8]
 801a52a:	461a      	mov	r2, r3
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	4293      	cmp	r3, r2
 801a530:	d902      	bls.n	801a538 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801a532:	f06f 0304 	mvn.w	r3, #4
 801a536:	e05f      	b.n	801a5f8 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801a538:	4b33      	ldr	r3, [pc, #204]	; (801a608 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a53a:	68da      	ldr	r2, [r3, #12]
 801a53c:	68bb      	ldr	r3, [r7, #8]
 801a53e:	4013      	ands	r3, r2
 801a540:	68ba      	ldr	r2, [r7, #8]
 801a542:	429a      	cmp	r2, r3
 801a544:	d002      	beq.n	801a54c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801a546:	f06f 0305 	mvn.w	r3, #5
 801a54a:	e055      	b.n	801a5f8 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801a54c:	4b2e      	ldr	r3, [pc, #184]	; (801a608 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a54e:	685b      	ldr	r3, [r3, #4]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d00a      	beq.n	801a56a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d007      	beq.n	801a56a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801a55a:	4b2b      	ldr	r3, [pc, #172]	; (801a608 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a55c:	685b      	ldr	r3, [r3, #4]
 801a55e:	f107 0116 	add.w	r1, r7, #22
 801a562:	f107 0218 	add.w	r2, r7, #24
 801a566:	4610      	mov	r0, r2
 801a568:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801a56a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a56e:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a574:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a578:	4824      	ldr	r0, [pc, #144]	; (801a60c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a57a:	f7ff fb2f 	bl	8019bdc <tiny_vsnprintf_like>
 801a57e:	4603      	mov	r3, r0
 801a580:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801a582:	f000 f9f3 	bl	801a96c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801a586:	8afa      	ldrh	r2, [r7, #22]
 801a588:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a58a:	4413      	add	r3, r2
 801a58c:	b29b      	uxth	r3, r3
 801a58e:	f107 0214 	add.w	r2, r7, #20
 801a592:	4611      	mov	r1, r2
 801a594:	4618      	mov	r0, r3
 801a596:	f000 f96b 	bl	801a870 <TRACE_AllocateBufer>
 801a59a:	4603      	mov	r3, r0
 801a59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5a0:	d026      	beq.n	801a5f0 <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801a5a2:	2300      	movs	r3, #0
 801a5a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a5a6:	e00f      	b.n	801a5c8 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801a5a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a5aa:	8aba      	ldrh	r2, [r7, #20]
 801a5ac:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a5b0:	440b      	add	r3, r1
 801a5b2:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801a5b6:	4b16      	ldr	r3, [pc, #88]	; (801a610 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a5b8:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801a5ba:	8abb      	ldrh	r3, [r7, #20]
 801a5bc:	3301      	adds	r3, #1
 801a5be:	b29b      	uxth	r3, r3
 801a5c0:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801a5c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a5c4:	3301      	adds	r3, #1
 801a5c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a5c8:	8afb      	ldrh	r3, [r7, #22]
 801a5ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a5cc:	429a      	cmp	r2, r3
 801a5ce:	d3eb      	bcc.n	801a5a8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a5d0:	8abb      	ldrh	r3, [r7, #20]
 801a5d2:	461a      	mov	r2, r3
 801a5d4:	4b0e      	ldr	r3, [pc, #56]	; (801a610 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a5d6:	18d0      	adds	r0, r2, r3
 801a5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a5dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a5e0:	f7ff fafc 	bl	8019bdc <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801a5e4:	f000 f9e0 	bl	801a9a8 <TRACE_UnLock>

    return TRACE_Send();
 801a5e8:	f000 f832 	bl	801a650 <TRACE_Send>
 801a5ec:	4603      	mov	r3, r0
 801a5ee:	e003      	b.n	801a5f8 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801a5f0:	f000 f9da 	bl	801a9a8 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801a5f4:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801a5f8:	4618      	mov	r0, r3
 801a5fa:	3734      	adds	r7, #52	; 0x34
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a602:	b001      	add	sp, #4
 801a604:	4770      	bx	lr
 801a606:	bf00      	nop
 801a608:	20000f84 	.word	0x20000f84
 801a60c:	2000139c 	.word	0x2000139c
 801a610:	20000f9c 	.word	0x20000f9c

0801a614 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801a614:	b480      	push	{r7}
 801a616:	b083      	sub	sp, #12
 801a618:	af00      	add	r7, sp, #0
 801a61a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801a61c:	4a03      	ldr	r2, [pc, #12]	; (801a62c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	6053      	str	r3, [r2, #4]
}
 801a622:	bf00      	nop
 801a624:	370c      	adds	r7, #12
 801a626:	46bd      	mov	sp, r7
 801a628:	bc80      	pop	{r7}
 801a62a:	4770      	bx	lr
 801a62c:	20000f84 	.word	0x20000f84

0801a630 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801a630:	b480      	push	{r7}
 801a632:	b083      	sub	sp, #12
 801a634:	af00      	add	r7, sp, #0
 801a636:	4603      	mov	r3, r0
 801a638:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801a63a:	4a04      	ldr	r2, [pc, #16]	; (801a64c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801a63c:	79fb      	ldrb	r3, [r7, #7]
 801a63e:	7213      	strb	r3, [r2, #8]
}
 801a640:	bf00      	nop
 801a642:	370c      	adds	r7, #12
 801a644:	46bd      	mov	sp, r7
 801a646:	bc80      	pop	{r7}
 801a648:	4770      	bx	lr
 801a64a:	bf00      	nop
 801a64c:	20000f84 	.word	0x20000f84

0801a650 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801a650:	b580      	push	{r7, lr}
 801a652:	b088      	sub	sp, #32
 801a654:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801a656:	2300      	movs	r3, #0
 801a658:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801a65a:	2300      	movs	r3, #0
 801a65c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a65e:	f3ef 8310 	mrs	r3, PRIMASK
 801a662:	613b      	str	r3, [r7, #16]
  return(result);
 801a664:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a666:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a668:	b672      	cpsid	i
}
 801a66a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801a66c:	f000 f9ba 	bl	801a9e4 <TRACE_IsLocked>
 801a670:	4603      	mov	r3, r0
 801a672:	2b00      	cmp	r3, #0
 801a674:	d15d      	bne.n	801a732 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801a676:	f000 f979 	bl	801a96c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801a67a:	4b34      	ldr	r3, [pc, #208]	; (801a74c <TRACE_Send+0xfc>)
 801a67c:	8a1a      	ldrh	r2, [r3, #16]
 801a67e:	4b33      	ldr	r3, [pc, #204]	; (801a74c <TRACE_Send+0xfc>)
 801a680:	8a5b      	ldrh	r3, [r3, #18]
 801a682:	429a      	cmp	r2, r3
 801a684:	d04d      	beq.n	801a722 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a686:	4b31      	ldr	r3, [pc, #196]	; (801a74c <TRACE_Send+0xfc>)
 801a688:	789b      	ldrb	r3, [r3, #2]
 801a68a:	2b01      	cmp	r3, #1
 801a68c:	d117      	bne.n	801a6be <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801a68e:	4b2f      	ldr	r3, [pc, #188]	; (801a74c <TRACE_Send+0xfc>)
 801a690:	881a      	ldrh	r2, [r3, #0]
 801a692:	4b2e      	ldr	r3, [pc, #184]	; (801a74c <TRACE_Send+0xfc>)
 801a694:	8a1b      	ldrh	r3, [r3, #16]
 801a696:	1ad3      	subs	r3, r2, r3
 801a698:	b29a      	uxth	r2, r3
 801a69a:	4b2c      	ldr	r3, [pc, #176]	; (801a74c <TRACE_Send+0xfc>)
 801a69c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a69e:	4b2b      	ldr	r3, [pc, #172]	; (801a74c <TRACE_Send+0xfc>)
 801a6a0:	2202      	movs	r2, #2
 801a6a2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a6a4:	4b29      	ldr	r3, [pc, #164]	; (801a74c <TRACE_Send+0xfc>)
 801a6a6:	2200      	movs	r2, #0
 801a6a8:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a6aa:	4b28      	ldr	r3, [pc, #160]	; (801a74c <TRACE_Send+0xfc>)
 801a6ac:	8a9b      	ldrh	r3, [r3, #20]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d105      	bne.n	801a6be <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a6b2:	4b26      	ldr	r3, [pc, #152]	; (801a74c <TRACE_Send+0xfc>)
 801a6b4:	2200      	movs	r2, #0
 801a6b6:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a6b8:	4b24      	ldr	r3, [pc, #144]	; (801a74c <TRACE_Send+0xfc>)
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a6be:	4b23      	ldr	r3, [pc, #140]	; (801a74c <TRACE_Send+0xfc>)
 801a6c0:	789b      	ldrb	r3, [r3, #2]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d115      	bne.n	801a6f2 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a6c6:	4b21      	ldr	r3, [pc, #132]	; (801a74c <TRACE_Send+0xfc>)
 801a6c8:	8a5a      	ldrh	r2, [r3, #18]
 801a6ca:	4b20      	ldr	r3, [pc, #128]	; (801a74c <TRACE_Send+0xfc>)
 801a6cc:	8a1b      	ldrh	r3, [r3, #16]
 801a6ce:	429a      	cmp	r2, r3
 801a6d0:	d908      	bls.n	801a6e4 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a6d2:	4b1e      	ldr	r3, [pc, #120]	; (801a74c <TRACE_Send+0xfc>)
 801a6d4:	8a5a      	ldrh	r2, [r3, #18]
 801a6d6:	4b1d      	ldr	r3, [pc, #116]	; (801a74c <TRACE_Send+0xfc>)
 801a6d8:	8a1b      	ldrh	r3, [r3, #16]
 801a6da:	1ad3      	subs	r3, r2, r3
 801a6dc:	b29a      	uxth	r2, r3
 801a6de:	4b1b      	ldr	r3, [pc, #108]	; (801a74c <TRACE_Send+0xfc>)
 801a6e0:	829a      	strh	r2, [r3, #20]
 801a6e2:	e006      	b.n	801a6f2 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a6e4:	4b19      	ldr	r3, [pc, #100]	; (801a74c <TRACE_Send+0xfc>)
 801a6e6:	8a1b      	ldrh	r3, [r3, #16]
 801a6e8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a6ec:	b29a      	uxth	r2, r3
 801a6ee:	4b17      	ldr	r3, [pc, #92]	; (801a74c <TRACE_Send+0xfc>)
 801a6f0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a6f2:	4b16      	ldr	r3, [pc, #88]	; (801a74c <TRACE_Send+0xfc>)
 801a6f4:	8a1b      	ldrh	r3, [r3, #16]
 801a6f6:	461a      	mov	r2, r3
 801a6f8:	4b15      	ldr	r3, [pc, #84]	; (801a750 <TRACE_Send+0x100>)
 801a6fa:	4413      	add	r3, r2
 801a6fc:	61bb      	str	r3, [r7, #24]
 801a6fe:	697b      	ldr	r3, [r7, #20]
 801a700:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	f383 8810 	msr	PRIMASK, r3
}
 801a708:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801a70a:	f7e7 fa63 	bl	8001bd4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a70e:	4b11      	ldr	r3, [pc, #68]	; (801a754 <TRACE_Send+0x104>)
 801a710:	68db      	ldr	r3, [r3, #12]
 801a712:	4a0e      	ldr	r2, [pc, #56]	; (801a74c <TRACE_Send+0xfc>)
 801a714:	8a92      	ldrh	r2, [r2, #20]
 801a716:	4611      	mov	r1, r2
 801a718:	69b8      	ldr	r0, [r7, #24]
 801a71a:	4798      	blx	r3
 801a71c:	4603      	mov	r3, r0
 801a71e:	77fb      	strb	r3, [r7, #31]
 801a720:	e00d      	b.n	801a73e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801a722:	f000 f941 	bl	801a9a8 <TRACE_UnLock>
 801a726:	697b      	ldr	r3, [r7, #20]
 801a728:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a72a:	68bb      	ldr	r3, [r7, #8]
 801a72c:	f383 8810 	msr	PRIMASK, r3
}
 801a730:	e005      	b.n	801a73e <TRACE_Send+0xee>
 801a732:	697b      	ldr	r3, [r7, #20]
 801a734:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	f383 8810 	msr	PRIMASK, r3
}
 801a73c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801a73e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a742:	4618      	mov	r0, r3
 801a744:	3720      	adds	r7, #32
 801a746:	46bd      	mov	sp, r7
 801a748:	bd80      	pop	{r7, pc}
 801a74a:	bf00      	nop
 801a74c:	20000f84 	.word	0x20000f84
 801a750:	20000f9c 	.word	0x20000f9c
 801a754:	0801b4a8 	.word	0x0801b4a8

0801a758 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b088      	sub	sp, #32
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801a760:	2300      	movs	r3, #0
 801a762:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a764:	f3ef 8310 	mrs	r3, PRIMASK
 801a768:	617b      	str	r3, [r7, #20]
  return(result);
 801a76a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a76c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a76e:	b672      	cpsid	i
}
 801a770:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801a772:	4b3c      	ldr	r3, [pc, #240]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a774:	789b      	ldrb	r3, [r3, #2]
 801a776:	2b02      	cmp	r3, #2
 801a778:	d106      	bne.n	801a788 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a77a:	4b3a      	ldr	r3, [pc, #232]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a77c:	2200      	movs	r2, #0
 801a77e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a780:	4b38      	ldr	r3, [pc, #224]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a782:	2200      	movs	r2, #0
 801a784:	821a      	strh	r2, [r3, #16]
 801a786:	e00a      	b.n	801a79e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a788:	4b36      	ldr	r3, [pc, #216]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a78a:	8a1a      	ldrh	r2, [r3, #16]
 801a78c:	4b35      	ldr	r3, [pc, #212]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a78e:	8a9b      	ldrh	r3, [r3, #20]
 801a790:	4413      	add	r3, r2
 801a792:	b29b      	uxth	r3, r3
 801a794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a798:	b29a      	uxth	r2, r3
 801a79a:	4b32      	ldr	r3, [pc, #200]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a79c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801a79e:	4b31      	ldr	r3, [pc, #196]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7a0:	8a1a      	ldrh	r2, [r3, #16]
 801a7a2:	4b30      	ldr	r3, [pc, #192]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7a4:	8a5b      	ldrh	r3, [r3, #18]
 801a7a6:	429a      	cmp	r2, r3
 801a7a8:	d04d      	beq.n	801a846 <TRACE_TxCpltCallback+0xee>
 801a7aa:	4b2e      	ldr	r3, [pc, #184]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7ac:	8adb      	ldrh	r3, [r3, #22]
 801a7ae:	2b01      	cmp	r3, #1
 801a7b0:	d149      	bne.n	801a846 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a7b2:	4b2c      	ldr	r3, [pc, #176]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7b4:	789b      	ldrb	r3, [r3, #2]
 801a7b6:	2b01      	cmp	r3, #1
 801a7b8:	d117      	bne.n	801a7ea <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801a7ba:	4b2a      	ldr	r3, [pc, #168]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7bc:	881a      	ldrh	r2, [r3, #0]
 801a7be:	4b29      	ldr	r3, [pc, #164]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7c0:	8a1b      	ldrh	r3, [r3, #16]
 801a7c2:	1ad3      	subs	r3, r2, r3
 801a7c4:	b29a      	uxth	r2, r3
 801a7c6:	4b27      	ldr	r3, [pc, #156]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7c8:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a7ca:	4b26      	ldr	r3, [pc, #152]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7cc:	2202      	movs	r2, #2
 801a7ce:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a7d0:	4b24      	ldr	r3, [pc, #144]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a7d6:	4b23      	ldr	r3, [pc, #140]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7d8:	8a9b      	ldrh	r3, [r3, #20]
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d105      	bne.n	801a7ea <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a7de:	4b21      	ldr	r3, [pc, #132]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7e0:	2200      	movs	r2, #0
 801a7e2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a7e4:	4b1f      	ldr	r3, [pc, #124]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7e6:	2200      	movs	r2, #0
 801a7e8:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a7ea:	4b1e      	ldr	r3, [pc, #120]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7ec:	789b      	ldrb	r3, [r3, #2]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d115      	bne.n	801a81e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a7f2:	4b1c      	ldr	r3, [pc, #112]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7f4:	8a5a      	ldrh	r2, [r3, #18]
 801a7f6:	4b1b      	ldr	r3, [pc, #108]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a7f8:	8a1b      	ldrh	r3, [r3, #16]
 801a7fa:	429a      	cmp	r2, r3
 801a7fc:	d908      	bls.n	801a810 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a7fe:	4b19      	ldr	r3, [pc, #100]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a800:	8a5a      	ldrh	r2, [r3, #18]
 801a802:	4b18      	ldr	r3, [pc, #96]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a804:	8a1b      	ldrh	r3, [r3, #16]
 801a806:	1ad3      	subs	r3, r2, r3
 801a808:	b29a      	uxth	r2, r3
 801a80a:	4b16      	ldr	r3, [pc, #88]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a80c:	829a      	strh	r2, [r3, #20]
 801a80e:	e006      	b.n	801a81e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a810:	4b14      	ldr	r3, [pc, #80]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a812:	8a1b      	ldrh	r3, [r3, #16]
 801a814:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a818:	b29a      	uxth	r2, r3
 801a81a:	4b12      	ldr	r3, [pc, #72]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a81c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a81e:	4b11      	ldr	r3, [pc, #68]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a820:	8a1b      	ldrh	r3, [r3, #16]
 801a822:	461a      	mov	r2, r3
 801a824:	4b10      	ldr	r3, [pc, #64]	; (801a868 <TRACE_TxCpltCallback+0x110>)
 801a826:	4413      	add	r3, r2
 801a828:	61fb      	str	r3, [r7, #28]
 801a82a:	69bb      	ldr	r3, [r7, #24]
 801a82c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a82e:	693b      	ldr	r3, [r7, #16]
 801a830:	f383 8810 	msr	PRIMASK, r3
}
 801a834:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a836:	4b0d      	ldr	r3, [pc, #52]	; (801a86c <TRACE_TxCpltCallback+0x114>)
 801a838:	68db      	ldr	r3, [r3, #12]
 801a83a:	4a0a      	ldr	r2, [pc, #40]	; (801a864 <TRACE_TxCpltCallback+0x10c>)
 801a83c:	8a92      	ldrh	r2, [r2, #20]
 801a83e:	4611      	mov	r1, r2
 801a840:	69f8      	ldr	r0, [r7, #28]
 801a842:	4798      	blx	r3
 801a844:	e00a      	b.n	801a85c <TRACE_TxCpltCallback+0x104>
 801a846:	69bb      	ldr	r3, [r7, #24]
 801a848:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	f383 8810 	msr	PRIMASK, r3
}
 801a850:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801a852:	f7e7 f9c7 	bl	8001be4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801a856:	f000 f8a7 	bl	801a9a8 <TRACE_UnLock>
  }
}
 801a85a:	bf00      	nop
 801a85c:	bf00      	nop
 801a85e:	3720      	adds	r7, #32
 801a860:	46bd      	mov	sp, r7
 801a862:	bd80      	pop	{r7, pc}
 801a864:	20000f84 	.word	0x20000f84
 801a868:	20000f9c 	.word	0x20000f9c
 801a86c:	0801b4a8 	.word	0x0801b4a8

0801a870 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801a870:	b480      	push	{r7}
 801a872:	b087      	sub	sp, #28
 801a874:	af00      	add	r7, sp, #0
 801a876:	4603      	mov	r3, r0
 801a878:	6039      	str	r1, [r7, #0]
 801a87a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801a87c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a880:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a882:	f3ef 8310 	mrs	r3, PRIMASK
 801a886:	60fb      	str	r3, [r7, #12]
  return(result);
 801a888:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a88a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a88c:	b672      	cpsid	i
}
 801a88e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a890:	4b35      	ldr	r3, [pc, #212]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a892:	8a5a      	ldrh	r2, [r3, #18]
 801a894:	4b34      	ldr	r3, [pc, #208]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a896:	8a1b      	ldrh	r3, [r3, #16]
 801a898:	429a      	cmp	r2, r3
 801a89a:	d11b      	bne.n	801a8d4 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a89c:	4b32      	ldr	r3, [pc, #200]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a89e:	8a5b      	ldrh	r3, [r3, #18]
 801a8a0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a8a4:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801a8a6:	88fa      	ldrh	r2, [r7, #6]
 801a8a8:	8afb      	ldrh	r3, [r7, #22]
 801a8aa:	429a      	cmp	r2, r3
 801a8ac:	d33a      	bcc.n	801a924 <TRACE_AllocateBufer+0xb4>
 801a8ae:	4b2e      	ldr	r3, [pc, #184]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a8b0:	8a1b      	ldrh	r3, [r3, #16]
 801a8b2:	88fa      	ldrh	r2, [r7, #6]
 801a8b4:	429a      	cmp	r2, r3
 801a8b6:	d235      	bcs.n	801a924 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a8b8:	4b2b      	ldr	r3, [pc, #172]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a8ba:	2201      	movs	r2, #1
 801a8bc:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a8be:	4b2a      	ldr	r3, [pc, #168]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a8c0:	8a5a      	ldrh	r2, [r3, #18]
 801a8c2:	4b29      	ldr	r3, [pc, #164]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a8c4:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a8c6:	4b28      	ldr	r3, [pc, #160]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a8c8:	8a1b      	ldrh	r3, [r3, #16]
 801a8ca:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a8cc:	4b26      	ldr	r3, [pc, #152]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	825a      	strh	r2, [r3, #18]
 801a8d2:	e027      	b.n	801a924 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a8d4:	4b24      	ldr	r3, [pc, #144]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a8d6:	8a5a      	ldrh	r2, [r3, #18]
 801a8d8:	4b23      	ldr	r3, [pc, #140]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a8da:	8a1b      	ldrh	r3, [r3, #16]
 801a8dc:	429a      	cmp	r2, r3
 801a8de:	d91b      	bls.n	801a918 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a8e0:	4b21      	ldr	r3, [pc, #132]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a8e2:	8a5b      	ldrh	r3, [r3, #18]
 801a8e4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a8e8:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801a8ea:	88fa      	ldrh	r2, [r7, #6]
 801a8ec:	8afb      	ldrh	r3, [r7, #22]
 801a8ee:	429a      	cmp	r2, r3
 801a8f0:	d318      	bcc.n	801a924 <TRACE_AllocateBufer+0xb4>
 801a8f2:	4b1d      	ldr	r3, [pc, #116]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a8f4:	8a1b      	ldrh	r3, [r3, #16]
 801a8f6:	88fa      	ldrh	r2, [r7, #6]
 801a8f8:	429a      	cmp	r2, r3
 801a8fa:	d213      	bcs.n	801a924 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a8fc:	4b1a      	ldr	r3, [pc, #104]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a8fe:	2201      	movs	r2, #1
 801a900:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a902:	4b19      	ldr	r3, [pc, #100]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a904:	8a5a      	ldrh	r2, [r3, #18]
 801a906:	4b18      	ldr	r3, [pc, #96]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a908:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a90a:	4b17      	ldr	r3, [pc, #92]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a90c:	8a1b      	ldrh	r3, [r3, #16]
 801a90e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a910:	4b15      	ldr	r3, [pc, #84]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a912:	2200      	movs	r2, #0
 801a914:	825a      	strh	r2, [r3, #18]
 801a916:	e005      	b.n	801a924 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801a918:	4b13      	ldr	r3, [pc, #76]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a91a:	8a1a      	ldrh	r2, [r3, #16]
 801a91c:	4b12      	ldr	r3, [pc, #72]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a91e:	8a5b      	ldrh	r3, [r3, #18]
 801a920:	1ad3      	subs	r3, r2, r3
 801a922:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801a924:	8afa      	ldrh	r2, [r7, #22]
 801a926:	88fb      	ldrh	r3, [r7, #6]
 801a928:	429a      	cmp	r2, r3
 801a92a:	d90f      	bls.n	801a94c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801a92c:	4b0e      	ldr	r3, [pc, #56]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a92e:	8a5a      	ldrh	r2, [r3, #18]
 801a930:	683b      	ldr	r3, [r7, #0]
 801a932:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a934:	4b0c      	ldr	r3, [pc, #48]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a936:	8a5a      	ldrh	r2, [r3, #18]
 801a938:	88fb      	ldrh	r3, [r7, #6]
 801a93a:	4413      	add	r3, r2
 801a93c:	b29b      	uxth	r3, r3
 801a93e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a942:	b29a      	uxth	r2, r3
 801a944:	4b08      	ldr	r3, [pc, #32]	; (801a968 <TRACE_AllocateBufer+0xf8>)
 801a946:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801a948:	2300      	movs	r3, #0
 801a94a:	82bb      	strh	r3, [r7, #20]
 801a94c:	693b      	ldr	r3, [r7, #16]
 801a94e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a950:	68bb      	ldr	r3, [r7, #8]
 801a952:	f383 8810 	msr	PRIMASK, r3
}
 801a956:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801a958:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801a95c:	4618      	mov	r0, r3
 801a95e:	371c      	adds	r7, #28
 801a960:	46bd      	mov	sp, r7
 801a962:	bc80      	pop	{r7}
 801a964:	4770      	bx	lr
 801a966:	bf00      	nop
 801a968:	20000f84 	.word	0x20000f84

0801a96c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801a96c:	b480      	push	{r7}
 801a96e:	b085      	sub	sp, #20
 801a970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a972:	f3ef 8310 	mrs	r3, PRIMASK
 801a976:	607b      	str	r3, [r7, #4]
  return(result);
 801a978:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a97a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a97c:	b672      	cpsid	i
}
 801a97e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801a980:	4b08      	ldr	r3, [pc, #32]	; (801a9a4 <TRACE_Lock+0x38>)
 801a982:	8adb      	ldrh	r3, [r3, #22]
 801a984:	3301      	adds	r3, #1
 801a986:	b29a      	uxth	r2, r3
 801a988:	4b06      	ldr	r3, [pc, #24]	; (801a9a4 <TRACE_Lock+0x38>)
 801a98a:	82da      	strh	r2, [r3, #22]
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a990:	68bb      	ldr	r3, [r7, #8]
 801a992:	f383 8810 	msr	PRIMASK, r3
}
 801a996:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801a998:	bf00      	nop
 801a99a:	3714      	adds	r7, #20
 801a99c:	46bd      	mov	sp, r7
 801a99e:	bc80      	pop	{r7}
 801a9a0:	4770      	bx	lr
 801a9a2:	bf00      	nop
 801a9a4:	20000f84 	.word	0x20000f84

0801a9a8 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801a9a8:	b480      	push	{r7}
 801a9aa:	b085      	sub	sp, #20
 801a9ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9ae:	f3ef 8310 	mrs	r3, PRIMASK
 801a9b2:	607b      	str	r3, [r7, #4]
  return(result);
 801a9b4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a9b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9b8:	b672      	cpsid	i
}
 801a9ba:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801a9bc:	4b08      	ldr	r3, [pc, #32]	; (801a9e0 <TRACE_UnLock+0x38>)
 801a9be:	8adb      	ldrh	r3, [r3, #22]
 801a9c0:	3b01      	subs	r3, #1
 801a9c2:	b29a      	uxth	r2, r3
 801a9c4:	4b06      	ldr	r3, [pc, #24]	; (801a9e0 <TRACE_UnLock+0x38>)
 801a9c6:	82da      	strh	r2, [r3, #22]
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9cc:	68bb      	ldr	r3, [r7, #8]
 801a9ce:	f383 8810 	msr	PRIMASK, r3
}
 801a9d2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801a9d4:	bf00      	nop
 801a9d6:	3714      	adds	r7, #20
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bc80      	pop	{r7}
 801a9dc:	4770      	bx	lr
 801a9de:	bf00      	nop
 801a9e0:	20000f84 	.word	0x20000f84

0801a9e4 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801a9e4:	b480      	push	{r7}
 801a9e6:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801a9e8:	4b05      	ldr	r3, [pc, #20]	; (801aa00 <TRACE_IsLocked+0x1c>)
 801a9ea:	8adb      	ldrh	r3, [r3, #22]
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	bf14      	ite	ne
 801a9f0:	2301      	movne	r3, #1
 801a9f2:	2300      	moveq	r3, #0
 801a9f4:	b2db      	uxtb	r3, r3
}
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	46bd      	mov	sp, r7
 801a9fa:	bc80      	pop	{r7}
 801a9fc:	4770      	bx	lr
 801a9fe:	bf00      	nop
 801aa00:	20000f84 	.word	0x20000f84

0801aa04 <__libc_init_array>:
 801aa04:	b570      	push	{r4, r5, r6, lr}
 801aa06:	4d0d      	ldr	r5, [pc, #52]	; (801aa3c <__libc_init_array+0x38>)
 801aa08:	4c0d      	ldr	r4, [pc, #52]	; (801aa40 <__libc_init_array+0x3c>)
 801aa0a:	1b64      	subs	r4, r4, r5
 801aa0c:	10a4      	asrs	r4, r4, #2
 801aa0e:	2600      	movs	r6, #0
 801aa10:	42a6      	cmp	r6, r4
 801aa12:	d109      	bne.n	801aa28 <__libc_init_array+0x24>
 801aa14:	4d0b      	ldr	r5, [pc, #44]	; (801aa44 <__libc_init_array+0x40>)
 801aa16:	4c0c      	ldr	r4, [pc, #48]	; (801aa48 <__libc_init_array+0x44>)
 801aa18:	f000 f8a2 	bl	801ab60 <_init>
 801aa1c:	1b64      	subs	r4, r4, r5
 801aa1e:	10a4      	asrs	r4, r4, #2
 801aa20:	2600      	movs	r6, #0
 801aa22:	42a6      	cmp	r6, r4
 801aa24:	d105      	bne.n	801aa32 <__libc_init_array+0x2e>
 801aa26:	bd70      	pop	{r4, r5, r6, pc}
 801aa28:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa2c:	4798      	blx	r3
 801aa2e:	3601      	adds	r6, #1
 801aa30:	e7ee      	b.n	801aa10 <__libc_init_array+0xc>
 801aa32:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa36:	4798      	blx	r3
 801aa38:	3601      	adds	r6, #1
 801aa3a:	e7f2      	b.n	801aa22 <__libc_init_array+0x1e>
 801aa3c:	0801b998 	.word	0x0801b998
 801aa40:	0801b998 	.word	0x0801b998
 801aa44:	0801b998 	.word	0x0801b998
 801aa48:	0801b99c 	.word	0x0801b99c

0801aa4c <memset>:
 801aa4c:	4402      	add	r2, r0
 801aa4e:	4603      	mov	r3, r0
 801aa50:	4293      	cmp	r3, r2
 801aa52:	d100      	bne.n	801aa56 <memset+0xa>
 801aa54:	4770      	bx	lr
 801aa56:	f803 1b01 	strb.w	r1, [r3], #1
 801aa5a:	e7f9      	b.n	801aa50 <memset+0x4>
 801aa5c:	0000      	movs	r0, r0
	...

0801aa60 <floor>:
 801aa60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa64:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801aa68:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801aa6c:	2e13      	cmp	r6, #19
 801aa6e:	4602      	mov	r2, r0
 801aa70:	460b      	mov	r3, r1
 801aa72:	4607      	mov	r7, r0
 801aa74:	460c      	mov	r4, r1
 801aa76:	4605      	mov	r5, r0
 801aa78:	dc34      	bgt.n	801aae4 <floor+0x84>
 801aa7a:	2e00      	cmp	r6, #0
 801aa7c:	da15      	bge.n	801aaaa <floor+0x4a>
 801aa7e:	a334      	add	r3, pc, #208	; (adr r3, 801ab50 <floor+0xf0>)
 801aa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa84:	f7e5 fb86 	bl	8000194 <__adddf3>
 801aa88:	2200      	movs	r2, #0
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	f7e5 fdb6 	bl	80005fc <__aeabi_dcmpgt>
 801aa90:	b140      	cbz	r0, 801aaa4 <floor+0x44>
 801aa92:	2c00      	cmp	r4, #0
 801aa94:	da59      	bge.n	801ab4a <floor+0xea>
 801aa96:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801aa9a:	ea57 0503 	orrs.w	r5, r7, r3
 801aa9e:	d001      	beq.n	801aaa4 <floor+0x44>
 801aaa0:	4c2d      	ldr	r4, [pc, #180]	; (801ab58 <floor+0xf8>)
 801aaa2:	2500      	movs	r5, #0
 801aaa4:	4623      	mov	r3, r4
 801aaa6:	462f      	mov	r7, r5
 801aaa8:	e025      	b.n	801aaf6 <floor+0x96>
 801aaaa:	4a2c      	ldr	r2, [pc, #176]	; (801ab5c <floor+0xfc>)
 801aaac:	fa42 f806 	asr.w	r8, r2, r6
 801aab0:	ea01 0208 	and.w	r2, r1, r8
 801aab4:	4302      	orrs	r2, r0
 801aab6:	d01e      	beq.n	801aaf6 <floor+0x96>
 801aab8:	a325      	add	r3, pc, #148	; (adr r3, 801ab50 <floor+0xf0>)
 801aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aabe:	f7e5 fb69 	bl	8000194 <__adddf3>
 801aac2:	2200      	movs	r2, #0
 801aac4:	2300      	movs	r3, #0
 801aac6:	f7e5 fd99 	bl	80005fc <__aeabi_dcmpgt>
 801aaca:	2800      	cmp	r0, #0
 801aacc:	d0ea      	beq.n	801aaa4 <floor+0x44>
 801aace:	2c00      	cmp	r4, #0
 801aad0:	bfbe      	ittt	lt
 801aad2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801aad6:	fa43 f606 	asrlt.w	r6, r3, r6
 801aada:	19a4      	addlt	r4, r4, r6
 801aadc:	ea24 0408 	bic.w	r4, r4, r8
 801aae0:	2500      	movs	r5, #0
 801aae2:	e7df      	b.n	801aaa4 <floor+0x44>
 801aae4:	2e33      	cmp	r6, #51	; 0x33
 801aae6:	dd0a      	ble.n	801aafe <floor+0x9e>
 801aae8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801aaec:	d103      	bne.n	801aaf6 <floor+0x96>
 801aaee:	f7e5 fb51 	bl	8000194 <__adddf3>
 801aaf2:	4607      	mov	r7, r0
 801aaf4:	460b      	mov	r3, r1
 801aaf6:	4638      	mov	r0, r7
 801aaf8:	4619      	mov	r1, r3
 801aafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aafe:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801ab02:	f04f 32ff 	mov.w	r2, #4294967295
 801ab06:	fa22 f808 	lsr.w	r8, r2, r8
 801ab0a:	ea18 0f00 	tst.w	r8, r0
 801ab0e:	d0f2      	beq.n	801aaf6 <floor+0x96>
 801ab10:	a30f      	add	r3, pc, #60	; (adr r3, 801ab50 <floor+0xf0>)
 801ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab16:	f7e5 fb3d 	bl	8000194 <__adddf3>
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	2300      	movs	r3, #0
 801ab1e:	f7e5 fd6d 	bl	80005fc <__aeabi_dcmpgt>
 801ab22:	2800      	cmp	r0, #0
 801ab24:	d0be      	beq.n	801aaa4 <floor+0x44>
 801ab26:	2c00      	cmp	r4, #0
 801ab28:	da02      	bge.n	801ab30 <floor+0xd0>
 801ab2a:	2e14      	cmp	r6, #20
 801ab2c:	d103      	bne.n	801ab36 <floor+0xd6>
 801ab2e:	3401      	adds	r4, #1
 801ab30:	ea25 0508 	bic.w	r5, r5, r8
 801ab34:	e7b6      	b.n	801aaa4 <floor+0x44>
 801ab36:	2301      	movs	r3, #1
 801ab38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ab3c:	fa03 f606 	lsl.w	r6, r3, r6
 801ab40:	4435      	add	r5, r6
 801ab42:	42bd      	cmp	r5, r7
 801ab44:	bf38      	it	cc
 801ab46:	18e4      	addcc	r4, r4, r3
 801ab48:	e7f2      	b.n	801ab30 <floor+0xd0>
 801ab4a:	2500      	movs	r5, #0
 801ab4c:	462c      	mov	r4, r5
 801ab4e:	e7a9      	b.n	801aaa4 <floor+0x44>
 801ab50:	8800759c 	.word	0x8800759c
 801ab54:	7e37e43c 	.word	0x7e37e43c
 801ab58:	bff00000 	.word	0xbff00000
 801ab5c:	000fffff 	.word	0x000fffff

0801ab60 <_init>:
 801ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab62:	bf00      	nop
 801ab64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab66:	bc08      	pop	{r3}
 801ab68:	469e      	mov	lr, r3
 801ab6a:	4770      	bx	lr

0801ab6c <_fini>:
 801ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab6e:	bf00      	nop
 801ab70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab72:	bc08      	pop	{r3}
 801ab74:	469e      	mov	lr, r3
 801ab76:	4770      	bx	lr
